(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bs_dt_demo"] = factory();
	else
		root["bs_dt_demo"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bs-datatable/dist/bsdatatable.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-datatable/dist/bsdatatable.js ***!
  \*******************************************************/
/***/ ((module) => {

/*! For license information please see bsdatatable.js.LICENSE.txt */
!function(e,t){ true?module.exports=t():0}(self,(function(){return(()=>{var e={755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},c=r.push,u=r.indexOf,d={},p=d.toString,h=d.hasOwnProperty,f=h.toString,g=f.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,o,r=(n=n||b).createElement("script");if(r.text=e,t)for(i in _)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var x="3.6.0",C=function(e,t){return new C.fn.init(e,t)};function D(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:x,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},C.extend=C.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(C.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||C.isPlainObject(n)?n:{},o=!1,s[t]=C.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=h.call(t,"constructor")&&t.constructor)||f.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(D(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(D(Object(e))?C.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if(D(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return l(s)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=r[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var T=function(e){var t,n,i,o,r,s,a,l,c,u,d,p,h,f,g,m,v,y,b,_="sizzle"+1*new Date,w=e.document,E=0,x=0,C=le(),D=le(),T=le(),S=le(),O=function(e,t){return e===t&&(d=!0),0},N={}.hasOwnProperty,A=[],k=A.pop,R=A.push,I=A.push,L=A.slice,j=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\[[\\x20\\t\\r\\n\\f]*("+q+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+H+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",F=new RegExp(H+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),G=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(H+"|>"),z=new RegExp(B),V=new RegExp("^"+q+"$"),X={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},se=_e((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(A=L.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){I={apply:A.length?function(e,t){R.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,o){var r,a,c,u,d,f,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!o&&(p(t),t=t||h,g)){if(11!==w&&(d=Z.exec(e)))if(r=d[1]){if(9===w){if(!(c=t.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(y&&(c=y.getElementById(r))&&b(t,c)&&c.id===r)return i.push(c),i}else{if(d[2])return I.apply(i,t.getElementsByTagName(e)),i;if((r=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return I.apply(i,t.getElementsByClassName(r)),i}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&(U.test(e)||G.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,oe):t.setAttribute("id",u=_)),a=(f=s(e)).length;a--;)f[a]=(u?"#"+u:":scope")+" "+be(f[a]);v=f.join(",")}try{return I.apply(i,y.querySelectorAll(v)),i}catch(t){S(e,!0)}finally{u===_&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[_]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ge(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},r=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:w;return s!=h&&9===s.nodeType&&s.documentElement?(f=(h=s).documentElement,g=!r(h),w!=h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.scope=ue((function(e){return f.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(h.getElementsByClassName),n.getById=ue((function(e){return f.appendChild(e).id=_,!h.getElementsByName||!h.getElementsByName(_).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=J.test(h.querySelectorAll))&&(ue((function(e){var t;f.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+P+")"),e.querySelectorAll("[id~="+_+"-]").length||m.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",B)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(f.compareDocumentPosition),b=t||J.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==h||e.ownerDocument==w&&b(w,e)?-1:t==h||t.ownerDocument==w&&b(w,t)?1:u?j(u,e)-j(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],a=[t];if(!o||!r)return e==h?-1:t==h?1:o?-1:r?1:u?j(u,e)-j(u,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},h):h},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){S(t,!0)}return ae(t,h,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=h&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=h&&p(e);var o=i.attrHandle[t.toLowerCase()],r=o&&N.call(i.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==r?r:n.attributes||!g?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},ae.escape=function(e){return(e+"").replace(ie,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],o=0,r=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(O),d){for(;t=e[r++];)t===e[r]&&(o=i.push(r));for(;o--;)e.splice(i[o],1)}return u=null,e},o=ae.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=o(t);return n},i=ae.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+H+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=ae.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,h,f,g=r!==s?"nextSibling":"previousSibling",m=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(p=t;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=g="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?m.firstChild:m.lastChild],s&&y){for(b=(h=(c=(u=(d=(p=m)[_]||(p[_]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===E&&c[1])&&c[2],p=h&&m.childNodes[h];p=++h&&p&&p[g]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[E,h,b];break}}else if(y&&(b=h=(c=(u=(d=(p=t)[_]||(p[_]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===E&&c[1]),!1===b)for(;(p=++h&&p&&p[g]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((u=(d=p[_]||(p[_]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[E,b]),p!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,o=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[_]?o(t):o.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,r=o(e,t),s=r.length;s--;)e[i=j(e,r[s])]=!(n[i]=r[s])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],i=a(e.replace(W,"$1"));return i[_]?ce((function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return V.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return Y.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:me((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function _e(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=x++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,p=[E,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(u=(d=t[_]||(t[_]={}))[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===E&&c[1]===a)return p[2]=c[2];if(u[r]=p,p[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function Ee(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function xe(e,t,n,i,o,r){return i&&!i[_]&&(i=xe(i)),o&&!o[_]&&(o=xe(o,r)),ce((function(r,s,a,l){var c,u,d,p=[],h=[],f=s.length,g=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!r&&t?g:Ee(g,p,e,a,l),v=n?o||(r?e:f||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(c=Ee(v,h),i(c,[],a,l),u=c.length;u--;)(d=c[u])&&(v[h[u]]=!(m[h[u]]=d));if(r){if(o||e){if(o){for(c=[],u=v.length;u--;)(d=v[u])&&c.push(m[u]=d);o(null,v=[],c,l)}for(u=v.length;u--;)(d=v[u])&&(c=o?j(r,d):p[u])>-1&&(r[c]=!(s[c]=d))}}else v=Ee(v===s?v.splice(f,v.length):v),o?o(null,s,v,l):I.apply(s,v)}))}function Ce(e){for(var t,n,o,r=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],l=s?1:0,u=_e((function(e){return e===t}),a,!0),d=_e((function(e){return j(t,e)>-1}),a,!0),p=[function(e,n,i){var o=!s&&(i||n!==c)||((t=n).nodeType?u(e,n,i):d(e,n,i));return t=null,o}];l<r;l++)if(n=i.relative[e[l].type])p=[_e(we(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[_]){for(o=++l;o<r&&!i.relative[e[o].type];o++);return xe(l>1&&we(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&Ce(e.slice(l,o)),o<r&&Ce(e=e.slice(o)),o<r&&be(e))}p.push(n)}return we(p)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=ae.tokenize=function(e,t){var n,o,r,s,a,l,c,u=D[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=i.preFilter;a;){for(s in n&&!(o=$.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=G.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=X[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):D(e,l).slice(0)},a=ae.compile=function(e,t){var n,o=[],r=[],a=T[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Ce(t[n]))[_]?o.push(a):r.push(a);a=T(e,function(e,t){var n=t.length>0,o=e.length>0,r=function(r,s,a,l,u){var d,f,m,v=0,y="0",b=r&&[],_=[],w=c,x=r||o&&i.find.TAG("*",u),C=E+=null==w?1:Math.random()||.1,D=x.length;for(u&&(c=s==h||s||u);y!==D&&null!=(d=x[y]);y++){if(o&&d){for(f=0,s||d.ownerDocument==h||(p(d),a=!g);m=e[f++];)if(m(d,s||h,a)){l.push(d);break}u&&(E=C)}n&&((d=!m&&d)&&v--,r&&b.push(d))}if(v+=y,n&&y!==v){for(f=0;m=t[f++];)m(b,_,s,a);if(r){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=k.call(l));_=Ee(_)}I.apply(l,_),u&&!r&&_.length>0&&v+t.length>1&&ae.uniqueSort(l)}return u&&(E=C,c=w),b};return n?ce(r):r}(r,o)),a.selector=e}return a},l=ae.select=function(e,t,n,o){var r,l,c,u,d,p="function"==typeof e&&e,h=!o&&s(e=p.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(r=X.needsContext.test(e)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((d=i.find[u])&&(o=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(r,1),!(e=o.length&&be(l)))return I.apply(n,o),n;break}}return(p||a(e,h))(o,t,!g,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=_.split("").sort(O).join("")===_,n.detectDuplicates=!!d,p(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(P,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(i);C.find=T,C.expr=T.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=T.uniqueSort,C.text=T.getText,C.isXMLDoc=T.isXML,C.contains=T.contains,C.escapeSelector=T.escape;var S=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;i.push(e)}return i},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=C.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(e,t,n){return v(t)?C.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return u.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<i;t++)if(C.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,o[t],n);return i>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(R(this,e||[],!1))},not:function(e){return this.pushStack(R(this,e||[],!0))},is:function(e){return!!R(this,"string"==typeof e&&N.test(e)?C(e):e||[],!1).length}});var I,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||I,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),k.test(i[1])&&C.isPlainObject(t))for(i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=b.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,I=C(b);var j=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&C(e);if(!N.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?u.call(C(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,i){var o=C.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=C.filter(i,o)),this.length>1&&(P[e]||C.uniqueSort(o),j.test(e)&&o.reverse()),this.pushStack(o)}}));var q=/[^\x20\t\r\n\f]+/g;function M(e){return e}function B(e){throw e}function F(e,t,n,i){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(q)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){C.each(n,(function(n,i){v(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==E(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?C.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,i){var o=v(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var r=0;function s(e,t,n,o){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(e<r)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?o?c.call(i,s(r,t,M,o),s(r,t,B,o)):(r++,c.call(i,s(r,t,M,o),s(r,t,B,o),s(r,t,M,t.notifyWith))):(n!==M&&(a=void 0,l=[i]),(o||t.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(i){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(i,u.stackTrace),e+1>=r&&(n!==B&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?u():(C.Deferred.getStackHook&&(u.stackTrace=C.Deferred.getStackHook()),i.setTimeout(u))}}return C.Deferred((function(i){t[0][3].add(s(0,i,v(o)?o:M,i.notifyWith)),t[1][3].add(s(0,i,v(e)?e:M)),t[2][3].add(s(0,i,v(n)?n:B))})).promise()},promise:function(e){return null!=e?C.extend(e,o):o}},r={};return C.each(t,(function(e,i){var s=i[2],a=i[5];o[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=s.fireWith})),o.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=a.call(arguments),r=C.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(F(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||v(o[n]&&o[n].then)))return r.then();for(;n--;)F(o[n],s(n),r.reject);return r.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&W.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){i.setTimeout((function(){throw e}))};var $=C.Deferred();function G(){b.removeEventListener("DOMContentLoaded",G),i.removeEventListener("load",G),C.ready()}C.fn.ready=function(e){return $.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||$.resolveWith(b,[C]))}}),C.ready.then=$.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(C.ready):(b.addEventListener("DOMContentLoaded",G),i.addEventListener("load",G));var U=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===E(n))for(a in o=!0,n)U(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,v(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},z=/^-ms-/,V=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function K(e){return e.replace(z,"ms-").replace(V,X)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=C.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[K(t)]=n;else for(i in t)o[K(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in i?[t]:t.match(q)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||C.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=Z.get(r),1===r.nodeType&&!J.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=K(i.slice(5)),ne(r,i,o[i]));J.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Z.set(this,e)})):U(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=Z.get(r,e))||void 0!==(n=ne(r,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,o=n.shift(),r=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){C.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:C.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=C.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],se=b.documentElement,ae=function(e){return C.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(ae=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===C.css(e,"display")};function ue(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),u=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&oe.exec(C.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)C.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,C.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var de={};function pe(e){var t,n=e.ownerDocument,i=e.nodeName,o=de[i];return o||(t=n.body.appendChild(n.createElement(i)),o=C.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),de[i]=o,o)}function he(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=J.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&ce(i)&&(o[r]=pe(i))):"none"!==n&&(o[r]="none",J.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}C.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?C(this).show():C(this).hide()}))}});var fe,ge,me=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;fe=b.createDocumentFragment().appendChild(b.createElement("div")),(ge=b.createElement("input")).setAttribute("type","radio"),ge.setAttribute("checked","checked"),ge.setAttribute("name","t"),fe.appendChild(ge),m.checkClone=fe.cloneNode(!0).cloneNode(!0).lastChild.checked,fe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!fe.cloneNode(!0).lastChild.defaultValue,fe.innerHTML="<option></option>",m.option=!!fe.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?C.merge([e],n):n}function we(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,m.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function xe(e,t,n,i,o){for(var r,s,a,l,c,u,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((r=e[h])||0===r)if("object"===E(r))C.merge(p,r.nodeType?[r]:r);else if(Ee.test(r)){for(s=s||d.appendChild(t.createElement("div")),a=(ve.exec(r)||["",""])[1].toLowerCase(),l=be[a]||be._default,s.innerHTML=l[1]+C.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;C.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",h=0;r=p[h++];)if(i&&C.inArray(r,i)>-1)o&&o.push(r);else if(c=ae(r),s=_e(d.appendChild(r),"script"),c&&we(s),n)for(u=0;r=s[u++];)ye.test(r.type||"")&&n.push(r);return d}var Ce=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function Te(){return!1}function Se(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Oe(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Te;else if(!o)return e;return 1===r&&(s=o,o=function(e){return C().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=C.guid++)),e.each((function(){C.event.add(this,t,o,i,n)}))}function Ne(e,t,n){n?(J.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var i,o,r=J.get(this,t);if(1&e.isTrigger&&this[t]){if(r.length)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=a.call(arguments),J.set(this,t,r),i=n(this,t),this[t](),r!==(o=J.get(this,t))||i?J.set(this,t,!1):o={},r!==o)return e.stopImmediatePropagation(),e.preventDefault(),o&&o.value}else r.length&&(J.set(this,t,{value:C.event.trigger(C.extend(r[0],C.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&C.event.add(e,t,De)}C.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,h,f,g,m=J.get(e);if(Y(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&C.find.matchesSelector(se,o),n.guid||(n.guid=C.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(q)||[""]).length;c--;)h=g=(a=Ce.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h&&(d=C.event.special[h]||{},h=(o?d.delegateType:d.bindType)||h,d=C.event.special[h]||{},u=C.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:f.join(".")},r),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(h,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),C.event.global[h]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,h,f,g,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(q)||[""]).length;c--;)if(h=g=(a=Ce.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),h){for(d=C.event.special[h]||{},p=l[h=(i?d.delegateType:d.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,f,m.handle)||C.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)C.event.remove(e,h+t[c],n,i,!0);C.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=C.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=C.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=C.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((C.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?C(o,this).index(c)>-1:C.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click",De),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&A(t,"input")&&Ne(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&A(t,"input")&&J.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){C.event.special[e]={setup:function(){return Ne(this,e,Se),!1},trigger:function(){return Ne(this,e),!0},_default:function(){return!0},delegateType:t}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||C.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each((function(){C.event.remove(this,e,n,t)}))}});var Ae=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ie(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function je(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(o in J.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)C.event.add(t,o,a[o][n]);Z.hasData(e)&&(r=Z.access(e),s=C.extend({},r),Z.set(t,s))}}function He(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function qe(e,t,n,i){t=l(t);var o,r,s,a,c,u,d=0,p=e.length,h=p-1,f=t[0],g=v(f);if(g||p>1&&"string"==typeof f&&!m.checkClone&&ke.test(f))return e.each((function(o){var r=e.eq(o);g&&(t[0]=f.call(this,o,r.html())),qe(r,t,n,i)}));if(p&&(r=(o=xe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=C.map(_e(o,"script"),Le)).length;d<p;d++)c=o,d!==h&&(c=C.clone(c,!0,!0),a&&C.merge(s,_e(c,"script"))),n.call(e[d],c,d);if(a)for(u=s[s.length-1].ownerDocument,C.map(s,je),d=0;d<a;d++)c=s[d],ye.test(c.type||"")&&!J.access(c,"globalEval")&&C.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?C._evalUrl&&!c.noModule&&C._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Re,""),c,u))}return e}function Me(e,t,n){for(var i,o=t?C.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||C.cleanData(_e(i)),i.parentNode&&(n&&ae(i)&&we(_e(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=ae(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=_e(a),i=0,o=(r=_e(e)).length;i<o;i++)He(r[i],s[i]);if(t)if(n)for(r=r||_e(e),s=s||_e(a),i=0,o=r.length;i<o;i++)Pe(r[i],s[i]);else Pe(e,a);return(s=_e(a,"script")).length>0&&we(s,!l&&_e(e,"script")),a},cleanData:function(e){for(var t,n,i,o=C.event.special,r=0;void 0!==(n=e[r]);r++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)o[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return U(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return qe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)}))},prepend:function(){return qe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return qe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return qe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return U(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!be[(ve.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return qe(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(_e(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,i=[],o=C(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),C(o[s])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Be=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},We=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},$e=new RegExp(re.join("|"),"i");function Ge(e,t,n){var i,o,r,s,a=e.style;return(n=n||Fe(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=C.style(e,t)),!m.pixelBoxStyles()&&Be.test(s)&&$e.test(t)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(c).appendChild(u);var e=i.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",s=36===t(e.right),o=36===t(e.width),u.style.position="absolute",r=12===t(u.offsetWidth/3),se.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,o,r,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,n,o;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),o=i.getComputedStyle(t),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var ze=["Webkit","Moz","ms"],Ve=b.createElement("div").style,Xe={};function Ke(e){return C.cssProps[e]||Xe[e]||(e in Ve?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Ve)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var i=oe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function tt(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+re[s],!0,o)),i?("content"===n&&(l-=C.css(e,"padding"+re[s],!0,o)),"margin"!==n&&(l-=C.css(e,"border"+re[s]+"Width",!0,o))):(l+=C.css(e,"padding"+re[s],!0,o),"padding"!==n?l+=C.css(e,"border"+re[s]+"Width",!0,o):a+=C.css(e,"border"+re[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l}function nt(e,t,n){var i=Fe(e),o=(!m.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,i),r=o,s=Ge(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Be.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===C.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+tt(e,t,n||(o?"border":"content"),r,i,s)+"px"}function it(e,t,n,i,o){return new it.prototype.init(e,t,n,i,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=K(t),l=Qe.test(t),c=e.style;if(l||(t=Ke(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"==(r=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ue(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=K(t);return Qe.test(t)||(t=Ke(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ge(e,t,i)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,i){if(n)return!Ye.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,i):We(e,Je,(function(){return nt(e,t,i)}))},set:function(e,n,i){var o,r=Fe(e),s=!m.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===C.css(e,"boxSizing",!1,r),l=i?tt(e,t,i,a,r):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-tt(e,t,"border",!1,r)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),et(0,n,l)}}})),C.cssHooks.marginLeft=Ue(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+re[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(C.cssHooks[e+t].set=et)})),C.fn.extend({css:function(e,t){return U(this,(function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=Fe(e),o=t.length;s<o;s++)r[t[s]]=C.css(e,t[s],!1,i);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=it,it.prototype={constructor:it,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=it.prototype.init,C.fx.step={};var ot,rt,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function lt(){rt&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(lt):i.setTimeout(lt,C.fx.interval),C.fx.tick())}function ct(){return i.setTimeout((function(){ot=void 0})),ot=Date.now()}function ut(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=re[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function dt(e,t,n){for(var i,o=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function pt(e,t,n){var i,o,r=0,s=pt.prefilters.length,a=C.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=ot||ct(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=K(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=pt.prefilters[r].call(c,e,u,c.opts))return v(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(u,dt,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(q);for(var n,i=0,o=e.length;i<o;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,u,d="width"in t||"height"in t,p=this,h={},f=e.style,g=e.nodeType&&ce(e),m=J.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[i],st.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}h[i]=m&&m[i]||C.style(e,i)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(h))for(i in d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=J.get(e,"display")),"none"===(u=C.css(e,"display"))&&(c?u=c:(he([e],!0),c=e.style.display||c,u=C.css(e,"display"),he([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===C.css(e,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&he([e],!0),p.done((function(){for(i in g||he([e]),J.remove(e,"fxshow"),h)C.style(e,i,h[i])}))),l=dt(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=C.isEmptyObject(e),r=C.speed(t,n,i),s=function(){var t=pt(this,C.extend({},e),r);(o||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=C.timers,s=J.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&at.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=C.timers,s=i?i.length:0;for(n.finish=!0,C.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,i,o)}})),C.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),ot=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){rt||(rt=!0,lt())},C.fx.stop=function(){rt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ht,ft=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return U(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(o=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(q);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ft[t]||C.find.attr;ft[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=ft[s],ft[s]=o,o=null!=n(e,t,i)?s:null,ft[s]=r),o}}));var gt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function vt(e){return(e.match(q)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(q)||[]}C.fn.extend({prop:function(e,t){return U(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(v(e))return this.each((function(t){C(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(o=yt(n),i=1===n.nodeType&&" "+vt(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=vt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(v(e))return this.each((function(t){C(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(o=yt(n),i=1===n.nodeType&&" "+vt(o)+" "){for(s=0;r=t[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=vt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,o,r,s;if(i)for(o=0,r=C(this),s=bt(e);t=s[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+vt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var _t=/\r/g;C.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,C(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=C.map(o,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=C.valHooks[o.type]||C.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(_t,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:vt(C.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=C.makeArray(t),s=o.length;s--;)((i=o[s]).selected=C.inArray(C.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in i;var wt=/^(?:focusinfocus|focusoutblur)$/,Et=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,n,o){var r,s,a,l,c,u,d,p,f=[n||b],g=h.call(e,"type")?e.type:e,m=h.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(g+C.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[C.expando]?e:new C.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[g]||{},o||!d.trigger||!1!==d.trigger.apply(n,t))){if(!o&&!d.noBubble&&!y(n)){for(l=d.delegateType||g,wt.test(l+g)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(n.ownerDocument||b)&&f.push(a.defaultView||a.parentWindow||i)}for(r=0;(s=f[r++])&&!e.isPropagationStopped();)p=s,e.type=r>1?l:d.bindType||g,(u=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&u.apply(s,t),(u=c&&s[c])&&u.apply&&Y(s)&&(e.result=u.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),t)||!Y(n)||c&&v(n[g])&&!y(n)&&((a=n[c])&&(n[c]=null),C.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Et),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,Et),C.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,t);o||i.addEventListener(e,n,!0),J.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,t)-1;o?J.access(i,t,o):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var xt=i.location,Ct={guid:Date.now()},Dt=/\?/;C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Tt=/\[\]$/,St=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,Nt=/^(?:input|select|textarea|keygen)/i;function At(e,t,n,i){var o;if(Array.isArray(t))C.each(t,(function(t,o){n||Tt.test(e)?i(e,o):At(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==E(t))i(e,t);else for(o in t)At(e+"["+o+"]",t[o],n,i)}C.param=function(e,t){var n,i=[],o=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){o(this.name,this.value)}));else for(n in e)At(n,e[n],t,o);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Nt.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(St,"\r\n")}})):{name:t.name,value:n.replace(St,"\r\n")}})).get()}});var kt=/%20/g,Rt=/#.*$/,It=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,jt=/^(?:GET|HEAD)$/,Pt=/^\/\//,Ht={},qt={},Mt="*/".concat("*"),Bt=b.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(q)||[];if(v(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Wt(e,t,n,i){var o={},r=e===qt;function s(a){var l;return o[a]=!0,C.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function $t(e,t){var n,i,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}Bt.href=xt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,C.ajaxSettings),t):$t(C.ajaxSettings,e)},ajaxPrefilter:Ft(Ht),ajaxTransport:Ft(qt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,r,s,a,l,c,u,d,p,h=C.ajaxSetup({},t),f=h.context||h,g=h.context&&(f.nodeType||f.jquery)?C(f):C.event,m=C.Deferred(),v=C.Callbacks("once memory"),y=h.statusCode||{},_={},w={},E="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Lt.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),D(0,t),this}};if(m.promise(x),h.url=((e||h.url||xt.href)+"").replace(Pt,xt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(q)||[""],null==h.crossDomain){l=b.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"//"+Bt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=C.param(h.data,h.traditional)),Wt(Ht,h,t,x),c)return x;for(d in(u=C.event&&h.global)&&0==C.active++&&C.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!jt.test(h.type),o=h.url.replace(Rt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(kt,"+")):(p=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(Dt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(It,"$1"),p=(Dt.test(o)?"&":"?")+"_="+Ct.guid+++p),h.url=o+p),h.ifModified&&(C.lastModified[o]&&x.setRequestHeader("If-Modified-Since",C.lastModified[o]),C.etag[o]&&x.setRequestHeader("If-None-Match",C.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&x.setRequestHeader("Content-Type",h.contentType),x.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Mt+"; q=0.01":""):h.accepts["*"]),h.headers)x.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(f,x,h)||c))return x.abort();if(E="abort",v.add(h.complete),x.done(h.success),x.fail(h.error),n=Wt(qt,h,t,x)){if(x.readyState=1,u&&g.trigger("ajaxSend",[x,h]),c)return x;h.async&&h.timeout>0&&(a=i.setTimeout((function(){x.abort("timeout")}),h.timeout));try{c=!1,n.send(_,D)}catch(e){if(c)throw e;D(-1,e)}}else D(-1,"No Transport");function D(e,t,s,l){var d,p,b,_,w,E=t;c||(c=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",x.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(_=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(h,x,s)),!d&&C.inArray("script",h.dataTypes)>-1&&C.inArray("json",h.dataTypes)<0&&(h.converters["text script"]=function(){}),_=function(e,t,n,i){var o,r,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(h,_,x,d),d?(h.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(C.lastModified[o]=w),(w=x.getResponseHeader("etag"))&&(C.etag[o]=w)),204===e||"HEAD"===h.type?E="nocontent":304===e?E="notmodified":(E=_.state,p=_.data,d=!(b=_.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),x.status=e,x.statusText=(t||E)+"",d?m.resolveWith(f,[p,E,x]):m.rejectWith(f,[x,E,b]),x.statusCode(y),y=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[x,h,d?p:b]),v.fireWith(f,[x,E]),u&&(g.trigger("ajaxComplete",[x,h]),--C.active||C.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,i,o){return v(n)&&(o=o||i,i=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:o,data:n,success:i},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Gt={0:200,1223:204},Ut=C.ajaxSettings.xhr();m.cors=!!Ut&&"withCredentials"in Ut,m.ajax=Ut=!!Ut,C.ajaxTransport((function(e){var t,n;if(m.cors||Ut&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Gt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var zt,Vt=[],Xt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||C.expando+"_"+Ct.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,n){var o,r,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+o):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||C.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=i[o],i[o]=function(){s=arguments},n.always((function(){void 0===r?C(i).removeProp(o):i[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(o)),s&&v(r)&&r(s[0]),s=r=void 0})),"script"})),m.createHTMLDocument=((zt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),r=!n&&[],(o=k.exec(e))?[t.createElement(o[1])]:(o=xe([e],t,r),r&&r.length&&C(r).remove(),C.merge([],o.childNodes)));var i,o,r},C.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=vt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=C.css(e,"position"),u=C(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=C.css(e,"top"),l=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),v(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+o),"using"in t?t.using.call(e,d):u.css(d)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),o.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-C.css(i,"marginTop",!0),left:t.left-o.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||se}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(i){return U(this,(function(e,i,o){var r;if(y(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=Ue(m.pixelPosition,(function(e,n){if(n)return n=Ge(e,t),Be.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){C.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return U(this,(function(t,n,o){var r;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?C.css(t,n,a):C.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return i=a.call(arguments,2),o=function(){return e.apply(t||this,i.concat(a.call(arguments)))},o.guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=A,C.isFunction=v,C.isWindow=y,C.camelCase=K,C.type=E,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(n=function(){return C}.apply(t,[]))||(e.exports=n);var Yt=i.jQuery,Qt=i.$;return C.noConflict=function(e){return i.$===C&&(i.$=Qt),e&&i.jQuery===C&&(i.jQuery=Yt),C},void 0===o&&(i.jQuery=i.$=C),C}))},661:()=>{String.prototype.toCamalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(e,t){return 0===t?e.toLowerCase():e.toUpperCase()})).replace(/\s+/g,"")},String.prototype.toPascalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(e,t){return 0===t?e.toUpperCase():e.toLowerCase()})).replace(/\s+/g,"")},String.prototype.toPascalCaseJson=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(e,t){return 0===t?e.toUpperCase():e})).replace(/\s+/g,"")},String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\d+)}/g,(function(t,n){return void 0!==e[n]?e[n]:t}))})}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i),n.d(i,{BSDataTable:()=>Qi,BSDataTableBase:()=>Ui,BSDataTableColDefinition:()=>ho,BSDataTableColSettings:()=>mo,BSDataTableDataSource:()=>fo,BSDataTableEventArgs:()=>go,BSDataTableInput:()=>Vi,BSDataTableOptions:()=>po,BSDataTablePagingMetaData:()=>Eo,BSDataTableTextInputExt:()=>To,CookieHelper:()=>Fi,SessionStorageService:()=>Xi,appActions:()=>Wi,appDataEvents:()=>$i,dataEventsService:()=>Gi});var e={};n.r(e),n.d(e,{afterMain:()=>E,afterRead:()=>b,afterWrite:()=>D,applyStyles:()=>R,arrow:()=>Y,auto:()=>a,basePlacements:()=>l,beforeMain:()=>_,beforeRead:()=>v,beforeWrite:()=>x,bottom:()=>o,clippingParents:()=>d,computeStyles:()=>ee,createPopper:()=>Ne,createPopperBase:()=>Oe,createPopperLite:()=>Ae,detectOverflow:()=>ge,end:()=>u,eventListeners:()=>ne,flip:()=>me,hide:()=>be,left:()=>s,main:()=>w,modifierPhases:()=>T,offset:()=>_e,placements:()=>m,popper:()=>h,popperGenerator:()=>Se,popperOffsets:()=>we,preventOverflow:()=>Ee,read:()=>y,reference:()=>f,right:()=>r,start:()=>c,top:()=>t,variationPlacements:()=>g,viewport:()=>p,write:()=>C});var t="top",o="bottom",r="right",s="left",a="auto",l=[t,o,r,s],c="start",u="end",d="clippingParents",p="viewport",h="popper",f="reference",g=l.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+u])}),[]),m=[].concat(l,[a]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+u])}),[]),v="beforeRead",y="read",b="afterRead",_="beforeMain",w="main",E="afterMain",x="beforeWrite",C="write",D="afterWrite",T=[v,y,b,_,w,E,x,C,D];function S(e){return e?(e.nodeName||"").toLowerCase():null}function O(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function N(e){return e instanceof O(e).Element||e instanceof Element}function A(e){return e instanceof O(e).HTMLElement||e instanceof HTMLElement}function k(e){return"undefined"!=typeof ShadowRoot&&(e instanceof O(e).ShadowRoot||e instanceof ShadowRoot)}const R={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},o=t.elements[e];A(o)&&S(o)&&(Object.assign(o.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],o=t.attributes[e]||{},r=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});A(i)&&S(i)&&(Object.assign(i.style,r),Object.keys(o).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function I(e){return e.split("-")[0]}var L=Math.max,j=Math.min,P=Math.round;function H(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),i=1,o=1;if(A(e)&&t){var r=e.offsetHeight,s=e.offsetWidth;s>0&&(i=P(n.width)/s||1),r>0&&(o=P(n.height)/r||1)}return{width:n.width/i,height:n.height/o,top:n.top/o,right:n.right/i,bottom:n.bottom/o,left:n.left/i,x:n.left/i,y:n.top/o}}function q(e){var t=H(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function M(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&k(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function B(e){return O(e).getComputedStyle(e)}function F(e){return["table","td","th"].indexOf(S(e))>=0}function W(e){return((N(e)?e.ownerDocument:e.document)||window.document).documentElement}function $(e){return"html"===S(e)?e:e.assignedSlot||e.parentNode||(k(e)?e.host:null)||W(e)}function G(e){return A(e)&&"fixed"!==B(e).position?e.offsetParent:null}function U(e){for(var t=O(e),n=G(e);n&&F(n)&&"static"===B(n).position;)n=G(n);return n&&("html"===S(n)||"body"===S(n)&&"static"===B(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&A(e)&&"fixed"===B(e).position)return null;for(var n=$(e);A(n)&&["html","body"].indexOf(S(n))<0;){var i=B(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function z(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function V(e,t,n){return L(e,j(t,n))}function X(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function K(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const Y={name:"arrow",enabled:!0,phase:"main",fn:function(e){var n,i=e.state,a=e.name,c=e.options,u=i.elements.arrow,d=i.modifiersData.popperOffsets,p=I(i.placement),h=z(p),f=[s,r].indexOf(p)>=0?"height":"width";if(u&&d){var g=function(e,t){return X("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:K(e,l))}(c.padding,i),m=q(u),v="y"===h?t:s,y="y"===h?o:r,b=i.rects.reference[f]+i.rects.reference[h]-d[h]-i.rects.popper[f],_=d[h]-i.rects.reference[h],w=U(u),E=w?"y"===h?w.clientHeight||0:w.clientWidth||0:0,x=b/2-_/2,C=g[v],D=E-m[f]-g[y],T=E/2-m[f]/2+x,S=V(C,T,D),O=h;i.modifiersData[a]=((n={})[O]=S,n.centerOffset=S-T,n)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&M(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Q(e){return e.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(e){var n,i=e.popper,a=e.popperRect,l=e.placement,c=e.variation,d=e.offsets,p=e.position,h=e.gpuAcceleration,f=e.adaptive,g=e.roundOffsets,m=e.isFixed,v=d.x,y=void 0===v?0:v,b=d.y,_=void 0===b?0:b,w="function"==typeof g?g({x:y,y:_}):{x:y,y:_};y=w.x,_=w.y;var E=d.hasOwnProperty("x"),x=d.hasOwnProperty("y"),C=s,D=t,T=window;if(f){var S=U(i),N="clientHeight",A="clientWidth";S===O(i)&&"static"!==B(S=W(i)).position&&"absolute"===p&&(N="scrollHeight",A="scrollWidth"),S=S,(l===t||(l===s||l===r)&&c===u)&&(D=o,_-=(m&&T.visualViewport?T.visualViewport.height:S[N])-a.height,_*=h?1:-1),l!==s&&(l!==t&&l!==o||c!==u)||(C=r,y-=(m&&T.visualViewport?T.visualViewport.width:S[A])-a.width,y*=h?1:-1)}var k,R=Object.assign({position:p},f&&J),I=!0===g?function(e){var t=e.x,n=e.y,i=window.devicePixelRatio||1;return{x:P(t*i)/i||0,y:P(n*i)/i||0}}({x:y,y:_}):{x:y,y:_};return y=I.x,_=I.y,h?Object.assign({},R,((k={})[D]=x?"0":"",k[C]=E?"0":"",k.transform=(T.devicePixelRatio||1)<=1?"translate("+y+"px, "+_+"px)":"translate3d("+y+"px, "+_+"px, 0)",k)):Object.assign({},R,((n={})[D]=x?_+"px":"",n[C]=E?y+"px":"",n.transform="",n))}const ee={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,s=void 0===r||r,a=n.roundOffsets,l=void 0===a||a,c={placement:I(t.placement),variation:Q(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Z(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Z(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var te={passive:!0};const ne={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,o=i.scroll,r=void 0===o||o,s=i.resize,a=void 0===s||s,l=O(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return r&&c.forEach((function(e){e.addEventListener("scroll",n.update,te)})),a&&l.addEventListener("resize",n.update,te),function(){r&&c.forEach((function(e){e.removeEventListener("scroll",n.update,te)})),a&&l.removeEventListener("resize",n.update,te)}},data:{}};var ie={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return ie[e]}))}var re={start:"end",end:"start"};function se(e){return e.replace(/start|end/g,(function(e){return re[e]}))}function ae(e){var t=O(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function le(e){return H(W(e)).left+ae(e).scrollLeft}function ce(e){var t=B(e),n=t.overflow,i=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}function ue(e){return["html","body","#document"].indexOf(S(e))>=0?e.ownerDocument.body:A(e)&&ce(e)?e:ue($(e))}function de(e,t){var n;void 0===t&&(t=[]);var i=ue(e),o=i===(null==(n=e.ownerDocument)?void 0:n.body),r=O(i),s=o?[r].concat(r.visualViewport||[],ce(i)?i:[]):i,a=t.concat(s);return o?a:a.concat(de($(s)))}function pe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function he(e,t){return t===p?pe(function(e){var t=O(e),n=W(e),i=t.visualViewport,o=n.clientWidth,r=n.clientHeight,s=0,a=0;return i&&(o=i.width,r=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=i.offsetLeft,a=i.offsetTop)),{width:o,height:r,x:s+le(e),y:a}}(e)):N(t)?function(e){var t=H(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):pe(function(e){var t,n=W(e),i=ae(e),o=null==(t=e.ownerDocument)?void 0:t.body,r=L(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=L(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-i.scrollLeft+le(e),l=-i.scrollTop;return"rtl"===B(o||n).direction&&(a+=L(n.clientWidth,o?o.clientWidth:0)-r),{width:r,height:s,x:a,y:l}}(W(e)))}function fe(e){var n,i=e.reference,a=e.element,l=e.placement,d=l?I(l):null,p=l?Q(l):null,h=i.x+i.width/2-a.width/2,f=i.y+i.height/2-a.height/2;switch(d){case t:n={x:h,y:i.y-a.height};break;case o:n={x:h,y:i.y+i.height};break;case r:n={x:i.x+i.width,y:f};break;case s:n={x:i.x-a.width,y:f};break;default:n={x:i.x,y:i.y}}var g=d?z(d):null;if(null!=g){var m="y"===g?"height":"width";switch(p){case c:n[g]=n[g]-(i[m]/2-a[m]/2);break;case u:n[g]=n[g]+(i[m]/2-a[m]/2)}}return n}function ge(e,n){void 0===n&&(n={});var i=n,s=i.placement,a=void 0===s?e.placement:s,c=i.boundary,u=void 0===c?d:c,g=i.rootBoundary,m=void 0===g?p:g,v=i.elementContext,y=void 0===v?h:v,b=i.altBoundary,_=void 0!==b&&b,w=i.padding,E=void 0===w?0:w,x=X("number"!=typeof E?E:K(E,l)),C=y===h?f:h,D=e.rects.popper,T=e.elements[_?C:y],O=function(e,t,n){var i="clippingParents"===t?function(e){var t=de($(e)),n=["absolute","fixed"].indexOf(B(e).position)>=0&&A(e)?U(e):e;return N(n)?t.filter((function(e){return N(e)&&M(e,n)&&"body"!==S(e)})):[]}(e):[].concat(t),o=[].concat(i,[n]),r=o[0],s=o.reduce((function(t,n){var i=he(e,n);return t.top=L(i.top,t.top),t.right=j(i.right,t.right),t.bottom=j(i.bottom,t.bottom),t.left=L(i.left,t.left),t}),he(e,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(N(T)?T:T.contextElement||W(e.elements.popper),u,m),k=H(e.elements.reference),R=fe({reference:k,element:D,strategy:"absolute",placement:a}),I=pe(Object.assign({},D,R)),P=y===h?I:k,q={top:O.top-P.top+x.top,bottom:P.bottom-O.bottom+x.bottom,left:O.left-P.left+x.left,right:P.right-O.right+x.right},F=e.modifiersData.offset;if(y===h&&F){var G=F[a];Object.keys(q).forEach((function(e){var n=[r,o].indexOf(e)>=0?1:-1,i=[t,o].indexOf(e)>=0?"y":"x";q[e]+=G[i]*n}))}return q}const me={name:"flip",enabled:!0,phase:"main",fn:function(e){var n=e.state,i=e.options,u=e.name;if(!n.modifiersData[u]._skip){for(var d=i.mainAxis,p=void 0===d||d,h=i.altAxis,f=void 0===h||h,v=i.fallbackPlacements,y=i.padding,b=i.boundary,_=i.rootBoundary,w=i.altBoundary,E=i.flipVariations,x=void 0===E||E,C=i.allowedAutoPlacements,D=n.options.placement,T=I(D),S=v||(T!==D&&x?function(e){if(I(e)===a)return[];var t=oe(e);return[se(e),t,se(t)]}(D):[oe(D)]),O=[D].concat(S).reduce((function(e,t){return e.concat(I(t)===a?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,o=n.boundary,r=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?m:c,d=Q(i),p=d?a?g:g.filter((function(e){return Q(e)===d})):l,h=p.filter((function(e){return u.indexOf(e)>=0}));0===h.length&&(h=p);var f=h.reduce((function(t,n){return t[n]=ge(e,{placement:n,boundary:o,rootBoundary:r,padding:s})[I(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(n,{placement:t,boundary:b,rootBoundary:_,padding:y,flipVariations:x,allowedAutoPlacements:C}):t)}),[]),N=n.rects.reference,A=n.rects.popper,k=new Map,R=!0,L=O[0],j=0;j<O.length;j++){var P=O[j],H=I(P),q=Q(P)===c,M=[t,o].indexOf(H)>=0,B=M?"width":"height",F=ge(n,{placement:P,boundary:b,rootBoundary:_,altBoundary:w,padding:y}),W=M?q?r:s:q?o:t;N[B]>A[B]&&(W=oe(W));var $=oe(W),G=[];if(p&&G.push(F[H]<=0),f&&G.push(F[W]<=0,F[$]<=0),G.every((function(e){return e}))){L=P,R=!1;break}k.set(P,G)}if(R)for(var U=function(e){var t=O.find((function(t){var n=k.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return L=t,"break"},z=x?3:1;z>0&&"break"!==U(z);z--);n.placement!==L&&(n.modifiersData[u]._skip=!0,n.placement=L,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ve(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ye(e){return[t,r,o,s].some((function(t){return e[t]>=0}))}const be={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,o=t.rects.popper,r=t.modifiersData.preventOverflow,s=ge(t,{elementContext:"reference"}),a=ge(t,{altBoundary:!0}),l=ve(s,i),c=ve(a,o,r),u=ye(l),d=ye(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}},_e={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var n=e.state,i=e.options,o=e.name,a=i.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(e,i){return e[i]=function(e,n,i){var o=I(e),a=[s,t].indexOf(o)>=0?-1:1,l="function"==typeof i?i(Object.assign({},n,{placement:e})):i,c=l[0],u=l[1];return c=c||0,u=(u||0)*a,[s,r].indexOf(o)>=0?{x:u,y:c}:{x:c,y:u}}(i,n.rects,l),e}),{}),u=c[n.placement],d=u.x,p=u.y;null!=n.modifiersData.popperOffsets&&(n.modifiersData.popperOffsets.x+=d,n.modifiersData.popperOffsets.y+=p),n.modifiersData[o]=c}},we={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=fe({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Ee={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var n=e.state,i=e.options,a=e.name,l=i.mainAxis,u=void 0===l||l,d=i.altAxis,p=void 0!==d&&d,h=i.boundary,f=i.rootBoundary,g=i.altBoundary,m=i.padding,v=i.tether,y=void 0===v||v,b=i.tetherOffset,_=void 0===b?0:b,w=ge(n,{boundary:h,rootBoundary:f,padding:m,altBoundary:g}),E=I(n.placement),x=Q(n.placement),C=!x,D=z(E),T="x"===D?"y":"x",S=n.modifiersData.popperOffsets,O=n.rects.reference,N=n.rects.popper,A="function"==typeof _?_(Object.assign({},n.rects,{placement:n.placement})):_,k="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),R=n.modifiersData.offset?n.modifiersData.offset[n.placement]:null,P={x:0,y:0};if(S){if(u){var H,M="y"===D?t:s,B="y"===D?o:r,F="y"===D?"height":"width",W=S[D],$=W+w[M],G=W-w[B],X=y?-N[F]/2:0,K=x===c?O[F]:N[F],Y=x===c?-N[F]:-O[F],J=n.elements.arrow,Z=y&&J?q(J):{width:0,height:0},ee=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[M],ne=ee[B],ie=V(0,O[F],Z[F]),oe=C?O[F]/2-X-ie-te-k.mainAxis:K-ie-te-k.mainAxis,re=C?-O[F]/2+X+ie+ne+k.mainAxis:Y+ie+ne+k.mainAxis,se=n.elements.arrow&&U(n.elements.arrow),ae=se?"y"===D?se.clientTop||0:se.clientLeft||0:0,le=null!=(H=null==R?void 0:R[D])?H:0,ce=W+re-le,ue=V(y?j($,W+oe-le-ae):$,W,y?L(G,ce):G);S[D]=ue,P[D]=ue-W}if(p){var de,pe="x"===D?t:s,he="x"===D?o:r,fe=S[T],me="y"===T?"height":"width",ve=fe+w[pe],ye=fe-w[he],be=-1!==[t,s].indexOf(E),_e=null!=(de=null==R?void 0:R[T])?de:0,we=be?ve:fe-O[me]-N[me]-_e+k.altAxis,Ee=be?fe+O[me]+N[me]-_e-k.altAxis:ye,xe=y&&be?function(e,t,n){var i=V(e,t,n);return i>n?n:i}(we,fe,Ee):V(y?we:ve,fe,y?Ee:ye);S[T]=xe,P[T]=xe-fe}n.modifiersData[a]=P}},requiresIfExists:["offset"]};function xe(e,t,n){void 0===n&&(n=!1);var i,o,r=A(t),s=A(t)&&function(e){var t=e.getBoundingClientRect(),n=P(t.width)/e.offsetWidth||1,i=P(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),a=W(t),l=H(e,s),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(r||!r&&!n)&&(("body"!==S(t)||ce(a))&&(c=(i=t)!==O(i)&&A(i)?{scrollLeft:(o=i).scrollLeft,scrollTop:o.scrollTop}:ae(i)),A(t)?((u=H(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):a&&(u.x=le(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function Ce(e){var t=new Map,n=new Set,i=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&o(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),i}var De={placement:"bottom",modifiers:[],strategy:"absolute"};function Te(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Se(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,o=t.defaultOptions,r=void 0===o?De:o;return function(e,t,n){void 0===n&&(n=r);var o,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},De,r),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var o="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},r,a.options,o),a.scrollParents={reference:N(e)?de(e):e.contextElement?de(e.contextElement):[],popper:de(t)};var s,c,p=function(e){var t=Ce(e);return T.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),c=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=p.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var r=o({state:a,name:t,instance:u,options:i});l.push(r||function(){})}})),u.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,n=e.popper;if(Te(t,n)){a.rects={reference:xe(t,U(n),"fixed"===a.options.strategy),popper:q(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var o=a.orderedModifiers[i],r=o.fn,s=o.options,l=void 0===s?{}:s,d=o.name;"function"==typeof r&&(a=r({state:a,options:l,name:d,instance:u})||a)}else a.reset=!1,i=-1}}},update:(o=function(){return new Promise((function(e){u.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(o())}))}))),s}),destroy:function(){d(),c=!0}};if(!Te(e,t))return u;function d(){l.forEach((function(e){return e()})),l=[]}return u.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var Oe=Se(),Ne=Se({defaultModifiers:[ne,we,ee,R,_e,me,Ee,Y,be]}),Ae=Se({defaultModifiers:[ne,we,ee,R]});const ke="transitionend",Re=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t},Ie=e=>{const t=Re(e);return t&&document.querySelector(t)?t:null},Le=e=>{const t=Re(e);return t?document.querySelector(t):null},je=e=>{e.dispatchEvent(new Event(ke))},Pe=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),He=e=>Pe(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,qe=(e,t,n)=>{Object.keys(n).forEach((i=>{const o=n[i],r=t[i],s=r&&Pe(r)?"element":null==(a=r)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(o).test(s))throw new TypeError(`${e.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${o}".`)}))},Me=e=>!(!Pe(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility"),Be=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Fe=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Fe(e.parentNode):null},We=()=>{},$e=e=>{e.offsetHeight},Ge=()=>{const{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},Ue=[],ze=()=>"rtl"===document.documentElement.dir,Ve=e=>{var t;t=()=>{const t=Ge();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(Ue.length||document.addEventListener("DOMContentLoaded",(()=>{Ue.forEach((e=>e()))})),Ue.push(t)):t()},Xe=e=>{"function"==typeof e&&e()},Ke=(e,t,n=!0)=>{if(!n)return void Xe(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),o=Number.parseFloat(n);return i||o?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let o=!1;const r=({target:n})=>{n===t&&(o=!0,t.removeEventListener(ke,r),Xe(e))};t.addEventListener(ke,r),setTimeout((()=>{o||je(t)}),i)},Ye=(e,t,n,i)=>{let o=e.indexOf(t);if(-1===o)return e[!n&&i?e.length-1:0];const r=e.length;return o+=n?1:-1,i&&(o=(o+r)%r),e[Math.max(0,Math.min(o,r-1))]},Qe=/[^.]*(?=\..*)\.|.*/,Je=/\..*/,Ze=/::\d+$/,et={};let tt=1;const nt={mouseenter:"mouseover",mouseleave:"mouseout"},it=/^(mouseenter|mouseleave)/i,ot=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function rt(e,t){return t&&`${t}::${tt++}`||e.uidEvent||tt++}function st(e){const t=rt(e);return e.uidEvent=t,et[t]=et[t]||{},et[t]}function at(e,t,n=null){const i=Object.keys(e);for(let o=0,r=i.length;o<r;o++){const r=e[i[o]];if(r.originalHandler===t&&r.delegationSelector===n)return r}return null}function lt(e,t,n){const i="string"==typeof t,o=i?n:t;let r=dt(e);return ot.has(r)||(r=e),[i,o,r]}function ct(e,t,n,i,o){if("string"!=typeof t||!e)return;if(n||(n=i,i=null),it.test(t)){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};i?i=e(i):n=e(n)}const[r,s,a]=lt(t,n,i),l=st(e),c=l[a]||(l[a]={}),u=at(c,s,r?n:null);if(u)return void(u.oneOff=u.oneOff&&o);const d=rt(s,t.replace(Qe,"")),p=r?function(e,t,n){return function i(o){const r=e.querySelectorAll(t);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(let a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&pt.off(e,o.type,t,n),n.apply(s,[o]);return null}}(e,n,i):function(e,t){return function n(i){return i.delegateTarget=e,n.oneOff&&pt.off(e,i.type,t),t.apply(e,[i])}}(e,n);p.delegationSelector=r?n:null,p.originalHandler=s,p.oneOff=o,p.uidEvent=d,c[d]=p,e.addEventListener(a,p,r)}function ut(e,t,n,i,o){const r=at(t[n],i,o);r&&(e.removeEventListener(n,r,Boolean(o)),delete t[n][r.uidEvent])}function dt(e){return e=e.replace(Je,""),nt[e]||e}const pt={on(e,t,n,i){ct(e,t,n,i,!1)},one(e,t,n,i){ct(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[o,r,s]=lt(t,n,i),a=s!==t,l=st(e),c=t.startsWith(".");if(void 0!==r){if(!l||!l[s])return;return void ut(e,l,s,r,o?n:null)}c&&Object.keys(l).forEach((n=>{!function(e,t,n,i){const o=t[n]||{};Object.keys(o).forEach((r=>{if(r.includes(i)){const i=o[r];ut(e,t,n,i.originalHandler,i.delegationSelector)}}))}(e,l,n,t.slice(1))}));const u=l[s]||{};Object.keys(u).forEach((n=>{const i=n.replace(Ze,"");if(!a||t.includes(i)){const t=u[n];ut(e,l,s,t.originalHandler,t.delegationSelector)}}))},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=Ge(),o=dt(t),r=t!==o,s=ot.has(o);let a,l=!0,c=!0,u=!1,d=null;return r&&i&&(a=i.Event(t,n),i(e).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(d=document.createEvent("HTMLEvents"),d.initEvent(o,l,!0)):d=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((e=>{Object.defineProperty(d,e,{get:()=>n[e]})})),u&&d.preventDefault(),c&&e.dispatchEvent(d),d.defaultPrevented&&void 0!==a&&a.preventDefault(),d}},ht=new Map,ft={set(e,t,n){ht.has(e)||ht.set(e,new Map);const i=ht.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>ht.has(e)&&ht.get(e).get(t)||null,remove(e,t){if(!ht.has(e))return;const n=ht.get(e);n.delete(t),0===n.size&&ht.delete(e)}};class gt{constructor(e){(e=He(e))&&(this._element=e,ft.set(this._element,this.constructor.DATA_KEY,this))}dispose(){ft.remove(this._element,this.constructor.DATA_KEY),pt.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((e=>{this[e]=null}))}_queueCallback(e,t,n=!0){Ke(e,t,n)}static getInstance(e){return ft.get(He(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const mt=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;pt.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Be(this))return;const o=Le(this)||this.closest(`.${i}`);e.getOrCreateInstance(o)[t]()}))};class vt extends gt{static get NAME(){return"alert"}close(){if(pt.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),pt.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=vt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}mt(vt,"close"),Ve(vt);const yt='[data-bs-toggle="button"]';class bt extends gt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}function _t(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function wt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}pt.on(document,"click.bs.button.data-api",yt,(e=>{e.preventDefault();const t=e.target.closest(yt);bt.getOrCreateInstance(t).toggle()})),Ve(bt);const Et={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${wt(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${wt(t)}`)},getDataAttributes(e){if(!e)return{};const t={};return Object.keys(e.dataset).filter((e=>e.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=_t(e.dataset[n])})),t},getDataAttribute:(e,t)=>_t(e.getAttribute(`data-bs-${wt(t)}`)),offset(e){const t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:e=>({top:e.offsetTop,left:e.offsetLeft})},xt={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(t)&&n.push(i),i=i.parentNode;return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(", ");return this.find(t,e).filter((e=>!Be(e)&&Me(e)))}},Ct="carousel",Dt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Tt={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},St="next",Ot="prev",Nt="left",At="right",kt={ArrowLeft:At,ArrowRight:Nt},Rt="slid.bs.carousel",It="active",Lt=".active.carousel-item";class jt extends gt{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=xt.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Dt}static get NAME(){return Ct}next(){this._slide(St)}nextWhenVisible(){!document.hidden&&Me(this._element)&&this.next()}prev(){this._slide(Ot)}pause(e){e||(this._isPaused=!0),xt.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(je(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=xt.findOne(Lt,this._element);const t=this._getItemIndex(this._activeElement);if(e>this._items.length-1||e<0)return;if(this._isSliding)return void pt.one(this._element,Rt,(()=>this.to(e)));if(t===e)return this.pause(),void this.cycle();const n=e>t?St:Ot;this._slide(n,this._items[e])}_getConfig(e){return e={...Dt,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(Ct,e,Tt),e}_handleSwipe(){const e=Math.abs(this.touchDeltaX);if(e<=40)return;const t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?At:Nt)}_addEventListeners(){this._config.keyboard&&pt.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(pt.on(this._element,"mouseenter.bs.carousel",(e=>this.pause(e))),pt.on(this._element,"mouseleave.bs.carousel",(e=>this.cycle(e)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const e=e=>this._pointerEvent&&("pen"===e.pointerType||"touch"===e.pointerType),t=t=>{e(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},n=e=>{this.touchDeltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this.touchStartX},i=t=>{e(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((e=>this.cycle(e)),500+this._config.interval))};xt.find(".carousel-item img",this._element).forEach((e=>{pt.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()))})),this._pointerEvent?(pt.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),pt.on(this._element,"pointerup.bs.carousel",(e=>i(e))),this._element.classList.add("pointer-event")):(pt.on(this._element,"touchstart.bs.carousel",(e=>t(e))),pt.on(this._element,"touchmove.bs.carousel",(e=>n(e))),pt.on(this._element,"touchend.bs.carousel",(e=>i(e))))}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=kt[e.key];t&&(e.preventDefault(),this._slide(t))}_getItemIndex(e){return this._items=e&&e.parentNode?xt.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){const n=e===St;return Ye(this._items,t,n,this._config.wrap)}_triggerSlideEvent(e,t){const n=this._getItemIndex(e),i=this._getItemIndex(xt.findOne(Lt,this._element));return pt.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:i,to:n})}_setActiveIndicatorElement(e){if(this._indicatorsElement){const t=xt.findOne(".active",this._indicatorsElement);t.classList.remove(It),t.removeAttribute("aria-current");const n=xt.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<n.length;t++)if(Number.parseInt(n[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){n[t].classList.add(It),n[t].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||xt.findOne(Lt,this._element);if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(e,t){const n=this._directionToOrder(e),i=xt.findOne(Lt,this._element),o=this._getItemIndex(i),r=t||this._getItemByOrder(n,i),s=this._getItemIndex(r),a=Boolean(this._interval),l=n===St,c=l?"carousel-item-start":"carousel-item-end",u=l?"carousel-item-next":"carousel-item-prev",d=this._orderToDirection(n);if(r&&r.classList.contains(It))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(r,d).defaultPrevented)return;if(!i||!r)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const p=()=>{pt.trigger(this._element,Rt,{relatedTarget:r,direction:d,from:o,to:s})};if(this._element.classList.contains("slide")){r.classList.add(u),$e(r),i.classList.add(c),r.classList.add(c);const e=()=>{r.classList.remove(c,u),r.classList.add(It),i.classList.remove(It,u,c),this._isSliding=!1,setTimeout(p,0)};this._queueCallback(e,i,!0)}else i.classList.remove(It),r.classList.add(It),this._isSliding=!1,p();a&&this.cycle()}_directionToOrder(e){return[At,Nt].includes(e)?ze()?e===Nt?Ot:St:e===Nt?St:Ot:e}_orderToDirection(e){return[St,Ot].includes(e)?ze()?e===Ot?Nt:At:e===Ot?At:Nt:e}static carouselInterface(e,t){const n=jt.getOrCreateInstance(e,t);let{_config:i}=n;"object"==typeof t&&(i={...i,...t});const o="string"==typeof t?t:i.slide;if("number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(e){return this.each((function(){jt.carouselInterface(this,e)}))}static dataApiClickHandler(e){const t=Le(this);if(!t||!t.classList.contains("carousel"))return;const n={...Et.getDataAttributes(t),...Et.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),jt.carouselInterface(t,n),i&&jt.getInstance(t).to(i),e.preventDefault()}}pt.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",jt.dataApiClickHandler),pt.on(window,"load.bs.carousel.data-api",(()=>{const e=xt.find('[data-bs-ride="carousel"]');for(let t=0,n=e.length;t<n;t++)jt.carouselInterface(e[t],jt.getInstance(e[t]))})),Ve(jt);const Pt="collapse",Ht={toggle:!0,parent:null},qt={toggle:"boolean",parent:"(null|element)"},Mt="show",Bt="collapse",Ft="collapsing",Wt="collapsed",$t=":scope .collapse .collapse",Gt='[data-bs-toggle="collapse"]';class Ut extends gt{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const n=xt.find(Gt);for(let e=0,t=n.length;e<t;e++){const t=n[e],i=Ie(t),o=xt.find(i).filter((e=>e===this._element));null!==i&&o.length&&(this._selector=i,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ht}static get NAME(){return Pt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e,t=[];if(this._config.parent){const e=xt.find($t,this._config.parent);t=xt.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!e.includes(t)))}const n=xt.findOne(this._selector);if(t.length){const i=t.find((e=>n!==e));if(e=i?Ut.getInstance(i):null,e&&e._isTransitioning)return}if(pt.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t.forEach((t=>{n!==t&&Ut.getOrCreateInstance(t,{toggle:!1}).hide(),e||ft.set(t,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Bt),this._element.classList.add(Ft),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ft),this._element.classList.add(Bt,Mt),this._element.style[i]="",pt.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(pt.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,$e(this._element),this._element.classList.add(Ft),this._element.classList.remove(Bt,Mt);const t=this._triggerArray.length;for(let e=0;e<t;e++){const t=this._triggerArray[e],n=Le(t);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Ft),this._element.classList.add(Bt),pt.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Mt)}_getConfig(e){return(e={...Ht,...Et.getDataAttributes(this._element),...e}).toggle=Boolean(e.toggle),e.parent=He(e.parent),qe(Pt,e,qt),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=xt.find($t,this._config.parent);xt.find(Gt,this._config.parent).filter((t=>!e.includes(t))).forEach((e=>{const t=Le(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}))}_addAriaAndCollapsedClass(e,t){e.length&&e.forEach((e=>{t?e.classList.remove(Wt):e.classList.add(Wt),e.setAttribute("aria-expanded",t)}))}static jQueryInterface(e){return this.each((function(){const t={};"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1);const n=Ut.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}pt.on(document,"click.bs.collapse.data-api",Gt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Ie(this);xt.find(t).forEach((e=>{Ut.getOrCreateInstance(e,{toggle:!1}).toggle()}))})),Ve(Ut);const zt="dropdown",Vt="Escape",Xt="Space",Kt="ArrowUp",Yt="ArrowDown",Qt=new RegExp("ArrowUp|ArrowDown|Escape"),Jt="click.bs.dropdown.data-api",Zt="keydown.bs.dropdown.data-api",en="show",tn='[data-bs-toggle="dropdown"]',nn=".dropdown-menu",on=ze()?"top-end":"top-start",rn=ze()?"top-start":"top-end",sn=ze()?"bottom-end":"bottom-start",an=ze()?"bottom-start":"bottom-end",ln=ze()?"left-start":"right-start",cn=ze()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},dn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends gt{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return un}static get DefaultType(){return dn}static get NAME(){return zt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Be(this._element)||this._isShown(this._menu))return;const e={relatedTarget:this._element};if(pt.trigger(this._element,"show.bs.dropdown",e).defaultPrevented)return;const t=pn.getParentFromElement(this._element);this._inNavbar?Et.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((e=>pt.on(e,"mouseover",We))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(en),this._element.classList.add(en),pt.trigger(this._element,"shown.bs.dropdown",e)}hide(){if(Be(this._element)||!this._isShown(this._menu))return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){pt.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>pt.off(e,"mouseover",We))),this._popper&&this._popper.destroy(),this._menu.classList.remove(en),this._element.classList.remove(en),this._element.setAttribute("aria-expanded","false"),Et.removeDataAttribute(this._menu,"popper"),pt.trigger(this._element,"hidden.bs.dropdown",e))}_getConfig(e){if(e={...this.constructor.Default,...Et.getDataAttributes(this._element),...e},qe(zt,e,this.constructor.DefaultType),"object"==typeof e.reference&&!Pe(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${zt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(t){if(void 0===e)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let n=this._element;"parent"===this._config.reference?n=t:Pe(this._config.reference)?n=He(this._config.reference):"object"==typeof this._config.reference&&(n=this._config.reference);const i=this._getPopperConfig(),o=i.modifiers.find((e=>"applyStyles"===e.name&&!1===e.enabled));this._popper=Ne(n,this._menu,i),o&&Et.setDataAttribute(this._menu,"popper","static")}_isShown(e=this._element){return e.classList.contains(en)}_getMenuElement(){return xt.next(this._element,nn)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return ln;if(e.classList.contains("dropstart"))return cn;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?rn:on:t?an:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const n=xt.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Me);n.length&&Ye(n,t,e===Yt,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=pn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e&&(2===e.button||"keyup"===e.type&&"Tab"!==e.key))return;const t=xt.find(tn);for(let n=0,i=t.length;n<i;n++){const i=pn.getInstance(t[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const o={relatedTarget:i._element};if(e){const t=e.composedPath(),n=t.includes(i._menu);if(t.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(o.clickEvent=e)}i._completeHide(o)}}static getParentFromElement(e){return Le(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?e.key===Xt||e.key!==Vt&&(e.key!==Yt&&e.key!==Kt||e.target.closest(nn)):!Qt.test(e.key))return;const t=this.classList.contains(en);if(!t&&e.key===Vt)return;if(e.preventDefault(),e.stopPropagation(),Be(this))return;const n=this.matches(tn)?this:xt.prev(this,tn)[0],i=pn.getOrCreateInstance(n);if(e.key!==Vt)return e.key===Kt||e.key===Yt?(t||i.show(),void i._selectMenuItem(e)):void(t&&e.key!==Xt||pn.clearMenus());i.hide()}}pt.on(document,Zt,tn,pn.dataApiKeydownHandler),pt.on(document,Zt,nn,pn.dataApiKeydownHandler),pt.on(document,Jt,pn.clearMenus),pt.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),pt.on(document,Jt,tn,(function(e){e.preventDefault(),pn.getOrCreateInstance(this).toggle()})),Ve(pn);const hn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",fn=".sticky-top";class gn{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+e)),this._setElementAttributes(hn,"paddingRight",(t=>t+e)),this._setElementAttributes(fn,"marginRight",(t=>t-e))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const o=window.getComputedStyle(e)[t];e.style[t]=`${n(Number.parseFloat(o))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(hn,"paddingRight"),this._resetElementAttributes(fn,"marginRight")}_saveInitialAttribute(e,t){const n=e.style[t];n&&Et.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=Et.getDataAttribute(e,t);void 0===n?e.style.removeProperty(t):(Et.removeDataAttribute(e,t),e.style[t]=n)}))}_applyManipulationCallback(e,t){Pe(e)?t(e):xt.find(e,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const mn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},vn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",bn="mousedown.bs.backdrop";class _n{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&$e(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Xe(e)}))):Xe(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Xe(e)}))):Xe(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...mn,..."object"==typeof e?e:{}}).rootElement=He(e.rootElement),qe("backdrop",e,vn),e}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),pt.on(this._getElement(),bn,(()=>{Xe(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(pt.off(this._element,bn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(e){Ke(e,this._getElement(),this._config.isAnimated)}}const wn={trapElement:null,autofocus:!0},En={trapElement:"element",autofocus:"boolean"},xn=".bs.focustrap",Cn="backward";class Dn{constructor(e){this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:e,autofocus:t}=this._config;this._isActive||(t&&e.focus(),pt.off(document,xn),pt.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),pt.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,pt.off(document,xn))}_handleFocusin(e){const{target:t}=e,{trapElement:n}=this._config;if(t===document||t===n||n.contains(t))return;const i=xt.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===Cn?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Cn:"forward")}_getConfig(e){return e={...wn,..."object"==typeof e?e:{}},qe("focustrap",e,En),e}}const Tn="modal",Sn="Escape",On={backdrop:!0,keyboard:!0,focus:!0},Nn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},An="hidden.bs.modal",kn="show.bs.modal",Rn="resize.bs.modal",In="click.dismiss.bs.modal",Ln="keydown.dismiss.bs.modal",jn="mousedown.dismiss.bs.modal",Pn="modal-open",Hn="show",qn="modal-static";class Mn extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=xt.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new gn}static get Default(){return On}static get NAME(){return Tn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||pt.trigger(this._element,kn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Pn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),pt.on(this._dialog,jn,(()=>{pt.one(this._element,"mouseup.dismiss.bs.modal",(e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;if(pt.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Hn),pt.off(this._element,In),pt.off(this._dialog,jn),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((e=>pt.off(e,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new _n({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Dn({trapElement:this._element})}_getConfig(e){return e={...On,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(Tn,e,Nn),e}_showElement(e){const t=this._isAnimated(),n=xt.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),t&&$e(this._element),this._element.classList.add(Hn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,pt.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,t)}_setEscapeEvent(){this._isShown?pt.on(this._element,Ln,(e=>{this._config.keyboard&&e.key===Sn?(e.preventDefault(),this.hide()):this._config.keyboard||e.key!==Sn||this._triggerBackdropTransition()})):pt.off(this._element,Ln)}_setResizeEvent(){this._isShown?pt.on(window,Rn,(()=>this._adjustDialog())):pt.off(window,Rn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Pn),this._resetAdjustments(),this._scrollBar.reset(),pt.trigger(this._element,An)}))}_showBackdrop(e){pt.on(this._element,In,(e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(pt.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:e,scrollHeight:t,style:n}=this._element,i=t>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||e.contains(qn)||(i||(n.overflowY="hidden"),e.add(qn),this._queueCallback((()=>{e.remove(qn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;(!n&&e&&!ze()||n&&!e&&ze())&&(this._element.style.paddingLeft=`${t}px`),(n&&!e&&!ze()||!n&&e&&ze())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=Mn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}pt.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=Le(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),pt.one(t,kn,(e=>{e.defaultPrevented||pt.one(t,An,(()=>{Me(this)&&this.focus()}))}));const n=xt.findOne(".modal.show");n&&Mn.getInstance(n).hide(),Mn.getOrCreateInstance(t).toggle(this)})),mt(Mn),Ve(Mn);const Bn="offcanvas",Fn={backdrop:!0,keyboard:!0,scroll:!1},Wn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},$n="show",Gn=".offcanvas.show",Un="hidden.bs.offcanvas";class zn extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bn}static get Default(){return Fn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||pt.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new gn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add($n),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),pt.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(pt.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove($n),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new gn).reset(),pt.trigger(this._element,Un)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(e){return e={...Fn,...Et.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(Bn,e,Wn),e}_initializeBackDrop(){return new _n({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Dn({trapElement:this._element})}_addEventListeners(){pt.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()}))}static jQueryInterface(e){return this.each((function(){const t=zn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}pt.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=Le(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this))return;pt.one(t,Un,(()=>{Me(this)&&this.focus()}));const n=xt.findOne(Gn);n&&n!==t&&zn.getInstance(n).hide(),zn.getOrCreateInstance(t).toggle(this)})),pt.on(window,"load.bs.offcanvas.data-api",(()=>xt.find(Gn).forEach((e=>zn.getOrCreateInstance(e).show())))),mt(zn),Ve(zn);const Vn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Xn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Kn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(e,t)=>{const n=e.nodeName.toLowerCase();if(t.includes(n))return!Vn.has(n)||Boolean(Xn.test(e.nodeValue)||Kn.test(e.nodeValue));const i=t.filter((e=>e instanceof RegExp));for(let e=0,t=i.length;e<t;e++)if(i[e].test(n))return!0;return!1};function Qn(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),o=[].concat(...i.body.querySelectorAll("*"));for(let e=0,n=o.length;e<n;e++){const n=o[e],i=n.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){n.remove();continue}const r=[].concat(...n.attributes),s=[].concat(t["*"]||[],t[i]||[]);r.forEach((e=>{Yn(e,s)||n.removeAttribute(e.nodeName)}))}return i.body.innerHTML}const Jn="tooltip",Zn=new Set(["sanitize","allowList","sanitizeFn"]),ei={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ti={AUTO:"auto",TOP:"top",RIGHT:ze()?"left":"right",BOTTOM:"bottom",LEFT:ze()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ri="show",si="show",ai="out",li=".tooltip-inner",ci=".modal",ui="hide.bs.modal",di="hover",pi="focus";class hi extends gt{constructor(t,n){if(void 0===e)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(n),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Jn}static get Event(){return ii}static get DefaultType(){return ei}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(ri))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),pt.off(this._element.closest(ci),ui,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const e=pt.trigger(this._element,this.constructor.Event.SHOW),t=Fe(this._element),n=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(e.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(li).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),o=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME);i.setAttribute("id",o),this._element.setAttribute("aria-describedby",o),this._config.animation&&i.classList.add(oi);const r="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,s=this._getAttachment(r);this._addAttachmentClass(s);const{container:a}=this._config;ft.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(i),pt.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Ne(this._element,i,this._getPopperConfig(s)),i.classList.add(ri);const l=this._resolvePossibleFunction(this._config.customClass);l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>{pt.on(e,"mouseover",We)}));const c=this.tip.classList.contains(oi);this._queueCallback((()=>{const e=this._hoverState;this._hoverState=null,pt.trigger(this._element,this.constructor.Event.SHOWN),e===ai&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const e=this.getTipElement();if(pt.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;e.classList.remove(ri),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>pt.off(e,"mouseover",We))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const t=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&e.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),pt.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");e.innerHTML=this._config.template;const t=e.children[0];return this.setContent(t),t.classList.remove(oi,ri),this.tip=t,this.tip}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),li)}_sanitizeAndSetContent(e,t,n){const i=xt.findOne(n,e);t||!i?this.setElementContent(i,t):i.remove()}setElementContent(e,t){if(null!==e)return Pe(t)?(t=He(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.append(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Qn(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){const e=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(e)}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){return t||this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(e)}`)}_getAttachment(e){return ti[e.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((e=>{if("click"===e)pt.on(this._element,this.constructor.Event.CLICK,this._config.selector,(e=>this.toggle(e)));else if("manual"!==e){const t=e===di?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=e===di?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;pt.on(this._element,t,this._config.selector,(e=>this._enter(e))),pt.on(this._element,n,this._config.selector,(e=>this._leave(e)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},pt.on(this._element.closest(ci),ui,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?pi:di]=!0),t.getTipElement().classList.contains(ri)||t._hoverState===si?t._hoverState=si:(clearTimeout(t._timeout),t._hoverState=si,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===si&&t.show()}),t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?pi:di]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=ai,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===ai&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=Et.getDataAttributes(this._element);return Object.keys(t).forEach((e=>{Zn.has(e)&&delete t[e]})),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:He(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),qe(Jn,e,this.constructor.DefaultType),e.sanitize&&(e.template=Qn(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const e=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=e.getAttribute("class").match(t);null!==n&&n.length>0&&n.map((e=>e.trim())).forEach((t=>e.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(e){const{state:t}=e;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ve(hi);const fi={...hi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...hi.DefaultType,content:"(string|element|function)"},mi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class vi extends hi{static get Default(){return fi}static get NAME(){return"popover"}static get Event(){return mi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(e,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(e){return this.each((function(){const t=vi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ve(vi);const yi="scrollspy",bi={offset:10,method:"auto",target:""},_i={offset:"number",method:"string",target:"(string|element)"},wi="active",Ei=".nav-link, .list-group-item, .dropdown-item",xi="position";class Ci extends gt{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,pt.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bi}static get NAME(){return yi}refresh(){const e=this._scrollElement===this._scrollElement.window?"offset":xi,t="auto"===this._config.method?e:this._config.method,n=t===xi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),xt.find(Ei,this._config.target).map((e=>{const i=Ie(e),o=i?xt.findOne(i):null;if(o){const e=o.getBoundingClientRect();if(e.width||e.height)return[Et[t](o).top+n,i]}return null})).filter((e=>e)).sort(((e,t)=>e[0]-t[0])).forEach((e=>{this._offsets.push(e[0]),this._targets.push(e[1])}))}dispose(){pt.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(e){return(e={...bi,...Et.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}}).target=He(e.target)||document.documentElement,qe(yi,e,_i),e}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){const e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&e>=this._offsets[t]&&(void 0===this._offsets[t+1]||e<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(e){this._activeTarget=e,this._clear();const t=Ei.split(",").map((t=>`${t}[data-bs-target="${e}"],${t}[href="${e}"]`)),n=xt.findOne(t.join(","),this._config.target);n.classList.add(wi),n.classList.contains("dropdown-item")?xt.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(wi):xt.parents(n,".nav, .list-group").forEach((e=>{xt.prev(e,".nav-link, .list-group-item").forEach((e=>e.classList.add(wi))),xt.prev(e,".nav-item").forEach((e=>{xt.children(e,".nav-link").forEach((e=>e.classList.add(wi)))}))})),pt.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:e})}_clear(){xt.find(Ei,this._config.target).filter((e=>e.classList.contains(wi))).forEach((e=>e.classList.remove(wi)))}static jQueryInterface(e){return this.each((function(){const t=Ci.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(window,"load.bs.scrollspy.data-api",(()=>{xt.find('[data-bs-spy="scroll"]').forEach((e=>new Ci(e)))})),Ve(Ci);const Di="active",Ti="fade",Si="show",Oi=".active",Ni=":scope > li > .active";class Ai extends gt{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Di))return;let e;const t=Le(this._element),n=this._element.closest(".nav, .list-group");if(n){const t="UL"===n.nodeName||"OL"===n.nodeName?Ni:Oi;e=xt.find(t,n),e=e[e.length-1]}const i=e?pt.trigger(e,"hide.bs.tab",{relatedTarget:this._element}):null;if(pt.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const o=()=>{pt.trigger(e,"hidden.bs.tab",{relatedTarget:this._element}),pt.trigger(this._element,"shown.bs.tab",{relatedTarget:e})};t?this._activate(t,t.parentNode,o):o()}_activate(e,t,n){const i=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?xt.children(t,Oi):xt.find(Ni,t))[0],o=n&&i&&i.classList.contains(Ti),r=()=>this._transitionComplete(e,i,n);i&&o?(i.classList.remove(Si),this._queueCallback(r,e,!0)):r()}_transitionComplete(e,t,n){if(t){t.classList.remove(Di);const e=xt.findOne(":scope > .dropdown-menu .active",t.parentNode);e&&e.classList.remove(Di),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(Di),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),$e(e),e.classList.contains(Ti)&&e.classList.add(Si);let i=e.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const t=e.closest(".dropdown");t&&xt.find(".dropdown-toggle",t).forEach((e=>e.classList.add(Di))),e.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(e){return this.each((function(){const t=Ai.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this)||Ai.getOrCreateInstance(this).show()})),Ve(Ai);const ki="toast",Ri="hide",Ii="show",Li="showing",ji={animation:"boolean",autohide:"boolean",delay:"number"},Pi={animation:!0,autohide:!0,delay:5e3};class Hi extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return ji}static get Default(){return Pi}static get NAME(){return ki}show(){pt.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Ri),$e(this._element),this._element.classList.add(Ii),this._element.classList.add(Li),this._queueCallback((()=>{this._element.classList.remove(Li),pt.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Ii)&&(pt.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Li),this._queueCallback((()=>{this._element.classList.add(Ri),this._element.classList.remove(Li),this._element.classList.remove(Ii),pt.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Ii)&&this._element.classList.remove(Ii),super.dispose()}_getConfig(e){return e={...Pi,...Et.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},qe(ki,e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){pt.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),pt.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),pt.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),pt.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}mt(Hi),Ve(Hi);var qi,Mi=n(755),Bi=function(){return Bi=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Bi.apply(this,arguments)},Fi=new(function(){function e(){}return e.prototype.get=function(e){var t=document.cookie.match("(?:(?:^|.*; *)".concat(e," *= *([^;]*).*$)|^.*$"))[1];if(t)return decodeURIComponent(t)},e.prototype.set=function(e,t,n){void 0===n&&(n={}),n.days&&(n["max-age"]=60*n.days*60*24,delete n.days),n=Object.entries(n).reduce((function(e,t){var n=t[0],i=t[1];return"".concat(e,"; ").concat(n,"=").concat(i)}),""),document.cookie=e+"="+encodeURIComponent(t)+n},e.prototype.delete=function(e,t){this.set(e,"",Bi({"max-age":-1},t))},e.prototype.getJSON=function(e){var t=this.get(e);return t?JSON.parse(t):""},e.prototype.setJSON=function(e,t,n){this.set(e,JSON.stringify(t),n)},e}()),Wi=function(){function e(){}return e.COL_SORTING="COL_SORTING",e.COL_RESIZED="COL_RESIZED",e.COL_SHOW_HIDE="COL_SHOW_HIDE",e.COL_REORDER="COL_REORDER",e}(),$i=function(){function e(){}return e.GRID_DATA="GRID_DATA",e.ON_NEXT_RECORD="ON_NEXT_RECORD",e.ON_PREV_RECORD="ON_PREV_RECORD",e.ON_SAVE_RECORD="ON_SAVE_RECORD",e.ON_DELETE_RECORD="ON_DELETE_RECORD",e.ON_LAST_RECORD="ON_LAST_RECORD",e.ON_FIRST_RECORD="ON_FIRST_RECORD",e.ON_ADD_RECORD="ON_ADD_RECORD",e.ON_FETCH_RECORD="ON_FETCH_RECORD",e.ON_FETCH_RECORD_ERROR="ON_FETCH_RECORD_ERROR",e.ON_FETCH_GRID_RECORD="ON_FETCH_GRID_RECORD",e.ON_FETCH_GRID_RECORD_ERROR="ON_FETCH_GRID_RECORD_ERROR",e.ON_NAVIGATING_RECORD="ON_NAVIGATING_RECORD",e.ON_GRID_UPDATED="ON_GRID_UPDATED",e.ON_SAVE_ERROR="ON_SAVE_ERROR",e.ON_SORTING_REQUESTED="ON_SORTING_REQUESTED",e.ON_COLS_REORDERED="ON_COLS_REORDERED",e.ON_GRID_DATA_BOUND="ON_GRID_DATA_BOUND",e.ON_GRID_CONFIG_UPDATED="ON_GRID_CONFIG_UPDATED",e.ON_PAGE_READY="ON_PAGE_READY",e.ON_ROW_UPDATED="ON_ROW_UPDATED",e.ON_FIELD_UPDATED="ON_FIELD_UPDATED",e.ON_ROW_DOUBLE_CLICKED="ON_ROW_DOUBLE_CLICKED",e}(),Gi=new(function(){function e(){this.callbacks=[],this.registerWinPopState()}return e.prototype.registerWinPopState=function(){var e=this;window.onpopstate=function(t){t.state&&t.state.eventData&&(console.log(t.state),e.notifyListeners($i.ON_FETCH_RECORD,{eventData:t.state.eventData,skipPush:!0}))}},e.prototype.notifyListeners=function(e,t){if(e)try{this.callbacks.forEach((function(n){n.eventType!==e||n.dataSourceName!==t.dataSourceName&&!0===n.verifyDSName||n.callback(t)}))}catch(e){console.error(e)}},e.prototype.unRegisterCallback=function(e,t,n){var i=this.callbacks.filter((function(i){return!(i.key===e&&i.eventType===t&&i.dataSourceName===n)}));this.callbacks=i},e.prototype.registerCallback=function(e,t,n,i,o){void 0===o&&(o=!1),t&&this.callbacks.push({key:e,eventType:t,callback:n,dataSourceName:i,verifyDSName:o})},e.prototype.invokeCallback=function(e,t){var n=[];return this.callbacks.forEach((function(i){if(i.eventType===e){var o=i.callback(t),r=i.dataSourceName;n.push({data:o,dataSourceName:r}),console.log("invokeCallback: Event:",e," payload: ",t," Result: ",o)}})),n},e}()),Ui=function(){function e(){this.jquery=Mi,this.children=[],this.appDataEvents=$i,this.appActions=Wi}return e.prototype.notifyListeners=function(e,t){Gi.notifyListeners(e,t)},e.prototype.getGridSettings=function(e){try{return Fi.getJSON(e)}catch(e){return void console.log(e)}},Object.defineProperty(e.prototype,"width",{get:function(){return this.element.css("width")},set:function(e){this.element.css("width",e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.element.is(":visible")},set:function(e){!1===e?this.element.hide():this.element.show()},enumerable:!1,configurable:!0}),e.prototype.getCss=function(e){return this.element.css(e)},e.prototype.setCss=function(e,t){this.element.css(e,t)},Object.defineProperty(e.prototype,"css",{set:function(e){this.element.css(e)},enumerable:!1,configurable:!0}),e.prototype.props=function(e){var t=this;e.forEach((function(e){return t.prop(e.key,e.value)}))},e.prototype.prop=function(e,t){return this.element.attr(e,t)},e.prototype.getProp=function(e){return this.element.attr(e)},e.prototype.find=function(e){return this.element.find(e)},e.prototype.addClass=function(e){return this.element.addClass(e),this},e.prototype.removeClass=function(e){return this.element.removeClass(e),this},e.prototype.hasClass=function(e){return this.element.hasClass(e)},e.prototype.setText=function(e){return this.element.text(e),this},e.prototype.getText=function(){return this.element.text()},e.prototype.append=function(e,t){return void 0===t&&(t=!0),t&&this.children.push(e),this.element.append(e.element),this},e.prototype.focus=function(){this.element.focus()},e.prototype.isEmptyObj=function(e){return 0===Object.keys(e).length},Object.defineProperty(e.prototype,"id",{get:function(){return this.getProp("id")},set:function(e){this.prop("id",e)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var t=new e,n=this.element[0].cloneNode();if(n instanceof HTMLElement&&(t.element=this.jquery(n)),this.children.length>0){var i=this.children.map((function(e){var n=e.clone();return t.element.append(n.element),n}));t.children=i}return t},e.prototype.shClone=function(e){return e?Object.assign(Object.create(Object.getPrototypeOf(e)),e):e},e}(),zi=(qi=function(e,t){return qi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},qi(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}qi(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Vi=function(e){function t(t){var n=e.call(this)||this;return n.options=t,n}return zi(t,e),Object.defineProperty(t.prototype,"val",{get:function(){return"date"===this.options.inputType&&this.element.val()?new Date(this.element.val().toString()).toString():this.element.val()},set:function(e){this.element.val(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"valExt",{set:function(e){this.element.val(e),this.element.change()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"modelName",{get:function(){return this.getProp("data-propname")},set:function(e){this.prop("data-propname",e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readonly",{get:function(){return this.element.is("readonly")},set:function(e){var t=!0===e?"true":"false";this.element.attr("readonly",t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"disabled",{get:function(){return this.element.is("disabled")},set:function(e){var t=!0===e?"true":"false";this.element.attr("disabled",t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isKey",{get:function(){return"true"===this.getProp("data-keycolumn")},set:function(e){this.prop("data-keycolumn",e)},enumerable:!1,configurable:!0}),t.prototype.clone=function(){return e.prototype.clone.call(this)},t.prototype.addDoubleClickEvent=function(){var e=this;this.element.on("dblclick",(function(t){e.notifyListeners(e.appDataEvents.ON_ROW_DOUBLE_CLICKED,{dataSourceName:e.options.dataSourceName,eventData:t,source:e})}))},t.prototype.change=function(){this.element.change()},t}(Ui),Xi=(n(661),function(){function e(){console.log("Session storage is initialized")}return e.prototype.addItem=function(e,t,n){var i={value:t,type:"prem",expiry:n.getTime()};"object"==typeof t&&void 0!==t&&(i.type="object"),sessionStorage.setItem(e,JSON.stringify(i))},e.prototype.appendItem=function(e,t){try{var n=this.getItemRaw(e);if(n){var i=t(n.value);this.addItem(e,i,new Date(n.expiry))}}catch(e){console.error(e)}},e.prototype.createExpiryKey=function(e){return e+"-expiry"},e.prototype.getItemRaw=function(e){var t=sessionStorage.getItem(e);if(t){var n=JSON.parse(t),i=n.expiry;return Date.now()>parseInt(i)?(this.removeItem(e),void console.log("entry expired, will be removed",n)):n}return null},e.prototype.getItem=function(e){var t=sessionStorage.getItem(e);if(t){var n=JSON.parse(t),i=n.expiry;return Date.now()>parseInt(i)?void this.removeItem(e):n.value}return null},e.prototype.removeItem=function(e){sessionStorage.removeItem(e)},e.prototype.removeAll=function(e){if(e){var t=sessionStorage.length;if(!(t<=0)){for(var n=[],i=0;i<t;i++)(o=sessionStorage.key(i)).startsWith(e)&&n.push(o);for(i=0;i<n.length;i++){var o=n[i];sessionStorage.removeItem(o)}}}else sessionStorage.removeAll()},e}()),Ki=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Yi=function(e,t,n){if(n||2===arguments.length)for(var i,o=0,r=t.length;o<r;o++)!i&&o in t||(i||(i=Array.prototype.slice.call(t,0,o)),i[o]=t[o]);return e.concat(i||Array.prototype.slice.call(t))},Qi=function(e){function t(t){var n=e.call(this)||this;return n.options=t,n.head=new lo,n.body=new co,n.selectors=new xo,n.paginator=new _o(new bo(n.options.dataSource.name,new Eo,(function(e){return n.paginatorCallback(e)}))),n.sessionCache=new Xi,n.httpClient=new vo(n.sessionCache,n.options.dataSource.name),n.infiniteScroller=null,n.gridActions=null,n}return Ki(t,e),t.prototype.paginatorCallback=function(e){this.fetchGridPage(e)},t.prototype.addHeader=function(){this.element.append(this.head.element)},t.prototype.addBody=function(){this.element.append(this.body.element)},t.prototype.render=function(){var e=this;this.element=this.jquery('<table class="table table-bordered table-hover table-sm resizable navTable nowrap"></table>'),this.id=this.options.gridId,this.prop("data-datasource",this.options.dataSource.name);var t=this.getGridSettings(this.options.gridId)||{};this.css={width:"inherit"};var n=new uo({dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,gridHeader:!0});n.addClass("draggable").addClass("grid-cols");var i=new uo({isTemplateRow:!0,dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,containerId:this.options.containerId});i.addClass("grid-rows"),i.css={display:"none"};var o=this.applyColSorting(t),r=new ro(new ho,!0),s=new Ji,a=new ro(new ho);a.append(s),n.addCell(r),i.addCell(a),o.forEach((function(o){var r=t[o.propName]||{},s=n.createHeaderFor(o),a=i.createInputFor(o,e);e.addSorting(s),e.applyColSettings(s,r),e.applyColSettings(a,r),n.addCell(s),i.addCell(a)})),this.head.addRow(n),this.body.addRow(i),this.addActions(),this.addHeader(),this.addBody(),this.jquery("#"+this.options.containerId).append(this.gridActions.element),this.jquery("#"+this.options.containerId).append(this.element),this.addInfiniteScroll();var l=this.options.dataSource.data.initData,c=this.options.dataSource.data.metaData;this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,{dataSourceName:this.options.dataSource.name,eventData:{items:l,metaData:c}}),this.notifyListeners(this.appDataEvents.ON_GRID_DATA_BOUND,{dataSourceName:this.options.dataSource.name,eventData:{},source:this})},t.prototype.addInfiniteScroll=function(){var e=this;!0===this.options.enableInfiniteScroll&&(this.infiniteScroller=new wo({gridElement:this.element,httpClient:this.httpClient}),this.infiniteScroller.nextPageCallback=function(t){return e.paginatorCallback(t)},this.infiniteScroller.enable())},t.prototype.addActions=function(){var e=this;this.gridActions=new so,this.gridActions.dataSourceName=this.options.dataSource.name,this.gridActions.addNewRecordAction((function(t){return e.addEmptyRow()})).addDeleteAction((function(t){return e.body.markDeleted()})).addGridSettingsAction()},t.prototype.addSorting=function(e){var t=this;e.element.on("click",(function(n){var i=!0;e.hasClass("sorting_asc")?(e.removeClass("sorting_asc").addClass("sorting_desc"),i=!1):e.removeClass("sorting_desc").addClass("sorting_asc"),e.element.siblings("th").removeClass("sorting_asc").removeClass("sorting_desc");var o=e.getProp("data-th-propname");e.notifyListeners(e.appDataEvents.ON_SORTING_REQUESTED,{dataSourceName:t.options.dataSource.name,eventData:n,propName:o,asc:i,source:t})}))},t.prototype.clearGrid=function(){this.find(".grid-row").remove();var e=this.body.getTemplateRow();this.body.rows=[e]},t.prototype.applyColSettings=function(e,t){this.isEmptyObj(t)||(!1===t.visible&&e.element.hide(),t.width&&(e.css={position:"relative",width:t.width}))},t.prototype.applyColSorting=function(e){if(!e||this.isEmptyObj(e))return this.options.colDefinition;var t=[];return this.options.colDefinition.forEach((function(n,i){var o=e[n.propName];t[o.position]=n})),t},t.prototype.bindDataSource=function(e,t){var n=this;if(e&&!(e.length<=0)){var i=e;!1===this.options.dataSource.isRemote&&(i=this.options.dataSource.getPageOfflineCB(t.pageIndex,this.options.dataSource.data.initData,t));var o=null;i.forEach((function(e,t){var i=n.addNewRow(e,!0);i.rowCategory="PRESTINE",o=i})),0==this.options.enableInfiniteScroll?this.bindPaginator(t):(this.infiniteScroller.initMetaData=t,this.infiniteScroller.initData=i,o&&(this.infiniteScroller.unobserve(),this.infiniteScroller.observe(o.element[0])))}},t.prototype.bindPaginator=function(e){void 0===e&&(e=new Eo),this.paginator.options.pagingMetaData=e,this.paginator.render(),this.jquery("#"+this.options.containerId).append(this.paginator.element)},t.prototype.addNewRow=function(e,t){var n=this,i=this.body.getNextRowIndex(),o=this.body.getTemplateRow().clone();o.options.isTemplateRow=!1,o.addClass("grid-row"),o.css={display:"table-row"};var r=this;o.getInputs().forEach((function(n,s){var a=n,l=a.id;a.id=l+"_"+i;var c=a.modelName,u=e[c];if("date"===a.options.inputType&&u){var d=new Date(u);a.val=r.toDateDisplayFormat(d)}else a instanceof eo&&("true"===u||"True"===u||!0===u)?a.prop("checked","checked"):void 0!==u&&(a.val=u);!1===t&&(a.disabled=!1,a.readonly=!1),a.element.on("change",(function(e){o.prop("data-isdirty",!0),"ADDED"!==o.rowCategory&&(o.rowCategory="UPDATED"),a.removeClass("is-invalid").prop("title","");var t=hi.getInstance(e.target);t&&t.dispose();var n=o.getRowDataExt();o.notifyListeners(r.appDataEvents.ON_GRID_UPDATED,{dataSourceName:r.options.dataSource.name,eventData:e}),o.notifyListeners(r.appDataEvents.ON_FIELD_UPDATED,{dataSourceName:r.options.dataSource.name,eventData:{row:n,field:a}}),o.notifyListeners(r.appDataEvents.ON_ROW_UPDATED,{dataSourceName:r.options.dataSource.name,eventData:n})})),a.element.on("focus",(function(e){r.body.focusRow(o)}))})),o.element.on("click",(function(e){r.body.focusRow(o)})),this.body.addRow(o);var s=o.getVisibleInputs();return s.length>0&&s[s.length-1].element.on("keydown",(function(e){return n.onInputKeyDown(o,e)})),o},t.prototype.toDateDisplayFormat=function(e){var t=e.getDate(),n=e.getMonth()+1;return e.getFullYear()+"-"+(n=(n<10?"0":"")+n)+"-"+(t<10?"0":"")+t},t.prototype.toTimeDisplayFormat=function(e){var t=e.getHours(),n=e.getMinutes();return(t=(t<10?"0":"")+t)+":"+(n<10?"0":"")+n},t.prototype.onInputKeyDown=function(e,t){if(9===t.which&&!0!==t.shiftKey){var n=this.body.getVisibleRows();n.length<=0||n[n.length-1].getRowIndex()===e.getRowIndex()&&this.addEmptyRow()}},t.prototype.addEmptyRow=function(){var e=this.addNewRow(this.createEmptyRowData(),!1),t=e.getVisibleInputs();return t.length>0&&t[0].focus(),e.rowCategory="ADDED",e.prop("data-isdirty","true"),this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,{dataSourceName:this.options.dataSource.name,eventData:e}),this.infiniteScroller.unobserve(),this.infiniteScroller.observe(e.element[0]),e},t.prototype.createEmptyRowData=function(){var e={};return this.options.colDefinition.forEach((function(t,n){e[t.propName]=void 0})),e},t.prototype.onHeaderNext=function(e,t){e&&e.eventData&&(this.resetSorting(),this.clearGrid(),this.paginator.clear(),!1!==t&&(this.fetchGridPage(1),!0===this.options.enableInfiniteScroll&&(this.infiniteScroller.currentPage=1)))},t.prototype.fetchGridPage=function(e){if(!0===this.options.dataSource.isRemote){var t=this.options.dataSource.url(e);if(!t)return;var n=new yo(t,"GET");this.httpClient.get(n)}else{var i=this.options.dataSource.data.initData,o=this.options.dataSource.data.metaData;this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,{dataSourceName:this.options.dataSource.name,eventData:{items:i,metaData:new Eo(e,o.pageSize,o.totalRecords)}})}},t.prototype.onSaveRecord=function(e){var t=this;this.body.rows.filter((function(e){return"DELETED"===e.rowCategory||"ADDED_DELETED"===e.rowCategory})).forEach((function(e){return t.body.removeRow(e)})),this.body.rows.forEach((function(e){e.rowCategory="PRESTINE",e.getInputs().filter((function(e){return e.isKey})).forEach((function(e){e.disabled=!0}))}))},t.prototype.onSaveError=function(e){if(e&&e.eventData&&e.eventData.responseJSON)for(var t=e.eventData.responseJSON,n=this.options.dataSource.name,i=this.body.getDirtyRows(),o=0;o<i.length;o++){var r=t[n+"["+o+"]"];if(r&&r.length>0){var s=r[0],a=o,l=this.getRowByIndex(parseInt(s));if(!l)continue;this.options.colDefinition.forEach((function(e,i){var o=e.propName.toPascalCaseJson(),r=t[n+"["+a+"]."+o];if(r&&r.length>0){var s=l.find("input[data-propname="+e.propName+"]");if((!s||s.length<=0)&&(s=l.find("select[data-propname="+e.propName+"]"),console.log("select found")),s&&s.length>0){s.addClass("is-invalid");var c="";Array.from(r).forEach((function(e){c+=e+" "})),s.attr("title",c),new hi(s[0],{customClass:"tooltip-error"})}}}))}}},t.prototype.getRowByIndex=function(e){return this.body.rows.find((function(t,n){return t.getRowIndex()===e}))},t.prototype.sortTable=function(e,t){var n,i,o=this,r=function(e,t){var n=e.cells[t].element;return n.find("input, select").is(":checked")||n.find("input, select").val()||n.text()},s=this.options.dataSource.name;this.body.rows.sort((n=this.head.getGridTitlesRow().cells.indexOf(e),i=t=!t,function(e,t){return o=r(i?e:t,n),s=r(i?t:e,n),""===o||""===s||isNaN(o)||isNaN(s)?o.toString().localeCompare(s):o-s;var o,s})).forEach((function(e){return o.body.append(e,!1)})),this.notifyListeners($i.ON_COLS_REORDERED,{dataSourceName:s,eventData:{th:e,asc:t},source:this}),this.notifyListeners(this.appDataEvents.ON_GRID_CONFIG_UPDATED,{dataSourceName:s,eventData:{th:e,asc:t},source:this,action:this.appActions.COL_SORTING})},t.prototype.onSortingRequest=function(e){var t=this.jquery(e.eventData.target);if("th"!==t.prop("tagName").toLowerCase()){var n=t.parents("th");if(!n||0===n.length)return;e.eventData.target=n[0]}var i=this.head.getGridTitlesRow().cells.find((function(t,n){return t.element[0]===e.eventData.target}));this.sortTable(i,e.asc)},t.prototype.resetSorting=function(){this.head.rows.forEach((function(e,t){e.hasClass("sorting_desc")&&e.removeClass("sorting_asc").removeClass("sorting_desc")}))},t.prototype.onColsReordered=function(e){var t=this;this.body.rows.forEach((function(e,n){e.getInputs().forEach((function(e){e.element.off("keydown")}));var i=e.getVisibleInputs();i.length<=0||i[i.length-1].element.on("keydown",(function(n){t.onInputKeyDown(e,n)}))}))},t.prototype.registerCallback=function(e,t,n,i,o){void 0===o&&(o=!1),Gi.registerCallback(e,t,n,i,o)},t.prototype.unRegisterCallback=function(e,t,n){Gi.unRegisterCallback(e,t,n)},t.prototype.addHandler=function(e,t,n){var i=this;void 0===n&&(n=!1);var o=this.options.gridId,r=this.options.dataSource.name;this.registerCallback(o,e,(function(e){return t(i,e)}),r,n)},t.prototype.removeHandler=function(e){var t=this.options.gridId,n=this.options.dataSource.name;this.unRegisterCallback(t,e,n)},t.prototype.onFetchData=function(e){!1===this.options.enableInfiniteScroll&&this.clearGrid();var t=e.eventData.metaData;t&&this.bindDataSource(e.eventData.items,new Eo(t.pageIndex,t.pageSize,t.totalRecords))},t.prototype.onFetchDataError=function(e){},t.prototype.registerCallbacks=function(e){var t=this;void 0===e&&(e=!0);var n=this.options.gridId,i=this.options.dataSource.name;this.registerCallback(n,$i.GRID_DATA,(function(){return t.body.getDirtyRecords()}),i),this.registerCallback(n,$i.ON_ADD_RECORD,(function(e){return t.onHeaderNext(e,!1)}),i),this.registerCallback(n,$i.ON_FETCH_RECORD,(function(e){return t.onHeaderNext(e,!0)}),i),this.registerCallback(n,$i.ON_SAVE_RECORD,(function(e){return t.onSaveRecord(e)}),i),this.registerCallback(n,$i.ON_SAVE_ERROR,(function(e){return t.onSaveError(e)}),i),this.registerCallback(n,$i.ON_SORTING_REQUESTED,(function(e){return t.onSortingRequest(e)}),i,e),this.registerCallback(n,$i.ON_COLS_REORDERED,(function(e){return t.onColsReordered(e)}),i,e),this.registerCallback(n,$i.ON_GRID_CONFIG_UPDATED,(function(e){return t.onGridConfigurationChanged(e)}),i,e),this.registerCallback(n,$i.ON_GRID_DATA_BOUND,(function(e){return t.onGridDataBound(e)}),i,e),this.registerCallback(n,$i.ON_FETCH_GRID_RECORD,(function(e){return t.onFetchData(e)}),i,e),this.registerCallback(n,$i.ON_FETCH_GRID_RECORD_ERROR,(function(e){return t.onFetchDataError(e)}),i,e)},t}(Ui),Ji=function(e){function t(){var t=e.call(this)||this;return t.render(),t}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery('<i class="bi bi-caret-right row-marker"></i>')},t.prototype.clone=function(){return e.prototype.clone.call(this)},t}(Ui),Zi=function(e){function t(t){void 0===t&&(t={dataSourceName:"",inputType:"text"});var n=e.call(this,t)||this;return n.render(),n}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery("<input type='".concat(this.options.inputType,"' /> "))},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options));return i.element=n.element,i.children=n.children,i.addDoubleClickEvent(),i},t}(Vi),eo=function(e){function t(t){var n=e.call(this,t)||this;return n.render(),n}return Ki(t,e),Object.defineProperty(t.prototype,"val",{get:function(){return!0===this.element.is(":checked")?"true":"false"},set:function(e){this.element.val(e)},enumerable:!1,configurable:!0}),t.prototype.render=function(){this.element=this.jquery("<input type='checkbox' />")},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},t}(Vi),to=function(e){function t(t){var n=e.call(this)||this;return n.options=t,n.render(),n}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery("<option></option>"),this.element.val(this.options.value),this.element.text(this.options.text),this.options.isSelected&&this.element.attr("selected","selected")},t.prototype.clone=function(){var t=e.prototype.clone.call(this);return t.setText(this.element.text()),t},t}(Ui),no=function(e){function t(t){var n=e.call(this,t)||this;return n.render(),n}return Ki(t,e),Object.defineProperty(t.prototype,"val",{get:function(){return this.element.val()},set:function(e){this.element.val(e),this.element.change()},enumerable:!1,configurable:!0}),t.prototype.render=function(){this.element=this.jquery("<select></select>")},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},t}(Vi),io=function(e){function t(t){var n=e.call(this,t)||this;return n.options=t,n.render(),n}return Ki(t,e),t.prototype.render=function(){var e=this.options.icon?'<i class="bi bi-'.concat(this.options.icon,'"></i>'):"";this.element=this.jquery('<button class="btn btn-outline-primary" type="button">'.concat(e,"</button>")),this.options.handler&&this.addClickHandler()},t.prototype.addClickHandler=function(){var e=this;this.element.on("click",(function(t){return e.options.handler(t)}))},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options));return i.children=n.children,i},t}(Vi),oo=function(e){function t(t){var n=e.call(this,t)||this;return n.options=t,n.render(),n}return Ki(t,e),t.prototype.onItemSelected=function(e,t){console.log("row selected",e.grid.body.getSelectedRow());var n=e.grid.body.getSelectedRow().getInputs().find((function(e){return e.isKey}));n&&(this.txtElement.val=n.val,this.txtElement.change()),e.selectorModal.hide()},t.prototype.render=function(){var e=this;this.txtElement=new Zi(this.options),this.txtElement.addClass(this.options.cssClass).props([{key:"id",value:this.options.elementId},{key:"placeHolder",value:this.options.placeHolder},{key:"data-propname",value:this.options.propName}]),this.btnElement=new io({inputType:"button",dataSourceName:this.options.dataSourceName,icon:"search",handler:function(t){return e.options.btnClick(e,t)}});var t=this.jquery('<div class="input-group input-group-sm"></div>');this.element=t.append(this.txtElement.element).append(this.btnElement.element)},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options));return i.children=n.children,i},t}(Vi),ro=function(e){function t(t,n){void 0===n&&(n=!1);var i=e.call(this)||this;return i.options=t||new ho,i.isHeader=n,i.render(),i}return Ki(t,e),t.prototype.render=function(){var e=this.options?this.options.rowSpan:void 0,t=this.options?this.options.colSpan:void 0;this.element=!0===this.isHeader?this.jquery("<th class='sorting ds-col'></th>"):this.jquery("<td></td>"),e&&this.element.attr("rowSpan",e),t&&this.element.attr("colSpan",t)},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=new t(this.shClone(this.options),this.isHeader);return i.children=n.children,i.element=n.element,i},t}(Ui),so=function(e){function t(){var t=e.call(this)||this;return t.render(),t}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery('<div class="row actions-container"></div>')},t.prototype.addDeleteAction=function(e){var t=this.jquery('<button type="button" class="btn btn-sm btn-outline-danger grid-toolbar-action" \n                                    id="btnDeleteRow_'.concat(this.dataSourceName,'"><i class="bi bi-trash"></i>\n                                </button>'));return t.on("click",e),this.element.append(t),this},t.prototype.addNewRecordAction=function(e){var t=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    id="btnAddRow_'.concat(this.dataSourceName,'"><i class="bi bi-plus-circle"></i>\n                                </button>\''));return t.on("click",e),this.element.append(t),this},t.prototype.addGridSettingsAction=function(){var e=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    data-bs-toggle="modal" data-bs-target="#staticBackdrop_'.concat(this.dataSourceName,'" \n                                    id="btnSettings_').concat(this.dataSourceName,'"><i class="bi bi-gear"></i>\n                                </button>'));return this.element.append(e),this},t}(Ui),ao=function(e){function t(){var t=e.call(this)||this;return t.rows=[],t}return Ki(t,e),t.prototype.addRow=function(e){this.element.append(e.element);var t=this.getNextRowIndex();e.prop("data-rowindex",t);var n=!0===e.options.gridHeader?"head":"data";return e.prop("id","".concat(e.options.gridId,"_").concat(n,"_").concat(t)),this.rows.push(e),this},t.prototype.getVisibleRows=function(){return this.rows.filter((function(e){return!0===e.visible}))},t.prototype.getNextRowIndex=function(){return this.rows.length+1},t.prototype.getGridTitlesRow=function(){return this.rows.find((function(e){return!0===e.options.gridHeader}))},t}(Ui),lo=function(e){function t(){var t=e.call(this)||this;return t.render(),t}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery('<thead class="table-light"></thead>')},t}(ao),co=function(e){function t(){var t=e.call(this)||this;return t.render(),t}return Ki(t,e),t.prototype.render=function(){this.element=this.jquery("<tbody></tbody>")},t.prototype.rowSiblings=function(e){return this.rows.filter((function(t,n){if(t!==e)return t}))},t.prototype.focusRow=function(e){e.removeClass("table-active").addClass("table-active"),this.rowSiblings(e).forEach((function(e,t){return e.removeClass("table-active")}))},t.prototype.getTemplateRow=function(){var e=this.rows.filter((function(e){if(!0===e.options.isTemplateRow)return e}));if(e&&e.length>0)return e[0]},t.prototype.getDirtyRows=function(){return this.rows.filter((function(e,t){return e.isRowDirty()}))},t.prototype.getDirtyRecords=function(){var e=this.getDirtyRows();if(0===e.length)return[];var t=[];return e.forEach((function(e,n){t.push(e.getRowData())})),t},t.prototype.getSelectedRow=function(){return this.rows.find((function(e,t){return e.hasClass("table-active")}))},t.prototype.markDeleted=function(){var e=this.getSelectedRow();if(e){var t=this.rowSiblings(e),n=t[t.length-1];e.removeClass("table-active"),e.prop("data-isdirty","true"),e.css={display:"none"};var i=e.rowCategory;e.rowCategory="ADDED"===i?"ADDED_DELETED":"DELETED",this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,{dataSourceName:e.options.dataSourceName,eventData:e}),this.focusRow(n)}},t.prototype.removeRow=function(e){e.element.remove();var t=this.rows.indexOf(e);t>-1&&this.rows.splice(t,1)},t}(ao),uo=function(e){function t(t){var n=e.call(this)||this;return n.cells=[],n.options=t,n.render(),n}return Ki(t,e),Object.defineProperty(t.prototype,"rowCategory",{get:function(){return this.element.prop("data-rowcategory")},set:function(e){this.element.prop("data-rowcategory",e)},enumerable:!1,configurable:!0}),t.prototype.addCell=function(e){this.element.append(e.element),this.cells.push(e)},t.prototype.addCells=function(e){var t=this;e.forEach((function(e){return t.addCell(e)}))},t.prototype.render=function(){this.element||(this.element=this.jquery("<tr></tr>"))},t.prototype.clone=function(){var n=e.prototype.clone.call(this),i=this.shClone(this.options);i.isTemplateRow=!1;var o=new t(i);return o.element=n.element,o.children=n.children,o.cells=this.cells.map((function(e){var t=e.clone();return o.element.append(t.element),t})),o},t.prototype.focusRow=function(){this.removeClass("table-active").addClass("table-active")},t.prototype.getInputs=function(){var e=[];return this.cells.forEach((function(t,n){var i=t.children;i.length>0&&i.forEach((function(t,n){t instanceof oo?e.push(t.txtElement):t instanceof Vi&&e.push(t)}))})),e},t.prototype.createInputFor=function(e,t){var n=this,i=this.options.dataSourceName,o=this.options.gridId,r=null;if("select"===e.dataType)r=new no({dataSourceName:i}),e.dataSource.forEach((function(e){return r.append(new to(e))})),r.addClass("form-select form-select-sm");else if("checkbox"===e.dataType)r=new eo({dataSourceName:i});else if("selector"===e.dataType){var s=new Co({propName:e.propName,containerId:this.options.containerId,urlCb:e.selectorDataCB,gridCols:e.selectorCols});t.selectors.add(s),r=new oo({dataSourceName:i,propName:e.propName,btnId:"btn_"+o+"_template_row_"+e.propName,cssClass:"form-control form-control-sm",elementId:o+"_template_row_"+e.propName,inputType:"text",placeHolder:e.name,btnClick:function(e,t){s.grid.removeHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED),s.grid.addHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED,(function(t,n){return e.onItemSelected(s,n)})),s.show()}})}else(r=new Zi({dataSourceName:i,inputType:e.dataType})).addClass("form-control form-control-sm");"selector"!==e.dataType&&r.props([{key:"data-propname",value:e.propName},{key:"title",value:e.name},{key:"id",value:o+"_template_row_"+e.propName},{key:"placeholder",value:e.name}]),!0===e.isKey&&(r.readonly=!0,r.isKey=!0),!0===t.options.isReadonly&&(r.readonly=!0,r.setCss("cursor","pointer"),r.setCss("user-select","none"));var a=new ro(new ho);return a.append(r),a},t.prototype.createHeaderFor=function(e){var t=new ro(e,!0);return t.addClass("sorting").addClass("ds-col"),t.setText(e.name),t.prop("data-th-propname",e.propName),t},t.prototype.getVisibleInputs=function(){return this.getInputs().filter((function(e){return!0===e.visible}))},t.prototype.getRowDataExt=function(){var e=this.getInputs(),t={};return e.forEach((function(e,n){var i=e.modelName;t[i]=e})),t},t.prototype.getRowIndex=function(){var e=this.getProp("data-rowindex");return parseInt(e)},t.prototype.getRowData=function(){var e=this.getInputs(),t=this.getRowIndex(),n={},i=this.rowCategory;return n.rowCategory=i,e.forEach((function(e,t){var i=e.modelName;n[i]=e.val})),n.clientRowNumber=t,n},t.prototype.isRowDirty=function(){return"true"===this.getProp("data-isdirty")},t}(Ui),po=function(e,t,n,i,o){void 0===o&&(o=!1),this.gridId=e,this.containerId=t,this.colDefinition=n,this.dataSource=i,this.isReadonly=o,this.enableInfiniteScroll=!0},ho=function(e,t,n,i,o,r,s,a,l,c){this.name=e,this.dataType=t,this.width=n,this.propName=i,this.isKey=o,this.dataSource=r,this.colSpan=s,this.rowSpan=a,this.selectorDataCB=l,this.selectorCols=c},fo=function(e,t,n,i,o){void 0===i&&(i=function(e){}),void 0===o&&(o=void 0),this.name=e,this.data=t,this.isRemote=n,this.url=i,this.getPageOfflineCB=o},go=function(e,t,n,i,o){void 0===i&&(i=!0),void 0===o&&(o=void 0),this.source=e,this.eventData=t,this.dsName=n,this.asc=i,this.idField=o};Qi.prototype.configurableGrid=function(){var e=this,t=this.head.getGridTitlesRow().cells,n=this.options.dataSource.name,i='<div class="settings-menu grid-config-template">\n            <div class="modal fade" id="staticBackdrop_'.concat(this.options.dataSource.name,'" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"\n            aria-labelledby="staticBackdropLabel" aria-hidden="true">\n                <div class="modal-dialog modal-dialog-scrollable">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="staticBackdropLabel_').concat(this.options.dataSource.name,'">Configure columns</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <ul class="list-group grid-config-cols">\n\n                            </ul>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>'),o=this.jquery(i);this.jquery("#"+this.options.containerId).append(o);var r=o.find(".grid-config-cols");t.forEach((function(t,i){var o=t.getProp("data-th-propname");if(o){var s=e.jquery('<li class="list-group-item"></li>'),a=e.jquery('<input type="checkbox" value="" class="form-check-input me-1" />'),l="col_config_chk_"+o;a.attr("id",l),a.attr("data-config-propname",o),!0===t.visible&&a.attr("checked","checked");var c=e.jquery('<label for="'+l+'"></label>');c.text(t.getText()),s.append(a),s.append(c),r.append(s),a.on("click",(function(t){var i=e.jquery(t.target),o=i.attr("data-config-propname");if(o){var r=e.head.getGridTitlesRow(),s=r.cells.find((function(e){return e.getProp("data-th-propname")===o}));if(s){var a=e.body.rows,l=Yi(Yi([],a,!0),[r],!1),c=r.cells.indexOf(s);c<0||(l.forEach((function(e){var t=e.cells[c];t&&(!0===i.is(":checked")?t.visible=!0:t.visible=!1)})),e.notifyListeners($i.ON_COLS_REORDERED,{dataSourceName:n,eventData:t,source:e}),e.notifyListeners($i.ON_GRID_CONFIG_UPDATED,{dataSourceName:n,eventData:t,source:e,action:Wi.COL_SHOW_HIDE}))}}}))}}))},Qi.prototype.resizableGrid=function(){var e=this.options.dataSource.name,t=this.head.getGridTitlesRow().cells;this.css={},this.setCss("overflow","hidden");for(var n=this.element[0].offsetHeight,i=0;i<t.length;i++){var o=s(n);t[i].element.append(o),t[i].setCss("position","relative"),r(o,t[i],this)}function r(t,n,i){var o,r,s,l;t.addEventListener("mousedown",(function(e){l=i.element[0].offsetWidth,r=n.element[0],o=e.pageX;var t=function(e){if("border-box"==a(e,"box-sizing"))return 0;var t=a(e,"padding-left"),n=a(e,"padding-right");return parseInt(t)+parseInt(n)}(r);s=r.offsetWidth-t})),t.addEventListener("mouseover",(function(e){this.style.borderRight="2px solid #0000ff"})),t.addEventListener("mouseout",(function(e){this.style.borderRight=""})),document.addEventListener("mousemove",(function(e){if(r){var t=e.pageX-o;r.style.width=s+t+"px",i.element[0].style.width=l+t+"px"}})),document.addEventListener("mouseup",(function(t){r&&i.notifyListeners($i.ON_GRID_CONFIG_UPDATED,{dataSourceName:e,eventData:{e:t,curCol:r},source:i,action:Wi.COL_RESIZED}),r=void 0,o=void 0,s=void 0}))}function s(e){var t=document.createElement("div");return t.style.top="0",t.style.right="0",t.style.width="5px",t.style.position="absolute",t.style.cursor="col-resize",t.style.userSelect="none",t.style.height=e+"px",t}function a(e,t){return window.getComputedStyle(e,null).getPropertyValue(t)}},Qi.prototype.enableColumnReordering=function(){var e,t=this.options.dataSource.name,n=this.jquery,i=this,o=n('<div draggable="true" class="grid-header"></div>'),r=i.head.getGridTitlesRow(),s=r.cells;s.forEach((function(e){var t=e.element.children();if(0===t.length){var i=e.element.text();e.element.text(""),t=n("<div></div>").text(i),e.element.append(t)}n(t).wrap(o)})),i.find(".grid-header").on({dragstart:function(t){n(this).hasClass("grid-header")?(e=t.target,n(this).css("opacity","0.5")):e=void 0},dragleave:function(t){t.preventDefault(),e&&n(this).hasClass("grid-header")&&n(this).removeClass("over")},dragenter:function(t){t.preventDefault(),e&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragover:function(t){t.preventDefault(),e&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragend:function(t){t.preventDefault(),e&&n(this).css("opacity","1")},drop:function(o){if(o.preventDefault(),e){var l=n(this);l.removeClass("over");var c=o.target;if(l.hasClass("grid-header")&&e!==c){var u=l.parents("th");if(u&&!(u.length<=0)){var d=s.find((function(e){return e.element[0]===u[0]}));if(d){var p=s.indexOf(d),h=n(e).parents("th");if(h&&!(h.length<=0)){var f=s.find((function(e){return e.element[0]===h[0]}));if(d){var g=s.indexOf(f);if(p!=g){a(r,s,g,p);var m=i.body.rows;setTimeout((function(){for(var e=0;e<m.length;e++){var n=m[e],r=n.cells;if(p==g)return;a(n,r,g,p)}i.notifyListeners($i.ON_COLS_REORDERED,{dataSourceName:t,eventData:o,source:i}),i.notifyListeners($i.ON_GRID_CONFIG_UPDATED,{dataSourceName:t,eventData:o,source:i,action:Wi.COL_REORDER})}),500)}}}}}}}}});var a=function(e,t,n,i){if(n!=i){var o=d.ltr;n>i&&(o=d.rtl),o===d.rtl?l(t,n,i):c(t,n,i),e.cells=[],e.addCells(t)}},l=function(e,t,n){for(var i=t;i>n;i--)u(e,i,i-1)},c=function(e,t,n){for(var i=t;i<n;i++)u(e,i,i+1)},u=function(e,t,n){var i=e[t];e[t]=e[n],e[n]=i},d={rtl:"RIGHT-TO-LEFT",ltr:"LEFT-TO-RIGHT"}},Qi.prototype.onGridConfigurationChanged=function(e){e.action;var t=this.options.gridId,n=this.head.getGridTitlesRow().cells,i={};n.forEach((function(e,t){var n="asc";e.hasClass("sorting_desc")&&(n="desc");var o=e.getProp("data-th-propname"),r=new mo(e.getCss("width"),e.visible,n,t);i[o]=r})),Fi.delete(t),setTimeout((function(){Fi.setJSON(t,i,{days:30,secure:!0,SameSite:"strict"})}),500)},Qi.prototype.onGridDataBound=function(e){this.configurableGrid(),this.enableColumnReordering(),this.resizableGrid()};var mo=function(e,t,n,i){this.width=e,this.visible=t,this.sort=n,this.position=i},vo=function(e){function t(t,n){var i=e.call(this)||this;return i.appDataEvents=$i,i.sessionStorage=t,i.dataSourceName=n,i}return Ki(t,e),t.prototype.get=function(e){var t=JSON.stringify(e),n=this.sessionStorage.getItem(t);if(n)this.notifyResponse(n);else{var i=this,o={url:e.url,method:"GET",headers:e.headers?e.headers:{}};this.jquery.ajax(o).then((function(e){i.sessionStorage.addItem(t,e,new Date(Date.now()+6e5)),i.notifyResponse(e)}),(function(t){i.nofifyError(t,e)}))}},t.prototype.notifyResponse=function(e){this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,{dataSourceName:this.dataSourceName,eventData:e})},t.prototype.nofifyError=function(e,t){this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD_ERROR,{dataSourceName:this.dataSourceName,eventData:e,recordId:t.recordId})},t}(Ui),yo=function(e,t,n,i){void 0===n&&(n=void 0),void 0===i&&(i=void 0),this.url=e,this.method=t,this.headers=n,this.recordId=i,this.cacheResponse=!0},bo=function(e,t,n){void 0===n&&(n=function(e){}),this.dsName=e,this.pagingMetaData=t,this.nextPageCallback=n},_o=function(e){function t(t){var n=e.call(this)||this;return n.options=t,n.listId="pg_list_".concat(n.options.dsName),n.containerId="pg_container_".concat(n.options.dsName),n}return Ki(t,e),t.prototype.render=function(){var e=this;this.element&&this.element.remove(),this.element=this.jquery('<div class="bsgrid-pagination" id="'.concat(this.containerId,'">\n                        <nav aria-label="Page navigation">\n                            \n                        </nav>\n                    </div>'));for(var t=this.jquery('<ul class="pagination justify-content-end" id="'.concat(this.listId,'"></ul>')),n=1;n<=this.options.pagingMetaData.totalPages&&n<=5;n++){var i=this.jquery('<li class="page-item"></li>'),o=this.jquery('<a class="page-link" href="#" data-p-index="'.concat(n,'">').concat(n,"</a>"));i.append(o),t.append(i),o.on("click",(function(t){t.preventDefault();var n=e.jquery(t.target).attr("data-p-index");e.options.nextPageCallback&&e.options.nextPageCallback(parseInt(n))}))}this.element.find("nav").append(t)},t.prototype.clear=function(){this.jquery("#"+this.listId).children("li").remove()},t}(Ui),wo=function(e){function t(t){var n=e.call(this)||this;return n.gridElement=t.gridElement,n.httpClient=t.httpClient,n.s_area=null,n.observer=null,n.target=null,n.currentPage=1,n.initData=null,n.initMetaData=null,n.nextPageCallback=null,n}return Ki(t,e),t.prototype.observerCB=function(e,t){!0===e[0].isIntersecting&&this.currentPage<this.initMetaData.totalPages&&(console.log("Infinite scroll: fetching next page#: ",this.currentPage+1),this.currentPage++,this.nextPageCallback(this.currentPage))},t.prototype.observe=function(e){this.target=e,this.observer.observe(e)},t.prototype.unobserve=function(){this.observer.unobserve(this.target)},t.prototype.enable=function(){var e=this;this.s_area="scroll_area_"+this.gridElement.attr("id");var t=this.jquery('<div class="row" id="'.concat(this.s_area,'" style="max-height: 200px; overflow-y: auto"></div>'));this.gridElement.wrap(t);var n={root:this.jquery("#".concat(this.s_area))[0],rootMargin:"0px",threshold:.3,trackVisibility:!1};this.observer=new IntersectionObserver((function(t,n){return e.observerCB(t,n)}),n);var i=this.gridElement.find("tr"),o=i[i.length-1];this.observe(o)},t}(Ui),Eo=function(e,t,n){void 0===e&&(e=1),void 0===t&&(t=10),void 0===n&&(n=10),this.pageIndex=e,this.pageSize=!t||t<=0?10:t,this.totalRecords=n,this.totalPages=Math.ceil(this.totalRecords/this.pageSize)},xo=function(e){function t(){var t=e.call(this)||this;return t.items=[],t}return Ki(t,e),t.prototype.add=function(e){this.find(e.options.propName)||this.items.push(e)},t.prototype.findSelector=function(e){return this.items.find((function(t){return t.options.propName===e}))},t}(Ui),Co=function(e){function t(t){var n=e.call(this)||this;return n.options=t,n.parentContainerId=n.options.containerId,n.modalId="".concat(n.parentContainerId,"_bs_").concat(n.options.propName),n.modalTitleId="".concat(n.parentContainerId,"_lbs_").concat(n.options.propName),n.containerId="".concat(n.parentContainerId,"_cbs_").concat(n.options.propName),n.gridId="".concat(n.parentContainerId,"_g_").concat(n.options.propName),n.render(),n.grid=n.renderGrid(),n.onItemSelected=function(e,t){console.log()},n}return Ki(t,e),t.prototype.render=function(){var e=this,t=this.jquery("#"+this.parentContainerId).find("#"+this.modalId);if(t&&1===t.length)this.element=t,this.selectorModal=Mn.getOrCreateInstance(t[0]);else{var n='<div class="modal" id="'.concat(this.modalId,'">\n                        <div class="modal-dialog modal-dialog-scrollable">\n                            <div class="modal-content">\n                                <div class="modal-header">\n                                    <h5 class="modal-title" id="').concat(this.modalTitleId,'">Select a value</h5>\n                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                                </div>\n                                <div class="modal-body">\n                                    <div id="').concat(this.containerId,'">\n\n                                    </div>\n                                </div>\n                                <div class="modal-footer">\n                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                                </div>\n                            </div>\n                        </div>\n                </div>');this.element=this.jquery(n),this.jquery("#"+this.parentContainerId).append(this.element),this.selectorModal=new Mn(this.element[0]),this.element[0].addEventListener("shown.bs.modal",(function(t){e.grid.clearGrid(),e.grid.infiniteScroller.currentPage=1,e.grid.fetchGridPage(1)}))}},t.prototype.show=function(){this.selectorModal.show()},t.prototype.renderGrid=function(){var e=new fo("bsSelector",{initData:[],metaData:void 0},!0,this.options.urlCb),t=new po(this.gridId,this.containerId,this.options.gridCols,e,!0),n=new Qi(t);return n.registerCallbacks(),n.removeHandler(this.appDataEvents.GRID_DATA),n.removeHandler(this.appDataEvents.ON_ADD_RECORD),n.removeHandler(this.appDataEvents.ON_FETCH_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_ERROR),n.render(),n.gridActions.visible=!1,n},t}(Ui),Do=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),To=function(e){function t(t){var n=e.call(this,t)||this;return n.options=t,n.render(),n}return Do(t,e),t.prototype.render=function(){this.element=this.jquery("#".concat(this.options.elementId))},t}(Vi)})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_desc.png */ "./app-client/images/sort_desc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_asc.png */ "./app-client/images/sort_asc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_both.png */ "./app-client/images/sort_both.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n#scroll_area_fakeData_table {\r\n  max-height: 500px !important;\r\n\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}", "",{"version":3,"sources":["webpack://./app-client/css/site.css"],"names":[],"mappings":"AAAA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,UAAU;EACV,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oEAAyD;AAC3D;;AAEA;EACE,oEAAwD;AAC1D;;AAEA;EACE,yDAA8C;AAChD;;AAEA;EACE,eAAe;EACf,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;;;mBAIiB;EACjB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,UAAU;EACV,WAAW;AACb;;AAEA;EACE,4BAA4B;;AAE9B;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;wBACsB;;EAEtB,cAAc;EACd,qBAAqB;EACrB,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,2CAA2C;EAC3C,cAAc;AAChB;;AAEA;EACE,sDAAsD;EACtD,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB","sourcesContent":["html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(../images/sort_desc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(../images/sort_asc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(../images/sort_both.png);\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n#scroll_area_fakeData_table {\r\n  max-height: 500px !important;\r\n\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./app-client/css/site.css":
/*!*********************************!*\
  !*** ./app-client/css/site.css ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./site.css */ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./app-client/dynamic-demo.ts":
/*!************************************!*\
  !*** ./app-client/dynamic-demo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDemo": () => (/* binding */ DynamicDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var DynamicDemo = /** @class */ (function () {
    function DynamicDemo() {
    }
    DynamicDemo.run = function (containerId, initData) {
        console.log('running dynamic demo');
        var bookingLines = initData.data;
        var bookingLinesMetadata = initData.metaData;
        /*
        var bookingLine = {
              "lineNbr": index,
              "desc": 'Car part-' + index,
              "qty": 5 + index,
              "cost": 120 + index,
              "extCost": (5 + index) * (120 + index)
            };
        */
        var cols = [];
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Line nbr", "number", "80px", "lineNbr", true));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "desc", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Quantity", "number", "80px", "qty", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit cost", "number", "120px", "cost", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Cost", "number", "120px", "extCost", false));
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('lines', {
            initData: bookingLines, metaData: bookingLinesMetadata
        }, true, function (page) {
            var url = 'http://localhost:3000/api/bookinglines?page=' + page;
            console.log('Url: ', url);
            return url;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("bookingLines", containerId, cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
    };
    return DynamicDemo;
}());



/***/ }),

/***/ "./app-client/static-demo.ts":
/*!***********************************!*\
  !*** ./app-client/static-demo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticDemo": () => (/* binding */ StaticDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var StaticDemo = /** @class */ (function () {
    function StaticDemo() {
    }
    StaticDemo.run = function () {
        // console.log('test is initialized');
        console.log('hello from index');
        //
        // sample using bootstrap data grid 
        //
        var cols = [];
        var initData = [];
        var totCols = 5, totRows = 60;
        for (var i = 0; i < totCols; i++) {
            cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("COL-" + i, "text", "180px", "col-" + i, false));
        }
        for (var i = 0; i < totRows; i++) {
            var record = {};
            for (var j = 0; j < totCols; j++) {
                record['col-' + j] = 'DATA-' + i + '-' + j;
            }
            initData.push(record);
        }
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('fakeData', {
            initData: initData,
            metaData: new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagingMetaData(1, 5, totRows)
        }, false, null, function (page, data, mdata) {
            var start = page <= 1 ? 0 : (page - 1) * mdata.pageSize;
            var end = start + mdata.pageSize;
            var maxIndex = data.length - 1;
            if (start > maxIndex || end > maxIndex)
                return [];
            var pageData = [];
            for (var index = start; index < end; index++) {
                var element = data[index];
                pageData.push(element);
            }
            return pageData;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("fakeData_table", "dummy-data-container", cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
        var name = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt({ inputType: "text", elementId: "txtName", dataSourceName: "welcome" });
        name.val = "Welcome to TypeScript";
    };
    return StaticDemo;
}());



/***/ }),

/***/ "./app-client/images/sort_asc.png":
/*!****************************************!*\
  !*** ./app-client/images/sort_asc.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "4bba59196d7ce2619696.png";

/***/ }),

/***/ "./app-client/images/sort_both.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_both.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "8b117faa9d4dd934d6bb.png";

/***/ }),

/***/ "./app-client/images/sort_desc.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_desc.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "c4196d3286cc33244c83.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./app-client/index.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableDemos": () => (/* binding */ BSDataTableDemos)
/* harmony export */ });
/* harmony import */ var _css_site_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/site.css */ "./app-client/css/site.css");
/* harmony import */ var _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dynamic-demo */ "./app-client/dynamic-demo.ts");
/* harmony import */ var _static_demo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static-demo */ "./app-client/static-demo.ts");



var BSDataTableDemos = /** @class */ (function () {
    function BSDataTableDemos() {
    }
    BSDataTableDemos.runStaticDemo = function () {
        _static_demo__WEBPACK_IMPORTED_MODULE_2__.StaticDemo.run();
    };
    BSDataTableDemos.runDynamicDemo = function (containerId, initData) {
        _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__.DynamicDemo.run(containerId, initData);
    };
    return BSDataTableDemos;
}());


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,