(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bs_dt_demo"] = factory();
	else
		root["bs_dt_demo"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bs-datatable/dist/bsdatatable.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-datatable/dist/bsdatatable.js ***!
  \*******************************************************/
/***/ ((module) => {

/*! For license information please see bsdatatable.js.LICENSE.txt */
!function(t,e){ true?module.exports=e():0}(self,(function(){return(()=>{var t={755:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(t){return r.flat.call(t)}:function(t){return r.concat.apply([],t)},c=r.push,u=r.indexOf,p={},d=p.toString,f=p.hasOwnProperty,h=f.toString,g=h.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},y=function(t){return null!=t&&t===t.window},b=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,o,r=(n=n||b).createElement("script");if(r.text=t,e)for(i in _)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function E(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?p[d.call(t)]||"object":typeof t}var x="3.6.0",D=function(t,e){return new D.fn.init(t,e)};function C(t){var e=!!t&&"length"in t&&t.length,n=E(t);return!v(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}D.fn=D.prototype={jquery:x,constructor:D,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=D.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return D.each(this,t)},map:function(t){return this.pushStack(D.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(D.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(D.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},D.extend=D.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(c&&i&&(D.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[e],r=o&&!Array.isArray(n)?[]:o||D.isPlainObject(n)?n:{},o=!1,s[e]=D.extend(c,r,i)):void 0!==i&&(s[e]=i));return s},D.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t)||(e=s(t))&&("function"!=typeof(n=f.call(e,"constructor")&&e.constructor)||h.call(n)!==g))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){w(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(C(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?D.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:u.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,s=[];if(C(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&s.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&s.push(o);return l(s)},guid:1,support:m}),"function"==typeof Symbol&&(D.fn[Symbol.iterator]=r[Symbol.iterator]),D.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){p["[object "+e+"]"]=e.toLowerCase()}));var O=function(t){var e,n,i,o,r,s,a,l,c,u,p,d,f,h,g,m,v,y,b,_="sizzle"+1*new Date,w=t.document,E=0,x=0,D=lt(),C=lt(),O=lt(),T=lt(),S=function(t,e){return t===e&&(p=!0),0},N={}.hasOwnProperty,A=[],R=A.pop,k=A.push,I=A.push,j=A.slice,L=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\[[\\x20\\t\\r\\n\\f]*("+q+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+H+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",F=new RegExp(H+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),G=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(H+"|>"),z=new RegExp(B),V=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ot=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){d()},st=_t((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(A=j.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(t){I={apply:A.length?function(t,e){k.apply(t,j.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,o){var r,a,c,u,p,h,v,y=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!o&&(d(e),e=e||f,g)){if(11!==w&&(p=Z.exec(t)))if(r=p[1]){if(9===w){if(!(c=e.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(y&&(c=y.getElementById(r))&&b(e,c)&&c.id===r)return i.push(c),i}else{if(p[2])return I.apply(i,e.getElementsByTagName(t)),i;if((r=p[3])&&n.getElementsByClassName&&e.getElementsByClassName)return I.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!T[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===w&&(U.test(t)||$.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((u=e.getAttribute("id"))?u=u.replace(it,ot):e.setAttribute("id",u=_)),a=(h=s(t)).length;a--;)h[a]=(u?"#"+u:":scope")+" "+bt(h[a]);v=h.join(",")}try{return I.apply(i,y.querySelectorAll(v)),i}catch(e){T(t,!0)}finally{u===_&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,i,o)}function lt(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function ct(t){return t[_]=!0,t}function ut(t){var e=f.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function pt(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function dt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct((function(e){return e=+e,ct((function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},r=at.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},d=at.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:w;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,g=!r(f),w!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",rt,!1):o.attachEvent&&o.attachEvent("onunload",rt)),n.scope=ut((function(t){return h.appendChild(t).appendChild(f.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),n.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ut((function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=ut((function(t){return h.appendChild(t).id=_,!f.getElementsByName||!f.getElementsByName(_).length})),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(ut((function(t){var e;h.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+P+")"),t.querySelectorAll("[id~="+_+"-]").length||m.push("~="),(e=f.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=f.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ut((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",B)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(h.compareDocumentPosition),b=e||J.test(h.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},S=e?function(t,e){if(t===e)return p=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t==f||t.ownerDocument==w&&b(w,t)?-1:e==f||e.ownerDocument==w&&b(w,e)?1:u?L(u,t)-L(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return p=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t==f?-1:e==f?1:o?-1:r?1:u?L(u,t)-L(u,e):0;if(o===r)return dt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?dt(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},f):f},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(d(t),n.matchesSelector&&g&&!T[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){T(e,!0)}return at(e,f,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=f&&d(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=f&&d(t);var o=i.attrHandle[e.toLowerCase()],r=o&&N.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},at.escape=function(t){return(t+"").replace(it,ot)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,r=0;if(p=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(S),p){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return u=null,t},o=at.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},i=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=D[t+" "];return e||(e=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+t+"("+H+"|$)"))&&D(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var o=at.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,p,d,f,h,g=r!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(b=(f=(c=(u=(p=(d=m)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]||[])[0]===E&&c[1])&&c[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(b=f=0)||h.pop();)if(1===d.nodeType&&++b&&d===e){u[t]=[E,f,b];break}}else if(y&&(b=f=(c=(u=(p=(d=e)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]||[])[0]===E&&c[1]),!1===b)for(;(d=++f&&d&&d[g]||(b=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((u=(p=d[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]=[E,b]),d!==e)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return o[_]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,n){for(var i,r=o(t,e),s=r.length;s--;)t[i=L(t,r[s])]=!(n[i]=r[s])})):function(t){return o(t,0,n)}):o}},pseudos:{not:ct((function(t){var e=[],n=[],i=a(t.replace(W,"$1"));return i[_]?ct((function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))})):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||o(e)).indexOf(t)>-1}})),lang:ct((function(t){return V.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===h},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t})),gt:mt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ft(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ht(e);function yt(){}function bt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function _t(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&"parentNode"===r,a=x++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,l){var c,u,p,d=[E,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(u=(p=e[_]||(e[_]={}))[e.uniqueID]||(p[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[r])&&c[0]===E&&c[1]===a)return d[2]=c[2];if(u[r]=d,d[2]=t(e,n,l))return!0}return!1}}function wt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function Et(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function xt(t,e,n,i,o,r){return i&&!i[_]&&(i=xt(i)),o&&!o[_]&&(o=xt(o,r)),ct((function(r,s,a,l){var c,u,p,d=[],f=[],h=s.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!r&&e?g:Et(g,d,t,a,l),v=n?o||(r?t:h||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(c=Et(v,f),i(c,[],a,l),u=c.length;u--;)(p=c[u])&&(v[f[u]]=!(m[f[u]]=p));if(r){if(o||t){if(o){for(c=[],u=v.length;u--;)(p=v[u])&&c.push(m[u]=p);o(null,v=[],c,l)}for(u=v.length;u--;)(p=v[u])&&(c=o?L(r,p):d[u])>-1&&(r[c]=!(s[c]=p))}}else v=Et(v===s?v.splice(h,v.length):v),o?o(null,s,v,l):I.apply(s,v)}))}function Dt(t){for(var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,u=_t((function(t){return t===e}),a,!0),p=_t((function(t){return L(e,t)>-1}),a,!0),d=[function(t,n,i){var o=!s&&(i||n!==c)||((e=n).nodeType?u(t,n,i):p(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])d=[_t(wt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[_]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return xt(l>1&&wt(d),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&Dt(t.slice(l,o)),o<r&&Dt(t=t.slice(o)),o<r&&bt(t))}d.push(n)}return wt(d)}return yt.prototype=i.filters=i.pseudos,i.setFilters=new yt,s=at.tokenize=function(t,e){var n,o,r,s,a,l,c,u=C[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=i.preFilter;a;){for(s in n&&!(o=G.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=$.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=K[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):C(t,l).slice(0)},a=at.compile=function(t,e){var n,o=[],r=[],a=O[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Dt(e[n]))[_]?o.push(a):r.push(a);a=O(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,u){var p,h,m,v=0,y="0",b=r&&[],_=[],w=c,x=r||o&&i.find.TAG("*",u),D=E+=null==w?1:Math.random()||.1,C=x.length;for(u&&(c=s==f||s||u);y!==C&&null!=(p=x[y]);y++){if(o&&p){for(h=0,s||p.ownerDocument==f||(d(p),a=!g);m=t[h++];)if(m(p,s||f,a)){l.push(p);break}u&&(E=D)}n&&((p=!m&&p)&&v--,r&&b.push(p))}if(v+=y,n&&y!==v){for(h=0;m=e[h++];)m(b,_,s,a);if(r){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=R.call(l));_=Et(_)}I.apply(l,_),u&&!r&&_.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(E=D,c=w),b};return n?ct(r):r}(r,o)),a.selector=t}return a},l=at.select=function(t,e,n,o){var r,l,c,u,p,d="function"==typeof t&&t,f=!o&&s(t=d.selector||t);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=K.needsContext.test(t)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((p=i.find[u])&&(o=p(c.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(r,1),!(t=o.length&&bt(l)))return I.apply(n,o),n;break}}return(d||a(t,f))(o,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=_.split("").sort(S).join("")===_,n.detectDuplicates=!!p,d(),n.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||pt("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||pt("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||pt(P,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),at}(i);D.find=O,D.expr=O.selectors,D.expr[":"]=D.expr.pseudos,D.uniqueSort=D.unique=O.uniqueSort,D.text=O.getText,D.isXMLDoc=O.isXML,D.contains=O.contains,D.escapeSelector=O.escape;var T=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&D(t).is(n))break;i.push(t)}return i},S=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},N=D.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var R=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(t,e,n){return v(e)?D.grep(t,(function(t,i){return!!e.call(t,i,t)!==n})):e.nodeType?D.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?D.grep(t,(function(t){return u.call(e,t)>-1!==n})):D.filter(e,t,n)}D.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?D.find.matchesSelector(i,t)?[i]:[]:D.find.matches(t,D.grep(e,(function(t){return 1===t.nodeType})))},D.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(D(t).filter((function(){for(e=0;e<i;e++)if(D.contains(o[e],this))return!0})));for(n=this.pushStack([]),e=0;e<i;e++)D.find(t,o[e],n);return i>1?D.uniqueSort(n):n},filter:function(t){return this.pushStack(k(this,t||[],!1))},not:function(t){return this.pushStack(k(this,t||[],!0))},is:function(t){return!!k(this,"string"==typeof t&&N.test(t)?D(t):t||[],!1).length}});var I,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(D.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||I,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:j.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof D?e[0]:e,D.merge(this,D.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:b,!0)),R.test(i[1])&&D.isPlainObject(e))for(i in e)v(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=b.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(D):D.makeArray(t,this)}).prototype=D.fn,I=D(b);var L=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}D.fn.extend({has:function(t){var e=D(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(D.contains(this,e[t]))return!0}))},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&D(t);if(!N.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&D.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?D.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?u.call(D(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(D.uniqueSort(D.merge(this.get(),D(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),D.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return T(t,"parentNode")},parentsUntil:function(t,e,n){return T(t,"parentNode",n)},next:function(t){return H(t,"nextSibling")},prev:function(t){return H(t,"previousSibling")},nextAll:function(t){return T(t,"nextSibling")},prevAll:function(t){return T(t,"previousSibling")},nextUntil:function(t,e,n){return T(t,"nextSibling",n)},prevUntil:function(t,e,n){return T(t,"previousSibling",n)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return null!=t.contentDocument&&s(t.contentDocument)?t.contentDocument:(A(t,"template")&&(t=t.content||t),D.merge([],t.childNodes))}},(function(t,e){D.fn[t]=function(n,i){var o=D.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=D.filter(i,o)),this.length>1&&(P[t]||D.uniqueSort(o),L.test(t)&&o.reverse()),this.pushStack(o)}}));var q=/[^\x20\t\r\n\f]+/g;function M(t){return t}function B(t){throw t}function F(t,e,n,i){var o;try{t&&v(o=t.promise)?o.call(t).done(e).fail(n):t&&v(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}D.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return D.each(t.match(q)||[],(function(t,n){e[n]=!0})),e}(t):D.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){D.each(n,(function(n,i){v(i)?t.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==E(i)&&e(i)}))}(arguments),n&&!e&&l()),this},remove:function(){return D.each(arguments,(function(t,e){for(var n;(n=D.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(t){return t?D.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||e||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},D.extend({Deferred:function(t){var e=[["notify","progress",D.Callbacks("memory"),D.Callbacks("memory"),2],["resolve","done",D.Callbacks("once memory"),D.Callbacks("once memory"),0,"resolved"],["reject","fail",D.Callbacks("once memory"),D.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return D.Deferred((function(n){D.each(e,(function(e,i){var o=v(t[i[4]])&&t[i[4]];r[i[1]]((function(){var t=o&&o.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,o){var r=0;function s(t,e,n,o){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(t<r)){if((i=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?o?c.call(i,s(r,e,M,o),s(r,e,B,o)):(r++,c.call(i,s(r,e,M,o),s(r,e,B,o),s(r,e,M,e.notifyWith))):(n!==M&&(a=void 0,l=[i]),(o||e.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(i){D.Deferred.exceptionHook&&D.Deferred.exceptionHook(i,u.stackTrace),t+1>=r&&(n!==B&&(a=void 0,l=[i]),e.rejectWith(a,l))}};t?u():(D.Deferred.getStackHook&&(u.stackTrace=D.Deferred.getStackHook()),i.setTimeout(u))}}return D.Deferred((function(i){e[0][3].add(s(0,i,v(o)?o:M,i.notifyWith)),e[1][3].add(s(0,i,v(t)?t:M)),e[2][3].add(s(0,i,v(n)?n:B))})).promise()},promise:function(t){return null!=t?D.extend(t,o):o}},r={};return D.each(e,(function(t,i){var s=i[2],a=i[5];o[i[1]]=s.add,a&&s.add((function(){n=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=s.fireWith})),o.promise(r),t&&t.call(r,r),r},when:function(t){var e=arguments.length,n=e,i=Array(n),o=a.call(arguments),r=D.Deferred(),s=function(t){return function(n){i[t]=this,o[t]=arguments.length>1?a.call(arguments):n,--e||r.resolveWith(i,o)}};if(e<=1&&(F(t,r.done(s(n)).resolve,r.reject,!e),"pending"===r.state()||v(o[n]&&o[n].then)))return r.then();for(;n--;)F(o[n],s(n),r.reject);return r.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;D.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&W.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},D.readyException=function(t){i.setTimeout((function(){throw t}))};var G=D.Deferred();function $(){b.removeEventListener("DOMContentLoaded",$),i.removeEventListener("load",$),D.ready()}D.fn.ready=function(t){return G.then(t).catch((function(t){D.readyException(t)})),this},D.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--D.readyWait:D.isReady)||(D.isReady=!0,!0!==t&&--D.readyWait>0||G.resolveWith(b,[D]))}}),D.ready.then=G.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(D.ready):(b.addEventListener("DOMContentLoaded",$),i.addEventListener("load",$));var U=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===E(n))for(a in o=!0,n)U(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,v(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(D(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},z=/^-ms-/,V=/-([a-z])/g;function K(t,e){return e.toUpperCase()}function X(t){return t.replace(z,"ms-").replace(V,K)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=D.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[X(e)]=n;else for(i in e)o[X(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(q)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||D.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!D.isEmptyObject(e)}};var J=new Q,Z=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}D.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),D.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=Z.get(r),1===r.nodeType&&!J.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=X(i.slice(5)),nt(r,i,o[i]));J.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each((function(){Z.set(this,t)})):U(this,(function(e){var n;if(r&&void 0===e)return void 0!==(n=Z.get(r,t))||void 0!==(n=nt(r,t))?n:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),D.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,D.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=D.queue(t,e),i=n.length,o=n.shift(),r=D._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,(function(){D.dequeue(t,e)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:D.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),D.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?D.queue(this[0],t):void 0===e?this:this.each((function(){var n=D.queue(this,t,e);D._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&D.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){D.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=D.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=J.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ot=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),rt=["Top","Right","Bottom","Left"],st=b.documentElement,at=function(t){return D.contains(t.ownerDocument,t)},lt={composed:!0};st.getRootNode&&(at=function(t){return D.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===D.css(t,"display")};function ut(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return D.css(t,e,"")},l=a(),c=n&&n[3]||(D.cssNumber[e]?"":"px"),u=t.nodeType&&(D.cssNumber[e]||"px"!==c&&+l)&&ot.exec(D.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)D.style(t,e,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,D.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var pt={};function dt(t){var e,n=t.ownerDocument,i=t.nodeName,o=pt[i];return o||(e=n.body.appendChild(n.createElement(i)),o=D.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),pt[i]=o,o)}function ft(t,e){for(var n,i,o=[],r=0,s=t.length;r<s;r++)(i=t[r]).style&&(n=i.style.display,e?("none"===n&&(o[r]=J.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&ct(i)&&(o[r]=dt(i))):"none"!==n&&(o[r]="none",J.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(t[r].style.display=o[r]);return t}D.fn.extend({show:function(){return ft(this,!0)},hide:function(){return ft(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?D(this).show():D(this).hide()}))}});var ht,gt,mt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,yt=/^$|^module$|\/(?:java|ecma)script/i;ht=b.createDocumentFragment().appendChild(b.createElement("div")),(gt=b.createElement("input")).setAttribute("type","radio"),gt.setAttribute("checked","checked"),gt.setAttribute("name","t"),ht.appendChild(gt),m.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",m.option=!!ht.lastChild;var bt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _t(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?D.merge([t],n):n}function wt(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}bt.tbody=bt.tfoot=bt.colgroup=bt.caption=bt.thead,bt.th=bt.td,m.option||(bt.optgroup=bt.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function xt(t,e,n,i,o){for(var r,s,a,l,c,u,p=e.createDocumentFragment(),d=[],f=0,h=t.length;f<h;f++)if((r=t[f])||0===r)if("object"===E(r))D.merge(d,r.nodeType?[r]:r);else if(Et.test(r)){for(s=s||p.appendChild(e.createElement("div")),a=(vt.exec(r)||["",""])[1].toLowerCase(),l=bt[a]||bt._default,s.innerHTML=l[1]+D.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;D.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(e.createTextNode(r));for(p.textContent="",f=0;r=d[f++];)if(i&&D.inArray(r,i)>-1)o&&o.push(r);else if(c=at(r),s=_t(p.appendChild(r),"script"),c&&wt(s),n)for(u=0;r=s[u++];)yt.test(r.type||"")&&n.push(r);return p}var Dt=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function Ot(){return!1}function Tt(t,e){return t===function(){try{return b.activeElement}catch(t){}}()==("focus"===e)}function St(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)St(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Ot;else if(!o)return t;return 1===r&&(s=o,o=function(t){return D().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=D.guid++)),t.each((function(){D.event.add(this,e,o,i,n)}))}function Nt(t,e,n){n?(J.set(t,e,!1),D.event.add(t,e,{namespace:!1,handler:function(t){var i,o,r=J.get(this,e);if(1&t.isTrigger&&this[e]){if(r.length)(D.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=a.call(arguments),J.set(this,e,r),i=n(this,e),this[e](),r!==(o=J.get(this,e))||i?J.set(this,e,!1):o={},r!==o)return t.stopImmediatePropagation(),t.preventDefault(),o&&o.value}else r.length&&(J.set(this,e,{value:D.event.trigger(D.extend(r[0],D.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&D.event.add(t,e,Ct)}D.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,p,d,f,h,g,m=J.get(t);if(Y(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&D.find.matchesSelector(st,o),n.guid||(n.guid=D.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(e){return void 0!==D&&D.event.triggered!==e.type?D.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(q)||[""]).length;c--;)f=g=(a=Dt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=D.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=D.event.special[f]||{},u=D.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&D.expr.match.needsContext.test(o),namespace:h.join(".")},r),(d=l[f])||((d=l[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),p.add&&(p.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),D.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,p,d,f,h,g,m=J.hasData(t)&&J.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(q)||[""]).length;c--;)if(f=g=(a=Dt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=D.event.special[f]||{},d=l[f=(i?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)u=d[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,p.remove&&p.remove.call(t,u));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(t,h,m.handle)||D.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)D.event.remove(t,f+e[c],n,i,!0);D.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=new Array(arguments.length),l=D.event.fix(t),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=D.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=D.event.handlers.call(this,l,c),e=0;(o=s[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((D.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?D(o,this).index(c)>-1:D.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(D.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[D.expando]?t:new D.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&Nt(e,"click",Ct),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&Nt(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&A(e,"input")&&J.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},D.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},D.Event=function(t,e){if(!(this instanceof D.Event))return new D.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:Ot,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&D.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[D.expando]=!0},D.Event.prototype={constructor:D.Event,isDefaultPrevented:Ot,isPropagationStopped:Ot,isImmediatePropagationStopped:Ot,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},D.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},D.event.addProp),D.each({focus:"focusin",blur:"focusout"},(function(t,e){D.event.special[t]={setup:function(){return Nt(this,t,Tt),!1},trigger:function(){return Nt(this,t),!0},_default:function(){return!0},delegateType:e}})),D.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){D.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||D.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}})),D.fn.extend({on:function(t,e,n,i){return St(this,t,e,n,i)},one:function(t,e,n,i){return St(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,D(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Ot),this.each((function(){D.event.remove(this,t,n,e)}))}});var At=/<script|<style|<link/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function It(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&D(t).children("tbody")[0]||t}function jt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Lt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var n,i,o,r,s,a;if(1===e.nodeType){if(J.hasData(t)&&(a=J.get(t).events))for(o in J.remove(e,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)D.event.add(e,o,a[o][n]);Z.hasData(t)&&(r=Z.access(t),s=D.extend({},r),Z.set(e,s))}}function Ht(t,e){var n=e.nodeName.toLowerCase();"input"===n&&mt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function qt(t,e,n,i){e=l(e);var o,r,s,a,c,u,p=0,d=t.length,f=d-1,h=e[0],g=v(h);if(g||d>1&&"string"==typeof h&&!m.checkClone&&Rt.test(h))return t.each((function(o){var r=t.eq(o);g&&(e[0]=h.call(this,o,r.html())),qt(r,e,n,i)}));if(d&&(r=(o=xt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=D.map(_t(o,"script"),jt)).length;p<d;p++)c=o,p!==f&&(c=D.clone(c,!0,!0),a&&D.merge(s,_t(c,"script"))),n.call(t[p],c,p);if(a)for(u=s[s.length-1].ownerDocument,D.map(s,Lt),p=0;p<a;p++)c=s[p],yt.test(c.type||"")&&!J.access(c,"globalEval")&&D.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?D._evalUrl&&!c.noModule&&D._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(kt,""),c,u))}return t}function Mt(t,e,n){for(var i,o=e?D.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||D.cleanData(_t(i)),i.parentNode&&(n&&at(i)&&wt(_t(i,"script")),i.parentNode.removeChild(i));return t}D.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||D.isXMLDoc(t)))for(s=_t(a),i=0,o=(r=_t(t)).length;i<o;i++)Ht(r[i],s[i]);if(e)if(n)for(r=r||_t(t),s=s||_t(a),i=0,o=r.length;i<o;i++)Pt(r[i],s[i]);else Pt(t,a);return(s=_t(a,"script")).length>0&&wt(s,!l&&_t(t,"script")),a},cleanData:function(t){for(var e,n,i,o=D.event.special,r=0;void 0!==(n=t[r]);r++)if(Y(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)o[i]?D.event.remove(n,i):D.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),D.fn.extend({detach:function(t){return Mt(this,t,!0)},remove:function(t){return Mt(this,t)},text:function(t){return U(this,(function(t){return void 0===t?D.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return qt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||It(this,t).appendChild(t)}))},prepend:function(){return qt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=It(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return qt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return qt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(D.cleanData(_t(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return D.clone(this,t,e)}))},html:function(t){return U(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!bt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=D.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(D.cleanData(_t(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return qt(this,arguments,(function(e){var n=this.parentNode;D.inArray(this,t)<0&&(D.cleanData(_t(this)),n&&n.replaceChild(e,this))}),t)}}),D.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){D.fn[t]=function(t){for(var n,i=[],o=D(t),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),D(o[s])[e](n),c.apply(i,n.get());return this.pushStack(i)}}));var Bt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Ft=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},Wt=function(t,e,n){var i,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];for(o in i=n.call(t),e)t.style[o]=r[o];return i},Gt=new RegExp(rt.join("|"),"i");function $t(t,e,n){var i,o,r,s,a=t.style;return(n=n||Ft(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at(t)||(s=D.style(t,e)),!m.pixelBoxStyles()&&Bt.test(s)&&Gt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(c).appendChild(u);var t=i.getComputedStyle(u);n="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",s=36===e(t.right),o=36===e(t.width),u.style.position="absolute",r=12===e(u.offsetWidth/3),st.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var n,o,r,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,D.extend(m,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,e,n,o;return null==a&&(t=b.createElement("table"),e=b.createElement("tr"),n=b.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",st.appendChild(t).appendChild(e).appendChild(n),o=i.getComputedStyle(e),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===e.offsetHeight,st.removeChild(t)),a}}))}();var zt=["Webkit","Moz","ms"],Vt=b.createElement("div").style,Kt={};function Xt(t){return D.cssProps[t]||Kt[t]||(t in Vt?t:Kt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=zt.length;n--;)if((t=zt[n]+e)in Vt)return t}(t)||t)}var Yt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,Jt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"};function te(t,e,n){var i=ot.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ee(t,e,n,i,o,r){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=D.css(t,n+rt[s],!0,o)),i?("content"===n&&(l-=D.css(t,"padding"+rt[s],!0,o)),"margin"!==n&&(l-=D.css(t,"border"+rt[s]+"Width",!0,o))):(l+=D.css(t,"padding"+rt[s],!0,o),"padding"!==n?l+=D.css(t,"border"+rt[s]+"Width",!0,o):a+=D.css(t,"border"+rt[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function ne(t,e,n){var i=Ft(t),o=(!m.boxSizingReliable()||n)&&"border-box"===D.css(t,"boxSizing",!1,i),r=o,s=$t(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Bt.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&A(t,"tr")||"auto"===s||!parseFloat(s)&&"inline"===D.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===D.css(t,"boxSizing",!1,i),(r=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+ee(t,e,n||(o?"border":"content"),r,i,s)+"px"}function ie(t,e,n,i,o){return new ie.prototype.init(t,e,n,i,o)}D.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=$t(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=X(e),l=Qt.test(e),c=t.style;if(l||(e=Xt(a)),s=D.cssHooks[e]||D.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"==(r=typeof n)&&(o=ot.exec(n))&&o[1]&&(n=ut(t,e,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(D.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,r,s,a=X(e);return Qt.test(e)||(e=Xt(a)),(s=D.cssHooks[e]||D.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=$t(t,e,i)),"normal"===o&&e in Zt&&(o=Zt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),D.each(["height","width"],(function(t,e){D.cssHooks[e]={get:function(t,n,i){if(n)return!Yt.test(D.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ne(t,e,i):Wt(t,Jt,(function(){return ne(t,e,i)}))},set:function(t,n,i){var o,r=Ft(t),s=!m.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===D.css(t,"boxSizing",!1,r),l=i?ee(t,e,i,a,r):0;return a&&s&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-ee(t,e,"border",!1,r)-.5)),l&&(o=ot.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=D.css(t,e)),te(0,n,l)}}})),D.cssHooks.marginLeft=Ut(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-Wt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),D.each({margin:"",padding:"",border:"Width"},(function(t,e){D.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+rt[i]+e]=r[i]||r[i-2]||r[0];return o}},"margin"!==t&&(D.cssHooks[t+e].set=te)})),D.fn.extend({css:function(t,e){return U(this,(function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Ft(t),o=e.length;s<o;s++)r[e[s]]=D.css(t,e[s],!1,i);return r}return void 0!==n?D.style(t,e,n):D.css(t,e)}),t,e,arguments.length>1)}}),D.Tween=ie,ie.prototype={constructor:ie,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||D.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(D.cssNumber[n]?"":"px")},cur:function(){var t=ie.propHooks[this.prop];return t&&t.get?t.get(this):ie.propHooks._default.get(this)},run:function(t){var e,n=ie.propHooks[this.prop];return this.options.duration?this.pos=e=D.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ie.propHooks._default.set(this),this}},ie.prototype.init.prototype=ie.prototype,ie.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=D.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){D.fx.step[t.prop]?D.fx.step[t.prop](t):1!==t.elem.nodeType||!D.cssHooks[t.prop]&&null==t.elem.style[Xt(t.prop)]?t.elem[t.prop]=t.now:D.style(t.elem,t.prop,t.now+t.unit)}}},ie.propHooks.scrollTop=ie.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},D.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},D.fx=ie.prototype.init,D.fx.step={};var oe,re,se=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;function le(){re&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(le):i.setTimeout(le,D.fx.interval),D.fx.tick())}function ce(){return i.setTimeout((function(){oe=void 0})),oe=Date.now()}function ue(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=rt[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function pe(t,e,n){for(var i,o=(de.tweeners[e]||[]).concat(de.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function de(t,e,n){var i,o,r=0,s=de.prefilters.length,a=D.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var e=oe||ce(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:D.extend({},e),opts:D.extend(!0,{specialEasing:{},easing:D.easing._default},n),originalProperties:e,originalOptions:n,startTime:oe||ce(),duration:n.duration,tweens:[],createTween:function(e,n){var i=D.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=X(n)],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=D.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=de.prefilters[r].call(c,t,u,c.opts))return v(i.stop)&&(D._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return D.map(u,pe,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),D.fx.timer(D.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}D.Animation=D.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,ot.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(q);for(var n,i=0,o=t.length;i<o;i++)n=t[i],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u,p="width"in e||"height"in e,d=this,f={},h=t.style,g=t.nodeType&&ct(t),m=J.get(t,"fxshow");for(i in n.queue||(null==(s=D._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always((function(){d.always((function(){s.unqueued--,D.queue(t,"fx").length||s.empty.fire()}))}))),e)if(o=e[i],se.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||D.style(t,i)}if((l=!D.isEmptyObject(e))||!D.isEmptyObject(f))for(i in p&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=J.get(t,"display")),"none"===(u=D.css(t,"display"))&&(c?u=c:(ft([t],!0),c=t.style.display||c,u=D.css(t,"display"),ft([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===D.css(t,"float")&&(l||(d.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(t,"fxshow",{display:c}),r&&(m.hidden=!g),g&&ft([t],!0),d.done((function(){for(i in g||ft([t]),J.remove(t,"fxshow"),f)D.style(t,i,f[i])}))),l=pe(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),D.speed=function(t,e,n){var i=t&&"object"==typeof t?D.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return D.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in D.fx.speeds?i.duration=D.fx.speeds[i.duration]:i.duration=D.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&D.dequeue(this,i.queue)},i},D.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=D.isEmptyObject(t),r=D.speed(e,n,i),s=function(){var e=de(this,D.extend({},t),r);(o||J.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,o=null!=t&&t+"queueHooks",r=D.timers,s=J.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&ae.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||D.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=D.timers,s=i?i.length:0;for(n.finish=!0,D.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),D.each(["toggle","show","hide"],(function(t,e){var n=D.fn[e];D.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ue(e,!0),t,i,o)}})),D.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){D.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),D.timers=[],D.fx.tick=function(){var t,e=0,n=D.timers;for(oe=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||D.fx.stop(),oe=void 0},D.fx.timer=function(t){D.timers.push(t),D.fx.start()},D.fx.interval=13,D.fx.start=function(){re||(re=!0,le())},D.fx.stop=function(){re=null},D.fx.speeds={slow:600,fast:200,_default:400},D.fn.delay=function(t,e){return t=D.fx&&D.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var o=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(o)}}))},function(){var t=b.createElement("input"),e=b.createElement("select").appendChild(b.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=b.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var fe,he=D.expr.attrHandle;D.fn.extend({attr:function(t,e){return U(this,D.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){D.removeAttr(this,t)}))}}),D.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?D.prop(t,e,n):(1===r&&D.isXMLDoc(t)||(o=D.attrHooks[e.toLowerCase()]||(D.expr.match.bool.test(e)?fe:void 0)),void 0!==n?null===n?void D.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=D.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(q);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),fe={set:function(t,e,n){return!1===e?D.removeAttr(t,n):t.setAttribute(n,n),n}},D.each(D.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=he[e]||D.find.attr;he[e]=function(t,e,i){var o,r,s=e.toLowerCase();return i||(r=he[s],he[s]=o,o=null!=n(t,e,i)?s:null,he[s]=r),o}}));var ge=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;function ve(t){return(t.match(q)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function be(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(q)||[]}D.fn.extend({prop:function(t,e){return U(this,D.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[D.propFix[t]||t]}))}}),D.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&D.isXMLDoc(t)||(e=D.propFix[e]||e,o=D.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=D.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(D.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),D.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){D.propFix[this.toLowerCase()]=this})),D.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t))return this.each((function(e){D(this).addClass(t.call(this,e,ye(this)))}));if((e=be(t)).length)for(;n=this[l++];)if(o=ye(n),i=1===n.nodeType&&" "+ve(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=ve(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t))return this.each((function(e){D(this).removeClass(t.call(this,e,ye(this)))}));if(!arguments.length)return this.attr("class","");if((e=be(t)).length)for(;n=this[l++];)if(o=ye(n),i=1===n.nodeType&&" "+ve(o)+" "){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=ve(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(n){D(this).toggleClass(t.call(this,n,ye(this),e),e)})):this.each((function(){var e,o,r,s;if(i)for(o=0,r=D(this),s=be(t);e=s[o++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=ye(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ve(ye(n))+" ").indexOf(e)>-1)return!0;return!1}});var _e=/\r/g;D.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=v(t),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,D(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=D.map(o,(function(t){return null==t?"":t+""}))),(e=D.valHooks[this.type]||D.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))}))):o?(e=D.valHooks[o.type]||D.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(_e,""):null==n?"":n:void 0}}),D.extend({valHooks:{option:{get:function(t){var e=D.find.attr(t,"value");return null!=e?e:ve(D.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=D(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=D.makeArray(e),s=o.length;s--;)((i=o[s]).selected=D.inArray(D.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),D.each(["radio","checkbox"],(function(){D.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=D.inArray(D(t).val(),e)>-1}},m.checkOn||(D.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),m.focusin="onfocusin"in i;var we=/^(?:focusinfocus|focusoutblur)$/,Ee=function(t){t.stopPropagation()};D.extend(D.event,{trigger:function(t,e,n,o){var r,s,a,l,c,u,p,d,h=[n||b],g=f.call(t,"type")?t.type:t,m=f.call(t,"namespace")?t.namespace.split("."):[];if(s=d=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!we.test(g+D.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(t=t[D.expando]?t:new D.Event(g,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:D.makeArray(e,[t]),p=D.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(n,e))){if(!o&&!p.noBubble&&!y(n)){for(l=p.delegateType||g,we.test(l+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||i)}for(r=0;(s=h[r++])&&!t.isPropagationStopped();)d=s,t.type=r>1?l:p.bindType||g,(u=(J.get(s,"events")||Object.create(null))[t.type]&&J.get(s,"handle"))&&u.apply(s,e),(u=c&&s[c])&&u.apply&&Y(s)&&(t.result=u.apply(s,e),!1===t.result&&t.preventDefault());return t.type=g,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),e)||!Y(n)||c&&v(n[g])&&!y(n)&&((a=n[c])&&(n[c]=null),D.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,Ee),n[g](),t.isPropagationStopped()&&d.removeEventListener(g,Ee),D.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(t,e,n){var i=D.extend(new D.Event,n,{type:t,isSimulated:!0});D.event.trigger(i,null,e)}}),D.fn.extend({trigger:function(t,e){return this.each((function(){D.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return D.event.trigger(t,e,n,!0)}}),m.focusin||D.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){D.event.simulate(e,t.target,D.event.fix(t))};D.event.special[e]={setup:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,e);o||i.addEventListener(t,n,!0),J.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,e)-1;o?J.access(i,e,o):(i.removeEventListener(t,n,!0),J.remove(i,e))}}}));var xe=i.location,De={guid:Date.now()},Ce=/\?/;D.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||D.error("Invalid XML: "+(n?D.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Oe=/\[\]$/,Te=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function Ae(t,e,n,i){var o;if(Array.isArray(e))D.each(e,(function(e,o){n||Oe.test(t)?i(t,o):Ae(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)}));else if(n||"object"!==E(e))i(t,e);else for(o in e)Ae(t+"["+o+"]",e[o],n,i)}D.param=function(t,e){var n,i=[],o=function(t,e){var n=v(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!D.isPlainObject(t))D.each(t,(function(){o(this.name,this.value)}));else for(n in t)Ae(n,t[n],e,o);return i.join("&")},D.fn.extend({serialize:function(){return D.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=D.prop(this,"elements");return t?D.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!D(this).is(":disabled")&&Ne.test(this.nodeName)&&!Se.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var n=D(this).val();return null==n?null:Array.isArray(n)?D.map(n,(function(t){return{name:e.name,value:t.replace(Te,"\r\n")}})):{name:e.name,value:n.replace(Te,"\r\n")}})).get()}});var Re=/%20/g,ke=/#.*$/,Ie=/([?&])_=[^&]*/,je=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,Pe=/^\/\//,He={},qe={},Me="*/".concat("*"),Be=b.createElement("a");function Fe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(q)||[];if(v(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function We(t,e,n,i){var o={},r=t===qe;function s(a){var l;return o[a]=!0,D.each(t[a]||[],(function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)})),l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function Ge(t,e){var n,i,o=D.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&D.extend(!0,t,i),t}Be.href=xe.href,D.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":D.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,D.ajaxSettings),e):Ge(D.ajaxSettings,t)},ajaxPrefilter:Fe(He),ajaxTransport:Fe(qe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o,r,s,a,l,c,u,p,d,f=D.ajaxSetup({},e),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?D(h):D.event,m=D.Deferred(),v=D.Callbacks("once memory"),y=f.statusCode||{},_={},w={},E="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=je.exec(r);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==c&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)x.always(t[x.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||E;return n&&n.abort(e),C(0,e),this}};if(m.promise(x),f.url=((t||f.url||xe.href)+"").replace(Pe,xe.protocol+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(q)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Be.protocol+"//"+Be.host!=l.protocol+"//"+l.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=D.param(f.data,f.traditional)),We(He,f,e,x),c)return x;for(p in(u=D.event&&f.global)&&0==D.active++&&D.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Le.test(f.type),o=f.url.replace(ke,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Re,"+")):(d=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Ce.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Ie,"$1"),d=(Ce.test(o)?"&":"?")+"_="+De.guid+++d),f.url=o+d),f.ifModified&&(D.lastModified[o]&&x.setRequestHeader("If-Modified-Since",D.lastModified[o]),D.etag[o]&&x.setRequestHeader("If-None-Match",D.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||e.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Me+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,x,f)||c))return x.abort();if(E="abort",v.add(f.complete),x.done(f.success),x.fail(f.error),n=We(qe,f,e,x)){if(x.readyState=1,u&&g.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(a=i.setTimeout((function(){x.abort("timeout")}),f.timeout));try{c=!1,n.send(_,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,s,l){var p,d,b,_,w,E=e;c||(c=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",x.readyState=t>0?4:0,p=t>=200&&t<300||304===t,s&&(_=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,x,s)),!p&&D.inArray("script",f.dataTypes)>-1&&D.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),_=function(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(f,_,x,p),p?(f.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(D.lastModified[o]=w),(w=x.getResponseHeader("etag"))&&(D.etag[o]=w)),204===t||"HEAD"===f.type?E="nocontent":304===t?E="notmodified":(E=_.state,d=_.data,p=!(b=_.error))):(b=E,!t&&E||(E="error",t<0&&(t=0))),x.status=t,x.statusText=(e||E)+"",p?m.resolveWith(h,[d,E,x]):m.rejectWith(h,[x,E,b]),x.statusCode(y),y=void 0,u&&g.trigger(p?"ajaxSuccess":"ajaxError",[x,f,p?d:b]),v.fireWith(h,[x,E]),u&&(g.trigger("ajaxComplete",[x,f]),--D.active||D.event.trigger("ajaxStop")))}return x},getJSON:function(t,e,n){return D.get(t,e,n,"json")},getScript:function(t,e){return D.get(t,void 0,e,"script")}}),D.each(["get","post"],(function(t,e){D[e]=function(t,n,i,o){return v(n)&&(o=o||i,i=n,n=void 0),D.ajax(D.extend({url:t,type:e,dataType:o,data:n,success:i},D.isPlainObject(t)&&t))}})),D.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),D._evalUrl=function(t,e,n){return D.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){D.globalEval(t,e,n)}})},D.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=D(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){D(this).wrapInner(t.call(this,e))})):this.each((function(){var e=D(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){D(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){D(this).replaceWith(this.childNodes)})),this}}),D.expr.pseudos.hidden=function(t){return!D.expr.pseudos.visible(t)},D.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},D.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ue=D.ajaxSettings.xhr();m.cors=!!Ue&&"withCredentials"in Ue,m.ajax=Ue=!!Ue,D.ajaxTransport((function(t){var e,n;if(m.cors||Ue&&!t.crossDomain)return{send:function(o,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r($e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),D.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),D.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return D.globalEval(t),t}}}),D.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),D.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,o){e=D("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),b.head.appendChild(e[0])},abort:function(){n&&n()}}}));var ze,Ve=[],Ke=/(=)\?(?=&|$)|\?\?/;D.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||D.expando+"_"+De.guid++;return this[t]=!0,t}}),D.ajaxPrefilter("json jsonp",(function(t,e,n){var o,r,s,a=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ke,"$1"+o):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||D.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=i[o],i[o]=function(){s=arguments},n.always((function(){void 0===r?D(i).removeProp(o):i[o]=r,t[o]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(o)),s&&v(r)&&r(s[0]),s=r=void 0})),"script"})),m.createHTMLDocument=((ze=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ze.childNodes.length),D.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,e.head.appendChild(i)):e=b),r=!n&&[],(o=R.exec(t))?[e.createElement(o[1])]:(o=xt([t],e,r),r&&r.length&&D(r).remove(),D.merge([],o.childNodes)));var i,o,r},D.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=ve(t.slice(a)),t=t.slice(0,a)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&D.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done((function(t){r=arguments,s.html(i?D("<div>").append(D.parseHTML(t)).find(i):t)})).always(n&&function(t,e){s.each((function(){n.apply(this,r||[t.responseText,e,t])}))}),this},D.expr.pseudos.animated=function(t){return D.grep(D.timers,(function(e){return t===e.elem})).length},D.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c=D.css(t,"position"),u=D(t),p={};"static"===c&&(t.style.position="relative"),a=u.offset(),r=D.css(t,"top"),l=D.css(t,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),v(e)&&(e=e.call(t,n,D.extend({},a))),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+o),"using"in e?e.using.call(t,p):u.css(p)}},D.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){D.offset.setOffset(this,t,e)}));var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===D.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===D.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=D(t).offset()).top+=D.css(t,"borderTopWidth",!0),o.left+=D.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-D.css(i,"marginTop",!0),left:e.left-o.left-D.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===D.css(t,"position");)t=t.offsetParent;return t||st}))}}),D.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;D.fn[t]=function(i){return U(this,(function(t,i,o){var r;if(y(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o}),t,i,arguments.length)}})),D.each(["top","left"],(function(t,e){D.cssHooks[e]=Ut(m.pixelPosition,(function(t,n){if(n)return n=$t(t,e),Bt.test(n)?D(t).position()[e]+"px":n}))})),D.each({Height:"height",Width:"width"},(function(t,e){D.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){D.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return U(this,(function(e,n,o){var r;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===o?D.css(e,n,a):D.style(e,n,o,a)}),e,s?o:void 0,s)}}))})),D.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){D.fn[e]=function(t){return this.on(e,t)}})),D.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),D.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){D.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var Xe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;D.proxy=function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return i=a.call(arguments,2),o=function(){return t.apply(e||this,i.concat(a.call(arguments)))},o.guid=t.guid=t.guid||D.guid++,o},D.holdReady=function(t){t?D.readyWait++:D.ready(!0)},D.isArray=Array.isArray,D.parseJSON=JSON.parse,D.nodeName=A,D.isFunction=v,D.isWindow=y,D.camelCase=X,D.type=E,D.now=Date.now,D.isNumeric=function(t){var e=D.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},D.trim=function(t){return null==t?"":(t+"").replace(Xe,"")},void 0===(n=function(){return D}.apply(e,[]))||(t.exports=n);var Ye=i.jQuery,Qe=i.$;return D.noConflict=function(t){return i.$===D&&(i.$=Qe),t&&i.jQuery===D&&(i.jQuery=Ye),D},void 0===o&&(i.jQuery=i.$=D),D}))},661:()=>{String.prototype.toCamalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()})).replace(/\s+/g,"")},String.prototype.toPascalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t.toLowerCase()})).replace(/\s+/g,"")},String.prototype.toPascalCaseJson=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t})).replace(/\s+/g,"")},String.prototype.format||(String.prototype.format=function(){var t=arguments;return this.replace(/{(\d+)}/g,(function(e,n){return void 0!==t[n]?t[n]:e}))})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i),n.d(i,{BSDataTable:()=>Go,BSDataTableActions:()=>_o,BSDataTableBase:()=>Vi,BSDataTableBody:()=>Bo,BSDataTableButton:()=>So,BSDataTableCell:()=>io,BSDataTableCheckBox:()=>ao,BSDataTableColDefinition:()=>Xi,BSDataTableColSettings:()=>eo,BSDataTableDataSource:()=>Yi,BSDataTableHeader:()=>qo,BSDataTableHttpClient:()=>co,BSDataTableHttpClientOptions:()=>to,BSDataTableInfiniteScroll:()=>ho,BSDataTableInput:()=>ro,BSDataTableMarker:()=>yo,BSDataTableOptions:()=>Qi,BSDataTablePagination:()=>po,BSDataTablePaginationOptions:()=>Zi,BSDataTablePagingMetaData:()=>Ji,BSDataTableRow:()=>jo,BSDataTableRowCollection:()=>Po,BSDataTableSelect:()=>Oo,BSDataTableSelectListItem:()=>Ki,BSDataTableSelectOption:()=>Do,BSDataTableSelector:()=>Ao,BSDataTableSelectorWindow:()=>ko,BSDataTableSelectorWindowCollection:()=>mo,BSDataTableTextInput:()=>Eo,BSDataTableTextInputExt:()=>Uo,CookieHelper:()=>Fi,SessionStorageService:()=>Ui,appActions:()=>Wi,appDataEvents:()=>Gi,bsDataTableDiscoveryService:()=>zi,dataEventsService:()=>$i});var t={};n.r(t),n.d(t,{afterMain:()=>E,afterRead:()=>b,afterWrite:()=>C,applyStyles:()=>k,arrow:()=>Y,auto:()=>a,basePlacements:()=>l,beforeMain:()=>_,beforeRead:()=>v,beforeWrite:()=>x,bottom:()=>o,clippingParents:()=>p,computeStyles:()=>tt,createPopper:()=>Nt,createPopperBase:()=>St,createPopperLite:()=>At,detectOverflow:()=>gt,end:()=>u,eventListeners:()=>nt,flip:()=>mt,hide:()=>bt,left:()=>s,main:()=>w,modifierPhases:()=>O,offset:()=>_t,placements:()=>m,popper:()=>f,popperGenerator:()=>Tt,popperOffsets:()=>wt,preventOverflow:()=>Et,read:()=>y,reference:()=>h,right:()=>r,start:()=>c,top:()=>e,variationPlacements:()=>g,viewport:()=>d,write:()=>D});var e="top",o="bottom",r="right",s="left",a="auto",l=[e,o,r,s],c="start",u="end",p="clippingParents",d="viewport",f="popper",h="reference",g=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+u])}),[]),m=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+u])}),[]),v="beforeRead",y="read",b="afterRead",_="beforeMain",w="main",E="afterMain",x="beforeWrite",D="write",C="afterWrite",O=[v,y,b,_,w,E,x,D,C];function T(t){return t?(t.nodeName||"").toLowerCase():null}function S(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function N(t){return t instanceof S(t).Element||t instanceof Element}function A(t){return t instanceof S(t).HTMLElement||t instanceof HTMLElement}function R(t){return"undefined"!=typeof ShadowRoot&&(t instanceof S(t).ShadowRoot||t instanceof ShadowRoot)}const k={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},o=e.elements[t];A(o)&&T(o)&&(Object.assign(o.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],o=e.attributes[t]||{},r=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});A(i)&&T(i)&&(Object.assign(i.style,r),Object.keys(o).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function I(t){return t.split("-")[0]}var j=Math.max,L=Math.min,P=Math.round;function H(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,o=1;if(A(t)&&e){var r=t.offsetHeight,s=t.offsetWidth;s>0&&(i=P(n.width)/s||1),r>0&&(o=P(n.height)/r||1)}return{width:n.width/i,height:n.height/o,top:n.top/o,right:n.right/i,bottom:n.bottom/o,left:n.left/i,x:n.left/i,y:n.top/o}}function q(t){var e=H(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function M(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&R(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function B(t){return S(t).getComputedStyle(t)}function F(t){return["table","td","th"].indexOf(T(t))>=0}function W(t){return((N(t)?t.ownerDocument:t.document)||window.document).documentElement}function G(t){return"html"===T(t)?t:t.assignedSlot||t.parentNode||(R(t)?t.host:null)||W(t)}function $(t){return A(t)&&"fixed"!==B(t).position?t.offsetParent:null}function U(t){for(var e=S(t),n=$(t);n&&F(n)&&"static"===B(n).position;)n=$(n);return n&&("html"===T(n)||"body"===T(n)&&"static"===B(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&A(t)&&"fixed"===B(t).position)return null;for(var n=G(t);A(n)&&["html","body"].indexOf(T(n))<0;){var i=B(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function z(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function V(t,e,n){return j(t,L(e,n))}function K(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function X(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const Y={name:"arrow",enabled:!0,phase:"main",fn:function(t){var n,i=t.state,a=t.name,c=t.options,u=i.elements.arrow,p=i.modifiersData.popperOffsets,d=I(i.placement),f=z(d),h=[s,r].indexOf(d)>=0?"height":"width";if(u&&p){var g=function(t,e){return K("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:X(t,l))}(c.padding,i),m=q(u),v="y"===f?e:s,y="y"===f?o:r,b=i.rects.reference[h]+i.rects.reference[f]-p[f]-i.rects.popper[h],_=p[f]-i.rects.reference[f],w=U(u),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,x=b/2-_/2,D=g[v],C=E-m[h]-g[y],O=E/2-m[h]/2+x,T=V(D,O,C),S=f;i.modifiersData[a]=((n={})[S]=T,n.centerOffset=T-O,n)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&M(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Q(t){return t.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(t){var n,i=t.popper,a=t.popperRect,l=t.placement,c=t.variation,p=t.offsets,d=t.position,f=t.gpuAcceleration,h=t.adaptive,g=t.roundOffsets,m=t.isFixed,v=p.x,y=void 0===v?0:v,b=p.y,_=void 0===b?0:b,w="function"==typeof g?g({x:y,y:_}):{x:y,y:_};y=w.x,_=w.y;var E=p.hasOwnProperty("x"),x=p.hasOwnProperty("y"),D=s,C=e,O=window;if(h){var T=U(i),N="clientHeight",A="clientWidth";T===S(i)&&"static"!==B(T=W(i)).position&&"absolute"===d&&(N="scrollHeight",A="scrollWidth"),T=T,(l===e||(l===s||l===r)&&c===u)&&(C=o,_-=(m&&O.visualViewport?O.visualViewport.height:T[N])-a.height,_*=f?1:-1),l!==s&&(l!==e&&l!==o||c!==u)||(D=r,y-=(m&&O.visualViewport?O.visualViewport.width:T[A])-a.width,y*=f?1:-1)}var R,k=Object.assign({position:d},h&&J),I=!0===g?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:P(e*i)/i||0,y:P(n*i)/i||0}}({x:y,y:_}):{x:y,y:_};return y=I.x,_=I.y,f?Object.assign({},k,((R={})[C]=x?"0":"",R[D]=E?"0":"",R.transform=(O.devicePixelRatio||1)<=1?"translate("+y+"px, "+_+"px)":"translate3d("+y+"px, "+_+"px, 0)",R)):Object.assign({},k,((n={})[C]=x?_+"px":"",n[D]=E?y+"px":"",n.transform="",n))}const tt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,s=void 0===r||r,a=n.roundOffsets,l=void 0===a||a,c={placement:I(e.placement),variation:Q(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Z(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Z(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var et={passive:!0};const nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,o=i.scroll,r=void 0===o||o,s=i.resize,a=void 0===s||s,l=S(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&c.forEach((function(t){t.addEventListener("scroll",n.update,et)})),a&&l.addEventListener("resize",n.update,et),function(){r&&c.forEach((function(t){t.removeEventListener("scroll",n.update,et)})),a&&l.removeEventListener("resize",n.update,et)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var rt={start:"end",end:"start"};function st(t){return t.replace(/start|end/g,(function(t){return rt[t]}))}function at(t){var e=S(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function lt(t){return H(W(t)).left+at(t).scrollLeft}function ct(t){var e=B(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}function ut(t){return["html","body","#document"].indexOf(T(t))>=0?t.ownerDocument.body:A(t)&&ct(t)?t:ut(G(t))}function pt(t,e){var n;void 0===e&&(e=[]);var i=ut(t),o=i===(null==(n=t.ownerDocument)?void 0:n.body),r=S(i),s=o?[r].concat(r.visualViewport||[],ct(i)?i:[]):i,a=e.concat(s);return o?a:a.concat(pt(G(s)))}function dt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ft(t,e){return e===d?dt(function(t){var e=S(t),n=W(t),i=e.visualViewport,o=n.clientWidth,r=n.clientHeight,s=0,a=0;return i&&(o=i.width,r=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=i.offsetLeft,a=i.offsetTop)),{width:o,height:r,x:s+lt(t),y:a}}(t)):N(e)?function(t){var e=H(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):dt(function(t){var e,n=W(t),i=at(t),o=null==(e=t.ownerDocument)?void 0:e.body,r=j(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=j(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-i.scrollLeft+lt(t),l=-i.scrollTop;return"rtl"===B(o||n).direction&&(a+=j(n.clientWidth,o?o.clientWidth:0)-r),{width:r,height:s,x:a,y:l}}(W(t)))}function ht(t){var n,i=t.reference,a=t.element,l=t.placement,p=l?I(l):null,d=l?Q(l):null,f=i.x+i.width/2-a.width/2,h=i.y+i.height/2-a.height/2;switch(p){case e:n={x:f,y:i.y-a.height};break;case o:n={x:f,y:i.y+i.height};break;case r:n={x:i.x+i.width,y:h};break;case s:n={x:i.x-a.width,y:h};break;default:n={x:i.x,y:i.y}}var g=p?z(p):null;if(null!=g){var m="y"===g?"height":"width";switch(d){case c:n[g]=n[g]-(i[m]/2-a[m]/2);break;case u:n[g]=n[g]+(i[m]/2-a[m]/2)}}return n}function gt(t,n){void 0===n&&(n={});var i=n,s=i.placement,a=void 0===s?t.placement:s,c=i.boundary,u=void 0===c?p:c,g=i.rootBoundary,m=void 0===g?d:g,v=i.elementContext,y=void 0===v?f:v,b=i.altBoundary,_=void 0!==b&&b,w=i.padding,E=void 0===w?0:w,x=K("number"!=typeof E?E:X(E,l)),D=y===f?h:f,C=t.rects.popper,O=t.elements[_?D:y],S=function(t,e,n){var i="clippingParents"===e?function(t){var e=pt(G(t)),n=["absolute","fixed"].indexOf(B(t).position)>=0&&A(t)?U(t):t;return N(n)?e.filter((function(t){return N(t)&&M(t,n)&&"body"!==T(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),r=o[0],s=o.reduce((function(e,n){var i=ft(t,n);return e.top=j(i.top,e.top),e.right=L(i.right,e.right),e.bottom=L(i.bottom,e.bottom),e.left=j(i.left,e.left),e}),ft(t,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(N(O)?O:O.contextElement||W(t.elements.popper),u,m),R=H(t.elements.reference),k=ht({reference:R,element:C,strategy:"absolute",placement:a}),I=dt(Object.assign({},C,k)),P=y===f?I:R,q={top:S.top-P.top+x.top,bottom:P.bottom-S.bottom+x.bottom,left:S.left-P.left+x.left,right:P.right-S.right+x.right},F=t.modifiersData.offset;if(y===f&&F){var $=F[a];Object.keys(q).forEach((function(t){var n=[r,o].indexOf(t)>=0?1:-1,i=[e,o].indexOf(t)>=0?"y":"x";q[t]+=$[i]*n}))}return q}const mt={name:"flip",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,u=t.name;if(!n.modifiersData[u]._skip){for(var p=i.mainAxis,d=void 0===p||p,f=i.altAxis,h=void 0===f||f,v=i.fallbackPlacements,y=i.padding,b=i.boundary,_=i.rootBoundary,w=i.altBoundary,E=i.flipVariations,x=void 0===E||E,D=i.allowedAutoPlacements,C=n.options.placement,O=I(C),T=v||(O!==C&&x?function(t){if(I(t)===a)return[];var e=ot(t);return[st(t),e,st(e)]}(C):[ot(C)]),S=[C].concat(T).reduce((function(t,e){return t.concat(I(e)===a?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,o=n.boundary,r=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?m:c,p=Q(i),d=p?a?g:g.filter((function(t){return Q(t)===p})):l,f=d.filter((function(t){return u.indexOf(t)>=0}));0===f.length&&(f=d);var h=f.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:o,rootBoundary:r,padding:s})[I(n)],e}),{});return Object.keys(h).sort((function(t,e){return h[t]-h[e]}))}(n,{placement:e,boundary:b,rootBoundary:_,padding:y,flipVariations:x,allowedAutoPlacements:D}):e)}),[]),N=n.rects.reference,A=n.rects.popper,R=new Map,k=!0,j=S[0],L=0;L<S.length;L++){var P=S[L],H=I(P),q=Q(P)===c,M=[e,o].indexOf(H)>=0,B=M?"width":"height",F=gt(n,{placement:P,boundary:b,rootBoundary:_,altBoundary:w,padding:y}),W=M?q?r:s:q?o:e;N[B]>A[B]&&(W=ot(W));var G=ot(W),$=[];if(d&&$.push(F[H]<=0),h&&$.push(F[W]<=0,F[G]<=0),$.every((function(t){return t}))){j=P,k=!1;break}R.set(P,$)}if(k)for(var U=function(t){var e=S.find((function(e){var n=R.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return j=e,"break"},z=x?3:1;z>0&&"break"!==U(z);z--);n.placement!==j&&(n.modifiersData[u]._skip=!0,n.placement=j,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function vt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function yt(t){return[e,r,o,s].some((function(e){return t[e]>=0}))}const bt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,o=e.rects.popper,r=e.modifiersData.preventOverflow,s=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),l=vt(s,i),c=vt(a,o,r),u=yt(l),p=yt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:p},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":p})}},_t={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var n=t.state,i=t.options,o=t.name,a=i.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(t,i){return t[i]=function(t,n,i){var o=I(t),a=[s,e].indexOf(o)>=0?-1:1,l="function"==typeof i?i(Object.assign({},n,{placement:t})):i,c=l[0],u=l[1];return c=c||0,u=(u||0)*a,[s,r].indexOf(o)>=0?{x:u,y:c}:{x:c,y:u}}(i,n.rects,l),t}),{}),u=c[n.placement],p=u.x,d=u.y;null!=n.modifiersData.popperOffsets&&(n.modifiersData.popperOffsets.x+=p,n.modifiersData.popperOffsets.y+=d),n.modifiersData[o]=c}},wt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=ht({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Et={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,a=t.name,l=i.mainAxis,u=void 0===l||l,p=i.altAxis,d=void 0!==p&&p,f=i.boundary,h=i.rootBoundary,g=i.altBoundary,m=i.padding,v=i.tether,y=void 0===v||v,b=i.tetherOffset,_=void 0===b?0:b,w=gt(n,{boundary:f,rootBoundary:h,padding:m,altBoundary:g}),E=I(n.placement),x=Q(n.placement),D=!x,C=z(E),O="x"===C?"y":"x",T=n.modifiersData.popperOffsets,S=n.rects.reference,N=n.rects.popper,A="function"==typeof _?_(Object.assign({},n.rects,{placement:n.placement})):_,R="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),k=n.modifiersData.offset?n.modifiersData.offset[n.placement]:null,P={x:0,y:0};if(T){if(u){var H,M="y"===C?e:s,B="y"===C?o:r,F="y"===C?"height":"width",W=T[C],G=W+w[M],$=W-w[B],K=y?-N[F]/2:0,X=x===c?S[F]:N[F],Y=x===c?-N[F]:-S[F],J=n.elements.arrow,Z=y&&J?q(J):{width:0,height:0},tt=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[M],nt=tt[B],it=V(0,S[F],Z[F]),ot=D?S[F]/2-K-it-et-R.mainAxis:X-it-et-R.mainAxis,rt=D?-S[F]/2+K+it+nt+R.mainAxis:Y+it+nt+R.mainAxis,st=n.elements.arrow&&U(n.elements.arrow),at=st?"y"===C?st.clientTop||0:st.clientLeft||0:0,lt=null!=(H=null==k?void 0:k[C])?H:0,ct=W+rt-lt,ut=V(y?L(G,W+ot-lt-at):G,W,y?j($,ct):$);T[C]=ut,P[C]=ut-W}if(d){var pt,dt="x"===C?e:s,ft="x"===C?o:r,ht=T[O],mt="y"===O?"height":"width",vt=ht+w[dt],yt=ht-w[ft],bt=-1!==[e,s].indexOf(E),_t=null!=(pt=null==k?void 0:k[O])?pt:0,wt=bt?vt:ht-S[mt]-N[mt]-_t+R.altAxis,Et=bt?ht+S[mt]+N[mt]-_t-R.altAxis:yt,xt=y&&bt?function(t,e,n){var i=V(t,e,n);return i>n?n:i}(wt,ht,Et):V(y?wt:vt,ht,y?Et:yt);T[O]=xt,P[O]=xt-ht}n.modifiersData[a]=P}},requiresIfExists:["offset"]};function xt(t,e,n){void 0===n&&(n=!1);var i,o,r=A(e),s=A(e)&&function(t){var e=t.getBoundingClientRect(),n=P(e.width)/t.offsetWidth||1,i=P(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),a=W(e),l=H(t,s),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(r||!r&&!n)&&(("body"!==T(e)||ct(a))&&(c=(i=e)!==S(i)&&A(i)?{scrollLeft:(o=i).scrollLeft,scrollTop:o.scrollTop}:at(i)),A(e)?((u=H(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):a&&(u.x=lt(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function Dt(t){var e=new Map,n=new Set,i=[];function o(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&o(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||o(t)})),i}var Ct={placement:"bottom",modifiers:[],strategy:"absolute"};function Ot(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Tt(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,o=e.defaultOptions,r=void 0===o?Ct:o;return function(t,e,n){void 0===n&&(n=r);var o,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ct,r),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var o="function"==typeof n?n(a.options):n;p(),a.options=Object.assign({},r,a.options,o),a.scrollParents={reference:N(t)?pt(t):t.contextElement?pt(t.contextElement):[],popper:pt(e)};var s,c,d=function(t){var e=Dt(t);return O.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),c=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=d.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var r=o({state:a,name:e,instance:u,options:i});l.push(r||function(){})}})),u.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Ot(e,n)){a.rects={reference:xt(e,U(n),"fixed"===a.options.strategy),popper:q(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var o=a.orderedModifiers[i],r=o.fn,s=o.options,l=void 0===s?{}:s,p=o.name;"function"==typeof r&&(a=r({state:a,options:l,name:p,instance:u})||a)}else a.reset=!1,i=-1}}},update:(o=function(){return new Promise((function(t){u.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){p(),c=!0}};if(!Ot(t,e))return u;function p(){l.forEach((function(t){return t()})),l=[]}return u.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var St=Tt(),Nt=Tt({defaultModifiers:[nt,wt,tt,k,_t,mt,Et,Y,bt]}),At=Tt({defaultModifiers:[nt,wt,tt,k]});const Rt="transitionend",kt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},It=t=>{const e=kt(t);return e&&document.querySelector(e)?e:null},jt=t=>{const e=kt(t);return e?document.querySelector(e):null},Lt=t=>{t.dispatchEvent(new Event(Rt))},Pt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ht=t=>Pt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,qt=(t,e,n)=>{Object.keys(n).forEach((i=>{const o=n[i],r=e[i],s=r&&Pt(r)?"element":null==(a=r)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(o).test(s))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${o}".`)}))},Mt=t=>!(!Pt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),Bt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Ft=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Ft(t.parentNode):null},Wt=()=>{},Gt=t=>{t.offsetHeight},$t=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Ut=[],zt=()=>"rtl"===document.documentElement.dir,Vt=t=>{var e;e=()=>{const e=$t();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Ut.length||document.addEventListener("DOMContentLoaded",(()=>{Ut.forEach((t=>t()))})),Ut.push(e)):e()},Kt=t=>{"function"==typeof t&&t()},Xt=(t,e,n=!0)=>{if(!n)return void Kt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),o=Number.parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let o=!1;const r=({target:n})=>{n===e&&(o=!0,e.removeEventListener(Rt,r),Kt(t))};e.addEventListener(Rt,r),setTimeout((()=>{o||Lt(e)}),i)},Yt=(t,e,n,i)=>{let o=t.indexOf(e);if(-1===o)return t[!n&&i?t.length-1:0];const r=t.length;return o+=n?1:-1,i&&(o=(o+r)%r),t[Math.max(0,Math.min(o,r-1))]},Qt=/[^.]*(?=\..*)\.|.*/,Jt=/\..*/,Zt=/::\d+$/,te={};let ee=1;const ne={mouseenter:"mouseover",mouseleave:"mouseout"},ie=/^(mouseenter|mouseleave)/i,oe=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function re(t,e){return e&&`${e}::${ee++}`||t.uidEvent||ee++}function se(t){const e=re(t);return t.uidEvent=e,te[e]=te[e]||{},te[e]}function ae(t,e,n=null){const i=Object.keys(t);for(let o=0,r=i.length;o<r;o++){const r=t[i[o]];if(r.originalHandler===e&&r.delegationSelector===n)return r}return null}function le(t,e,n){const i="string"==typeof e,o=i?n:e;let r=pe(t);return oe.has(r)||(r=t),[i,o,r]}function ce(t,e,n,i,o){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),ie.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[r,s,a]=le(e,n,i),l=se(t),c=l[a]||(l[a]={}),u=ae(c,s,r?n:null);if(u)return void(u.oneOff=u.oneOff&&o);const p=re(s,e.replace(Qt,"")),d=r?function(t,e,n){return function i(o){const r=t.querySelectorAll(e);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(let a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&de.off(t,o.type,e,n),n.apply(s,[o]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&de.off(t,i.type,e),e.apply(t,[i])}}(t,n);d.delegationSelector=r?n:null,d.originalHandler=s,d.oneOff=o,d.uidEvent=p,c[p]=d,t.addEventListener(a,d,r)}function ue(t,e,n,i,o){const r=ae(e[n],i,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent])}function pe(t){return t=t.replace(Jt,""),ne[t]||t}const de={on(t,e,n,i){ce(t,e,n,i,!1)},one(t,e,n,i){ce(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[o,r,s]=le(e,n,i),a=s!==e,l=se(t),c=e.startsWith(".");if(void 0!==r){if(!l||!l[s])return;return void ue(t,l,s,r,o?n:null)}c&&Object.keys(l).forEach((n=>{!function(t,e,n,i){const o=e[n]||{};Object.keys(o).forEach((r=>{if(r.includes(i)){const i=o[r];ue(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,l,n,e.slice(1))}));const u=l[s]||{};Object.keys(u).forEach((n=>{const i=n.replace(Zt,"");if(!a||e.includes(i)){const e=u[n];ue(t,l,s,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=$t(),o=pe(e),r=e!==o,s=oe.has(o);let a,l=!0,c=!0,u=!1,p=null;return r&&i&&(a=i.Event(e,n),i(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(p=document.createEvent("HTMLEvents"),p.initEvent(o,l,!0)):p=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(p,t,{get:()=>n[t]})})),u&&p.preventDefault(),c&&t.dispatchEvent(p),p.defaultPrevented&&void 0!==a&&a.preventDefault(),p}},fe=new Map,he={set(t,e,n){fe.has(t)||fe.set(t,new Map);const i=fe.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>fe.has(t)&&fe.get(t).get(e)||null,remove(t,e){if(!fe.has(t))return;const n=fe.get(t);n.delete(e),0===n.size&&fe.delete(t)}};class ge{constructor(t){(t=Ht(t))&&(this._element=t,he.set(this._element,this.constructor.DATA_KEY,this))}dispose(){he.remove(this._element,this.constructor.DATA_KEY),de.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Xt(t,e,n)}static getInstance(t){return he.get(Ht(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const me=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;de.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Bt(this))return;const o=jt(this)||this.closest(`.${i}`);t.getOrCreateInstance(o)[e]()}))};class ve extends ge{static get NAME(){return"alert"}close(){if(de.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),de.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=ve.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(ve,"close"),Vt(ve);const ye='[data-bs-toggle="button"]';class be extends ge{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function _e(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function we(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}de.on(document,"click.bs.button.data-api",ye,(t=>{t.preventDefault();const e=t.target.closest(ye);be.getOrCreateInstance(e).toggle()})),Vt(be);const Ee={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${we(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${we(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=_e(t.dataset[n])})),e},getDataAttribute:(t,e)=>_e(t.getAttribute(`data-bs-${we(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},xe={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!Bt(t)&&Mt(t)))}},De="carousel",Ce={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Oe={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Te="next",Se="prev",Ne="left",Ae="right",Re={ArrowLeft:Ae,ArrowRight:Ne},ke="slid.bs.carousel",Ie="active",je=".active.carousel-item";class Le extends ge{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=xe.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Ce}static get NAME(){return De}next(){this._slide(Te)}nextWhenVisible(){!document.hidden&&Mt(this._element)&&this.next()}prev(){this._slide(Se)}pause(t){t||(this._isPaused=!0),xe.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Lt(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=xe.findOne(je,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void de.one(this._element,ke,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Te:Se;this._slide(n,this._items[t])}_getConfig(t){return t={...Ce,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(De,t,Oe),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?Ae:Ne)}_addEventListeners(){this._config.keyboard&&de.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(de.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),de.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},n=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},i=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};xe.find(".carousel-item img",this._element).forEach((t=>{de.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(de.on(this._element,"pointerdown.bs.carousel",(t=>e(t))),de.on(this._element,"pointerup.bs.carousel",(t=>i(t))),this._element.classList.add("pointer-event")):(de.on(this._element,"touchstart.bs.carousel",(t=>e(t))),de.on(this._element,"touchmove.bs.carousel",(t=>n(t))),de.on(this._element,"touchend.bs.carousel",(t=>i(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Re[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?xe.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Te;return Yt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(xe.findOne(je,this._element));return de.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=xe.findOne(".active",this._indicatorsElement);e.classList.remove(Ie),e.removeAttribute("aria-current");const n=xe.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Ie),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||xe.findOne(je,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=xe.findOne(je,this._element),o=this._getItemIndex(i),r=e||this._getItemByOrder(n,i),s=this._getItemIndex(r),a=Boolean(this._interval),l=n===Te,c=l?"carousel-item-start":"carousel-item-end",u=l?"carousel-item-next":"carousel-item-prev",p=this._orderToDirection(n);if(r&&r.classList.contains(Ie))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(r,p).defaultPrevented)return;if(!i||!r)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const d=()=>{de.trigger(this._element,ke,{relatedTarget:r,direction:p,from:o,to:s})};if(this._element.classList.contains("slide")){r.classList.add(u),Gt(r),i.classList.add(c),r.classList.add(c);const t=()=>{r.classList.remove(c,u),r.classList.add(Ie),i.classList.remove(Ie,u,c),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Ie),r.classList.add(Ie),this._isSliding=!1,d();a&&this.cycle()}_directionToOrder(t){return[Ae,Ne].includes(t)?zt()?t===Ne?Se:Te:t===Ne?Te:Se:t}_orderToDirection(t){return[Te,Se].includes(t)?zt()?t===Se?Ne:Ae:t===Se?Ae:Ne:t}static carouselInterface(t,e){const n=Le.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const o="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){Le.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=jt(this);if(!e||!e.classList.contains("carousel"))return;const n={...Ee.getDataAttributes(e),...Ee.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Le.carouselInterface(e,n),i&&Le.getInstance(e).to(i),t.preventDefault()}}de.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Le.dataApiClickHandler),de.on(window,"load.bs.carousel.data-api",(()=>{const t=xe.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Le.carouselInterface(t[e],Le.getInstance(t[e]))})),Vt(Le);const Pe="collapse",He={toggle:!0,parent:null},qe={toggle:"boolean",parent:"(null|element)"},Me="show",Be="collapse",Fe="collapsing",We="collapsed",Ge=":scope .collapse .collapse",$e='[data-bs-toggle="collapse"]';class Ue extends ge{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=xe.find($e);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=It(e),o=xe.find(i).filter((t=>t===this._element));null!==i&&o.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return He}static get NAME(){return Pe}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=xe.find(Ge,this._config.parent);e=xe.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((e=>!t.includes(e)))}const n=xe.findOne(this._selector);if(e.length){const i=e.find((t=>n!==t));if(t=i?Ue.getInstance(i):null,t&&t._isTransitioning)return}if(de.trigger(this._element,"show.bs.collapse").defaultPrevented)return;e.forEach((e=>{n!==e&&Ue.getOrCreateInstance(e,{toggle:!1}).hide(),t||he.set(e,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Be),this._element.classList.add(Fe),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Be,Me),this._element.style[i]="",de.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(de.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Gt(this._element),this._element.classList.add(Fe),this._element.classList.remove(Be,Me);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=jt(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Be),de.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Me)}_getConfig(t){return(t={...He,...Ee.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=Ht(t.parent),qt(Pe,t,qe),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=xe.find(Ge,this._config.parent);xe.find($e,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=jt(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(We):t.classList.add(We),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=Ue.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}de.on(document,"click.bs.collapse.data-api",$e,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=It(this);xe.find(e).forEach((t=>{Ue.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),Vt(Ue);const ze="dropdown",Ve="Escape",Ke="Space",Xe="ArrowUp",Ye="ArrowDown",Qe=new RegExp("ArrowUp|ArrowDown|Escape"),Je="click.bs.dropdown.data-api",Ze="keydown.bs.dropdown.data-api",tn="show",en='[data-bs-toggle="dropdown"]',nn=".dropdown-menu",on=zt()?"top-end":"top-start",rn=zt()?"top-start":"top-end",sn=zt()?"bottom-end":"bottom-start",an=zt()?"bottom-start":"bottom-end",ln=zt()?"left-start":"right-start",cn=zt()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},pn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class dn extends ge{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return un}static get DefaultType(){return pn}static get NAME(){return ze}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Bt(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(de.trigger(this._element,"show.bs.dropdown",t).defaultPrevented)return;const e=dn.getParentFromElement(this._element);this._inNavbar?Ee.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>de.on(t,"mouseover",Wt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(tn),this._element.classList.add(tn),de.trigger(this._element,"shown.bs.dropdown",t)}hide(){if(Bt(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){de.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Wt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(tn),this._element.classList.remove(tn),this._element.setAttribute("aria-expanded","false"),Ee.removeDataAttribute(this._menu,"popper"),de.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...Ee.getDataAttributes(this._element),...t},qt(ze,t,this.constructor.DefaultType),"object"==typeof t.reference&&!Pt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${ze.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(e){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let n=this._element;"parent"===this._config.reference?n=e:Pt(this._config.reference)?n=Ht(this._config.reference):"object"==typeof this._config.reference&&(n=this._config.reference);const i=this._getPopperConfig(),o=i.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=Nt(n,this._menu,i),o&&Ee.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(tn)}_getMenuElement(){return xe.next(this._element,nn)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return ln;if(t.classList.contains("dropstart"))return cn;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?rn:on:e?an:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=xe.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Mt);n.length&&Yt(n,e,t===Ye,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=dn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=xe.find(en);for(let n=0,i=e.length;n<i;n++){const i=dn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const o={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(o.clickEvent=t)}i._completeHide(o)}}static getParentFromElement(t){return jt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Ke||t.key!==Ve&&(t.key!==Ye&&t.key!==Xe||t.target.closest(nn)):!Qe.test(t.key))return;const e=this.classList.contains(tn);if(!e&&t.key===Ve)return;if(t.preventDefault(),t.stopPropagation(),Bt(this))return;const n=this.matches(en)?this:xe.prev(this,en)[0],i=dn.getOrCreateInstance(n);if(t.key!==Ve)return t.key===Xe||t.key===Ye?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==Ke||dn.clearMenus());i.hide()}}de.on(document,Ze,en,dn.dataApiKeydownHandler),de.on(document,Ze,nn,dn.dataApiKeydownHandler),de.on(document,Je,dn.clearMenus),de.on(document,"keyup.bs.dropdown.data-api",dn.clearMenus),de.on(document,Je,en,(function(t){t.preventDefault(),dn.getOrCreateInstance(this).toggle()})),Vt(dn);const fn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",hn=".sticky-top";class gn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(fn,"paddingRight",(e=>e+t)),this._setElementAttributes(hn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const o=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(o))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(fn,"paddingRight"),this._resetElementAttributes(hn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&Ee.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=Ee.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(Ee.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){Pt(t)?e(t):xe.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const mn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},vn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",bn="mousedown.bs.backdrop";class _n{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Gt(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Kt(t)}))):Kt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Kt(t)}))):Kt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...mn,..."object"==typeof t?t:{}}).rootElement=Ht(t.rootElement),qt("backdrop",t,vn),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),de.on(this._getElement(),bn,(()=>{Kt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(de.off(this._element,bn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Xt(t,this._getElement(),this._config.isAnimated)}}const wn={trapElement:null,autofocus:!0},En={trapElement:"element",autofocus:"boolean"},xn=".bs.focustrap",Dn="backward";class Cn{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),de.off(document,xn),de.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),de.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,de.off(document,xn))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=xe.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===Dn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Dn:"forward")}_getConfig(t){return t={...wn,..."object"==typeof t?t:{}},qt("focustrap",t,En),t}}const On="modal",Tn="Escape",Sn={backdrop:!0,keyboard:!0,focus:!0},Nn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},An="hidden.bs.modal",Rn="show.bs.modal",kn="resize.bs.modal",In="click.dismiss.bs.modal",jn="keydown.dismiss.bs.modal",Ln="mousedown.dismiss.bs.modal",Pn="modal-open",Hn="show",qn="modal-static";class Mn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=xe.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new gn}static get Default(){return Sn}static get NAME(){return On}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||de.trigger(this._element,Rn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Pn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),de.on(this._dialog,Ln,(()=>{de.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(de.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Hn),de.off(this._element,In),de.off(this._dialog,Ln),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>de.off(t,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new _n({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_getConfig(t){return t={...Sn,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(On,t,Nn),t}_showElement(t){const e=this._isAnimated(),n=xe.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Gt(this._element),this._element.classList.add(Hn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,de.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_setEscapeEvent(){this._isShown?de.on(this._element,jn,(t=>{this._config.keyboard&&t.key===Tn?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Tn||this._triggerBackdropTransition()})):de.off(this._element,jn)}_setResizeEvent(){this._isShown?de.on(window,kn,(()=>this._adjustDialog())):de.off(window,kn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Pn),this._resetAdjustments(),this._scrollBar.reset(),de.trigger(this._element,An)}))}_showBackdrop(t){de.on(this._element,In,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(de.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(qn)||(i||(n.overflowY="hidden"),t.add(qn),this._queueCallback((()=>{t.remove(qn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!zt()||n&&!t&&zt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!zt()||!n&&t&&zt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Mn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}de.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=jt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),de.one(e,Rn,(t=>{t.defaultPrevented||de.one(e,An,(()=>{Mt(this)&&this.focus()}))}));const n=xe.findOne(".modal.show");n&&Mn.getInstance(n).hide(),Mn.getOrCreateInstance(e).toggle(this)})),me(Mn),Vt(Mn);const Bn="offcanvas",Fn={backdrop:!0,keyboard:!0,scroll:!1},Wn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Gn="show",$n=".offcanvas.show",Un="hidden.bs.offcanvas";class zn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bn}static get Default(){return Fn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||de.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new gn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Gn),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),de.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(de.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Gn),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new gn).reset(),de.trigger(this._element,Un)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...Fn,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Bn,t,Wn),t}_initializeBackDrop(){return new _n({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_addEventListeners(){de.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=zn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}de.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=jt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this))return;de.one(e,Un,(()=>{Mt(this)&&this.focus()}));const n=xe.findOne($n);n&&n!==e&&zn.getInstance(n).hide(),zn.getOrCreateInstance(e).toggle(this)})),de.on(window,"load.bs.offcanvas.data-api",(()=>xe.find($n).forEach((t=>zn.getOrCreateInstance(t).show())))),me(zn),Vt(zn);const Vn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Vn.has(n)||Boolean(Kn.test(t.nodeValue)||Xn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Qn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){n.remove();continue}const r=[].concat(...n.attributes),s=[].concat(e["*"]||[],e[i]||[]);r.forEach((t=>{Yn(t,s)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Jn="tooltip",Zn=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ei={AUTO:"auto",TOP:"top",RIGHT:zt()?"left":"right",BOTTOM:"bottom",LEFT:zt()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ri="show",si="show",ai="out",li=".tooltip-inner",ci=".modal",ui="hide.bs.modal",pi="hover",di="focus";class fi extends ge{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(n),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Jn}static get Event(){return ii}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(ri))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),de.off(this._element.closest(ci),ui,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=de.trigger(this._element,this.constructor.Event.SHOW),e=Ft(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(li).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),o=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME);i.setAttribute("id",o),this._element.setAttribute("aria-describedby",o),this._config.animation&&i.classList.add(oi);const r="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,s=this._getAttachment(r);this._addAttachmentClass(s);const{container:a}=this._config;he.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(i),de.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Nt(this._element,i,this._getPopperConfig(s)),i.classList.add(ri);const l=this._resolvePossibleFunction(this._config.customClass);l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{de.on(t,"mouseover",Wt)}));const c=this.tip.classList.contains(oi);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,de.trigger(this._element,this.constructor.Event.SHOWN),t===ai&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(de.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(ri),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Wt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),de.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(oi,ri),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),li)}_sanitizeAndSetContent(t,e,n){const i=xe.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return Pt(e)?(e=Ht(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Qn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return ei[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)de.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===pi?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===pi?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;de.on(this._element,e,this._config.selector,(t=>this._enter(t))),de.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},de.on(this._element.closest(ci),ui,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?di:pi]=!0),e.getTipElement().classList.contains(ri)||e._hoverState===si?e._hoverState=si:(clearTimeout(e._timeout),e._hoverState=si,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===si&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?di:pi]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ai,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===ai&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=Ee.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Zn.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:Ht(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),qt(Jn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Qn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=fi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Vt(fi);const hi={...fi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...fi.DefaultType,content:"(string|element|function)"},mi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class vi extends fi{static get Default(){return hi}static get NAME(){return"popover"}static get Event(){return mi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(t){return this.each((function(){const e=vi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Vt(vi);const yi="scrollspy",bi={offset:10,method:"auto",target:""},_i={offset:"number",method:"string",target:"(string|element)"},wi="active",Ei=".nav-link, .list-group-item, .dropdown-item",xi="position";class Di extends ge{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,de.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bi}static get NAME(){return yi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":xi,e="auto"===this._config.method?t:this._config.method,n=e===xi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),xe.find(Ei,this._config.target).map((t=>{const i=It(t),o=i?xe.findOne(i):null;if(o){const t=o.getBoundingClientRect();if(t.width||t.height)return[Ee[e](o).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){de.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){return(t={...bi,...Ee.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=Ht(t.target)||document.documentElement,qt(yi,t,_i),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=Ei.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=xe.findOne(e.join(","),this._config.target);n.classList.add(wi),n.classList.contains("dropdown-item")?xe.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(wi):xe.parents(n,".nav, .list-group").forEach((t=>{xe.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(wi))),xe.prev(t,".nav-item").forEach((t=>{xe.children(t,".nav-link").forEach((t=>t.classList.add(wi)))}))})),de.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){xe.find(Ei,this._config.target).filter((t=>t.classList.contains(wi))).forEach((t=>t.classList.remove(wi)))}static jQueryInterface(t){return this.each((function(){const e=Di.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(window,"load.bs.scrollspy.data-api",(()=>{xe.find('[data-bs-spy="scroll"]').forEach((t=>new Di(t)))})),Vt(Di);const Ci="active",Oi="fade",Ti="show",Si=".active",Ni=":scope > li > .active";class Ai extends ge{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ci))return;let t;const e=jt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Ni:Si;t=xe.find(e,n),t=t[t.length-1]}const i=t?de.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(de.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const o=()=>{de.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),de.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,o):o()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?xe.children(e,Si):xe.find(Ni,e))[0],o=n&&i&&i.classList.contains(Oi),r=()=>this._transitionComplete(t,i,n);i&&o?(i.classList.remove(Ti),this._queueCallback(r,t,!0)):r()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ci);const t=xe.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ci),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ci),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Gt(t),t.classList.contains(Oi)&&t.classList.add(Ti);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&xe.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ci))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=Ai.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this)||Ai.getOrCreateInstance(this).show()})),Vt(Ai);const Ri="toast",ki="hide",Ii="show",ji="showing",Li={animation:"boolean",autohide:"boolean",delay:"number"},Pi={animation:!0,autohide:!0,delay:5e3};class Hi extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Li}static get Default(){return Pi}static get NAME(){return Ri}show(){de.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ki),Gt(this._element),this._element.classList.add(Ii),this._element.classList.add(ji),this._queueCallback((()=>{this._element.classList.remove(ji),de.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Ii)&&(de.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(ji),this._queueCallback((()=>{this._element.classList.add(ki),this._element.classList.remove(ji),this._element.classList.remove(Ii),de.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Ii)&&this._element.classList.remove(Ii),super.dispose()}_getConfig(t){return t={...Pi,...Ee.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},qt(Ri,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){de.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),de.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(Hi),Vt(Hi);var qi,Mi=n(755),Bi=function(){return Bi=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},Bi.apply(this,arguments)},Fi=new(function(){function t(){}return t.prototype.get=function(t){var e=document.cookie.match("(?:(?:^|.*; *)".concat(t," *= *([^;]*).*$)|^.*$"))[1];if(e)return decodeURIComponent(e)},t.prototype.set=function(t,e,n){void 0===n&&(n={}),n.days&&(n["max-age"]=60*n.days*60*24,delete n.days),n=Object.entries(n).reduce((function(t,e){var n=e[0],i=e[1];return"".concat(t,"; ").concat(n,"=").concat(i)}),""),document.cookie=t+"="+encodeURIComponent(e)+n},t.prototype.delete=function(t,e){this.set(t,"",Bi({"max-age":-1},e))},t.prototype.getJSON=function(t){var e=this.get(t);return e?JSON.parse(e):""},t.prototype.setJSON=function(t,e,n){this.set(t,JSON.stringify(e),n)},t}()),Wi=function(){function t(){}return t.COL_SORTING="COL_SORTING",t.COL_RESIZED="COL_RESIZED",t.COL_SHOW_HIDE="COL_SHOW_HIDE",t.COL_REORDER="COL_REORDER",t}(),Gi=function(){function t(){}return t.GRID_DATA="GRID_DATA",t.ON_NEXT_RECORD="ON_NEXT_RECORD",t.ON_PREV_RECORD="ON_PREV_RECORD",t.ON_SAVE_RECORD="ON_SAVE_RECORD",t.ON_DELETE_RECORD="ON_DELETE_RECORD",t.ON_LAST_RECORD="ON_LAST_RECORD",t.ON_FIRST_RECORD="ON_FIRST_RECORD",t.ON_ADD_RECORD="ON_ADD_RECORD",t.ON_FETCH_RECORD="ON_FETCH_RECORD",t.ON_FETCH_RECORD_ERROR="ON_FETCH_RECORD_ERROR",t.ON_FETCH_GRID_RECORD="ON_FETCH_GRID_RECORD",t.ON_FETCH_GRID_RECORD_ERROR="ON_FETCH_GRID_RECORD_ERROR",t.ON_NAVIGATING_RECORD="ON_NAVIGATING_RECORD",t.ON_GRID_UPDATED="ON_GRID_UPDATED",t.ON_SAVE_ERROR="ON_SAVE_ERROR",t.ON_SORTING_REQUESTED="ON_SORTING_REQUESTED",t.ON_COLS_REORDERED="ON_COLS_REORDERED",t.ON_GRID_DATA_BOUND="ON_GRID_DATA_BOUND",t.ON_GRID_CONFIG_UPDATED="ON_GRID_CONFIG_UPDATED",t.ON_PAGE_READY="ON_PAGE_READY",t.ON_ROW_UPDATED="ON_ROW_UPDATED",t.ON_FIELD_UPDATED="ON_FIELD_UPDATED",t.ON_ROW_DOUBLE_CLICKED="ON_ROW_DOUBLE_CLICKED",t}(),$i=new(function(){function t(){this.callbacks=[],this.registerWinPopState()}return t.prototype.registerWinPopState=function(){var t=this;window.onpopstate=function(e){if(e.state&&e.state.eventData){console.log(e.state);var n={EventData:e.state.eventData,SkipPush:!0,DataSourceName:""};t.Emit(Gi.ON_FETCH_RECORD,window,n)}}},t.prototype.Emit=function(t,e,n){if(t)try{this.callbacks.forEach((function(i){i.EventName!==t||i.DataSourceName!==n.DataSourceName&&!0===i.VerifyDataSourceName||i.Callback(e,n)}))}catch(t){console.error(t)}},t.prototype.Unsubscribe=function(t){var e=this.callbacks.filter((function(e){return!(e.Key===t.Key||e.EventName===t.EventName||e.DataSourceName===t.DataSourceName)}));this.callbacks=e},t.prototype.Subscribe=function(t){t.EventName&&this.callbacks.push(t)},t}()),Ui=function(){function t(){console.log("Session storage is initialized")}return t.prototype.addItem=function(t,e,n){var i={value:e,type:"prem",expiry:n.getTime()};"object"==typeof e&&void 0!==e&&(i.type="object"),sessionStorage.setItem(t,JSON.stringify(i))},t.prototype.appendItem=function(t,e){try{var n=this.getItemRaw(t);if(n){var i=e(n.value);this.addItem(t,i,new Date(n.expiry))}}catch(t){console.error(t)}},t.prototype.createExpiryKey=function(t){return t+"-expiry"},t.prototype.getItemRaw=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?(this.removeItem(t),void console.log("entry expired, will be removed",n)):n}return null},t.prototype.getItem=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?void this.removeItem(t):n.value}return null},t.prototype.removeItem=function(t){sessionStorage.removeItem(t)},t.prototype.removeAll=function(t){if(t){var e=sessionStorage.length;if(!(e<=0)){for(var n=[],i=0;i<e;i++)(o=sessionStorage.key(i)).startsWith(t)&&n.push(o);for(i=0;i<n.length;i++){var o=n[i];sessionStorage.removeItem(o)}}}else sessionStorage.removeAll()},t}(),zi=new(function(){function t(){this.DataTables=[]}return t.prototype.Add=function(t){this.DataTables.push(t)},t.prototype.GetAll=function(){var t=[];return this.DataTables.forEach((function(e){if(!e.isReadOnly){var n={DataSourceName:e.dataSourceName,Data:e.records};t.push(n)}})),t},t.prototype.GetByDSName=function(t){var e=this.DataTables.find((function(e){return e.dataSourceName===t}));if(e)return{DataSourceName:e.dataSourceName,Data:e.records}},t}()),Vi=function(){function t(){this.jquery=Mi,this.children=[],this.appDataEvents=Gi,this.appActions=Wi}return t.prototype.notifyListeners=function(t,e){$i.Emit(t,this,e)},t.prototype.getGridSettings=function(t){try{return Fi.getJSON(t)}catch(t){return void console.log(t)}},Object.defineProperty(t.prototype,"dataSourceName",{get:function(){return this._dataSourceName},set:function(t){this._dataSourceName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReadOnly",{get:function(){return this._isReadOnly},set:function(t){this._isReadOnly=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"records",{get:function(){return[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.element.css("width")},set:function(t){this.element.css("width",t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){return this.element.is(":visible")},set:function(t){!1===t?this.element.hide():this.element.show()},enumerable:!1,configurable:!0}),t.prototype.getCss=function(t){return this.element.css(t)},t.prototype.setCss=function(t,e){this.element.css(t,e)},Object.defineProperty(t.prototype,"css",{set:function(t){this.element.css(t)},enumerable:!1,configurable:!0}),t.prototype.props=function(t){var e=this;t.forEach((function(t){return e.prop(t.key,t.value)}))},t.prototype.prop=function(t,e){return this.element.attr(t,e)},t.prototype.getProp=function(t){return this.element.attr(t)},t.prototype.find=function(t){return this.element.find(t)},t.prototype.addClass=function(t){return this.element.addClass(t),this},t.prototype.removeClass=function(t){return this.element.removeClass(t),this},t.prototype.hasClass=function(t){return this.element.hasClass(t)},t.prototype.setText=function(t){return this.element.text(t),this},t.prototype.getText=function(){return this.element.text()},t.prototype.append=function(t,e){return void 0===e&&(e=!0),e&&this.children.push(t),this.element.append(t.element),this},t.prototype.focus=function(){this.element.focus()},t.prototype.isEmptyObj=function(t){return 0===Object.keys(t).length},Object.defineProperty(t.prototype,"id",{get:function(){return this.getProp("id")},set:function(t){this.prop("id",t)},enumerable:!1,configurable:!0}),t.prototype.clone=function(){var e=new t,n=this.element[0].cloneNode();if(n instanceof HTMLElement&&(e.element=this.jquery(n)),this.children.length>0){var i=this.children.map((function(t){var n=t.clone();return e.element.append(n.element),n}));e.children=i}return e},t.prototype.shClone=function(t){return t?Object.assign(Object.create(Object.getPrototypeOf(t)),t):t},t}(),Ki=(n(661),function(t,e,n){void 0===n&&(n=!1),this.text=t,this.value=e,this.isSelected=n}),Xi=function(t,e,n,i,o,r,s,a,l,c){this.Name=t,this.DataType=e,this.Width=n,this.PropName=i,this.IsKey=o,this.DataSource=r,this.ColSpan=s,this.RowSpan=a,this.SelectorDataCB=l,this.SelectorCols=c},Yi=function(t,e,n,i,o){void 0===i&&(i=function(t){}),void 0===o&&(o=void 0),this.name=t,this.data=e,this.isRemote=n,this.url=i,this.getPageOfflineCB=o},Qi=function(t,e,n,i,o){void 0===o&&(o=!1),this.gridId=t,this.containerId=e,this.colDefinition=n,this.dataSource=i,this.isReadonly=o,this.enableInfiniteScroll=!0,this.cacheResponses=!1},Ji=function(t,e,n){void 0===t&&(t=1),void 0===e&&(e=10),void 0===n&&(n=10),this.pageIndex=t,this.pageSize=!e||e<=0?10:e,this.totalRecords=n,this.totalPages=Math.ceil(this.totalRecords/this.pageSize)},Zi=function(t,e,n){void 0===n&&(n=function(t){}),this.dsName=t,this.pagingMetaData=e,this.nextPageCallback=n},to=function(t,e,n,i){void 0===n&&(n=void 0),void 0===i&&(i=void 0),this.url=t,this.method=e,this.headers=n,this.recordId=i},eo=function(t,e,n,i){this.width=t,this.visible=e,this.sort=n,this.position=i},no=(qi=function(t,e){return qi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},qi(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}qi(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),io=function(t){function e(e,n){void 0===n&&(n=!1);var i=t.call(this)||this;return i.options=e||new Xi,i.isHeader=n,i.render(),i}return no(e,t),e.prototype.render=function(){var t=this.options?this.options.RowSpan:void 0,e=this.options?this.options.ColSpan:void 0;this.element=!0===this.isHeader?this.jquery("<th class='sorting ds-col'></th>"):this.jquery("<td></td>"),t&&this.element.attr("rowSpan",t),e&&this.element.attr("colSpan",e)},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options),this.isHeader);return i.children=n.children,i.element=n.element,i},e}(Vi),oo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ro=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n}return oo(e,t),e.prototype.render=function(){"select"===this.options.InputType&&(this.element=this.jquery("<select></select>")),"button"===this.options.InputType?this.element=this.jquery('<button class="btn btn-outline-primary" type="button"></button>'):this.element=this.jquery("<input type='".concat(this.options.InputType,"' /> "))},Object.defineProperty(e.prototype,"val",{get:function(){return"date"===this.options.InputType&&this.element.val()?new Date(this.element.val().toString()).toString():this.element.val()},set:function(t){this.element.val(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valExt",{set:function(t){this.element.val(t),this.element.change()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modelName",{get:function(){return this.getProp("data-propname")},set:function(t){this.prop("data-propname",t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readonly",{get:function(){return this.element.is("readonly")},set:function(t){var e=!0===t?"true":"false";this.element.attr("readonly",e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this.element.is("disabled")},set:function(t){var e=!0===t?"true":"false";this.element.attr("disabled",e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isKey",{get:function(){return"true"===this.getProp("data-keycolumn")},set:function(t){this.prop("data-keycolumn",t)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return t.prototype.clone.call(this)},e.prototype.addDoubleClickEvent=function(){var t=this;this.element.on("dblclick",(function(e){t.notifyListeners(t.appDataEvents.ON_ROW_DOUBLE_CLICKED,{EventData:{Event:e},DataSourceName:t.options.DataSourceName})}))},e.prototype.change=function(){this.element.change()},e}(Vi),so=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ao=function(t){function e(e){var n=this,i={DataSourceName:e,InputType:"checkbox"};return(n=t.call(this,i)||this).render(),n}return so(e,t),Object.defineProperty(e.prototype,"val",{get:function(){return!0===this.element.is(":checked")?"true":"false"},set:function(t){this.element.val(t)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},e}(ro),lo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),co=function(t){function e(e,n){var i=t.call(this)||this;return i.appDataEvents=Gi,i.sessionStorage=e,i.dataSourceName=n,i.cacheResponses=!1,i}return lo(e,t),e.prototype.get=function(t){var e=this,n=e.cacheResponses;if(!0===n){var i=JSON.stringify(t),o=this.sessionStorage.getItem(i);if(o)return void e.notifyResponse(o)}var r={url:t.url,method:"GET",headers:t.headers?t.headers:{}};this.jquery.ajax(r).then((function(t){!0===n&&e.sessionStorage.addItem(i,t,new Date(Date.now()+6e5)),e.notifyResponse(t)}),(function(n){e.nofifyError(n,t)}))},e.prototype.notifyResponse=function(t){try{var e={DataSourceName:this.dataSourceName,EventData:{Data:t.items,MetaData:new Ji(t.metaData.pageIndex,t.metaData.pageSize,t.metaData.totalRecords)}}}catch(t){return void console.log("invalid response. Make sure response have fields: items{array[object]}, metaData {pageIndex, pageSize, totalRecords}")}this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,e)},e.prototype.nofifyError=function(t,e){var n={DataSourceName:this.dataSourceName,EventData:{Event:t,RecordId:e.recordId}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD_ERROR,n)},e}(Vi),uo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),po=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.listId="pg_list_".concat(n.options.dsName),n.containerId="pg_container_".concat(n.options.dsName),n}return uo(e,t),e.prototype.render=function(){var t=this;this.element&&this.element.remove(),this.element=this.jquery('<div class="bs-pagination" id="'.concat(this.containerId,'">\n                        <nav aria-label="Page navigation">\n                            \n                        </nav>\n                    </div>'));for(var e=this.jquery('<ul class="pagination justify-content-end" id="'.concat(this.listId,'"></ul>')),n=1;n<=this.options.pagingMetaData.totalPages&&n<=5;n++){var i=this.jquery('<li class="page-item"></li>'),o=this.jquery('<a class="page-link" href="#" data-p-index="'.concat(n,'">').concat(n,"</a>"));i.append(o),e.append(i),o.on("click",(function(e){e.preventDefault();var n=t.jquery(e.target).attr("data-p-index");t.options.nextPageCallback&&t.options.nextPageCallback(parseInt(n))}))}this.element.find("nav").append(e)},e.prototype.clear=function(){this.jquery("#"+this.listId).children("li").remove()},e}(Vi),fo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ho=function(t){function e(e){var n=t.call(this)||this;return n.gridElement=e.gridElement,n.httpClient=e.httpClient,n.s_area=null,n.observer=null,n.target=null,n.currentPage=1,n.initData=null,n.initMetaData=null,n.nextPageCallback=null,n}return fo(e,t),e.prototype.observerCB=function(t,e){!0===t[0].isIntersecting&&this.currentPage<this.initMetaData.totalPages&&(console.log("Infinite scroll: fetching next page#: ",this.currentPage+1),this.currentPage++,this.nextPageCallback(this.currentPage))},e.prototype.observe=function(t){this.target=t,this.observer.observe(t)},e.prototype.unobserve=function(){this.observer.unobserve(this.target)},e.prototype.enable=function(){var t=this;this.s_area="scroll_area_"+this.gridElement.attr("id");var e=this.jquery('<div class="row bs-scroll" id="'.concat(this.s_area,'" style="max-height: 200px; overflow-y: auto"></div>'));this.gridElement.wrap(e);var n={root:this.jquery("#".concat(this.s_area))[0],rootMargin:"0px",threshold:.3,trackVisibility:!1};this.observer=new IntersectionObserver((function(e,n){return t.observerCB(e,n)}),n);var i=this.gridElement.find("tr"),o=i[i.length-1];this.observe(o)},e}(Vi),go=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),mo=function(t){function e(){var e=t.call(this)||this;return e.items=[],e}return go(e,t),e.prototype.add=function(t){this.find(t.options.propName)||this.items.push(t)},e.prototype.findSelector=function(t){return this.items.find((function(e){return e.options.propName===t}))},e}(Vi),vo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),yo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return vo(e,t),e.prototype.render=function(){this.element=this.jquery('<i class="bi bi-caret-right row-marker"></i>')},e.prototype.clone=function(){return t.prototype.clone.call(this)},e}(Vi),bo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),_o=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return bo(e,t),e.prototype.render=function(){this.element=this.jquery('<div class="row actions-container"></div>')},e.prototype.addDeleteAction=function(t){var e=this.jquery('<button type="button" class="btn btn-sm btn-outline-danger grid-toolbar-action" \n                                    id="btnDeleteRow_'.concat(this.dataSourceName,'"><i class="bi bi-trash"></i>\n                                </button>'));return e.on("click",t),this.element.append(e),this},e.prototype.addNewRecordAction=function(t){var e=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    id="btnAddRow_'.concat(this.dataSourceName,'"><i class="bi bi-plus-circle"></i>\n                                </button>\''));return e.on("click",t),this.element.append(e),this},e.prototype.addGridSettingsAction=function(){var t=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    data-bs-toggle="modal" data-bs-target="#staticBackdrop_'.concat(this.dataSourceName,'" \n                                    id="btnSettings_').concat(this.dataSourceName,'"><i class="bi bi-gear"></i>\n                                </button>'));return this.element.append(t),this},e}(Vi),wo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Eo=function(t){function e(e,n){void 0===n&&(n="text");var i=this,o={DataSourceName:e,InputType:n};return(i=t.call(this,o)||this).render(),i}return wo(e,t),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,i.addDoubleClickEvent(),i},e}(ro),xo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Do=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.render(),n}return xo(e,t),e.prototype.render=function(){this.element=this.jquery("<option></option>"),this.element.val(this.options.value),this.element.text(this.options.text),this.options.isSelected&&this.element.attr("selected","selected")},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e.setText(this.element.text()),e},e}(Vi),Co=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Oo=function(t){function e(e){var n=this,i={DataSourceName:e,InputType:"select"};return(n=t.call(this,i)||this).render(),n}return Co(e,t),Object.defineProperty(e.prototype,"val",{get:function(){return this.element.val()},set:function(t){this.element.val(t),this.element.change()},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},e}(ro),To=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),So=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return To(e,t),e.prototype.render=function(){t.prototype.render.call(this);var e=this.options.Icon?'<i class="bi bi-'.concat(this.options.Icon,'"></i>'):"";this.element.append(e),this.options.Handler&&this.addClickHandler()},e.prototype.addClickHandler=function(){var t=this;this.element.on("click",(function(e){return t.options.Handler(e)}))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(ro),No=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ao=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return No(e,t),e.prototype.onItemSelected=function(t,e){console.log("row selected",t.grid.body.getSelectedRow());var n=t.grid.body.getSelectedRow().getInputs().find((function(t){return t.isKey}));n&&(this.txtElement.val=n.val,this.txtElement.change()),t.selectorModal.hide()},e.prototype.render=function(){var t=this;this.txtElement=new Eo(this.options.DataSourceName),this.txtElement.addClass(this.options.CssClass).props([{key:"id",value:this.options.ElementId},{key:"placeHolder",value:this.options.PlaceHolder},{key:"data-propname",value:this.options.PropName}]),this.btnElement=new So({InputType:"button",DataSourceName:this.options.DataSourceName,Icon:"search",Handler:function(e){return t.options.BtnClick(t,e)}});var e=this.jquery('<div class="input-group input-group-sm"></div>');this.element=e.append(this.txtElement.element).append(this.btnElement.element)},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(ro),Ro=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ko=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.parentContainerId=n.options.containerId,n.modalId="".concat(n.parentContainerId,"_bs_").concat(n.options.propName),n.modalTitleId="".concat(n.parentContainerId,"_lbs_").concat(n.options.propName),n.containerId="".concat(n.parentContainerId,"_cbs_").concat(n.options.propName),n.gridId="".concat(n.parentContainerId,"_g_").concat(n.options.propName),n.render(),n.grid=n.renderGrid(),n.onItemSelected=function(t,e){console.log()},n}return Ro(e,t),e.prototype.render=function(){var t=this,e=this.jquery("#"+this.parentContainerId).find("#"+this.modalId);if(e&&1===e.length)this.element=e,this.selectorModal=Mn.getOrCreateInstance(e[0]);else{var n='<div class="modal" id="'.concat(this.modalId,'">\n                        <div class="modal-dialog modal-dialog-scrollable">\n                            <div class="modal-content">\n                                <div class="modal-header">\n                                    <h5 class="modal-title" id="').concat(this.modalTitleId,'">Select a value</h5>\n                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                                </div>\n                                <div class="modal-body">\n                                    <div id="').concat(this.containerId,'">\n\n                                    </div>\n                                </div>\n                                <div class="modal-footer">\n                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                                </div>\n                            </div>\n                        </div>\n                </div>');this.element=this.jquery(n),this.jquery("#"+this.parentContainerId).append(this.element),this.selectorModal=new Mn(this.element[0]),this.element[0].addEventListener("shown.bs.modal",(function(e){t.grid.clearGrid(),t.grid.infiniteScroller.currentPage=1,t.grid.fetchGridPage(1)}))}},e.prototype.show=function(){this.selectorModal.show()},e.prototype.renderGrid=function(){var t=new Yi("bsSelector",{initData:[],metaData:void 0},!0,this.options.urlCb),e=new Qi(this.gridId,this.containerId,this.options.gridCols,t,!0),n=new Go(e);return n.registerCallbacks(),n.removeHandler(this.appDataEvents.GRID_DATA),n.removeHandler(this.appDataEvents.ON_ADD_RECORD),n.removeHandler(this.appDataEvents.ON_FETCH_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_ERROR),n.render(),n.gridActions.visible=!1,n},e}(Vi),Io=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jo=function(t){function e(e){var n=t.call(this)||this;return n.cells=[],n.options=e,n.render(),n}return Io(e,t),Object.defineProperty(e.prototype,"rowCategory",{get:function(){return this.element.prop("data-rowcategory")},set:function(t){this.element.prop("data-rowcategory",t)},enumerable:!1,configurable:!0}),e.prototype.addCell=function(t){this.element.append(t.element),this.cells.push(t)},e.prototype.addCells=function(t){var e=this;t.forEach((function(t){return e.addCell(t)}))},e.prototype.render=function(){this.element||(this.element=this.jquery("<tr></tr>"))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=this.shClone(this.options);i.isTemplateRow=!1;var o=new e(i);return o.element=n.element,o.children=n.children,o.cells=this.cells.map((function(t){var e=t.clone();return o.element.append(e.element),e})),o},e.prototype.focusRow=function(){this.removeClass("table-active").addClass("table-active")},e.prototype.getInputs=function(){var t=[];return this.cells.forEach((function(e,n){var i=e.children;i.length>0&&i.forEach((function(e,n){e instanceof Ao?t.push(e.txtElement):e instanceof ro&&t.push(e)}))})),t},e.prototype.createInputFor=function(t,e){var n=this,i=this.options.dataSourceName,o=this.options.gridId,r=null;if("select"===t.DataType)r=new Oo(i),t.DataSource.forEach((function(t){return r.append(new Do(t))})),r.addClass("form-select form-select-sm");else if("checkbox"===t.DataType)r=new ao(i);else if("selector"===t.DataType){var s=new ko({propName:t.PropName,containerId:this.options.containerId,urlCb:t.SelectorDataCB,gridCols:t.SelectorCols});e.selectors.add(s),r=new Ao({DataSourceName:i,PropName:t.PropName,BtnId:"btn_"+o+"_template_row_"+t.PropName,CssClass:"form-control form-control-sm",ElementId:o+"_template_row_"+t.PropName,InputType:"text",PlaceHolder:t.Name,BtnClick:function(t,e){s.grid.removeHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED),s.grid.addHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED,(function(e,n){return t.onItemSelected(s,n)})),s.show()}})}else(r=new Eo(i,t.DataType)).addClass("form-control form-control-sm");"selector"!==t.DataType&&r.props([{key:"data-propname",value:t.PropName},{key:"title",value:t.Name},{key:"id",value:o+"_template_row_"+t.PropName},{key:"placeholder",value:t.Name}]),!0===t.IsKey&&(r.readonly=!0,r.isKey=!0),!0===e.options.isReadonly&&(r.readonly=!0,r.setCss("cursor","pointer"),r.setCss("user-select","none"));var a=new io(new Xi);return a.append(r),a},e.prototype.createHeaderFor=function(t){var e=new io(t,!0);return e.addClass("sorting").addClass("ds-col"),e.setText(t.Name),e.prop("data-th-propname",t.PropName),e},e.prototype.getVisibleInputs=function(){return this.getInputs().filter((function(t){return!0===t.visible}))},e.prototype.getRowDataExt=function(){var t=this.getInputs(),e={};return t.forEach((function(t,n){var i=t.modelName;e[i]=t})),e},e.prototype.getRowIndex=function(){var t=this.getProp("data-rowindex");return parseInt(t)},e.prototype.getRowData=function(){var t=this.getInputs(),e=this.getRowIndex(),n={},i=this.rowCategory;return n.rowCategory=i,t.forEach((function(t,e){var i=t.modelName;n[i]=t.val})),n.clientRowNumber=e,n},e.prototype.isRowDirty=function(){return"true"===this.getProp("data-isdirty")},e}(Vi),Lo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Po=function(t){function e(){var e=t.call(this)||this;return e.rows=[],e}return Lo(e,t),e.prototype.addRow=function(t){this.element.append(t.element);var e=this.getNextRowIndex();t.prop("data-rowindex",e);var n=!0===t.options.gridHeader?"head":"data";return t.prop("id","".concat(t.options.gridId,"_").concat(n,"_").concat(e)),this.rows.push(t),this},e.prototype.getVisibleRows=function(){return this.rows.filter((function(t){return!0===t.visible}))},e.prototype.getNextRowIndex=function(){return this.rows.length+1},e.prototype.getGridTitlesRow=function(){return this.rows.find((function(t){return!0===t.options.gridHeader}))},e}(Vi),Ho=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),qo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return Ho(e,t),e.prototype.render=function(){this.element=this.jquery('<thead class="table-light"></thead>')},e}(Po),Mo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Bo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return Mo(e,t),e.prototype.render=function(){this.element=this.jquery("<tbody></tbody>")},e.prototype.rowSiblings=function(t){return this.rows.filter((function(e,n){if(e!==t)return e}))},e.prototype.focusRow=function(t){t.removeClass("table-active").addClass("table-active"),this.rowSiblings(t).forEach((function(t,e){return t.removeClass("table-active")}))},e.prototype.getTemplateRow=function(){var t=this.rows.filter((function(t){if(!0===t.options.isTemplateRow)return t}));if(t&&t.length>0)return t[0]},e.prototype.getDirtyRows=function(){return this.rows.filter((function(t,e){return t.isRowDirty()}))},e.prototype.getDirtyRecords=function(){var t=this.getDirtyRows();if(0===t.length)return[];var e=[];return t.forEach((function(t,n){e.push(t.getRowData())})),e},e.prototype.getSelectedRow=function(){return this.rows.find((function(t,e){return t.hasClass("table-active")}))},e.prototype.markDeleted=function(){var t=this.getSelectedRow();if(t){var e=this.rowSiblings(t),n=e[e.length-1];t.removeClass("table-active"),t.prop("data-isdirty","true"),t.css={display:"none"};var i=t.rowCategory;t.rowCategory="ADDED"===i?"ADDED_DELETED":"DELETED",this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,{DataSourceName:t.options.dataSourceName,EventData:{Event:t}}),this.focusRow(n)}},e.prototype.removeRow=function(t){t.element.remove();var e=this.rows.indexOf(t);e>-1&&this.rows.splice(e,1)},e}(Po),Fo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Wo=function(t,e,n){if(n||2===arguments.length)for(var i,o=0,r=e.length;o<r;o++)!i&&o in e||(i||(i=Array.prototype.slice.call(e,0,o)),i[o]=e[o]);return t.concat(i||Array.prototype.slice.call(e))},Go=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.head=new qo,n.body=new Bo,n.selectors=new mo,n.paginator=new po(new Zi(n.options.dataSource.name,new Ji,(function(t){return n.paginatorCallback(t)}))),n.sessionCache=new Ui,n.httpClient=new co(n.sessionCache,n.options.dataSource.name),n.httpClient.cacheResponses=n.options.cacheResponses,n.infiniteScroller=null,n.gridActions=null,n.discoverable=!0,n}return Fo(e,t),e.prototype.setDiscoverable=function(){zi.Add(this)},Object.defineProperty(e.prototype,"dataSourceName",{get:function(){return this.options.dataSource.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isReadOnly",{get:function(){return this.options.isReadonly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"records",{get:function(){return this.body.getDirtyRecords()},enumerable:!1,configurable:!0}),e.prototype.paginatorCallback=function(t){this.fetchGridPage(t)},e.prototype.addHeader=function(){this.element.append(this.head.element)},e.prototype.addBody=function(){this.element.append(this.body.element)},e.prototype.render=function(){var t=this;this.element=this.jquery('<table class="table table-bordered table-hover table-sm resizable navTable nowrap bs-table"></table>'),this.id=this.options.gridId,this.prop("data-datasource",this.options.dataSource.name);var e=this.getGridSettings(this.options.gridId)||{};this.css={width:"inherit"};var n=new jo({dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,gridHeader:!0});n.addClass("draggable").addClass("grid-cols");var i=new jo({isTemplateRow:!0,dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,containerId:this.options.containerId});i.addClass("grid-rows"),i.css={display:"none"};var o=this.applyColSorting(e),r=new io(new Xi,!0),s=new yo,a=new io(new Xi);a.append(s),n.addCell(r),i.addCell(a),o.forEach((function(o){var r=e[o.propName]||{},s=n.createHeaderFor(o),a=i.createInputFor(o,t);t.addSorting(s),t.applyColSettings(s,r),t.applyColSettings(a,r),n.addCell(s),i.addCell(a)})),this.head.addRow(n),this.body.addRow(i),this.addActions(),this.addHeader(),this.addBody(),this.jquery("#"+this.options.containerId).append(this.gridActions.element),this.jquery("#"+this.options.containerId).append(this.element),this.addInfiniteScroll();var l=this.options.dataSource.data.initData,c=this.options.dataSource.data.metaData,u={DataSourceName:this.options.dataSource.name,EventData:{Data:l,MetaData:c}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,u),this.notifyListeners(this.appDataEvents.ON_GRID_DATA_BOUND,{DataSourceName:this.options.dataSource.name,EventData:{}}),!0===this.discoverable&&this.setDiscoverable()},e.prototype.addInfiniteScroll=function(){var t=this;!0===this.options.enableInfiniteScroll&&(this.infiniteScroller=new ho({gridElement:this.element,httpClient:this.httpClient}),this.infiniteScroller.nextPageCallback=function(e){return t.paginatorCallback(e)},this.infiniteScroller.enable())},e.prototype.addActions=function(){var t=this;this.gridActions=new _o,this.gridActions.dataSourceName=this.options.dataSource.name,this.gridActions.addNewRecordAction((function(e){return t.addEmptyRow()})).addDeleteAction((function(e){return t.body.markDeleted()})).addGridSettingsAction()},e.prototype.addSorting=function(t){var e=this;t.element.on("click",(function(n){var i=!0;t.hasClass("sorting_asc")?(t.removeClass("sorting_asc").addClass("sorting_desc"),i=!1):t.removeClass("sorting_desc").addClass("sorting_asc"),t.element.siblings("th").removeClass("sorting_asc").removeClass("sorting_desc");var o={EventData:{Event:n,PropName:t.getProp("data-th-propname"),Asc:i},DataSourceName:e.options.dataSource.name};t.notifyListeners(t.appDataEvents.ON_SORTING_REQUESTED,o)}))},e.prototype.clearGrid=function(){this.find(".grid-row").remove();var t=this.body.getTemplateRow();this.body.rows=[t]},e.prototype.applyColSettings=function(t,e){this.isEmptyObj(e)||(!1===e.visible&&t.element.hide(),e.width&&(t.css={position:"relative",width:e.width}))},e.prototype.applyColSorting=function(t){if(!t||this.isEmptyObj(t))return this.options.colDefinition;var e=[];return this.options.colDefinition.forEach((function(n,i){var o=t[n.PropName];e[o.position]=n})),e},e.prototype.bindDataSource=function(t,e){var n=this;if(t&&!(t.length<=0)){var i=t;!1===this.options.dataSource.isRemote&&(i=this.options.dataSource.getPageOfflineCB(e.pageIndex,this.options.dataSource.data.initData,e));var o=null;i.forEach((function(t,e){var i=n.addNewRow(t,!0);i.rowCategory="PRESTINE",o=i})),0==this.options.enableInfiniteScroll?this.bindPaginator(e):(this.infiniteScroller.initMetaData=e,this.infiniteScroller.initData=i,o&&(this.infiniteScroller.unobserve(),this.infiniteScroller.observe(o.element[0])))}},e.prototype.bindPaginator=function(t){void 0===t&&(t=new Ji),this.paginator.options.pagingMetaData=t,this.paginator.render(),this.jquery("#"+this.options.containerId).append(this.paginator.element)},e.prototype.addNewRow=function(t,e){var n=this,i=this.body.getNextRowIndex(),o=this.body.getTemplateRow().clone();o.options.isTemplateRow=!1,o.addClass("grid-row"),o.css={display:"table-row"};var r=this;o.getInputs().forEach((function(n,s){var a=n,l=a.id;a.id=l+"_"+i;var c=a.modelName,u=t[c];if("date"===a.options.InputType&&u){var p=new Date(u);a.val=r.toDateDisplayFormat(p)}else a instanceof ao&&("true"===u||"True"===u||!0===u)?a.prop("checked","checked"):void 0!==u&&(a.val=u);!1===e&&(a.disabled=!1,a.readonly=!1),a.element.on("change",(function(t){o.prop("data-isdirty",!0),"ADDED"!==o.rowCategory&&(o.rowCategory="UPDATED"),a.removeClass("is-invalid").prop("title","");var e=fi.getInstance(t.target);e&&e.dispose();var n=o.getRowDataExt(),i=r.options.dataSource.name,s={EventData:{Event:t,Grid:r},DataSourceName:i},l={EventData:{Event:t,Row:n},DataSourceName:i},c={EventData:{Event:t,Row:n,Field:a},DataSourceName:i};o.notifyListeners(r.appDataEvents.ON_GRID_UPDATED,s),o.notifyListeners(r.appDataEvents.ON_FIELD_UPDATED,c),o.notifyListeners(r.appDataEvents.ON_ROW_UPDATED,l)})),a.element.on("focus",(function(t){r.body.focusRow(o)}))})),o.element.on("click",(function(t){r.body.focusRow(o)})),this.body.addRow(o);var s=o.getVisibleInputs();return s.length>0&&s[s.length-1].element.on("keydown",(function(t){return n.onInputKeyDown(o,t)})),o},e.prototype.toDateDisplayFormat=function(t){var e=t.getDate(),n=t.getMonth()+1;return t.getFullYear()+"-"+(n<10?"0":"")+n+"-"+(e<10?"0":"")+e},e.prototype.toTimeDisplayFormat=function(t){var e=t.getHours(),n=t.getMinutes();return(e<10?"0":"")+e+":"+(n<10?"0":"")+n},e.prototype.onInputKeyDown=function(t,e){if(9===e.which&&!0!==e.shiftKey){var n=this.body.getVisibleRows();n.length<=0||n[n.length-1].getRowIndex()===t.getRowIndex()&&this.addEmptyRow()}},e.prototype.addEmptyRow=function(){var t=this.addNewRow(this.createEmptyRowData(),!1),e=t.getVisibleInputs();e.length>0&&e[0].focus(),t.rowCategory="ADDED",t.prop("data-isdirty","true");var n={EventData:{Grid:this,Event:t},DataSourceName:this.options.dataSource.name};return this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,n),this.infiniteScroller.unobserve(),this.infiniteScroller.observe(t.element[0]),t},e.prototype.createEmptyRowData=function(){var t={};return this.options.colDefinition.forEach((function(e,n){t[e.PropName]=void 0})),t},e.prototype.onHeaderNext=function(t,e){t&&t.EventData&&(this.resetSorting(),this.clearGrid(),this.paginator.clear(),!1!==e&&(this.fetchGridPage(1),!0===this.options.enableInfiniteScroll&&(this.infiniteScroller.currentPage=1)))},e.prototype.fetchGridPage=function(t){if(!0===this.options.dataSource.isRemote){var e=this.options.dataSource.url(t);if(!e)return;var n=new to(e,"GET");this.httpClient.get(n)}else{var i=this.options.dataSource.data.initData,o=this.options.dataSource.data.metaData,r={DataSourceName:this.options.dataSource.name,EventData:{Data:i,MetaData:new Ji(t,o.pageSize,o.totalRecords)}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,r)}},e.prototype.onSaveRecord=function(t){var e=this;this.body.rows.filter((function(t){return"DELETED"===t.rowCategory||"ADDED_DELETED"===t.rowCategory})).forEach((function(t){return e.body.removeRow(t)})),this.body.rows.forEach((function(t){t.rowCategory="PRESTINE",t.getInputs().filter((function(t){return t.isKey})).forEach((function(t){t.disabled=!0}))}))},e.prototype.onSaveError=function(t){if(t&&t.EventData&&t.EventData.Event.responseJSON)for(var e=t.EventData.Event.responseJSON,n=this.options.dataSource.name,i=this.body.getDirtyRows(),o=0;o<i.length;o++){var r=e[n+"["+o+"]"];if(r&&r.length>0){var s=r[0],a=o,l=this.getRowByIndex(parseInt(s));if(!l)continue;this.options.colDefinition.forEach((function(t,i){var o=t.PropName.toPascalCaseJson(),r=e[n+"["+a+"]."+o];if(r&&r.length>0){var s=l.find("input[data-propname="+t.PropName+"]");if((!s||s.length<=0)&&(s=l.find("select[data-propname="+t.PropName+"]"),console.log("select found")),s&&s.length>0){s.addClass("is-invalid");var c="";Array.from(r).forEach((function(t){c+=t+" "})),s.attr("title",c),new fi(s[0],{customClass:"tooltip-error"})}}}))}}},e.prototype.getRowByIndex=function(t){return this.body.rows.find((function(e,n){return e.getRowIndex()===t}))},e.prototype.sortTable=function(t,e){var n,i,o=this,r=function(t,e){var n=t.cells[e].element;return n.find("input, select").is(":checked")||n.find("input, select").val()||n.text()},s=this.options.dataSource.name;this.body.rows.sort((n=this.head.getGridTitlesRow().cells.indexOf(t),i=e=!e,function(t,e){return o=r(i?t:e,n),s=r(i?e:t,n),""===o||""===s||isNaN(o)||isNaN(s)?o.toString().localeCompare(s):o-s;var o,s})).forEach((function(t){return o.body.append(t,!1)}));var a={EventData:{CurrentCol:t,Action:Wi.COL_SORTING},DataSourceName:s},l={EventData:{CurrentCol:t,Asc:e},DataSourceName:s};this.notifyListeners(Gi.ON_COLS_REORDERED,l),this.notifyListeners(this.appDataEvents.ON_GRID_CONFIG_UPDATED,a)},e.prototype.onSortingRequest=function(t){var e=this.jquery(t.EventData.Event.target);if("th"!==e.prop("tagName").toLowerCase()){var n=e.parents("th");if(!n||0===n.length)return;t.EventData.Event.target=n[0]}var i=this.head.getGridTitlesRow().cells.find((function(e,n){return e.element[0]===t.EventData.Event.target}));this.sortTable(i,t.EventData.Asc)},e.prototype.resetSorting=function(){this.head.rows.forEach((function(t,e){t.hasClass("sorting_desc")&&t.removeClass("sorting_asc").removeClass("sorting_desc")}))},e.prototype.onColsReordered=function(t){var e=this;this.body.rows.forEach((function(t,n){t.getInputs().forEach((function(t){t.element.off("keydown")}));var i=t.getVisibleInputs();i.length<=0||i[i.length-1].element.on("keydown",(function(n){e.onInputKeyDown(t,n)}))}))},e.prototype.addHandler=function(t,e,n){void 0===n&&(n=!1);var i={Key:this.options.gridId,EventName:t,Callback:e,DataSourceName:this.options.dataSource.name,VerifyDataSourceName:n};$i.Subscribe(i)},e.prototype.removeHandler=function(t){var e={Key:this.options.gridId,EventName:t,DataSourceName:this.options.dataSource.name};$i.Unsubscribe(e)},e.prototype.onFetchData=function(t){!1===this.options.enableInfiniteScroll&&this.clearGrid();var e=t.EventData.MetaData;e&&this.bindDataSource(t.EventData.Data,new Ji(e.pageIndex,e.pageSize,e.totalRecords))},e.prototype.onFetchDataError=function(t){},e.prototype.registerCallbacks=function(t){var e=this;void 0===t&&(t=!0),this.options.gridId,this.options.dataSource.name,this.addHandler(Gi.GRID_DATA,(function(t,n){return e.body.getDirtyRecords()})),this.addHandler(Gi.ON_ADD_RECORD,(function(t,n){return e.onHeaderNext(n,!1)})),this.addHandler(Gi.ON_FETCH_RECORD,(function(t,n){return e.onHeaderNext(n,!0)})),this.addHandler(Gi.ON_SAVE_RECORD,(function(t,n){return e.onSaveRecord(n)})),this.addHandler(Gi.ON_SAVE_ERROR,(function(t,n){return e.onSaveError(n)})),this.addHandler(Gi.ON_SORTING_REQUESTED,(function(t,n){return e.onSortingRequest(n)}),t),this.addHandler(Gi.ON_COLS_REORDERED,(function(t,n){return e.onColsReordered(n)}),t),this.addHandler(Gi.ON_GRID_CONFIG_UPDATED,(function(t,n){return e.onGridConfigurationChanged(n)}),t),this.addHandler(Gi.ON_GRID_DATA_BOUND,(function(t,n){return e.onGridDataBound(n)}),t),this.addHandler(Gi.ON_FETCH_GRID_RECORD,(function(t,n){return e.onFetchData(n)}),t),this.addHandler(Gi.ON_FETCH_GRID_RECORD_ERROR,(function(t,n){return e.onFetchDataError(n)}),t)},e.prototype.configurableGrid=function(){var t=this,e=this.head.getGridTitlesRow().cells,n=this.options.dataSource.name,i='<div class="settings-menu grid-config-template">\n            <div class="modal fade" id="staticBackdrop_'.concat(this.options.dataSource.name,'" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"\n            aria-labelledby="staticBackdropLabel" aria-hidden="true">\n                <div class="modal-dialog modal-dialog-scrollable">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="staticBackdropLabel_').concat(this.options.dataSource.name,'">Configure columns</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <ul class="list-group grid-config-cols">\n\n                            </ul>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>'),o=this.jquery(i);this.jquery("#"+this.options.containerId).append(o);var r=o.find(".grid-config-cols");e.forEach((function(e,i){var o=e.getProp("data-th-propname");if(o){var s=t.jquery('<li class="list-group-item"></li>'),a=t.jquery('<input type="checkbox" value="" class="form-check-input me-1" />'),l="col_config_chk_"+o;a.attr("id",l),a.attr("data-config-propname",o),!0===e.visible&&a.attr("checked","checked");var c=t.jquery('<label for="'+l+'"></label>');c.text(e.getText()),s.append(a),s.append(c),r.append(s),a.on("click",(function(e){var i=t.jquery(e.target),o=i.attr("data-config-propname");if(o){var r=t.head.getGridTitlesRow(),s=r.cells.find((function(t){return t.getProp("data-th-propname")===o}));if(s){var a=t.body.rows,l=Wo(Wo([],a,!0),[r],!1),c=r.cells.indexOf(s);if(!(c<0)){l.forEach((function(t){var e=t.cells[c];e&&(!0===i.is(":checked")?e.visible=!0:e.visible=!1)})),t.notifyListeners(Gi.ON_COLS_REORDERED,{DataSourceName:n,EventData:{Event:e}});var u={EventData:{Event:e,Action:Wi.COL_SHOW_HIDE},DataSourceName:n};t.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,u)}}}}))}}))},e.prototype.resizableGrid=function(){var t=this.options.dataSource.name,e=this.head.getGridTitlesRow().cells;this.css={},this.setCss("overflow","hidden");for(var n=this.element[0].offsetHeight,i=0;i<e.length;i++){var o=s(n);e[i].element.append(o),e[i].setCss("position","relative"),r(o,e[i],this)}function r(e,n,i){var o,r,s,l;e.addEventListener("mousedown",(function(t){l=i.element[0].offsetWidth,r=n.element[0],o=t.pageX;var e=function(t){if("border-box"==a(t,"box-sizing"))return 0;var e=a(t,"padding-left"),n=a(t,"padding-right");return parseInt(e)+parseInt(n)}(r);s=r.offsetWidth-e})),e.addEventListener("mouseover",(function(t){this.style.borderRight="2px solid #0000ff"})),e.addEventListener("mouseout",(function(t){this.style.borderRight=""})),document.addEventListener("mousemove",(function(t){if(r){var e=t.pageX-o;r.style.width=s+e+"px",i.element[0].style.width=l+e+"px"}})),document.addEventListener("mouseup",(function(e){r&&i.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,{dataSourceName:t,eventData:{e,curCol:r},source:i,action:Wi.COL_RESIZED}),r=void 0,o=void 0,s=void 0}))}function s(t){var e=document.createElement("div");return e.style.top="0",e.style.right="0",e.style.width="5px",e.style.position="absolute",e.style.cursor="col-resize",e.style.userSelect="none",e.style.height=t+"px",e}function a(t,e){return window.getComputedStyle(t,null).getPropertyValue(e)}},e.prototype.enableColumnReordering=function(){var t,e=this.options.dataSource.name,n=this.jquery,i=this,o=n('<div draggable="true" class="grid-header"></div>'),r=i.head.getGridTitlesRow(),s=r.cells;s.forEach((function(t){var e=t.element.children();if(0===e.length){var i=t.element.text();t.element.text(""),e=n("<div></div>").text(i),t.element.append(e)}n(e).wrap(o)})),i.find(".grid-header").on({dragstart:function(e){n(this).hasClass("grid-header")?(t=e.target,n(this).css("opacity","0.5")):t=void 0},dragleave:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).removeClass("over")},dragenter:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragover:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragend:function(e){e.preventDefault(),t&&n(this).css("opacity","1")},drop:function(o){if(o.preventDefault(),t){var l=n(this);l.removeClass("over");var c=o.target;if(l.hasClass("grid-header")&&t!==c){var u=l.parents("th");if(u&&!(u.length<=0)){var p=s.find((function(t){return t.element[0]===u[0]}));if(p){var d=s.indexOf(p),f=n(t).parents("th");if(f&&!(f.length<=0)){var h=s.find((function(t){return t.element[0]===f[0]}));if(p){var g=s.indexOf(h);if(d!=g){a(r,s,g,d);var m=i.body.rows;setTimeout((function(){for(var t=0;t<m.length;t++){var n=m[t],r=n.cells;if(d==g)return;a(n,r,g,d)}i.notifyListeners(Gi.ON_COLS_REORDERED,{DataSourceName:e,EventData:{Event:o}});var s={EventData:{Event:o,Action:Wi.COL_REORDER},DataSourceName:e};i.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,s)}),500)}}}}}}}}});var a=function(t,e,n,i){if(n!=i){var o=p.ltr;n>i&&(o=p.rtl),o===p.rtl?l(e,n,i):c(e,n,i),t.cells=[],t.addCells(e)}},l=function(t,e,n){for(var i=e;i>n;i--)u(t,i,i-1)},c=function(t,e,n){for(var i=e;i<n;i++)u(t,i,i+1)},u=function(t,e,n){var i=t[e];t[e]=t[n],t[n]=i},p={rtl:"RIGHT-TO-LEFT",ltr:"LEFT-TO-RIGHT"}},e.prototype.onGridConfigurationChanged=function(t){t.EventData.Action;var e=this.options.gridId,n=this.head.getGridTitlesRow().cells,i={};n.forEach((function(t,e){var n="asc";t.hasClass("sorting_desc")&&(n="desc");var o=t.getProp("data-th-propname"),r=new eo(t.getCss("width"),t.visible,n,e);i[o]=r})),Fi.delete(e),setTimeout((function(){Fi.setJSON(e,i,{days:30,secure:!0,SameSite:"strict"})}),500)},e.prototype.onGridDataBound=function(t){this.configurableGrid(),this.enableColumnReordering(),this.resizableGrid()},e}(Vi),$o=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Uo=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return $o(e,t),e.prototype.render=function(){this.element=this.jquery("#".concat(this.options.ElementId))},e}(ro)})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_desc.png */ "./app-client/images/sort_desc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_asc.png */ "./app-client/images/sort_asc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_both.png */ "./app-client/images/sort_both.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}", "",{"version":3,"sources":["webpack://./app-client/css/site.css"],"names":[],"mappings":"AAAA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,UAAU;EACV,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oEAAyD;AAC3D;;AAEA;EACE,oEAAwD;AAC1D;;AAEA;EACE,yDAA8C;AAChD;;AAEA;EACE,eAAe;EACf,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;;;mBAIiB;EACjB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,UAAU;EACV,WAAW;AACb;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;wBACsB;;EAEtB,cAAc;EACd,qBAAqB;EACrB,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,2CAA2C;EAC3C,cAAc;AAChB;;AAEA;EACE,sDAAsD;EACtD,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;;AAGA;EACE,4BAA4B;;AAE9B;;AAEA;;AAEA;;AAEA;;AAEA","sourcesContent":["html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(../images/sort_desc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(../images/sort_asc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(../images/sort_both.png);\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./app-client/css/site.css":
/*!*********************************!*\
  !*** ./app-client/css/site.css ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./site.css */ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./app-client/dynamic-demo.ts":
/*!************************************!*\
  !*** ./app-client/dynamic-demo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDemo": () => (/* binding */ DynamicDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var DynamicDemo = /** @class */ (function () {
    function DynamicDemo() {
    }
    DynamicDemo.run = function (containerId, initData) {
        console.log('running dynamic demo');
        var bookingLines = initData.data;
        var bookingLinesMetadata = initData.metaData;
        var cols = [];
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Line nbr", "number", "80px", "lineNbr", true));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "desc", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Quantity", "number", "80px", "qty", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit cost", "number", "120px", "cost", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Cost", "number", "120px", "extCost", false));
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('lines', {
            initData: bookingLines, metaData: bookingLinesMetadata
        }, true, function (page) {
            // debugger;
            return 'http://localhost:3000/api/bookinglines?page=' + page;
        });
        var options = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("bookingLines", containerId, cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(options);
        grid.registerCallbacks();
        //
        // lets say we have to calculate ext cost using the unit cost and quantity
        // we can do this by registering a change event
        //
        grid.addHandler(bs_datatable__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_FIELD_UPDATED, function (sender, e) {
            debugger;
            var ev = e;
            if (!ev)
                return;
            var field = ev.EventData.Field;
            if (!field)
                return;
            var fieldName = field.modelName;
            var row = ev.EventData.Row;
            if (fieldName === 'qty' || fieldName === 'cost') {
                row.extCost.val = row.qty.val * row.cost.val;
            }
        });
        grid.render();
    };
    return DynamicDemo;
}());



/***/ }),

/***/ "./app-client/static-demo.ts":
/*!***********************************!*\
  !*** ./app-client/static-demo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticDemo": () => (/* binding */ StaticDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var StaticDemo = /** @class */ (function () {
    function StaticDemo() {
    }
    StaticDemo.run = function () {
        // console.log('test is initialized');
        console.log('hello from index');
        //
        // sample using bootstrap data grid 
        //
        var cols = [];
        var initData = [];
        var totCols = 5, totRows = 60;
        for (var i = 0; i < totCols; i++) {
            cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("COL-" + i, "text", "180px", "col-" + i, false));
        }
        for (var i = 0; i < totRows; i++) {
            var record = {};
            for (var j = 0; j < totCols; j++) {
                record['col-' + j] = 'DATA-' + i + '-' + j;
            }
            initData.push(record);
        }
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('fakeData', {
            initData: initData,
            metaData: new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagingMetaData(1, 5, totRows)
        }, false, null, function (page, data, mdata) {
            var start = page <= 1 ? 0 : (page - 1) * mdata.pageSize;
            var end = start + mdata.pageSize;
            var maxIndex = data.length - 1;
            if (start > maxIndex || end > maxIndex)
                return [];
            var pageData = [];
            for (var index = start; index < end; index++) {
                var element = data[index];
                pageData.push(element);
            }
            return pageData;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("fakeData_table", "dummy-data-container", cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
        var name = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt({ InputType: "text", ElementId: "txtName", DataSourceName: "welcome" });
        name.val = "Welcome to TypeScript";
    };
    return StaticDemo;
}());



/***/ }),

/***/ "./app-client/images/sort_asc.png":
/*!****************************************!*\
  !*** ./app-client/images/sort_asc.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "4bba59196d7ce2619696.png";

/***/ }),

/***/ "./app-client/images/sort_both.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_both.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "8b117faa9d4dd934d6bb.png";

/***/ }),

/***/ "./app-client/images/sort_desc.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_desc.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "c4196d3286cc33244c83.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./app-client/index.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableDemos": () => (/* binding */ BSDataTableDemos)
/* harmony export */ });
/* harmony import */ var _css_site_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/site.css */ "./app-client/css/site.css");
/* harmony import */ var _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dynamic-demo */ "./app-client/dynamic-demo.ts");
/* harmony import */ var _static_demo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static-demo */ "./app-client/static-demo.ts");



var BSDataTableDemos = /** @class */ (function () {
    function BSDataTableDemos() {
    }
    BSDataTableDemos.runStaticDemo = function () {
        _static_demo__WEBPACK_IMPORTED_MODULE_2__.StaticDemo.run();
    };
    BSDataTableDemos.runDynamicDemo = function (containerId, initData) {
        _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__.DynamicDemo.run(containerId, initData);
    };
    return BSDataTableDemos;
}());


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,