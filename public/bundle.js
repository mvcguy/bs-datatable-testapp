(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bs_dt_demo"] = factory();
	else
		root["bs_dt_demo"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bs-datatable/dist/bsdatatable.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-datatable/dist/bsdatatable.js ***!
  \*******************************************************/
/***/ ((module) => {

/*! For license information please see bsdatatable.js.LICENSE.txt */
!function(t,e){ true?module.exports=e():0}(self,(function(){return(()=>{var t={661:()=>{String.prototype.toCamalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()})).replace(/\s+/g,"")},String.prototype.toPascalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t.toLowerCase()})).replace(/\s+/g,"")},String.prototype.toPascalCaseJson=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t})).replace(/\s+/g,"")},String.prototype.format||(String.prototype.format=function(){var t=arguments;return this.replace(/{(\d+)}/g,(function(e,n){return void 0!==t[n]?t[n]:e}))})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i),n.d(i,{BSDataTable:()=>Fo,BSDataTableActions:()=>vo,BSDataTableBase:()=>$i,BSDataTableBody:()=>Bo,BSDataTableButton:()=>So,BSDataTableCell:()=>ro,BSDataTableCheckBox:()=>io,BSDataTableColDefinition:()=>Ki,BSDataTableDataSource:()=>Xi,BSDataTableHeader:()=>jo,BSDataTableHttpClient:()=>ao,BSDataTableHttpClientOptions:()=>Zi,BSDataTableInfiniteScroll:()=>po,BSDataTableInput:()=>eo,BSDataTableMarker:()=>go,BSDataTableOptions:()=>Yi,BSDataTablePagination:()=>lo,BSDataTablePaginationOptions:()=>Ji,BSDataTablePagingMetaData:()=>Qi,BSDataTableRow:()=>Lo,BSDataTableRowCollection:()=>Po,BSDataTableSelect:()=>Do,BSDataTableSelectListItem:()=>qi,BSDataTableSelectOption:()=>wo,BSDataTableSelector:()=>No,BSDataTableSelectorWindow:()=>Ro,BSDataTableSelectorWindowCollection:()=>fo,BSDataTableTextInput:()=>bo,BSDataTableTextInputExt:()=>Uo,CookieHelper:()=>Gi,SessionStorageService:()=>zi,appActions:()=>Fi,appDataEvents:()=>Wi,bsDataTableDiscoveryService:()=>Vi,dataEventsService:()=>Ui});var t={};n.r(t),n.d(t,{afterMain:()=>w,afterRead:()=>y,afterWrite:()=>C,applyStyles:()=>L,arrow:()=>Y,auto:()=>a,basePlacements:()=>c,beforeMain:()=>b,beforeRead:()=>_,beforeWrite:()=>O,bottom:()=>o,clippingParents:()=>d,computeStyles:()=>tt,createPopper:()=>At,createPopperBase:()=>Nt,createPopperLite:()=>Rt,detectOverflow:()=>mt,end:()=>u,eventListeners:()=>nt,flip:()=>gt,hide:()=>yt,left:()=>s,main:()=>E,modifierPhases:()=>S,offset:()=>bt,placements:()=>g,popper:()=>h,popperGenerator:()=>Tt,popperOffsets:()=>Et,preventOverflow:()=>wt,read:()=>v,reference:()=>f,right:()=>r,start:()=>l,top:()=>e,variationPlacements:()=>m,viewport:()=>p,write:()=>D});var e="top",o="bottom",r="right",s="left",a="auto",c=[e,o,r,s],l="start",u="end",d="clippingParents",p="viewport",h="popper",f="reference",m=c.reduce((function(t,e){return t.concat([e+"-"+l,e+"-"+u])}),[]),g=[].concat(c,[a]).reduce((function(t,e){return t.concat([e,e+"-"+l,e+"-"+u])}),[]),_="beforeRead",v="read",y="afterRead",b="beforeMain",E="main",w="afterMain",O="beforeWrite",D="write",C="afterWrite",S=[_,v,y,b,E,w,O,D,C];function T(t){return t?(t.nodeName||"").toLowerCase():null}function N(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function A(t){return t instanceof N(t).Element||t instanceof Element}function R(t){return t instanceof N(t).HTMLElement||t instanceof HTMLElement}function I(t){return"undefined"!=typeof ShadowRoot&&(t instanceof N(t).ShadowRoot||t instanceof ShadowRoot)}const L={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},o=e.elements[t];R(o)&&T(o)&&(Object.assign(o.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],o=e.attributes[t]||{},r=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});R(i)&&T(i)&&(Object.assign(i.style,r),Object.keys(o).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function x(t){return t.split("-")[0]}var P=Math.max,k=Math.min,j=Math.round;function H(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,o=1;if(R(t)&&e){var r=t.offsetHeight,s=t.offsetWidth;s>0&&(i=j(n.width)/s||1),r>0&&(o=j(n.height)/r||1)}return{width:n.width/i,height:n.height/o,top:n.top/o,right:n.right/i,bottom:n.bottom/o,left:n.left/i,x:n.left/i,y:n.top/o}}function B(t){var e=H(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function M(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&I(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function G(t){return N(t).getComputedStyle(t)}function F(t){return["table","td","th"].indexOf(T(t))>=0}function W(t){return((A(t)?t.ownerDocument:t.document)||window.document).documentElement}function U(t){return"html"===T(t)?t:t.assignedSlot||t.parentNode||(I(t)?t.host:null)||W(t)}function z(t){return R(t)&&"fixed"!==G(t).position?t.offsetParent:null}function V(t){for(var e=N(t),n=z(t);n&&F(n)&&"static"===G(n).position;)n=z(n);return n&&("html"===T(n)||"body"===T(n)&&"static"===G(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&R(t)&&"fixed"===G(t).position)return null;for(var n=U(t);R(n)&&["html","body"].indexOf(T(n))<0;){var i=G(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function $(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function q(t,e,n){return P(t,k(e,n))}function K(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function X(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const Y={name:"arrow",enabled:!0,phase:"main",fn:function(t){var n,i=t.state,a=t.name,l=t.options,u=i.elements.arrow,d=i.modifiersData.popperOffsets,p=x(i.placement),h=$(p),f=[s,r].indexOf(p)>=0?"height":"width";if(u&&d){var m=function(t,e){return K("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:X(t,c))}(l.padding,i),g=B(u),_="y"===h?e:s,v="y"===h?o:r,y=i.rects.reference[f]+i.rects.reference[h]-d[h]-i.rects.popper[f],b=d[h]-i.rects.reference[h],E=V(u),w=E?"y"===h?E.clientHeight||0:E.clientWidth||0:0,O=y/2-b/2,D=m[_],C=w-g[f]-m[v],S=w/2-g[f]/2+O,T=q(D,S,C),N=h;i.modifiersData[a]=((n={})[N]=T,n.centerOffset=T-S,n)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&M(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Q(t){return t.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(t){var n,i=t.popper,a=t.popperRect,c=t.placement,l=t.variation,d=t.offsets,p=t.position,h=t.gpuAcceleration,f=t.adaptive,m=t.roundOffsets,g=t.isFixed,_=d.x,v=void 0===_?0:_,y=d.y,b=void 0===y?0:y,E="function"==typeof m?m({x:v,y:b}):{x:v,y:b};v=E.x,b=E.y;var w=d.hasOwnProperty("x"),O=d.hasOwnProperty("y"),D=s,C=e,S=window;if(f){var T=V(i),A="clientHeight",R="clientWidth";T===N(i)&&"static"!==G(T=W(i)).position&&"absolute"===p&&(A="scrollHeight",R="scrollWidth"),T=T,(c===e||(c===s||c===r)&&l===u)&&(C=o,b-=(g&&S.visualViewport?S.visualViewport.height:T[A])-a.height,b*=h?1:-1),c!==s&&(c!==e&&c!==o||l!==u)||(D=r,v-=(g&&S.visualViewport?S.visualViewport.width:T[R])-a.width,v*=h?1:-1)}var I,L=Object.assign({position:p},f&&J),x=!0===m?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:j(e*i)/i||0,y:j(n*i)/i||0}}({x:v,y:b}):{x:v,y:b};return v=x.x,b=x.y,h?Object.assign({},L,((I={})[C]=O?"0":"",I[D]=w?"0":"",I.transform=(S.devicePixelRatio||1)<=1?"translate("+v+"px, "+b+"px)":"translate3d("+v+"px, "+b+"px, 0)",I)):Object.assign({},L,((n={})[C]=O?b+"px":"",n[D]=w?v+"px":"",n.transform="",n))}const tt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,s=void 0===r||r,a=n.roundOffsets,c=void 0===a||a,l={placement:x(e.placement),variation:Q(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Z(Object.assign({},l,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:c})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Z(Object.assign({},l,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var et={passive:!0};const nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,o=i.scroll,r=void 0===o||o,s=i.resize,a=void 0===s||s,c=N(e.elements.popper),l=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&l.forEach((function(t){t.addEventListener("scroll",n.update,et)})),a&&c.addEventListener("resize",n.update,et),function(){r&&l.forEach((function(t){t.removeEventListener("scroll",n.update,et)})),a&&c.removeEventListener("resize",n.update,et)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var rt={start:"end",end:"start"};function st(t){return t.replace(/start|end/g,(function(t){return rt[t]}))}function at(t){var e=N(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function ct(t){return H(W(t)).left+at(t).scrollLeft}function lt(t){var e=G(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}function ut(t){return["html","body","#document"].indexOf(T(t))>=0?t.ownerDocument.body:R(t)&&lt(t)?t:ut(U(t))}function dt(t,e){var n;void 0===e&&(e=[]);var i=ut(t),o=i===(null==(n=t.ownerDocument)?void 0:n.body),r=N(i),s=o?[r].concat(r.visualViewport||[],lt(i)?i:[]):i,a=e.concat(s);return o?a:a.concat(dt(U(s)))}function pt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ht(t,e){return e===p?pt(function(t){var e=N(t),n=W(t),i=e.visualViewport,o=n.clientWidth,r=n.clientHeight,s=0,a=0;return i&&(o=i.width,r=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=i.offsetLeft,a=i.offsetTop)),{width:o,height:r,x:s+ct(t),y:a}}(t)):A(e)?function(t){var e=H(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):pt(function(t){var e,n=W(t),i=at(t),o=null==(e=t.ownerDocument)?void 0:e.body,r=P(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=P(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-i.scrollLeft+ct(t),c=-i.scrollTop;return"rtl"===G(o||n).direction&&(a+=P(n.clientWidth,o?o.clientWidth:0)-r),{width:r,height:s,x:a,y:c}}(W(t)))}function ft(t){var n,i=t.reference,a=t.element,c=t.placement,d=c?x(c):null,p=c?Q(c):null,h=i.x+i.width/2-a.width/2,f=i.y+i.height/2-a.height/2;switch(d){case e:n={x:h,y:i.y-a.height};break;case o:n={x:h,y:i.y+i.height};break;case r:n={x:i.x+i.width,y:f};break;case s:n={x:i.x-a.width,y:f};break;default:n={x:i.x,y:i.y}}var m=d?$(d):null;if(null!=m){var g="y"===m?"height":"width";switch(p){case l:n[m]=n[m]-(i[g]/2-a[g]/2);break;case u:n[m]=n[m]+(i[g]/2-a[g]/2)}}return n}function mt(t,n){void 0===n&&(n={});var i=n,s=i.placement,a=void 0===s?t.placement:s,l=i.boundary,u=void 0===l?d:l,m=i.rootBoundary,g=void 0===m?p:m,_=i.elementContext,v=void 0===_?h:_,y=i.altBoundary,b=void 0!==y&&y,E=i.padding,w=void 0===E?0:E,O=K("number"!=typeof w?w:X(w,c)),D=v===h?f:h,C=t.rects.popper,S=t.elements[b?D:v],N=function(t,e,n){var i="clippingParents"===e?function(t){var e=dt(U(t)),n=["absolute","fixed"].indexOf(G(t).position)>=0&&R(t)?V(t):t;return A(n)?e.filter((function(t){return A(t)&&M(t,n)&&"body"!==T(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),r=o[0],s=o.reduce((function(e,n){var i=ht(t,n);return e.top=P(i.top,e.top),e.right=k(i.right,e.right),e.bottom=k(i.bottom,e.bottom),e.left=P(i.left,e.left),e}),ht(t,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(A(S)?S:S.contextElement||W(t.elements.popper),u,g),I=H(t.elements.reference),L=ft({reference:I,element:C,strategy:"absolute",placement:a}),x=pt(Object.assign({},C,L)),j=v===h?x:I,B={top:N.top-j.top+O.top,bottom:j.bottom-N.bottom+O.bottom,left:N.left-j.left+O.left,right:j.right-N.right+O.right},F=t.modifiersData.offset;if(v===h&&F){var z=F[a];Object.keys(B).forEach((function(t){var n=[r,o].indexOf(t)>=0?1:-1,i=[e,o].indexOf(t)>=0?"y":"x";B[t]+=z[i]*n}))}return B}const gt={name:"flip",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,u=t.name;if(!n.modifiersData[u]._skip){for(var d=i.mainAxis,p=void 0===d||d,h=i.altAxis,f=void 0===h||h,_=i.fallbackPlacements,v=i.padding,y=i.boundary,b=i.rootBoundary,E=i.altBoundary,w=i.flipVariations,O=void 0===w||w,D=i.allowedAutoPlacements,C=n.options.placement,S=x(C),T=_||(S!==C&&O?function(t){if(x(t)===a)return[];var e=ot(t);return[st(t),e,st(e)]}(C):[ot(C)]),N=[C].concat(T).reduce((function(t,e){return t.concat(x(e)===a?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,o=n.boundary,r=n.rootBoundary,s=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?g:l,d=Q(i),p=d?a?m:m.filter((function(t){return Q(t)===d})):c,h=p.filter((function(t){return u.indexOf(t)>=0}));0===h.length&&(h=p);var f=h.reduce((function(e,n){return e[n]=mt(t,{placement:n,boundary:o,rootBoundary:r,padding:s})[x(n)],e}),{});return Object.keys(f).sort((function(t,e){return f[t]-f[e]}))}(n,{placement:e,boundary:y,rootBoundary:b,padding:v,flipVariations:O,allowedAutoPlacements:D}):e)}),[]),A=n.rects.reference,R=n.rects.popper,I=new Map,L=!0,P=N[0],k=0;k<N.length;k++){var j=N[k],H=x(j),B=Q(j)===l,M=[e,o].indexOf(H)>=0,G=M?"width":"height",F=mt(n,{placement:j,boundary:y,rootBoundary:b,altBoundary:E,padding:v}),W=M?B?r:s:B?o:e;A[G]>R[G]&&(W=ot(W));var U=ot(W),z=[];if(p&&z.push(F[H]<=0),f&&z.push(F[W]<=0,F[U]<=0),z.every((function(t){return t}))){P=j,L=!1;break}I.set(j,z)}if(L)for(var V=function(t){var e=N.find((function(e){var n=I.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return P=e,"break"},$=O?3:1;$>0&&"break"!==V($);$--);n.placement!==P&&(n.modifiersData[u]._skip=!0,n.placement=P,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function _t(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function vt(t){return[e,r,o,s].some((function(e){return t[e]>=0}))}const yt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,o=e.rects.popper,r=e.modifiersData.preventOverflow,s=mt(e,{elementContext:"reference"}),a=mt(e,{altBoundary:!0}),c=_t(s,i),l=_t(a,o,r),u=vt(c),d=vt(l);e.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:l,isReferenceHidden:u,hasPopperEscaped:d},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}},bt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var n=t.state,i=t.options,o=t.name,a=i.offset,c=void 0===a?[0,0]:a,l=g.reduce((function(t,i){return t[i]=function(t,n,i){var o=x(t),a=[s,e].indexOf(o)>=0?-1:1,c="function"==typeof i?i(Object.assign({},n,{placement:t})):i,l=c[0],u=c[1];return l=l||0,u=(u||0)*a,[s,r].indexOf(o)>=0?{x:u,y:l}:{x:l,y:u}}(i,n.rects,c),t}),{}),u=l[n.placement],d=u.x,p=u.y;null!=n.modifiersData.popperOffsets&&(n.modifiersData.popperOffsets.x+=d,n.modifiersData.popperOffsets.y+=p),n.modifiersData[o]=l}},Et={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=ft({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},wt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,a=t.name,c=i.mainAxis,u=void 0===c||c,d=i.altAxis,p=void 0!==d&&d,h=i.boundary,f=i.rootBoundary,m=i.altBoundary,g=i.padding,_=i.tether,v=void 0===_||_,y=i.tetherOffset,b=void 0===y?0:y,E=mt(n,{boundary:h,rootBoundary:f,padding:g,altBoundary:m}),w=x(n.placement),O=Q(n.placement),D=!O,C=$(w),S="x"===C?"y":"x",T=n.modifiersData.popperOffsets,N=n.rects.reference,A=n.rects.popper,R="function"==typeof b?b(Object.assign({},n.rects,{placement:n.placement})):b,I="number"==typeof R?{mainAxis:R,altAxis:R}:Object.assign({mainAxis:0,altAxis:0},R),L=n.modifiersData.offset?n.modifiersData.offset[n.placement]:null,j={x:0,y:0};if(T){if(u){var H,M="y"===C?e:s,G="y"===C?o:r,F="y"===C?"height":"width",W=T[C],U=W+E[M],z=W-E[G],K=v?-A[F]/2:0,X=O===l?N[F]:A[F],Y=O===l?-A[F]:-N[F],J=n.elements.arrow,Z=v&&J?B(J):{width:0,height:0},tt=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[M],nt=tt[G],it=q(0,N[F],Z[F]),ot=D?N[F]/2-K-it-et-I.mainAxis:X-it-et-I.mainAxis,rt=D?-N[F]/2+K+it+nt+I.mainAxis:Y+it+nt+I.mainAxis,st=n.elements.arrow&&V(n.elements.arrow),at=st?"y"===C?st.clientTop||0:st.clientLeft||0:0,ct=null!=(H=null==L?void 0:L[C])?H:0,lt=W+rt-ct,ut=q(v?k(U,W+ot-ct-at):U,W,v?P(z,lt):z);T[C]=ut,j[C]=ut-W}if(p){var dt,pt="x"===C?e:s,ht="x"===C?o:r,ft=T[S],gt="y"===S?"height":"width",_t=ft+E[pt],vt=ft-E[ht],yt=-1!==[e,s].indexOf(w),bt=null!=(dt=null==L?void 0:L[S])?dt:0,Et=yt?_t:ft-N[gt]-A[gt]-bt+I.altAxis,wt=yt?ft+N[gt]+A[gt]-bt-I.altAxis:vt,Ot=v&&yt?function(t,e,n){var i=q(t,e,n);return i>n?n:i}(Et,ft,wt):q(v?Et:_t,ft,v?wt:vt);T[S]=Ot,j[S]=Ot-ft}n.modifiersData[a]=j}},requiresIfExists:["offset"]};function Ot(t,e,n){void 0===n&&(n=!1);var i,o,r=R(e),s=R(e)&&function(t){var e=t.getBoundingClientRect(),n=j(e.width)/t.offsetWidth||1,i=j(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),a=W(e),c=H(t,s),l={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(r||!r&&!n)&&(("body"!==T(e)||lt(a))&&(l=(i=e)!==N(i)&&R(i)?{scrollLeft:(o=i).scrollLeft,scrollTop:o.scrollTop}:at(i)),R(e)?((u=H(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):a&&(u.x=ct(a))),{x:c.left+l.scrollLeft-u.x,y:c.top+l.scrollTop-u.y,width:c.width,height:c.height}}function Dt(t){var e=new Map,n=new Set,i=[];function o(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&o(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||o(t)})),i}var Ct={placement:"bottom",modifiers:[],strategy:"absolute"};function St(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Tt(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,o=e.defaultOptions,r=void 0===o?Ct:o;return function(t,e,n){void 0===n&&(n=r);var o,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ct,r),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},c=[],l=!1,u={state:a,setOptions:function(n){var o="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},r,a.options,o),a.scrollParents={reference:A(t)?dt(t):t.contextElement?dt(t.contextElement):[],popper:dt(e)};var s,l,p=function(t){var e=Dt(t);return S.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),l=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(l).map((function(t){return l[t]}))));return a.orderedModifiers=p.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var r=o({state:a,name:e,instance:u,options:i});c.push(r||function(){})}})),u.update()},forceUpdate:function(){if(!l){var t=a.elements,e=t.reference,n=t.popper;if(St(e,n)){a.rects={reference:Ot(e,V(n),"fixed"===a.options.strategy),popper:B(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var o=a.orderedModifiers[i],r=o.fn,s=o.options,c=void 0===s?{}:s,d=o.name;"function"==typeof r&&(a=r({state:a,options:c,name:d,instance:u})||a)}else a.reset=!1,i=-1}}},update:(o=function(){return new Promise((function(t){u.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){d(),l=!0}};if(!St(t,e))return u;function d(){c.forEach((function(t){return t()})),c=[]}return u.setOptions(n).then((function(t){!l&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var Nt=Tt(),At=Tt({defaultModifiers:[nt,Et,tt,L,bt,gt,wt,Y,yt]}),Rt=Tt({defaultModifiers:[nt,Et,tt,L]});const It="transitionend",Lt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},xt=t=>{const e=Lt(t);return e&&document.querySelector(e)?e:null},Pt=t=>{const e=Lt(t);return e?document.querySelector(e):null},kt=t=>{t.dispatchEvent(new Event(It))},jt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ht=t=>jt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,Bt=(t,e,n)=>{Object.keys(n).forEach((i=>{const o=n[i],r=e[i],s=r&&jt(r)?"element":null==(a=r)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(o).test(s))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${o}".`)}))},Mt=t=>!(!jt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),Gt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Ft=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Ft(t.parentNode):null},Wt=()=>{},Ut=t=>{t.offsetHeight},zt=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Vt=[],$t=()=>"rtl"===document.documentElement.dir,qt=t=>{var e;e=()=>{const e=zt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Vt.length||document.addEventListener("DOMContentLoaded",(()=>{Vt.forEach((t=>t()))})),Vt.push(e)):e()},Kt=t=>{"function"==typeof t&&t()},Xt=(t,e,n=!0)=>{if(!n)return void Kt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),o=Number.parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let o=!1;const r=({target:n})=>{n===e&&(o=!0,e.removeEventListener(It,r),Kt(t))};e.addEventListener(It,r),setTimeout((()=>{o||kt(e)}),i)},Yt=(t,e,n,i)=>{let o=t.indexOf(e);if(-1===o)return t[!n&&i?t.length-1:0];const r=t.length;return o+=n?1:-1,i&&(o=(o+r)%r),t[Math.max(0,Math.min(o,r-1))]},Qt=/[^.]*(?=\..*)\.|.*/,Jt=/\..*/,Zt=/::\d+$/,te={};let ee=1;const ne={mouseenter:"mouseover",mouseleave:"mouseout"},ie=/^(mouseenter|mouseleave)/i,oe=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function re(t,e){return e&&`${e}::${ee++}`||t.uidEvent||ee++}function se(t){const e=re(t);return t.uidEvent=e,te[e]=te[e]||{},te[e]}function ae(t,e,n=null){const i=Object.keys(t);for(let o=0,r=i.length;o<r;o++){const r=t[i[o]];if(r.originalHandler===e&&r.delegationSelector===n)return r}return null}function ce(t,e,n){const i="string"==typeof e,o=i?n:e;let r=de(t);return oe.has(r)||(r=t),[i,o,r]}function le(t,e,n,i,o){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),ie.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[r,s,a]=ce(e,n,i),c=se(t),l=c[a]||(c[a]={}),u=ae(l,s,r?n:null);if(u)return void(u.oneOff=u.oneOff&&o);const d=re(s,e.replace(Qt,"")),p=r?function(t,e,n){return function i(o){const r=t.querySelectorAll(e);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(let a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&pe.off(t,o.type,e,n),n.apply(s,[o]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&pe.off(t,i.type,e),e.apply(t,[i])}}(t,n);p.delegationSelector=r?n:null,p.originalHandler=s,p.oneOff=o,p.uidEvent=d,l[d]=p,t.addEventListener(a,p,r)}function ue(t,e,n,i,o){const r=ae(e[n],i,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent])}function de(t){return t=t.replace(Jt,""),ne[t]||t}const pe={on(t,e,n,i){le(t,e,n,i,!1)},one(t,e,n,i){le(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[o,r,s]=ce(e,n,i),a=s!==e,c=se(t),l=e.startsWith(".");if(void 0!==r){if(!c||!c[s])return;return void ue(t,c,s,r,o?n:null)}l&&Object.keys(c).forEach((n=>{!function(t,e,n,i){const o=e[n]||{};Object.keys(o).forEach((r=>{if(r.includes(i)){const i=o[r];ue(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,c,n,e.slice(1))}));const u=c[s]||{};Object.keys(u).forEach((n=>{const i=n.replace(Zt,"");if(!a||e.includes(i)){const e=u[n];ue(t,c,s,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=zt(),o=de(e),r=e!==o,s=oe.has(o);let a,c=!0,l=!0,u=!1,d=null;return r&&i&&(a=i.Event(e,n),i(t).trigger(a),c=!a.isPropagationStopped(),l=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(d=document.createEvent("HTMLEvents"),d.initEvent(o,c,!0)):d=new CustomEvent(e,{bubbles:c,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(d,t,{get:()=>n[t]})})),u&&d.preventDefault(),l&&t.dispatchEvent(d),d.defaultPrevented&&void 0!==a&&a.preventDefault(),d}},he=new Map,fe={set(t,e,n){he.has(t)||he.set(t,new Map);const i=he.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>he.has(t)&&he.get(t).get(e)||null,remove(t,e){if(!he.has(t))return;const n=he.get(t);n.delete(e),0===n.size&&he.delete(t)}};class me{constructor(t){(t=Ht(t))&&(this._element=t,fe.set(this._element,this.constructor.DATA_KEY,this))}dispose(){fe.remove(this._element,this.constructor.DATA_KEY),pe.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Xt(t,e,n)}static getInstance(t){return fe.get(Ht(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const ge=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;pe.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Gt(this))return;const o=Pt(this)||this.closest(`.${i}`);t.getOrCreateInstance(o)[e]()}))};class _e extends me{static get NAME(){return"alert"}close(){if(pe.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),pe.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=_e.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}ge(_e,"close"),qt(_e);const ve='[data-bs-toggle="button"]';class ye extends me{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=ye.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function be(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function Ee(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}pe.on(document,"click.bs.button.data-api",ve,(t=>{t.preventDefault();const e=t.target.closest(ve);ye.getOrCreateInstance(e).toggle()})),qt(ye);const we={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${Ee(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${Ee(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=be(t.dataset[n])})),e},getDataAttribute:(t,e)=>be(t.getAttribute(`data-bs-${Ee(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},Oe={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!Gt(t)&&Mt(t)))}},De="carousel",Ce={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Se={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Te="next",Ne="prev",Ae="left",Re="right",Ie={ArrowLeft:Re,ArrowRight:Ae},Le="slid.bs.carousel",xe="active",Pe=".active.carousel-item";class ke extends me{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=Oe.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Ce}static get NAME(){return De}next(){this._slide(Te)}nextWhenVisible(){!document.hidden&&Mt(this._element)&&this.next()}prev(){this._slide(Ne)}pause(t){t||(this._isPaused=!0),Oe.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(kt(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=Oe.findOne(Pe,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void pe.one(this._element,Le,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Te:Ne;this._slide(n,this._items[t])}_getConfig(t){return t={...Ce,...we.getDataAttributes(this._element),..."object"==typeof t?t:{}},Bt(De,t,Se),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?Re:Ae)}_addEventListeners(){this._config.keyboard&&pe.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(pe.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),pe.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},n=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},i=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};Oe.find(".carousel-item img",this._element).forEach((t=>{pe.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(pe.on(this._element,"pointerdown.bs.carousel",(t=>e(t))),pe.on(this._element,"pointerup.bs.carousel",(t=>i(t))),this._element.classList.add("pointer-event")):(pe.on(this._element,"touchstart.bs.carousel",(t=>e(t))),pe.on(this._element,"touchmove.bs.carousel",(t=>n(t))),pe.on(this._element,"touchend.bs.carousel",(t=>i(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Ie[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?Oe.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Te;return Yt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(Oe.findOne(Pe,this._element));return pe.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=Oe.findOne(".active",this._indicatorsElement);e.classList.remove(xe),e.removeAttribute("aria-current");const n=Oe.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(xe),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||Oe.findOne(Pe,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=Oe.findOne(Pe,this._element),o=this._getItemIndex(i),r=e||this._getItemByOrder(n,i),s=this._getItemIndex(r),a=Boolean(this._interval),c=n===Te,l=c?"carousel-item-start":"carousel-item-end",u=c?"carousel-item-next":"carousel-item-prev",d=this._orderToDirection(n);if(r&&r.classList.contains(xe))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(r,d).defaultPrevented)return;if(!i||!r)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const p=()=>{pe.trigger(this._element,Le,{relatedTarget:r,direction:d,from:o,to:s})};if(this._element.classList.contains("slide")){r.classList.add(u),Ut(r),i.classList.add(l),r.classList.add(l);const t=()=>{r.classList.remove(l,u),r.classList.add(xe),i.classList.remove(xe,u,l),this._isSliding=!1,setTimeout(p,0)};this._queueCallback(t,i,!0)}else i.classList.remove(xe),r.classList.add(xe),this._isSliding=!1,p();a&&this.cycle()}_directionToOrder(t){return[Re,Ae].includes(t)?$t()?t===Ae?Ne:Te:t===Ae?Te:Ne:t}_orderToDirection(t){return[Te,Ne].includes(t)?$t()?t===Ne?Ae:Re:t===Ne?Re:Ae:t}static carouselInterface(t,e){const n=ke.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const o="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){ke.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=Pt(this);if(!e||!e.classList.contains("carousel"))return;const n={...we.getDataAttributes(e),...we.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),ke.carouselInterface(e,n),i&&ke.getInstance(e).to(i),t.preventDefault()}}pe.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",ke.dataApiClickHandler),pe.on(window,"load.bs.carousel.data-api",(()=>{const t=Oe.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)ke.carouselInterface(t[e],ke.getInstance(t[e]))})),qt(ke);const je="collapse",He={toggle:!0,parent:null},Be={toggle:"boolean",parent:"(null|element)"},Me="show",Ge="collapse",Fe="collapsing",We="collapsed",Ue=":scope .collapse .collapse",ze='[data-bs-toggle="collapse"]';class Ve extends me{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=Oe.find(ze);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=xt(e),o=Oe.find(i).filter((t=>t===this._element));null!==i&&o.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return He}static get NAME(){return je}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=Oe.find(Ue,this._config.parent);e=Oe.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((e=>!t.includes(e)))}const n=Oe.findOne(this._selector);if(e.length){const i=e.find((t=>n!==t));if(t=i?Ve.getInstance(i):null,t&&t._isTransitioning)return}if(pe.trigger(this._element,"show.bs.collapse").defaultPrevented)return;e.forEach((e=>{n!==e&&Ve.getOrCreateInstance(e,{toggle:!1}).hide(),t||fe.set(e,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Ge),this._element.classList.add(Fe),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Ge,Me),this._element.style[i]="",pe.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(pe.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Ut(this._element),this._element.classList.add(Fe),this._element.classList.remove(Ge,Me);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=Pt(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Ge),pe.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Me)}_getConfig(t){return(t={...He,...we.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=Ht(t.parent),Bt(je,t,Be),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=Oe.find(Ue,this._config.parent);Oe.find(ze,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=Pt(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(We):t.classList.add(We),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=Ve.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}pe.on(document,"click.bs.collapse.data-api",ze,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=xt(this);Oe.find(e).forEach((t=>{Ve.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),qt(Ve);const $e="dropdown",qe="Escape",Ke="Space",Xe="ArrowUp",Ye="ArrowDown",Qe=new RegExp("ArrowUp|ArrowDown|Escape"),Je="click.bs.dropdown.data-api",Ze="keydown.bs.dropdown.data-api",tn="show",en='[data-bs-toggle="dropdown"]',nn=".dropdown-menu",on=$t()?"top-end":"top-start",rn=$t()?"top-start":"top-end",sn=$t()?"bottom-end":"bottom-start",an=$t()?"bottom-start":"bottom-end",cn=$t()?"left-start":"right-start",ln=$t()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},dn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends me{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return un}static get DefaultType(){return dn}static get NAME(){return $e}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Gt(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(pe.trigger(this._element,"show.bs.dropdown",t).defaultPrevented)return;const e=pn.getParentFromElement(this._element);this._inNavbar?we.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>pe.on(t,"mouseover",Wt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(tn),this._element.classList.add(tn),pe.trigger(this._element,"shown.bs.dropdown",t)}hide(){if(Gt(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){pe.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>pe.off(t,"mouseover",Wt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(tn),this._element.classList.remove(tn),this._element.setAttribute("aria-expanded","false"),we.removeDataAttribute(this._menu,"popper"),pe.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...we.getDataAttributes(this._element),...t},Bt($e,t,this.constructor.DefaultType),"object"==typeof t.reference&&!jt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${$e.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(e){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let n=this._element;"parent"===this._config.reference?n=e:jt(this._config.reference)?n=Ht(this._config.reference):"object"==typeof this._config.reference&&(n=this._config.reference);const i=this._getPopperConfig(),o=i.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=At(n,this._menu,i),o&&we.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(tn)}_getMenuElement(){return Oe.next(this._element,nn)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return cn;if(t.classList.contains("dropstart"))return ln;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?rn:on:e?an:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=Oe.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Mt);n.length&&Yt(n,e,t===Ye,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=pn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=Oe.find(en);for(let n=0,i=e.length;n<i;n++){const i=pn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const o={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(o.clickEvent=t)}i._completeHide(o)}}static getParentFromElement(t){return Pt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Ke||t.key!==qe&&(t.key!==Ye&&t.key!==Xe||t.target.closest(nn)):!Qe.test(t.key))return;const e=this.classList.contains(tn);if(!e&&t.key===qe)return;if(t.preventDefault(),t.stopPropagation(),Gt(this))return;const n=this.matches(en)?this:Oe.prev(this,en)[0],i=pn.getOrCreateInstance(n);if(t.key!==qe)return t.key===Xe||t.key===Ye?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==Ke||pn.clearMenus());i.hide()}}pe.on(document,Ze,en,pn.dataApiKeydownHandler),pe.on(document,Ze,nn,pn.dataApiKeydownHandler),pe.on(document,Je,pn.clearMenus),pe.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),pe.on(document,Je,en,(function(t){t.preventDefault(),pn.getOrCreateInstance(this).toggle()})),qt(pn);const hn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",fn=".sticky-top";class mn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(hn,"paddingRight",(e=>e+t)),this._setElementAttributes(fn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const o=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(o))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(hn,"paddingRight"),this._resetElementAttributes(fn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&we.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=we.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(we.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){jt(t)?e(t):Oe.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const gn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},_n={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},vn="show",yn="mousedown.bs.backdrop";class bn{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Ut(this._getElement()),this._getElement().classList.add(vn),this._emulateAnimation((()=>{Kt(t)}))):Kt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(vn),this._emulateAnimation((()=>{this.dispose(),Kt(t)}))):Kt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...gn,..."object"==typeof t?t:{}}).rootElement=Ht(t.rootElement),Bt("backdrop",t,_n),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),pe.on(this._getElement(),yn,(()=>{Kt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(pe.off(this._element,yn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Xt(t,this._getElement(),this._config.isAnimated)}}const En={trapElement:null,autofocus:!0},wn={trapElement:"element",autofocus:"boolean"},On=".bs.focustrap",Dn="backward";class Cn{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),pe.off(document,On),pe.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),pe.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,pe.off(document,On))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=Oe.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===Dn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Dn:"forward")}_getConfig(t){return t={...En,..."object"==typeof t?t:{}},Bt("focustrap",t,wn),t}}const Sn="modal",Tn="Escape",Nn={backdrop:!0,keyboard:!0,focus:!0},An={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Rn="hidden.bs.modal",In="show.bs.modal",Ln="resize.bs.modal",xn="click.dismiss.bs.modal",Pn="keydown.dismiss.bs.modal",kn="mousedown.dismiss.bs.modal",jn="modal-open",Hn="show",Bn="modal-static";class Mn extends me{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=Oe.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new mn}static get Default(){return Nn}static get NAME(){return Sn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||pe.trigger(this._element,In,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(jn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),pe.on(this._dialog,kn,(()=>{pe.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(pe.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Hn),pe.off(this._element,xn),pe.off(this._dialog,kn),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>pe.off(t,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new bn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_getConfig(t){return t={...Nn,...we.getDataAttributes(this._element),..."object"==typeof t?t:{}},Bt(Sn,t,An),t}_showElement(t){const e=this._isAnimated(),n=Oe.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Ut(this._element),this._element.classList.add(Hn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,pe.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_setEscapeEvent(){this._isShown?pe.on(this._element,Pn,(t=>{this._config.keyboard&&t.key===Tn?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Tn||this._triggerBackdropTransition()})):pe.off(this._element,Pn)}_setResizeEvent(){this._isShown?pe.on(window,Ln,(()=>this._adjustDialog())):pe.off(window,Ln)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(jn),this._resetAdjustments(),this._scrollBar.reset(),pe.trigger(this._element,Rn)}))}_showBackdrop(t){pe.on(this._element,xn,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(pe.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(Bn)||(i||(n.overflowY="hidden"),t.add(Bn),this._queueCallback((()=>{t.remove(Bn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!$t()||n&&!t&&$t())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!$t()||!n&&t&&$t())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Mn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}pe.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=Pt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),pe.one(e,In,(t=>{t.defaultPrevented||pe.one(e,Rn,(()=>{Mt(this)&&this.focus()}))}));const n=Oe.findOne(".modal.show");n&&Mn.getInstance(n).hide(),Mn.getOrCreateInstance(e).toggle(this)})),ge(Mn),qt(Mn);const Gn="offcanvas",Fn={backdrop:!0,keyboard:!0,scroll:!1},Wn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Un="show",zn=".offcanvas.show",Vn="hidden.bs.offcanvas";class $n extends me{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Gn}static get Default(){return Fn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||pe.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new mn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Un),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),pe.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(pe.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Un),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new mn).reset(),pe.trigger(this._element,Vn)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...Fn,...we.getDataAttributes(this._element),..."object"==typeof t?t:{}},Bt(Gn,t,Wn),t}_initializeBackDrop(){return new bn({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_addEventListeners(){pe.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=$n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}pe.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=Pt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Gt(this))return;pe.one(e,Vn,(()=>{Mt(this)&&this.focus()}));const n=Oe.findOne(zn);n&&n!==e&&$n.getInstance(n).hide(),$n.getOrCreateInstance(e).toggle(this)})),pe.on(window,"load.bs.offcanvas.data-api",(()=>Oe.find(zn).forEach((t=>$n.getOrCreateInstance(t).show())))),ge($n),qt($n);const qn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!qn.has(n)||Boolean(Kn.test(t.nodeValue)||Xn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Qn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){n.remove();continue}const r=[].concat(...n.attributes),s=[].concat(e["*"]||[],e[i]||[]);r.forEach((t=>{Yn(t,s)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Jn="tooltip",Zn=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ei={AUTO:"auto",TOP:"top",RIGHT:$t()?"left":"right",BOTTOM:"bottom",LEFT:$t()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ri="show",si="show",ai="out",ci=".tooltip-inner",li=".modal",ui="hide.bs.modal",di="hover",pi="focus";class hi extends me{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(n),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Jn}static get Event(){return ii}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(ri))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),pe.off(this._element.closest(li),ui,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=pe.trigger(this._element,this.constructor.Event.SHOW),e=Ft(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(ci).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),o=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME);i.setAttribute("id",o),this._element.setAttribute("aria-describedby",o),this._config.animation&&i.classList.add(oi);const r="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,s=this._getAttachment(r);this._addAttachmentClass(s);const{container:a}=this._config;fe.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(i),pe.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=At(this._element,i,this._getPopperConfig(s)),i.classList.add(ri);const c=this._resolvePossibleFunction(this._config.customClass);c&&i.classList.add(...c.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{pe.on(t,"mouseover",Wt)}));const l=this.tip.classList.contains(oi);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,pe.trigger(this._element,this.constructor.Event.SHOWN),t===ai&&this._leave(null,this)}),this.tip,l)}hide(){if(!this._popper)return;const t=this.getTipElement();if(pe.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(ri),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>pe.off(t,"mouseover",Wt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),pe.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(oi,ri),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),ci)}_sanitizeAndSetContent(t,e,n){const i=Oe.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return jt(e)?(e=Ht(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Qn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return ei[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)pe.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===di?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===di?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;pe.on(this._element,e,this._config.selector,(t=>this._enter(t))),pe.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},pe.on(this._element.closest(li),ui,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?pi:di]=!0),e.getTipElement().classList.contains(ri)||e._hoverState===si?e._hoverState=si:(clearTimeout(e._timeout),e._hoverState=si,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===si&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?pi:di]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ai,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===ai&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=we.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Zn.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:Ht(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),Bt(Jn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Qn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}qt(hi);const fi={...hi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},mi={...hi.DefaultType,content:"(string|element|function)"},gi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class _i extends hi{static get Default(){return fi}static get NAME(){return"popover"}static get Event(){return gi}static get DefaultType(){return mi}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(t){return this.each((function(){const e=_i.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}qt(_i);const vi="scrollspy",yi={offset:10,method:"auto",target:""},bi={offset:"number",method:"string",target:"(string|element)"},Ei="active",wi=".nav-link, .list-group-item, .dropdown-item",Oi="position";class Di extends me{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,pe.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return yi}static get NAME(){return vi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":Oi,e="auto"===this._config.method?t:this._config.method,n=e===Oi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Oe.find(wi,this._config.target).map((t=>{const i=xt(t),o=i?Oe.findOne(i):null;if(o){const t=o.getBoundingClientRect();if(t.width||t.height)return[we[e](o).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){pe.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){return(t={...yi,...we.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=Ht(t.target)||document.documentElement,Bt(vi,t,bi),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=wi.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=Oe.findOne(e.join(","),this._config.target);n.classList.add(Ei),n.classList.contains("dropdown-item")?Oe.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(Ei):Oe.parents(n,".nav, .list-group").forEach((t=>{Oe.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(Ei))),Oe.prev(t,".nav-item").forEach((t=>{Oe.children(t,".nav-link").forEach((t=>t.classList.add(Ei)))}))})),pe.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){Oe.find(wi,this._config.target).filter((t=>t.classList.contains(Ei))).forEach((t=>t.classList.remove(Ei)))}static jQueryInterface(t){return this.each((function(){const e=Di.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}pe.on(window,"load.bs.scrollspy.data-api",(()=>{Oe.find('[data-bs-spy="scroll"]').forEach((t=>new Di(t)))})),qt(Di);const Ci="active",Si="fade",Ti="show",Ni=".active",Ai=":scope > li > .active";class Ri extends me{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ci))return;let t;const e=Pt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Ai:Ni;t=Oe.find(e,n),t=t[t.length-1]}const i=t?pe.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(pe.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const o=()=>{pe.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),pe.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,o):o()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?Oe.children(e,Ni):Oe.find(Ai,e))[0],o=n&&i&&i.classList.contains(Si),r=()=>this._transitionComplete(t,i,n);i&&o?(i.classList.remove(Ti),this._queueCallback(r,t,!0)):r()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ci);const t=Oe.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ci),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ci),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Ut(t),t.classList.contains(Si)&&t.classList.add(Ti);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&Oe.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ci))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=Ri.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}pe.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Gt(this)||Ri.getOrCreateInstance(this).show()})),qt(Ri);const Ii="toast",Li="hide",xi="show",Pi="showing",ki={animation:"boolean",autohide:"boolean",delay:"number"},ji={animation:!0,autohide:!0,delay:5e3};class Hi extends me{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return ki}static get Default(){return ji}static get NAME(){return Ii}show(){pe.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(Li),Ut(this._element),this._element.classList.add(xi),this._element.classList.add(Pi),this._queueCallback((()=>{this._element.classList.remove(Pi),pe.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(xi)&&(pe.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Pi),this._queueCallback((()=>{this._element.classList.add(Li),this._element.classList.remove(Pi),this._element.classList.remove(xi),pe.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(xi)&&this._element.classList.remove(xi),super.dispose()}_getConfig(t){return t={...ji,...we.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},Bt(Ii,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){pe.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),pe.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),pe.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),pe.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}ge(Hi),qt(Hi);var Bi,Mi=function(){return Mi=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},Mi.apply(this,arguments)},Gi=new(function(){function t(){}return t.prototype.get=function(t){var e=document.cookie.match("(?:(?:^|.*; *)".concat(t," *= *([^;]*).*$)|^.*$"))[1];if(e)return decodeURIComponent(e)},t.prototype.set=function(t,e,n){void 0===n&&(n={}),n.days&&(n["max-age"]=60*n.days*60*24,delete n.days),n=Object.entries(n).reduce((function(t,e){var n=e[0],i=e[1];return"".concat(t,"; ").concat(n,"=").concat(i)}),""),document.cookie=t+"="+encodeURIComponent(e)+n},t.prototype.delete=function(t,e){this.set(t,"",Mi({"max-age":-1},e))},t.prototype.getJSON=function(t){var e=this.get(t);return e?JSON.parse(e):""},t.prototype.setJSON=function(t,e,n){this.set(t,JSON.stringify(e),n)},t}()),Fi=function(){function t(){}return t.COL_SORTING="COL_SORTING",t.COL_RESIZED="COL_RESIZED",t.COL_SHOW_HIDE="COL_SHOW_HIDE",t.COL_REORDER="COL_REORDER",t}(),Wi=function(){function t(){}return t.GRID_DATA="GRID_DATA",t.ON_NEXT_RECORD="ON_NEXT_RECORD",t.ON_PREV_RECORD="ON_PREV_RECORD",t.ON_SAVE_RECORD="ON_SAVE_RECORD",t.ON_DELETE_RECORD="ON_DELETE_RECORD",t.ON_LAST_RECORD="ON_LAST_RECORD",t.ON_FIRST_RECORD="ON_FIRST_RECORD",t.ON_ADD_RECORD="ON_ADD_RECORD",t.ON_FETCH_RECORD="ON_FETCH_RECORD",t.ON_FETCH_RECORD_ERROR="ON_FETCH_RECORD_ERROR",t.ON_FETCH_GRID_RECORD="ON_FETCH_GRID_RECORD",t.ON_FETCH_GRID_RECORD_ERROR="ON_FETCH_GRID_RECORD_ERROR",t.ON_NAVIGATING_RECORD="ON_NAVIGATING_RECORD",t.ON_GRID_UPDATED="ON_GRID_UPDATED",t.ON_SAVE_ERROR="ON_SAVE_ERROR",t.ON_SORTING_REQUESTED="ON_SORTING_REQUESTED",t.ON_COLS_REORDERED="ON_COLS_REORDERED",t.ON_GRID_DATA_BOUND="ON_GRID_DATA_BOUND",t.ON_GRID_CONFIG_UPDATED="ON_GRID_CONFIG_UPDATED",t.ON_PAGE_READY="ON_PAGE_READY",t.ON_ROW_UPDATED="ON_ROW_UPDATED",t.ON_FIELD_UPDATED="ON_FIELD_UPDATED",t.ON_ROW_DOUBLE_CLICKED="ON_ROW_DOUBLE_CLICKED",t}(),Ui=new(function(){function t(){this.callbacks=[],this.registerWinPopState()}return t.prototype.registerWinPopState=function(){var t=this;window.onpopstate=function(e){if(e.state&&e.state.eventData){console.log(e.state);var n={EventData:e.state.eventData,SkipPush:!0,DataSourceName:""};t.Emit(Wi.ON_FETCH_RECORD,window,n)}}},t.prototype.Emit=function(t,e,n){if(t)try{this.callbacks.forEach((function(i){i.EventName!==t||i.DataSourceName!==n.DataSourceName&&!0===i.VerifyDataSourceName||i.Callback(e,n)}))}catch(t){console.error(t)}},t.prototype.Unsubscribe=function(t){var e=this.callbacks.filter((function(e){return 0==(e.Key===t.Key&&e.EventName===t.EventName&&e.DataSourceName===t.DataSourceName)}));this.callbacks=e},t.prototype.Subscribe=function(t){t.EventName&&this.callbacks.push(t)},t}()),zi=function(){function t(){console.log("Session storage is initialized")}return t.prototype.addItem=function(t,e,n){var i={value:e,type:"prem",expiry:n.getTime()};"object"==typeof e&&void 0!==e&&(i.type="object"),sessionStorage.setItem(t,JSON.stringify(i))},t.prototype.appendItem=function(t,e){try{var n=this.getItemRaw(t);if(n){var i=e(n.value);this.addItem(t,i,new Date(n.expiry))}}catch(t){console.error(t)}},t.prototype.createExpiryKey=function(t){return t+"-expiry"},t.prototype.getItemRaw=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?(this.removeItem(t),void console.log("entry expired, will be removed",n)):n}return null},t.prototype.getItem=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?void this.removeItem(t):n.value}return null},t.prototype.removeItem=function(t){sessionStorage.removeItem(t)},t.prototype.removeAll=function(t){if(t){var e=sessionStorage.length;if(!(e<=0)){for(var n=[],i=0;i<e;i++)(o=sessionStorage.key(i)).startsWith(t)&&n.push(o);for(i=0;i<n.length;i++){var o=n[i];sessionStorage.removeItem(o)}}}else sessionStorage.removeAll()},t}(),Vi=new(function(){function t(){this.DataTables=[]}return t.prototype.Add=function(t){this.DataTables.push(t)},t.prototype.GetAll=function(){var t=[];return this.DataTables.forEach((function(e){if(!e.isReadOnly){var n={DataSourceName:e.dataSourceName,Data:e.dirtyRecords};t.push(n)}})),t},t.prototype.GetByDSName=function(t){var e=this.DataTables.find((function(e){return e.dataSourceName===t}));if(e)return{DataSourceName:e.dataSourceName,Data:e.dirtyRecords}},t}()),$i=function(){function t(){this.children=[],this.appDataEvents=Wi,this.appActions=Fi}return t.prototype.notifyListeners=function(t,e){Ui.Emit(t,this,e)},t.prototype.addEventHandler=function(t,e){this.element.addEventListener(t,e)},t.prototype.getGridSettings=function(t){try{return Gi.getJSON(t)}catch(t){return void console.log(t)}},Object.defineProperty(t.prototype,"dataSourceName",{get:function(){return this._dataSourceName},set:function(t){this._dataSourceName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReadOnly",{get:function(){return this._isReadOnly},set:function(t){this._isReadOnly=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dirtyRecords",{get:function(){return[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.element.style.width},set:function(t){this.element.style.width=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){return!1===this.element.hidden},set:function(t){this.element.hidden=!1===t},enumerable:!1,configurable:!0}),t.prototype.getCss=function(t){return this.element.style[t]},t.prototype.setCss=function(t,e){this.element.style[t]=e},Object.defineProperty(t.prototype,"css",{set:function(t){var e=this;"object"==typeof t&&null!==t&&!1===this.isEmptyObj(t)&&Object.keys(t).forEach((function(n){e.element.style[n]=t[n]}))},enumerable:!1,configurable:!0}),t.prototype.props=function(t){var e=this;t.forEach((function(t){return e.prop(t.key,t.value)}))},t.prototype.prop=function(t,e){return this.element.setAttribute(t,e),this.element},t.prototype.getProp=function(t){return this.element.getAttribute(t)},t.prototype.findElements=function(t){return this.element.querySelectorAll(t)},t.prototype.findById=function(t){return document.getElementById(t)},t.prototype.removeElement=function(t){t.parentElement.removeChild(t)},t.prototype.addClass=function(t){var e,n=t.split(" ");return(e=this.element.classList).add.apply(e,n),this},t.prototype.removeClass=function(t){return this.element.classList.remove(t),this},t.prototype.hasClass=function(t){return this.element.classList.contains(t)},t.prototype.setText=function(t){return this.element.innerText=t,this},t.prototype.getText=function(){return this.element.innerText},t.prototype.append=function(t,e){return void 0===e&&(e=!0),e&&this.children.push(t),this.element.appendChild(t.element),this},t.prototype.focus=function(){this.element.focus()},t.prototype.isEmptyObj=function(t){return 0===Object.keys(t).length},Object.defineProperty(t.prototype,"id",{get:function(){return this.getProp("id")},set:function(t){this.prop("id",t)},enumerable:!1,configurable:!0}),t.prototype.clone=function(){var e=new t,n=this.element.cloneNode();if(n instanceof HTMLElement&&(e.element=n),this.children.length>0){var i=this.children.map((function(t){var n=t.clone();return e.element.append(n.element),n}));e.children=i}return e},t.prototype.shClone=function(t){return t?Object.assign(Object.create(Object.getPrototypeOf(t)),t):t},t.prototype.childrenNodes=function(){return this.element.children},t.prototype.appendChild=function(t){this.element.appendChild(t)},t.prototype.wrap=function(t,e){var n=t.cloneNode();if(e instanceof Element){var i=e.parentElement;n.appendChild(e),i.appendChild(n)}else{if(e.length<=0)return;i=e[0].parentElement;for(var o=0;o<e.length;o++){var r=e[o];n.appendChild(r)}i.appendChild(n)}},t.prototype.addDragHandlers=function(t,e){e&&!this.isEmptyObj(e)&&(e.dragStart&&t.addEventListener("dragstart",e.dragStart),e.dragLeave&&t.addEventListener("dragleave",e.dragLeave),e.dragEnter&&t.addEventListener("dragenter",e.dragEnter),e.dragOver&&t.addEventListener("dragover",e.dragOver),e.dragEnd&&t.addEventListener("dragend",e.dragEnd),e.drop&&t.addEventListener("drop",e.drop))},t.prototype.matches=function(t,e){return!(!t||1!==t.nodeType)&&(!e||t.matches(e))},t.prototype.siblings=function(t){var e=this,n=[];return this.element.parentNode?(this.element.parentNode.childNodes.forEach((function(i){i!==e.element&&e.matches(i,t)&&n.push(i)})),n):n},t}(),qi=(n(661),function(t,e,n){void 0===n&&(n=!1),this.text=t,this.value=e,this.isSelected=n}),Ki=function(t,e,n,i,o,r,s,a,c,l){this.Name=t,this.DataType=e,this.Width=n,this.PropName=i,this.IsKey=o,this.DataSource=r,this.ColSpan=s,this.RowSpan=a,this.SelectorDataCB=c,this.SelectorCols=l},Xi=function(t,e,n,i,o){void 0===i&&(i=function(t){}),void 0===o&&(o=void 0),this.name=t,this.data=e,this.isRemote=n,this.url=i,this.getPageOfflineCB=o},Yi=function(t,e,n,i,o){void 0===o&&(o=!1),this.gridId=t,this.containerId=e,this.colDefinition=n,this.dataSource=i,this.isReadonly=o,this.enableInfiniteScroll=!0,this.cacheResponses=!1},Qi=function(t,e,n){void 0===t&&(t=1),void 0===e&&(e=10),void 0===n&&(n=10),this.pageIndex=t,this.pageSize=!e||e<=0?10:e,this.totalRecords=n,this.totalPages=Math.ceil(this.totalRecords/this.pageSize)},Ji=function(t,e,n){void 0===n&&(n=function(t){}),this.dsName=t,this.pagingMetaData=e,this.nextPageCallback=n},Zi=function(t,e,n,i){void 0===n&&(n=void 0),void 0===i&&(i=void 0),this.url=t,this.method=e,this.headers=n,this.recordId=i},to=(Bi=function(t,e){return Bi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},Bi(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}Bi(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),eo=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n}return to(e,t),e.prototype.render=function(){"select"===this.options.InputType?this.element=document.createElement("select"):"button"===this.options.InputType?(this.element=document.createElement("button"),this.element.classList.add("btn","btn-outline-primary")):(this.element=document.createElement("input"),this.element.type=this.options.InputType)},Object.defineProperty(e.prototype,"val",{get:function(){if(this.element)return this.element instanceof HTMLInputElement?"checkbox"===this.options.InputType?this.element.checked:"number"===this.options.InputType?this.element.valueAsNumber:this.element.value:this.element.value},set:function(t){this.element&&("checkbox"===this.options.InputType?this.element.checked=t:this.element.value=t,"select"===this.options.InputType&&this.change())},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valExt",{set:function(t){this.val=t,this.change()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modelName",{get:function(){return this.getProp("data-propname")},set:function(t){this.prop("data-propname",t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readonly",{get:function(){return this.element instanceof HTMLInputElement&&this.element.readOnly},set:function(t){this.element instanceof HTMLInputElement&&(this.element.readOnly=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this.element instanceof HTMLInputElement||this.element instanceof HTMLSelectElement?this.element.disabled:"true"===this.getProp("disabled")},set:function(t){if(this.element instanceof HTMLInputElement||this.element instanceof HTMLSelectElement)this.element.disabled=t;else{var e=!0===t?"true":"false";this.prop("disabled",e)}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isKey",{get:function(){return"true"===this.getProp("data-keycolumn")},set:function(t){this.prop("data-keycolumn",t)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return t.prototype.clone.call(this)},e.prototype.addDoubleClickEvent=function(){var t=this;this.element.addEventListener("dblclick",(function(e){t.notifyListeners(t.appDataEvents.ON_ROW_DOUBLE_CLICKED,{EventData:{Event:e},DataSourceName:t.options.DataSourceName})}))},e.prototype.change=function(){this.element.dispatchEvent(new Event("change"))},e}($i),no=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),io=function(t){function e(e){var n=this,i={DataSourceName:e,InputType:"checkbox"};return(n=t.call(this,i)||this).render(),n}return no(e,t),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},e}(eo),oo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ro=function(t){function e(e,n){void 0===n&&(n=!1);var i=t.call(this)||this;return i.options=e||new Ki,i.isHeader=n,i.render(),i}return oo(e,t),e.prototype.render=function(){var t=this.options?this.options.RowSpan:void 0,e=this.options?this.options.ColSpan:void 0;this.element=!0===this.isHeader?document.createElement("th"):document.createElement("td"),this.isHeader&&this.element.classList.add("sorting","ds-col"),t&&this.prop("rowSpan",t),e&&this.prop("colSpan",e)},e.prototype.getCellText=function(){var t=this.children[0];if(!t)return"";if(t.element instanceof HTMLInputElement){if(t instanceof io)return t.element.checked+"";if(t instanceof eo)return t.val}return t.getText()},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options),this.isHeader);return i.children=n.children,i.element=n.element,i},e}($i),so=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ao=function(t){function e(e,n){var i=t.call(this)||this;return i.appDataEvents=Wi,i.sessionStorage=e,i.dataSourceName=n,i.cacheResponses=!1,i}return so(e,t),e.prototype.get=function(t){var e=this,n=e.cacheResponses;if(!0===n){var i=JSON.stringify(t),o=this.sessionStorage.getItem(i);if(o)return void e.notifyResponse(o)}var r={method:"GET",headers:t.headers?t.headers:{}};fetch(t.url,r).then((function(t){return t.json()})).then((function(t){!0===n&&e.sessionStorage.addItem(i,t,new Date(Date.now()+6e5)),e.notifyResponse(t)})).catch((function(n){e.nofifyError(n,t)}))},e.prototype.notifyResponse=function(t){try{var e={DataSourceName:this.dataSourceName,EventData:{Data:t.items,MetaData:new Qi(t.metaData.pageIndex,t.metaData.pageSize,t.metaData.totalRecords)}}}catch(t){return void console.log("invalid response. Make sure response have fields: items{array[object]}, metaData {pageIndex, pageSize, totalRecords}")}this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,e)},e.prototype.nofifyError=function(t,e){var n={DataSourceName:this.dataSourceName,EventData:{Event:t,RecordId:e.recordId}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD_ERROR,n)},e}($i),co=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),lo=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.listId="pg_list_".concat(n.options.dsName),n.containerId="pg_container_".concat(n.options.dsName),n}return co(e,t),e.prototype.render=function(){var t=this;this.element&&this.element.remove(),this.element=document.createElement("div"),this.element.id=this.containerId,this.addClass("bs-pagination");var e=document.createElement("nav");e.setAttribute("aria-labale","Page navigation"),this.element.appendChild(e);var n=document.createElement("ul");n.id=this.listId,n.classList.add("pagination","justify-content-end");for(var i=1;i<=this.options.pagingMetaData.totalPages&&i<=5;i++){var o=document.createElement("li");o.classList.add("page-item");var r=document.createElement("a");r.classList.add("page-link"),r.href="#",r.classList.add("data-p-index"),r.innerText="".concat(i),o.appendChild(r),n.appendChild(o),r.addEventListener("click",(function(e){if(e.preventDefault(),e.target instanceof HTMLElement){var n=e.target.getAttribute("data-p-index");t.options.nextPageCallback&&t.options.nextPageCallback(parseInt(n))}}))}e.appendChild(n)},e.prototype.clear=function(){this.element.querySelector("#"+this.listId).replaceChildren()},e}($i),uo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),po=function(t){function e(e){var n=t.call(this)||this;return n.gridElement=e.gridElement,n.httpClient=e.httpClient,n.s_area=null,n.observer=null,n.target=null,n.currentPage=1,n.initData=null,n.initMetaData=null,n.nextPageCallback=null,n}return uo(e,t),e.prototype.observerCB=function(t,e){!0===t[0].isIntersecting&&this.currentPage<this.initMetaData.totalPages&&(console.log("Infinite scroll: fetching next page#: ",this.currentPage+1),this.currentPage++,this.nextPageCallback(this.currentPage))},e.prototype.observe=function(t){this.target=t,this.observer.observe(t)},e.prototype.unobserve=function(){this.observer.unobserve(this.target)},e.prototype.enable=function(){var t=this;this.s_area="scroll_area_"+this.gridElement.id;var e=document.createElement("div");e.id=this.s_area,e.classList.add("row","bs-scroll"),this.wrap(e,this.gridElement);var n={root:document.getElementById(this.s_area),rootMargin:"0px",threshold:.3,trackVisibility:!1};this.observer=new IntersectionObserver((function(e,n){return t.observerCB(e,n)}),n);var i=this.gridElement.querySelectorAll("tr"),o=i[i.length-1];this.observe(o)},e}($i),ho=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),fo=function(t){function e(){var e=t.call(this)||this;return e.items=[],e}return ho(e,t),e.prototype.add=function(t){this.findItem(t.options.propName)||this.items.push(t)},e.prototype.findItem=function(t){return this.items.find((function(e){return e.options.propName===t}))},e}($i),mo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),go=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return mo(e,t),e.prototype.render=function(){this.element=document.createElement("i"),this.element.classList.add("bi","bi-caret-right","row-marker")},e.prototype.clone=function(){return t.prototype.clone.call(this)},e}($i),_o=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),vo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return _o(e,t),e.prototype.render=function(){this.element=document.createElement("div"),this.element.classList.add("row","actions-container")},e.prototype.addAction=function(t,e,n,i){var o=this.getButton(t,e,n);return o.addEventListener("click",i),this.element.appendChild(o),this},e.prototype.addDeleteAction=function(t){return this.addAction("btnDeleteRow","danger","trash",t)},e.prototype.addNewRecordAction=function(t){return this.addAction("btnAddRow","primary","plus-circle",t)},e.prototype.addGridSettingsAction=function(){var t=this.getButton("btnSettings","primary","gear");return t.setAttribute("data-bs-toggle","modal"),t.setAttribute("data-bs-target","#staticBackdrop_".concat(this.dataSourceName)),this.element.append(t),this},e.prototype.getButton=function(t,e,n){var i=document.createElement("button");return i.type="button",i.classList.add("btn","btn-sm","btn-outline-".concat(e),"grid-toolbar-action"),i.id="".concat(t,"_").concat(this.dataSourceName),this.appendIcon(i,n),i},e.prototype.getIcon=function(t){var e=document.createElement("i");return e.classList.add("bi","bi-".concat(t)),e},e.prototype.appendIcon=function(t,e){var n=this.getIcon(e);t.append(n)},e}($i),yo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),bo=function(t){function e(e,n){void 0===n&&(n="text");var i=this,o={DataSourceName:e,InputType:n};return(i=t.call(this,o)||this).render(),i}return yo(e,t),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,i.addDoubleClickEvent(),i},e}(eo),Eo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),wo=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.render(),n}return Eo(e,t),e.prototype.render=function(){var t=document.createElement("option");t.value=this.options.value,t.text=this.options.text,this.options.isSelected&&(t.selected=!0),this.element=t},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e.setText(this.options.text),e},e}($i),Oo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Do=function(t){function e(e){var n=t.call(this,{DataSourceName:e.DataSourceName,InputType:"select"})||this;return n.SelectOptions=e.SelectOptions,n.render(),n}return Oo(e,t),e.prototype.render=function(){var e=this;t.prototype.render.call(this),this.SelectOptions.forEach((function(t){return e.append(new wo(t))})),this.addClass("form-select form-select-sm")},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=this.shClone(this.options);i.SelectOptions=this.shClone(this.SelectOptions);var o=new e(i);return o.element=n.element,o.children=n.children,this.addDoubleClickEvent(),o},e}(eo),Co=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),So=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return Co(e,t),e.prototype.render=function(){if(t.prototype.render.call(this),this.options.Icon){var e=document.createElement("i");e.classList.add("bi","bi-".concat(this.options.Icon)),this.element.appendChild(e)}this.options.Handler&&this.addClickHandler()},e.prototype.addClickHandler=function(){var t=this;this.element.addEventListener("click",(function(e){return t.options.Handler(e)}))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(eo),To=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),No=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return To(e,t),e.prototype.onItemSelected=function(t,e){console.log("row selected",t.grid.body.getSelectedRow());var n=t.grid.body.getSelectedRow().getInputs().find((function(t){return t.isKey}));n&&(this.txtElement.val=n.val,this.txtElement.change()),t.selectorModal.hide()},e.prototype.render=function(){var t=this;this.txtElement=new bo(this.options.DataSourceName),this.txtElement.addClass(this.options.CssClass).props([{key:"id",value:this.options.ElementId},{key:"placeHolder",value:this.options.PlaceHolder},{key:"data-propname",value:this.options.PropName}]),this.btnElement=new So({InputType:"button",DataSourceName:this.options.DataSourceName,Icon:"search",Handler:function(e){return t.options.BtnClick(t,e)}});var e=document.createElement("div");e.classList.add("input-group","input-group-sm"),e.appendChild(this.txtElement.element),e.appendChild(this.btnElement.element),this.element=e},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(eo),Ao=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ro=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.parentContainerId=n.options.containerId,n.modalId="".concat(n.parentContainerId,"_bs_").concat(n.options.propName),n.modalTitleId="".concat(n.parentContainerId,"_lbs_").concat(n.options.propName),n.containerId="".concat(n.parentContainerId,"_cbs_").concat(n.options.propName),n.gridId="".concat(n.parentContainerId,"_g_").concat(n.options.propName),n.render(),n.grid=n.renderGrid(),n.onItemSelected=function(t,e){console.log()},n}return Ao(e,t),e.prototype.render=function(){var t=this,e=document.getElementById(this.modalId);if(e)this.element=e,this.selectorModal=Mn.getOrCreateInstance(e);else{this.element=document.createElement("div"),this.element.id=this.modalId,this.element.classList.add("modal"),this.element.innerHTML='<div class="modal-dialog modal-dialog-scrollable">\n                                    <div class="modal-content">\n                                        <div class="modal-header">\n                                            <h5 class="modal-title" id="'.concat(this.modalTitleId,'">Select a value</h5>\n                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                                        </div>\n                                        <div class="modal-body">\n                                            <div id="').concat(this.containerId,'">\n\n                                            </div>\n                                        </div>\n                                        <div class="modal-footer">\n                                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                                        </div>\n                                    </div>\n                                </div>');var n=document.getElementById(this.parentContainerId);n&&n.appendChild(this.element),this.selectorModal=new Mn(this.element),this.element.addEventListener("shown.bs.modal",(function(e){t.grid.clearGrid(),t.grid.infiniteScroller.currentPage=1,t.grid.fetchGridPage(1)}))}},e.prototype.show=function(){this.selectorModal.show()},e.prototype.renderGrid=function(){var t=new Xi("bsSelector",{initData:[],metaData:void 0},!0,this.options.urlCb),e=new Yi(this.gridId,this.containerId,this.options.gridCols,t,!0),n=new Fo(e);return n.registerCallbacks(),n.removeHandler(this.appDataEvents.GRID_DATA),n.removeHandler(this.appDataEvents.ON_ADD_RECORD),n.removeHandler(this.appDataEvents.ON_FETCH_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_ERROR),n.render(),n.gridActions.visible=!1,n},e}($i),Io=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Lo=function(t){function e(e){var n=t.call(this)||this;return n.cells=[],n.options=e,n.render(),n}return Io(e,t),Object.defineProperty(e.prototype,"rowCategory",{get:function(){return this.getProp("data-rowcategory")},set:function(t){this.prop("data-rowcategory",t)},enumerable:!1,configurable:!0}),e.prototype.addCell=function(t){this.element.append(t.element),this.cells.push(t)},e.prototype.addCells=function(t){var e=this;t.forEach((function(t){return e.addCell(t)}))},e.prototype.render=function(){this.element||(this.element=document.createElement("tr"))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=this.shClone(this.options);i.isTemplateRow=!1;var o=new e(i);return o.element=n.element,o.children=n.children,o.cells=this.cells.map((function(t){var e=t.clone();return o.element.append(e.element),e})),o},e.prototype.focusRow=function(){this.removeClass("table-active").addClass("table-active")},e.prototype.getInputs=function(){var t=[];return this.cells.forEach((function(e,n){var i=e.children;i.length>0&&i.forEach((function(e,n){e instanceof No?t.push(e.txtElement):e instanceof eo&&t.push(e)}))})),t},e.prototype.createInputFor=function(t,e){var n=this,i=this.options.dataSourceName,o=this.options.gridId,r=null;if("select"===t.DataType)r=new Do({DataSourceName:i,SelectOptions:t.DataSource});else if("checkbox"===t.DataType)r=new io(i);else if("selector"===t.DataType){var s=new Ro({propName:t.PropName,containerId:this.options.containerId,urlCb:t.SelectorDataCB,gridCols:t.SelectorCols});e.selectors.add(s),r=new No({DataSourceName:i,PropName:t.PropName,BtnId:"btn_"+o+"_template_row_"+t.PropName,CssClass:"form-control form-control-sm",ElementId:o+"_template_row_"+t.PropName,InputType:"text",PlaceHolder:t.Name,BtnClick:function(t,e){s.grid.removeHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED),s.grid.addHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED,(function(e,n){return t.onItemSelected(s,n)})),s.show()}})}else(r=new bo(i,t.DataType)).addClass("form-control","form-control-sm");"selector"!==t.DataType&&r.props([{key:"data-propname",value:t.PropName},{key:"title",value:t.Name},{key:"id",value:o+"_template_row_"+t.PropName},{key:"placeholder",value:t.Name}]),!0===t.IsKey&&(r.readonly=!0,r.isKey=!0),!0===e.options.isReadonly&&(r.readonly=!0,r.setCss("cursor","pointer"),r.setCss("user-select","none"));var a=new ro(new Ki);return a.append(r),a},e.prototype.createHeaderFor=function(t){var e=new ro(t,!0);return e.addClass("sorting").addClass("ds-col"),e.setText(t.Name),e.prop("data-th-propname",t.PropName),e},e.prototype.getVisibleInputs=function(){return this.getInputs().filter((function(t){return!0===t.visible}))},e.prototype.getRowDataExt=function(){var t=this.getInputs(),e={};return t.forEach((function(t,n){var i=t.modelName;e[i]=t})),e},e.prototype.getRowIndex=function(){var t=this.getProp("data-rowindex");return parseInt(t)},e.prototype.getRowData=function(){var t=this.getInputs(),e=this.getRowIndex(),n={},i=this.rowCategory;return n.rowCategory=i,t.forEach((function(t,e){var i=t.modelName;n[i]=t.val})),n.clientRowNumber=e,n},e.prototype.isRowDirty=function(){return"true"===this.getProp("data-isdirty")},e}($i),xo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Po=function(t){function e(){var e=t.call(this)||this;return e.rows=[],e}return xo(e,t),e.prototype.addRow=function(t){this.element.append(t.element);var e=this.getNextRowIndex();t.prop("data-rowindex",e);var n=!0===t.options.gridHeader?"head":"data";return t.prop("id","".concat(t.options.gridId,"_").concat(n,"_").concat(e)),this.rows.push(t),this},e.prototype.getVisibleRows=function(){return this.rows.filter((function(t){return!0===t.visible}))},e.prototype.getNextRowIndex=function(){return this.rows.length+1},e.prototype.getGridTitlesRow=function(){return this.rows.find((function(t){return!0===t.options.gridHeader}))},e}($i),ko=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return ko(e,t),e.prototype.render=function(){this.element=document.createElement("thead"),this.addClass("table-light")},e}(Po),Ho=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Bo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return Ho(e,t),e.prototype.render=function(){this.element=document.createElement("tbody")},e.prototype.rowSiblings=function(t){return this.rows.filter((function(e,n){if(e!==t)return e}))},e.prototype.focusRow=function(t){t.removeClass("table-active").addClass("table-active"),this.rowSiblings(t).forEach((function(t,e){return t.removeClass("table-active")}))},e.prototype.getTemplateRow=function(){var t=this.rows.filter((function(t){if(!0===t.options.isTemplateRow)return t}));if(t&&t.length>0)return t[0]},e.prototype.getDirtyRows=function(){return this.rows.filter((function(t,e){return t.isRowDirty()}))},e.prototype.getDirtyRecords=function(){var t=this.getDirtyRows();if(0===t.length)return[];var e=[];return t.forEach((function(t,n){e.push(t.getRowData())})),e},e.prototype.getAllRecords=function(){var t=this.rows.filter((function(t){return!1===t.options.isTemplateRow})),e=[];return t.forEach((function(t){e.push(t.getRowData())})),e},e.prototype.getSelectedRow=function(){return this.rows.find((function(t,e){return t.hasClass("table-active")}))},e.prototype.markDeleted=function(){var t=this.getSelectedRow();if(t){var e=this.rowSiblings(t),n=e[e.length-1];t.removeClass("table-active"),t.prop("data-isdirty","true"),t.css={display:"none"};var i=t.rowCategory;t.rowCategory="ADDED"===i?"ADDED_DELETED":"DELETED",this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,{DataSourceName:t.options.dataSourceName,EventData:{Event:t}}),this.focusRow(n)}},e.prototype.removeRow=function(t){t.element.remove();var e=this.rows.indexOf(t);e>-1&&this.rows.splice(e,1)},e}(Po),Mo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Go=function(t,e,n){if(n||2===arguments.length)for(var i,o=0,r=e.length;o<r;o++)!i&&o in e||(i||(i=Array.prototype.slice.call(e,0,o)),i[o]=e[o]);return t.concat(i||Array.prototype.slice.call(e))},Fo=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.head=new jo,n.body=new Bo,n.selectors=new fo,n.paginator=new lo(new Ji(n.options.dataSource.name,new Qi,(function(t){return n.paginatorCallback(t)}))),n.sessionCache=new zi,n.httpClient=new ao(n.sessionCache,n.options.dataSource.name),n.httpClient.cacheResponses=n.options.cacheResponses,n.infiniteScroller=null,n.gridActions=null,n.discoverable=!0,n.containerElement=document.getElementById(n.options.containerId),n}return Mo(e,t),e.prototype.setDiscoverable=function(){Vi.Add(this)},Object.defineProperty(e.prototype,"dataSourceName",{get:function(){return this.options.dataSource.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isReadOnly",{get:function(){return this.options.isReadonly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dirtyRecords",{get:function(){return this.body.getDirtyRecords()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"allRecords",{get:function(){return this.body.getAllRecords()},enumerable:!1,configurable:!0}),e.prototype.paginatorCallback=function(t){this.fetchGridPage(t)},e.prototype.addHeader=function(){this.element.append(this.head.element)},e.prototype.addBody=function(){this.element.append(this.body.element)},e.prototype.render=function(){var t=this;this.element=document.createElement("table"),this.element.classList.add("table","table-bordered","table-hover","table-sm","resizable","navTable","nowrap","bs-table"),this.id=this.options.gridId,this.prop("data-datasource",this.options.dataSource.name);var e=this.getGridSettings(this.options.gridId)||{};this.css={width:"inherit"};var n=new Lo({dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,gridHeader:!0});n.addClass("draggable").addClass("grid-cols");var i=new Lo({isTemplateRow:!0,dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,containerId:this.options.containerId});i.addClass("grid-rows"),i.css={display:"none"};var o=this.applyColOrdering(e),r=new ro(new Ki,!0),s=new go,a=new ro(new Ki);a.append(s),n.addCell(r),i.addCell(a),o.forEach((function(o){if(o.PropName){var r=e[o.PropName],s=n.createHeaderFor(o),a=i.createInputFor(o,t);t.addSorting(s),t.applyColSettings(s,r),t.applyColSettings(a,r),n.addCell(s),i.addCell(a)}})),this.head.addRow(n),this.body.addRow(i),this.addActions(),this.addHeader(),this.addBody(),this.containerElement.appendChild(this.gridActions.element),this.containerElement.appendChild(this.element),this.addInfiniteScroll();var c=this.options.dataSource.data.initData,l=this.options.dataSource.data.metaData,u={DataSourceName:this.options.dataSource.name,EventData:{Data:c,MetaData:l}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,u),this.notifyListeners(this.appDataEvents.ON_GRID_DATA_BOUND,{DataSourceName:this.options.dataSource.name,EventData:{}}),!0===this.discoverable&&this.setDiscoverable()},e.prototype.addInfiniteScroll=function(){var t=this;!0===this.options.enableInfiniteScroll&&(this.infiniteScroller=new po({gridElement:this.element,httpClient:this.httpClient}),this.infiniteScroller.nextPageCallback=function(e){return t.paginatorCallback(e)},this.infiniteScroller.enable())},e.prototype.addActions=function(){var t=this;this.gridActions=new vo,this.gridActions.dataSourceName=this.options.dataSource.name,this.gridActions.addNewRecordAction((function(e){return t.addEmptyRow()})).addDeleteAction((function(e){return t.body.markDeleted()})).addGridSettingsAction()},e.prototype.addSorting=function(t){var e=this;t.addEventHandler("click",(function(n){var i=!0;t.hasClass("sorting_asc")?(t.removeClass("sorting_asc").addClass("sorting_desc"),i=!1):t.removeClass("sorting_desc").addClass("sorting_asc"),t.siblings("th").forEach((function(t){t.classList.remove("sorting_asc","sorting_desc")}));var o={EventData:{Event:n,PropName:t.options.PropName,Asc:i},DataSourceName:e.options.dataSource.name};t.notifyListeners(t.appDataEvents.ON_SORTING_REQUESTED,o)}))},e.prototype.clearGrid=function(){var t=this;this.findElements(".grid-row").forEach((function(e){return t.removeElement(e)}));var e=this.body.getTemplateRow();this.body.rows=[e]},e.prototype.applyColSettings=function(t,e){e&&!this.isEmptyObj(e)&&(!1===e.Visible&&(t.visible=!1),e.Width&&(t.css={position:"relative",width:e.Width}))},e.prototype.applyColOrdering=function(t){if(!t||this.isEmptyObj(t))return this.options.colDefinition;var e=[];return this.options.colDefinition.forEach((function(n,i){var o=t[n.PropName];o&&(e[o.Position]=n)})),e.length!==this.options.colDefinition.length?this.options.colDefinition:e},e.prototype.bindDataSource=function(t,e){var n=this;if(t&&!(t.length<=0)){var i=t;!1===this.options.dataSource.isRemote&&(i=this.options.dataSource.getPageOfflineCB(e.pageIndex,this.options.dataSource.data.initData,e));var o=null;i.forEach((function(t,e){var i=n.addNewRow(t,!0);i.rowCategory="PRESTINE",o=i})),0==this.options.enableInfiniteScroll?this.bindPaginator(e):(this.infiniteScroller.initMetaData=e,this.infiniteScroller.initData=i,o&&(this.infiniteScroller.unobserve(),this.infiniteScroller.observe(o.element)))}},e.prototype.bindPaginator=function(t){void 0===t&&(t=new Qi),this.paginator.options.pagingMetaData=t,this.paginator.render(),document.getElementById("#"+this.options.containerId).appendChild(this.paginator.element)},e.prototype.addNewRow=function(t,e){var n=this,i=this.body.getNextRowIndex(),o=this.body.getTemplateRow().clone();o.options.isTemplateRow=!1,o.addClass("grid-row"),o.css={display:"table-row"};var r=this;o.getInputs().forEach((function(n,s){var a=n,c=a.id;a.id=c+"_"+i;var l=a.modelName,u=t[l];if("date"===a.options.InputType&&u){var d=new Date(u);a.val=r.toDateDisplayFormat(d)}else a instanceof io&&("true"===u||"True"===u||!0===u)?a.prop("checked","checked"):void 0!==u&&(a.val=u);!1===e&&(a.disabled=!1,a.readonly=!1),a.element.addEventListener("change",(function(t){o.prop("data-isdirty",!0),"ADDED"!==o.rowCategory&&(o.rowCategory="UPDATED"),a.removeClass("is-invalid").prop("title","");var e=hi.getInstance(t.target);e&&e.dispose();var n=o.getRowDataExt(),i=r.options.dataSource.name,s={EventData:{Event:t,Grid:r},DataSourceName:i},c={EventData:{Event:t,Row:n},DataSourceName:i},l={EventData:{Event:t,Row:n,Field:a},DataSourceName:i};o.notifyListeners(r.appDataEvents.ON_GRID_UPDATED,s),o.notifyListeners(r.appDataEvents.ON_FIELD_UPDATED,l),o.notifyListeners(r.appDataEvents.ON_ROW_UPDATED,c)})),a.element.addEventListener("focus",(function(t){r.body.focusRow(o)}))})),o.element.addEventListener("click",(function(t){r.body.focusRow(o)})),this.body.addRow(o);var s=o.getVisibleInputs();return s.length>0&&s[s.length-1].element.addEventListener("keydown",(function(t){return n.onInputKeyDown})),o},e.prototype.toDateDisplayFormat=function(t){var e=t.getDate(),n=t.getMonth()+1;return t.getFullYear()+"-"+(n<10?"0":"")+n+"-"+(e<10?"0":"")+e},e.prototype.toTimeDisplayFormat=function(t){var e=t.getHours(),n=t.getMinutes();return(e<10?"0":"")+e+":"+(n<10?"0":"")+n},e.prototype.onInputKeyDown=function(t){if(9===t.which&&!0!==t.shiftKey){var e=this.body.getVisibleRows();if(!(e.length<=0)){var n=e[e.length-1].getRowIndex(),i=t.target.closest("tr");i&&n===parseInt(i.getAttribute("data-rowindex"))&&this.addEmptyRow()}}},e.prototype.addEmptyRow=function(){var t=this.addNewRow(this.createEmptyRowData(),!1),e=t.getVisibleInputs();e.length>0&&e[0].focus(),t.rowCategory="ADDED",t.prop("data-isdirty","true");var n={EventData:{Grid:this,Event:t},DataSourceName:this.options.dataSource.name};return this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,n),this.infiniteScroller.unobserve(),this.infiniteScroller.observe(t.element),t},e.prototype.createEmptyRowData=function(){var t={};return this.options.colDefinition.forEach((function(e,n){t[e.PropName]=void 0})),t},e.prototype.onHeaderNext=function(t,e){t&&t.EventData&&(this.resetSorting(),this.clearGrid(),this.paginator.clear(),!1!==e&&(this.fetchGridPage(1),!0===this.options.enableInfiniteScroll&&(this.infiniteScroller.currentPage=1)))},e.prototype.fetchGridPage=function(t){if(!0===this.options.dataSource.isRemote){var e=this.options.dataSource.url(t);if(!e)return;var n=new Zi(e,"GET");this.httpClient.get(n)}else{var i=this.options.dataSource.data.initData,o=this.options.dataSource.data.metaData,r={DataSourceName:this.options.dataSource.name,EventData:{Data:i,MetaData:new Qi(t,o.pageSize,o.totalRecords)}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,r)}},e.prototype.onSaveRecord=function(t){var e=this;this.body.rows.filter((function(t){return"DELETED"===t.rowCategory||"ADDED_DELETED"===t.rowCategory})).forEach((function(t){return e.body.removeRow(t)})),this.body.rows.forEach((function(t){t.rowCategory="PRESTINE",t.getInputs().filter((function(t){return t.isKey})).forEach((function(t){t.disabled=!0}))}))},e.prototype.onSaveError=function(t){if(t&&t.EventData&&t.EventData.Event.responseJSON)for(var e=t.EventData.Event.responseJSON,n=this.options.dataSource.name,i=this.body.getDirtyRows(),o=0;o<i.length;o++){var r=e[n+"["+o+"]"];if(r&&r.length>0){var s=r[0],a=o,c=this.getRowByIndex(parseInt(s));if(!c)continue;this.options.colDefinition.forEach((function(t,i){var o=t.PropName.toPascalCaseJson(),r=e[n+"["+a+"]."+o];if(r&&r.length>0){var s=c.getInputs().find((function(e){return e.modelName===t.PropName}));if(s){s.addClass("is-invalid");var l="";Array.from(r).forEach((function(t){l+=t+" "})),s.prop("title",l),new hi(s[0],{customClass:"tooltip-error"})}}}))}}},e.prototype.getRowByIndex=function(t){return this.body.rows.find((function(e,n){return e.getRowIndex()===t}))},e.prototype.sortTable=function(t,e){var n,i,o=this,r=function(t,e){return t.cells[e].getCellText()},s=this.options.dataSource.name;this.body.rows.sort((n=this.head.getGridTitlesRow().cells.indexOf(t),i=e=!e,function(t,e){return o=r(i?t:e,n),s=r(i?e:t,n),o.toString().localeCompare(s.toString());var o,s})).forEach((function(t){return o.body.append(t,!1)}));var a={EventData:{CurrentCol:t,Action:Fi.COL_SORTING},DataSourceName:s},c={EventData:{CurrentCol:t,Asc:e},DataSourceName:s};this.notifyListeners(Wi.ON_COLS_REORDERED,c),this.notifyListeners(this.appDataEvents.ON_GRID_CONFIG_UPDATED,a)},e.prototype.onSortingRequest=function(t){var e=t.EventData.Event.target;if("th"!==e.tagName.toLowerCase()){var n=e.closest("th");if(!n)return;e=n}var i=this.head.getGridTitlesRow().cells.find((function(t,n){return t.element===e}));i&&this.sortTable(i,t.EventData.Asc)},e.prototype.resetSorting=function(){this.head.rows.forEach((function(t,e){t.hasClass("sorting_desc")&&t.removeClass("sorting_asc").removeClass("sorting_desc")}))},e.prototype.onColsReordered=function(t){var e=this;this.body.rows.forEach((function(t,n){t.getInputs().forEach((function(t){t.element.removeEventListener("keydown",e.onInputKeyDown)}));var i=t.getVisibleInputs();i.length<=0||i[i.length-1].element.addEventListener("keydown",e.onInputKeyDown)}))},e.prototype.addHandler=function(t,e,n){void 0===n&&(n=!1);var i={Key:this.options.gridId,EventName:t,Callback:e,DataSourceName:this.options.dataSource.name,VerifyDataSourceName:n};Ui.Subscribe(i)},e.prototype.removeHandler=function(t){var e={Key:this.options.gridId,EventName:t,DataSourceName:this.options.dataSource.name};Ui.Unsubscribe(e)},e.prototype.onFetchData=function(t){!1===this.options.enableInfiniteScroll&&this.clearGrid();var e=t.EventData.MetaData;e&&this.bindDataSource(t.EventData.Data,new Qi(e.pageIndex,e.pageSize,e.totalRecords))},e.prototype.onFetchDataError=function(t){},e.prototype.registerCallbacks=function(t){var e=this;void 0===t&&(t=!0),this.options.gridId,this.options.dataSource.name,this.addHandler(Wi.GRID_DATA,(function(t,n){return e.body.getDirtyRecords()})),this.addHandler(Wi.ON_ADD_RECORD,(function(t,n){return e.onHeaderNext(n,!1)})),this.addHandler(Wi.ON_FETCH_RECORD,(function(t,n){return e.onHeaderNext(n,!0)})),this.addHandler(Wi.ON_SAVE_RECORD,(function(t,n){return e.onSaveRecord(n)})),this.addHandler(Wi.ON_SAVE_ERROR,(function(t,n){return e.onSaveError(n)})),this.addHandler(Wi.ON_SORTING_REQUESTED,(function(t,n){return e.onSortingRequest(n)}),t),this.addHandler(Wi.ON_COLS_REORDERED,(function(t,n){return e.onColsReordered(n)}),t),this.addHandler(Wi.ON_GRID_CONFIG_UPDATED,(function(t,n){return e.onGridConfigurationChanged(n)}),t),this.addHandler(Wi.ON_GRID_DATA_BOUND,(function(t,n){return e.onGridDataBound(n)}),t),this.addHandler(Wi.ON_FETCH_GRID_RECORD,(function(t,n){return e.onFetchData(n)}),t),this.addHandler(Wi.ON_FETCH_GRID_RECORD_ERROR,(function(t,n){return e.onFetchDataError(n)}),t)},e.prototype.configurableGrid=function(){var t=this,e=this.head.getGridTitlesRow().cells,n=this.options.dataSource.name,i='\n            <div class="modal fade" id="staticBackdrop_'.concat(n,'" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"\n            aria-labelledby="staticBackdropLabel" aria-hidden="true">\n                <div class="modal-dialog modal-dialog-scrollable">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="staticBackdropLabel_').concat(n,'">Configure columns</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <ul class="list-group grid-config-cols">\n\n                            </ul>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </div>'),o=document.createElement("div");o.classList.add("settings-menu","grid-config-template"),o.innerHTML=i;var r=this.findById(this.options.containerId);r&&r.append(o);var s=o.querySelector(".grid-config-cols");e.forEach((function(e,i){var o=e.options.PropName;if(o){var r=document.createElement("li");r.classList.add("list-group-item");var a=document.createElement("input");a.type="checkbox",a.value="",a.classList.add("form-check-input","me-1");var c="col_config_chk_"+o;a.setAttribute("id",c),a.setAttribute("data-config-propname",o),!0===e.visible&&(a.checked=!0);var l=document.createElement("label");l.setAttribute("for",c),l.textContent=e.getText(),r.appendChild(a),r.appendChild(l),s.appendChild(r),a.addEventListener("click",(function(e){var i=e.target,o=i.getAttribute("data-config-propname");if(o){var r=t.head.getGridTitlesRow(),s=r.cells.find((function(t){return t.options.PropName===o}));if(s){var a=t.body.rows,c=Go(Go([],a,!0),[r],!1),l=r.cells.indexOf(s);if(!(l<0)){c.forEach((function(t){var e=t.cells[l];e&&(i.checked?e.visible=!0:e.visible=!1)})),t.notifyListeners(Wi.ON_COLS_REORDERED,{DataSourceName:n,EventData:{Event:e}});var u={EventData:{Event:e,Action:Fi.COL_SHOW_HIDE},DataSourceName:n};t.notifyListeners(Wi.ON_GRID_CONFIG_UPDATED,u)}}}}))}}))},e.prototype.resizableGrid=function(){var t=this.options.dataSource.name,e=this.head.getGridTitlesRow().cells;this.css={},this.setCss("overflow","hidden");for(var n=this.element.offsetHeight,i=0;i<e.length;i++){var o=s(n);e[i].element.append(o),e[i].setCss("position","relative"),r(o,e[i],this)}function r(e,n,i){var o,r,s,c;e.addEventListener("mousedown",(function(t){c=i.element.offsetWidth,r=n.element,o=t.pageX;var e=function(t){if("border-box"==a(t,"box-sizing"))return 0;var e=a(t,"padding-left"),n=a(t,"padding-right");return parseInt(e)+parseInt(n)}(r);s=r.offsetWidth-e})),e.addEventListener("mouseover",(function(t){this.style.borderRight="2px solid #0000ff"})),e.addEventListener("mouseout",(function(t){this.style.borderRight=""})),document.addEventListener("mousemove",(function(t){if(r){var e=t.pageX-o;r.style.width=s+e+"px",i.element.style.width=c+e+"px"}})),document.addEventListener("mouseup",(function(e){if(r){var n={EventData:{Event:e,CurrentCol:r,Action:Fi.COL_RESIZED},DataSourceName:t};i.notifyListeners(Wi.ON_GRID_CONFIG_UPDATED,n)}r=void 0,o=void 0,s=void 0}))}function s(t){var e=document.createElement("div");return e.style.top="0",e.style.right="0",e.style.width="5px",e.style.position="absolute",e.style.cursor="col-resize",e.style.userSelect="none",e.style.height=t+"px",e}function a(t,e){return window.getComputedStyle(t,null).getPropertyValue(e)}},e.prototype.enableColumnReordering=function(){var t=this,e=this.options.dataSource.name,n=this,i=document.createElement("div");i.draggable=!0,i.classList.add("grid-header");var o,r=n.head.getGridTitlesRow(),s=r.cells;s.forEach((function(e){var n=e.childrenNodes();if(0===n.length){var o=e.getText();e.setText("");var r=document.createElement("div");r.textContent=o,e.appendChild(r),t.wrap(i,r)}else t.wrap(i,n)})),this.findElements(".grid-header").forEach((function(i){t.addDragHandlers(i,{dragStart:function(t){this.classList.contains("grid-header")?(o=this,this.style.opacity="0.5"):o=void 0},dragLeave:function(t){t.preventDefault(),o&&this.classList.contains("grid-header")&&this.classList.remove("over")},dragEnter:function(t){t.preventDefault(),o&&this.classList.contains("grid-header")&&this.classList.add("over")},dragOver:function(t){t.preventDefault(),o&&this.classList.contains("grid-header")&&this.classList.add("over")},dragEnd:function(t){t.preventDefault(),o&&(this.style.opacity="1")},drop:function(t){if(t.preventDefault(),o&&(this.classList.remove("over"),this.classList.contains("grid-header")&&o!==this)){var i=this.closest("th");if(i){var c=s.find((function(t){return t.element===i}));if(c){var l=s.indexOf(c),u=o.closest("th");if(u){var d=s.find((function(t){return t.element===u}));if(c){var p=s.indexOf(d);if(l!=p){a(r,s,p,l);var h=n.body.rows;setTimeout((function(){for(var i=0;i<h.length;i++){var o=h[i],r=o.cells;if(l==p)return;a(o,r,p,l)}n.notifyListeners(Wi.ON_COLS_REORDERED,{DataSourceName:e,EventData:{Event:t}});var s={EventData:{Event:t,Action:Fi.COL_REORDER},DataSourceName:e};n.notifyListeners(Wi.ON_GRID_CONFIG_UPDATED,s)}),500)}}}}}}}})}));var a=function(t,e,n,i){if(n!=i){var o=d.ltr;n>i&&(o=d.rtl),o===d.rtl?c(e,n,i):l(e,n,i),t.cells=[],t.addCells(e)}},c=function(t,e,n){for(var i=e;i>n;i--)u(t,i,i-1)},l=function(t,e,n){for(var i=e;i<n;i++)u(t,i,i+1)},u=function(t,e,n){var i=t[e];t[e]=t[n],t[n]=i},d={rtl:"RIGHT-TO-LEFT",ltr:"LEFT-TO-RIGHT"}},e.prototype.onGridConfigurationChanged=function(t){t.EventData.Action;var e=this.options.gridId,n=this.head.getGridTitlesRow().cells,i={};n.forEach((function(t,e){var n=t.options.PropName;if(n){var o=!0;t.hasClass("sorting_desc")&&(o=!1);var r={Width:t.getCss("width"),Visible:t.visible,Ascending:o,Position:e};i[n]=r}})),Gi.delete(e),setTimeout((function(){Gi.setJSON(e,i,{days:30,secure:!0,SameSite:"strict"})}),500)},e.prototype.onGridDataBound=function(t){this.configurableGrid(),this.enableColumnReordering(),this.resizableGrid()},e}($i),Wo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Uo=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return Wo(e,t),e.prototype.render=function(){this.element=document.getElementById(this.options.ElementId)},e}(eo)})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_desc.png */ "./app-client/images/sort_desc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_asc.png */ "./app-client/images/sort_asc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_both.png */ "./app-client/images/sort_both.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n  /* max-height: 200px;  */\r\n  overflow-y: auto\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}", "",{"version":3,"sources":["webpack://./app-client/css/site.css"],"names":[],"mappings":"AAAA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,UAAU;EACV,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oEAAyD;AAC3D;;AAEA;EACE,oEAAwD;AAC1D;;AAEA;EACE,yDAA8C;AAChD;;AAEA;EACE,eAAe;EACf,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;;;mBAIiB;EACjB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,UAAU;EACV,WAAW;AACb;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;wBACsB;;EAEtB,cAAc;EACd,qBAAqB;EACrB,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,2CAA2C;EAC3C,cAAc;AAChB;;AAEA;EACE,sDAAsD;EACtD,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;;AAGA;EACE,4BAA4B;EAC5B,wBAAwB;EACxB;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA","sourcesContent":["html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(../images/sort_desc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(../images/sort_asc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(../images/sort_both.png);\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n  /* max-height: 200px;  */\r\n  overflow-y: auto\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./app-client/css/site.css":
/*!*********************************!*\
  !*** ./app-client/css/site.css ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./site.css */ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./app-client/dynamic-demo.ts":
/*!************************************!*\
  !*** ./app-client/dynamic-demo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDemo": () => (/* binding */ DynamicDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var DynamicDemo = /** @class */ (function () {
    function DynamicDemo() {
    }
    DynamicDemo.run = function (containerId, initData) {
        console.log('running dynamic demo');
        var bookingLines = initData.data;
        var bookingLinesMetadata = initData.metaData;
        var cols = [];
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Line nbr", "number", "80px", "lineNbr", true));
        //
        // selector window
        //
        var stockSelector = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Stock item", "selector", "60px", "inventoryId");
        stockSelector.SelectorDataCB = function (page) { return "http://localhost:3000/api/stockitems?page=".concat(page); };
        stockSelector.SelectorCols = [
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Stock item", "text", "60px", "id", true),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "name", false)
        ];
        cols.push(stockSelector);
        //
        // select dropdown
        //
        var uom = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit of measure", "select", "120px", "uom", false, [
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Kilo', 'KG'),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Litre', 'LI'),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Stick', 'STK')
        ]);
        cols.push(uom);
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "desc", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Quantity", "number", "80px", "qty", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit cost", "number", "120px", "cost", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Cost", "number", "120px", "extCost", false));
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('lines', {
            initData: bookingLines, metaData: bookingLinesMetadata
        }, true, function (page) {
            // debugger;
            return 'http://localhost:3000/api/bookinglines?page=' + page;
        });
        var options = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("bookingLines", containerId, cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(options);
        grid.registerCallbacks();
        //
        // lets say we have to calculate ext cost using the unit cost and quantity
        // we can do this by registering a change event
        //
        grid.addHandler(bs_datatable__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_FIELD_UPDATED, function (sender, e) {
            // debugger;
            var ev = e;
            if (!ev)
                return;
            var field = ev.EventData.Field;
            if (!field)
                return;
            var fieldName = field.modelName;
            var row = ev.EventData.Row;
            if (fieldName === 'qty' || fieldName === 'cost') {
                row.extCost.val = row.qty.val * row.cost.val;
            }
        });
        grid.render();
        grid.gridActions.addAction('btnSave', 'primary', 'save', function (e) {
            console.log('save button is called');
            var records = grid.allRecords;
            console.log('All records:');
            console.table(records);
            console.log('Dirty rows:');
            console.table(grid.dirtyRecords);
        });
    };
    return DynamicDemo;
}());



/***/ }),

/***/ "./app-client/static-demo.ts":
/*!***********************************!*\
  !*** ./app-client/static-demo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticDemo": () => (/* binding */ StaticDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var StaticDemo = /** @class */ (function () {
    function StaticDemo() {
    }
    StaticDemo.run = function () {
        // console.log('test is initialized');
        console.log('hello from index');
        //
        // sample using bootstrap data grid 
        //
        var cols = [];
        var initData = [];
        var totCols = 5, totRows = 60;
        for (var i = 0; i < totCols; i++) {
            cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("COL-" + i, "text", "180px", "col-" + i, false));
        }
        for (var i = 0; i < totRows; i++) {
            var record = {};
            for (var j = 0; j < totCols; j++) {
                record['col-' + j] = 'DATA-' + i + '-' + j;
            }
            initData.push(record);
        }
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('fakeData', {
            initData: initData,
            metaData: new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagingMetaData(1, 5, totRows)
        }, false, null, function (page, data, mdata) {
            var start = page <= 1 ? 0 : (page - 1) * mdata.pageSize;
            var end = start + mdata.pageSize;
            var maxIndex = data.length - 1;
            if (start > maxIndex || end > maxIndex)
                return [];
            var pageData = [];
            for (var index = start; index < end; index++) {
                var element = data[index];
                pageData.push(element);
            }
            return pageData;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("fakeData_table", "dummy-data-container", cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
        var name = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt({ InputType: "text", ElementId: "txtName", DataSourceName: "welcome" });
        name.val = "Welcome to TypeScript";
    };
    return StaticDemo;
}());



/***/ }),

/***/ "./app-client/images/sort_asc.png":
/*!****************************************!*\
  !*** ./app-client/images/sort_asc.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "4bba59196d7ce2619696.png";

/***/ }),

/***/ "./app-client/images/sort_both.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_both.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "8b117faa9d4dd934d6bb.png";

/***/ }),

/***/ "./app-client/images/sort_desc.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_desc.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "c4196d3286cc33244c83.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./app-client/index.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableDemos": () => (/* binding */ BSDataTableDemos)
/* harmony export */ });
/* harmony import */ var _css_site_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/site.css */ "./app-client/css/site.css");
/* harmony import */ var _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dynamic-demo */ "./app-client/dynamic-demo.ts");
/* harmony import */ var _static_demo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static-demo */ "./app-client/static-demo.ts");



var BSDataTableDemos = /** @class */ (function () {
    function BSDataTableDemos() {
    }
    BSDataTableDemos.runStaticDemo = function () {
        _static_demo__WEBPACK_IMPORTED_MODULE_2__.StaticDemo.run();
    };
    BSDataTableDemos.runDynamicDemo = function (containerId, initData) {
        _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__.DynamicDemo.run(containerId, initData);
    };
    return BSDataTableDemos;
}());


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPOzs7Ozs7Ozs7QUNWQTtBQUNBLGVBQWUsS0FBaUQsb0JBQW9CLENBQXFILENBQUMsa0JBQWtCLFlBQVksT0FBTyxTQUFTLHdDQUF3Qyx5REFBeUQsNkNBQTZDLHNCQUFzQiwwQ0FBMEMseURBQXlELDZDQUE2QyxzQkFBc0IsOENBQThDLHlEQUF5RCwrQkFBK0Isc0JBQXNCLDhEQUE4RCxnQkFBZ0Isc0JBQXNCLE1BQU0sa0JBQWtCLDRCQUE0QixHQUFHLEdBQUcsTUFBTSxjQUFjLFdBQVcsK0JBQStCLFlBQVksWUFBWSxxQ0FBcUMsWUFBWSwrREFBK0QsdUJBQXVCLEVBQUUsOERBQThELDRGQUE0RixlQUFlLHdDQUF3QyxTQUFTLEdBQUcsU0FBUyxZQUFZLGFBQWEsY0FBYyxnOUJBQWc5QixFQUFFLFNBQVMsY0FBYyx5bkJBQXluQixFQUFFLHFLQUFxSyxtQ0FBbUMsK0NBQStDLHFDQUFxQyxpSkFBaUosY0FBYyw2Q0FBNkMsY0FBYyx5QkFBeUIscUNBQXFDLHNCQUFzQixnQ0FBZ0MsU0FBUyxjQUFjLHVEQUF1RCxjQUFjLCtEQUErRCxjQUFjLDhGQUE4RixTQUFTLDJEQUEyRCxjQUFjLDZDQUE2QyxxQkFBcUIsc0JBQXNCLGlCQUFpQiwwRUFBMEUsV0FBVywwREFBMEQsSUFBSSxHQUFHLG9CQUFvQixpQkFBaUIsUUFBUSx3REFBd0QsUUFBUSxvQkFBb0IsZUFBZSw2SUFBNkksNkNBQTZDLHlDQUF5QyxrRkFBa0YsaUJBQWlCLElBQUksRUFBRSwwRUFBMEUscUJBQXFCLElBQUksSUFBSSw2QkFBNkIsY0FBYyx1QkFBdUIsdUNBQXVDLGdCQUFnQixtQkFBbUIsd0NBQXdDLFlBQVkscUNBQXFDLG1EQUFtRCxPQUFPLG9IQUFvSCxjQUFjLDRDQUE0QyxrRkFBa0YsK0NBQStDLGdCQUFnQixxQ0FBcUMsMEJBQTBCLFlBQVksUUFBUSxHQUFHLCtCQUErQix1QkFBdUIsU0FBUyxTQUFTLGNBQWMsZ0NBQWdDLGNBQWMsMkNBQTJDLGNBQWMsMkVBQTJFLGNBQWMsNkVBQTZFLGNBQWMseURBQXlELGNBQWMsc0JBQXNCLGtDQUFrQyxRQUFRLG9GQUFvRixnRUFBZ0UsMEZBQTBGLGVBQWUsc0NBQXNDLEVBQUUsV0FBVyxrTUFBa00sZUFBZSxZQUFZLE9BQU8sY0FBYyw2Q0FBNkMsa0JBQWtCLG1CQUFtQixjQUFjLHVCQUF1QixFQUFFLDhCQUE4QixJQUFJLGdCQUFnQiwrQkFBK0IsZ0JBQWdCLElBQUksRUFBRSxTQUFTLG9EQUFvRCx1SkFBdUosU0FBUyxvQkFBb0IsbUVBQW1FLFVBQVUsc0JBQXNCLGdCQUFnQixxUUFBcVEseUJBQXlCLDhCQUE4QixvQkFBb0IsdUVBQXVFLG9IQUFvSCxrRUFBa0UsY0FBYyx1QkFBdUIsT0FBTyxtREFBbUQsY0FBYywyTkFBMk4sUUFBUSxHQUFHLFNBQVMsWUFBWSxxRUFBcUUsTUFBTSw0Q0FBNEMsMFRBQTBULHVCQUF1QixXQUFXLDRCQUE0Qiw2Q0FBNkMsT0FBTyw2QkFBNkIsRUFBRSxRQUFRLEdBQUcsU0FBUyxxQ0FBcUMsU0FBUyx3SkFBd0osU0FBUyxxREFBcUQsVUFBVSxtRUFBbUUsK0hBQStILDZKQUE2SixzRUFBc0UsbUNBQW1DLElBQUksNEZBQTRGLGtFQUFrRSxrQ0FBa0MsSUFBSSw2RUFBNkUseUNBQXlDLHNCQUFzQixvQ0FBb0MsRUFBRSxVQUFVLFFBQVEsWUFBWSxVQUFVLDhEQUE4RCxvQkFBb0Isa0xBQWtMLGlDQUFpQyx5Q0FBeUMsMERBQTBELDBCQUEwQiw0Q0FBNEMsbURBQW1ELFVBQVUsUUFBUSxxREFBcUQsZUFBZSx1REFBdUQsYUFBYSxHQUFHLFFBQVEseUJBQXlCLGVBQWUsMkNBQTJDLGFBQWEsR0FBRyxlQUFlLFdBQVcsT0FBTyxrREFBa0QsZUFBZSxxQ0FBcUMsZUFBZSxvREFBb0QsK0NBQStDLGVBQWUsK0ZBQStGLGlCQUFpQixNQUFNLG1CQUFtQixtSUFBbUksOEJBQThCLGVBQWUsdUJBQXVCLElBQUksdURBQXVELEVBQUUsaUJBQWlCLDRCQUE0Qiw4RUFBOEUsNkhBQTZILGdDQUFnQyxzQkFBc0IsV0FBVywwTEFBMEwsbUJBQW1CLGtQQUFrUCw0RUFBNEUsMEJBQTBCLFFBQVEsZUFBZSxnSUFBZ0ksVUFBVSxVQUFVLG9CQUFvQixNQUFNLFVBQVUsb0JBQW9CLE1BQU0sVUFBVSxtQkFBbUIsTUFBTSxVQUFVLG1CQUFtQixNQUFNLFdBQVcsYUFBYSxrQkFBa0IsWUFBWSwrQkFBK0IsVUFBVSxpQ0FBaUMsTUFBTSxrQ0FBa0MsU0FBUyxpQkFBaUIsaUJBQWlCLEVBQUUsc1RBQXNULHdDQUF3Qyw2RUFBNkUsa0NBQWtDLG1DQUFtQyxNQUFNLHFFQUFxRSxjQUFjLCtHQUErRyxXQUFXLDZFQUE2RSxvRkFBb0Ysc0RBQXNELHVCQUF1QixzQkFBc0IsZ0hBQWdILDBCQUEwQixhQUFhLFdBQVcsb0NBQW9DLDZEQUE2RCxhQUFhLEdBQUcsU0FBUyxVQUFVLG1EQUFtRCxtQ0FBbUMsOEJBQThCLHVRQUF1USxxQkFBcUIsWUFBWSxzQkFBc0IsbURBQW1ELHVDQUF1QyxpQkFBaUIsRUFBRSxtS0FBbUssZ0JBQWdCLDZCQUE2Qix1QkFBdUIsR0FBRyxvQkFBb0IsOEJBQThCLGtCQUFrQixnREFBZ0QsVUFBVSxJQUFJLEVBQUUsMENBQTBDLGlCQUFpQixHQUFHLElBQUkseUZBQXlGLEtBQUsscUVBQXFFLFdBQVcsS0FBSyxnRkFBZ0YsOERBQThELGtCQUFrQixxQkFBcUIsaUJBQWlCLHNFQUFzRSxTQUFTLElBQUksU0FBUyxNQUFNLFdBQVcsMkJBQTJCLDBCQUEwQixlQUFlLDRDQUE0QyxTQUFTLEdBQUcsR0FBRyx3QkFBd0IsU0FBUyxvQkFBb0IsS0FBSyx5RUFBeUUsbUNBQW1DLFdBQVcsbUJBQW1CLHVCQUF1QixRQUFRLEdBQUcsdUdBQXVHLGVBQWUsa0NBQWtDLGVBQWUsR0FBRyxVQUFVLHdGQUF3RixzR0FBc0csMkJBQTJCLFVBQVUsZUFBZSx3Q0FBd0Msb0JBQW9CLHdGQUF3RixxQ0FBcUMsc0JBQXNCLHlEQUF5RCxHQUFHLEtBQUssZ0ZBQWdGLDZGQUE2Riw0QkFBNEIsK0VBQStFLElBQUksWUFBWSxtQkFBbUIsOENBQThDLFFBQVEsRUFBRSxTQUFTLGdCQUFnQixJQUFJLCtCQUErQixtSUFBbUksS0FBSyw0REFBNEQsdUJBQXVCLHVCQUF1Qiw2RkFBNkYsRUFBRSxTQUFTLEtBQUssOERBQThELDJOQUEyTixrREFBa0QsZ0xBQWdMLFVBQVUsc0JBQXNCLDJCQUEyQixxQkFBcUIsZ0JBQWdCLHFCQUFxQix5RUFBeUUsU0FBUyxNQUFNLE1BQU0sMEtBQTBLLGlCQUFpQixxRkFBcUYsOEJBQThCLDRUQUE0VCxrQkFBa0IsTUFBTSxvUUFBb1EsZUFBZSxlQUFlLGlDQUFpQyxtQkFBbUIsc0JBQXNCLDhCQUE4QixtQkFBbUIsbUJBQW1CLG1DQUFtQyw4RkFBOEYsb0JBQW9CLHVCQUF1Qix5QkFBeUIsSUFBSSxTQUFTLG1FQUFtRSxrREFBa0QsNkVBQTZFLGlGQUFpRixlQUFlLDZCQUE2QixjQUFjLG9GQUFvRixjQUFjLGVBQWUsU0FBUyxhQUFhLDhCQUE4QixnQkFBZ0IsMEJBQTBCLG9CQUFvQixLQUFLLFFBQVEscURBQXFELGNBQWMsOENBQThDLElBQUksc0JBQXNCLDJCQUEyQix1REFBdUQsR0FBRyxlQUFlLGlCQUFpQixFQUFFLG9GQUFvRix1QkFBdUIsa0JBQWtCLFdBQVcsK0RBQStELHVCQUF1QixXQUFXLHFCQUFxQixjQUFjLFdBQVcsY0FBYywrQkFBK0IsMENBQTBDLDhCQUE4QixpQ0FBaUMsNEVBQTRFLHNCQUFzQixZQUFZLCtCQUErQixzQ0FBc0MsbUJBQW1CLElBQUksTUFBTSwrREFBK0QsZ0JBQWdCLG1DQUFtQyxNQUFNLHdCQUF3QiwyQ0FBMkMsZ0JBQWdCLE1BQU0sSUFBSSxrQ0FBa0MsWUFBWSxLQUFLLGdEQUFnRCxpQkFBaUIsMkNBQTJDLHdDQUF3QyxjQUFjLHlCQUF5QixTQUFTLG9DQUFvQyxFQUFFLHNCQUFzQixHQUFHLGNBQWMsd0JBQXdCLE9BQU8sMENBQTBDLFlBQVksU0FBUyw4REFBOEQsb0ZBQW9GLCtDQUErQyxTQUFTLEdBQUcsWUFBWSw0QkFBNEIscUJBQXFCLDhEQUE4RCxZQUFZLDRCQUE0QixvQ0FBb0MsTUFBTSx1QkFBdUIsc0JBQXNCLGdDQUFnQyxxQkFBcUIsR0FBRyxZQUFZLHNDQUFzQyxtQ0FBbUMsZ0JBQWdCLEdBQUcsTUFBTSxxQkFBcUIsV0FBVyxxQkFBcUIsYUFBYSx1QkFBdUIsV0FBVyxRQUFRLHlDQUF5Qyx3Q0FBd0MsTUFBTSxtQkFBbUIsNENBQTRDLFNBQVMsOEJBQThCLEVBQUUsZ0NBQWdDLHVDQUF1QyxnQkFBZ0IsNkJBQTZCLHdEQUF3RCw0Q0FBNEMsZ0JBQWdCLDhCQUE4QixTQUFTLFFBQVEsY0FBYywyQ0FBMkMsUUFBUSxjQUFjLHdDQUF3QyxRQUFRLCtCQUErQiwyTEFBMkwsNEJBQTRCLHdEQUF3RCxFQUFFLElBQUksd0RBQXdELE1BQU0saURBQWlELGdCQUFnQixZQUFZLEVBQUUsbUJBQW1CLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxHQUFHLHVTQUF1UyxzREFBc0QscUNBQXFDLHdCQUF3QixzQ0FBc0Msb0VBQW9FLFVBQVUsUUFBUSxlQUFlLFNBQVMsTUFBTSxTQUFTLFFBQVEsa0VBQWtFLDBEQUEwRCxNQUFNLE9BQU8sYUFBYSxNQUFNLHlCQUF5QixzR0FBc0csZ0dBQWdHLHFCQUFxQixtQkFBbUIsUUFBUSwwQkFBMEIsaUJBQWlCLHdCQUF3QixhQUFhLGVBQWUsSUFBSSx1Q0FBdUMsNEJBQTRCLG9EQUFvRCxvR0FBb0csT0FBTyxTQUFTLFVBQVUsU0FBUyxJQUFJLGlEQUFpRCwwQ0FBMEMsU0FBUyxLQUFLLGdCQUFnQixtQkFBbUIsdUNBQXVDLGlCQUFpQiwrREFBK0QscURBQXFELFNBQVMsVUFBVSw2Q0FBNkMsMmtCQUEya0IsaUJBQWlCLGFBQWEsRUFBRSxJQUFJLEtBQUssb0JBQW9CLGVBQWUsY0FBYyxtQ0FBbUMsT0FBTyx3QkFBd0IsdUJBQXVCLHVCQUF1QixJQUFJLEtBQUssZ0JBQWdCLDREQUE0RCxZQUFZLG1CQUFtQixtQ0FBbUMsWUFBWSxnQ0FBZ0MsdUJBQXVCLGlDQUFpQywrQkFBK0IsdUJBQXVCLDRIQUE0SCxnQkFBZ0IsK0NBQStDLHFCQUFxQix1Q0FBdUMsbURBQW1ELHFCQUFxQiw4QkFBOEIsUUFBUSxTQUFTLEdBQUcsWUFBWSxrQ0FBa0MsSUFBSSxxRkFBcUYsYUFBYSxzQkFBc0IscUJBQXFCLHVFQUF1RSxNQUFNLDJHQUEyRyx1QkFBdUIscUJBQXFCLG1FQUFtRSxlQUFlLG1DQUFtQyxVQUFVLFlBQVksZUFBZSxjQUFjLGVBQWUsY0FBYyxpQ0FBaUMsMkRBQTJELGVBQWUsb0JBQW9CLGlDQUFpQywrQkFBK0IsbUJBQW1CLGlCQUFpQiw0QkFBNEIsa0JBQWtCLGFBQWEsa0RBQWtELEdBQUcsbUJBQW1CLEdBQUcsaUJBQWlCLDRCQUE0Qix5QkFBeUIsc0JBQXNCLGFBQWEsa0RBQWtELEdBQUcsZ0JBQWdCLHNDQUFzQyx5Q0FBeUMsNEJBQTRCLDBOQUEwTix3QkFBd0IsMENBQTBDLDJCQUEyQixhQUFhLEVBQUUscUdBQXFHLGdCQUFnQixXQUFXLDZCQUE2QixrQkFBa0IsNkhBQTZILHdCQUF3QixJQUFJLDBEQUEwRCxxQkFBcUIsa0JBQWtCLHVDQUF1QyxTQUFTLGVBQWUsa0ZBQWtGLFVBQVUsa0pBQWtKLGFBQWEsR0FBRyx5QkFBeUIsVUFBVSxzQkFBc0IsbUNBQW1DLGlDQUFpQyxFQUFFLGtFQUFrRSxxQkFBcUIsY0FBYyxrQkFBa0IsdUZBQXVGLHNCQUFzQixZQUFZLFVBQVUsRUFBRSx1QkFBdUIsVUFBVSxjQUFjLEdBQUcsd0JBQXdCLHdCQUF3QixZQUFZLFdBQVcsc0NBQXNDLEVBQUUsaUJBQWlCLDJFQUEyRSxtQ0FBbUMsRUFBRSxHQUFHLDhCQUE4QixJQUFJLG9CQUFvQixrQkFBa0IsY0FBYyxRQUFRLHNFQUFzRSx1Q0FBdUMsaURBQWlELGtFQUFrRSxrQkFBa0Isa0ZBQWtGLDBCQUEwQiw2QkFBNkIscUNBQXFDLHVCQUF1QiwrRkFBK0YsRUFBRSxJQUFJLFlBQVksSUFBSSxzQkFBc0IscUNBQXFDLG9CQUFvQixrQkFBa0IsZUFBZSxTQUFTLG9GQUFvRiwwQkFBMEIsNkJBQTZCLHFDQUFxQyxxQkFBcUIsSUFBSSxlQUFlLDhGQUE4RixlQUFlLGtDQUFrQyxnQkFBZ0IsSUFBSSxrREFBa0QsbUJBQW1CLDZCQUE2QixtQ0FBbUMsVUFBVSxVQUFVLHdCQUF3QiwwQkFBMEIsTUFBTSxLQUFLLDBCQUEwQiw2QkFBNkIsTUFBTSxHQUFHLHNCQUFzQixlQUFlLFdBQVcsMkVBQTJFLDBCQUEwQixzRUFBc0UsS0FBSyxzREFBc0QsTUFBTSxjQUFjLGtDQUFrQyxPQUFPLDZEQUE2RCxlQUFlLGtDQUFrQyxFQUFFLEtBQUssa1FBQWtRLFdBQVcsbUJBQW1CLEtBQUssa0RBQWtELHdDQUF3QyxTQUFTLFdBQVcsK0JBQStCLEtBQUssRUFBRSxFQUFFLDBCQUEwQiwyQkFBMkIsU0FBUyxXQUFXLDJCQUEyQixLQUFLLEVBQUUsRUFBRSwwQkFBMEIsdUJBQXVCLFNBQVMsc0JBQXNCLGdIQUFnSCxFQUFFLG9DQUFvQyxrREFBa0QsbUJBQW1CLGlFQUFpRSxLQUFLLGdJQUFnSSw4Q0FBOEMsMkJBQTJCLDhEQUE4RCxvQkFBb0IsaUJBQWlCLHViQUF1YixxQkFBcUIsVUFBVSxrQkFBa0IsVUFBVSxPQUFPLGdCQUFnQixrQkFBa0IsaURBQWlELE9BQU8sZ0JBQWdCLFNBQVMsa0xBQWtMLFNBQVMsaVNBQWlTLE1BQU0saURBQWlELGdEQUFnRCxzQ0FBc0MseUVBQXlFLCtDQUErQyxrQkFBa0IsOEJBQThCLGNBQWMsVUFBVSx3RUFBd0UsZUFBZSxlQUFlLG1DQUFtQyxnQkFBZ0IsMkJBQTJCLDZDQUE2QyxxQkFBcUIsbVVBQW1VLDBCQUEwQixzRkFBc0YsNEZBQTRGLE9BQU8sdUZBQXVGLE9BQU8sb1BBQW9QLHlEQUF5RCx5REFBeUQsNFZBQTRWLFlBQVksbURBQW1ELGtCQUFrQix1Q0FBdUMsaUJBQWlCLG9HQUFvRyxxQkFBcUIsZUFBZSw2Q0FBNkMsd0JBQXdCLGlGQUFpRixxREFBcUQsd0NBQXdDLEVBQUUsOEJBQThCLDRCQUE0QixzREFBc0QseURBQXlELDREQUE0RCxZQUFZLFdBQVcsMEZBQTBGLGdFQUFnRSxRQUFRLGtCQUFrQiwwREFBMEQsYUFBYSwrREFBK0QsdUxBQXVMLFlBQVksMlNBQTJTLCtEQUErRCwwQkFBMEIsd0RBQXdELGlCQUFpQiw0RkFBNEYsYUFBYSw2QkFBNkIsd0NBQXdDLEdBQUcsOENBQThDLCtEQUErRCxhQUFhLDJHQUEyRyw0QkFBNEIsdUVBQXVFLGdCQUFnQixxQkFBcUIsMkRBQTJELHFCQUFxQiwyREFBMkQsOEJBQThCLG9DQUFvQyxJQUFJLFVBQVUsR0FBRyx3QkFBd0IsVUFBVSxFQUFFLHFDQUFxQyw4QkFBOEIsNEJBQTRCLHlEQUF5RCxFQUFFLElBQUksT0FBTywrQ0FBK0MsMEJBQTBCLDZCQUE2Qiw2QkFBNkIsR0FBRyw4QkFBOEIsaUJBQWlCLGdEQUFnRCxTQUFTLHlEQUF5RCx5Q0FBeUMsNEZBQTRGLHlKQUF5Siw2Q0FBNkMsdUJBQXVCLElBQUksb0RBQW9ELFVBQVUsd0JBQXdCLHNCQUFzQixLQUFLLHlDQUF5Qyx5SEFBeUgsb0JBQW9CLGlCQUFpQix3RkFBd0Ysb0JBQW9CLHVCQUF1QixJQUFJLEtBQUssaUVBQWlFLGtFQUFrRSxzSkFBc0oscUJBQXFCLFVBQVUsa0JBQWtCLFVBQVUsU0FBUyx3Q0FBd0MsT0FBTyxpREFBaUQsV0FBVyx3QkFBd0Isd0NBQXdDLGtHQUFrRyxtQ0FBbUMsYUFBYSwyQkFBMkIsMkRBQTJELHdFQUF3RSxlQUFlLGlDQUFpQyxVQUFVLHlDQUF5QyxHQUFHLDZCQUE2QiwyS0FBMkssaUJBQWlCLDhCQUE4QixFQUFFLDBCQUEwQix1S0FBdUssOENBQThDLGlCQUFpQixJQUFJLE9BQU8sa0RBQWtELHdFQUF3RSw2QkFBNkIsMEJBQTBCLHlDQUF5Qyw0RkFBNEYsa0NBQWtDLFlBQVksSUFBSSxLQUFLLHNDQUFzQyw2REFBNkQsNkVBQTZFLDJJQUEySSxvQkFBb0IsMEJBQTBCLGdDQUFnQyxjQUFjLFVBQVUsa0RBQWtELCtEQUErRCxnQkFBZ0IsZ0ZBQWdGLHNCQUFzQiwrQkFBK0Isd0NBQXdDLHlFQUF5RSxjQUFjLHdEQUF3RCxHQUFHLCtCQUErQix5QkFBeUIsK0VBQStFLEdBQUcsMEJBQTBCLDZCQUE2QixXQUFXLHVEQUF1RCx1Q0FBdUMsdUJBQXVCLHlEQUF5RCxFQUFFLElBQUksUUFBUSxJQUFJLDREQUE0RCwrRkFBK0YsaUJBQWlCLHdCQUF3QiwwQkFBMEIsVUFBVSxXQUFXLEdBQUcsVUFBVSxnY0FBZ2MsNEdBQTRHLEtBQUssc0xBQXNMLG9CQUFvQixpQkFBaUIsaUlBQWlJLHFCQUFxQixVQUFVLHlCQUF5QixVQUFVLGtCQUFrQixVQUFVLFNBQVMsK0NBQStDLE9BQU8sdURBQXVELFNBQVMsNkJBQTZCLDBFQUEwRSwrQ0FBK0Msd1pBQXdaLE9BQU8sd0RBQXdELFNBQVMsNkJBQTZCLHNCQUFzQixVQUFVLHFEQUFxRCxTQUFTLHdFQUF3RSxpQkFBaUIsbWJBQW1iLGNBQWMsTUFBTSx3RUFBd0UsbUtBQW1LLGlCQUFpQixpR0FBaUcsU0FBUyxpQkFBaUIsa0dBQWtHLG9CQUFvQixrS0FBa0ssZ0dBQWdHLHFGQUFxRiwwQkFBMEIsZ0NBQWdDLGtCQUFrQixvQ0FBb0MsZ0JBQWdCLGlDQUFpQyw2Q0FBNkMsK0NBQStDLHNGQUFzRixzREFBc0QsZ0JBQWdCLCtDQUErQyxhQUFhLE1BQU0sU0FBUyxjQUFjLG1IQUFtSCxtQkFBbUIsU0FBUywyQ0FBMkMsZ0NBQWdDLGdDQUFnQyxFQUFFLHVCQUF1QiwwQkFBMEIsR0FBRyxzREFBc0QsOEJBQThCLElBQUksNkdBQTZHLGlCQUFpQixlQUFlLEVBQUUscUdBQXFHLGdEQUFnRCwwQkFBMEIsNkJBQTZCLHVDQUF1Qyx1QkFBdUIseURBQXlELEVBQUUsSUFBSSxRQUFRLEdBQUcscUJBQXFCLDZEQUE2RCxvQkFBb0IsdUJBQXVCLElBQUksS0FBSyw2QkFBNkIseUNBQXlDLDBCQUEwQixTQUFTLDBCQUEwQixNQUFNLCtDQUErQywyR0FBMkcsdUlBQXVJLG1DQUFtQyxvQkFBb0IsK0JBQStCLDJCQUEyQixnQ0FBZ0MsMElBQTBJLG9DQUFvQyx5QkFBeUIsMERBQTBELDhFQUE4RSx5SEFBeUgsVUFBVSw0TkFBNE4seURBQXlELFVBQVUsOEVBQThFLFNBQVMsY0FBYyw0QkFBNEIsV0FBVyw2Q0FBNkMscUNBQXFDLE9BQU8sd0JBQXdCLHVNQUF1TSxtQkFBbUIsMkZBQTJGLDZCQUE2Qix3QkFBd0IsdUNBQXVDLCtEQUErRCxnQ0FBZ0Msc0NBQXNDLGNBQWMsd0JBQXdCLElBQUksR0FBRyxRQUFRLGlOQUFpTiwyQkFBMkIsbUJBQW1CLDhCQUE4Qiw2QkFBNkIsdUNBQXVDLGlDQUFpQyxnRkFBZ0YsR0FBRyxnQ0FBZ0MsK0NBQStDLGdCQUFnQiwwQkFBMEIsVUFBVSw0RkFBNEYsS0FBSywySEFBMkgsc0NBQXNDLFNBQVMsZUFBZSx1RUFBdUUsUUFBUSx5SkFBeUosTUFBTSxVQUFVLFFBQVEsNkZBQTZGLHFCQUFxQixVQUFVLGNBQWMsbUJBQW1CLHNDQUFzQyxvR0FBb0cscUJBQXFCLGNBQWMsVUFBVSxpQ0FBaUMsc0RBQXNELFVBQVUseUdBQXlHLCtCQUErQix3QkFBd0IsVUFBVSx3RkFBd0YscUJBQXFCLGtEQUFrRCxVQUFVLDhCQUE4QixLQUFLLDBDQUEwQyxrQ0FBa0MsU0FBUyxlQUFlLGlGQUFpRixXQUFXLE1BQU0sMEJBQTBCLGNBQWMsK01BQStNLGFBQWEsd0RBQXdELGtCQUFrQixNQUFNLFNBQVMsSUFBSSxjQUFjLGNBQWMsNkNBQTZDLGdDQUFnQyx5RkFBeUYsa0JBQWtCLG1FQUFtRSxjQUFjLFVBQVUsaUNBQWlDLHlCQUF5QixpQ0FBaUMsaUNBQWlDLEtBQUssK0RBQStELG9NQUFvTSxvQkFBb0IsaUJBQWlCLG9SQUFvUixxQkFBcUIsVUFBVSxrQkFBa0IsVUFBVSxVQUFVLDhDQUE4QyxRQUFRLG1FQUFtRSxnQkFBZ0IsMk9BQTJPLHFEQUFxRCx5REFBeUQsR0FBRyxtREFBbUQsT0FBTyxnREFBZ0QscUVBQXFFLGlCQUFpQiwyQkFBMkIsMFBBQTBQLFVBQVUsZ0lBQWdJLGVBQWUscUJBQXFCLHNCQUFzQixlQUFlLHVFQUF1RSxFQUFFLHVCQUF1QixlQUFlLDBCQUEwQixFQUFFLGNBQWMsVUFBVSx3RUFBd0UsZUFBZSxnQkFBZ0Isb0VBQW9FLDBaQUEwWixtSEFBbUgsZ0JBQWdCLEVBQUUsa0JBQWtCLGtCQUFrQiwwQ0FBMEMsd0lBQXdJLDRCQUE0QixrQkFBa0IsNEVBQTRFLGFBQWEscU5BQXFOLGlIQUFpSCxHQUFHLGlCQUFpQiw0QkFBNEIsZ01BQWdNLDBCQUEwQixjQUFjLGdEQUFnRCw2QkFBNkIsOEVBQThFLE1BQU0sbUNBQW1DLHlEQUF5RCwyR0FBMkcsMENBQTBDLGVBQWUsZ0JBQWdCLHVDQUF1QyxnQkFBZ0IsNEdBQTRHLGlFQUFpRSxFQUFFLHVFQUF1RSxFQUFFLEtBQUssb0JBQW9CLHVFQUF1RSw0QkFBNEIsNkJBQTZCLHVDQUF1Qyx1QkFBdUIseURBQXlELEVBQUUsSUFBSSxTQUFTLElBQUksaUZBQWlGLGlCQUFpQix5RUFBeUUsc0NBQXNDLHVCQUF1QixHQUFHLEdBQUcsa0NBQWtDLG1FQUFtRSxpQkFBaUIseUJBQXlCLGtDQUFrQyxLQUFLLHVEQUF1RCx5REFBeUQsb0JBQW9CLGlCQUFpQiwwS0FBMEssa0JBQWtCLFVBQVUscUJBQXFCLFVBQVUsVUFBVSw4Q0FBOEMsUUFBUSw2REFBNkQsZ0JBQWdCLHlVQUF5VSwrRkFBK0YsZ0JBQWdCLEVBQUUscUJBQXFCLE9BQU8sdU9BQXVPLDBPQUEwTyxzQkFBc0IsVUFBVSxzRUFBc0UsY0FBYyxVQUFVLHdFQUF3RSxlQUFlLHNCQUFzQixlQUFlLGdKQUFnSixFQUFFLHVCQUF1QixlQUFlLDBCQUEwQixFQUFFLHFCQUFxQix3REFBd0QscURBQXFELEdBQUcsMEJBQTBCLDZCQUE2Qix1Q0FBdUMsdUJBQXVCLCtGQUErRixFQUFFLElBQUksWUFBWSxJQUFJLHlGQUF5RixpQkFBaUIsMkVBQTJFLGtCQUFrQix1QkFBdUIsR0FBRyx1QkFBdUIsMEVBQTBFLDZIQUE2SCxzUkFBc1Isa0NBQWtDLGlDQUFpQyx1RkFBdUYsMkNBQTJDLHVCQUF1QixJQUFJLDZCQUE2QixVQUFVLG1CQUFtQixzQkFBc0IsdUNBQXVDLDJHQUEyRyx1QkFBdUIsSUFBSSxLQUFLLHdDQUF3QyxnQ0FBZ0MsV0FBVyxTQUFTLG9FQUFvRSxlQUFlLHVDQUF1QyxHQUFHLHdCQUF3Qix5RUFBeUUsZ2NBQWdjLEtBQUsseUZBQXlGLEtBQUssOFdBQThXLDZUQUE2VCxtQkFBbUIsS0FBSyw0UkFBNFIsaUhBQWlILG9CQUFvQixpQkFBaUIsaUdBQWlHLHNGQUFzRixzRkFBc0YscUJBQXFCLFVBQVUsa0JBQWtCLFVBQVUsbUJBQW1CLFVBQVUseUJBQXlCLFVBQVUsU0FBUyxtQkFBbUIsVUFBVSxtQkFBbUIsZ0JBQWdCLGlDQUFpQyxVQUFVLHlCQUF5Qiw2Q0FBNkMsMEdBQTBHLEtBQUssa0ZBQWtGLHdCQUF3QixVQUFVLDBKQUEwSixPQUFPLCtGQUErRixrREFBa0QsMkxBQTJMLGlDQUFpQyw2SkFBNkosb0NBQW9DLEdBQUcsaUNBQWlDLGtDQUFrQyxTQUFTLHlCQUF5QixvSEFBb0gsb0pBQW9KLDRCQUE0QixNQUFNLFlBQVksY0FBYyxrU0FBa1MsZ0VBQWdFLGlJQUFpSSx3QkFBd0IsR0FBRyx3Q0FBd0MsMEJBQTBCLHlCQUF5Qiw0R0FBNEcsY0FBYyxPQUFPLHdCQUF3Qiw2QkFBNkIsaUZBQWlGLHFPQUFxTyx3Q0FBd0MsMEJBQTBCLHVOQUF1TixrQ0FBa0MsU0FBUywyQ0FBMkMsZ0JBQWdCLGdDQUFnQyxnQkFBZ0IsNEJBQTRCLHNDQUFzQyxrQ0FBa0Msc0JBQXNCLHdFQUF3RSxjQUFjLGtEQUFrRCw4QkFBOEIsd0JBQXdCLDZDQUE2Qyx1QkFBdUIsOFFBQThRLFdBQVcsaUZBQWlGLHdDQUF3QyxvQkFBb0IsNkNBQTZDLGtDQUFrQywyRkFBMkYsYUFBYSxNQUFNLFNBQVMsY0FBYyxtSEFBbUgsNEJBQTRCLG1EQUFtRCxvQkFBb0IsU0FBUyx3QkFBd0IscUJBQXFCLG9EQUFvRCxFQUFFLHVCQUF1QiwwQkFBMEIsRUFBRSxnQ0FBZ0MsZ0NBQWdDLEVBQUUsc0JBQXNCLFlBQVksc0JBQXNCLFNBQVMsRUFBRSx5RkFBeUYsb0JBQW9CLDBFQUEwRSxPQUFPLDZHQUE2Ryx1QkFBdUIsc0NBQXNDLDRCQUE0QixHQUFHLHlCQUF5QixHQUFHLGtCQUFrQiwyQkFBMkIsZ0JBQWdCLDZDQUE2QywyR0FBMkcsc0JBQXNCLDJKQUEySixtSUFBbUksK0JBQStCLDJCQUEyQixnR0FBZ0csNkNBQTZDLGtCQUFrQixZQUFZLDBHQUEwRywyT0FBMk8sWUFBWSx1UkFBdVIsNkJBQTZCLGtDQUFrQyxZQUFZLHNRQUFzUSw2QkFBNkIsa0NBQWtDLHVCQUF1QixzRUFBc0UsU0FBUyxjQUFjLDRDQUE0QyxtQ0FBbUMsdUJBQXVCLE9BQU8sK0RBQStELCtGQUErRiwwQkFBMEIsK05BQStOLHFCQUFxQixXQUFXLGtHQUFrRyxTQUFTLGlCQUFpQixvREFBb0QsNEJBQTRCLDhDQUE4QywrRUFBK0UsdUJBQXVCLG1CQUFtQixnQ0FBZ0MsTUFBTSxRQUFRLEdBQUcsaUhBQWlILGlCQUFpQix5REFBeUQsMEJBQTBCLDZCQUE2Qix1Q0FBdUMsdUJBQXVCLHlEQUF5RCxFQUFFLElBQUksUUFBUSxJQUFJLE9BQU8sVUFBVSwrTkFBK04sS0FBSyxzREFBc0QsS0FBSyw2UkFBNlIsb0JBQW9CLHFCQUFxQixVQUFVLGtCQUFrQixnQkFBZ0IsbUJBQW1CLFVBQVUseUJBQXlCLFVBQVUsZ0JBQWdCLDJDQUEyQyxjQUFjLG1JQUFtSSxjQUFjLDJEQUEyRCx1QkFBdUIsbUJBQW1CLDBCQUEwQiw2QkFBNkIsdUNBQXVDLHVCQUF1Qix5REFBeUQsRUFBRSxJQUFJLFFBQVEsSUFBSSxPQUFPLHlCQUF5QixrQ0FBa0MsS0FBSywwREFBMEQsNEVBQTRFLG9CQUFvQixpQkFBaUIsc1NBQXNTLHFCQUFxQixVQUFVLGtCQUFrQixVQUFVLFVBQVUsMEpBQTBKLHNIQUFzSCxxQ0FBcUMsTUFBTSxrQ0FBa0MsOENBQThDLFlBQVksd0RBQXdELGtEQUFrRCxHQUFHLFVBQVUsNERBQTRELGNBQWMsVUFBVSwyRUFBMkUsOERBQThELGdCQUFnQixrR0FBa0csbUJBQW1CLG9IQUFvSCxtQkFBbUIsMEdBQTBHLFdBQVcsMkhBQTJILGdEQUFnRCw4Q0FBOEMsMENBQTBDLEtBQUssZ0hBQWdILCtCQUErQixJQUFJLG9KQUFvSixhQUFhLG1DQUFtQyxpQ0FBaUMsRUFBRSxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLG9EQUFvRCxpTEFBaUwsK0dBQStHLDZEQUE2RCxHQUFHLDJEQUEyRCxnQkFBZ0IsRUFBRSxTQUFTLDJHQUEyRywwQkFBMEIsNkJBQTZCLHVDQUF1Qyx1QkFBdUIseURBQXlELEVBQUUsSUFBSSxRQUFRLElBQUksZ0RBQWdELDBEQUEwRCxVQUFVLDhFQUE4RSxvQkFBb0Isa0JBQWtCLFlBQVksT0FBTyxnSUFBZ0ksTUFBTSx1RUFBdUUsTUFBTSxtREFBbUQsK0JBQStCLHNDQUFzQyw0QkFBNEIsT0FBTywyQ0FBMkMsZ0JBQWdCLHdEQUF3RCxnQ0FBZ0MsYUFBYSw4QkFBOEIsNEJBQTRCLDJDQUEyQyxnQkFBZ0IsR0FBRyx1Q0FBdUMsaUJBQWlCLDZKQUE2Siw4REFBOEQsMkJBQTJCLE1BQU0sdUJBQXVCLG1FQUFtRSw2RkFBNkYsMklBQTJJLG1CQUFtQixvRkFBb0YsK0JBQStCLHNHQUFzRyxPQUFPLDBCQUEwQiw2QkFBNkIscUNBQXFDLHVCQUF1Qix5REFBeUQsRUFBRSxJQUFJLFFBQVEsSUFBSSwrSEFBK0gsc0dBQXNHLFVBQVUsc0RBQXNELHNEQUFzRCxLQUFLLG9DQUFvQyxvQkFBb0IsaUJBQWlCLDhJQUE4SSx5QkFBeUIsVUFBVSxxQkFBcUIsVUFBVSxrQkFBa0IsVUFBVSxPQUFPLDZSQUE2Uix3R0FBd0cseUNBQXlDLE9BQU8sOEpBQThKLGtKQUFrSiwwQ0FBMEMsVUFBVSw4R0FBOEcsY0FBYyxVQUFVLDJFQUEyRSx5Q0FBeUMscUJBQXFCLGlIQUFpSCxZQUFZLHdCQUF3QixvQkFBb0IsZUFBZSwyREFBMkQsTUFBTSw0REFBNEQsc0NBQXNDLHdCQUF3Qix3RUFBd0UsZ0JBQWdCLGdTQUFnUyxnQkFBZ0IsK0NBQStDLDBCQUEwQiw2QkFBNkIsdUNBQXVDLHVCQUF1Qix5REFBeUQsRUFBRSxJQUFJLFlBQVksSUFBSSxjQUFjLHFCQUFxQixxQ0FBcUMsaUNBQWlDLElBQUksdUZBQXVGLFNBQVMsMEJBQTBCLG1CQUFtQixjQUFjLG1DQUFtQyx5Q0FBeUMsdUJBQXVCLG1CQUFtQixrQ0FBa0MsaUNBQWlDLGlCQUFpQixpR0FBaUcsa0JBQWtCLHFCQUFxQiwyQkFBMkIsb0RBQW9ELGtDQUFrQyxrQkFBa0IsYUFBYSxLQUFLLGlDQUFpQyxrQkFBa0IsMEJBQTBCLHFDQUFxQyxnQ0FBZ0MsR0FBRyxrQkFBa0IsY0FBYyw2SEFBNkgsaUJBQWlCLGNBQWMsMjRCQUEyNEIscUJBQXFCLGFBQWEsNkNBQTZDLGtEQUFrRCxXQUFXLDhCQUE4QiwrQkFBK0IscUJBQXFCLE9BQU8sMkRBQTJELHNDQUFzQyxrQ0FBa0MsU0FBUyxvQ0FBb0MsbUdBQW1HLEdBQUcsU0FBUyxrQkFBa0IscUNBQXFDLHlDQUF5QywwRkFBMEYsR0FBRyxpQkFBaUIsbUNBQW1DLG9DQUFvQyxHQUFHLGtCQUFrQixhQUFhLDhDQUE4QywyQ0FBMkMsT0FBTyx3Q0FBd0MsOEZBQThGLHNDQUFzQyxJQUFJLHlCQUF5QixNQUFNLGlCQUFpQixzQ0FBc0MsU0FBUyxrQkFBa0IseUNBQXlDLG1CQUFtQixvQ0FBb0MsZ0NBQWdDLE1BQU0sK0JBQStCLDBHQUEwRyxZQUFZLGlDQUFpQyxnQ0FBZ0MsTUFBTSwrQkFBK0IsOERBQThELFlBQVksb0NBQW9DLDZCQUE2QixtQ0FBbUMsTUFBTSw0QkFBNEIsWUFBWSxpQkFBaUIsSUFBSSx1REFBdUQsUUFBUSxXQUFXLEtBQUssV0FBVywrQkFBK0IsZ0NBQWdDLEdBQUcscUJBQXFCLGFBQWEsbUJBQW1CLG1DQUFtQyx3QkFBd0IsK0JBQStCLFNBQVMsNENBQTRDLGtCQUFrQixPQUFPLHFEQUFxRCxXQUFXLEtBQUsscUNBQXFDLHdDQUF3Qyw0QkFBNEIsR0FBRyxZQUFZLHFEQUFxRCxHQUFHLGtCQUFrQixhQUFhLDBEQUEwRCxpREFBaUQsa0JBQWtCLDJDQUEyQyxtQ0FBbUMseUNBQXlDLElBQUkscUJBQXFCLFNBQVMsNEJBQTRCLHFEQUFxRCxlQUFlLDRCQUE0QixpQkFBaUIsdUJBQXVCLCtCQUErQixrREFBa0QsZUFBZSx3QkFBd0IsaUJBQWlCLG1CQUFtQiwrQkFBK0Isb0RBQW9ELGVBQWUsU0FBUywrQkFBK0IsNkNBQTZDLGVBQWUsZ0NBQWdDLGlCQUFpQiwyQkFBMkIsK0JBQStCLCtDQUErQyxlQUFlLCtCQUErQixpQkFBaUIsMkJBQTJCLCtCQUErQixpQ0FBaUMsNkJBQTZCLGtDQUFrQyx3QkFBd0IsMENBQTBDLGdCQUFnQixXQUFXLDJGQUEyRix3QkFBd0IsR0FBRywrQkFBK0IsZ0NBQWdDLFdBQVcsdUJBQXVCLDZCQUE2QixHQUFHLGdDQUFnQyxtREFBbUQsaUNBQWlDLG9DQUFvQyxzQ0FBc0Msd0NBQXdDLGtDQUFrQyxrQ0FBa0MsdUNBQXVDLCtCQUErQixrQ0FBa0MscUJBQXFCLHFEQUFxRCxxQ0FBcUMsNkNBQTZDLGtDQUFrQywwQ0FBMEMsaUNBQWlDLHFDQUFxQyxnQ0FBZ0MsOEJBQThCLGtDQUFrQyw0RkFBNEYsOEJBQThCLHFCQUFxQixvQ0FBb0MsaUNBQWlDLHlDQUF5QyxlQUFlLDBCQUEwQixpQkFBaUIsa0JBQWtCLCtCQUErQiwrQkFBK0IsdUNBQXVDLG1FQUFtRSxxQ0FBcUMsZ0JBQWdCLHFDQUFxQyxHQUFHLGFBQWEsU0FBUyxpQ0FBaUMsb0VBQW9FLHNDQUFzQyw2QkFBNkIscUNBQXFDLDRCQUE0QixnQ0FBZ0Msb0JBQW9CLHlCQUF5QixzQkFBc0Isa0NBQWtDLEtBQUssc0JBQXNCLHFCQUFxQixZQUFZLFdBQVcsS0FBSyxXQUFXLGlCQUFpQixrQkFBa0IsMkNBQTJDLHdWQUF3VixtQ0FBbUMsZ0RBQWdELGtDQUFrQyxnQkFBZ0Isd0ZBQXdGLHlDQUF5QyxRQUFRLEdBQUcsOEJBQThCLDhEQUE4RCxtQ0FBbUMsZ0tBQWdLLHdCQUF3Qiw0QkFBNEIsb0dBQW9HLHdCQUF3QixpS0FBaUssb0JBQW9CLG9MQUFvTCxvQkFBb0IsNEJBQTRCLDhEQUE4RCxzQkFBc0Isc0dBQXNHLHNCQUFzQixrQ0FBa0MsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMsZUFBZSx3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGlCQUFpQixjQUFjLHlCQUF5QixxQkFBcUIsNkNBQTZDLGtUQUFrVCwwQ0FBMEMsZUFBZSw0TkFBNE4saUJBQWlCLGlKQUFpSiwrQkFBK0IsOENBQThDLGdCQUFnQix5QkFBeUIsK0JBQStCLGlEQUFpRCxlQUFlLHFDQUFxQyxpQkFBaUIsNkJBQTZCLCtCQUErQixnREFBZ0QsZUFBZSx1RUFBdUUsaUJBQWlCLG9FQUFvRSwrQkFBK0IsZ0RBQWdELGVBQWUsbUpBQW1KLGlCQUFpQiwrR0FBK0csS0FBSyw0QkFBNEIseUJBQXlCLCtCQUErQiw2Q0FBNkMsZUFBZSw4Q0FBOEMsaUJBQWlCLDhCQUE4QiwrQkFBK0IsK0JBQStCLG9DQUFvQyw0Q0FBNEMsV0FBVyxzREFBc0QseURBQXlELFdBQVcsUUFBUSx5Q0FBeUMsRUFBRSxHQUFHLCtCQUErQixnREFBZ0QsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsY0FBYyxjQUFjLHVDQUF1QywwQ0FBMEMsNENBQTRDLHVFQUF1RSw4RUFBOEUsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsZ0JBQWdCLG1CQUFtQix5QkFBeUIscURBQXFELDZDQUE2QywwRkFBMEYsNE1BQTRNLG9DQUFvQyx1QkFBdUIsZUFBZSwwQ0FBMEMsK0NBQStDLGdDQUFnQyxtQkFBbUIsOEJBQThCLHFGQUFxRixtREFBbUQsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsZ0JBQWdCLHlCQUF5QixzRkFBc0YsMkNBQTJDLDhCQUE4QixXQUFXLHlEQUF5RCxxQ0FBcUMsT0FBTyw2Q0FBNkMsaUNBQWlDLGdCQUFnQixxQkFBcUIsbUZBQW1GLHNCQUFzQixtQkFBbUIsR0FBRyx3Q0FBd0MsSUFBSSxPQUFPLDhDQUE4QyxpR0FBaUcsU0FBUyxpRkFBaUYsY0FBYyxZQUFZLGtDQUFrQyxHQUFHLGdFQUFnRSx1Q0FBdUMsT0FBTyw4Q0FBOEMsOEJBQThCLHNFQUFzRSxHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixjQUFjLHlCQUF5Qix5SEFBeUgsNkNBQTZDLFdBQVcsK0lBQStJLG9DQUFvQyw0RUFBNEUsbUNBQW1DLHFFQUFxRSxZQUFZLGdEQUFnRCxLQUFLLG1DQUFtQyw2QkFBNkIsa0NBQWtDLDJLQUEySyx1REFBdUQsNENBQTRDLHFFQUFxRSxHQUFHLGlCQUFpQiw4QkFBOEIsOERBQThELEdBQUcsbUJBQW1CLG9CQUFvQixpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMscUJBQXFCLHdIQUF3SCxhQUFhLG1CQUFtQiw4RUFBOEUsa0JBQWtCLGNBQWMseUJBQXlCLHVMQUF1TCxvREFBb0QsK01BQStNLGlDQUFpQyx1Q0FBdUMsa0NBQWtDLHFDQUFxQywrQkFBK0IsV0FBVywrQ0FBK0Msb0NBQW9DLGtGQUFrRixPQUFPLDRGQUE0RixzREFBc0QseUJBQXlCLEtBQUssOERBQThELGdCQUFnQixHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixhQUFhLHlCQUF5QixvQkFBb0IsMkNBQTJDLHNEQUFzRCxrQ0FBa0Msb0NBQW9DLDhCQUE4QixHQUFHLEdBQUcsbUJBQW1CLG9CQUFvQixpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMscUJBQXFCLHdIQUF3SCxhQUFhLG1CQUFtQiw4RUFBOEUsa0JBQWtCLGFBQWEseUJBQXlCLG9CQUFvQiw2Q0FBNkMsd0dBQXdHLDhCQUE4QixvQ0FBb0MsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsYUFBYSx5QkFBeUIsb0JBQW9CLDZDQUE2QyxpR0FBaUcseUNBQXlDLDRCQUE0QixzRUFBc0UseUNBQXlDLHlEQUF5RCw0Q0FBNEMsNkRBQTZELDhDQUE4QyxxREFBcUQsNEpBQTRKLHVDQUF1Qyx1Q0FBdUMsK0tBQStLLGlDQUFpQyxrQ0FBa0MsK0NBQStDLHNDQUFzQyxzQkFBc0IsWUFBWSxHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixnQkFBZ0IsdUJBQXVCLGNBQWMsOEJBQThCLDBDQUEwQyw0Q0FBNEMsdUVBQXVFLDJFQUEyRSxHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixjQUFjLHlCQUF5QixnQ0FBZ0MsNkNBQTZDLHVDQUF1Qyw0R0FBNEcsOEJBQThCLG1DQUFtQyxzQ0FBc0MsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsY0FBYyxtQkFBbUIsbURBQW1ELFFBQVEsb0RBQW9ELDZDQUE2QyxXQUFXLHNFQUFzRSwyQkFBMkIsK0NBQStDLDhCQUE4QixnRUFBZ0UsaURBQWlELGVBQWUsOEVBQThFLEdBQUcsbUJBQW1CLG9CQUFvQixpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMscUJBQXFCLHdIQUF3SCxhQUFhLG1CQUFtQiw4RUFBOEUsa0JBQWtCLGNBQWMsMkJBQTJCLGdDQUFnQyw2Q0FBNkMsb0RBQW9ELGtDQUFrQyxrRkFBa0YsNkNBQTZDLHdDQUF3QyxXQUFXLG1EQUFtRCw0QkFBNEIsR0FBRyw4QkFBOEIsdUVBQXVFLCtCQUErQixHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixjQUFjLDJCQUEyQixnQ0FBZ0Msd0RBQXdELHlEQUF5RCxpRUFBaUUsZUFBZSxHQUFHLCtFQUErRSwrQkFBK0IsV0FBVyw0R0FBNEcsc0NBQXNDLEVBQUUsaURBQWlELEVBQUUsZ0RBQWdELDJCQUEyQixnR0FBZ0csZ0NBQWdDLEVBQUUsb0NBQW9DLDZJQUE2SSw4QkFBOEIsdUVBQXVFLCtCQUErQixHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixjQUFjLHlCQUF5QixrYkFBa2IsY0FBYyxHQUFHLDZDQUE2QyxtREFBbUQsaUVBQWlFLEtBQUssdXJDQUF1ckMsc0RBQXNELG1JQUFtSSxpRkFBaUYsSUFBSSw2QkFBNkIsMEJBQTBCLG1DQUFtQywyQkFBMkIsNEJBQTRCLHNHQUFzRyw0VEFBNFQsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsY0FBYyx5QkFBeUIsMkNBQTJDLGdFQUFnRSxlQUFlLHdDQUF3QyxpQkFBaUIsZ0NBQWdDLCtCQUErQixrQ0FBa0Msa0RBQWtELGtDQUFrQyxXQUFXLHVCQUF1QixvQkFBb0IsR0FBRywrQkFBK0IsMERBQTBELDhCQUE4QixnRUFBZ0UsbUJBQW1CLGVBQWUscUZBQXFGLGdCQUFnQixxQ0FBcUMsS0FBSyxpQ0FBaUMsMERBQTBELGtDQUFrQyxTQUFTLHlDQUF5QyxpQkFBaUIscUNBQXFDLGdFQUFnRSxHQUFHLEtBQUssMENBQTBDLHNFQUFzRSxtQ0FBbUMsNENBQTRDLEVBQUUsNENBQTRDLGlDQUFpQyxjQUFjLHdHQUF3RyxFQUFFLDZCQUE2QiwyTkFBMk4sbUlBQW1JLDZCQUE2QixhQUFhLEVBQUUsd0VBQXdFLG1DQUFtQyxxQ0FBcUMsRUFBRSx5QkFBeUIsRUFBRSw2Q0FBNkMsRUFBRSwrQkFBK0IsbUpBQW1KLHFCQUFxQixxQkFBcUIseUNBQXlDLG1CQUFtQiwwR0FBMEcseUNBQXlDLDRDQUE0QyxxQkFBcUIsR0FBRyxzQ0FBc0MsNEJBQTRCLGdDQUFnQyxrQkFBa0IsT0FBTyxLQUFLLG9DQUFvQyxvQ0FBb0MsbUJBQW1CLG1DQUFtQyxnREFBZ0Qsb0JBQW9CLGdEQUFnRCxrQkFBa0IsV0FBVyx5QkFBeUIsbUNBQW1DLDRDQUE0QyxHQUFHLG1CQUFtQixvQkFBb0IsaUNBQWlDLGFBQWEsZ0NBQWdDLGNBQWMsZ0JBQWdCLHNFQUFzRSxTQUFTLHFCQUFxQix3SEFBd0gsYUFBYSxtQkFBbUIsOEVBQThFLGtCQUFrQixhQUFhLHlCQUF5QixtQkFBbUIsOENBQThDLCtCQUErQiw2QkFBNkIsMEJBQTBCLDhDQUE4QyxtR0FBbUcsdUNBQXVDLHFDQUFxQyxxQkFBcUIsR0FBRyx3Q0FBd0MsMEJBQTBCLHlDQUF5QyxtQ0FBbUMsZ0NBQWdDLEdBQUcsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsYUFBYSx5QkFBeUIsb0JBQW9CLDZDQUE2QywwRUFBMEUsR0FBRyxtQkFBbUIsb0JBQW9CLGlDQUFpQyxhQUFhLGdDQUFnQyxjQUFjLGdCQUFnQixzRUFBc0UsU0FBUyxxQkFBcUIsd0hBQXdILGFBQWEsbUJBQW1CLDhFQUE4RSxrQkFBa0IsYUFBYSx5QkFBeUIsb0JBQW9CLDZDQUE2Qyw2Q0FBNkMscUNBQXFDLHVDQUF1QyxrQkFBa0IsR0FBRyxrQ0FBa0Msa0dBQWtHLHFDQUFxQyxHQUFHLHVDQUF1QyxvQ0FBb0MseUNBQXlDLEdBQUcsNkJBQTZCLHFDQUFxQyx1Q0FBdUMsc0JBQXNCLEdBQUcsd0NBQXdDLDBCQUEwQix5QkFBeUIsU0FBUyxnQ0FBZ0MsdUJBQXVCLEtBQUssc0NBQXNDLG9DQUFvQyxtQ0FBbUMsUUFBUSw4QkFBOEIsdUJBQXVCLEtBQUssdUNBQXVDLHFDQUFxQyxrQ0FBa0MsR0FBRyxvQ0FBb0MsNEJBQTRCLE1BQU0sMENBQTBDLG1FQUFtRSxnQkFBZ0Isb0JBQW9CLDZHQUE2RyxtREFBbUQsU0FBUyxvQkFBb0IsbUNBQW1DLG1CQUFtQiwyQkFBMkIsNEJBQTRCLEdBQUcsbUJBQW1CLG9CQUFvQixpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMscUJBQXFCLHdIQUF3SCxhQUFhLG1CQUFtQiw4RUFBOEUsc0JBQXNCLG9EQUFvRCxJQUFJLHFFQUFxRSxrREFBa0QsZ0JBQWdCLGNBQWMseUJBQXlCLDBJQUEwSSw4QkFBOEIsOFFBQThRLHNEQUFzRCxhQUFhLHFEQUFxRCxlQUFlLG9DQUFvQywrQkFBK0Isa0RBQWtELGVBQWUsK0JBQStCLCtCQUErQixvREFBb0QsZUFBZSxtQ0FBbUMsK0JBQStCLGtEQUFrRCxlQUFlLGlDQUFpQywrQkFBK0IsNENBQTRDLHNCQUFzQixrQ0FBa0MsdUNBQXVDLGdDQUFnQyx1Q0FBdUMsK0JBQStCLFdBQVcsNFBBQTRQLG9EQUFvRCxVQUFVLGlCQUFpQixjQUFjLHFGQUFxRixFQUFFLDhDQUE4QyxjQUFjLDZIQUE2SCxFQUFFLCtCQUErQixnQkFBZ0IsNkVBQTZFLDZEQUE2RCxlQUFlLG1FQUFtRSwyRkFBMkYsa09BQWtPLHVGQUF1Rix1REFBdUQsb0JBQW9CLDRIQUE0SCx5REFBeUQsaURBQWlELDBDQUEwQyxXQUFXLHVFQUF1RSxvREFBb0QscURBQXFELDhCQUE4QixpQ0FBaUMsbUNBQW1DLFdBQVcsc0lBQXNJLHVCQUF1QixnQ0FBZ0MsNEJBQTRCLDJCQUEyQixvQ0FBb0MsV0FBVyx1Q0FBdUMsU0FBUyxtTEFBbUwsaURBQWlELEdBQUcsT0FBTyxXQUFXLDBDQUEwQywyQ0FBMkMsMERBQTBELEdBQUcsa0NBQWtDLFdBQVcsb0RBQW9ELDBCQUEwQixHQUFHLGlDQUFpQyxtQkFBbUIsNENBQTRDLHlFQUF5RSxrQ0FBa0MsR0FBRywwQ0FBMEMsNERBQTRELFNBQVMseURBQXlELG9CQUFvQixxQkFBcUIsNkVBQTZFLDBDQUEwQyxXQUFXLHNCQUFzQixRQUFRLHlJQUF5SSxXQUFXLHlCQUF5Qix3QkFBd0IsNkJBQTZCLHVOQUF1Tix1Q0FBdUMsaUxBQWlMLHFDQUFxQyw4RUFBOEUseURBQXlELHFCQUFxQixXQUFXLHFDQUFxQyxlQUFlLGFBQWEseUJBQXlCLG9DQUFvQyxrQkFBa0IsK0JBQStCLHlHQUF5Ryx1RkFBdUYsMEhBQTBILCtCQUErQixlQUFlLHVEQUF1RCxXQUFXLGVBQWUsa0JBQWtCLElBQUksV0FBVyxjQUFjLGtCQUFrQixJQUFJLFdBQVcsc0JBQXNCLG1CQUFtQiwrSkFBK0osbURBQW1ELG1CQUFtQixHQUFHLG1EQUFtRCxtQkFBbUIsdUJBQXVCLDJCQUEyQixpRkFBaUYsd0JBQXdCLEtBQUssNkNBQTZDLG1DQUFtQywrREFBK0QsNkNBQTZDLG9DQUFvQywwQ0FBMEMsd0NBQXdDLGlDQUFpQyxpQ0FBaUMsbUJBQW1CLDJEQUEyRCx1RUFBdUUsb0NBQW9DLDBFQUEwRSw2RUFBNkUsT0FBTyxXQUFXLGtCQUFrQiw4Q0FBOEMsK0lBQStJLDJDQUEyQyxTQUFTLHlEQUF5RCxxQkFBcUIsS0FBSyx3Q0FBd0MsNExBQTRMLHVDQUF1QywwQ0FBMEMscUNBQXFDLGFBQWEsc0JBQXNCLHVCQUF1QixLQUFLLHVGQUF1Rix1REFBdUQsc0RBQXNELGlFQUFpRSxzQ0FBc0MsV0FBVyxtQ0FBbUMsaUVBQWlFLHdCQUF3QiwyQkFBMkIsdUNBQXVDLDJEQUEyRCxlQUFlLHdCQUF3QixjQUFjLEdBQUcsR0FBRyxxQ0FBcUMseUpBQXlKLFdBQVcsS0FBSyxxQkFBcUIsa0JBQWtCLGlEQUFpRCxlQUFlLGtEQUFrRCx3REFBd0Qsa0JBQWtCLHNDQUFzQyxnQ0FBZ0MsR0FBRyxNQUFNLHlCQUF5QixTQUFTLG1DQUFtQyxTQUFTLGtDQUFrQyw0QkFBNEIsSUFBSSxLQUFLLHVDQUF1QywwQ0FBMEMsMkJBQTJCLEdBQUcscUNBQXFDLCtCQUErQixnQ0FBZ0MsZ0NBQWdDLDBGQUEwRiwwRUFBMEUsUUFBUSx3QkFBd0IsMkJBQTJCLEdBQUcsT0FBTyxXQUFXLG1DQUFtQyxrQkFBa0IsSUFBSSxXQUFXLG1CQUFtQixtQkFBbUIsK0dBQStHLDBDQUEwQywrQkFBK0IsbUNBQW1DLHNCQUFzQixhQUFhLElBQUksNkRBQTZELHFCQUFxQixHQUFHLHFDQUFxQyxxQ0FBcUMsc0NBQXNDLHFGQUFxRixHQUFHLHlDQUF5QyxXQUFXLHNDQUFzQyxtQ0FBbUMsMERBQTBELEdBQUcsMkJBQTJCLGdGQUFnRixHQUFHLHdDQUF3QyxtQkFBbUIsT0FBTyxtSEFBbUgsZ0JBQWdCLHVDQUF1QyxPQUFPLGlGQUFpRixrQkFBa0IscUNBQXFDLHlEQUF5RCwyQkFBMkIsdUZBQXVGLDJDQUEyQywyQ0FBMkMsV0FBVyxnSEFBZ0gsZ0NBQWdDLG1EQUFtRCw0QkFBNEIscURBQXFELDRCQUE0QixvREFBb0QseUJBQXlCLG1EQUFtRCx3QkFBd0IsMERBQTBELDZCQUE2Qix5REFBeUQsNEJBQTRCLDhEQUE4RCx1Q0FBdUMsMERBQTBELDRCQUE0Qiw0REFBNEQsd0JBQXdCLGtFQUFrRSw2QkFBNkIsS0FBSyx5Q0FBeUMsaXNDQUFpc0Msc0VBQXNFLDhDQUE4QyxlQUFlLDJDQUEyQyx5QkFBeUIseUJBQXlCLE1BQU0sbUNBQW1DLG1DQUFtQyxzQ0FBc0Msd0VBQXdFLDBCQUEwQiwrRkFBK0Ysc0NBQXNDLDZJQUE2SSx3REFBd0QsTUFBTSw0REFBNEQsOEJBQThCLEdBQUcsTUFBTSxnRUFBZ0UsV0FBVyx1QkFBdUIsaUJBQWlCLHlDQUF5QywyQ0FBMkMsNEJBQTRCLFNBQVMsRUFBRSxPQUFPLFdBQVcsZ0NBQWdDLG1CQUFtQixrREFBa0QsSUFBSSxHQUFHLHNDQUFzQyx3RUFBd0UsV0FBVyxrQ0FBa0Msd0NBQXdDLFdBQVcsS0FBSyxXQUFXLHlFQUF5RSxrQkFBa0IsWUFBWSw0Q0FBNEMsOENBQThDLGtCQUFrQiw0Q0FBNEMsaURBQWlELCtCQUErQixJQUFJLGtCQUFrQiwrQ0FBK0MsMkNBQTJDLDhDQUE4QywwQkFBMEIsc0RBQXNELE1BQU0sZ0JBQWdCLHVEQUF1RCxvREFBb0QsTUFBTSxPQUFPLFdBQVcsMkNBQTJDLG1CQUFtQiwrQ0FBK0MsMkJBQTJCLEdBQUcsY0FBYyxvQ0FBb0MsdUtBQXVLLGdCQUFnQiw0REFBNEQsK0NBQStDLGlGQUFpRiw4Q0FBOEMsNENBQTRDLHVCQUF1Qix3QkFBd0IsaUJBQWlCLGtCQUFrQixjQUFjLG9DQUFvQyw2Q0FBNkMsaUJBQWlCLDBEQUEwRCxxQkFBcUIsc0JBQXNCLGtGQUFrRix1QkFBdUIsNEZBQTRGLHVCQUF1Qix5RkFBeUYsc0JBQXNCLHlGQUF5RixxQkFBcUIsK0NBQStDLGtCQUFrQiwyR0FBMkcseUJBQXlCLE1BQU0sMEJBQTBCLHFCQUFxQixHQUFHLE1BQU0scUNBQXFDLE1BQU0sMEJBQTBCLHFCQUFxQixHQUFHLE1BQU0sbUJBQW1CLFNBQVMsV0FBVyxrQkFBa0IsdUJBQXVCLFlBQVksV0FBVyxLQUFLLHFCQUFxQixlQUFlLFdBQVcsd0NBQXdDLDRCQUE0QixTQUFTLEVBQUUsT0FBTyxXQUFXLDhCQUE4QixtQkFBbUIsK0NBQStDLGNBQWMsRUFBRSxHQUFHLHdCQUF3QixTQUFTLFlBQVkscUVBQXFFLG1CQUFtQixZQUFZLElBQUksZUFBZSxtQkFBbUIsWUFBWSxJQUFJLGVBQWUsbUJBQW1CLFdBQVcsaUJBQWlCLElBQUkseUNBQXlDLG9EQUFvRCxtQkFBbUIsb0VBQW9FLHlCQUF5Qix5QkFBeUIsTUFBTSxTQUFTLG1DQUFtQyxPQUFPLGtFQUFrRSxRQUFRLHVDQUF1QyxnQkFBZ0Isb0NBQW9DLEVBQUUsT0FBTyx5Q0FBeUMsMkVBQTJFLEdBQUcsbUJBQW1CLG9CQUFvQixpQ0FBaUMsYUFBYSxnQ0FBZ0MsY0FBYyxnQkFBZ0Isc0VBQXNFLFNBQVMscUJBQXFCLHdIQUF3SCxhQUFhLG1CQUFtQiw4RUFBOEUsa0JBQWtCLGNBQWMsMkJBQTJCLGdDQUFnQyw2Q0FBNkMsNkRBQTZELEdBQUcsS0FBSyxNQUFNLElBQUk7QUFDOTd4SSwyQ0FBMkMsY0FBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDRnpEO0FBQzZHO0FBQ2pCO0FBQ087QUFDbkcsNENBQTRDLGlJQUEwQztBQUN0Riw0Q0FBNEMsK0hBQXlDO0FBQ3JGLDRDQUE0QyxpSUFBMEM7QUFDdEYsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRix5Q0FBeUMsc0ZBQStCO0FBQ3hFLHlDQUF5QyxzRkFBK0I7QUFDeEUseUNBQXlDLHNGQUErQjtBQUN4RTtBQUNBLGdEQUFnRCxzQkFBc0IsS0FBSyxtQ0FBbUMsWUFBWSx3QkFBd0IsT0FBTyxLQUFLLGNBQWMseUJBQXlCLHVCQUF1QixLQUFLLGNBQWMsMEJBQTBCLEtBQUssMkNBQTJDLHVCQUF1Qiw0QkFBNEIsaUJBQWlCLHlCQUF5Qiw4QkFBOEIsNEJBQTRCLDRCQUE0QixLQUFLLCtDQUErQyw0QkFBNEIsS0FBSyw0REFBNEQsMEJBQTBCLEtBQUssNENBQTRDLG1GQUFtRixLQUFLLDJDQUEyQyxtRkFBbUYsS0FBSyx1Q0FBdUMsd0VBQXdFLEtBQUssdU1BQXVNLHNCQUFzQixtQ0FBbUMsd0NBQXdDLEtBQUssMERBQTBELHlCQUF5Qix3Q0FBd0MsT0FBTywwREFBMEQsd0JBQXdCLEtBQUssOENBQThDLDhCQUE4QixLQUFLLHFCQUFxQix1QkFBdUIsS0FBSyxzQ0FBc0Msa0JBQWtCLEtBQUssZUFBZSw4QkFBOEIsS0FBSyxzQkFBc0Isc0JBQXNCLHVCQUF1Qiw4QkFBOEIscUJBQXFCLHNCQUFzQiwyQkFBMkIsc0JBQXNCLHdCQUF3QixLQUFLLCtCQUErQixzQkFBc0IsaUJBQWlCLGtCQUFrQixLQUFLLDhCQUE4QixrQkFBa0Isd0JBQXdCLGtCQUFrQixLQUFLLHVCQUF1Qiw4QkFBOEIsS0FBSyw2QkFBNkIsaUJBQWlCLEtBQUssdUNBQXVDLHFCQUFxQixLQUFLLG1DQUFtQyxnREFBZ0QsMkJBQTJCLDJCQUEyQiw0QkFBNEIsMkNBQTJDLEtBQUssb0JBQW9CLHdCQUF3QixLQUFLLDRCQUE0QixzQkFBc0IsS0FBSyxxQ0FBcUMsaURBQWlELHFCQUFxQixLQUFLLHVCQUF1QixrREFBa0QscUJBQXFCLEtBQUssNkJBQTZCLDZEQUE2RCxnQ0FBZ0MsS0FBSyxtQ0FBbUMsc0JBQXNCLGtCQUFrQiw2QkFBNkIsbUJBQW1CLHVCQUF1QixLQUFLLHFCQUFxQixvQkFBb0IsS0FBSyxtQkFBbUIsdUJBQXVCLEtBQUssd0JBQXdCLG1DQUFtQyw2QkFBNkIsaUNBQWlDLGtCQUFrQixTQUFTLHVCQUF1QixTQUFTLE9BQU8sMEZBQTBGLFVBQVUsT0FBTyxLQUFLLEtBQUssVUFBVSxNQUFNLE1BQU0sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksUUFBUSxLQUFLLFlBQVksYUFBYSxXQUFXLFlBQVksYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFFBQVEsT0FBTyxhQUFhLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLFVBQVUsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxVQUFVLE9BQU8sS0FBSyxLQUFLLFFBQVEsV0FBVyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsT0FBTyxLQUFLLFlBQVksV0FBVyxPQUFPLEtBQUssWUFBWSxXQUFXLE9BQU8sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxZQUFZLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxNQUFNLEtBQUssWUFBWSxRQUFRLEtBQUssWUFBWSxhQUFhLE9BQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSwrQkFBK0Isc0JBQXNCLEtBQUssbUNBQW1DLFlBQVksd0JBQXdCLE9BQU8sS0FBSyxjQUFjLHlCQUF5Qix1QkFBdUIsS0FBSyxjQUFjLDBCQUEwQixLQUFLLDJDQUEyQyx1QkFBdUIsNEJBQTRCLGlCQUFpQix5QkFBeUIsOEJBQThCLDRCQUE0Qiw0QkFBNEIsS0FBSywrQ0FBK0MsNEJBQTRCLEtBQUssNERBQTRELDBCQUEwQixLQUFLLDRDQUE0QyxnRUFBZ0UsS0FBSywyQ0FBMkMsK0RBQStELEtBQUssdUNBQXVDLHFEQUFxRCxLQUFLLHVNQUF1TSxzQkFBc0IsbUNBQW1DLHdDQUF3QyxLQUFLLDBEQUEwRCx5QkFBeUIsd0NBQXdDLE9BQU8sMERBQTBELHdCQUF3QixLQUFLLDhDQUE4Qyw4QkFBOEIsS0FBSyxxQkFBcUIsdUJBQXVCLEtBQUssc0NBQXNDLGtCQUFrQixLQUFLLGVBQWUsOEJBQThCLEtBQUssc0JBQXNCLHNCQUFzQix1QkFBdUIsOEJBQThCLHFCQUFxQixzQkFBc0IsMkJBQTJCLHNCQUFzQix3QkFBd0IsS0FBSywrQkFBK0Isc0JBQXNCLGlCQUFpQixrQkFBa0IsS0FBSyw4QkFBOEIsa0JBQWtCLHdCQUF3QixrQkFBa0IsS0FBSyx1QkFBdUIsOEJBQThCLEtBQUssNkJBQTZCLGlCQUFpQixLQUFLLHVDQUF1QyxxQkFBcUIsS0FBSyxtQ0FBbUMsZ0RBQWdELDJCQUEyQiwyQkFBMkIsNEJBQTRCLDJDQUEyQyxLQUFLLG9CQUFvQix3QkFBd0IsS0FBSyw0QkFBNEIsc0JBQXNCLEtBQUsscUNBQXFDLGlEQUFpRCxxQkFBcUIsS0FBSyx1QkFBdUIsa0RBQWtELHFCQUFxQixLQUFLLDZCQUE2Qiw2REFBNkQsZ0NBQWdDLEtBQUssbUNBQW1DLHNCQUFzQixrQkFBa0IsNkJBQTZCLG1CQUFtQix1QkFBdUIsS0FBSyxxQkFBcUIsb0JBQW9CLEtBQUssbUJBQW1CLHVCQUF1QixLQUFLLHdCQUF3QixtQ0FBbUMsNkJBQTZCLGlDQUFpQyxrQkFBa0IsU0FBUyx1QkFBdUIsU0FBUyxtQkFBbUI7QUFDejZQO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUM7Ozs7Ozs7Ozs7OztBQ2QxQjs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBLHFGQUFxRjtBQUNyRjs7QUFFQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLEtBQUs7QUFDTCxLQUFLOzs7QUFHTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIscUJBQXFCO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Ysc0ZBQXNGLHFCQUFxQjtBQUMzRztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLGlEQUFpRCxxQkFBcUI7QUFDdEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7QUNyR2E7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7OztBQzVCYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BCQSxNQUFrRztBQUNsRyxNQUF3RjtBQUN4RixNQUErRjtBQUMvRixNQUFrSDtBQUNsSCxNQUEyRztBQUMzRyxNQUEyRztBQUMzRyxNQUFxRztBQUNyRztBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhOztBQUVyQyx1QkFBdUIsdUdBQWE7QUFDcEM7QUFDQSxpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLHFGQUFPOzs7O0FBSStDO0FBQ3ZFLE9BQU8saUVBQWUscUZBQU8sSUFBSSw0RkFBYyxHQUFHLDRGQUFjLFlBQVksRUFBQzs7Ozs7Ozs7Ozs7O0FDMUJoRTs7QUFFYjs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3ZHYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7O0FDdENhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7OztBQ1ZhOztBQUViO0FBQ0E7QUFDQSxjQUFjLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7O0FDWGE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0RBQWtEO0FBQ2xEOztBQUVBO0FBQ0EsMENBQTBDO0FBQzFDOztBQUVBOztBQUVBO0FBQ0EsaUZBQWlGO0FBQ2pGOztBQUVBOztBQUVBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0EsYUFBYTtBQUNiOztBQUVBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pELElBQUk7O0FBRUo7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7QUNyRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmaU07QUFFak07SUFBQTtJQXFGQSxDQUFDO0lBcEZVLGVBQUcsR0FBVixVQUFXLFdBQW1CLEVBQUUsUUFBUTtRQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFcEMsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNqQyxJQUFJLG9CQUFvQixHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFFN0MsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLGtFQUF3QixDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXZGLEVBQUU7UUFDRixrQkFBa0I7UUFDbEIsRUFBRTtRQUNGLElBQUksYUFBYSxHQUFHLElBQUksa0VBQXdCLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbEcsYUFBYSxDQUFDLGNBQWMsR0FBRyxVQUFDLElBQUksSUFBTyxPQUFPLG9EQUE2QyxJQUFJLENBQUUsRUFBQyxDQUFDLENBQUM7UUFDeEcsYUFBYSxDQUFDLFlBQVksR0FBRztZQUN6QixJQUFJLGtFQUF3QixDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDdEUsSUFBSSxrRUFBd0IsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO1NBQzlFLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBR3pCLEVBQUU7UUFDRixrQkFBa0I7UUFDbEIsRUFBRTtRQUNGLElBQUksR0FBRyxHQUFHLElBQUksa0VBQXdCLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUNyRjtZQUNJLElBQUksbUVBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztZQUMzQyxJQUFJLG1FQUF5QixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUM7WUFDNUMsSUFBSSxtRUFBeUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO1NBQ2hELENBQUMsQ0FBQztRQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFZixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksa0VBQXdCLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLGtFQUF3QixDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxrRUFBd0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksa0VBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFckYsSUFBSSxVQUFVLEdBQUcsSUFBSSwrREFBcUIsQ0FBQyxPQUFPLEVBQUU7WUFDaEQsUUFBUSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsb0JBQW9CO1NBQ3pELEVBQUUsSUFBSSxFQUFFLFVBQUMsSUFBSTtZQUNWLFlBQVk7WUFDWixPQUFPLDhDQUE4QyxHQUFHLElBQUksQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxHQUFHLElBQUksNERBQWtCLENBQUMsY0FBYyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDcEYsSUFBSSxJQUFJLEdBQUcsSUFBSSxxREFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRXpCLEVBQUU7UUFDRiwwRUFBMEU7UUFDMUUsK0NBQStDO1FBQy9DLEVBQUU7UUFFRixJQUFJLENBQUMsVUFBVSxDQUFDLHdFQUE4QixFQUFFLFVBQUMsTUFBTSxFQUFFLENBQUM7WUFDdEQsWUFBWTtZQUNaLElBQUksRUFBRSxHQUFHLENBQXdCLENBQUM7WUFDbEMsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsT0FBTztZQUNoQixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQXlCLENBQUM7WUFDbkQsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsT0FBTztZQUVuQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1lBQ2hDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBRTNCLElBQUksU0FBUyxLQUFLLEtBQUssSUFBSSxTQUFTLEtBQUssTUFBTSxFQUFFO2dCQUM3QyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUVoRDtRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBQyxDQUFDO1lBQ3ZELE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNyQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO1lBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMzQixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2RmtLO0FBRW5LO0lBQUE7SUF5REEsQ0FBQztJQXZEVSxjQUFHLEdBQVY7UUFDSSxzQ0FBc0M7UUFFdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWhDLEVBQUU7UUFDRixvQ0FBb0M7UUFDcEMsRUFBRTtRQUNGLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUVsQixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxrRUFBd0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBRTNGO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUU5QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDOUIsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7YUFDOUM7WUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSwrREFBcUIsQ0FBQyxVQUFVLEVBQ2pEO1lBQ0ksUUFBUTtZQUNSLFFBQVEsRUFBRSxJQUFJLG1FQUF5QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDO1NBQ3pELEVBQUUsS0FBSyxFQUFFLElBQUksRUFDZCxVQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSztZQUNkLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUN4RCxJQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFJLEtBQUssR0FBRyxRQUFRLElBQUksR0FBRyxHQUFHLFFBQVE7Z0JBQUUsT0FBTyxFQUFFLENBQUM7WUFDbEQsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEtBQUssSUFBSSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzFDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxQjtZQUNELE9BQU8sUUFBUSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBRVAsSUFBSSxFQUFFLEdBQUcsSUFBSSw0REFBa0IsQ0FBQyxnQkFBZ0IsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFNUYsSUFBSSxJQUFJLEdBQUcsSUFBSSxxREFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUdkLElBQUksSUFBSSxHQUFHLElBQUksaUVBQXVCLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDL0csSUFBSSxDQUFDLEdBQUcsR0FBRyx1QkFBdUIsQ0FBQztJQUV2QyxDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQzNERDtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOztVQUVBO1VBQ0E7Ozs7O1dDekJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQ0FBaUMsV0FBVztXQUM1QztXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0EsdURBQXVELGlCQUFpQjtXQUN4RTtXQUNBLGdEQUFnRCxhQUFhO1dBQzdEOzs7OztXQ05BOzs7OztXQ0FBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7V0FFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJ1QjtBQUNzQjtBQUNIO0FBRTFDO0lBQUE7SUFTQSxDQUFDO0lBUFUsOEJBQWEsR0FBcEI7UUFDSSx3REFBYyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLCtCQUFjLEdBQXJCLFVBQXNCLFdBQW1CLEVBQUUsUUFBUTtRQUMvQywwREFBZSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnNfZHRfZGVtby93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9icy1kYXRhdGFibGUvZGlzdC9ic2RhdGF0YWJsZS5qcyIsIndlYnBhY2s6Ly9ic19kdF9kZW1vLy4vYXBwLWNsaWVudC9jc3Mvc2l0ZS5jc3MiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JzX2R0X2RlbW8vLi9hcHAtY2xpZW50L2Nzcy9zaXRlLmNzcz9lNjhhIiwid2VicGFjazovL2JzX2R0X2RlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ic19kdF9kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JzX2R0X2RlbW8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9ic19kdF9kZW1vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby8uL2FwcC1jbGllbnQvZHluYW1pYy1kZW1vLnRzIiwid2VicGFjazovL2JzX2R0X2RlbW8vLi9hcHAtY2xpZW50L3N0YXRpYy1kZW1vLnRzIiwid2VicGFjazovL2JzX2R0X2RlbW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9ic19kdF9kZW1vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9ic19kdF9kZW1vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2JzX2R0X2RlbW8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYnNfZHRfZGVtby93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9ic19kdF9kZW1vLy4vYXBwLWNsaWVudC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJic19kdF9kZW1vXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImJzX2R0X2RlbW9cIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIvKiEgRm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gcGxlYXNlIHNlZSBic2RhdGF0YWJsZS5qcy5MSUNFTlNFLnR4dCAqL1xuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5ic2RhdGF0YWJsZT1lKCk6dC5ic2RhdGF0YWJsZT1lKCl9KHNlbGYsKGZ1bmN0aW9uKCl7cmV0dXJuKCgpPT57dmFyIHQ9ezY2MTooKT0+e1N0cmluZy5wcm90b3R5cGUudG9DYW1hbENhc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKC8oPzpeXFx3fFtBLVpdfFxcYlxcdykvZywoZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PWU/dC50b0xvd2VyQ2FzZSgpOnQudG9VcHBlckNhc2UoKX0pKS5yZXBsYWNlKC9cXHMrL2csXCJcIil9LFN0cmluZy5wcm90b3R5cGUudG9QYXNjYWxDYXNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVwbGFjZSgvKD86Xlxcd3xbQS1aXXxcXGJcXHcpL2csKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIDA9PT1lP3QudG9VcHBlckNhc2UoKTp0LnRvTG93ZXJDYXNlKCl9KSkucmVwbGFjZSgvXFxzKy9nLFwiXCIpfSxTdHJpbmcucHJvdG90eXBlLnRvUGFzY2FsQ2FzZUpzb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKC8oPzpeXFx3fFtBLVpdfFxcYlxcdykvZywoZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PWU/dC50b1VwcGVyQ2FzZSgpOnR9KSkucmVwbGFjZSgvXFxzKy9nLFwiXCIpfSxTdHJpbmcucHJvdG90eXBlLmZvcm1hdHx8KFN0cmluZy5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzO3JldHVybiB0aGlzLnJlcGxhY2UoL3soXFxkKyl9L2csKGZ1bmN0aW9uKGUsbil7cmV0dXJuIHZvaWQgMCE9PXRbbl0/dFtuXTplfSkpfSl9fSxlPXt9O2Z1bmN0aW9uIG4oaSl7dmFyIG89ZVtpXTtpZih2b2lkIDAhPT1vKXJldHVybiBvLmV4cG9ydHM7dmFyIHI9ZVtpXT17ZXhwb3J0czp7fX07cmV0dXJuIHRbaV0ocixyLmV4cG9ydHMsbiksci5leHBvcnRzfW4uZD0odCxlKT0+e2Zvcih2YXIgaSBpbiBlKW4ubyhlLGkpJiYhbi5vKHQsaSkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkse2VudW1lcmFibGU6ITAsZ2V0OmVbaV19KX0sbi5vPSh0LGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSxuLnI9dD0+e1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9O3ZhciBpPXt9O3JldHVybigoKT0+e1widXNlIHN0cmljdFwiO24ucihpKSxuLmQoaSx7QlNEYXRhVGFibGU6KCk9PkZvLEJTRGF0YVRhYmxlQWN0aW9uczooKT0+dm8sQlNEYXRhVGFibGVCYXNlOigpPT4kaSxCU0RhdGFUYWJsZUJvZHk6KCk9PkJvLEJTRGF0YVRhYmxlQnV0dG9uOigpPT5TbyxCU0RhdGFUYWJsZUNlbGw6KCk9PnJvLEJTRGF0YVRhYmxlQ2hlY2tCb3g6KCk9PmlvLEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbjooKT0+S2ksQlNEYXRhVGFibGVEYXRhU291cmNlOigpPT5YaSxCU0RhdGFUYWJsZUhlYWRlcjooKT0+am8sQlNEYXRhVGFibGVIdHRwQ2xpZW50OigpPT5hbyxCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zOigpPT5aaSxCU0RhdGFUYWJsZUluZmluaXRlU2Nyb2xsOigpPT5wbyxCU0RhdGFUYWJsZUlucHV0OigpPT5lbyxCU0RhdGFUYWJsZU1hcmtlcjooKT0+Z28sQlNEYXRhVGFibGVPcHRpb25zOigpPT5ZaSxCU0RhdGFUYWJsZVBhZ2luYXRpb246KCk9PmxvLEJTRGF0YVRhYmxlUGFnaW5hdGlvbk9wdGlvbnM6KCk9PkppLEJTRGF0YVRhYmxlUGFnaW5nTWV0YURhdGE6KCk9PlFpLEJTRGF0YVRhYmxlUm93OigpPT5MbyxCU0RhdGFUYWJsZVJvd0NvbGxlY3Rpb246KCk9PlBvLEJTRGF0YVRhYmxlU2VsZWN0OigpPT5EbyxCU0RhdGFUYWJsZVNlbGVjdExpc3RJdGVtOigpPT5xaSxCU0RhdGFUYWJsZVNlbGVjdE9wdGlvbjooKT0+d28sQlNEYXRhVGFibGVTZWxlY3RvcjooKT0+Tm8sQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdzooKT0+Um8sQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvd0NvbGxlY3Rpb246KCk9PmZvLEJTRGF0YVRhYmxlVGV4dElucHV0OigpPT5ibyxCU0RhdGFUYWJsZVRleHRJbnB1dEV4dDooKT0+VW8sQ29va2llSGVscGVyOigpPT5HaSxTZXNzaW9uU3RvcmFnZVNlcnZpY2U6KCk9PnppLGFwcEFjdGlvbnM6KCk9PkZpLGFwcERhdGFFdmVudHM6KCk9PldpLGJzRGF0YVRhYmxlRGlzY292ZXJ5U2VydmljZTooKT0+VmksZGF0YUV2ZW50c1NlcnZpY2U6KCk9PlVpfSk7dmFyIHQ9e307bi5yKHQpLG4uZCh0LHthZnRlck1haW46KCk9PncsYWZ0ZXJSZWFkOigpPT55LGFmdGVyV3JpdGU6KCk9PkMsYXBwbHlTdHlsZXM6KCk9PkwsYXJyb3c6KCk9PlksYXV0bzooKT0+YSxiYXNlUGxhY2VtZW50czooKT0+YyxiZWZvcmVNYWluOigpPT5iLGJlZm9yZVJlYWQ6KCk9Pl8sYmVmb3JlV3JpdGU6KCk9Pk8sYm90dG9tOigpPT5vLGNsaXBwaW5nUGFyZW50czooKT0+ZCxjb21wdXRlU3R5bGVzOigpPT50dCxjcmVhdGVQb3BwZXI6KCk9PkF0LGNyZWF0ZVBvcHBlckJhc2U6KCk9Pk50LGNyZWF0ZVBvcHBlckxpdGU6KCk9PlJ0LGRldGVjdE92ZXJmbG93OigpPT5tdCxlbmQ6KCk9PnUsZXZlbnRMaXN0ZW5lcnM6KCk9Pm50LGZsaXA6KCk9Pmd0LGhpZGU6KCk9Pnl0LGxlZnQ6KCk9PnMsbWFpbjooKT0+RSxtb2RpZmllclBoYXNlczooKT0+UyxvZmZzZXQ6KCk9PmJ0LHBsYWNlbWVudHM6KCk9PmcscG9wcGVyOigpPT5oLHBvcHBlckdlbmVyYXRvcjooKT0+VHQscG9wcGVyT2Zmc2V0czooKT0+RXQscHJldmVudE92ZXJmbG93OigpPT53dCxyZWFkOigpPT52LHJlZmVyZW5jZTooKT0+ZixyaWdodDooKT0+cixzdGFydDooKT0+bCx0b3A6KCk9PmUsdmFyaWF0aW9uUGxhY2VtZW50czooKT0+bSx2aWV3cG9ydDooKT0+cCx3cml0ZTooKT0+RH0pO3ZhciBlPVwidG9wXCIsbz1cImJvdHRvbVwiLHI9XCJyaWdodFwiLHM9XCJsZWZ0XCIsYT1cImF1dG9cIixjPVtlLG8scixzXSxsPVwic3RhcnRcIix1PVwiZW5kXCIsZD1cImNsaXBwaW5nUGFyZW50c1wiLHA9XCJ2aWV3cG9ydFwiLGg9XCJwb3BwZXJcIixmPVwicmVmZXJlbmNlXCIsbT1jLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb25jYXQoW2UrXCItXCIrbCxlK1wiLVwiK3VdKX0pLFtdKSxnPVtdLmNvbmNhdChjLFthXSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0LmNvbmNhdChbZSxlK1wiLVwiK2wsZStcIi1cIit1XSl9KSxbXSksXz1cImJlZm9yZVJlYWRcIix2PVwicmVhZFwiLHk9XCJhZnRlclJlYWRcIixiPVwiYmVmb3JlTWFpblwiLEU9XCJtYWluXCIsdz1cImFmdGVyTWFpblwiLE89XCJiZWZvcmVXcml0ZVwiLEQ9XCJ3cml0ZVwiLEM9XCJhZnRlcldyaXRlXCIsUz1bXyx2LHksYixFLHcsTyxELENdO2Z1bmN0aW9uIFQodCl7cmV0dXJuIHQ/KHQubm9kZU5hbWV8fFwiXCIpLnRvTG93ZXJDYXNlKCk6bnVsbH1mdW5jdGlvbiBOKHQpe2lmKG51bGw9PXQpcmV0dXJuIHdpbmRvdztpZihcIltvYmplY3QgV2luZG93XVwiIT09dC50b1N0cmluZygpKXt2YXIgZT10Lm93bmVyRG9jdW1lbnQ7cmV0dXJuIGUmJmUuZGVmYXVsdFZpZXd8fHdpbmRvd31yZXR1cm4gdH1mdW5jdGlvbiBBKHQpe3JldHVybiB0IGluc3RhbmNlb2YgTih0KS5FbGVtZW50fHx0IGluc3RhbmNlb2YgRWxlbWVudH1mdW5jdGlvbiBSKHQpe3JldHVybiB0IGluc3RhbmNlb2YgTih0KS5IVE1MRWxlbWVudHx8dCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50fWZ1bmN0aW9uIEkodCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNoYWRvd1Jvb3QmJih0IGluc3RhbmNlb2YgTih0KS5TaGFkb3dSb290fHx0IGluc3RhbmNlb2YgU2hhZG93Um9vdCl9Y29uc3QgTD17bmFtZTpcImFwcGx5U3R5bGVzXCIsZW5hYmxlZDohMCxwaGFzZTpcIndyaXRlXCIsZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZTtPYmplY3Qua2V5cyhlLmVsZW1lbnRzKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1lLnN0eWxlc1t0XXx8e30saT1lLmF0dHJpYnV0ZXNbdF18fHt9LG89ZS5lbGVtZW50c1t0XTtSKG8pJiZUKG8pJiYoT2JqZWN0LmFzc2lnbihvLnN0eWxlLG4pLE9iamVjdC5rZXlzKGkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPWlbdF07ITE9PT1lP28ucmVtb3ZlQXR0cmlidXRlKHQpOm8uc2V0QXR0cmlidXRlKHQsITA9PT1lP1wiXCI6ZSl9KSkpfSkpfSxlZmZlY3Q6ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxuPXtwb3BwZXI6e3Bvc2l0aW9uOmUub3B0aW9ucy5zdHJhdGVneSxsZWZ0OlwiMFwiLHRvcDpcIjBcIixtYXJnaW46XCIwXCJ9LGFycm93Ontwb3NpdGlvbjpcImFic29sdXRlXCJ9LHJlZmVyZW5jZTp7fX07cmV0dXJuIE9iamVjdC5hc3NpZ24oZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsbi5wb3BwZXIpLGUuc3R5bGVzPW4sZS5lbGVtZW50cy5hcnJvdyYmT2JqZWN0LmFzc2lnbihlLmVsZW1lbnRzLmFycm93LnN0eWxlLG4uYXJyb3cpLGZ1bmN0aW9uKCl7T2JqZWN0LmtleXMoZS5lbGVtZW50cykuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGk9ZS5lbGVtZW50c1t0XSxvPWUuYXR0cmlidXRlc1t0XXx8e30scj1PYmplY3Qua2V5cyhlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eSh0KT9lLnN0eWxlc1t0XTpuW3RdKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbZV09XCJcIix0fSkse30pO1IoaSkmJlQoaSkmJihPYmplY3QuYXNzaWduKGkuc3R5bGUsciksT2JqZWN0LmtleXMobykuZm9yRWFjaCgoZnVuY3Rpb24odCl7aS5yZW1vdmVBdHRyaWJ1dGUodCl9KSkpfSkpfX0scmVxdWlyZXM6W1wiY29tcHV0ZVN0eWxlc1wiXX07ZnVuY3Rpb24geCh0KXtyZXR1cm4gdC5zcGxpdChcIi1cIilbMF19dmFyIFA9TWF0aC5tYXgsaz1NYXRoLm1pbixqPU1hdGgucm91bmQ7ZnVuY3Rpb24gSCh0LGUpe3ZvaWQgMD09PWUmJihlPSExKTt2YXIgbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9MSxvPTE7aWYoUih0KSYmZSl7dmFyIHI9dC5vZmZzZXRIZWlnaHQscz10Lm9mZnNldFdpZHRoO3M+MCYmKGk9aihuLndpZHRoKS9zfHwxKSxyPjAmJihvPWoobi5oZWlnaHQpL3J8fDEpfXJldHVybnt3aWR0aDpuLndpZHRoL2ksaGVpZ2h0Om4uaGVpZ2h0L28sdG9wOm4udG9wL28scmlnaHQ6bi5yaWdodC9pLGJvdHRvbTpuLmJvdHRvbS9vLGxlZnQ6bi5sZWZ0L2kseDpuLmxlZnQvaSx5Om4udG9wL299fWZ1bmN0aW9uIEIodCl7dmFyIGU9SCh0KSxuPXQub2Zmc2V0V2lkdGgsaT10Lm9mZnNldEhlaWdodDtyZXR1cm4gTWF0aC5hYnMoZS53aWR0aC1uKTw9MSYmKG49ZS53aWR0aCksTWF0aC5hYnMoZS5oZWlnaHQtaSk8PTEmJihpPWUuaGVpZ2h0KSx7eDp0Lm9mZnNldExlZnQseTp0Lm9mZnNldFRvcCx3aWR0aDpuLGhlaWdodDppfX1mdW5jdGlvbiBNKHQsZSl7dmFyIG49ZS5nZXRSb290Tm9kZSYmZS5nZXRSb290Tm9kZSgpO2lmKHQuY29udGFpbnMoZSkpcmV0dXJuITA7aWYobiYmSShuKSl7dmFyIGk9ZTtkb3tpZihpJiZ0LmlzU2FtZU5vZGUoaSkpcmV0dXJuITA7aT1pLnBhcmVudE5vZGV8fGkuaG9zdH13aGlsZShpKX1yZXR1cm4hMX1mdW5jdGlvbiBHKHQpe3JldHVybiBOKHQpLmdldENvbXB1dGVkU3R5bGUodCl9ZnVuY3Rpb24gRih0KXtyZXR1cm5bXCJ0YWJsZVwiLFwidGRcIixcInRoXCJdLmluZGV4T2YoVCh0KSk+PTB9ZnVuY3Rpb24gVyh0KXtyZXR1cm4oKEEodCk/dC5vd25lckRvY3VtZW50OnQuZG9jdW1lbnQpfHx3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBVKHQpe3JldHVyblwiaHRtbFwiPT09VCh0KT90OnQuYXNzaWduZWRTbG90fHx0LnBhcmVudE5vZGV8fChJKHQpP3QuaG9zdDpudWxsKXx8Vyh0KX1mdW5jdGlvbiB6KHQpe3JldHVybiBSKHQpJiZcImZpeGVkXCIhPT1HKHQpLnBvc2l0aW9uP3Qub2Zmc2V0UGFyZW50Om51bGx9ZnVuY3Rpb24gVih0KXtmb3IodmFyIGU9Tih0KSxuPXoodCk7biYmRihuKSYmXCJzdGF0aWNcIj09PUcobikucG9zaXRpb247KW49eihuKTtyZXR1cm4gbiYmKFwiaHRtbFwiPT09VChuKXx8XCJib2R5XCI9PT1UKG4pJiZcInN0YXRpY1wiPT09RyhuKS5wb3NpdGlvbik/ZTpufHxmdW5jdGlvbih0KXt2YXIgZT0tMSE9PW5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZmlyZWZveFwiKTtpZigtMSE9PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIlRyaWRlbnRcIikmJlIodCkmJlwiZml4ZWRcIj09PUcodCkucG9zaXRpb24pcmV0dXJuIG51bGw7Zm9yKHZhciBuPVUodCk7UihuKSYmW1wiaHRtbFwiLFwiYm9keVwiXS5pbmRleE9mKFQobikpPDA7KXt2YXIgaT1HKG4pO2lmKFwibm9uZVwiIT09aS50cmFuc2Zvcm18fFwibm9uZVwiIT09aS5wZXJzcGVjdGl2ZXx8XCJwYWludFwiPT09aS5jb250YWlufHwtMSE9PVtcInRyYW5zZm9ybVwiLFwicGVyc3BlY3RpdmVcIl0uaW5kZXhPZihpLndpbGxDaGFuZ2UpfHxlJiZcImZpbHRlclwiPT09aS53aWxsQ2hhbmdlfHxlJiZpLmZpbHRlciYmXCJub25lXCIhPT1pLmZpbHRlcilyZXR1cm4gbjtuPW4ucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH0odCl8fGV9ZnVuY3Rpb24gJCh0KXtyZXR1cm5bXCJ0b3BcIixcImJvdHRvbVwiXS5pbmRleE9mKHQpPj0wP1wieFwiOlwieVwifWZ1bmN0aW9uIHEodCxlLG4pe3JldHVybiBQKHQsayhlLG4pKX1mdW5jdGlvbiBLKHQpe3JldHVybiBPYmplY3QuYXNzaWduKHt9LHt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0sdCl9ZnVuY3Rpb24gWCh0LGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVtuXT10LGV9KSx7fSl9Y29uc3QgWT17bmFtZTpcImFycm93XCIsZW5hYmxlZDohMCxwaGFzZTpcIm1haW5cIixmbjpmdW5jdGlvbih0KXt2YXIgbixpPXQuc3RhdGUsYT10Lm5hbWUsbD10Lm9wdGlvbnMsdT1pLmVsZW1lbnRzLmFycm93LGQ9aS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMscD14KGkucGxhY2VtZW50KSxoPSQocCksZj1bcyxyXS5pbmRleE9mKHApPj0wP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiO2lmKHUmJmQpe3ZhciBtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEsoXCJudW1iZXJcIiE9dHlwZW9mKHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90KE9iamVjdC5hc3NpZ24oe30sZS5yZWN0cyx7cGxhY2VtZW50OmUucGxhY2VtZW50fSkpOnQpP3Q6WCh0LGMpKX0obC5wYWRkaW5nLGkpLGc9Qih1KSxfPVwieVwiPT09aD9lOnMsdj1cInlcIj09PWg/bzpyLHk9aS5yZWN0cy5yZWZlcmVuY2VbZl0raS5yZWN0cy5yZWZlcmVuY2VbaF0tZFtoXS1pLnJlY3RzLnBvcHBlcltmXSxiPWRbaF0taS5yZWN0cy5yZWZlcmVuY2VbaF0sRT1WKHUpLHc9RT9cInlcIj09PWg/RS5jbGllbnRIZWlnaHR8fDA6RS5jbGllbnRXaWR0aHx8MDowLE89eS8yLWIvMixEPW1bX10sQz13LWdbZl0tbVt2XSxTPXcvMi1nW2ZdLzIrTyxUPXEoRCxTLEMpLE49aDtpLm1vZGlmaWVyc0RhdGFbYV09KChuPXt9KVtOXT1ULG4uY2VudGVyT2Zmc2V0PVQtUyxuKX19LGVmZmVjdDpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLG49dC5vcHRpb25zLmVsZW1lbnQsaT12b2lkIDA9PT1uP1wiW2RhdGEtcG9wcGVyLWFycm93XVwiOm47bnVsbCE9aSYmKFwic3RyaW5nXCIhPXR5cGVvZiBpfHwoaT1lLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGkpKSkmJk0oZS5lbGVtZW50cy5wb3BwZXIsaSkmJihlLmVsZW1lbnRzLmFycm93PWkpfSxyZXF1aXJlczpbXCJwb3BwZXJPZmZzZXRzXCJdLHJlcXVpcmVzSWZFeGlzdHM6W1wicHJldmVudE92ZXJmbG93XCJdfTtmdW5jdGlvbiBRKHQpe3JldHVybiB0LnNwbGl0KFwiLVwiKVsxXX12YXIgSj17dG9wOlwiYXV0b1wiLHJpZ2h0OlwiYXV0b1wiLGJvdHRvbTpcImF1dG9cIixsZWZ0OlwiYXV0b1wifTtmdW5jdGlvbiBaKHQpe3ZhciBuLGk9dC5wb3BwZXIsYT10LnBvcHBlclJlY3QsYz10LnBsYWNlbWVudCxsPXQudmFyaWF0aW9uLGQ9dC5vZmZzZXRzLHA9dC5wb3NpdGlvbixoPXQuZ3B1QWNjZWxlcmF0aW9uLGY9dC5hZGFwdGl2ZSxtPXQucm91bmRPZmZzZXRzLGc9dC5pc0ZpeGVkLF89ZC54LHY9dm9pZCAwPT09Xz8wOl8seT1kLnksYj12b2lkIDA9PT15PzA6eSxFPVwiZnVuY3Rpb25cIj09dHlwZW9mIG0/bSh7eDp2LHk6Yn0pOnt4OnYseTpifTt2PUUueCxiPUUueTt2YXIgdz1kLmhhc093blByb3BlcnR5KFwieFwiKSxPPWQuaGFzT3duUHJvcGVydHkoXCJ5XCIpLEQ9cyxDPWUsUz13aW5kb3c7aWYoZil7dmFyIFQ9VihpKSxBPVwiY2xpZW50SGVpZ2h0XCIsUj1cImNsaWVudFdpZHRoXCI7VD09PU4oaSkmJlwic3RhdGljXCIhPT1HKFQ9VyhpKSkucG9zaXRpb24mJlwiYWJzb2x1dGVcIj09PXAmJihBPVwic2Nyb2xsSGVpZ2h0XCIsUj1cInNjcm9sbFdpZHRoXCIpLFQ9VCwoYz09PWV8fChjPT09c3x8Yz09PXIpJiZsPT09dSkmJihDPW8sYi09KGcmJlMudmlzdWFsVmlld3BvcnQ/Uy52aXN1YWxWaWV3cG9ydC5oZWlnaHQ6VFtBXSktYS5oZWlnaHQsYio9aD8xOi0xKSxjIT09cyYmKGMhPT1lJiZjIT09b3x8bCE9PXUpfHwoRD1yLHYtPShnJiZTLnZpc3VhbFZpZXdwb3J0P1MudmlzdWFsVmlld3BvcnQud2lkdGg6VFtSXSktYS53aWR0aCx2Kj1oPzE6LTEpfXZhciBJLEw9T2JqZWN0LmFzc2lnbih7cG9zaXRpb246cH0sZiYmSikseD0hMD09PW0/ZnVuY3Rpb24odCl7dmFyIGU9dC54LG49dC55LGk9d2luZG93LmRldmljZVBpeGVsUmF0aW98fDE7cmV0dXJue3g6aihlKmkpL2l8fDAseTpqKG4qaSkvaXx8MH19KHt4OnYseTpifSk6e3g6dix5OmJ9O3JldHVybiB2PXgueCxiPXgueSxoP09iamVjdC5hc3NpZ24oe30sTCwoKEk9e30pW0NdPU8/XCIwXCI6XCJcIixJW0RdPXc/XCIwXCI6XCJcIixJLnRyYW5zZm9ybT0oUy5kZXZpY2VQaXhlbFJhdGlvfHwxKTw9MT9cInRyYW5zbGF0ZShcIit2K1wicHgsIFwiK2IrXCJweClcIjpcInRyYW5zbGF0ZTNkKFwiK3YrXCJweCwgXCIrYitcInB4LCAwKVwiLEkpKTpPYmplY3QuYXNzaWduKHt9LEwsKChuPXt9KVtDXT1PP2IrXCJweFwiOlwiXCIsbltEXT13P3YrXCJweFwiOlwiXCIsbi50cmFuc2Zvcm09XCJcIixuKSl9Y29uc3QgdHQ9e25hbWU6XCJjb21wdXRlU3R5bGVzXCIsZW5hYmxlZDohMCxwaGFzZTpcImJlZm9yZVdyaXRlXCIsZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxuPXQub3B0aW9ucyxpPW4uZ3B1QWNjZWxlcmF0aW9uLG89dm9pZCAwPT09aXx8aSxyPW4uYWRhcHRpdmUscz12b2lkIDA9PT1yfHxyLGE9bi5yb3VuZE9mZnNldHMsYz12b2lkIDA9PT1hfHxhLGw9e3BsYWNlbWVudDp4KGUucGxhY2VtZW50KSx2YXJpYXRpb246UShlLnBsYWNlbWVudCkscG9wcGVyOmUuZWxlbWVudHMucG9wcGVyLHBvcHBlclJlY3Q6ZS5yZWN0cy5wb3BwZXIsZ3B1QWNjZWxlcmF0aW9uOm8saXNGaXhlZDpcImZpeGVkXCI9PT1lLm9wdGlvbnMuc3RyYXRlZ3l9O251bGwhPWUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzJiYoZS5zdHlsZXMucG9wcGVyPU9iamVjdC5hc3NpZ24oe30sZS5zdHlsZXMucG9wcGVyLFooT2JqZWN0LmFzc2lnbih7fSxsLHtvZmZzZXRzOmUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLHBvc2l0aW9uOmUub3B0aW9ucy5zdHJhdGVneSxhZGFwdGl2ZTpzLHJvdW5kT2Zmc2V0czpjfSkpKSksbnVsbCE9ZS5tb2RpZmllcnNEYXRhLmFycm93JiYoZS5zdHlsZXMuYXJyb3c9T2JqZWN0LmFzc2lnbih7fSxlLnN0eWxlcy5hcnJvdyxaKE9iamVjdC5hc3NpZ24oe30sbCx7b2Zmc2V0czplLm1vZGlmaWVyc0RhdGEuYXJyb3cscG9zaXRpb246XCJhYnNvbHV0ZVwiLGFkYXB0aXZlOiExLHJvdW5kT2Zmc2V0czpjfSkpKSksZS5hdHRyaWJ1dGVzLnBvcHBlcj1PYmplY3QuYXNzaWduKHt9LGUuYXR0cmlidXRlcy5wb3BwZXIse1wiZGF0YS1wb3BwZXItcGxhY2VtZW50XCI6ZS5wbGFjZW1lbnR9KX0sZGF0YTp7fX07dmFyIGV0PXtwYXNzaXZlOiEwfTtjb25zdCBudD17bmFtZTpcImV2ZW50TGlzdGVuZXJzXCIsZW5hYmxlZDohMCxwaGFzZTpcIndyaXRlXCIsZm46ZnVuY3Rpb24oKXt9LGVmZmVjdDpmdW5jdGlvbih0KXt2YXIgZT10LnN0YXRlLG49dC5pbnN0YW5jZSxpPXQub3B0aW9ucyxvPWkuc2Nyb2xsLHI9dm9pZCAwPT09b3x8byxzPWkucmVzaXplLGE9dm9pZCAwPT09c3x8cyxjPU4oZS5lbGVtZW50cy5wb3BwZXIpLGw9W10uY29uY2F0KGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7cmV0dXJuIHImJmwuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbi51cGRhdGUsZXQpfSkpLGEmJmMuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLG4udXBkYXRlLGV0KSxmdW5jdGlvbigpe3ImJmwuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsbi51cGRhdGUsZXQpfSkpLGEmJmMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLG4udXBkYXRlLGV0KX19LGRhdGE6e319O3ZhciBpdD17bGVmdDpcInJpZ2h0XCIscmlnaHQ6XCJsZWZ0XCIsYm90dG9tOlwidG9wXCIsdG9wOlwiYm90dG9tXCJ9O2Z1bmN0aW9uIG90KHQpe3JldHVybiB0LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLChmdW5jdGlvbih0KXtyZXR1cm4gaXRbdF19KSl9dmFyIHJ0PXtzdGFydDpcImVuZFwiLGVuZDpcInN0YXJ0XCJ9O2Z1bmN0aW9uIHN0KHQpe3JldHVybiB0LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLChmdW5jdGlvbih0KXtyZXR1cm4gcnRbdF19KSl9ZnVuY3Rpb24gYXQodCl7dmFyIGU9Tih0KTtyZXR1cm57c2Nyb2xsTGVmdDplLnBhZ2VYT2Zmc2V0LHNjcm9sbFRvcDplLnBhZ2VZT2Zmc2V0fX1mdW5jdGlvbiBjdCh0KXtyZXR1cm4gSChXKHQpKS5sZWZ0K2F0KHQpLnNjcm9sbExlZnR9ZnVuY3Rpb24gbHQodCl7dmFyIGU9Ryh0KSxuPWUub3ZlcmZsb3csaT1lLm92ZXJmbG93WCxvPWUub3ZlcmZsb3dZO3JldHVybi9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChuK28raSl9ZnVuY3Rpb24gdXQodCl7cmV0dXJuW1wiaHRtbFwiLFwiYm9keVwiLFwiI2RvY3VtZW50XCJdLmluZGV4T2YoVCh0KSk+PTA/dC5vd25lckRvY3VtZW50LmJvZHk6Uih0KSYmbHQodCk/dDp1dChVKHQpKX1mdW5jdGlvbiBkdCh0LGUpe3ZhciBuO3ZvaWQgMD09PWUmJihlPVtdKTt2YXIgaT11dCh0KSxvPWk9PT0obnVsbD09KG49dC5vd25lckRvY3VtZW50KT92b2lkIDA6bi5ib2R5KSxyPU4oaSkscz1vP1tyXS5jb25jYXQoci52aXN1YWxWaWV3cG9ydHx8W10sbHQoaSk/aTpbXSk6aSxhPWUuY29uY2F0KHMpO3JldHVybiBvP2E6YS5jb25jYXQoZHQoVShzKSkpfWZ1bmN0aW9uIHB0KHQpe3JldHVybiBPYmplY3QuYXNzaWduKHt9LHQse2xlZnQ6dC54LHRvcDp0LnkscmlnaHQ6dC54K3Qud2lkdGgsYm90dG9tOnQueSt0LmhlaWdodH0pfWZ1bmN0aW9uIGh0KHQsZSl7cmV0dXJuIGU9PT1wP3B0KGZ1bmN0aW9uKHQpe3ZhciBlPU4odCksbj1XKHQpLGk9ZS52aXN1YWxWaWV3cG9ydCxvPW4uY2xpZW50V2lkdGgscj1uLmNsaWVudEhlaWdodCxzPTAsYT0wO3JldHVybiBpJiYobz1pLndpZHRoLHI9aS5oZWlnaHQsL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KXx8KHM9aS5vZmZzZXRMZWZ0LGE9aS5vZmZzZXRUb3ApKSx7d2lkdGg6byxoZWlnaHQ6cix4OnMrY3QodCkseTphfX0odCkpOkEoZSk/ZnVuY3Rpb24odCl7dmFyIGU9SCh0KTtyZXR1cm4gZS50b3A9ZS50b3ArdC5jbGllbnRUb3AsZS5sZWZ0PWUubGVmdCt0LmNsaWVudExlZnQsZS5ib3R0b209ZS50b3ArdC5jbGllbnRIZWlnaHQsZS5yaWdodD1lLmxlZnQrdC5jbGllbnRXaWR0aCxlLndpZHRoPXQuY2xpZW50V2lkdGgsZS5oZWlnaHQ9dC5jbGllbnRIZWlnaHQsZS54PWUubGVmdCxlLnk9ZS50b3AsZX0oZSk6cHQoZnVuY3Rpb24odCl7dmFyIGUsbj1XKHQpLGk9YXQodCksbz1udWxsPT0oZT10Lm93bmVyRG9jdW1lbnQpP3ZvaWQgMDplLmJvZHkscj1QKG4uc2Nyb2xsV2lkdGgsbi5jbGllbnRXaWR0aCxvP28uc2Nyb2xsV2lkdGg6MCxvP28uY2xpZW50V2lkdGg6MCkscz1QKG4uc2Nyb2xsSGVpZ2h0LG4uY2xpZW50SGVpZ2h0LG8/by5zY3JvbGxIZWlnaHQ6MCxvP28uY2xpZW50SGVpZ2h0OjApLGE9LWkuc2Nyb2xsTGVmdCtjdCh0KSxjPS1pLnNjcm9sbFRvcDtyZXR1cm5cInJ0bFwiPT09RyhvfHxuKS5kaXJlY3Rpb24mJihhKz1QKG4uY2xpZW50V2lkdGgsbz9vLmNsaWVudFdpZHRoOjApLXIpLHt3aWR0aDpyLGhlaWdodDpzLHg6YSx5OmN9fShXKHQpKSl9ZnVuY3Rpb24gZnQodCl7dmFyIG4saT10LnJlZmVyZW5jZSxhPXQuZWxlbWVudCxjPXQucGxhY2VtZW50LGQ9Yz94KGMpOm51bGwscD1jP1EoYyk6bnVsbCxoPWkueCtpLndpZHRoLzItYS53aWR0aC8yLGY9aS55K2kuaGVpZ2h0LzItYS5oZWlnaHQvMjtzd2l0Y2goZCl7Y2FzZSBlOm49e3g6aCx5OmkueS1hLmhlaWdodH07YnJlYWs7Y2FzZSBvOm49e3g6aCx5OmkueStpLmhlaWdodH07YnJlYWs7Y2FzZSByOm49e3g6aS54K2kud2lkdGgseTpmfTticmVhaztjYXNlIHM6bj17eDppLngtYS53aWR0aCx5OmZ9O2JyZWFrO2RlZmF1bHQ6bj17eDppLngseTppLnl9fXZhciBtPWQ/JChkKTpudWxsO2lmKG51bGwhPW0pe3ZhciBnPVwieVwiPT09bT9cImhlaWdodFwiOlwid2lkdGhcIjtzd2l0Y2gocCl7Y2FzZSBsOm5bbV09blttXS0oaVtnXS8yLWFbZ10vMik7YnJlYWs7Y2FzZSB1Om5bbV09blttXSsoaVtnXS8yLWFbZ10vMil9fXJldHVybiBufWZ1bmN0aW9uIG10KHQsbil7dm9pZCAwPT09biYmKG49e30pO3ZhciBpPW4scz1pLnBsYWNlbWVudCxhPXZvaWQgMD09PXM/dC5wbGFjZW1lbnQ6cyxsPWkuYm91bmRhcnksdT12b2lkIDA9PT1sP2Q6bCxtPWkucm9vdEJvdW5kYXJ5LGc9dm9pZCAwPT09bT9wOm0sXz1pLmVsZW1lbnRDb250ZXh0LHY9dm9pZCAwPT09Xz9oOl8seT1pLmFsdEJvdW5kYXJ5LGI9dm9pZCAwIT09eSYmeSxFPWkucGFkZGluZyx3PXZvaWQgMD09PUU/MDpFLE89SyhcIm51bWJlclwiIT10eXBlb2Ygdz93OlgodyxjKSksRD12PT09aD9mOmgsQz10LnJlY3RzLnBvcHBlcixTPXQuZWxlbWVudHNbYj9EOnZdLE49ZnVuY3Rpb24odCxlLG4pe3ZhciBpPVwiY2xpcHBpbmdQYXJlbnRzXCI9PT1lP2Z1bmN0aW9uKHQpe3ZhciBlPWR0KFUodCkpLG49W1wiYWJzb2x1dGVcIixcImZpeGVkXCJdLmluZGV4T2YoRyh0KS5wb3NpdGlvbik+PTAmJlIodCk/Vih0KTp0O3JldHVybiBBKG4pP2UuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gQSh0KSYmTSh0LG4pJiZcImJvZHlcIiE9PVQodCl9KSk6W119KHQpOltdLmNvbmNhdChlKSxvPVtdLmNvbmNhdChpLFtuXSkscj1vWzBdLHM9by5yZWR1Y2UoKGZ1bmN0aW9uKGUsbil7dmFyIGk9aHQodCxuKTtyZXR1cm4gZS50b3A9UChpLnRvcCxlLnRvcCksZS5yaWdodD1rKGkucmlnaHQsZS5yaWdodCksZS5ib3R0b209ayhpLmJvdHRvbSxlLmJvdHRvbSksZS5sZWZ0PVAoaS5sZWZ0LGUubGVmdCksZX0pLGh0KHQscikpO3JldHVybiBzLndpZHRoPXMucmlnaHQtcy5sZWZ0LHMuaGVpZ2h0PXMuYm90dG9tLXMudG9wLHMueD1zLmxlZnQscy55PXMudG9wLHN9KEEoUyk/UzpTLmNvbnRleHRFbGVtZW50fHxXKHQuZWxlbWVudHMucG9wcGVyKSx1LGcpLEk9SCh0LmVsZW1lbnRzLnJlZmVyZW5jZSksTD1mdCh7cmVmZXJlbmNlOkksZWxlbWVudDpDLHN0cmF0ZWd5OlwiYWJzb2x1dGVcIixwbGFjZW1lbnQ6YX0pLHg9cHQoT2JqZWN0LmFzc2lnbih7fSxDLEwpKSxqPXY9PT1oP3g6SSxCPXt0b3A6Ti50b3Atai50b3ArTy50b3AsYm90dG9tOmouYm90dG9tLU4uYm90dG9tK08uYm90dG9tLGxlZnQ6Ti5sZWZ0LWoubGVmdCtPLmxlZnQscmlnaHQ6ai5yaWdodC1OLnJpZ2h0K08ucmlnaHR9LEY9dC5tb2RpZmllcnNEYXRhLm9mZnNldDtpZih2PT09aCYmRil7dmFyIHo9RlthXTtPYmplY3Qua2V5cyhCKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1bcixvXS5pbmRleE9mKHQpPj0wPzE6LTEsaT1bZSxvXS5pbmRleE9mKHQpPj0wP1wieVwiOlwieFwiO0JbdF0rPXpbaV0qbn0pKX1yZXR1cm4gQn1jb25zdCBndD17bmFtZTpcImZsaXBcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOmZ1bmN0aW9uKHQpe3ZhciBuPXQuc3RhdGUsaT10Lm9wdGlvbnMsdT10Lm5hbWU7aWYoIW4ubW9kaWZpZXJzRGF0YVt1XS5fc2tpcCl7Zm9yKHZhciBkPWkubWFpbkF4aXMscD12b2lkIDA9PT1kfHxkLGg9aS5hbHRBeGlzLGY9dm9pZCAwPT09aHx8aCxfPWkuZmFsbGJhY2tQbGFjZW1lbnRzLHY9aS5wYWRkaW5nLHk9aS5ib3VuZGFyeSxiPWkucm9vdEJvdW5kYXJ5LEU9aS5hbHRCb3VuZGFyeSx3PWkuZmxpcFZhcmlhdGlvbnMsTz12b2lkIDA9PT13fHx3LEQ9aS5hbGxvd2VkQXV0b1BsYWNlbWVudHMsQz1uLm9wdGlvbnMucGxhY2VtZW50LFM9eChDKSxUPV98fChTIT09QyYmTz9mdW5jdGlvbih0KXtpZih4KHQpPT09YSlyZXR1cm5bXTt2YXIgZT1vdCh0KTtyZXR1cm5bc3QodCksZSxzdChlKV19KEMpOltvdChDKV0pLE49W0NdLmNvbmNhdChUKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY29uY2F0KHgoZSk9PT1hP2Z1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9e30pO3ZhciBuPWUsaT1uLnBsYWNlbWVudCxvPW4uYm91bmRhcnkscj1uLnJvb3RCb3VuZGFyeSxzPW4ucGFkZGluZyxhPW4uZmxpcFZhcmlhdGlvbnMsbD1uLmFsbG93ZWRBdXRvUGxhY2VtZW50cyx1PXZvaWQgMD09PWw/ZzpsLGQ9UShpKSxwPWQ/YT9tOm0uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gUSh0KT09PWR9KSk6YyxoPXAuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdS5pbmRleE9mKHQpPj0wfSkpOzA9PT1oLmxlbmd0aCYmKGg9cCk7dmFyIGY9aC5yZWR1Y2UoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbbl09bXQodCx7cGxhY2VtZW50Om4sYm91bmRhcnk6byxyb290Qm91bmRhcnk6cixwYWRkaW5nOnN9KVt4KG4pXSxlfSkse30pO3JldHVybiBPYmplY3Qua2V5cyhmKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiBmW3RdLWZbZV19KSl9KG4se3BsYWNlbWVudDplLGJvdW5kYXJ5Onkscm9vdEJvdW5kYXJ5OmIscGFkZGluZzp2LGZsaXBWYXJpYXRpb25zOk8sYWxsb3dlZEF1dG9QbGFjZW1lbnRzOkR9KTplKX0pLFtdKSxBPW4ucmVjdHMucmVmZXJlbmNlLFI9bi5yZWN0cy5wb3BwZXIsST1uZXcgTWFwLEw9ITAsUD1OWzBdLGs9MDtrPE4ubGVuZ3RoO2srKyl7dmFyIGo9TltrXSxIPXgoaiksQj1RKGopPT09bCxNPVtlLG9dLmluZGV4T2YoSCk+PTAsRz1NP1wid2lkdGhcIjpcImhlaWdodFwiLEY9bXQobix7cGxhY2VtZW50OmosYm91bmRhcnk6eSxyb290Qm91bmRhcnk6YixhbHRCb3VuZGFyeTpFLHBhZGRpbmc6dn0pLFc9TT9CP3I6czpCP286ZTtBW0ddPlJbR10mJihXPW90KFcpKTt2YXIgVT1vdChXKSx6PVtdO2lmKHAmJnoucHVzaChGW0hdPD0wKSxmJiZ6LnB1c2goRltXXTw9MCxGW1VdPD0wKSx6LmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKSl7UD1qLEw9ITE7YnJlYWt9SS5zZXQoaix6KX1pZihMKWZvcih2YXIgVj1mdW5jdGlvbih0KXt2YXIgZT1OLmZpbmQoKGZ1bmN0aW9uKGUpe3ZhciBuPUkuZ2V0KGUpO2lmKG4pcmV0dXJuIG4uc2xpY2UoMCx0KS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIHR9KSl9KSk7aWYoZSlyZXR1cm4gUD1lLFwiYnJlYWtcIn0sJD1PPzM6MTskPjAmJlwiYnJlYWtcIiE9PVYoJCk7JC0tKTtuLnBsYWNlbWVudCE9PVAmJihuLm1vZGlmaWVyc0RhdGFbdV0uX3NraXA9ITAsbi5wbGFjZW1lbnQ9UCxuLnJlc2V0PSEwKX19LHJlcXVpcmVzSWZFeGlzdHM6W1wib2Zmc2V0XCJdLGRhdGE6e19za2lwOiExfX07ZnVuY3Rpb24gX3QodCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj17eDowLHk6MH0pLHt0b3A6dC50b3AtZS5oZWlnaHQtbi55LHJpZ2h0OnQucmlnaHQtZS53aWR0aCtuLngsYm90dG9tOnQuYm90dG9tLWUuaGVpZ2h0K24ueSxsZWZ0OnQubGVmdC1lLndpZHRoLW4ueH19ZnVuY3Rpb24gdnQodCl7cmV0dXJuW2UscixvLHNdLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdPj0wfSkpfWNvbnN0IHl0PXtuYW1lOlwiaGlkZVwiLGVuYWJsZWQ6ITAscGhhc2U6XCJtYWluXCIscmVxdWlyZXNJZkV4aXN0czpbXCJwcmV2ZW50T3ZlcmZsb3dcIl0sZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxuPXQubmFtZSxpPWUucmVjdHMucmVmZXJlbmNlLG89ZS5yZWN0cy5wb3BwZXIscj1lLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93LHM9bXQoZSx7ZWxlbWVudENvbnRleHQ6XCJyZWZlcmVuY2VcIn0pLGE9bXQoZSx7YWx0Qm91bmRhcnk6ITB9KSxjPV90KHMsaSksbD1fdChhLG8sciksdT12dChjKSxkPXZ0KGwpO2UubW9kaWZpZXJzRGF0YVtuXT17cmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOmMscG9wcGVyRXNjYXBlT2Zmc2V0czpsLGlzUmVmZXJlbmNlSGlkZGVuOnUsaGFzUG9wcGVyRXNjYXBlZDpkfSxlLmF0dHJpYnV0ZXMucG9wcGVyPU9iamVjdC5hc3NpZ24oe30sZS5hdHRyaWJ1dGVzLnBvcHBlcix7XCJkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuXCI6dSxcImRhdGEtcG9wcGVyLWVzY2FwZWRcIjpkfSl9fSxidD17bmFtZTpcIm9mZnNldFwiLGVuYWJsZWQ6ITAscGhhc2U6XCJtYWluXCIscmVxdWlyZXM6W1wicG9wcGVyT2Zmc2V0c1wiXSxmbjpmdW5jdGlvbih0KXt2YXIgbj10LnN0YXRlLGk9dC5vcHRpb25zLG89dC5uYW1lLGE9aS5vZmZzZXQsYz12b2lkIDA9PT1hP1swLDBdOmEsbD1nLnJlZHVjZSgoZnVuY3Rpb24odCxpKXtyZXR1cm4gdFtpXT1mdW5jdGlvbih0LG4saSl7dmFyIG89eCh0KSxhPVtzLGVdLmluZGV4T2Yobyk+PTA/LTE6MSxjPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aShPYmplY3QuYXNzaWduKHt9LG4se3BsYWNlbWVudDp0fSkpOmksbD1jWzBdLHU9Y1sxXTtyZXR1cm4gbD1sfHwwLHU9KHV8fDApKmEsW3Mscl0uaW5kZXhPZihvKT49MD97eDp1LHk6bH06e3g6bCx5OnV9fShpLG4ucmVjdHMsYyksdH0pLHt9KSx1PWxbbi5wbGFjZW1lbnRdLGQ9dS54LHA9dS55O251bGwhPW4ubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzJiYobi5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCs9ZCxuLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55Kz1wKSxuLm1vZGlmaWVyc0RhdGFbb109bH19LEV0PXtuYW1lOlwicG9wcGVyT2Zmc2V0c1wiLGVuYWJsZWQ6ITAscGhhc2U6XCJyZWFkXCIsZm46ZnVuY3Rpb24odCl7dmFyIGU9dC5zdGF0ZSxuPXQubmFtZTtlLm1vZGlmaWVyc0RhdGFbbl09ZnQoe3JlZmVyZW5jZTplLnJlY3RzLnJlZmVyZW5jZSxlbGVtZW50OmUucmVjdHMucG9wcGVyLHN0cmF0ZWd5OlwiYWJzb2x1dGVcIixwbGFjZW1lbnQ6ZS5wbGFjZW1lbnR9KX0sZGF0YTp7fX0sd3Q9e25hbWU6XCJwcmV2ZW50T3ZlcmZsb3dcIixlbmFibGVkOiEwLHBoYXNlOlwibWFpblwiLGZuOmZ1bmN0aW9uKHQpe3ZhciBuPXQuc3RhdGUsaT10Lm9wdGlvbnMsYT10Lm5hbWUsYz1pLm1haW5BeGlzLHU9dm9pZCAwPT09Y3x8YyxkPWkuYWx0QXhpcyxwPXZvaWQgMCE9PWQmJmQsaD1pLmJvdW5kYXJ5LGY9aS5yb290Qm91bmRhcnksbT1pLmFsdEJvdW5kYXJ5LGc9aS5wYWRkaW5nLF89aS50ZXRoZXIsdj12b2lkIDA9PT1ffHxfLHk9aS50ZXRoZXJPZmZzZXQsYj12b2lkIDA9PT15PzA6eSxFPW10KG4se2JvdW5kYXJ5Omgscm9vdEJvdW5kYXJ5OmYscGFkZGluZzpnLGFsdEJvdW5kYXJ5Om19KSx3PXgobi5wbGFjZW1lbnQpLE89UShuLnBsYWNlbWVudCksRD0hTyxDPSQodyksUz1cInhcIj09PUM/XCJ5XCI6XCJ4XCIsVD1uLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxOPW4ucmVjdHMucmVmZXJlbmNlLEE9bi5yZWN0cy5wb3BwZXIsUj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBiP2IoT2JqZWN0LmFzc2lnbih7fSxuLnJlY3RzLHtwbGFjZW1lbnQ6bi5wbGFjZW1lbnR9KSk6YixJPVwibnVtYmVyXCI9PXR5cGVvZiBSP3ttYWluQXhpczpSLGFsdEF4aXM6Un06T2JqZWN0LmFzc2lnbih7bWFpbkF4aXM6MCxhbHRBeGlzOjB9LFIpLEw9bi5tb2RpZmllcnNEYXRhLm9mZnNldD9uLm1vZGlmaWVyc0RhdGEub2Zmc2V0W24ucGxhY2VtZW50XTpudWxsLGo9e3g6MCx5OjB9O2lmKFQpe2lmKHUpe3ZhciBILE09XCJ5XCI9PT1DP2U6cyxHPVwieVwiPT09Qz9vOnIsRj1cInlcIj09PUM/XCJoZWlnaHRcIjpcIndpZHRoXCIsVz1UW0NdLFU9VytFW01dLHo9Vy1FW0ddLEs9dj8tQVtGXS8yOjAsWD1PPT09bD9OW0ZdOkFbRl0sWT1PPT09bD8tQVtGXTotTltGXSxKPW4uZWxlbWVudHMuYXJyb3csWj12JiZKP0IoSik6e3dpZHRoOjAsaGVpZ2h0OjB9LHR0PW4ubW9kaWZpZXJzRGF0YVtcImFycm93I3BlcnNpc3RlbnRcIl0/bi5tb2RpZmllcnNEYXRhW1wiYXJyb3cjcGVyc2lzdGVudFwiXS5wYWRkaW5nOnt0b3A6MCxyaWdodDowLGJvdHRvbTowLGxlZnQ6MH0sZXQ9dHRbTV0sbnQ9dHRbR10saXQ9cSgwLE5bRl0sWltGXSksb3Q9RD9OW0ZdLzItSy1pdC1ldC1JLm1haW5BeGlzOlgtaXQtZXQtSS5tYWluQXhpcyxydD1EPy1OW0ZdLzIrSytpdCtudCtJLm1haW5BeGlzOlkraXQrbnQrSS5tYWluQXhpcyxzdD1uLmVsZW1lbnRzLmFycm93JiZWKG4uZWxlbWVudHMuYXJyb3cpLGF0PXN0P1wieVwiPT09Qz9zdC5jbGllbnRUb3B8fDA6c3QuY2xpZW50TGVmdHx8MDowLGN0PW51bGwhPShIPW51bGw9PUw/dm9pZCAwOkxbQ10pP0g6MCxsdD1XK3J0LWN0LHV0PXEodj9rKFUsVytvdC1jdC1hdCk6VSxXLHY/UCh6LGx0KTp6KTtUW0NdPXV0LGpbQ109dXQtV31pZihwKXt2YXIgZHQscHQ9XCJ4XCI9PT1DP2U6cyxodD1cInhcIj09PUM/bzpyLGZ0PVRbU10sZ3Q9XCJ5XCI9PT1TP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiLF90PWZ0K0VbcHRdLHZ0PWZ0LUVbaHRdLHl0PS0xIT09W2Usc10uaW5kZXhPZih3KSxidD1udWxsIT0oZHQ9bnVsbD09TD92b2lkIDA6TFtTXSk/ZHQ6MCxFdD15dD9fdDpmdC1OW2d0XS1BW2d0XS1idCtJLmFsdEF4aXMsd3Q9eXQ/ZnQrTltndF0rQVtndF0tYnQtSS5hbHRBeGlzOnZ0LE90PXYmJnl0P2Z1bmN0aW9uKHQsZSxuKXt2YXIgaT1xKHQsZSxuKTtyZXR1cm4gaT5uP246aX0oRXQsZnQsd3QpOnEodj9FdDpfdCxmdCx2P3d0OnZ0KTtUW1NdPU90LGpbU109T3QtZnR9bi5tb2RpZmllcnNEYXRhW2FdPWp9fSxyZXF1aXJlc0lmRXhpc3RzOltcIm9mZnNldFwiXX07ZnVuY3Rpb24gT3QodCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgaSxvLHI9UihlKSxzPVIoZSkmJmZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj1qKGUud2lkdGgpL3Qub2Zmc2V0V2lkdGh8fDEsaT1qKGUuaGVpZ2h0KS90Lm9mZnNldEhlaWdodHx8MTtyZXR1cm4gMSE9PW58fDEhPT1pfShlKSxhPVcoZSksYz1IKHQscyksbD17c2Nyb2xsTGVmdDowLHNjcm9sbFRvcDowfSx1PXt4OjAseTowfTtyZXR1cm4ocnx8IXImJiFuKSYmKChcImJvZHlcIiE9PVQoZSl8fGx0KGEpKSYmKGw9KGk9ZSkhPT1OKGkpJiZSKGkpP3tzY3JvbGxMZWZ0OihvPWkpLnNjcm9sbExlZnQsc2Nyb2xsVG9wOm8uc2Nyb2xsVG9wfTphdChpKSksUihlKT8oKHU9SChlLCEwKSkueCs9ZS5jbGllbnRMZWZ0LHUueSs9ZS5jbGllbnRUb3ApOmEmJih1Lng9Y3QoYSkpKSx7eDpjLmxlZnQrbC5zY3JvbGxMZWZ0LXUueCx5OmMudG9wK2wuc2Nyb2xsVG9wLXUueSx3aWR0aDpjLndpZHRoLGhlaWdodDpjLmhlaWdodH19ZnVuY3Rpb24gRHQodCl7dmFyIGU9bmV3IE1hcCxuPW5ldyBTZXQsaT1bXTtmdW5jdGlvbiBvKHQpe24uYWRkKHQubmFtZSksW10uY29uY2F0KHQucmVxdWlyZXN8fFtdLHQucmVxdWlyZXNJZkV4aXN0c3x8W10pLmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKCFuLmhhcyh0KSl7dmFyIGk9ZS5nZXQodCk7aSYmbyhpKX19KSksaS5wdXNoKHQpfXJldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2Uuc2V0KHQubmFtZSx0KX0pKSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe24uaGFzKHQubmFtZSl8fG8odCl9KSksaX12YXIgQ3Q9e3BsYWNlbWVudDpcImJvdHRvbVwiLG1vZGlmaWVyczpbXSxzdHJhdGVneTpcImFic29sdXRlXCJ9O2Z1bmN0aW9uIFN0KCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkodCksbj0wO248dDtuKyspZVtuXT1hcmd1bWVudHNbbl07cmV0dXJuIWUuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuISh0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCl9KSl9ZnVuY3Rpb24gVHQodCl7dm9pZCAwPT09dCYmKHQ9e30pO3ZhciBlPXQsbj1lLmRlZmF1bHRNb2RpZmllcnMsaT12b2lkIDA9PT1uP1tdOm4sbz1lLmRlZmF1bHRPcHRpb25zLHI9dm9pZCAwPT09bz9DdDpvO3JldHVybiBmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49cik7dmFyIG8scyxhPXtwbGFjZW1lbnQ6XCJib3R0b21cIixvcmRlcmVkTW9kaWZpZXJzOltdLG9wdGlvbnM6T2JqZWN0LmFzc2lnbih7fSxDdCxyKSxtb2RpZmllcnNEYXRhOnt9LGVsZW1lbnRzOntyZWZlcmVuY2U6dCxwb3BwZXI6ZX0sYXR0cmlidXRlczp7fSxzdHlsZXM6e319LGM9W10sbD0hMSx1PXtzdGF0ZTphLHNldE9wdGlvbnM6ZnVuY3Rpb24obil7dmFyIG89XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKGEub3B0aW9ucyk6bjtkKCksYS5vcHRpb25zPU9iamVjdC5hc3NpZ24oe30scixhLm9wdGlvbnMsbyksYS5zY3JvbGxQYXJlbnRzPXtyZWZlcmVuY2U6QSh0KT9kdCh0KTp0LmNvbnRleHRFbGVtZW50P2R0KHQuY29udGV4dEVsZW1lbnQpOltdLHBvcHBlcjpkdChlKX07dmFyIHMsbCxwPWZ1bmN0aW9uKHQpe3ZhciBlPUR0KHQpO3JldHVybiBTLnJlZHVjZSgoZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5jb25jYXQoZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnBoYXNlPT09bn0pKSl9KSxbXSl9KChzPVtdLmNvbmNhdChpLGEub3B0aW9ucy5tb2RpZmllcnMpLGw9cy5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dFtlLm5hbWVdO3JldHVybiB0W2UubmFtZV09bj9PYmplY3QuYXNzaWduKHt9LG4sZSx7b3B0aW9uczpPYmplY3QuYXNzaWduKHt9LG4ub3B0aW9ucyxlLm9wdGlvbnMpLGRhdGE6T2JqZWN0LmFzc2lnbih7fSxuLmRhdGEsZS5kYXRhKX0pOmUsdH0pLHt9KSxPYmplY3Qua2V5cyhsKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBsW3RdfSkpKSk7cmV0dXJuIGEub3JkZXJlZE1vZGlmaWVycz1wLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZW5hYmxlZH0pKSxhLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49dC5vcHRpb25zLGk9dm9pZCAwPT09bj97fTpuLG89dC5lZmZlY3Q7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbyl7dmFyIHI9byh7c3RhdGU6YSxuYW1lOmUsaW5zdGFuY2U6dSxvcHRpb25zOml9KTtjLnB1c2gocnx8ZnVuY3Rpb24oKXt9KX19KSksdS51cGRhdGUoKX0sZm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXtpZighbCl7dmFyIHQ9YS5lbGVtZW50cyxlPXQucmVmZXJlbmNlLG49dC5wb3BwZXI7aWYoU3QoZSxuKSl7YS5yZWN0cz17cmVmZXJlbmNlOk90KGUsVihuKSxcImZpeGVkXCI9PT1hLm9wdGlvbnMuc3RyYXRlZ3kpLHBvcHBlcjpCKG4pfSxhLnJlc2V0PSExLGEucGxhY2VtZW50PWEub3B0aW9ucy5wbGFjZW1lbnQsYS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBhLm1vZGlmaWVyc0RhdGFbdC5uYW1lXT1PYmplY3QuYXNzaWduKHt9LHQuZGF0YSl9KSk7Zm9yKHZhciBpPTA7aTxhLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoO2krKylpZighMCE9PWEucmVzZXQpe3ZhciBvPWEub3JkZXJlZE1vZGlmaWVyc1tpXSxyPW8uZm4scz1vLm9wdGlvbnMsYz12b2lkIDA9PT1zP3t9OnMsZD1vLm5hbWU7XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKGE9cih7c3RhdGU6YSxvcHRpb25zOmMsbmFtZTpkLGluc3RhbmNlOnV9KXx8YSl9ZWxzZSBhLnJlc2V0PSExLGk9LTF9fX0sdXBkYXRlOihvPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXt1LmZvcmNlVXBkYXRlKCksdChhKX0pKX0sZnVuY3Rpb24oKXtyZXR1cm4gc3x8KHM9bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe1Byb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCl7cz12b2lkIDAsdChvKCkpfSkpfSkpKSxzfSksZGVzdHJveTpmdW5jdGlvbigpe2QoKSxsPSEwfX07aWYoIVN0KHQsZSkpcmV0dXJuIHU7ZnVuY3Rpb24gZCgpe2MuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQoKX0pKSxjPVtdfXJldHVybiB1LnNldE9wdGlvbnMobikudGhlbigoZnVuY3Rpb24odCl7IWwmJm4ub25GaXJzdFVwZGF0ZSYmbi5vbkZpcnN0VXBkYXRlKHQpfSkpLHV9fXZhciBOdD1UdCgpLEF0PVR0KHtkZWZhdWx0TW9kaWZpZXJzOltudCxFdCx0dCxMLGJ0LGd0LHd0LFkseXRdfSksUnQ9VHQoe2RlZmF1bHRNb2RpZmllcnM6W250LEV0LHR0LExdfSk7Y29uc3QgSXQ9XCJ0cmFuc2l0aW9uZW5kXCIsTHQ9dD0+e2xldCBlPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy10YXJnZXRcIik7aWYoIWV8fFwiI1wiPT09ZSl7bGV0IG49dC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO2lmKCFufHwhbi5pbmNsdWRlcyhcIiNcIikmJiFuLnN0YXJ0c1dpdGgoXCIuXCIpKXJldHVybiBudWxsO24uaW5jbHVkZXMoXCIjXCIpJiYhbi5zdGFydHNXaXRoKFwiI1wiKSYmKG49YCMke24uc3BsaXQoXCIjXCIpWzFdfWApLGU9biYmXCIjXCIhPT1uP24udHJpbSgpOm51bGx9cmV0dXJuIGV9LHh0PXQ9Pntjb25zdCBlPUx0KHQpO3JldHVybiBlJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpP2U6bnVsbH0sUHQ9dD0+e2NvbnN0IGU9THQodCk7cmV0dXJuIGU/ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTpudWxsfSxrdD10PT57dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChJdCkpfSxqdD10PT4hKCF0fHxcIm9iamVjdFwiIT10eXBlb2YgdCkmJih2b2lkIDAhPT10LmpxdWVyeSYmKHQ9dFswXSksdm9pZCAwIT09dC5ub2RlVHlwZSksSHQ9dD0+anQodCk/dC5qcXVlcnk/dFswXTp0Olwic3RyaW5nXCI9PXR5cGVvZiB0JiZ0Lmxlbmd0aD4wP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk6bnVsbCxCdD0odCxlLG4pPT57T2JqZWN0LmtleXMobikuZm9yRWFjaCgoaT0+e2NvbnN0IG89bltpXSxyPWVbaV0scz1yJiZqdChyKT9cImVsZW1lbnRcIjpudWxsPT0oYT1yKT9gJHthfWA6e30udG9TdHJpbmcuY2FsbChhKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTt2YXIgYTtpZighbmV3IFJlZ0V4cChvKS50ZXN0KHMpKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7dC50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwiJHtpfVwiIHByb3ZpZGVkIHR5cGUgXCIke3N9XCIgYnV0IGV4cGVjdGVkIHR5cGUgXCIke299XCIuYCl9KSl9LE10PXQ9PiEoIWp0KHQpfHwwPT09dC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkmJlwidmlzaWJsZVwiPT09Z2V0Q29tcHV0ZWRTdHlsZSh0KS5nZXRQcm9wZXJ0eVZhbHVlKFwidmlzaWJpbGl0eVwiKSxHdD10PT4hdHx8dC5ub2RlVHlwZSE9PU5vZGUuRUxFTUVOVF9OT0RFfHwhIXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIil8fCh2b2lkIDAhPT10LmRpc2FibGVkP3QuZGlzYWJsZWQ6dC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSYmXCJmYWxzZVwiIT09dC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSksRnQ9dD0+e2lmKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuZ2V0Um9vdE5vZGUpe2NvbnN0IGU9dC5nZXRSb290Tm9kZSgpO3JldHVybiBlIGluc3RhbmNlb2YgU2hhZG93Um9vdD9lOm51bGx9cmV0dXJuIHQgaW5zdGFuY2VvZiBTaGFkb3dSb290P3Q6dC5wYXJlbnROb2RlP0Z0KHQucGFyZW50Tm9kZSk6bnVsbH0sV3Q9KCk9Pnt9LFV0PXQ9Pnt0Lm9mZnNldEhlaWdodH0senQ9KCk9Pntjb25zdHtqUXVlcnk6dH09d2luZG93O3JldHVybiB0JiYhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWJzLW5vLWpxdWVyeVwiKT90Om51bGx9LFZ0PVtdLCR0PSgpPT5cInJ0bFwiPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpcixxdD10PT57dmFyIGU7ZT0oKT0+e2NvbnN0IGU9enQoKTtpZihlKXtjb25zdCBuPXQuTkFNRSxpPWUuZm5bbl07ZS5mbltuXT10LmpRdWVyeUludGVyZmFjZSxlLmZuW25dLkNvbnN0cnVjdG9yPXQsZS5mbltuXS5ub0NvbmZsaWN0PSgpPT4oZS5mbltuXT1pLHQualF1ZXJ5SW50ZXJmYWNlKX19LFwibG9hZGluZ1wiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZT8oVnQubGVuZ3RofHxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCgoKT0+e1Z0LmZvckVhY2goKHQ9PnQoKSkpfSkpLFZ0LnB1c2goZSkpOmUoKX0sS3Q9dD0+e1wiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQoKX0sWHQ9KHQsZSxuPSEwKT0+e2lmKCFuKXJldHVybiB2b2lkIEt0KHQpO2NvbnN0IGk9KHQ9PntpZighdClyZXR1cm4gMDtsZXR7dHJhbnNpdGlvbkR1cmF0aW9uOmUsdHJhbnNpdGlvbkRlbGF5Om59PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpO2NvbnN0IGk9TnVtYmVyLnBhcnNlRmxvYXQoZSksbz1OdW1iZXIucGFyc2VGbG9hdChuKTtyZXR1cm4gaXx8bz8oZT1lLnNwbGl0KFwiLFwiKVswXSxuPW4uc3BsaXQoXCIsXCIpWzBdLDFlMyooTnVtYmVyLnBhcnNlRmxvYXQoZSkrTnVtYmVyLnBhcnNlRmxvYXQobikpKTowfSkoZSkrNTtsZXQgbz0hMTtjb25zdCByPSh7dGFyZ2V0Om59KT0+e249PT1lJiYobz0hMCxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoSXQsciksS3QodCkpfTtlLmFkZEV2ZW50TGlzdGVuZXIoSXQsciksc2V0VGltZW91dCgoKCk9PntvfHxrdChlKX0pLGkpfSxZdD0odCxlLG4saSk9PntsZXQgbz10LmluZGV4T2YoZSk7aWYoLTE9PT1vKXJldHVybiB0WyFuJiZpP3QubGVuZ3RoLTE6MF07Y29uc3Qgcj10Lmxlbmd0aDtyZXR1cm4gbys9bj8xOi0xLGkmJihvPShvK3IpJXIpLHRbTWF0aC5tYXgoMCxNYXRoLm1pbihvLHItMSkpXX0sUXQ9L1teLl0qKD89XFwuLiopXFwufC4qLyxKdD0vXFwuLiovLFp0PS86OlxcZCskLyx0ZT17fTtsZXQgZWU9MTtjb25zdCBuZT17bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwifSxpZT0vXihtb3VzZWVudGVyfG1vdXNlbGVhdmUpL2ksb2U9bmV3IFNldChbXCJjbGlja1wiLFwiZGJsY2xpY2tcIixcIm1vdXNldXBcIixcIm1vdXNlZG93blwiLFwiY29udGV4dG1lbnVcIixcIm1vdXNld2hlZWxcIixcIkRPTU1vdXNlU2Nyb2xsXCIsXCJtb3VzZW92ZXJcIixcIm1vdXNlb3V0XCIsXCJtb3VzZW1vdmVcIixcInNlbGVjdHN0YXJ0XCIsXCJzZWxlY3RlbmRcIixcImtleWRvd25cIixcImtleXByZXNzXCIsXCJrZXl1cFwiLFwib3JpZW50YXRpb25jaGFuZ2VcIixcInRvdWNoc3RhcnRcIixcInRvdWNobW92ZVwiLFwidG91Y2hlbmRcIixcInRvdWNoY2FuY2VsXCIsXCJwb2ludGVyZG93blwiLFwicG9pbnRlcm1vdmVcIixcInBvaW50ZXJ1cFwiLFwicG9pbnRlcmxlYXZlXCIsXCJwb2ludGVyY2FuY2VsXCIsXCJnZXN0dXJlc3RhcnRcIixcImdlc3R1cmVjaGFuZ2VcIixcImdlc3R1cmVlbmRcIixcImZvY3VzXCIsXCJibHVyXCIsXCJjaGFuZ2VcIixcInJlc2V0XCIsXCJzZWxlY3RcIixcInN1Ym1pdFwiLFwiZm9jdXNpblwiLFwiZm9jdXNvdXRcIixcImxvYWRcIixcInVubG9hZFwiLFwiYmVmb3JldW5sb2FkXCIsXCJyZXNpemVcIixcIm1vdmVcIixcIkRPTUNvbnRlbnRMb2FkZWRcIixcInJlYWR5c3RhdGVjaGFuZ2VcIixcImVycm9yXCIsXCJhYm9ydFwiLFwic2Nyb2xsXCJdKTtmdW5jdGlvbiByZSh0LGUpe3JldHVybiBlJiZgJHtlfTo6JHtlZSsrfWB8fHQudWlkRXZlbnR8fGVlKyt9ZnVuY3Rpb24gc2UodCl7Y29uc3QgZT1yZSh0KTtyZXR1cm4gdC51aWRFdmVudD1lLHRlW2VdPXRlW2VdfHx7fSx0ZVtlXX1mdW5jdGlvbiBhZSh0LGUsbj1udWxsKXtjb25zdCBpPU9iamVjdC5rZXlzKHQpO2ZvcihsZXQgbz0wLHI9aS5sZW5ndGg7bzxyO28rKyl7Y29uc3Qgcj10W2lbb11dO2lmKHIub3JpZ2luYWxIYW5kbGVyPT09ZSYmci5kZWxlZ2F0aW9uU2VsZWN0b3I9PT1uKXJldHVybiByfXJldHVybiBudWxsfWZ1bmN0aW9uIGNlKHQsZSxuKXtjb25zdCBpPVwic3RyaW5nXCI9PXR5cGVvZiBlLG89aT9uOmU7bGV0IHI9ZGUodCk7cmV0dXJuIG9lLmhhcyhyKXx8KHI9dCksW2ksbyxyXX1mdW5jdGlvbiBsZSh0LGUsbixpLG8pe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhdClyZXR1cm47aWYobnx8KG49aSxpPW51bGwpLGllLnRlc3QoZSkpe2NvbnN0IHQ9dD0+ZnVuY3Rpb24oZSl7aWYoIWUucmVsYXRlZFRhcmdldHx8ZS5yZWxhdGVkVGFyZ2V0IT09ZS5kZWxlZ2F0ZVRhcmdldCYmIWUuZGVsZWdhdGVUYXJnZXQuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSlyZXR1cm4gdC5jYWxsKHRoaXMsZSl9O2k/aT10KGkpOm49dChuKX1jb25zdFtyLHMsYV09Y2UoZSxuLGkpLGM9c2UodCksbD1jW2FdfHwoY1thXT17fSksdT1hZShsLHMscj9uOm51bGwpO2lmKHUpcmV0dXJuIHZvaWQodS5vbmVPZmY9dS5vbmVPZmYmJm8pO2NvbnN0IGQ9cmUocyxlLnJlcGxhY2UoUXQsXCJcIikpLHA9cj9mdW5jdGlvbih0LGUsbil7cmV0dXJuIGZ1bmN0aW9uIGkobyl7Y29uc3Qgcj10LnF1ZXJ5U2VsZWN0b3JBbGwoZSk7Zm9yKGxldHt0YXJnZXQ6c309bztzJiZzIT09dGhpcztzPXMucGFyZW50Tm9kZSlmb3IobGV0IGE9ci5sZW5ndGg7YS0tOylpZihyW2FdPT09cylyZXR1cm4gby5kZWxlZ2F0ZVRhcmdldD1zLGkub25lT2ZmJiZwZS5vZmYodCxvLnR5cGUsZSxuKSxuLmFwcGx5KHMsW29dKTtyZXR1cm4gbnVsbH19KHQsbixpKTpmdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbiBuKGkpe3JldHVybiBpLmRlbGVnYXRlVGFyZ2V0PXQsbi5vbmVPZmYmJnBlLm9mZih0LGkudHlwZSxlKSxlLmFwcGx5KHQsW2ldKX19KHQsbik7cC5kZWxlZ2F0aW9uU2VsZWN0b3I9cj9uOm51bGwscC5vcmlnaW5hbEhhbmRsZXI9cyxwLm9uZU9mZj1vLHAudWlkRXZlbnQ9ZCxsW2RdPXAsdC5hZGRFdmVudExpc3RlbmVyKGEscCxyKX1mdW5jdGlvbiB1ZSh0LGUsbixpLG8pe2NvbnN0IHI9YWUoZVtuXSxpLG8pO3ImJih0LnJlbW92ZUV2ZW50TGlzdGVuZXIobixyLEJvb2xlYW4obykpLGRlbGV0ZSBlW25dW3IudWlkRXZlbnRdKX1mdW5jdGlvbiBkZSh0KXtyZXR1cm4gdD10LnJlcGxhY2UoSnQsXCJcIiksbmVbdF18fHR9Y29uc3QgcGU9e29uKHQsZSxuLGkpe2xlKHQsZSxuLGksITEpfSxvbmUodCxlLG4saSl7bGUodCxlLG4saSwhMCl9LG9mZih0LGUsbixpKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8IXQpcmV0dXJuO2NvbnN0W28scixzXT1jZShlLG4saSksYT1zIT09ZSxjPXNlKHQpLGw9ZS5zdGFydHNXaXRoKFwiLlwiKTtpZih2b2lkIDAhPT1yKXtpZighY3x8IWNbc10pcmV0dXJuO3JldHVybiB2b2lkIHVlKHQsYyxzLHIsbz9uOm51bGwpfWwmJk9iamVjdC5rZXlzKGMpLmZvckVhY2goKG49PnshZnVuY3Rpb24odCxlLG4saSl7Y29uc3Qgbz1lW25dfHx7fTtPYmplY3Qua2V5cyhvKS5mb3JFYWNoKChyPT57aWYoci5pbmNsdWRlcyhpKSl7Y29uc3QgaT1vW3JdO3VlKHQsZSxuLGkub3JpZ2luYWxIYW5kbGVyLGkuZGVsZWdhdGlvblNlbGVjdG9yKX19KSl9KHQsYyxuLGUuc2xpY2UoMSkpfSkpO2NvbnN0IHU9Y1tzXXx8e307T2JqZWN0LmtleXModSkuZm9yRWFjaCgobj0+e2NvbnN0IGk9bi5yZXBsYWNlKFp0LFwiXCIpO2lmKCFhfHxlLmluY2x1ZGVzKGkpKXtjb25zdCBlPXVbbl07dWUodCxjLHMsZS5vcmlnaW5hbEhhbmRsZXIsZS5kZWxlZ2F0aW9uU2VsZWN0b3IpfX0pKX0sdHJpZ2dlcih0LGUsbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fCF0KXJldHVybiBudWxsO2NvbnN0IGk9enQoKSxvPWRlKGUpLHI9ZSE9PW8scz1vZS5oYXMobyk7bGV0IGEsYz0hMCxsPSEwLHU9ITEsZD1udWxsO3JldHVybiByJiZpJiYoYT1pLkV2ZW50KGUsbiksaSh0KS50cmlnZ2VyKGEpLGM9IWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSxsPSFhLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCksdT1hLmlzRGVmYXVsdFByZXZlbnRlZCgpKSxzPyhkPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiSFRNTEV2ZW50c1wiKSxkLmluaXRFdmVudChvLGMsITApKTpkPW5ldyBDdXN0b21FdmVudChlLHtidWJibGVzOmMsY2FuY2VsYWJsZTohMH0pLHZvaWQgMCE9PW4mJk9iamVjdC5rZXlzKG4pLmZvckVhY2goKHQ9PntPYmplY3QuZGVmaW5lUHJvcGVydHkoZCx0LHtnZXQ6KCk9Pm5bdF19KX0pKSx1JiZkLnByZXZlbnREZWZhdWx0KCksbCYmdC5kaXNwYXRjaEV2ZW50KGQpLGQuZGVmYXVsdFByZXZlbnRlZCYmdm9pZCAwIT09YSYmYS5wcmV2ZW50RGVmYXVsdCgpLGR9fSxoZT1uZXcgTWFwLGZlPXtzZXQodCxlLG4pe2hlLmhhcyh0KXx8aGUuc2V0KHQsbmV3IE1hcCk7Y29uc3QgaT1oZS5nZXQodCk7aS5oYXMoZSl8fDA9PT1pLnNpemU/aS5zZXQoZSxuKTpjb25zb2xlLmVycm9yKGBCb290c3RyYXAgZG9lc24ndCBhbGxvdyBtb3JlIHRoYW4gb25lIGluc3RhbmNlIHBlciBlbGVtZW50LiBCb3VuZCBpbnN0YW5jZTogJHtBcnJheS5mcm9tKGkua2V5cygpKVswXX0uYCl9LGdldDoodCxlKT0+aGUuaGFzKHQpJiZoZS5nZXQodCkuZ2V0KGUpfHxudWxsLHJlbW92ZSh0LGUpe2lmKCFoZS5oYXModCkpcmV0dXJuO2NvbnN0IG49aGUuZ2V0KHQpO24uZGVsZXRlKGUpLDA9PT1uLnNpemUmJmhlLmRlbGV0ZSh0KX19O2NsYXNzIG1le2NvbnN0cnVjdG9yKHQpeyh0PUh0KHQpKSYmKHRoaXMuX2VsZW1lbnQ9dCxmZS5zZXQodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLHRoaXMpKX1kaXNwb3NlKCl7ZmUucmVtb3ZlKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSkscGUub2ZmKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLmZvckVhY2goKHQ9Pnt0aGlzW3RdPW51bGx9KSl9X3F1ZXVlQ2FsbGJhY2sodCxlLG49ITApe1h0KHQsZSxuKX1zdGF0aWMgZ2V0SW5zdGFuY2UodCl7cmV0dXJuIGZlLmdldChIdCh0KSx0aGlzLkRBVEFfS0VZKX1zdGF0aWMgZ2V0T3JDcmVhdGVJbnN0YW5jZSh0LGU9e30pe3JldHVybiB0aGlzLmdldEluc3RhbmNlKHQpfHxuZXcgdGhpcyh0LFwib2JqZWN0XCI9PXR5cGVvZiBlP2U6bnVsbCl9c3RhdGljIGdldCBWRVJTSU9OKCl7cmV0dXJuXCI1LjEuM1wifXN0YXRpYyBnZXQgTkFNRSgpe3Rocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gaW1wbGVtZW50IHRoZSBzdGF0aWMgbWV0aG9kIFwiTkFNRVwiLCBmb3IgZWFjaCBjb21wb25lbnQhJyl9c3RhdGljIGdldCBEQVRBX0tFWSgpe3JldHVybmBicy4ke3RoaXMuTkFNRX1gfXN0YXRpYyBnZXQgRVZFTlRfS0VZKCl7cmV0dXJuYC4ke3RoaXMuREFUQV9LRVl9YH19Y29uc3QgZ2U9KHQsZT1cImhpZGVcIik9Pntjb25zdCBuPWBjbGljay5kaXNtaXNzJHt0LkVWRU5UX0tFWX1gLGk9dC5OQU1FO3BlLm9uKGRvY3VtZW50LG4sYFtkYXRhLWJzLWRpc21pc3M9XCIke2l9XCJdYCwoZnVuY3Rpb24obil7aWYoW1wiQVwiLFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpJiZuLnByZXZlbnREZWZhdWx0KCksR3QodGhpcykpcmV0dXJuO2NvbnN0IG89UHQodGhpcyl8fHRoaXMuY2xvc2VzdChgLiR7aX1gKTt0LmdldE9yQ3JlYXRlSW5zdGFuY2UobylbZV0oKX0pKX07Y2xhc3MgX2UgZXh0ZW5kcyBtZXtzdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm5cImFsZXJ0XCJ9Y2xvc2UoKXtpZihwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJjbG9zZS5icy5hbGVydFwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93XCIpO2NvbnN0IHQ9dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJmYWRlXCIpO3RoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT50aGlzLl9kZXN0cm95RWxlbWVudCgpKSx0aGlzLl9lbGVtZW50LHQpfV9kZXN0cm95RWxlbWVudCgpe3RoaXMuX2VsZW1lbnQucmVtb3ZlKCkscGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiY2xvc2VkLmJzLmFsZXJ0XCIpLHRoaXMuZGlzcG9zZSgpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPV9lLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF18fHQuc3RhcnRzV2l0aChcIl9cIil8fFwiY29uc3RydWN0b3JcIj09PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSh0aGlzKX19KSl9fWdlKF9lLFwiY2xvc2VcIikscXQoX2UpO2NvbnN0IHZlPSdbZGF0YS1icy10b2dnbGU9XCJidXR0b25cIl0nO2NsYXNzIHllIGV4dGVuZHMgbWV7c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJidXR0b25cIn10b2dnbGUoKXt0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcHJlc3NlZFwiLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZVwiKSl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9eWUuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcInRvZ2dsZVwiPT09dCYmZVt0XSgpfSkpfX1mdW5jdGlvbiBiZSh0KXtyZXR1cm5cInRydWVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJih0PT09TnVtYmVyKHQpLnRvU3RyaW5nKCk/TnVtYmVyKHQpOlwiXCI9PT10fHxcIm51bGxcIj09PXQ/bnVsbDp0KX1mdW5jdGlvbiBFZSh0KXtyZXR1cm4gdC5yZXBsYWNlKC9bQS1aXS9nLCh0PT5gLSR7dC50b0xvd2VyQ2FzZSgpfWApKX1wZS5vbihkb2N1bWVudCxcImNsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaVwiLHZlLCh0PT57dC5wcmV2ZW50RGVmYXVsdCgpO2NvbnN0IGU9dC50YXJnZXQuY2xvc2VzdCh2ZSk7eWUuZ2V0T3JDcmVhdGVJbnN0YW5jZShlKS50b2dnbGUoKX0pKSxxdCh5ZSk7Y29uc3Qgd2U9e3NldERhdGFBdHRyaWJ1dGUodCxlLG4pe3Quc2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7RWUoZSl9YCxuKX0scmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LGUpe3QucmVtb3ZlQXR0cmlidXRlKGBkYXRhLWJzLSR7RWUoZSl9YCl9LGdldERhdGFBdHRyaWJ1dGVzKHQpe2lmKCF0KXJldHVybnt9O2NvbnN0IGU9e307cmV0dXJuIE9iamVjdC5rZXlzKHQuZGF0YXNldCkuZmlsdGVyKCh0PT50LnN0YXJ0c1dpdGgoXCJic1wiKSkpLmZvckVhY2goKG49PntsZXQgaT1uLnJlcGxhY2UoL15icy8sXCJcIik7aT1pLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK2kuc2xpY2UoMSxpLmxlbmd0aCksZVtpXT1iZSh0LmRhdGFzZXRbbl0pfSkpLGV9LGdldERhdGFBdHRyaWJ1dGU6KHQsZSk9PmJlKHQuZ2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7RWUoZSl9YCkpLG9mZnNldCh0KXtjb25zdCBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3RvcDplLnRvcCt3aW5kb3cucGFnZVlPZmZzZXQsbGVmdDplLmxlZnQrd2luZG93LnBhZ2VYT2Zmc2V0fX0scG9zaXRpb246dD0+KHt0b3A6dC5vZmZzZXRUb3AsbGVmdDp0Lm9mZnNldExlZnR9KX0sT2U9e2ZpbmQ6KHQsZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpPT5bXS5jb25jYXQoLi4uRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKGUsdCkpLGZpbmRPbmU6KHQsZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpPT5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yLmNhbGwoZSx0KSxjaGlsZHJlbjoodCxlKT0+W10uY29uY2F0KC4uLnQuY2hpbGRyZW4pLmZpbHRlcigodD0+dC5tYXRjaGVzKGUpKSkscGFyZW50cyh0LGUpe2NvbnN0IG49W107bGV0IGk9dC5wYXJlbnROb2RlO2Zvcig7aSYmaS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiYzIT09aS5ub2RlVHlwZTspaS5tYXRjaGVzKGUpJiZuLnB1c2goaSksaT1pLnBhcmVudE5vZGU7cmV0dXJuIG59LHByZXYodCxlKXtsZXQgbj10LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7Zm9yKDtuOyl7aWYobi5tYXRjaGVzKGUpKXJldHVybltuXTtuPW4ucHJldmlvdXNFbGVtZW50U2libGluZ31yZXR1cm5bXX0sbmV4dCh0LGUpe2xldCBuPXQubmV4dEVsZW1lbnRTaWJsaW5nO2Zvcig7bjspe2lmKG4ubWF0Y2hlcyhlKSlyZXR1cm5bbl07bj1uLm5leHRFbGVtZW50U2libGluZ31yZXR1cm5bXX0sZm9jdXNhYmxlQ2hpbGRyZW4odCl7Y29uc3QgZT1bXCJhXCIsXCJidXR0b25cIixcImlucHV0XCIsXCJ0ZXh0YXJlYVwiLFwic2VsZWN0XCIsXCJkZXRhaWxzXCIsXCJbdGFiaW5kZXhdXCIsJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJ10ubWFwKCh0PT5gJHt0fTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pYCkpLmpvaW4oXCIsIFwiKTtyZXR1cm4gdGhpcy5maW5kKGUsdCkuZmlsdGVyKCh0PT4hR3QodCkmJk10KHQpKSl9fSxEZT1cImNhcm91c2VsXCIsQ2U9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxzbGlkZTohMSxwYXVzZTpcImhvdmVyXCIsd3JhcDohMCx0b3VjaDohMH0sU2U9e2ludGVydmFsOlwiKG51bWJlcnxib29sZWFuKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLHNsaWRlOlwiKGJvb2xlYW58c3RyaW5nKVwiLHBhdXNlOlwiKHN0cmluZ3xib29sZWFuKVwiLHdyYXA6XCJib29sZWFuXCIsdG91Y2g6XCJib29sZWFuXCJ9LFRlPVwibmV4dFwiLE5lPVwicHJldlwiLEFlPVwibGVmdFwiLFJlPVwicmlnaHRcIixJZT17QXJyb3dMZWZ0OlJlLEFycm93UmlnaHQ6QWV9LExlPVwic2xpZC5icy5jYXJvdXNlbFwiLHhlPVwiYWN0aXZlXCIsUGU9XCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIjtjbGFzcyBrZSBleHRlbmRzIG1le2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pc1BhdXNlZD0hMSx0aGlzLl9pc1NsaWRpbmc9ITEsdGhpcy50b3VjaFRpbWVvdXQ9bnVsbCx0aGlzLnRvdWNoU3RhcnRYPTAsdGhpcy50b3VjaERlbHRhWD0wLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9T2UuZmluZE9uZShcIi5jYXJvdXNlbC1pbmRpY2F0b3JzXCIsdGhpcy5fZWxlbWVudCksdGhpcy5fdG91Y2hTdXBwb3J0ZWQ9XCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8bmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzPjAsdGhpcy5fcG9pbnRlckV2ZW50PUJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCksdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gQ2V9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuIERlfW5leHQoKXt0aGlzLl9zbGlkZShUZSl9bmV4dFdoZW5WaXNpYmxlKCl7IWRvY3VtZW50LmhpZGRlbiYmTXQodGhpcy5fZWxlbWVudCkmJnRoaXMubmV4dCgpfXByZXYoKXt0aGlzLl9zbGlkZShOZSl9cGF1c2UodCl7dHx8KHRoaXMuX2lzUGF1c2VkPSEwKSxPZS5maW5kT25lKFwiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldlwiLHRoaXMuX2VsZW1lbnQpJiYoa3QodGhpcy5fZWxlbWVudCksdGhpcy5jeWNsZSghMCkpLGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLHRoaXMuX2ludGVydmFsPW51bGx9Y3ljbGUodCl7dHx8KHRoaXMuX2lzUGF1c2VkPSExKSx0aGlzLl9pbnRlcnZhbCYmKGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLHRoaXMuX2ludGVydmFsPW51bGwpLHRoaXMuX2NvbmZpZyYmdGhpcy5fY29uZmlnLmludGVydmFsJiYhdGhpcy5faXNQYXVzZWQmJih0aGlzLl91cGRhdGVJbnRlcnZhbCgpLHRoaXMuX2ludGVydmFsPXNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGU/dGhpcy5uZXh0V2hlblZpc2libGU6dGhpcy5uZXh0KS5iaW5kKHRoaXMpLHRoaXMuX2NvbmZpZy5pbnRlcnZhbCkpfXRvKHQpe3RoaXMuX2FjdGl2ZUVsZW1lbnQ9T2UuZmluZE9uZShQZSx0aGlzLl9lbGVtZW50KTtjb25zdCBlPXRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtpZih0PnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHx0PDApcmV0dXJuO2lmKHRoaXMuX2lzU2xpZGluZylyZXR1cm4gdm9pZCBwZS5vbmUodGhpcy5fZWxlbWVudCxMZSwoKCk9PnRoaXMudG8odCkpKTtpZihlPT09dClyZXR1cm4gdGhpcy5wYXVzZSgpLHZvaWQgdGhpcy5jeWNsZSgpO2NvbnN0IG49dD5lP1RlOk5lO3RoaXMuX3NsaWRlKG4sdGhpcy5faXRlbXNbdF0pfV9nZXRDb25maWcodCl7cmV0dXJuIHQ9ey4uLkNlLC4uLndlLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6e319LEJ0KERlLHQsU2UpLHR9X2hhbmRsZVN3aXBlKCl7Y29uc3QgdD1NYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtpZih0PD00MClyZXR1cm47Y29uc3QgZT10L3RoaXMudG91Y2hEZWx0YVg7dGhpcy50b3VjaERlbHRhWD0wLGUmJnRoaXMuX3NsaWRlKGU+MD9SZTpBZSl9X2FkZEV2ZW50TGlzdGVuZXJzKCl7dGhpcy5fY29uZmlnLmtleWJvYXJkJiZwZS5vbih0aGlzLl9lbGVtZW50LFwia2V5ZG93bi5icy5jYXJvdXNlbFwiLCh0PT50aGlzLl9rZXlkb3duKHQpKSksXCJob3ZlclwiPT09dGhpcy5fY29uZmlnLnBhdXNlJiYocGUub24odGhpcy5fZWxlbWVudCxcIm1vdXNlZW50ZXIuYnMuY2Fyb3VzZWxcIiwodD0+dGhpcy5wYXVzZSh0KSkpLHBlLm9uKHRoaXMuX2VsZW1lbnQsXCJtb3VzZWxlYXZlLmJzLmNhcm91c2VsXCIsKHQ9PnRoaXMuY3ljbGUodCkpKSksdGhpcy5fY29uZmlnLnRvdWNoJiZ0aGlzLl90b3VjaFN1cHBvcnRlZCYmdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpfV9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCl7Y29uc3QgdD10PT50aGlzLl9wb2ludGVyRXZlbnQmJihcInBlblwiPT09dC5wb2ludGVyVHlwZXx8XCJ0b3VjaFwiPT09dC5wb2ludGVyVHlwZSksZT1lPT57dChlKT90aGlzLnRvdWNoU3RhcnRYPWUuY2xpZW50WDp0aGlzLl9wb2ludGVyRXZlbnR8fCh0aGlzLnRvdWNoU3RhcnRYPWUudG91Y2hlc1swXS5jbGllbnRYKX0sbj10PT57dGhpcy50b3VjaERlbHRhWD10LnRvdWNoZXMmJnQudG91Y2hlcy5sZW5ndGg+MT8wOnQudG91Y2hlc1swXS5jbGllbnRYLXRoaXMudG91Y2hTdGFydFh9LGk9ZT0+e3QoZSkmJih0aGlzLnRvdWNoRGVsdGFYPWUuY2xpZW50WC10aGlzLnRvdWNoU3RhcnRYKSx0aGlzLl9oYW5kbGVTd2lwZSgpLFwiaG92ZXJcIj09PXRoaXMuX2NvbmZpZy5wYXVzZSYmKHRoaXMucGF1c2UoKSx0aGlzLnRvdWNoVGltZW91dCYmY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KSx0aGlzLnRvdWNoVGltZW91dD1zZXRUaW1lb3V0KCh0PT50aGlzLmN5Y2xlKHQpKSw1MDArdGhpcy5fY29uZmlnLmludGVydmFsKSl9O09lLmZpbmQoXCIuY2Fyb3VzZWwtaXRlbSBpbWdcIix0aGlzLl9lbGVtZW50KS5mb3JFYWNoKCh0PT57cGUub24odCxcImRyYWdzdGFydC5icy5jYXJvdXNlbFwiLCh0PT50LnByZXZlbnREZWZhdWx0KCkpKX0pKSx0aGlzLl9wb2ludGVyRXZlbnQ/KHBlLm9uKHRoaXMuX2VsZW1lbnQsXCJwb2ludGVyZG93bi5icy5jYXJvdXNlbFwiLCh0PT5lKHQpKSkscGUub24odGhpcy5fZWxlbWVudCxcInBvaW50ZXJ1cC5icy5jYXJvdXNlbFwiLCh0PT5pKHQpKSksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicG9pbnRlci1ldmVudFwiKSk6KHBlLm9uKHRoaXMuX2VsZW1lbnQsXCJ0b3VjaHN0YXJ0LmJzLmNhcm91c2VsXCIsKHQ9PmUodCkpKSxwZS5vbih0aGlzLl9lbGVtZW50LFwidG91Y2htb3ZlLmJzLmNhcm91c2VsXCIsKHQ9Pm4odCkpKSxwZS5vbih0aGlzLl9lbGVtZW50LFwidG91Y2hlbmQuYnMuY2Fyb3VzZWxcIiwodD0+aSh0KSkpKX1fa2V5ZG93bih0KXtpZigvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpKXJldHVybjtjb25zdCBlPUllW3Qua2V5XTtlJiYodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuX3NsaWRlKGUpKX1fZ2V0SXRlbUluZGV4KHQpe3JldHVybiB0aGlzLl9pdGVtcz10JiZ0LnBhcmVudE5vZGU/T2UuZmluZChcIi5jYXJvdXNlbC1pdGVtXCIsdC5wYXJlbnROb2RlKTpbXSx0aGlzLl9pdGVtcy5pbmRleE9mKHQpfV9nZXRJdGVtQnlPcmRlcih0LGUpe2NvbnN0IG49dD09PVRlO3JldHVybiBZdCh0aGlzLl9pdGVtcyxlLG4sdGhpcy5fY29uZmlnLndyYXApfV90cmlnZ2VyU2xpZGVFdmVudCh0LGUpe2NvbnN0IG49dGhpcy5fZ2V0SXRlbUluZGV4KHQpLGk9dGhpcy5fZ2V0SXRlbUluZGV4KE9lLmZpbmRPbmUoUGUsdGhpcy5fZWxlbWVudCkpO3JldHVybiBwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzbGlkZS5icy5jYXJvdXNlbFwiLHtyZWxhdGVkVGFyZ2V0OnQsZGlyZWN0aW9uOmUsZnJvbTppLHRvOm59KX1fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCh0KXtpZih0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCl7Y29uc3QgZT1PZS5maW5kT25lKFwiLmFjdGl2ZVwiLHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtlLmNsYXNzTGlzdC5yZW1vdmUoeGUpLGUucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIpO2NvbnN0IG49T2UuZmluZChcIltkYXRhLWJzLXRhcmdldF1cIix0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7Zm9yKGxldCBlPTA7ZTxuLmxlbmd0aDtlKyspaWYoTnVtYmVyLnBhcnNlSW50KG5bZV0uZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1zbGlkZS10b1wiKSwxMCk9PT10aGlzLl9nZXRJdGVtSW5kZXgodCkpe25bZV0uY2xhc3NMaXN0LmFkZCh4ZSksbltlXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIixcInRydWVcIik7YnJlYWt9fX1fdXBkYXRlSW50ZXJ2YWwoKXtjb25zdCB0PXRoaXMuX2FjdGl2ZUVsZW1lbnR8fE9lLmZpbmRPbmUoUGUsdGhpcy5fZWxlbWVudCk7aWYoIXQpcmV0dXJuO2NvbnN0IGU9TnVtYmVyLnBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1pbnRlcnZhbFwiKSwxMCk7ZT8odGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbD10aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsfHx0aGlzLl9jb25maWcuaW50ZXJ2YWwsdGhpcy5fY29uZmlnLmludGVydmFsPWUpOnRoaXMuX2NvbmZpZy5pbnRlcnZhbD10aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsfHx0aGlzLl9jb25maWcuaW50ZXJ2YWx9X3NsaWRlKHQsZSl7Y29uc3Qgbj10aGlzLl9kaXJlY3Rpb25Ub09yZGVyKHQpLGk9T2UuZmluZE9uZShQZSx0aGlzLl9lbGVtZW50KSxvPXRoaXMuX2dldEl0ZW1JbmRleChpKSxyPWV8fHRoaXMuX2dldEl0ZW1CeU9yZGVyKG4saSkscz10aGlzLl9nZXRJdGVtSW5kZXgociksYT1Cb29sZWFuKHRoaXMuX2ludGVydmFsKSxjPW49PT1UZSxsPWM/XCJjYXJvdXNlbC1pdGVtLXN0YXJ0XCI6XCJjYXJvdXNlbC1pdGVtLWVuZFwiLHU9Yz9cImNhcm91c2VsLWl0ZW0tbmV4dFwiOlwiY2Fyb3VzZWwtaXRlbS1wcmV2XCIsZD10aGlzLl9vcmRlclRvRGlyZWN0aW9uKG4pO2lmKHImJnIuY2xhc3NMaXN0LmNvbnRhaW5zKHhlKSlyZXR1cm4gdm9pZCh0aGlzLl9pc1NsaWRpbmc9ITEpO2lmKHRoaXMuX2lzU2xpZGluZylyZXR1cm47aWYodGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQocixkKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtpZighaXx8IXIpcmV0dXJuO3RoaXMuX2lzU2xpZGluZz0hMCxhJiZ0aGlzLnBhdXNlKCksdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChyKSx0aGlzLl9hY3RpdmVFbGVtZW50PXI7Y29uc3QgcD0oKT0+e3BlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxMZSx7cmVsYXRlZFRhcmdldDpyLGRpcmVjdGlvbjpkLGZyb206byx0bzpzfSl9O2lmKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwic2xpZGVcIikpe3IuY2xhc3NMaXN0LmFkZCh1KSxVdChyKSxpLmNsYXNzTGlzdC5hZGQobCksci5jbGFzc0xpc3QuYWRkKGwpO2NvbnN0IHQ9KCk9PntyLmNsYXNzTGlzdC5yZW1vdmUobCx1KSxyLmNsYXNzTGlzdC5hZGQoeGUpLGkuY2xhc3NMaXN0LnJlbW92ZSh4ZSx1LGwpLHRoaXMuX2lzU2xpZGluZz0hMSxzZXRUaW1lb3V0KHAsMCl9O3RoaXMuX3F1ZXVlQ2FsbGJhY2sodCxpLCEwKX1lbHNlIGkuY2xhc3NMaXN0LnJlbW92ZSh4ZSksci5jbGFzc0xpc3QuYWRkKHhlKSx0aGlzLl9pc1NsaWRpbmc9ITEscCgpO2EmJnRoaXMuY3ljbGUoKX1fZGlyZWN0aW9uVG9PcmRlcih0KXtyZXR1cm5bUmUsQWVdLmluY2x1ZGVzKHQpPyR0KCk/dD09PUFlP05lOlRlOnQ9PT1BZT9UZTpOZTp0fV9vcmRlclRvRGlyZWN0aW9uKHQpe3JldHVybltUZSxOZV0uaW5jbHVkZXModCk/JHQoKT90PT09TmU/QWU6UmU6dD09PU5lP1JlOkFlOnR9c3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKHQsZSl7Y29uc3Qgbj1rZS5nZXRPckNyZWF0ZUluc3RhbmNlKHQsZSk7bGV0e19jb25maWc6aX09bjtcIm9iamVjdFwiPT10eXBlb2YgZSYmKGk9ey4uLmksLi4uZX0pO2NvbnN0IG89XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTppLnNsaWRlO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKW4udG8oZSk7ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7aWYodm9pZCAwPT09bltvXSl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke299XCJgKTtuW29dKCl9ZWxzZSBpLmludGVydmFsJiZpLnJpZGUmJihuLnBhdXNlKCksbi5jeWNsZSgpKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7a2UuY2Fyb3VzZWxJbnRlcmZhY2UodGhpcyx0KX0pKX1zdGF0aWMgZGF0YUFwaUNsaWNrSGFuZGxlcih0KXtjb25zdCBlPVB0KHRoaXMpO2lmKCFlfHwhZS5jbGFzc0xpc3QuY29udGFpbnMoXCJjYXJvdXNlbFwiKSlyZXR1cm47Y29uc3Qgbj17Li4ud2UuZ2V0RGF0YUF0dHJpYnV0ZXMoZSksLi4ud2UuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcyl9LGk9dGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLXNsaWRlLXRvXCIpO2kmJihuLmludGVydmFsPSExKSxrZS5jYXJvdXNlbEludGVyZmFjZShlLG4pLGkmJmtlLmdldEluc3RhbmNlKGUpLnRvKGkpLHQucHJldmVudERlZmF1bHQoKX19cGUub24oZG9jdW1lbnQsXCJjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaVwiLFwiW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b11cIixrZS5kYXRhQXBpQ2xpY2tIYW5kbGVyKSxwZS5vbih3aW5kb3csXCJsb2FkLmJzLmNhcm91c2VsLmRhdGEtYXBpXCIsKCgpPT57Y29uc3QgdD1PZS5maW5kKCdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nKTtmb3IobGV0IGU9MCxuPXQubGVuZ3RoO2U8bjtlKyspa2UuY2Fyb3VzZWxJbnRlcmZhY2UodFtlXSxrZS5nZXRJbnN0YW5jZSh0W2VdKSl9KSkscXQoa2UpO2NvbnN0IGplPVwiY29sbGFwc2VcIixIZT17dG9nZ2xlOiEwLHBhcmVudDpudWxsfSxCZT17dG9nZ2xlOlwiYm9vbGVhblwiLHBhcmVudDpcIihudWxsfGVsZW1lbnQpXCJ9LE1lPVwic2hvd1wiLEdlPVwiY29sbGFwc2VcIixGZT1cImNvbGxhcHNpbmdcIixXZT1cImNvbGxhcHNlZFwiLFVlPVwiOnNjb3BlIC5jb2xsYXBzZSAuY29sbGFwc2VcIix6ZT0nW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nO2NsYXNzIFZlIGV4dGVuZHMgbWV7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl90cmlnZ2VyQXJyYXk9W107Y29uc3Qgbj1PZS5maW5kKHplKTtmb3IobGV0IHQ9MCxlPW4ubGVuZ3RoO3Q8ZTt0Kyspe2NvbnN0IGU9blt0XSxpPXh0KGUpLG89T2UuZmluZChpKS5maWx0ZXIoKHQ9PnQ9PT10aGlzLl9lbGVtZW50KSk7bnVsbCE9PWkmJm8ubGVuZ3RoJiYodGhpcy5fc2VsZWN0b3I9aSx0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlKSl9dGhpcy5faW5pdGlhbGl6ZUNoaWxkcmVuKCksdGhpcy5fY29uZmlnLnBhcmVudHx8dGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSx0aGlzLl9pc1Nob3duKCkpLHRoaXMuX2NvbmZpZy50b2dnbGUmJnRoaXMudG9nZ2xlKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIEhlfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVybiBqZX10b2dnbGUoKXt0aGlzLl9pc1Nob3duKCk/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9c2hvdygpe2lmKHRoaXMuX2lzVHJhbnNpdGlvbmluZ3x8dGhpcy5faXNTaG93bigpKXJldHVybjtsZXQgdCxlPVtdO2lmKHRoaXMuX2NvbmZpZy5wYXJlbnQpe2NvbnN0IHQ9T2UuZmluZChVZSx0aGlzLl9jb25maWcucGFyZW50KTtlPU9lLmZpbmQoXCIuY29sbGFwc2Uuc2hvdywgLmNvbGxhcHNlLmNvbGxhcHNpbmdcIix0aGlzLl9jb25maWcucGFyZW50KS5maWx0ZXIoKGU9PiF0LmluY2x1ZGVzKGUpKSl9Y29uc3Qgbj1PZS5maW5kT25lKHRoaXMuX3NlbGVjdG9yKTtpZihlLmxlbmd0aCl7Y29uc3QgaT1lLmZpbmQoKHQ9Pm4hPT10KSk7aWYodD1pP1ZlLmdldEluc3RhbmNlKGkpOm51bGwsdCYmdC5faXNUcmFuc2l0aW9uaW5nKXJldHVybn1pZihwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLmNvbGxhcHNlXCIpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2UuZm9yRWFjaCgoZT0+e24hPT1lJiZWZS5nZXRPckNyZWF0ZUluc3RhbmNlKGUse3RvZ2dsZTohMX0pLmhpZGUoKSx0fHxmZS5zZXQoZSxcImJzLmNvbGxhcHNlXCIsbnVsbCl9KSk7Y29uc3QgaT10aGlzLl9nZXREaW1lbnNpb24oKTt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoR2UpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChGZSksdGhpcy5fZWxlbWVudC5zdHlsZVtpXT0wLHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksITApLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMDtjb25zdCBvPWBzY3JvbGwke2lbMF0udG9VcHBlckNhc2UoKStpLnNsaWNlKDEpfWA7dGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKEZlKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoR2UsTWUpLHRoaXMuX2VsZW1lbnQuc3R5bGVbaV09XCJcIixwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy5jb2xsYXBzZVwiKX0pLHRoaXMuX2VsZW1lbnQsITApLHRoaXMuX2VsZW1lbnQuc3R5bGVbaV09YCR7dGhpcy5fZWxlbWVudFtvXX1weGB9aGlkZSgpe2lmKHRoaXMuX2lzVHJhbnNpdGlvbmluZ3x8IXRoaXMuX2lzU2hvd24oKSlyZXR1cm47aWYocGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwiaGlkZS5icy5jb2xsYXBzZVwiKS5kZWZhdWx0UHJldmVudGVkKXJldHVybjtjb25zdCB0PXRoaXMuX2dldERpbWVuc2lvbigpO3RoaXMuX2VsZW1lbnQuc3R5bGVbdF09YCR7dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0XX1weGAsVXQodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKEZlKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoR2UsTWUpO2NvbnN0IGU9dGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtmb3IobGV0IHQ9MDt0PGU7dCsrKXtjb25zdCBlPXRoaXMuX3RyaWdnZXJBcnJheVt0XSxuPVB0KGUpO24mJiF0aGlzLl9pc1Nob3duKG4pJiZ0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoW2VdLCExKX10aGlzLl9pc1RyYW5zaXRpb25pbmc9ITAsdGhpcy5fZWxlbWVudC5zdHlsZVt0XT1cIlwiLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShGZSksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKEdlKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMuY29sbGFwc2VcIil9KSx0aGlzLl9lbGVtZW50LCEwKX1faXNTaG93bih0PXRoaXMuX2VsZW1lbnQpe3JldHVybiB0LmNsYXNzTGlzdC5jb250YWlucyhNZSl9X2dldENvbmZpZyh0KXtyZXR1cm4odD17Li4uSGUsLi4ud2UuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4udH0pLnRvZ2dsZT1Cb29sZWFuKHQudG9nZ2xlKSx0LnBhcmVudD1IdCh0LnBhcmVudCksQnQoamUsdCxCZSksdH1fZ2V0RGltZW5zaW9uKCl7cmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY29sbGFwc2UtaG9yaXpvbnRhbFwiKT9cIndpZHRoXCI6XCJoZWlnaHRcIn1faW5pdGlhbGl6ZUNoaWxkcmVuKCl7aWYoIXRoaXMuX2NvbmZpZy5wYXJlbnQpcmV0dXJuO2NvbnN0IHQ9T2UuZmluZChVZSx0aGlzLl9jb25maWcucGFyZW50KTtPZS5maW5kKHplLHRoaXMuX2NvbmZpZy5wYXJlbnQpLmZpbHRlcigoZT0+IXQuaW5jbHVkZXMoZSkpKS5mb3JFYWNoKCh0PT57Y29uc3QgZT1QdCh0KTtlJiZ0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoW3RdLHRoaXMuX2lzU2hvd24oZSkpfSkpfV9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModCxlKXt0Lmxlbmd0aCYmdC5mb3JFYWNoKCh0PT57ZT90LmNsYXNzTGlzdC5yZW1vdmUoV2UpOnQuY2xhc3NMaXN0LmFkZChXZSksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsZSl9KSl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9e307XCJzdHJpbmdcIj09dHlwZW9mIHQmJi9zaG93fGhpZGUvLnRlc3QodCkmJihlLnRvZ2dsZT0hMSk7Y29uc3Qgbj1WZS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PW5bdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7blt0XSgpfX0pKX19cGUub24oZG9jdW1lbnQsXCJjbGljay5icy5jb2xsYXBzZS5kYXRhLWFwaVwiLHplLChmdW5jdGlvbih0KXsoXCJBXCI9PT10LnRhcmdldC50YWdOYW1lfHx0LmRlbGVnYXRlVGFyZ2V0JiZcIkFcIj09PXQuZGVsZWdhdGVUYXJnZXQudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKTtjb25zdCBlPXh0KHRoaXMpO09lLmZpbmQoZSkuZm9yRWFjaCgodD0+e1ZlLmdldE9yQ3JlYXRlSW5zdGFuY2UodCx7dG9nZ2xlOiExfSkudG9nZ2xlKCl9KSl9KSkscXQoVmUpO2NvbnN0ICRlPVwiZHJvcGRvd25cIixxZT1cIkVzY2FwZVwiLEtlPVwiU3BhY2VcIixYZT1cIkFycm93VXBcIixZZT1cIkFycm93RG93blwiLFFlPW5ldyBSZWdFeHAoXCJBcnJvd1VwfEFycm93RG93bnxFc2NhcGVcIiksSmU9XCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLFplPVwia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaVwiLHRuPVwic2hvd1wiLGVuPSdbZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiXScsbm49XCIuZHJvcGRvd24tbWVudVwiLG9uPSR0KCk/XCJ0b3AtZW5kXCI6XCJ0b3Atc3RhcnRcIixybj0kdCgpP1widG9wLXN0YXJ0XCI6XCJ0b3AtZW5kXCIsc249JHQoKT9cImJvdHRvbS1lbmRcIjpcImJvdHRvbS1zdGFydFwiLGFuPSR0KCk/XCJib3R0b20tc3RhcnRcIjpcImJvdHRvbS1lbmRcIixjbj0kdCgpP1wibGVmdC1zdGFydFwiOlwicmlnaHQtc3RhcnRcIixsbj0kdCgpP1wicmlnaHQtc3RhcnRcIjpcImxlZnQtc3RhcnRcIix1bj17b2Zmc2V0OlswLDJdLGJvdW5kYXJ5OlwiY2xpcHBpbmdQYXJlbnRzXCIscmVmZXJlbmNlOlwidG9nZ2xlXCIsZGlzcGxheTpcImR5bmFtaWNcIixwb3BwZXJDb25maWc6bnVsbCxhdXRvQ2xvc2U6ITB9LGRuPXtvZmZzZXQ6XCIoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKVwiLGJvdW5kYXJ5OlwiKHN0cmluZ3xlbGVtZW50KVwiLHJlZmVyZW5jZTpcIihzdHJpbmd8ZWxlbWVudHxvYmplY3QpXCIsZGlzcGxheTpcInN0cmluZ1wiLHBvcHBlckNvbmZpZzpcIihudWxsfG9iamVjdHxmdW5jdGlvbilcIixhdXRvQ2xvc2U6XCIoYm9vbGVhbnxzdHJpbmcpXCJ9O2NsYXNzIHBuIGV4dGVuZHMgbWV7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX21lbnU9dGhpcy5fZ2V0TWVudUVsZW1lbnQoKSx0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gdW59c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBkbn1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm4gJGV9dG9nZ2xlKCl7cmV0dXJuIHRoaXMuX2lzU2hvd24oKT90aGlzLmhpZGUoKTp0aGlzLnNob3coKX1zaG93KCl7aWYoR3QodGhpcy5fZWxlbWVudCl8fHRoaXMuX2lzU2hvd24odGhpcy5fbWVudSkpcmV0dXJuO2NvbnN0IHQ9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH07aWYocGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5kcm9wZG93blwiLHQpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2NvbnN0IGU9cG4uZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7dGhpcy5faW5OYXZiYXI/d2Uuc2V0RGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LFwicG9wcGVyXCIsXCJub25lXCIpOnRoaXMuX2NyZWF0ZVBvcHBlcihlKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiYhZS5jbG9zZXN0KFwiLm5hdmJhci1uYXZcIikmJltdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKCh0PT5wZS5vbih0LFwibW91c2VvdmVyXCIsV3QpKSksdGhpcy5fZWxlbWVudC5mb2N1cygpLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCEwKSx0aGlzLl9tZW51LmNsYXNzTGlzdC5hZGQodG4pLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCh0bikscGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvd24uYnMuZHJvcGRvd25cIix0KX1oaWRlKCl7aWYoR3QodGhpcy5fZWxlbWVudCl8fCF0aGlzLl9pc1Nob3duKHRoaXMuX21lbnUpKXJldHVybjtjb25zdCB0PXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9O3RoaXMuX2NvbXBsZXRlSGlkZSh0KX1kaXNwb3NlKCl7dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHN1cGVyLmRpc3Bvc2UoKX11cGRhdGUoKXt0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSx0aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci51cGRhdGUoKX1fY29tcGxldGVIaWRlKHQpe3BlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMuZHJvcGRvd25cIix0KS5kZWZhdWx0UHJldmVudGVkfHwoXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKHQ9PnBlLm9mZih0LFwibW91c2VvdmVyXCIsV3QpKSksdGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX21lbnUuY2xhc3NMaXN0LnJlbW92ZSh0biksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRuKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLHdlLnJlbW92ZURhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSxcInBvcHBlclwiKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMuZHJvcGRvd25cIix0KSl9X2dldENvbmZpZyh0KXtpZih0PXsuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsLi4ud2UuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4udH0sQnQoJGUsdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSxcIm9iamVjdFwiPT10eXBlb2YgdC5yZWZlcmVuY2UmJiFqdCh0LnJlZmVyZW5jZSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCl0aHJvdyBuZXcgVHlwZUVycm9yKGAkeyRlLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApO3JldHVybiB0fV9jcmVhdGVQb3BwZXIoZSl7aWYodm9pZCAwPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO2xldCBuPXRoaXMuX2VsZW1lbnQ7XCJwYXJlbnRcIj09PXRoaXMuX2NvbmZpZy5yZWZlcmVuY2U/bj1lOmp0KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpP249SHQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSk6XCJvYmplY3RcIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UmJihuPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpO2NvbnN0IGk9dGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCksbz1pLm1vZGlmaWVycy5maW5kKCh0PT5cImFwcGx5U3R5bGVzXCI9PT10Lm5hbWUmJiExPT09dC5lbmFibGVkKSk7dGhpcy5fcG9wcGVyPUF0KG4sdGhpcy5fbWVudSxpKSxvJiZ3ZS5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsXCJwb3BwZXJcIixcInN0YXRpY1wiKX1faXNTaG93bih0PXRoaXMuX2VsZW1lbnQpe3JldHVybiB0LmNsYXNzTGlzdC5jb250YWlucyh0bil9X2dldE1lbnVFbGVtZW50KCl7cmV0dXJuIE9lLm5leHQodGhpcy5fZWxlbWVudCxubilbMF19X2dldFBsYWNlbWVudCgpe2NvbnN0IHQ9dGhpcy5fZWxlbWVudC5wYXJlbnROb2RlO2lmKHQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGVuZFwiKSlyZXR1cm4gY247aWYodC5jbGFzc0xpc3QuY29udGFpbnMoXCJkcm9wc3RhcnRcIikpcmV0dXJuIGxuO2NvbnN0IGU9XCJlbmRcIj09PWdldENvbXB1dGVkU3R5bGUodGhpcy5fbWVudSkuZ2V0UHJvcGVydHlWYWx1ZShcIi0tYnMtcG9zaXRpb25cIikudHJpbSgpO3JldHVybiB0LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3B1cFwiKT9lP3JuOm9uOmU/YW46c259X2RldGVjdE5hdmJhcigpe3JldHVybiBudWxsIT09dGhpcy5fZWxlbWVudC5jbG9zZXN0KFwiLm5hdmJhclwiKX1fZ2V0T2Zmc2V0KCl7Y29uc3R7b2Zmc2V0OnR9PXRoaXMuX2NvbmZpZztyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90LnNwbGl0KFwiLFwiKS5tYXAoKHQ9Pk51bWJlci5wYXJzZUludCh0LDEwKSkpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/ZT0+dChlLHRoaXMuX2VsZW1lbnQpOnR9X2dldFBvcHBlckNvbmZpZygpe2NvbnN0IHQ9e3BsYWNlbWVudDp0aGlzLl9nZXRQbGFjZW1lbnQoKSxtb2RpZmllcnM6W3tuYW1lOlwicHJldmVudE92ZXJmbG93XCIsb3B0aW9uczp7Ym91bmRhcnk6dGhpcy5fY29uZmlnLmJvdW5kYXJ5fX0se25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6dGhpcy5fZ2V0T2Zmc2V0KCl9fV19O3JldHVyblwic3RhdGljXCI9PT10aGlzLl9jb25maWcuZGlzcGxheSYmKHQubW9kaWZpZXJzPVt7bmFtZTpcImFwcGx5U3R5bGVzXCIsZW5hYmxlZDohMX1dKSx7Li4udCwuLi5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnP3RoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcodCk6dGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZ319X3NlbGVjdE1lbnVJdGVtKHtrZXk6dCx0YXJnZXQ6ZX0pe2NvbnN0IG49T2UuZmluZChcIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCIsdGhpcy5fbWVudSkuZmlsdGVyKE10KTtuLmxlbmd0aCYmWXQobixlLHQ9PT1ZZSwhbi5pbmNsdWRlcyhlKSkuZm9jdXMoKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1wbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX1zdGF0aWMgY2xlYXJNZW51cyh0KXtpZih0JiYoMj09PXQuYnV0dG9ufHxcImtleXVwXCI9PT10LnR5cGUmJlwiVGFiXCIhPT10LmtleSkpcmV0dXJuO2NvbnN0IGU9T2UuZmluZChlbik7Zm9yKGxldCBuPTAsaT1lLmxlbmd0aDtuPGk7bisrKXtjb25zdCBpPXBuLmdldEluc3RhbmNlKGVbbl0pO2lmKCFpfHwhMT09PWkuX2NvbmZpZy5hdXRvQ2xvc2UpY29udGludWU7aWYoIWkuX2lzU2hvd24oKSljb250aW51ZTtjb25zdCBvPXtyZWxhdGVkVGFyZ2V0OmkuX2VsZW1lbnR9O2lmKHQpe2NvbnN0IGU9dC5jb21wb3NlZFBhdGgoKSxuPWUuaW5jbHVkZXMoaS5fbWVudSk7aWYoZS5pbmNsdWRlcyhpLl9lbGVtZW50KXx8XCJpbnNpZGVcIj09PWkuX2NvbmZpZy5hdXRvQ2xvc2UmJiFufHxcIm91dHNpZGVcIj09PWkuX2NvbmZpZy5hdXRvQ2xvc2UmJm4pY29udGludWU7aWYoaS5fbWVudS5jb250YWlucyh0LnRhcmdldCkmJihcImtleXVwXCI9PT10LnR5cGUmJlwiVGFiXCI9PT10LmtleXx8L2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSkpKWNvbnRpbnVlO1wiY2xpY2tcIj09PXQudHlwZSYmKG8uY2xpY2tFdmVudD10KX1pLl9jb21wbGV0ZUhpZGUobyl9fXN0YXRpYyBnZXRQYXJlbnRGcm9tRWxlbWVudCh0KXtyZXR1cm4gUHQodCl8fHQucGFyZW50Tm9kZX1zdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKHQpe2lmKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSk/dC5rZXk9PT1LZXx8dC5rZXkhPT1xZSYmKHQua2V5IT09WWUmJnQua2V5IT09WGV8fHQudGFyZ2V0LmNsb3Nlc3Qobm4pKTohUWUudGVzdCh0LmtleSkpcmV0dXJuO2NvbnN0IGU9dGhpcy5jbGFzc0xpc3QuY29udGFpbnModG4pO2lmKCFlJiZ0LmtleT09PXFlKXJldHVybjtpZih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxHdCh0aGlzKSlyZXR1cm47Y29uc3Qgbj10aGlzLm1hdGNoZXMoZW4pP3RoaXM6T2UucHJldih0aGlzLGVuKVswXSxpPXBuLmdldE9yQ3JlYXRlSW5zdGFuY2Uobik7aWYodC5rZXkhPT1xZSlyZXR1cm4gdC5rZXk9PT1YZXx8dC5rZXk9PT1ZZT8oZXx8aS5zaG93KCksdm9pZCBpLl9zZWxlY3RNZW51SXRlbSh0KSk6dm9pZChlJiZ0LmtleSE9PUtlfHxwbi5jbGVhck1lbnVzKCkpO2kuaGlkZSgpfX1wZS5vbihkb2N1bWVudCxaZSxlbixwbi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLHBlLm9uKGRvY3VtZW50LFplLG5uLHBuLmRhdGFBcGlLZXlkb3duSGFuZGxlcikscGUub24oZG9jdW1lbnQsSmUscG4uY2xlYXJNZW51cykscGUub24oZG9jdW1lbnQsXCJrZXl1cC5icy5kcm9wZG93bi5kYXRhLWFwaVwiLHBuLmNsZWFyTWVudXMpLHBlLm9uKGRvY3VtZW50LEplLGVuLChmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCkscG4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKS50b2dnbGUoKX0pKSxxdChwbik7Y29uc3QgaG49XCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIsZm49XCIuc3RpY2t5LXRvcFwiO2NsYXNzIG1ue2NvbnN0cnVjdG9yKCl7dGhpcy5fZWxlbWVudD1kb2N1bWVudC5ib2R5fWdldFdpZHRoKCl7Y29uc3QgdD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7cmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoLXQpfWhpZGUoKXtjb25zdCB0PXRoaXMuZ2V0V2lkdGgoKTt0aGlzLl9kaXNhYmxlT3ZlckZsb3coKSx0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LFwicGFkZGluZ1JpZ2h0XCIsKGU9PmUrdCkpLHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKGhuLFwicGFkZGluZ1JpZ2h0XCIsKGU9PmUrdCkpLHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKGZuLFwibWFyZ2luUmlnaHRcIiwoZT0+ZS10KSl9X2Rpc2FibGVPdmVyRmxvdygpe3RoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHRoaXMuX2VsZW1lbnQsXCJvdmVyZmxvd1wiKSx0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCJ9X3NldEVsZW1lbnRBdHRyaWJ1dGVzKHQsZSxuKXtjb25zdCBpPXRoaXMuZ2V0V2lkdGgoKTt0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHQsKHQ9PntpZih0IT09dGhpcy5fZWxlbWVudCYmd2luZG93LmlubmVyV2lkdGg+dC5jbGllbnRXaWR0aCtpKXJldHVybjt0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0LGUpO2NvbnN0IG89d2luZG93LmdldENvbXB1dGVkU3R5bGUodClbZV07dC5zdHlsZVtlXT1gJHtuKE51bWJlci5wYXJzZUZsb2F0KG8pKX1weGB9KSl9cmVzZXQoKXt0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsXCJvdmVyZmxvd1wiKSx0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsXCJwYWRkaW5nUmlnaHRcIiksdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhobixcInBhZGRpbmdSaWdodFwiKSx0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKGZuLFwibWFyZ2luUmlnaHRcIil9X3NhdmVJbml0aWFsQXR0cmlidXRlKHQsZSl7Y29uc3Qgbj10LnN0eWxlW2VdO24mJndlLnNldERhdGFBdHRyaWJ1dGUodCxlLG4pfV9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHQsZSl7dGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LCh0PT57Y29uc3Qgbj13ZS5nZXREYXRhQXR0cmlidXRlKHQsZSk7dm9pZCAwPT09bj90LnN0eWxlLnJlbW92ZVByb3BlcnR5KGUpOih3ZS5yZW1vdmVEYXRhQXR0cmlidXRlKHQsZSksdC5zdHlsZVtlXT1uKX0pKX1fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LGUpe2p0KHQpP2UodCk6T2UuZmluZCh0LHRoaXMuX2VsZW1lbnQpLmZvckVhY2goZSl9aXNPdmVyZmxvd2luZygpe3JldHVybiB0aGlzLmdldFdpZHRoKCk+MH19Y29uc3QgZ249e2NsYXNzTmFtZTpcIm1vZGFsLWJhY2tkcm9wXCIsaXNWaXNpYmxlOiEwLGlzQW5pbWF0ZWQ6ITEscm9vdEVsZW1lbnQ6XCJib2R5XCIsY2xpY2tDYWxsYmFjazpudWxsfSxfbj17Y2xhc3NOYW1lOlwic3RyaW5nXCIsaXNWaXNpYmxlOlwiYm9vbGVhblwiLGlzQW5pbWF0ZWQ6XCJib29sZWFuXCIscm9vdEVsZW1lbnQ6XCIoZWxlbWVudHxzdHJpbmcpXCIsY2xpY2tDYWxsYmFjazpcIihmdW5jdGlvbnxudWxsKVwifSx2bj1cInNob3dcIix5bj1cIm1vdXNlZG93bi5icy5iYWNrZHJvcFwiO2NsYXNzIGJue2NvbnN0cnVjdG9yKHQpe3RoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcodCksdGhpcy5faXNBcHBlbmRlZD0hMSx0aGlzLl9lbGVtZW50PW51bGx9c2hvdyh0KXt0aGlzLl9jb25maWcuaXNWaXNpYmxlPyh0aGlzLl9hcHBlbmQoKSx0aGlzLl9jb25maWcuaXNBbmltYXRlZCYmVXQodGhpcy5fZ2V0RWxlbWVudCgpKSx0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCh2biksdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKCk9PntLdCh0KX0pKSk6S3QodCl9aGlkZSh0KXt0aGlzLl9jb25maWcuaXNWaXNpYmxlPyh0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZSh2biksdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKCk9Pnt0aGlzLmRpc3Bvc2UoKSxLdCh0KX0pKSk6S3QodCl9X2dldEVsZW1lbnQoKXtpZighdGhpcy5fZWxlbWVudCl7Y29uc3QgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPXRoaXMuX2NvbmZpZy5jbGFzc05hbWUsdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQmJnQuY2xhc3NMaXN0LmFkZChcImZhZGVcIiksdGhpcy5fZWxlbWVudD10fXJldHVybiB0aGlzLl9lbGVtZW50fV9nZXRDb25maWcodCl7cmV0dXJuKHQ9ey4uLmduLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6e319KS5yb290RWxlbWVudD1IdCh0LnJvb3RFbGVtZW50KSxCdChcImJhY2tkcm9wXCIsdCxfbiksdH1fYXBwZW5kKCl7dGhpcy5faXNBcHBlbmRlZHx8KHRoaXMuX2NvbmZpZy5yb290RWxlbWVudC5hcHBlbmQodGhpcy5fZ2V0RWxlbWVudCgpKSxwZS5vbih0aGlzLl9nZXRFbGVtZW50KCkseW4sKCgpPT57S3QodGhpcy5fY29uZmlnLmNsaWNrQ2FsbGJhY2spfSkpLHRoaXMuX2lzQXBwZW5kZWQ9ITApfWRpc3Bvc2UoKXt0aGlzLl9pc0FwcGVuZGVkJiYocGUub2ZmKHRoaXMuX2VsZW1lbnQseW4pLHRoaXMuX2VsZW1lbnQucmVtb3ZlKCksdGhpcy5faXNBcHBlbmRlZD0hMSl9X2VtdWxhdGVBbmltYXRpb24odCl7WHQodCx0aGlzLl9nZXRFbGVtZW50KCksdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpfX1jb25zdCBFbj17dHJhcEVsZW1lbnQ6bnVsbCxhdXRvZm9jdXM6ITB9LHduPXt0cmFwRWxlbWVudDpcImVsZW1lbnRcIixhdXRvZm9jdXM6XCJib29sZWFuXCJ9LE9uPVwiLmJzLmZvY3VzdHJhcFwiLERuPVwiYmFja3dhcmRcIjtjbGFzcyBDbntjb25zdHJ1Y3Rvcih0KXt0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKHQpLHRoaXMuX2lzQWN0aXZlPSExLHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb249bnVsbH1hY3RpdmF0ZSgpe2NvbnN0e3RyYXBFbGVtZW50OnQsYXV0b2ZvY3VzOmV9PXRoaXMuX2NvbmZpZzt0aGlzLl9pc0FjdGl2ZXx8KGUmJnQuZm9jdXMoKSxwZS5vZmYoZG9jdW1lbnQsT24pLHBlLm9uKGRvY3VtZW50LFwiZm9jdXNpbi5icy5mb2N1c3RyYXBcIiwodD0+dGhpcy5faGFuZGxlRm9jdXNpbih0KSkpLHBlLm9uKGRvY3VtZW50LFwia2V5ZG93bi50YWIuYnMuZm9jdXN0cmFwXCIsKHQ9PnRoaXMuX2hhbmRsZUtleWRvd24odCkpKSx0aGlzLl9pc0FjdGl2ZT0hMCl9ZGVhY3RpdmF0ZSgpe3RoaXMuX2lzQWN0aXZlJiYodGhpcy5faXNBY3RpdmU9ITEscGUub2ZmKGRvY3VtZW50LE9uKSl9X2hhbmRsZUZvY3VzaW4odCl7Y29uc3R7dGFyZ2V0OmV9PXQse3RyYXBFbGVtZW50Om59PXRoaXMuX2NvbmZpZztpZihlPT09ZG9jdW1lbnR8fGU9PT1ufHxuLmNvbnRhaW5zKGUpKXJldHVybjtjb25zdCBpPU9lLmZvY3VzYWJsZUNoaWxkcmVuKG4pOzA9PT1pLmxlbmd0aD9uLmZvY3VzKCk6dGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbj09PURuP2lbaS5sZW5ndGgtMV0uZm9jdXMoKTppWzBdLmZvY3VzKCl9X2hhbmRsZUtleWRvd24odCl7XCJUYWJcIj09PXQua2V5JiYodGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbj10LnNoaWZ0S2V5P0RuOlwiZm9yd2FyZFwiKX1fZ2V0Q29uZmlnKHQpe3JldHVybiB0PXsuLi5FbiwuLi5cIm9iamVjdFwiPT10eXBlb2YgdD90Ont9fSxCdChcImZvY3VzdHJhcFwiLHQsd24pLHR9fWNvbnN0IFNuPVwibW9kYWxcIixUbj1cIkVzY2FwZVwiLE5uPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxmb2N1czohMH0sQW49e2JhY2tkcm9wOlwiKGJvb2xlYW58c3RyaW5nKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLGZvY3VzOlwiYm9vbGVhblwifSxSbj1cImhpZGRlbi5icy5tb2RhbFwiLEluPVwic2hvdy5icy5tb2RhbFwiLExuPVwicmVzaXplLmJzLm1vZGFsXCIseG49XCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIsUG49XCJrZXlkb3duLmRpc21pc3MuYnMubW9kYWxcIixrbj1cIm1vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIsam49XCJtb2RhbC1vcGVuXCIsSG49XCJzaG93XCIsQm49XCJtb2RhbC1zdGF0aWNcIjtjbGFzcyBNbiBleHRlbmRzIG1le2NvbnN0cnVjdG9yKHQsZSl7c3VwZXIodCksdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9kaWFsb2c9T2UuZmluZE9uZShcIi5tb2RhbC1kaWFsb2dcIix0aGlzLl9lbGVtZW50KSx0aGlzLl9iYWNrZHJvcD10aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKSx0aGlzLl9mb2N1c3RyYXA9dGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpLHRoaXMuX2lzU2hvd249ITEsdGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz0hMSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fc2Nyb2xsQmFyPW5ldyBtbn1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gTm59c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuIFNufXRvZ2dsZSh0KXtyZXR1cm4gdGhpcy5faXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3codCl9c2hvdyh0KXt0aGlzLl9pc1Nob3dufHx0aGlzLl9pc1RyYW5zaXRpb25pbmd8fHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxJbix7cmVsYXRlZFRhcmdldDp0fSkuZGVmYXVsdFByZXZlbnRlZHx8KHRoaXMuX2lzU2hvd249ITAsdGhpcy5faXNBbmltYXRlZCgpJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKSx0aGlzLl9zY3JvbGxCYXIuaGlkZSgpLGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChqbiksdGhpcy5fYWRqdXN0RGlhbG9nKCksdGhpcy5fc2V0RXNjYXBlRXZlbnQoKSx0aGlzLl9zZXRSZXNpemVFdmVudCgpLHBlLm9uKHRoaXMuX2RpYWxvZyxrbiwoKCk9PntwZS5vbmUodGhpcy5fZWxlbWVudCxcIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbFwiLCh0PT57dC50YXJnZXQ9PT10aGlzLl9lbGVtZW50JiYodGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KSl9KSksdGhpcy5fc2hvd0JhY2tkcm9wKCgoKT0+dGhpcy5fc2hvd0VsZW1lbnQodCkpKSl9aGlkZSgpe2lmKCF0aGlzLl9pc1Nob3dufHx0aGlzLl9pc1RyYW5zaXRpb25pbmcpcmV0dXJuO2lmKHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMubW9kYWxcIikuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47dGhpcy5faXNTaG93bj0hMTtjb25zdCB0PXRoaXMuX2lzQW5pbWF0ZWQoKTt0JiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKSx0aGlzLl9zZXRFc2NhcGVFdmVudCgpLHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoSG4pLHBlLm9mZih0aGlzLl9lbGVtZW50LHhuKSxwZS5vZmYodGhpcy5fZGlhbG9nLGtuKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+dGhpcy5faGlkZU1vZGFsKCkpLHRoaXMuX2VsZW1lbnQsdCl9ZGlzcG9zZSgpe1t3aW5kb3csdGhpcy5fZGlhbG9nXS5mb3JFYWNoKCh0PT5wZS5vZmYodCxcIi5icy5tb2RhbFwiKSkpLHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKSx0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpLHN1cGVyLmRpc3Bvc2UoKX1oYW5kbGVVcGRhdGUoKXt0aGlzLl9hZGp1c3REaWFsb2coKX1faW5pdGlhbGl6ZUJhY2tEcm9wKCl7cmV0dXJuIG5ldyBibih7aXNWaXNpYmxlOkJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKSxpc0FuaW1hdGVkOnRoaXMuX2lzQW5pbWF0ZWQoKX0pfV9pbml0aWFsaXplRm9jdXNUcmFwKCl7cmV0dXJuIG5ldyBDbih7dHJhcEVsZW1lbnQ6dGhpcy5fZWxlbWVudH0pfV9nZXRDb25maWcodCl7cmV0dXJuIHQ9ey4uLk5uLC4uLndlLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6e319LEJ0KFNuLHQsQW4pLHR9X3Nob3dFbGVtZW50KHQpe2NvbnN0IGU9dGhpcy5faXNBbmltYXRlZCgpLG49T2UuZmluZE9uZShcIi5tb2RhbC1ib2R5XCIsdGhpcy5fZGlhbG9nKTt0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFfHxkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsITApLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwiZGlhbG9nXCIpLHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wPTAsbiYmKG4uc2Nyb2xsVG9wPTApLGUmJlV0KHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChIbiksdGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9jb25maWcuZm9jdXMmJnRoaXMuX2ZvY3VzdHJhcC5hY3RpdmF0ZSgpLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OnR9KX0pLHRoaXMuX2RpYWxvZyxlKX1fc2V0RXNjYXBlRXZlbnQoKXt0aGlzLl9pc1Nob3duP3BlLm9uKHRoaXMuX2VsZW1lbnQsUG4sKHQ9Pnt0aGlzLl9jb25maWcua2V5Ym9hcmQmJnQua2V5PT09VG4/KHQucHJldmVudERlZmF1bHQoKSx0aGlzLmhpZGUoKSk6dGhpcy5fY29uZmlnLmtleWJvYXJkfHx0LmtleSE9PVRufHx0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCl9KSk6cGUub2ZmKHRoaXMuX2VsZW1lbnQsUG4pfV9zZXRSZXNpemVFdmVudCgpe3RoaXMuX2lzU2hvd24/cGUub24od2luZG93LExuLCgoKT0+dGhpcy5fYWRqdXN0RGlhbG9nKCkpKTpwZS5vZmYod2luZG93LExuKX1faGlkZU1vZGFsKCl7dGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwhMCksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIpLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwicm9sZVwiKSx0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fYmFja2Ryb3AuaGlkZSgoKCk9Pntkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoam4pLHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKSx0aGlzLl9zY3JvbGxCYXIucmVzZXQoKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsUm4pfSkpfV9zaG93QmFja2Ryb3AodCl7cGUub24odGhpcy5fZWxlbWVudCx4biwodD0+e3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s/dGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz0hMTp0LnRhcmdldD09PXQuY3VycmVudFRhcmdldCYmKCEwPT09dGhpcy5fY29uZmlnLmJhY2tkcm9wP3RoaXMuaGlkZSgpOlwic3RhdGljXCI9PT10aGlzLl9jb25maWcuYmFja2Ryb3AmJnRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSl9KSksdGhpcy5fYmFja2Ryb3Auc2hvdyh0KX1faXNBbmltYXRlZCgpe3JldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImZhZGVcIil9X3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKXtpZihwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRlUHJldmVudGVkLmJzLm1vZGFsXCIpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO2NvbnN0e2NsYXNzTGlzdDp0LHNjcm9sbEhlaWdodDplLHN0eWxlOm59PXRoaXMuX2VsZW1lbnQsaT1lPmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7IWkmJlwiaGlkZGVuXCI9PT1uLm92ZXJmbG93WXx8dC5jb250YWlucyhCbil8fChpfHwobi5vdmVyZmxvd1k9XCJoaWRkZW5cIiksdC5hZGQoQm4pLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dC5yZW1vdmUoQm4pLGl8fHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57bi5vdmVyZmxvd1k9XCJcIn0pLHRoaXMuX2RpYWxvZyl9KSx0aGlzLl9kaWFsb2cpLHRoaXMuX2VsZW1lbnQuZm9jdXMoKSl9X2FkanVzdERpYWxvZygpe2NvbnN0IHQ9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCxlPXRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpLG49ZT4wOyghbiYmdCYmISR0KCl8fG4mJiF0JiYkdCgpKSYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9YCR7ZX1weGApLChuJiYhdCYmISR0KCl8fCFuJiZ0JiYkdCgpKSYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0PWAke2V9cHhgKX1fcmVzZXRBZGp1c3RtZW50cygpe3RoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9XCJcIix0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwifXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCxlKXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IG49TW4uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1uW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO25bdF0oZSl9fSkpfX1wZS5vbihkb2N1bWVudCxcImNsaWNrLmJzLm1vZGFsLmRhdGEtYXBpXCIsJ1tkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCJdJywoZnVuY3Rpb24odCl7Y29uc3QgZT1QdCh0aGlzKTtbXCJBXCIsXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKSxwZS5vbmUoZSxJbiwodD0+e3QuZGVmYXVsdFByZXZlbnRlZHx8cGUub25lKGUsUm4sKCgpPT57TXQodGhpcykmJnRoaXMuZm9jdXMoKX0pKX0pKTtjb25zdCBuPU9lLmZpbmRPbmUoXCIubW9kYWwuc2hvd1wiKTtuJiZNbi5nZXRJbnN0YW5jZShuKS5oaWRlKCksTW4uZ2V0T3JDcmVhdGVJbnN0YW5jZShlKS50b2dnbGUodGhpcyl9KSksZ2UoTW4pLHF0KE1uKTtjb25zdCBHbj1cIm9mZmNhbnZhc1wiLEZuPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxzY3JvbGw6ITF9LFduPXtiYWNrZHJvcDpcImJvb2xlYW5cIixrZXlib2FyZDpcImJvb2xlYW5cIixzY3JvbGw6XCJib29sZWFuXCJ9LFVuPVwic2hvd1wiLHpuPVwiLm9mZmNhbnZhcy5zaG93XCIsVm49XCJoaWRkZW4uYnMub2ZmY2FudmFzXCI7Y2xhc3MgJG4gZXh0ZW5kcyBtZXtjb25zdHJ1Y3Rvcih0LGUpe3N1cGVyKHQpLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5faXNTaG93bj0hMSx0aGlzLl9iYWNrZHJvcD10aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKSx0aGlzLl9mb2N1c3RyYXA9dGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCl9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuIEdufXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBGbn10b2dnbGUodCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfXNob3codCl7dGhpcy5faXNTaG93bnx8cGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy5vZmZjYW52YXNcIix7cmVsYXRlZFRhcmdldDp0fSkuZGVmYXVsdFByZXZlbnRlZHx8KHRoaXMuX2lzU2hvd249ITAsdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5PVwidmlzaWJsZVwiLHRoaXMuX2JhY2tkcm9wLnNob3coKSx0aGlzLl9jb25maWcuc2Nyb2xsfHwobmV3IG1uKS5oaWRlKCksdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIiwhMCksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsXCJkaWFsb2dcIiksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKFVuKSx0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e3RoaXMuX2NvbmZpZy5zY3JvbGx8fHRoaXMuX2ZvY3VzdHJhcC5hY3RpdmF0ZSgpLHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcInNob3duLmJzLm9mZmNhbnZhc1wiLHtyZWxhdGVkVGFyZ2V0OnR9KX0pLHRoaXMuX2VsZW1lbnQsITApKX1oaWRlKCl7dGhpcy5faXNTaG93biYmKHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMub2ZmY2FudmFzXCIpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpLHRoaXMuX2VsZW1lbnQuYmx1cigpLHRoaXMuX2lzU2hvd249ITEsdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFVuKSx0aGlzLl9iYWNrZHJvcC5oaWRlKCksdGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsITApLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInJvbGVcIiksdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsdGhpcy5fY29uZmlnLnNjcm9sbHx8KG5ldyBtbikucmVzZXQoKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsVm4pfSksdGhpcy5fZWxlbWVudCwhMCkpKX1kaXNwb3NlKCl7dGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpLHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCksc3VwZXIuZGlzcG9zZSgpfV9nZXRDb25maWcodCl7cmV0dXJuIHQ9ey4uLkZuLC4uLndlLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6e319LEJ0KEduLHQsV24pLHR9X2luaXRpYWxpemVCYWNrRHJvcCgpe3JldHVybiBuZXcgYm4oe2NsYXNzTmFtZTpcIm9mZmNhbnZhcy1iYWNrZHJvcFwiLGlzVmlzaWJsZTp0aGlzLl9jb25maWcuYmFja2Ryb3AsaXNBbmltYXRlZDohMCxyb290RWxlbWVudDp0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUsY2xpY2tDYWxsYmFjazooKT0+dGhpcy5oaWRlKCl9KX1faW5pdGlhbGl6ZUZvY3VzVHJhcCgpe3JldHVybiBuZXcgQ24oe3RyYXBFbGVtZW50OnRoaXMuX2VsZW1lbnR9KX1fYWRkRXZlbnRMaXN0ZW5lcnMoKXtwZS5vbih0aGlzLl9lbGVtZW50LFwia2V5ZG93bi5kaXNtaXNzLmJzLm9mZmNhbnZhc1wiLCh0PT57dGhpcy5fY29uZmlnLmtleWJvYXJkJiZcIkVzY2FwZVwiPT09dC5rZXkmJnRoaXMuaGlkZSgpfSkpfXN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCl7cmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24oKXtjb25zdCBlPSRuLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyx0KTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYodm9pZCAwPT09ZVt0XXx8dC5zdGFydHNXaXRoKFwiX1wiKXx8XCJjb25zdHJ1Y3RvclwiPT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke3R9XCJgKTtlW3RdKHRoaXMpfX0pKX19cGUub24oZG9jdW1lbnQsXCJjbGljay5icy5vZmZjYW52YXMuZGF0YS1hcGlcIiwnW2RhdGEtYnMtdG9nZ2xlPVwib2ZmY2FudmFzXCJdJywoZnVuY3Rpb24odCl7Y29uc3QgZT1QdCh0aGlzKTtpZihbXCJBXCIsXCJBUkVBXCJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkmJnQucHJldmVudERlZmF1bHQoKSxHdCh0aGlzKSlyZXR1cm47cGUub25lKGUsVm4sKCgpPT57TXQodGhpcykmJnRoaXMuZm9jdXMoKX0pKTtjb25zdCBuPU9lLmZpbmRPbmUoem4pO24mJm4hPT1lJiYkbi5nZXRJbnN0YW5jZShuKS5oaWRlKCksJG4uZ2V0T3JDcmVhdGVJbnN0YW5jZShlKS50b2dnbGUodGhpcyl9KSkscGUub24od2luZG93LFwibG9hZC5icy5vZmZjYW52YXMuZGF0YS1hcGlcIiwoKCk9Pk9lLmZpbmQoem4pLmZvckVhY2goKHQ9PiRuLmdldE9yQ3JlYXRlSW5zdGFuY2UodCkuc2hvdygpKSkpKSxnZSgkbikscXQoJG4pO2NvbnN0IHFuPW5ldyBTZXQoW1wiYmFja2dyb3VuZFwiLFwiY2l0ZVwiLFwiaHJlZlwiLFwiaXRlbXR5cGVcIixcImxvbmdkZXNjXCIsXCJwb3N0ZXJcIixcInNyY1wiLFwieGxpbms6aHJlZlwiXSksS249L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZXxzbXMpOnxbXiMmLzo/XSooPzpbIy8/XXwkKSkvaSxYbj0vXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pLFluPSh0LGUpPT57Y29uc3Qgbj10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoZS5pbmNsdWRlcyhuKSlyZXR1cm4hcW4uaGFzKG4pfHxCb29sZWFuKEtuLnRlc3QodC5ub2RlVmFsdWUpfHxYbi50ZXN0KHQubm9kZVZhbHVlKSk7Y29uc3QgaT1lLmZpbHRlcigodD0+dCBpbnN0YW5jZW9mIFJlZ0V4cCkpO2ZvcihsZXQgdD0wLGU9aS5sZW5ndGg7dDxlO3QrKylpZihpW3RdLnRlc3QobikpcmV0dXJuITA7cmV0dXJuITF9O2Z1bmN0aW9uIFFuKHQsZSxuKXtpZighdC5sZW5ndGgpcmV0dXJuIHQ7aWYobiYmXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gbih0KTtjb25zdCBpPShuZXcgd2luZG93LkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHQsXCJ0ZXh0L2h0bWxcIiksbz1bXS5jb25jYXQoLi4uaS5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpKTtmb3IobGV0IHQ9MCxuPW8ubGVuZ3RoO3Q8bjt0Kyspe2NvbnN0IG49b1t0XSxpPW4ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZighT2JqZWN0LmtleXMoZSkuaW5jbHVkZXMoaSkpe24ucmVtb3ZlKCk7Y29udGludWV9Y29uc3Qgcj1bXS5jb25jYXQoLi4ubi5hdHRyaWJ1dGVzKSxzPVtdLmNvbmNhdChlW1wiKlwiXXx8W10sZVtpXXx8W10pO3IuZm9yRWFjaCgodD0+e1luKHQscyl8fG4ucmVtb3ZlQXR0cmlidXRlKHQubm9kZU5hbWUpfSkpfXJldHVybiBpLmJvZHkuaW5uZXJIVE1MfWNvbnN0IEpuPVwidG9vbHRpcFwiLFpuPW5ldyBTZXQoW1wic2FuaXRpemVcIixcImFsbG93TGlzdFwiLFwic2FuaXRpemVGblwiXSksdGk9e2FuaW1hdGlvbjpcImJvb2xlYW5cIix0ZW1wbGF0ZTpcInN0cmluZ1wiLHRpdGxlOlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwiLHRyaWdnZXI6XCJzdHJpbmdcIixkZWxheTpcIihudW1iZXJ8b2JqZWN0KVwiLGh0bWw6XCJib29sZWFuXCIsc2VsZWN0b3I6XCIoc3RyaW5nfGJvb2xlYW4pXCIscGxhY2VtZW50OlwiKHN0cmluZ3xmdW5jdGlvbilcIixvZmZzZXQ6XCIoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKVwiLGNvbnRhaW5lcjpcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLGZhbGxiYWNrUGxhY2VtZW50czpcImFycmF5XCIsYm91bmRhcnk6XCIoc3RyaW5nfGVsZW1lbnQpXCIsY3VzdG9tQ2xhc3M6XCIoc3RyaW5nfGZ1bmN0aW9uKVwiLHNhbml0aXplOlwiYm9vbGVhblwiLHNhbml0aXplRm46XCIobnVsbHxmdW5jdGlvbilcIixhbGxvd0xpc3Q6XCJvYmplY3RcIixwb3BwZXJDb25maWc6XCIobnVsbHxvYmplY3R8ZnVuY3Rpb24pXCJ9LGVpPXtBVVRPOlwiYXV0b1wiLFRPUDpcInRvcFwiLFJJR0hUOiR0KCk/XCJsZWZ0XCI6XCJyaWdodFwiLEJPVFRPTTpcImJvdHRvbVwiLExFRlQ6JHQoKT9cInJpZ2h0XCI6XCJsZWZ0XCJ9LG5pPXthbmltYXRpb246ITAsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiaG92ZXIgZm9jdXNcIix0aXRsZTpcIlwiLGRlbGF5OjAsaHRtbDohMSxzZWxlY3RvcjohMSxwbGFjZW1lbnQ6XCJ0b3BcIixvZmZzZXQ6WzAsMF0sY29udGFpbmVyOiExLGZhbGxiYWNrUGxhY2VtZW50czpbXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl0sYm91bmRhcnk6XCJjbGlwcGluZ1BhcmVudHNcIixjdXN0b21DbGFzczpcIlwiLHNhbml0aXplOiEwLHNhbml0aXplRm46bnVsbCxhbGxvd0xpc3Q6e1wiKlwiOltcImNsYXNzXCIsXCJkaXJcIixcImlkXCIsXCJsYW5nXCIsXCJyb2xlXCIsL15hcmlhLVtcXHctXSokL2ldLGE6W1widGFyZ2V0XCIsXCJocmVmXCIsXCJ0aXRsZVwiLFwicmVsXCJdLGFyZWE6W10sYjpbXSxicjpbXSxjb2w6W10sY29kZTpbXSxkaXY6W10sZW06W10saHI6W10saDE6W10saDI6W10saDM6W10saDQ6W10saDU6W10saDY6W10saTpbXSxpbWc6W1wic3JjXCIsXCJzcmNzZXRcIixcImFsdFwiLFwidGl0bGVcIixcIndpZHRoXCIsXCJoZWlnaHRcIl0sbGk6W10sb2w6W10scDpbXSxwcmU6W10sczpbXSxzbWFsbDpbXSxzcGFuOltdLHN1YjpbXSxzdXA6W10sc3Ryb25nOltdLHU6W10sdWw6W119LHBvcHBlckNvbmZpZzpudWxsfSxpaT17SElERTpcImhpZGUuYnMudG9vbHRpcFwiLEhJRERFTjpcImhpZGRlbi5icy50b29sdGlwXCIsU0hPVzpcInNob3cuYnMudG9vbHRpcFwiLFNIT1dOOlwic2hvd24uYnMudG9vbHRpcFwiLElOU0VSVEVEOlwiaW5zZXJ0ZWQuYnMudG9vbHRpcFwiLENMSUNLOlwiY2xpY2suYnMudG9vbHRpcFwiLEZPQ1VTSU46XCJmb2N1c2luLmJzLnRvb2x0aXBcIixGT0NVU09VVDpcImZvY3Vzb3V0LmJzLnRvb2x0aXBcIixNT1VTRUVOVEVSOlwibW91c2VlbnRlci5icy50b29sdGlwXCIsTU9VU0VMRUFWRTpcIm1vdXNlbGVhdmUuYnMudG9vbHRpcFwifSxvaT1cImZhZGVcIixyaT1cInNob3dcIixzaT1cInNob3dcIixhaT1cIm91dFwiLGNpPVwiLnRvb2x0aXAtaW5uZXJcIixsaT1cIi5tb2RhbFwiLHVpPVwiaGlkZS5icy5tb2RhbFwiLGRpPVwiaG92ZXJcIixwaT1cImZvY3VzXCI7Y2xhc3MgaGkgZXh0ZW5kcyBtZXtjb25zdHJ1Y3RvcihlLG4pe2lmKHZvaWQgMD09PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3N1cGVyKGUpLHRoaXMuX2lzRW5hYmxlZD0hMCx0aGlzLl90aW1lb3V0PTAsdGhpcy5faG92ZXJTdGF0ZT1cIlwiLHRoaXMuX2FjdGl2ZVRyaWdnZXI9e30sdGhpcy5fcG9wcGVyPW51bGwsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhuKSx0aGlzLnRpcD1udWxsLHRoaXMuX3NldExpc3RlbmVycygpfXN0YXRpYyBnZXQgRGVmYXVsdCgpe3JldHVybiBuaX1zdGF0aWMgZ2V0IE5BTUUoKXtyZXR1cm4gSm59c3RhdGljIGdldCBFdmVudCgpe3JldHVybiBpaX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJuIHRpfWVuYWJsZSgpe3RoaXMuX2lzRW5hYmxlZD0hMH1kaXNhYmxlKCl7dGhpcy5faXNFbmFibGVkPSExfXRvZ2dsZUVuYWJsZWQoKXt0aGlzLl9pc0VuYWJsZWQ9IXRoaXMuX2lzRW5hYmxlZH10b2dnbGUodCl7aWYodGhpcy5faXNFbmFibGVkKWlmKHQpe2NvbnN0IGU9dGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQpO2UuX2FjdGl2ZVRyaWdnZXIuY2xpY2s9IWUuX2FjdGl2ZVRyaWdnZXIuY2xpY2ssZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpP2UuX2VudGVyKG51bGwsZSk6ZS5fbGVhdmUobnVsbCxlKX1lbHNle2lmKHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhyaSkpcmV0dXJuIHZvaWQgdGhpcy5fbGVhdmUobnVsbCx0aGlzKTt0aGlzLl9lbnRlcihudWxsLHRoaXMpfX1kaXNwb3NlKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHBlLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QobGkpLHVpLHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpLHRoaXMudGlwJiZ0aGlzLnRpcC5yZW1vdmUoKSx0aGlzLl9kaXNwb3NlUG9wcGVyKCksc3VwZXIuZGlzcG9zZSgpfXNob3coKXtpZihcIm5vbmVcIj09PXRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtpZighdGhpcy5pc1dpdGhDb250ZW50KCl8fCF0aGlzLl9pc0VuYWJsZWQpcmV0dXJuO2NvbnN0IHQ9cGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyksZT1GdCh0aGlzLl9lbGVtZW50KSxuPW51bGw9PT1lP3RoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGhpcy5fZWxlbWVudCk6ZS5jb250YWlucyh0aGlzLl9lbGVtZW50KTtpZih0LmRlZmF1bHRQcmV2ZW50ZWR8fCFuKXJldHVybjtcInRvb2x0aXBcIj09PXRoaXMuY29uc3RydWN0b3IuTkFNRSYmdGhpcy50aXAmJnRoaXMuZ2V0VGl0bGUoKSE9PXRoaXMudGlwLnF1ZXJ5U2VsZWN0b3IoY2kpLmlubmVySFRNTCYmKHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKSx0aGlzLnRpcC5yZW1vdmUoKSx0aGlzLnRpcD1udWxsKTtjb25zdCBpPXRoaXMuZ2V0VGlwRWxlbWVudCgpLG89KHQ9Pntkb3t0Kz1NYXRoLmZsb29yKDFlNipNYXRoLnJhbmRvbSgpKX13aGlsZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KSk7cmV0dXJuIHR9KSh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO2kuc2V0QXR0cmlidXRlKFwiaWRcIixvKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIixvKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZpLmNsYXNzTGlzdC5hZGQob2kpO2NvbnN0IHI9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fY29uZmlnLnBsYWNlbWVudD90aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcyxpLHRoaXMuX2VsZW1lbnQpOnRoaXMuX2NvbmZpZy5wbGFjZW1lbnQscz10aGlzLl9nZXRBdHRhY2htZW50KHIpO3RoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhzKTtjb25zdHtjb250YWluZXI6YX09dGhpcy5fY29uZmlnO2ZlLnNldChpLHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksdGhpcyksdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCl8fChhLmFwcGVuZChpKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCkpLHRoaXMuX3BvcHBlcj90aGlzLl9wb3BwZXIudXBkYXRlKCk6dGhpcy5fcG9wcGVyPUF0KHRoaXMuX2VsZW1lbnQsaSx0aGlzLl9nZXRQb3BwZXJDb25maWcocykpLGkuY2xhc3NMaXN0LmFkZChyaSk7Y29uc3QgYz10aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3MpO2MmJmkuY2xhc3NMaXN0LmFkZCguLi5jLnNwbGl0KFwiIFwiKSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKHQ9PntwZS5vbih0LFwibW91c2VvdmVyXCIsV3QpfSkpO2NvbnN0IGw9dGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKG9pKTt0aGlzLl9xdWV1ZUNhbGxiYWNrKCgoKT0+e2NvbnN0IHQ9dGhpcy5faG92ZXJTdGF0ZTt0aGlzLl9ob3ZlclN0YXRlPW51bGwscGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pLHQ9PT1haSYmdGhpcy5fbGVhdmUobnVsbCx0aGlzKX0pLHRoaXMudGlwLGwpfWhpZGUoKXtpZighdGhpcy5fcG9wcGVyKXJldHVybjtjb25zdCB0PXRoaXMuZ2V0VGlwRWxlbWVudCgpO2lmKHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpLmRlZmF1bHRQcmV2ZW50ZWQpcmV0dXJuO3QuY2xhc3NMaXN0LnJlbW92ZShyaSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goKHQ9PnBlLm9mZih0LFwibW91c2VvdmVyXCIsV3QpKSksdGhpcy5fYWN0aXZlVHJpZ2dlci5jbGljaz0hMSx0aGlzLl9hY3RpdmVUcmlnZ2VyLmZvY3VzPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXIuaG92ZXI9ITE7Y29uc3QgZT10aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMob2kpO3RoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwodGhpcy5faG92ZXJTdGF0ZSE9PXNpJiZ0LnJlbW92ZSgpLHRoaXMuX2NsZWFuVGlwQ2xhc3MoKSx0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIikscGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKSx0aGlzLl9kaXNwb3NlUG9wcGVyKCkpfSksdGhpcy50aXAsZSksdGhpcy5faG92ZXJTdGF0ZT1cIlwifXVwZGF0ZSgpe251bGwhPT10aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci51cGRhdGUoKX1pc1dpdGhDb250ZW50KCl7cmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKX1nZXRUaXBFbGVtZW50KCl7aWYodGhpcy50aXApcmV0dXJuIHRoaXMudGlwO2NvbnN0IHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt0LmlubmVySFRNTD10aGlzLl9jb25maWcudGVtcGxhdGU7Y29uc3QgZT10LmNoaWxkcmVuWzBdO3JldHVybiB0aGlzLnNldENvbnRlbnQoZSksZS5jbGFzc0xpc3QucmVtb3ZlKG9pLHJpKSx0aGlzLnRpcD1lLHRoaXMudGlwfXNldENvbnRlbnQodCl7dGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHQsdGhpcy5nZXRUaXRsZSgpLGNpKX1fc2FuaXRpemVBbmRTZXRDb250ZW50KHQsZSxuKXtjb25zdCBpPU9lLmZpbmRPbmUobix0KTtlfHwhaT90aGlzLnNldEVsZW1lbnRDb250ZW50KGksZSk6aS5yZW1vdmUoKX1zZXRFbGVtZW50Q29udGVudCh0LGUpe2lmKG51bGwhPT10KXJldHVybiBqdChlKT8oZT1IdChlKSx2b2lkKHRoaXMuX2NvbmZpZy5odG1sP2UucGFyZW50Tm9kZSE9PXQmJih0LmlubmVySFRNTD1cIlwiLHQuYXBwZW5kKGUpKTp0LnRleHRDb250ZW50PWUudGV4dENvbnRlbnQpKTp2b2lkKHRoaXMuX2NvbmZpZy5odG1sPyh0aGlzLl9jb25maWcuc2FuaXRpemUmJihlPVFuKGUsdGhpcy5fY29uZmlnLmFsbG93TGlzdCx0aGlzLl9jb25maWcuc2FuaXRpemVGbikpLHQuaW5uZXJIVE1MPWUpOnQudGV4dENvbnRlbnQ9ZSl9Z2V0VGl0bGUoKXtjb25zdCB0PXRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1icy1vcmlnaW5hbC10aXRsZVwiKXx8dGhpcy5fY29uZmlnLnRpdGxlO3JldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0KX11cGRhdGVBdHRhY2htZW50KHQpe3JldHVyblwicmlnaHRcIj09PXQ/XCJlbmRcIjpcImxlZnRcIj09PXQ/XCJzdGFydFwiOnR9X2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0LGUpe3JldHVybiBlfHx0aGlzLmNvbnN0cnVjdG9yLmdldE9yQ3JlYXRlSW5zdGFuY2UodC5kZWxlZ2F0ZVRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKX1fZ2V0T2Zmc2V0KCl7Y29uc3R7b2Zmc2V0OnR9PXRoaXMuX2NvbmZpZztyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD90LnNwbGl0KFwiLFwiKS5tYXAoKHQ9Pk51bWJlci5wYXJzZUludCh0LDEwKSkpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/ZT0+dChlLHRoaXMuX2VsZW1lbnQpOnR9X3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5jYWxsKHRoaXMuX2VsZW1lbnQpOnR9X2dldFBvcHBlckNvbmZpZyh0KXtjb25zdCBlPXtwbGFjZW1lbnQ6dCxtb2RpZmllcnM6W3tuYW1lOlwiZmxpcFwiLG9wdGlvbnM6e2ZhbGxiYWNrUGxhY2VtZW50czp0aGlzLl9jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRzfX0se25hbWU6XCJvZmZzZXRcIixvcHRpb25zOntvZmZzZXQ6dGhpcy5fZ2V0T2Zmc2V0KCl9fSx7bmFtZTpcInByZXZlbnRPdmVyZmxvd1wiLG9wdGlvbnM6e2JvdW5kYXJ5OnRoaXMuX2NvbmZpZy5ib3VuZGFyeX19LHtuYW1lOlwiYXJyb3dcIixvcHRpb25zOntlbGVtZW50OmAuJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWFycm93YH19LHtuYW1lOlwib25DaGFuZ2VcIixlbmFibGVkOiEwLHBoYXNlOlwiYWZ0ZXJXcml0ZVwiLGZuOnQ9PnRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX1dLG9uRmlyc3RVcGRhdGU6dD0+e3Qub3B0aW9ucy5wbGFjZW1lbnQhPT10LnBsYWNlbWVudCYmdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpfX07cmV0dXJuey4uLmUsLi4uXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZz90aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGUpOnRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWd9fV9hZGRBdHRhY2htZW50Q2xhc3ModCl7dGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChgJHt0aGlzLl9nZXRCYXNpY0NsYXNzUHJlZml4KCl9LSR7dGhpcy51cGRhdGVBdHRhY2htZW50KHQpfWApfV9nZXRBdHRhY2htZW50KHQpe3JldHVybiBlaVt0LnRvVXBwZXJDYXNlKCldfV9zZXRMaXN0ZW5lcnMoKXt0aGlzLl9jb25maWcudHJpZ2dlci5zcGxpdChcIiBcIikuZm9yRWFjaCgodD0+e2lmKFwiY2xpY2tcIj09PXQpcGUub24odGhpcy5fZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLHRoaXMuX2NvbmZpZy5zZWxlY3RvciwodD0+dGhpcy50b2dnbGUodCkpKTtlbHNlIGlmKFwibWFudWFsXCIhPT10KXtjb25zdCBlPXQ9PT1kaT90aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVI6dGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOLG49dD09PWRpP3RoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRTp0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO3BlLm9uKHRoaXMuX2VsZW1lbnQsZSx0aGlzLl9jb25maWcuc2VsZWN0b3IsKHQ9PnRoaXMuX2VudGVyKHQpKSkscGUub24odGhpcy5fZWxlbWVudCxuLHRoaXMuX2NvbmZpZy5zZWxlY3RvciwodD0+dGhpcy5fbGVhdmUodCkpKX19KSksdGhpcy5faGlkZU1vZGFsSGFuZGxlcj0oKT0+e3RoaXMuX2VsZW1lbnQmJnRoaXMuaGlkZSgpfSxwZS5vbih0aGlzLl9lbGVtZW50LmNsb3Nlc3QobGkpLHVpLHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpLHRoaXMuX2NvbmZpZy5zZWxlY3Rvcj90aGlzLl9jb25maWc9ey4uLnRoaXMuX2NvbmZpZyx0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn06dGhpcy5fZml4VGl0bGUoKX1fZml4VGl0bGUoKXtjb25zdCB0PXRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIiksZT10eXBlb2YgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpOyh0fHxcInN0cmluZ1wiIT09ZSkmJih0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtb3JpZ2luYWwtdGl0bGVcIix0fHxcIlwiKSwhdHx8dGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpfHx0aGlzLl9lbGVtZW50LnRleHRDb250ZW50fHx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIix0KSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsXCJcIikpfV9lbnRlcih0LGUpe2U9dGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQsZSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c2luXCI9PT10LnR5cGU/cGk6ZGldPSEwKSxlLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMocmkpfHxlLl9ob3ZlclN0YXRlPT09c2k/ZS5faG92ZXJTdGF0ZT1zaTooY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9c2ksZS5fY29uZmlnLmRlbGF5JiZlLl9jb25maWcuZGVsYXkuc2hvdz9lLl90aW1lb3V0PXNldFRpbWVvdXQoKCgpPT57ZS5faG92ZXJTdGF0ZT09PXNpJiZlLnNob3coKX0pLGUuX2NvbmZpZy5kZWxheS5zaG93KTplLnNob3coKSl9X2xlYXZlKHQsZSl7ZT10aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCxlKSx0JiYoZS5fYWN0aXZlVHJpZ2dlcltcImZvY3Vzb3V0XCI9PT10LnR5cGU/cGk6ZGldPWUuX2VsZW1lbnQuY29udGFpbnModC5yZWxhdGVkVGFyZ2V0KSksZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwoY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9YWksZS5fY29uZmlnLmRlbGF5JiZlLl9jb25maWcuZGVsYXkuaGlkZT9lLl90aW1lb3V0PXNldFRpbWVvdXQoKCgpPT57ZS5faG92ZXJTdGF0ZT09PWFpJiZlLmhpZGUoKX0pLGUuX2NvbmZpZy5kZWxheS5oaWRlKTplLmhpZGUoKSl9X2lzV2l0aEFjdGl2ZVRyaWdnZXIoKXtmb3IoY29uc3QgdCBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKWlmKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdF0pcmV0dXJuITA7cmV0dXJuITF9X2dldENvbmZpZyh0KXtjb25zdCBlPXdlLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKCh0PT57Wm4uaGFzKHQpJiZkZWxldGUgZVt0XX0pKSwodD17Li4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LC4uLmUsLi4uXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fX0pLmNvbnRhaW5lcj0hMT09PXQuY29udGFpbmVyP2RvY3VtZW50LmJvZHk6SHQodC5jb250YWluZXIpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmRlbGF5JiYodC5kZWxheT17c2hvdzp0LmRlbGF5LGhpZGU6dC5kZWxheX0pLFwibnVtYmVyXCI9PXR5cGVvZiB0LnRpdGxlJiYodC50aXRsZT10LnRpdGxlLnRvU3RyaW5nKCkpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmNvbnRlbnQmJih0LmNvbnRlbnQ9dC5jb250ZW50LnRvU3RyaW5nKCkpLEJ0KEpuLHQsdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksdC5zYW5pdGl6ZSYmKHQudGVtcGxhdGU9UW4odC50ZW1wbGF0ZSx0LmFsbG93TGlzdCx0LnNhbml0aXplRm4pKSx0fV9nZXREZWxlZ2F0ZUNvbmZpZygpe2NvbnN0IHQ9e307Zm9yKGNvbnN0IGUgaW4gdGhpcy5fY29uZmlnKXRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlXSE9PXRoaXMuX2NvbmZpZ1tlXSYmKHRbZV09dGhpcy5fY29uZmlnW2VdKTtyZXR1cm4gdH1fY2xlYW5UaXBDbGFzcygpe2NvbnN0IHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT1uZXcgUmVnRXhwKGAoXnxcXFxccykke3RoaXMuX2dldEJhc2ljQ2xhc3NQcmVmaXgoKX1cXFxcUytgLFwiZ1wiKSxuPXQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikubWF0Y2goZSk7bnVsbCE9PW4mJm4ubGVuZ3RoPjAmJm4ubWFwKCh0PT50LnRyaW0oKSkpLmZvckVhY2goKGU9PnQuY2xhc3NMaXN0LnJlbW92ZShlKSkpfV9nZXRCYXNpY0NsYXNzUHJlZml4KCl7cmV0dXJuXCJicy10b29sdGlwXCJ9X2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KXtjb25zdHtzdGF0ZTplfT10O2UmJih0aGlzLnRpcD1lLmVsZW1lbnRzLnBvcHBlcix0aGlzLl9jbGVhblRpcENsYXNzKCksdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQoZS5wbGFjZW1lbnQpKSl9X2Rpc3Bvc2VQb3BwZXIoKXt0aGlzLl9wb3BwZXImJih0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX3BvcHBlcj1udWxsKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1oaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19cXQoaGkpO2NvbnN0IGZpPXsuLi5oaS5EZWZhdWx0LHBsYWNlbWVudDpcInJpZ2h0XCIsb2Zmc2V0OlswLDhdLHRyaWdnZXI6XCJjbGlja1wiLGNvbnRlbnQ6XCJcIix0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nfSxtaT17Li4uaGkuRGVmYXVsdFR5cGUsY29udGVudDpcIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIn0sZ2k9e0hJREU6XCJoaWRlLmJzLnBvcG92ZXJcIixISURERU46XCJoaWRkZW4uYnMucG9wb3ZlclwiLFNIT1c6XCJzaG93LmJzLnBvcG92ZXJcIixTSE9XTjpcInNob3duLmJzLnBvcG92ZXJcIixJTlNFUlRFRDpcImluc2VydGVkLmJzLnBvcG92ZXJcIixDTElDSzpcImNsaWNrLmJzLnBvcG92ZXJcIixGT0NVU0lOOlwiZm9jdXNpbi5icy5wb3BvdmVyXCIsRk9DVVNPVVQ6XCJmb2N1c291dC5icy5wb3BvdmVyXCIsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXIuYnMucG9wb3ZlclwiLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlLmJzLnBvcG92ZXJcIn07Y2xhc3MgX2kgZXh0ZW5kcyBoaXtzdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gZml9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuXCJwb3BvdmVyXCJ9c3RhdGljIGdldCBFdmVudCgpe3JldHVybiBnaX1zdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCl7cmV0dXJuIG1pfWlzV2l0aENvbnRlbnQoKXtyZXR1cm4gdGhpcy5nZXRUaXRsZSgpfHx0aGlzLl9nZXRDb250ZW50KCl9c2V0Q29udGVudCh0KXt0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodCx0aGlzLmdldFRpdGxlKCksXCIucG9wb3Zlci1oZWFkZXJcIiksdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHQsdGhpcy5fZ2V0Q29udGVudCgpLFwiLnBvcG92ZXItYm9keVwiKX1fZ2V0Q29udGVudCgpe3JldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY29udGVudCl9X2dldEJhc2ljQ2xhc3NQcmVmaXgoKXtyZXR1cm5cImJzLXBvcG92ZXJcIn1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1faS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSgpfX0pKX19cXQoX2kpO2NvbnN0IHZpPVwic2Nyb2xsc3B5XCIseWk9e29mZnNldDoxMCxtZXRob2Q6XCJhdXRvXCIsdGFyZ2V0OlwiXCJ9LGJpPXtvZmZzZXQ6XCJudW1iZXJcIixtZXRob2Q6XCJzdHJpbmdcIix0YXJnZXQ6XCIoc3RyaW5nfGVsZW1lbnQpXCJ9LEVpPVwiYWN0aXZlXCIsd2k9XCIubmF2LWxpbmssIC5saXN0LWdyb3VwLWl0ZW0sIC5kcm9wZG93bi1pdGVtXCIsT2k9XCJwb3NpdGlvblwiO2NsYXNzIERpIGV4dGVuZHMgbWV7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9zY3JvbGxFbGVtZW50PVwiQk9EWVwiPT09dGhpcy5fZWxlbWVudC50YWdOYW1lP3dpbmRvdzp0aGlzLl9lbGVtZW50LHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHRoaXMuX3Njcm9sbEhlaWdodD0wLHBlLm9uKHRoaXMuX3Njcm9sbEVsZW1lbnQsXCJzY3JvbGwuYnMuc2Nyb2xsc3B5XCIsKCgpPT50aGlzLl9wcm9jZXNzKCkpKSx0aGlzLnJlZnJlc2goKSx0aGlzLl9wcm9jZXNzKCl9c3RhdGljIGdldCBEZWZhdWx0KCl7cmV0dXJuIHlpfXN0YXRpYyBnZXQgTkFNRSgpe3JldHVybiB2aX1yZWZyZXNoKCl7Y29uc3QgdD10aGlzLl9zY3JvbGxFbGVtZW50PT09dGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3c/XCJvZmZzZXRcIjpPaSxlPVwiYXV0b1wiPT09dGhpcy5fY29uZmlnLm1ldGhvZD90OnRoaXMuX2NvbmZpZy5tZXRob2Qsbj1lPT09T2k/dGhpcy5fZ2V0U2Nyb2xsVG9wKCk6MDt0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fc2Nyb2xsSGVpZ2h0PXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLE9lLmZpbmQod2ksdGhpcy5fY29uZmlnLnRhcmdldCkubWFwKCh0PT57Y29uc3QgaT14dCh0KSxvPWk/T2UuZmluZE9uZShpKTpudWxsO2lmKG8pe2NvbnN0IHQ9by5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZih0LndpZHRofHx0LmhlaWdodClyZXR1cm5bd2VbZV0obykudG9wK24saV19cmV0dXJuIG51bGx9KSkuZmlsdGVyKCh0PT50KSkuc29ydCgoKHQsZSk9PnRbMF0tZVswXSkpLmZvckVhY2goKHQ9Pnt0aGlzLl9vZmZzZXRzLnB1c2godFswXSksdGhpcy5fdGFyZ2V0cy5wdXNoKHRbMV0pfSkpfWRpc3Bvc2UoKXtwZS5vZmYodGhpcy5fc2Nyb2xsRWxlbWVudCxcIi5icy5zY3JvbGxzcHlcIiksc3VwZXIuZGlzcG9zZSgpfV9nZXRDb25maWcodCl7cmV0dXJuKHQ9ey4uLnlpLC4uLndlLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLC4uLlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e319KS50YXJnZXQ9SHQodC50YXJnZXQpfHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsQnQodmksdCxiaSksdH1fZ2V0U2Nyb2xsVG9wKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/dGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldDp0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcH1fZ2V0U2Nyb2xsSGVpZ2h0KCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX1fZ2V0T2Zmc2V0SGVpZ2h0KCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OnRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fV9wcm9jZXNzKCl7Y29uc3QgdD10aGlzLl9nZXRTY3JvbGxUb3AoKSt0aGlzLl9jb25maWcub2Zmc2V0LGU9dGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksbj10aGlzLl9jb25maWcub2Zmc2V0K2UtdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KCk7aWYodGhpcy5fc2Nyb2xsSGVpZ2h0IT09ZSYmdGhpcy5yZWZyZXNoKCksdD49bil7Y29uc3QgdD10aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoLTFdO3RoaXMuX2FjdGl2ZVRhcmdldCE9PXQmJnRoaXMuX2FjdGl2YXRlKHQpfWVsc2V7aWYodGhpcy5fYWN0aXZlVGFyZ2V0JiZ0PHRoaXMuX29mZnNldHNbMF0mJnRoaXMuX29mZnNldHNbMF0+MClyZXR1cm4gdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdm9pZCB0aGlzLl9jbGVhcigpO2ZvcihsZXQgZT10aGlzLl9vZmZzZXRzLmxlbmd0aDtlLS07KXRoaXMuX2FjdGl2ZVRhcmdldCE9PXRoaXMuX3RhcmdldHNbZV0mJnQ+PXRoaXMuX29mZnNldHNbZV0mJih2b2lkIDA9PT10aGlzLl9vZmZzZXRzW2UrMV18fHQ8dGhpcy5fb2Zmc2V0c1tlKzFdKSYmdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tlXSl9fV9hY3RpdmF0ZSh0KXt0aGlzLl9hY3RpdmVUYXJnZXQ9dCx0aGlzLl9jbGVhcigpO2NvbnN0IGU9d2kuc3BsaXQoXCIsXCIpLm1hcCgoZT0+YCR7ZX1bZGF0YS1icy10YXJnZXQ9XCIke3R9XCJdLCR7ZX1baHJlZj1cIiR7dH1cIl1gKSksbj1PZS5maW5kT25lKGUuam9pbihcIixcIiksdGhpcy5fY29uZmlnLnRhcmdldCk7bi5jbGFzc0xpc3QuYWRkKEVpKSxuLmNsYXNzTGlzdC5jb250YWlucyhcImRyb3Bkb3duLWl0ZW1cIik/T2UuZmluZE9uZShcIi5kcm9wZG93bi10b2dnbGVcIixuLmNsb3Nlc3QoXCIuZHJvcGRvd25cIikpLmNsYXNzTGlzdC5hZGQoRWkpOk9lLnBhcmVudHMobixcIi5uYXYsIC5saXN0LWdyb3VwXCIpLmZvckVhY2goKHQ9PntPZS5wcmV2KHQsXCIubmF2LWxpbmssIC5saXN0LWdyb3VwLWl0ZW1cIikuZm9yRWFjaCgodD0+dC5jbGFzc0xpc3QuYWRkKEVpKSkpLE9lLnByZXYodCxcIi5uYXYtaXRlbVwiKS5mb3JFYWNoKCh0PT57T2UuY2hpbGRyZW4odCxcIi5uYXYtbGlua1wiKS5mb3JFYWNoKCh0PT50LmNsYXNzTGlzdC5hZGQoRWkpKSl9KSl9KSkscGUudHJpZ2dlcih0aGlzLl9zY3JvbGxFbGVtZW50LFwiYWN0aXZhdGUuYnMuc2Nyb2xsc3B5XCIse3JlbGF0ZWRUYXJnZXQ6dH0pfV9jbGVhcigpe09lLmZpbmQod2ksdGhpcy5fY29uZmlnLnRhcmdldCkuZmlsdGVyKCh0PT50LmNsYXNzTGlzdC5jb250YWlucyhFaSkpKS5mb3JFYWNoKCh0PT50LmNsYXNzTGlzdC5yZW1vdmUoRWkpKSl9c3RhdGljIGpRdWVyeUludGVyZmFjZSh0KXtyZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbigpe2NvbnN0IGU9RGkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9fXBlLm9uKHdpbmRvdyxcImxvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpXCIsKCgpPT57T2UuZmluZCgnW2RhdGEtYnMtc3B5PVwic2Nyb2xsXCJdJykuZm9yRWFjaCgodD0+bmV3IERpKHQpKSl9KSkscXQoRGkpO2NvbnN0IENpPVwiYWN0aXZlXCIsU2k9XCJmYWRlXCIsVGk9XCJzaG93XCIsTmk9XCIuYWN0aXZlXCIsQWk9XCI6c2NvcGUgPiBsaSA+IC5hY3RpdmVcIjtjbGFzcyBSaSBleHRlbmRzIG1le3N0YXRpYyBnZXQgTkFNRSgpe3JldHVyblwidGFiXCJ9c2hvdygpe2lmKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSYmdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUmJnRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENpKSlyZXR1cm47bGV0IHQ7Y29uc3QgZT1QdCh0aGlzLl9lbGVtZW50KSxuPXRoaXMuX2VsZW1lbnQuY2xvc2VzdChcIi5uYXYsIC5saXN0LWdyb3VwXCIpO2lmKG4pe2NvbnN0IGU9XCJVTFwiPT09bi5ub2RlTmFtZXx8XCJPTFwiPT09bi5ub2RlTmFtZT9BaTpOaTt0PU9lLmZpbmQoZSxuKSx0PXRbdC5sZW5ndGgtMV19Y29uc3QgaT10P3BlLnRyaWdnZXIodCxcImhpZGUuYnMudGFiXCIse3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH0pOm51bGw7aWYocGUudHJpZ2dlcih0aGlzLl9lbGVtZW50LFwic2hvdy5icy50YWJcIix7cmVsYXRlZFRhcmdldDp0fSkuZGVmYXVsdFByZXZlbnRlZHx8bnVsbCE9PWkmJmkuZGVmYXVsdFByZXZlbnRlZClyZXR1cm47dGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCxuKTtjb25zdCBvPSgpPT57cGUudHJpZ2dlcih0LFwiaGlkZGVuLmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9KSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy50YWJcIix7cmVsYXRlZFRhcmdldDp0fSl9O2U/dGhpcy5fYWN0aXZhdGUoZSxlLnBhcmVudE5vZGUsbyk6bygpfV9hY3RpdmF0ZSh0LGUsbil7Y29uc3QgaT0oIWV8fFwiVUxcIiE9PWUubm9kZU5hbWUmJlwiT0xcIiE9PWUubm9kZU5hbWU/T2UuY2hpbGRyZW4oZSxOaSk6T2UuZmluZChBaSxlKSlbMF0sbz1uJiZpJiZpLmNsYXNzTGlzdC5jb250YWlucyhTaSkscj0oKT0+dGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKHQsaSxuKTtpJiZvPyhpLmNsYXNzTGlzdC5yZW1vdmUoVGkpLHRoaXMuX3F1ZXVlQ2FsbGJhY2socix0LCEwKSk6cigpfV90cmFuc2l0aW9uQ29tcGxldGUodCxlLG4pe2lmKGUpe2UuY2xhc3NMaXN0LnJlbW92ZShDaSk7Y29uc3QgdD1PZS5maW5kT25lKFwiOnNjb3BlID4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZVwiLGUucGFyZW50Tm9kZSk7dCYmdC5jbGFzc0xpc3QucmVtb3ZlKENpKSxcInRhYlwiPT09ZS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpJiZlLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwhMSl9dC5jbGFzc0xpc3QuYWRkKENpKSxcInRhYlwiPT09dC5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpJiZ0LnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwhMCksVXQodCksdC5jbGFzc0xpc3QuY29udGFpbnMoU2kpJiZ0LmNsYXNzTGlzdC5hZGQoVGkpO2xldCBpPXQucGFyZW50Tm9kZTtpZihpJiZcIkxJXCI9PT1pLm5vZGVOYW1lJiYoaT1pLnBhcmVudE5vZGUpLGkmJmkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZHJvcGRvd24tbWVudVwiKSl7Y29uc3QgZT10LmNsb3Nlc3QoXCIuZHJvcGRvd25cIik7ZSYmT2UuZmluZChcIi5kcm9wZG93bi10b2dnbGVcIixlKS5mb3JFYWNoKCh0PT50LmNsYXNzTGlzdC5hZGQoQ2kpKSksdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApfW4mJm4oKX1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1SaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7dH1cImApO2VbdF0oKX19KSl9fXBlLm9uKGRvY3VtZW50LFwiY2xpY2suYnMudGFiLmRhdGEtYXBpXCIsJ1tkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXScsKGZ1bmN0aW9uKHQpe1tcIkFcIixcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSYmdC5wcmV2ZW50RGVmYXVsdCgpLEd0KHRoaXMpfHxSaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnNob3coKX0pKSxxdChSaSk7Y29uc3QgSWk9XCJ0b2FzdFwiLExpPVwiaGlkZVwiLHhpPVwic2hvd1wiLFBpPVwic2hvd2luZ1wiLGtpPXthbmltYXRpb246XCJib29sZWFuXCIsYXV0b2hpZGU6XCJib29sZWFuXCIsZGVsYXk6XCJudW1iZXJcIn0samk9e2FuaW1hdGlvbjohMCxhdXRvaGlkZTohMCxkZWxheTo1ZTN9O2NsYXNzIEhpIGV4dGVuZHMgbWV7Y29uc3RydWN0b3IodCxlKXtzdXBlcih0KSx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9oYXNNb3VzZUludGVyYWN0aW9uPSExLHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb249ITEsdGhpcy5fc2V0TGlzdGVuZXJzKCl9c3RhdGljIGdldCBEZWZhdWx0VHlwZSgpe3JldHVybiBraX1zdGF0aWMgZ2V0IERlZmF1bHQoKXtyZXR1cm4gaml9c3RhdGljIGdldCBOQU1FKCl7cmV0dXJuIElpfXNob3coKXtwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93LmJzLnRvYXN0XCIpLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLl9jbGVhclRpbWVvdXQoKSx0aGlzLl9jb25maWcuYW5pbWF0aW9uJiZ0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJmYWRlXCIpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShMaSksVXQodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKHhpKSx0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoUGkpLHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCgpPT57dGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFBpKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJzaG93bi5icy50b2FzdFwiKSx0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpfSksdGhpcy5fZWxlbWVudCx0aGlzLl9jb25maWcuYW5pbWF0aW9uKSl9aGlkZSgpe3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHhpKSYmKHBlLnRyaWdnZXIodGhpcy5fZWxlbWVudCxcImhpZGUuYnMudG9hc3RcIikuZGVmYXVsdFByZXZlbnRlZHx8KHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChQaSksdGhpcy5fcXVldWVDYWxsYmFjaygoKCk9Pnt0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoTGkpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShQaSksdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHhpKSxwZS50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsXCJoaWRkZW4uYnMudG9hc3RcIil9KSx0aGlzLl9lbGVtZW50LHRoaXMuX2NvbmZpZy5hbmltYXRpb24pKSl9ZGlzcG9zZSgpe3RoaXMuX2NsZWFyVGltZW91dCgpLHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHhpKSYmdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHhpKSxzdXBlci5kaXNwb3NlKCl9X2dldENvbmZpZyh0KXtyZXR1cm4gdD17Li4uamksLi4ud2UuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksLi4uXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fX0sQnQoSWksdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0fV9tYXliZVNjaGVkdWxlSGlkZSgpe3RoaXMuX2NvbmZpZy5hdXRvaGlkZSYmKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb258fHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb258fCh0aGlzLl90aW1lb3V0PXNldFRpbWVvdXQoKCgpPT57dGhpcy5oaWRlKCl9KSx0aGlzLl9jb25maWcuZGVsYXkpKSl9X29uSW50ZXJhY3Rpb24odCxlKXtzd2l0Y2godC50eXBlKXtjYXNlXCJtb3VzZW92ZXJcIjpjYXNlXCJtb3VzZW91dFwiOnRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb249ZTticmVhaztjYXNlXCJmb2N1c2luXCI6Y2FzZVwiZm9jdXNvdXRcIjp0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uPWV9aWYoZSlyZXR1cm4gdm9pZCB0aGlzLl9jbGVhclRpbWVvdXQoKTtjb25zdCBuPXQucmVsYXRlZFRhcmdldDt0aGlzLl9lbGVtZW50PT09bnx8dGhpcy5fZWxlbWVudC5jb250YWlucyhuKXx8dGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKX1fc2V0TGlzdGVuZXJzKCl7cGUub24odGhpcy5fZWxlbWVudCxcIm1vdXNlb3Zlci5icy50b2FzdFwiLCh0PT50aGlzLl9vbkludGVyYWN0aW9uKHQsITApKSkscGUub24odGhpcy5fZWxlbWVudCxcIm1vdXNlb3V0LmJzLnRvYXN0XCIsKHQ9PnRoaXMuX29uSW50ZXJhY3Rpb24odCwhMSkpKSxwZS5vbih0aGlzLl9lbGVtZW50LFwiZm9jdXNpbi5icy50b2FzdFwiLCh0PT50aGlzLl9vbkludGVyYWN0aW9uKHQsITApKSkscGUub24odGhpcy5fZWxlbWVudCxcImZvY3Vzb3V0LmJzLnRvYXN0XCIsKHQ9PnRoaXMuX29uSW50ZXJhY3Rpb24odCwhMSkpKX1fY2xlYXJUaW1lb3V0KCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHRoaXMuX3RpbWVvdXQ9bnVsbH1zdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpe3JldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uKCl7Y29uc3QgZT1IaS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsdCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKHZvaWQgMD09PWVbdF0pdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHt0fVwiYCk7ZVt0XSh0aGlzKX19KSl9fWdlKEhpKSxxdChIaSk7dmFyIEJpLE1pPWZ1bmN0aW9uKCl7cmV0dXJuIE1pPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPTEsaT1hcmd1bWVudHMubGVuZ3RoO248aTtuKyspZm9yKHZhciBvIGluIGU9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG8pJiYodFtvXT1lW29dKTtyZXR1cm4gdH0sTWkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxHaT1uZXcoZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY29va2llLm1hdGNoKFwiKD86KD86XnwuKjsgKilcIi5jb25jYXQodCxcIiAqPSAqKFteO10qKS4qJCl8Xi4qJFwiKSlbMV07aWYoZSlyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUpfSx0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPXt9KSxuLmRheXMmJihuW1wibWF4LWFnZVwiXT02MCpuLmRheXMqNjAqMjQsZGVsZXRlIG4uZGF5cyksbj1PYmplY3QuZW50cmllcyhuKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxpPWVbMV07cmV0dXJuXCJcIi5jb25jYXQodCxcIjsgXCIpLmNvbmNhdChuLFwiPVwiKS5jb25jYXQoaSl9KSxcIlwiKSxkb2N1bWVudC5jb29raWU9dCtcIj1cIitlbmNvZGVVUklDb21wb25lbnQoZSkrbn0sdC5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQsZSl7dGhpcy5zZXQodCxcIlwiLE1pKHtcIm1heC1hZ2VcIjotMX0sZSkpfSx0LnByb3RvdHlwZS5nZXRKU09OPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0KHQpO3JldHVybiBlP0pTT04ucGFyc2UoZSk6XCJcIn0sdC5wcm90b3R5cGUuc2V0SlNPTj1mdW5jdGlvbih0LGUsbil7dGhpcy5zZXQodCxKU09OLnN0cmluZ2lmeShlKSxuKX0sdH0oKSksRmk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LkNPTF9TT1JUSU5HPVwiQ09MX1NPUlRJTkdcIix0LkNPTF9SRVNJWkVEPVwiQ09MX1JFU0laRURcIix0LkNPTF9TSE9XX0hJREU9XCJDT0xfU0hPV19ISURFXCIsdC5DT0xfUkVPUkRFUj1cIkNPTF9SRU9SREVSXCIsdH0oKSxXaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQuR1JJRF9EQVRBPVwiR1JJRF9EQVRBXCIsdC5PTl9ORVhUX1JFQ09SRD1cIk9OX05FWFRfUkVDT1JEXCIsdC5PTl9QUkVWX1JFQ09SRD1cIk9OX1BSRVZfUkVDT1JEXCIsdC5PTl9TQVZFX1JFQ09SRD1cIk9OX1NBVkVfUkVDT1JEXCIsdC5PTl9ERUxFVEVfUkVDT1JEPVwiT05fREVMRVRFX1JFQ09SRFwiLHQuT05fTEFTVF9SRUNPUkQ9XCJPTl9MQVNUX1JFQ09SRFwiLHQuT05fRklSU1RfUkVDT1JEPVwiT05fRklSU1RfUkVDT1JEXCIsdC5PTl9BRERfUkVDT1JEPVwiT05fQUREX1JFQ09SRFwiLHQuT05fRkVUQ0hfUkVDT1JEPVwiT05fRkVUQ0hfUkVDT1JEXCIsdC5PTl9GRVRDSF9SRUNPUkRfRVJST1I9XCJPTl9GRVRDSF9SRUNPUkRfRVJST1JcIix0Lk9OX0ZFVENIX0dSSURfUkVDT1JEPVwiT05fRkVUQ0hfR1JJRF9SRUNPUkRcIix0Lk9OX0ZFVENIX0dSSURfUkVDT1JEX0VSUk9SPVwiT05fRkVUQ0hfR1JJRF9SRUNPUkRfRVJST1JcIix0Lk9OX05BVklHQVRJTkdfUkVDT1JEPVwiT05fTkFWSUdBVElOR19SRUNPUkRcIix0Lk9OX0dSSURfVVBEQVRFRD1cIk9OX0dSSURfVVBEQVRFRFwiLHQuT05fU0FWRV9FUlJPUj1cIk9OX1NBVkVfRVJST1JcIix0Lk9OX1NPUlRJTkdfUkVRVUVTVEVEPVwiT05fU09SVElOR19SRVFVRVNURURcIix0Lk9OX0NPTFNfUkVPUkRFUkVEPVwiT05fQ09MU19SRU9SREVSRURcIix0Lk9OX0dSSURfREFUQV9CT1VORD1cIk9OX0dSSURfREFUQV9CT1VORFwiLHQuT05fR1JJRF9DT05GSUdfVVBEQVRFRD1cIk9OX0dSSURfQ09ORklHX1VQREFURURcIix0Lk9OX1BBR0VfUkVBRFk9XCJPTl9QQUdFX1JFQURZXCIsdC5PTl9ST1dfVVBEQVRFRD1cIk9OX1JPV19VUERBVEVEXCIsdC5PTl9GSUVMRF9VUERBVEVEPVwiT05fRklFTERfVVBEQVRFRFwiLHQuT05fUk9XX0RPVUJMRV9DTElDS0VEPVwiT05fUk9XX0RPVUJMRV9DTElDS0VEXCIsdH0oKSxVaT1uZXcoZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5jYWxsYmFja3M9W10sdGhpcy5yZWdpc3RlcldpblBvcFN0YXRlKCl9cmV0dXJuIHQucHJvdG90eXBlLnJlZ2lzdGVyV2luUG9wU3RhdGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3dpbmRvdy5vbnBvcHN0YXRlPWZ1bmN0aW9uKGUpe2lmKGUuc3RhdGUmJmUuc3RhdGUuZXZlbnREYXRhKXtjb25zb2xlLmxvZyhlLnN0YXRlKTt2YXIgbj17RXZlbnREYXRhOmUuc3RhdGUuZXZlbnREYXRhLFNraXBQdXNoOiEwLERhdGFTb3VyY2VOYW1lOlwiXCJ9O3QuRW1pdChXaS5PTl9GRVRDSF9SRUNPUkQsd2luZG93LG4pfX19LHQucHJvdG90eXBlLkVtaXQ9ZnVuY3Rpb24odCxlLG4pe2lmKHQpdHJ5e3RoaXMuY2FsbGJhY2tzLmZvckVhY2goKGZ1bmN0aW9uKGkpe2kuRXZlbnROYW1lIT09dHx8aS5EYXRhU291cmNlTmFtZSE9PW4uRGF0YVNvdXJjZU5hbWUmJiEwPT09aS5WZXJpZnlEYXRhU291cmNlTmFtZXx8aS5DYWxsYmFjayhlLG4pfSkpfWNhdGNoKHQpe2NvbnNvbGUuZXJyb3IodCl9fSx0LnByb3RvdHlwZS5VbnN1YnNjcmliZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmNhbGxiYWNrcy5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiAwPT0oZS5LZXk9PT10LktleSYmZS5FdmVudE5hbWU9PT10LkV2ZW50TmFtZSYmZS5EYXRhU291cmNlTmFtZT09PXQuRGF0YVNvdXJjZU5hbWUpfSkpO3RoaXMuY2FsbGJhY2tzPWV9LHQucHJvdG90eXBlLlN1YnNjcmliZT1mdW5jdGlvbih0KXt0LkV2ZW50TmFtZSYmdGhpcy5jYWxsYmFja3MucHVzaCh0KX0sdH0oKSksemk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7Y29uc29sZS5sb2coXCJTZXNzaW9uIHN0b3JhZ2UgaXMgaW5pdGlhbGl6ZWRcIil9cmV0dXJuIHQucHJvdG90eXBlLmFkZEl0ZW09ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXt2YWx1ZTplLHR5cGU6XCJwcmVtXCIsZXhwaXJ5Om4uZ2V0VGltZSgpfTtcIm9iamVjdFwiPT10eXBlb2YgZSYmdm9pZCAwIT09ZSYmKGkudHlwZT1cIm9iamVjdFwiKSxzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHQsSlNPTi5zdHJpbmdpZnkoaSkpfSx0LnByb3RvdHlwZS5hcHBlbmRJdGVtPWZ1bmN0aW9uKHQsZSl7dHJ5e3ZhciBuPXRoaXMuZ2V0SXRlbVJhdyh0KTtpZihuKXt2YXIgaT1lKG4udmFsdWUpO3RoaXMuYWRkSXRlbSh0LGksbmV3IERhdGUobi5leHBpcnkpKX19Y2F0Y2godCl7Y29uc29sZS5lcnJvcih0KX19LHQucHJvdG90eXBlLmNyZWF0ZUV4cGlyeUtleT1mdW5jdGlvbih0KXtyZXR1cm4gdCtcIi1leHBpcnlcIn0sdC5wcm90b3R5cGUuZ2V0SXRlbVJhdz1mdW5jdGlvbih0KXt2YXIgZT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHQpO2lmKGUpe3ZhciBuPUpTT04ucGFyc2UoZSksaT1uLmV4cGlyeTtyZXR1cm4gRGF0ZS5ub3coKT5wYXJzZUludChpKT8odGhpcy5yZW1vdmVJdGVtKHQpLHZvaWQgY29uc29sZS5sb2coXCJlbnRyeSBleHBpcmVkLCB3aWxsIGJlIHJlbW92ZWRcIixuKSk6bn1yZXR1cm4gbnVsbH0sdC5wcm90b3R5cGUuZ2V0SXRlbT1mdW5jdGlvbih0KXt2YXIgZT1zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHQpO2lmKGUpe3ZhciBuPUpTT04ucGFyc2UoZSksaT1uLmV4cGlyeTtyZXR1cm4gRGF0ZS5ub3coKT5wYXJzZUludChpKT92b2lkIHRoaXMucmVtb3ZlSXRlbSh0KTpuLnZhbHVlfXJldHVybiBudWxsfSx0LnByb3RvdHlwZS5yZW1vdmVJdGVtPWZ1bmN0aW9uKHQpe3Nlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0odCl9LHQucHJvdG90eXBlLnJlbW92ZUFsbD1mdW5jdGlvbih0KXtpZih0KXt2YXIgZT1zZXNzaW9uU3RvcmFnZS5sZW5ndGg7aWYoIShlPD0wKSl7Zm9yKHZhciBuPVtdLGk9MDtpPGU7aSsrKShvPXNlc3Npb25TdG9yYWdlLmtleShpKSkuc3RhcnRzV2l0aCh0KSYmbi5wdXNoKG8pO2ZvcihpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBvPW5baV07c2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShvKX19fWVsc2Ugc2Vzc2lvblN0b3JhZ2UucmVtb3ZlQWxsKCl9LHR9KCksVmk9bmV3KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuRGF0YVRhYmxlcz1bXX1yZXR1cm4gdC5wcm90b3R5cGUuQWRkPWZ1bmN0aW9uKHQpe3RoaXMuRGF0YVRhYmxlcy5wdXNoKHQpfSx0LnByb3RvdHlwZS5HZXRBbGw9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gdGhpcy5EYXRhVGFibGVzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKCFlLmlzUmVhZE9ubHkpe3ZhciBuPXtEYXRhU291cmNlTmFtZTplLmRhdGFTb3VyY2VOYW1lLERhdGE6ZS5kaXJ0eVJlY29yZHN9O3QucHVzaChuKX19KSksdH0sdC5wcm90b3R5cGUuR2V0QnlEU05hbWU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5EYXRhVGFibGVzLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRhdGFTb3VyY2VOYW1lPT09dH0pKTtpZihlKXJldHVybntEYXRhU291cmNlTmFtZTplLmRhdGFTb3VyY2VOYW1lLERhdGE6ZS5kaXJ0eVJlY29yZHN9fSx0fSgpKSwkaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLmNoaWxkcmVuPVtdLHRoaXMuYXBwRGF0YUV2ZW50cz1XaSx0aGlzLmFwcEFjdGlvbnM9Rml9cmV0dXJuIHQucHJvdG90eXBlLm5vdGlmeUxpc3RlbmVycz1mdW5jdGlvbih0LGUpe1VpLkVtaXQodCx0aGlzLGUpfSx0LnByb3RvdHlwZS5hZGRFdmVudEhhbmRsZXI9ZnVuY3Rpb24odCxlKXt0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0LGUpfSx0LnByb3RvdHlwZS5nZXRHcmlkU2V0dGluZ3M9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBHaS5nZXRKU09OKHQpfWNhdGNoKHQpe3JldHVybiB2b2lkIGNvbnNvbGUubG9nKHQpfX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZGF0YVNvdXJjZU5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGFTb3VyY2VOYW1lfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZGF0YVNvdXJjZU5hbWU9dH0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpc1JlYWRPbmx5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pc1JlYWRPbmx5fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5faXNSZWFkT25seT10fSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRpcnR5UmVjb3Jkc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bXX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ3aWR0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LnN0eWxlLndpZHRofSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5lbGVtZW50LnN0eWxlLndpZHRoPXR9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwidmlzaWJsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMT09PXRoaXMuZWxlbWVudC5oaWRkZW59LHNldDpmdW5jdGlvbih0KXt0aGlzLmVsZW1lbnQuaGlkZGVuPSExPT09dH0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5nZXRDc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZVt0XX0sdC5wcm90b3R5cGUuc2V0Q3NzPWZ1bmN0aW9uKHQsZSl7dGhpcy5lbGVtZW50LnN0eWxlW3RdPWV9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImNzc1wiLHtzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztcIm9iamVjdFwiPT10eXBlb2YgdCYmbnVsbCE9PXQmJiExPT09dGhpcy5pc0VtcHR5T2JqKHQpJiZPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihuKXtlLmVsZW1lbnQuc3R5bGVbbl09dFtuXX0pKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5wcm9wcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3QuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGUucHJvcCh0LmtleSx0LnZhbHVlKX0pKX0sdC5wcm90b3R5cGUucHJvcD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHQsZSksdGhpcy5lbGVtZW50fSx0LnByb3RvdHlwZS5nZXRQcm9wPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKHQpfSx0LnByb3RvdHlwZS5maW5kRWxlbWVudHM9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHQpfSx0LnByb3RvdHlwZS5maW5kQnlJZD1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCl9LHQucHJvdG90eXBlLnJlbW92ZUVsZW1lbnQ9ZnVuY3Rpb24odCl7dC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHQpfSx0LnByb3RvdHlwZS5hZGRDbGFzcz1mdW5jdGlvbih0KXt2YXIgZSxuPXQuc3BsaXQoXCIgXCIpO3JldHVybihlPXRoaXMuZWxlbWVudC5jbGFzc0xpc3QpLmFkZC5hcHBseShlLG4pLHRoaXN9LHQucHJvdG90eXBlLnJlbW92ZUNsYXNzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0KSx0aGlzfSx0LnByb3RvdHlwZS5oYXNDbGFzcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh0KX0sdC5wcm90b3R5cGUuc2V0VGV4dD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lbGVtZW50LmlubmVyVGV4dD10LHRoaXN9LHQucHJvdG90eXBlLmdldFRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmlubmVyVGV4dH0sdC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSEwKSxlJiZ0aGlzLmNoaWxkcmVuLnB1c2godCksdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHQuZWxlbWVudCksdGhpc30sdC5wcm90b3R5cGUuZm9jdXM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuZm9jdXMoKX0sdC5wcm90b3R5cGUuaXNFbXB0eU9iaj1mdW5jdGlvbih0KXtyZXR1cm4gMD09PU9iamVjdC5rZXlzKHQpLmxlbmd0aH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiaWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UHJvcChcImlkXCIpfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5wcm9wKFwiaWRcIix0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciBlPW5ldyB0LG49dGhpcy5lbGVtZW50LmNsb25lTm9kZSgpO2lmKG4gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCYmKGUuZWxlbWVudD1uKSx0aGlzLmNoaWxkcmVuLmxlbmd0aD4wKXt2YXIgaT10aGlzLmNoaWxkcmVuLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49dC5jbG9uZSgpO3JldHVybiBlLmVsZW1lbnQuYXBwZW5kKG4uZWxlbWVudCksbn0pKTtlLmNoaWxkcmVuPWl9cmV0dXJuIGV9LHQucHJvdG90eXBlLnNoQ2xvbmU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ/T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSksdCk6dH0sdC5wcm90b3R5cGUuY2hpbGRyZW5Ob2Rlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2hpbGRyZW59LHQucHJvdG90eXBlLmFwcGVuZENoaWxkPWZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0KX0sdC5wcm90b3R5cGUud3JhcD1mdW5jdGlvbih0LGUpe3ZhciBuPXQuY2xvbmVOb2RlKCk7aWYoZSBpbnN0YW5jZW9mIEVsZW1lbnQpe3ZhciBpPWUucGFyZW50RWxlbWVudDtuLmFwcGVuZENoaWxkKGUpLGkuYXBwZW5kQ2hpbGQobil9ZWxzZXtpZihlLmxlbmd0aDw9MClyZXR1cm47aT1lWzBdLnBhcmVudEVsZW1lbnQ7Zm9yKHZhciBvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciByPWVbb107bi5hcHBlbmRDaGlsZChyKX1pLmFwcGVuZENoaWxkKG4pfX0sdC5wcm90b3R5cGUuYWRkRHJhZ0hhbmRsZXJzPWZ1bmN0aW9uKHQsZSl7ZSYmIXRoaXMuaXNFbXB0eU9iaihlKSYmKGUuZHJhZ1N0YXJ0JiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIixlLmRyYWdTdGFydCksZS5kcmFnTGVhdmUmJnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLGUuZHJhZ0xlYXZlKSxlLmRyYWdFbnRlciYmdC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VudGVyXCIsZS5kcmFnRW50ZXIpLGUuZHJhZ092ZXImJnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsZS5kcmFnT3ZlciksZS5kcmFnRW5kJiZ0LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsZS5kcmFnRW5kKSxlLmRyb3AmJnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIixlLmRyb3ApKX0sdC5wcm90b3R5cGUubWF0Y2hlcz1mdW5jdGlvbih0LGUpe3JldHVybiEoIXR8fDEhPT10Lm5vZGVUeXBlKSYmKCFlfHx0Lm1hdGNoZXMoZSkpfSx0LnByb3RvdHlwZS5zaWJsaW5ncz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49W107cmV0dXJuIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlPyh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5jaGlsZE5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKGkpe2khPT1lLmVsZW1lbnQmJmUubWF0Y2hlcyhpLHQpJiZuLnB1c2goaSl9KSksbik6bn0sdH0oKSxxaT0obig2NjEpLGZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSksdGhpcy50ZXh0PXQsdGhpcy52YWx1ZT1lLHRoaXMuaXNTZWxlY3RlZD1ufSksS2k9ZnVuY3Rpb24odCxlLG4saSxvLHIscyxhLGMsbCl7dGhpcy5OYW1lPXQsdGhpcy5EYXRhVHlwZT1lLHRoaXMuV2lkdGg9bix0aGlzLlByb3BOYW1lPWksdGhpcy5Jc0tleT1vLHRoaXMuRGF0YVNvdXJjZT1yLHRoaXMuQ29sU3Bhbj1zLHRoaXMuUm93U3Bhbj1hLHRoaXMuU2VsZWN0b3JEYXRhQ0I9Yyx0aGlzLlNlbGVjdG9yQ29scz1sfSxYaT1mdW5jdGlvbih0LGUsbixpLG8pe3ZvaWQgMD09PWkmJihpPWZ1bmN0aW9uKHQpe30pLHZvaWQgMD09PW8mJihvPXZvaWQgMCksdGhpcy5uYW1lPXQsdGhpcy5kYXRhPWUsdGhpcy5pc1JlbW90ZT1uLHRoaXMudXJsPWksdGhpcy5nZXRQYWdlT2ZmbGluZUNCPW99LFlpPWZ1bmN0aW9uKHQsZSxuLGksbyl7dm9pZCAwPT09byYmKG89ITEpLHRoaXMuZ3JpZElkPXQsdGhpcy5jb250YWluZXJJZD1lLHRoaXMuY29sRGVmaW5pdGlvbj1uLHRoaXMuZGF0YVNvdXJjZT1pLHRoaXMuaXNSZWFkb25seT1vLHRoaXMuZW5hYmxlSW5maW5pdGVTY3JvbGw9ITAsdGhpcy5jYWNoZVJlc3BvbnNlcz0hMX0sUWk9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PXQmJih0PTEpLHZvaWQgMD09PWUmJihlPTEwKSx2b2lkIDA9PT1uJiYobj0xMCksdGhpcy5wYWdlSW5kZXg9dCx0aGlzLnBhZ2VTaXplPSFlfHxlPD0wPzEwOmUsdGhpcy50b3RhbFJlY29yZHM9bix0aGlzLnRvdGFsUGFnZXM9TWF0aC5jZWlsKHRoaXMudG90YWxSZWNvcmRzL3RoaXMucGFnZVNpemUpfSxKaT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49ZnVuY3Rpb24odCl7fSksdGhpcy5kc05hbWU9dCx0aGlzLnBhZ2luZ01ldGFEYXRhPWUsdGhpcy5uZXh0UGFnZUNhbGxiYWNrPW59LFppPWZ1bmN0aW9uKHQsZSxuLGkpe3ZvaWQgMD09PW4mJihuPXZvaWQgMCksdm9pZCAwPT09aSYmKGk9dm9pZCAwKSx0aGlzLnVybD10LHRoaXMubWV0aG9kPWUsdGhpcy5oZWFkZXJzPW4sdGhpcy5yZWNvcmRJZD1pfSx0bz0oQmk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gQmk9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSxCaSh0LGUpfSxmdW5jdGlvbih0LGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm51bGwhPT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhlKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIG4oKXt0aGlzLmNvbnN0cnVjdG9yPXR9QmkodCxlKSx0LnByb3RvdHlwZT1udWxsPT09ZT9PYmplY3QuY3JlYXRlKGUpOihuLnByb3RvdHlwZT1lLnByb3RvdHlwZSxuZXcgbil9KSxlbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gbi5vcHRpb25zPWUsbn1yZXR1cm4gdG8oZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXtcInNlbGVjdFwiPT09dGhpcy5vcHRpb25zLklucHV0VHlwZT90aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTpcImJ1dHRvblwiPT09dGhpcy5vcHRpb25zLklucHV0VHlwZT8odGhpcy5lbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJidG5cIixcImJ0bi1vdXRsaW5lLXByaW1hcnlcIikpOih0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLHRoaXMuZWxlbWVudC50eXBlPXRoaXMub3B0aW9ucy5JbnB1dFR5cGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ2YWxcIix7Z2V0OmZ1bmN0aW9uKCl7aWYodGhpcy5lbGVtZW50KXJldHVybiB0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50P1wiY2hlY2tib3hcIj09PXRoaXMub3B0aW9ucy5JbnB1dFR5cGU/dGhpcy5lbGVtZW50LmNoZWNrZWQ6XCJudW1iZXJcIj09PXRoaXMub3B0aW9ucy5JbnB1dFR5cGU/dGhpcy5lbGVtZW50LnZhbHVlQXNOdW1iZXI6dGhpcy5lbGVtZW50LnZhbHVlOnRoaXMuZWxlbWVudC52YWx1ZX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudCYmKFwiY2hlY2tib3hcIj09PXRoaXMub3B0aW9ucy5JbnB1dFR5cGU/dGhpcy5lbGVtZW50LmNoZWNrZWQ9dDp0aGlzLmVsZW1lbnQudmFsdWU9dCxcInNlbGVjdFwiPT09dGhpcy5vcHRpb25zLklucHV0VHlwZSYmdGhpcy5jaGFuZ2UoKSl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidmFsRXh0XCIse3NldDpmdW5jdGlvbih0KXt0aGlzLnZhbD10LHRoaXMuY2hhbmdlKCl9LGVudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwibW9kZWxOYW1lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFByb3AoXCJkYXRhLXByb3BuYW1lXCIpfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5wcm9wKFwiZGF0YS1wcm9wbmFtZVwiLHQpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInJlYWRvbmx5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50JiZ0aGlzLmVsZW1lbnQucmVhZE9ubHl9LHNldDpmdW5jdGlvbih0KXt0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50JiYodGhpcy5lbGVtZW50LnJlYWRPbmx5PXQpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImRpc2FibGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50fHx0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudD90aGlzLmVsZW1lbnQuZGlzYWJsZWQ6XCJ0cnVlXCI9PT10aGlzLmdldFByb3AoXCJkaXNhYmxlZFwiKX0sc2V0OmZ1bmN0aW9uKHQpe2lmKHRoaXMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnR8fHRoaXMuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KXRoaXMuZWxlbWVudC5kaXNhYmxlZD10O2Vsc2V7dmFyIGU9ITA9PT10P1widHJ1ZVwiOlwiZmFsc2VcIjt0aGlzLnByb3AoXCJkaXNhYmxlZFwiLGUpfX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJpc0tleVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cInRydWVcIj09PXRoaXMuZ2V0UHJvcChcImRhdGEta2V5Y29sdW1uXCIpfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5wcm9wKFwiZGF0YS1rZXljb2x1bW5cIix0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiB0LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpfSxlLnByb3RvdHlwZS5hZGREb3VibGVDbGlja0V2ZW50PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsKGZ1bmN0aW9uKGUpe3Qubm90aWZ5TGlzdGVuZXJzKHQuYXBwRGF0YUV2ZW50cy5PTl9ST1dfRE9VQkxFX0NMSUNLRUQse0V2ZW50RGF0YTp7RXZlbnQ6ZX0sRGF0YVNvdXJjZU5hbWU6dC5vcHRpb25zLkRhdGFTb3VyY2VOYW1lfSl9KSl9LGUucHJvdG90eXBlLmNoYW5nZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImNoYW5nZVwiKSl9LGV9KCRpKSxubz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksaW89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10aGlzLGk9e0RhdGFTb3VyY2VOYW1lOmUsSW5wdXRUeXBlOlwiY2hlY2tib3hcIn07cmV0dXJuKG49dC5jYWxsKHRoaXMsaSl8fHRoaXMpLnJlbmRlcigpLG59cmV0dXJuIG5vKGUsdCksZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpLGk9bmV3IGUodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO3JldHVybiBpLmVsZW1lbnQ9bi5lbGVtZW50LGkuY2hpbGRyZW49bi5jaGlsZHJlbix0aGlzLmFkZERvdWJsZUNsaWNrRXZlbnQoKSxpfSxlfShlbyksb289ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLHJvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIGk9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBpLm9wdGlvbnM9ZXx8bmV3IEtpLGkuaXNIZWFkZXI9bixpLnJlbmRlcigpLGl9cmV0dXJuIG9vKGUsdCksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zP3RoaXMub3B0aW9ucy5Sb3dTcGFuOnZvaWQgMCxlPXRoaXMub3B0aW9ucz90aGlzLm9wdGlvbnMuQ29sU3Bhbjp2b2lkIDA7dGhpcy5lbGVtZW50PSEwPT09dGhpcy5pc0hlYWRlcj9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik6ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLHRoaXMuaXNIZWFkZXImJnRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic29ydGluZ1wiLFwiZHMtY29sXCIpLHQmJnRoaXMucHJvcChcInJvd1NwYW5cIix0KSxlJiZ0aGlzLnByb3AoXCJjb2xTcGFuXCIsZSl9LGUucHJvdG90eXBlLmdldENlbGxUZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jaGlsZHJlblswXTtpZighdClyZXR1cm5cIlwiO2lmKHQuZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpe2lmKHQgaW5zdGFuY2VvZiBpbylyZXR1cm4gdC5lbGVtZW50LmNoZWNrZWQrXCJcIjtpZih0IGluc3RhbmNlb2YgZW8pcmV0dXJuIHQudmFsfXJldHVybiB0LmdldFRleHQoKX0sZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpLGk9bmV3IGUodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucyksdGhpcy5pc0hlYWRlcik7cmV0dXJuIGkuY2hpbGRyZW49bi5jaGlsZHJlbixpLmVsZW1lbnQ9bi5lbGVtZW50LGl9LGV9KCRpKSxzbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksYW89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlLG4pe3ZhciBpPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gaS5hcHBEYXRhRXZlbnRzPVdpLGkuc2Vzc2lvblN0b3JhZ2U9ZSxpLmRhdGFTb3VyY2VOYW1lPW4saS5jYWNoZVJlc3BvbnNlcz0hMSxpfXJldHVybiBzbyhlLHQpLGUucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49ZS5jYWNoZVJlc3BvbnNlcztpZighMD09PW4pe3ZhciBpPUpTT04uc3RyaW5naWZ5KHQpLG89dGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGkpO2lmKG8pcmV0dXJuIHZvaWQgZS5ub3RpZnlSZXNwb25zZShvKX12YXIgcj17bWV0aG9kOlwiR0VUXCIsaGVhZGVyczp0LmhlYWRlcnM/dC5oZWFkZXJzOnt9fTtmZXRjaCh0LnVybCxyKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5qc29uKCl9KSkudGhlbigoZnVuY3Rpb24odCl7ITA9PT1uJiZlLnNlc3Npb25TdG9yYWdlLmFkZEl0ZW0oaSx0LG5ldyBEYXRlKERhdGUubm93KCkrNmU1KSksZS5ub3RpZnlSZXNwb25zZSh0KX0pKS5jYXRjaCgoZnVuY3Rpb24obil7ZS5ub2ZpZnlFcnJvcihuLHQpfSkpfSxlLnByb3RvdHlwZS5ub3RpZnlSZXNwb25zZT1mdW5jdGlvbih0KXt0cnl7dmFyIGU9e0RhdGFTb3VyY2VOYW1lOnRoaXMuZGF0YVNvdXJjZU5hbWUsRXZlbnREYXRhOntEYXRhOnQuaXRlbXMsTWV0YURhdGE6bmV3IFFpKHQubWV0YURhdGEucGFnZUluZGV4LHQubWV0YURhdGEucGFnZVNpemUsdC5tZXRhRGF0YS50b3RhbFJlY29yZHMpfX19Y2F0Y2godCl7cmV0dXJuIHZvaWQgY29uc29sZS5sb2coXCJpbnZhbGlkIHJlc3BvbnNlLiBNYWtlIHN1cmUgcmVzcG9uc2UgaGF2ZSBmaWVsZHM6IGl0ZW1ze2FycmF5W29iamVjdF19LCBtZXRhRGF0YSB7cGFnZUluZGV4LCBwYWdlU2l6ZSwgdG90YWxSZWNvcmRzfVwiKX10aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkQsZSl9LGUucHJvdG90eXBlLm5vZmlmeUVycm9yPWZ1bmN0aW9uKHQsZSl7dmFyIG49e0RhdGFTb3VyY2VOYW1lOnRoaXMuZGF0YVNvdXJjZU5hbWUsRXZlbnREYXRhOntFdmVudDp0LFJlY29yZElkOmUucmVjb3JkSWR9fTt0aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkRfRVJST1Isbil9LGV9KCRpKSxjbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksbG89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4ub3B0aW9ucz1lLG4ubGlzdElkPVwicGdfbGlzdF9cIi5jb25jYXQobi5vcHRpb25zLmRzTmFtZSksbi5jb250YWluZXJJZD1cInBnX2NvbnRhaW5lcl9cIi5jb25jYXQobi5vcHRpb25zLmRzTmFtZSksbn1yZXR1cm4gY28oZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuZWxlbWVudCYmdGhpcy5lbGVtZW50LnJlbW92ZSgpLHRoaXMuZWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuZWxlbWVudC5pZD10aGlzLmNvbnRhaW5lcklkLHRoaXMuYWRkQ2xhc3MoXCJicy1wYWdpbmF0aW9uXCIpO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJuYXZcIik7ZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmFsZVwiLFwiUGFnZSBuYXZpZ2F0aW9uXCIpLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChlKTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7bi5pZD10aGlzLmxpc3RJZCxuLmNsYXNzTGlzdC5hZGQoXCJwYWdpbmF0aW9uXCIsXCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCIpO2Zvcih2YXIgaT0xO2k8PXRoaXMub3B0aW9ucy5wYWdpbmdNZXRhRGF0YS50b3RhbFBhZ2VzJiZpPD01O2krKyl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO28uY2xhc3NMaXN0LmFkZChcInBhZ2UtaXRlbVwiKTt2YXIgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtyLmNsYXNzTGlzdC5hZGQoXCJwYWdlLWxpbmtcIiksci5ocmVmPVwiI1wiLHIuY2xhc3NMaXN0LmFkZChcImRhdGEtcC1pbmRleFwiKSxyLmlubmVyVGV4dD1cIlwiLmNvbmNhdChpKSxvLmFwcGVuZENoaWxkKHIpLG4uYXBwZW5kQ2hpbGQobyksci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24oZSl7aWYoZS5wcmV2ZW50RGVmYXVsdCgpLGUudGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe3ZhciBuPWUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtcC1pbmRleFwiKTt0Lm9wdGlvbnMubmV4dFBhZ2VDYWxsYmFjayYmdC5vcHRpb25zLm5leHRQYWdlQ2FsbGJhY2socGFyc2VJbnQobikpfX0pKX1lLmFwcGVuZENoaWxkKG4pfSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI1wiK3RoaXMubGlzdElkKS5yZXBsYWNlQ2hpbGRyZW4oKX0sZX0oJGkpLHVvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxwbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gbi5ncmlkRWxlbWVudD1lLmdyaWRFbGVtZW50LG4uaHR0cENsaWVudD1lLmh0dHBDbGllbnQsbi5zX2FyZWE9bnVsbCxuLm9ic2VydmVyPW51bGwsbi50YXJnZXQ9bnVsbCxuLmN1cnJlbnRQYWdlPTEsbi5pbml0RGF0YT1udWxsLG4uaW5pdE1ldGFEYXRhPW51bGwsbi5uZXh0UGFnZUNhbGxiYWNrPW51bGwsbn1yZXR1cm4gdW8oZSx0KSxlLnByb3RvdHlwZS5vYnNlcnZlckNCPWZ1bmN0aW9uKHQsZSl7ITA9PT10WzBdLmlzSW50ZXJzZWN0aW5nJiZ0aGlzLmN1cnJlbnRQYWdlPHRoaXMuaW5pdE1ldGFEYXRhLnRvdGFsUGFnZXMmJihjb25zb2xlLmxvZyhcIkluZmluaXRlIHNjcm9sbDogZmV0Y2hpbmcgbmV4dCBwYWdlIzogXCIsdGhpcy5jdXJyZW50UGFnZSsxKSx0aGlzLmN1cnJlbnRQYWdlKyssdGhpcy5uZXh0UGFnZUNhbGxiYWNrKHRoaXMuY3VycmVudFBhZ2UpKX0sZS5wcm90b3R5cGUub2JzZXJ2ZT1mdW5jdGlvbih0KXt0aGlzLnRhcmdldD10LHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0KX0sZS5wcm90b3R5cGUudW5vYnNlcnZlPWZ1bmN0aW9uKCl7dGhpcy5vYnNlcnZlci51bm9ic2VydmUodGhpcy50YXJnZXQpfSxlLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuc19hcmVhPVwic2Nyb2xsX2FyZWFfXCIrdGhpcy5ncmlkRWxlbWVudC5pZDt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2UuaWQ9dGhpcy5zX2FyZWEsZS5jbGFzc0xpc3QuYWRkKFwicm93XCIsXCJicy1zY3JvbGxcIiksdGhpcy53cmFwKGUsdGhpcy5ncmlkRWxlbWVudCk7dmFyIG49e3Jvb3Q6ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5zX2FyZWEpLHJvb3RNYXJnaW46XCIwcHhcIix0aHJlc2hvbGQ6LjMsdHJhY2tWaXNpYmlsaXR5OiExfTt0aGlzLm9ic2VydmVyPW5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5vYnNlcnZlckNCKGUsbil9KSxuKTt2YXIgaT10aGlzLmdyaWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJ0clwiKSxvPWlbaS5sZW5ndGgtMV07dGhpcy5vYnNlcnZlKG8pfSxlfSgkaSksaG89ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLGZvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt2YXIgZT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGUuaXRlbXM9W10sZX1yZXR1cm4gaG8oZSx0KSxlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dGhpcy5maW5kSXRlbSh0Lm9wdGlvbnMucHJvcE5hbWUpfHx0aGlzLml0ZW1zLnB1c2godCl9LGUucHJvdG90eXBlLmZpbmRJdGVtPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLml0ZW1zLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLm9wdGlvbnMucHJvcE5hbWU9PT10fSkpfSxlfSgkaSksbW89ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLGdvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt2YXIgZT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGUucmVuZGVyKCksZX1yZXR1cm4gbW8oZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIiksdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJiaVwiLFwiYmktY2FyZXQtcmlnaHRcIixcInJvdy1tYXJrZXJcIil9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIHQucHJvdG90eXBlLmNsb25lLmNhbGwodGhpcyl9LGV9KCRpKSxfbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksdm89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gZS5yZW5kZXIoKSxlfXJldHVybiBfbyhlLHQpLGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3RoaXMuZWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicm93XCIsXCJhY3Rpb25zLWNvbnRhaW5lclwiKX0sZS5wcm90b3R5cGUuYWRkQWN0aW9uPWZ1bmN0aW9uKHQsZSxuLGkpe3ZhciBvPXRoaXMuZ2V0QnV0dG9uKHQsZSxuKTtyZXR1cm4gby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixpKSx0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQobyksdGhpc30sZS5wcm90b3R5cGUuYWRkRGVsZXRlQWN0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFkZEFjdGlvbihcImJ0bkRlbGV0ZVJvd1wiLFwiZGFuZ2VyXCIsXCJ0cmFzaFwiLHQpfSxlLnByb3RvdHlwZS5hZGROZXdSZWNvcmRBY3Rpb249ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWRkQWN0aW9uKFwiYnRuQWRkUm93XCIsXCJwcmltYXJ5XCIsXCJwbHVzLWNpcmNsZVwiLHQpfSxlLnByb3RvdHlwZS5hZGRHcmlkU2V0dGluZ3NBY3Rpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldEJ1dHRvbihcImJ0blNldHRpbmdzXCIsXCJwcmltYXJ5XCIsXCJnZWFyXCIpO3JldHVybiB0LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtdG9nZ2xlXCIsXCJtb2RhbFwiKSx0LnNldEF0dHJpYnV0ZShcImRhdGEtYnMtdGFyZ2V0XCIsXCIjc3RhdGljQmFja2Ryb3BfXCIuY29uY2F0KHRoaXMuZGF0YVNvdXJjZU5hbWUpKSx0aGlzLmVsZW1lbnQuYXBwZW5kKHQpLHRoaXN9LGUucHJvdG90eXBlLmdldEJ1dHRvbj1mdW5jdGlvbih0LGUsbil7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtyZXR1cm4gaS50eXBlPVwiYnV0dG9uXCIsaS5jbGFzc0xpc3QuYWRkKFwiYnRuXCIsXCJidG4tc21cIixcImJ0bi1vdXRsaW5lLVwiLmNvbmNhdChlKSxcImdyaWQtdG9vbGJhci1hY3Rpb25cIiksaS5pZD1cIlwiLmNvbmNhdCh0LFwiX1wiKS5jb25jYXQodGhpcy5kYXRhU291cmNlTmFtZSksdGhpcy5hcHBlbmRJY29uKGksbiksaX0sZS5wcm90b3R5cGUuZ2V0SWNvbj1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKTtyZXR1cm4gZS5jbGFzc0xpc3QuYWRkKFwiYmlcIixcImJpLVwiLmNvbmNhdCh0KSksZX0sZS5wcm90b3R5cGUuYXBwZW5kSWNvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZ2V0SWNvbihlKTt0LmFwcGVuZChuKX0sZX0oJGkpLHlvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxibz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUsbil7dm9pZCAwPT09biYmKG49XCJ0ZXh0XCIpO3ZhciBpPXRoaXMsbz17RGF0YVNvdXJjZU5hbWU6ZSxJbnB1dFR5cGU6bn07cmV0dXJuKGk9dC5jYWxsKHRoaXMsbyl8fHRoaXMpLnJlbmRlcigpLGl9cmV0dXJuIHlvKGUsdCksZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpLGk9bmV3IGUodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO3JldHVybiBpLmVsZW1lbnQ9bi5lbGVtZW50LGkuY2hpbGRyZW49bi5jaGlsZHJlbixpLmFkZERvdWJsZUNsaWNrRXZlbnQoKSxpfSxlfShlbyksRW89ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLHdvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dmFyIG49dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLm9wdGlvbnM9ZSxuLnJlbmRlcigpLG59cmV0dXJuIEVvKGUsdCksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTt0LnZhbHVlPXRoaXMub3B0aW9ucy52YWx1ZSx0LnRleHQ9dGhpcy5vcHRpb25zLnRleHQsdGhpcy5vcHRpb25zLmlzU2VsZWN0ZWQmJih0LnNlbGVjdGVkPSEwKSx0aGlzLmVsZW1lbnQ9dH0sZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgZT10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpO3JldHVybiBlLnNldFRleHQodGhpcy5vcHRpb25zLnRleHQpLGV9LGV9KCRpKSxPbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksRG89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10LmNhbGwodGhpcyx7RGF0YVNvdXJjZU5hbWU6ZS5EYXRhU291cmNlTmFtZSxJbnB1dFR5cGU6XCJzZWxlY3RcIn0pfHx0aGlzO3JldHVybiBuLlNlbGVjdE9wdGlvbnM9ZS5TZWxlY3RPcHRpb25zLG4ucmVuZGVyKCksbn1yZXR1cm4gT28oZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3QucHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMpLHRoaXMuU2VsZWN0T3B0aW9ucy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBlbmQobmV3IHdvKHQpKX0pKSx0aGlzLmFkZENsYXNzKFwiZm9ybS1zZWxlY3QgZm9ybS1zZWxlY3Qtc21cIil9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIG49dC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKSxpPXRoaXMuc2hDbG9uZSh0aGlzLm9wdGlvbnMpO2kuU2VsZWN0T3B0aW9ucz10aGlzLnNoQ2xvbmUodGhpcy5TZWxlY3RPcHRpb25zKTt2YXIgbz1uZXcgZShpKTtyZXR1cm4gby5lbGVtZW50PW4uZWxlbWVudCxvLmNoaWxkcmVuPW4uY2hpbGRyZW4sdGhpcy5hZGREb3VibGVDbGlja0V2ZW50KCksb30sZX0oZW8pLENvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxTbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBuLm9wdGlvbnM9ZSxuLnJlbmRlcigpLG59cmV0dXJuIENvKGUsdCksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7aWYodC5wcm90b3R5cGUucmVuZGVyLmNhbGwodGhpcyksdGhpcy5vcHRpb25zLkljb24pe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpXCIpO2UuY2xhc3NMaXN0LmFkZChcImJpXCIsXCJiaS1cIi5jb25jYXQodGhpcy5vcHRpb25zLkljb24pKSx0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZSl9dGhpcy5vcHRpb25zLkhhbmRsZXImJnRoaXMuYWRkQ2xpY2tIYW5kbGVyKCl9LGUucHJvdG90eXBlLmFkZENsaWNrSGFuZGxlcj1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbihlKXtyZXR1cm4gdC5vcHRpb25zLkhhbmRsZXIoZSl9KSl9LGUucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7dmFyIG49dC5wcm90b3R5cGUuY2xvbmUuY2FsbCh0aGlzKSxpPW5ldyBlKHRoaXMuc2hDbG9uZSh0aGlzLm9wdGlvbnMpKTtyZXR1cm4gaS5jaGlsZHJlbj1uLmNoaWxkcmVuLGl9LGV9KGVvKSxUbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksTm89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10LmNhbGwodGhpcyxlKXx8dGhpcztyZXR1cm4gbi5vcHRpb25zPWUsbi5yZW5kZXIoKSxufXJldHVybiBUbyhlLHQpLGUucHJvdG90eXBlLm9uSXRlbVNlbGVjdGVkPWZ1bmN0aW9uKHQsZSl7Y29uc29sZS5sb2coXCJyb3cgc2VsZWN0ZWRcIix0LmdyaWQuYm9keS5nZXRTZWxlY3RlZFJvdygpKTt2YXIgbj10LmdyaWQuYm9keS5nZXRTZWxlY3RlZFJvdygpLmdldElucHV0cygpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzS2V5fSkpO24mJih0aGlzLnR4dEVsZW1lbnQudmFsPW4udmFsLHRoaXMudHh0RWxlbWVudC5jaGFuZ2UoKSksdC5zZWxlY3Rvck1vZGFsLmhpZGUoKX0sZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnR4dEVsZW1lbnQ9bmV3IGJvKHRoaXMub3B0aW9ucy5EYXRhU291cmNlTmFtZSksdGhpcy50eHRFbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5Dc3NDbGFzcykucHJvcHMoW3trZXk6XCJpZFwiLHZhbHVlOnRoaXMub3B0aW9ucy5FbGVtZW50SWR9LHtrZXk6XCJwbGFjZUhvbGRlclwiLHZhbHVlOnRoaXMub3B0aW9ucy5QbGFjZUhvbGRlcn0se2tleTpcImRhdGEtcHJvcG5hbWVcIix2YWx1ZTp0aGlzLm9wdGlvbnMuUHJvcE5hbWV9XSksdGhpcy5idG5FbGVtZW50PW5ldyBTbyh7SW5wdXRUeXBlOlwiYnV0dG9uXCIsRGF0YVNvdXJjZU5hbWU6dGhpcy5vcHRpb25zLkRhdGFTb3VyY2VOYW1lLEljb246XCJzZWFyY2hcIixIYW5kbGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0Lm9wdGlvbnMuQnRuQ2xpY2sodCxlKX19KTt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2UuY2xhc3NMaXN0LmFkZChcImlucHV0LWdyb3VwXCIsXCJpbnB1dC1ncm91cC1zbVwiKSxlLmFwcGVuZENoaWxkKHRoaXMudHh0RWxlbWVudC5lbGVtZW50KSxlLmFwcGVuZENoaWxkKHRoaXMuYnRuRWxlbWVudC5lbGVtZW50KSx0aGlzLmVsZW1lbnQ9ZX0sZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpLGk9bmV3IGUodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO3JldHVybiBpLmNoaWxkcmVuPW4uY2hpbGRyZW4saX0sZX0oZW8pLEFvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxSbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gbi5vcHRpb25zPWUsbi5wYXJlbnRDb250YWluZXJJZD1uLm9wdGlvbnMuY29udGFpbmVySWQsbi5tb2RhbElkPVwiXCIuY29uY2F0KG4ucGFyZW50Q29udGFpbmVySWQsXCJfYnNfXCIpLmNvbmNhdChuLm9wdGlvbnMucHJvcE5hbWUpLG4ubW9kYWxUaXRsZUlkPVwiXCIuY29uY2F0KG4ucGFyZW50Q29udGFpbmVySWQsXCJfbGJzX1wiKS5jb25jYXQobi5vcHRpb25zLnByb3BOYW1lKSxuLmNvbnRhaW5lcklkPVwiXCIuY29uY2F0KG4ucGFyZW50Q29udGFpbmVySWQsXCJfY2JzX1wiKS5jb25jYXQobi5vcHRpb25zLnByb3BOYW1lKSxuLmdyaWRJZD1cIlwiLmNvbmNhdChuLnBhcmVudENvbnRhaW5lcklkLFwiX2dfXCIpLmNvbmNhdChuLm9wdGlvbnMucHJvcE5hbWUpLG4ucmVuZGVyKCksbi5ncmlkPW4ucmVuZGVyR3JpZCgpLG4ub25JdGVtU2VsZWN0ZWQ9ZnVuY3Rpb24odCxlKXtjb25zb2xlLmxvZygpfSxufXJldHVybiBBbyhlLHQpLGUucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm1vZGFsSWQpO2lmKGUpdGhpcy5lbGVtZW50PWUsdGhpcy5zZWxlY3Rvck1vZGFsPU1uLmdldE9yQ3JlYXRlSW5zdGFuY2UoZSk7ZWxzZXt0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLmVsZW1lbnQuaWQ9dGhpcy5tb2RhbElkLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwibW9kYWxcIiksdGhpcy5lbGVtZW50LmlubmVySFRNTD0nPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZVwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCIgaWQ9XCInLmNvbmNhdCh0aGlzLm1vZGFsVGl0bGVJZCwnXCI+U2VsZWN0IGEgdmFsdWU8L2g1PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCInKS5jb25jYXQodGhpcy5jb250YWluZXJJZCwnXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIj5PazwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PicpO3ZhciBuPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucGFyZW50Q29udGFpbmVySWQpO24mJm4uYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KSx0aGlzLnNlbGVjdG9yTW9kYWw9bmV3IE1uKHRoaXMuZWxlbWVudCksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzaG93bi5icy5tb2RhbFwiLChmdW5jdGlvbihlKXt0LmdyaWQuY2xlYXJHcmlkKCksdC5ncmlkLmluZmluaXRlU2Nyb2xsZXIuY3VycmVudFBhZ2U9MSx0LmdyaWQuZmV0Y2hHcmlkUGFnZSgxKX0pKX19LGUucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdG9yTW9kYWwuc2hvdygpfSxlLnByb3RvdHlwZS5yZW5kZXJHcmlkPWZ1bmN0aW9uKCl7dmFyIHQ9bmV3IFhpKFwiYnNTZWxlY3RvclwiLHtpbml0RGF0YTpbXSxtZXRhRGF0YTp2b2lkIDB9LCEwLHRoaXMub3B0aW9ucy51cmxDYiksZT1uZXcgWWkodGhpcy5ncmlkSWQsdGhpcy5jb250YWluZXJJZCx0aGlzLm9wdGlvbnMuZ3JpZENvbHMsdCwhMCksbj1uZXcgRm8oZSk7cmV0dXJuIG4ucmVnaXN0ZXJDYWxsYmFja3MoKSxuLnJlbW92ZUhhbmRsZXIodGhpcy5hcHBEYXRhRXZlbnRzLkdSSURfREFUQSksbi5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9BRERfUkVDT1JEKSxuLnJlbW92ZUhhbmRsZXIodGhpcy5hcHBEYXRhRXZlbnRzLk9OX0ZFVENIX1JFQ09SRCksbi5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9TQVZFX1JFQ09SRCksbi5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9TQVZFX0VSUk9SKSxuLnJlbmRlcigpLG4uZ3JpZEFjdGlvbnMudmlzaWJsZT0hMSxufSxlfSgkaSksSW89ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLExvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoZSl7dmFyIG49dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLmNlbGxzPVtdLG4ub3B0aW9ucz1lLG4ucmVuZGVyKCksbn1yZXR1cm4gSW8oZSx0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJyb3dDYXRlZ29yeVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRQcm9wKFwiZGF0YS1yb3djYXRlZ29yeVwiKX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMucHJvcChcImRhdGEtcm93Y2F0ZWdvcnlcIix0KX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxlLnByb3RvdHlwZS5hZGRDZWxsPWZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudC5hcHBlbmQodC5lbGVtZW50KSx0aGlzLmNlbGxzLnB1c2godCl9LGUucHJvdG90eXBlLmFkZENlbGxzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZS5hZGRDZWxsKHQpfSkpfSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnR8fCh0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpKX0sZS5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgbj10LnByb3RvdHlwZS5jbG9uZS5jYWxsKHRoaXMpLGk9dGhpcy5zaENsb25lKHRoaXMub3B0aW9ucyk7aS5pc1RlbXBsYXRlUm93PSExO3ZhciBvPW5ldyBlKGkpO3JldHVybiBvLmVsZW1lbnQ9bi5lbGVtZW50LG8uY2hpbGRyZW49bi5jaGlsZHJlbixvLmNlbGxzPXRoaXMuY2VsbHMubWFwKChmdW5jdGlvbih0KXt2YXIgZT10LmNsb25lKCk7cmV0dXJuIG8uZWxlbWVudC5hcHBlbmQoZS5lbGVtZW50KSxlfSkpLG99LGUucHJvdG90eXBlLmZvY3VzUm93PWZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVDbGFzcyhcInRhYmxlLWFjdGl2ZVwiKS5hZGRDbGFzcyhcInRhYmxlLWFjdGl2ZVwiKX0sZS5wcm90b3R5cGUuZ2V0SW5wdXRzPWZ1bmN0aW9uKCl7dmFyIHQ9W107cmV0dXJuIHRoaXMuY2VsbHMuZm9yRWFjaCgoZnVuY3Rpb24oZSxuKXt2YXIgaT1lLmNoaWxkcmVuO2kubGVuZ3RoPjAmJmkuZm9yRWFjaCgoZnVuY3Rpb24oZSxuKXtlIGluc3RhbmNlb2YgTm8/dC5wdXNoKGUudHh0RWxlbWVudCk6ZSBpbnN0YW5jZW9mIGVvJiZ0LnB1c2goZSl9KSl9KSksdH0sZS5wcm90b3R5cGUuY3JlYXRlSW5wdXRGb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLGk9dGhpcy5vcHRpb25zLmRhdGFTb3VyY2VOYW1lLG89dGhpcy5vcHRpb25zLmdyaWRJZCxyPW51bGw7aWYoXCJzZWxlY3RcIj09PXQuRGF0YVR5cGUpcj1uZXcgRG8oe0RhdGFTb3VyY2VOYW1lOmksU2VsZWN0T3B0aW9uczp0LkRhdGFTb3VyY2V9KTtlbHNlIGlmKFwiY2hlY2tib3hcIj09PXQuRGF0YVR5cGUpcj1uZXcgaW8oaSk7ZWxzZSBpZihcInNlbGVjdG9yXCI9PT10LkRhdGFUeXBlKXt2YXIgcz1uZXcgUm8oe3Byb3BOYW1lOnQuUHJvcE5hbWUsY29udGFpbmVySWQ6dGhpcy5vcHRpb25zLmNvbnRhaW5lcklkLHVybENiOnQuU2VsZWN0b3JEYXRhQ0IsZ3JpZENvbHM6dC5TZWxlY3RvckNvbHN9KTtlLnNlbGVjdG9ycy5hZGQocykscj1uZXcgTm8oe0RhdGFTb3VyY2VOYW1lOmksUHJvcE5hbWU6dC5Qcm9wTmFtZSxCdG5JZDpcImJ0bl9cIitvK1wiX3RlbXBsYXRlX3Jvd19cIit0LlByb3BOYW1lLENzc0NsYXNzOlwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbVwiLEVsZW1lbnRJZDpvK1wiX3RlbXBsYXRlX3Jvd19cIit0LlByb3BOYW1lLElucHV0VHlwZTpcInRleHRcIixQbGFjZUhvbGRlcjp0Lk5hbWUsQnRuQ2xpY2s6ZnVuY3Rpb24odCxlKXtzLmdyaWQucmVtb3ZlSGFuZGxlcihuLmFwcERhdGFFdmVudHMuT05fUk9XX0RPVUJMRV9DTElDS0VEKSxzLmdyaWQuYWRkSGFuZGxlcihuLmFwcERhdGFFdmVudHMuT05fUk9XX0RPVUJMRV9DTElDS0VELChmdW5jdGlvbihlLG4pe3JldHVybiB0Lm9uSXRlbVNlbGVjdGVkKHMsbil9KSkscy5zaG93KCl9fSl9ZWxzZShyPW5ldyBibyhpLHQuRGF0YVR5cGUpKS5hZGRDbGFzcyhcImZvcm0tY29udHJvbFwiLFwiZm9ybS1jb250cm9sLXNtXCIpO1wic2VsZWN0b3JcIiE9PXQuRGF0YVR5cGUmJnIucHJvcHMoW3trZXk6XCJkYXRhLXByb3BuYW1lXCIsdmFsdWU6dC5Qcm9wTmFtZX0se2tleTpcInRpdGxlXCIsdmFsdWU6dC5OYW1lfSx7a2V5OlwiaWRcIix2YWx1ZTpvK1wiX3RlbXBsYXRlX3Jvd19cIit0LlByb3BOYW1lfSx7a2V5OlwicGxhY2Vob2xkZXJcIix2YWx1ZTp0Lk5hbWV9XSksITA9PT10LklzS2V5JiYoci5yZWFkb25seT0hMCxyLmlzS2V5PSEwKSwhMD09PWUub3B0aW9ucy5pc1JlYWRvbmx5JiYoci5yZWFkb25seT0hMCxyLnNldENzcyhcImN1cnNvclwiLFwicG9pbnRlclwiKSxyLnNldENzcyhcInVzZXItc2VsZWN0XCIsXCJub25lXCIpKTt2YXIgYT1uZXcgcm8obmV3IEtpKTtyZXR1cm4gYS5hcHBlbmQociksYX0sZS5wcm90b3R5cGUuY3JlYXRlSGVhZGVyRm9yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBybyh0LCEwKTtyZXR1cm4gZS5hZGRDbGFzcyhcInNvcnRpbmdcIikuYWRkQ2xhc3MoXCJkcy1jb2xcIiksZS5zZXRUZXh0KHQuTmFtZSksZS5wcm9wKFwiZGF0YS10aC1wcm9wbmFtZVwiLHQuUHJvcE5hbWUpLGV9LGUucHJvdG90eXBlLmdldFZpc2libGVJbnB1dHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRJbnB1dHMoKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiEwPT09dC52aXNpYmxlfSkpfSxlLnByb3RvdHlwZS5nZXRSb3dEYXRhRXh0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRJbnB1dHMoKSxlPXt9O3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQsbil7dmFyIGk9dC5tb2RlbE5hbWU7ZVtpXT10fSkpLGV9LGUucHJvdG90eXBlLmdldFJvd0luZGV4PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRQcm9wKFwiZGF0YS1yb3dpbmRleFwiKTtyZXR1cm4gcGFyc2VJbnQodCl9LGUucHJvdG90eXBlLmdldFJvd0RhdGE9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldElucHV0cygpLGU9dGhpcy5nZXRSb3dJbmRleCgpLG49e30saT10aGlzLnJvd0NhdGVnb3J5O3JldHVybiBuLnJvd0NhdGVnb3J5PWksdC5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3ZhciBpPXQubW9kZWxOYW1lO25baV09dC52YWx9KSksbi5jbGllbnRSb3dOdW1iZXI9ZSxufSxlLnByb3RvdHlwZS5pc1Jvd0RpcnR5PWZ1bmN0aW9uKCl7cmV0dXJuXCJ0cnVlXCI9PT10aGlzLmdldFByb3AoXCJkYXRhLWlzZGlydHlcIil9LGV9KCRpKSx4bz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksUG89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gZS5yb3dzPVtdLGV9cmV0dXJuIHhvKGUsdCksZS5wcm90b3R5cGUuYWRkUm93PWZ1bmN0aW9uKHQpe3RoaXMuZWxlbWVudC5hcHBlbmQodC5lbGVtZW50KTt2YXIgZT10aGlzLmdldE5leHRSb3dJbmRleCgpO3QucHJvcChcImRhdGEtcm93aW5kZXhcIixlKTt2YXIgbj0hMD09PXQub3B0aW9ucy5ncmlkSGVhZGVyP1wiaGVhZFwiOlwiZGF0YVwiO3JldHVybiB0LnByb3AoXCJpZFwiLFwiXCIuY29uY2F0KHQub3B0aW9ucy5ncmlkSWQsXCJfXCIpLmNvbmNhdChuLFwiX1wiKS5jb25jYXQoZSkpLHRoaXMucm93cy5wdXNoKHQpLHRoaXN9LGUucHJvdG90eXBlLmdldFZpc2libGVSb3dzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiEwPT09dC52aXNpYmxlfSkpfSxlLnByb3RvdHlwZS5nZXROZXh0Um93SW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yb3dzLmxlbmd0aCsxfSxlLnByb3RvdHlwZS5nZXRHcmlkVGl0bGVzUm93PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm93cy5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4hMD09PXQub3B0aW9ucy5ncmlkSGVhZGVyfSkpfSxlfSgkaSksa289ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybiB0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pJiYodFtuXT1lW25dKX0sdChlLG4pfTtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuJiZudWxsIT09bil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIitTdHJpbmcobikrXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfXQoZSxuKSxlLnByb3RvdHlwZT1udWxsPT09bj9PYmplY3QuY3JlYXRlKG4pOihpLnByb3RvdHlwZT1uLnByb3RvdHlwZSxuZXcgaSl9fSgpLGpvPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt2YXIgZT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGUucmVuZGVyKCksZX1yZXR1cm4ga28oZSx0KSxlLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoZWFkXCIpLHRoaXMuYWRkQ2xhc3MoXCJ0YWJsZS1saWdodFwiKX0sZX0oUG8pLEhvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxCbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7dmFyIGU9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBlLnJlbmRlcigpLGV9cmV0dXJuIEhvKGUsdCksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKX0sZS5wcm90b3R5cGUucm93U2libGluZ3M9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKGZ1bmN0aW9uKGUsbil7aWYoZSE9PXQpcmV0dXJuIGV9KSl9LGUucHJvdG90eXBlLmZvY3VzUm93PWZ1bmN0aW9uKHQpe3QucmVtb3ZlQ2xhc3MoXCJ0YWJsZS1hY3RpdmVcIikuYWRkQ2xhc3MoXCJ0YWJsZS1hY3RpdmVcIiksdGhpcy5yb3dTaWJsaW5ncyh0KS5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3JldHVybiB0LnJlbW92ZUNsYXNzKFwidGFibGUtYWN0aXZlXCIpfSkpfSxlLnByb3RvdHlwZS5nZXRUZW1wbGF0ZVJvdz1mdW5jdGlvbigpe3ZhciB0PXRoaXMucm93cy5maWx0ZXIoKGZ1bmN0aW9uKHQpe2lmKCEwPT09dC5vcHRpb25zLmlzVGVtcGxhdGVSb3cpcmV0dXJuIHR9KSk7aWYodCYmdC5sZW5ndGg+MClyZXR1cm4gdFswXX0sZS5wcm90b3R5cGUuZ2V0RGlydHlSb3dzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaXNSb3dEaXJ0eSgpfSkpfSxlLnByb3RvdHlwZS5nZXREaXJ0eVJlY29yZHM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldERpcnR5Um93cygpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm5bXTt2YXIgZT1bXTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0LG4pe2UucHVzaCh0LmdldFJvd0RhdGEoKSl9KSksZX0sZS5wcm90b3R5cGUuZ2V0QWxsUmVjb3Jkcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMucm93cy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiExPT09dC5vcHRpb25zLmlzVGVtcGxhdGVSb3d9KSksZT1bXTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlLnB1c2godC5nZXRSb3dEYXRhKCkpfSkpLGV9LGUucHJvdG90eXBlLmdldFNlbGVjdGVkUm93PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm93cy5maW5kKChmdW5jdGlvbih0LGUpe3JldHVybiB0Lmhhc0NsYXNzKFwidGFibGUtYWN0aXZlXCIpfSkpfSxlLnByb3RvdHlwZS5tYXJrRGVsZXRlZD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0U2VsZWN0ZWRSb3coKTtpZih0KXt2YXIgZT10aGlzLnJvd1NpYmxpbmdzKHQpLG49ZVtlLmxlbmd0aC0xXTt0LnJlbW92ZUNsYXNzKFwidGFibGUtYWN0aXZlXCIpLHQucHJvcChcImRhdGEtaXNkaXJ0eVwiLFwidHJ1ZVwiKSx0LmNzcz17ZGlzcGxheTpcIm5vbmVcIn07dmFyIGk9dC5yb3dDYXRlZ29yeTt0LnJvd0NhdGVnb3J5PVwiQURERURcIj09PWk/XCJBRERFRF9ERUxFVEVEXCI6XCJERUxFVEVEXCIsdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0dSSURfVVBEQVRFRCx7RGF0YVNvdXJjZU5hbWU6dC5vcHRpb25zLmRhdGFTb3VyY2VOYW1lLEV2ZW50RGF0YTp7RXZlbnQ6dH19KSx0aGlzLmZvY3VzUm93KG4pfX0sZS5wcm90b3R5cGUucmVtb3ZlUm93PWZ1bmN0aW9uKHQpe3QuZWxlbWVudC5yZW1vdmUoKTt2YXIgZT10aGlzLnJvd3MuaW5kZXhPZih0KTtlPi0xJiZ0aGlzLnJvd3Muc3BsaWNlKGUsMSl9LGV9KFBvKSxNbz1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuIHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx0KGUsbil9O3JldHVybiBmdW5jdGlvbihlLG4pe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiK1N0cmluZyhuKStcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KGkucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyBpKX19KCksR289ZnVuY3Rpb24odCxlLG4pe2lmKG58fDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgaSxvPTAscj1lLmxlbmd0aDtvPHI7bysrKSFpJiZvIGluIGV8fChpfHwoaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLDAsbykpLGlbb109ZVtvXSk7cmV0dXJuIHQuY29uY2F0KGl8fEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpKX0sRm89ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZShlKXt2YXIgbj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4ub3B0aW9ucz1lLG4uaGVhZD1uZXcgam8sbi5ib2R5PW5ldyBCbyxuLnNlbGVjdG9ycz1uZXcgZm8sbi5wYWdpbmF0b3I9bmV3IGxvKG5ldyBKaShuLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLG5ldyBRaSwoZnVuY3Rpb24odCl7cmV0dXJuIG4ucGFnaW5hdG9yQ2FsbGJhY2sodCl9KSkpLG4uc2Vzc2lvbkNhY2hlPW5ldyB6aSxuLmh0dHBDbGllbnQ9bmV3IGFvKG4uc2Vzc2lvbkNhY2hlLG4ub3B0aW9ucy5kYXRhU291cmNlLm5hbWUpLG4uaHR0cENsaWVudC5jYWNoZVJlc3BvbnNlcz1uLm9wdGlvbnMuY2FjaGVSZXNwb25zZXMsbi5pbmZpbml0ZVNjcm9sbGVyPW51bGwsbi5ncmlkQWN0aW9ucz1udWxsLG4uZGlzY292ZXJhYmxlPSEwLG4uY29udGFpbmVyRWxlbWVudD1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChuLm9wdGlvbnMuY29udGFpbmVySWQpLG59cmV0dXJuIE1vKGUsdCksZS5wcm90b3R5cGUuc2V0RGlzY292ZXJhYmxlPWZ1bmN0aW9uKCl7VmkuQWRkKHRoaXMpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJkYXRhU291cmNlTmFtZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJpc1JlYWRPbmx5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuaXNSZWFkb25seX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJkaXJ0eVJlY29yZHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYm9keS5nZXREaXJ0eVJlY29yZHMoKX0sZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhbGxSZWNvcmRzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJvZHkuZ2V0QWxsUmVjb3JkcygpfSxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLnBhZ2luYXRvckNhbGxiYWNrPWZ1bmN0aW9uKHQpe3RoaXMuZmV0Y2hHcmlkUGFnZSh0KX0sZS5wcm90b3R5cGUuYWRkSGVhZGVyPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmFwcGVuZCh0aGlzLmhlYWQuZWxlbWVudCl9LGUucHJvdG90eXBlLmFkZEJvZHk9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuYXBwZW5kKHRoaXMuYm9keS5lbGVtZW50KX0sZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmVsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpLHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFibGVcIixcInRhYmxlLWJvcmRlcmVkXCIsXCJ0YWJsZS1ob3ZlclwiLFwidGFibGUtc21cIixcInJlc2l6YWJsZVwiLFwibmF2VGFibGVcIixcIm5vd3JhcFwiLFwiYnMtdGFibGVcIiksdGhpcy5pZD10aGlzLm9wdGlvbnMuZ3JpZElkLHRoaXMucHJvcChcImRhdGEtZGF0YXNvdXJjZVwiLHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUpO3ZhciBlPXRoaXMuZ2V0R3JpZFNldHRpbmdzKHRoaXMub3B0aW9ucy5ncmlkSWQpfHx7fTt0aGlzLmNzcz17d2lkdGg6XCJpbmhlcml0XCJ9O3ZhciBuPW5ldyBMbyh7ZGF0YVNvdXJjZU5hbWU6dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxncmlkSWQ6dGhpcy5vcHRpb25zLmdyaWRJZCxncmlkSGVhZGVyOiEwfSk7bi5hZGRDbGFzcyhcImRyYWdnYWJsZVwiKS5hZGRDbGFzcyhcImdyaWQtY29sc1wiKTt2YXIgaT1uZXcgTG8oe2lzVGVtcGxhdGVSb3c6ITAsZGF0YVNvdXJjZU5hbWU6dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxncmlkSWQ6dGhpcy5vcHRpb25zLmdyaWRJZCxjb250YWluZXJJZDp0aGlzLm9wdGlvbnMuY29udGFpbmVySWR9KTtpLmFkZENsYXNzKFwiZ3JpZC1yb3dzXCIpLGkuY3NzPXtkaXNwbGF5Olwibm9uZVwifTt2YXIgbz10aGlzLmFwcGx5Q29sT3JkZXJpbmcoZSkscj1uZXcgcm8obmV3IEtpLCEwKSxzPW5ldyBnbyxhPW5ldyBybyhuZXcgS2kpO2EuYXBwZW5kKHMpLG4uYWRkQ2VsbChyKSxpLmFkZENlbGwoYSksby5mb3JFYWNoKChmdW5jdGlvbihvKXtpZihvLlByb3BOYW1lKXt2YXIgcj1lW28uUHJvcE5hbWVdLHM9bi5jcmVhdGVIZWFkZXJGb3IobyksYT1pLmNyZWF0ZUlucHV0Rm9yKG8sdCk7dC5hZGRTb3J0aW5nKHMpLHQuYXBwbHlDb2xTZXR0aW5ncyhzLHIpLHQuYXBwbHlDb2xTZXR0aW5ncyhhLHIpLG4uYWRkQ2VsbChzKSxpLmFkZENlbGwoYSl9fSkpLHRoaXMuaGVhZC5hZGRSb3cobiksdGhpcy5ib2R5LmFkZFJvdyhpKSx0aGlzLmFkZEFjdGlvbnMoKSx0aGlzLmFkZEhlYWRlcigpLHRoaXMuYWRkQm9keSgpLHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmdyaWRBY3Rpb25zLmVsZW1lbnQpLHRoaXMuY29udGFpbmVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpLHRoaXMuYWRkSW5maW5pdGVTY3JvbGwoKTt2YXIgYz10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5kYXRhLmluaXREYXRhLGw9dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UuZGF0YS5tZXRhRGF0YSx1PXtEYXRhU291cmNlTmFtZTp0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLEV2ZW50RGF0YTp7RGF0YTpjLE1ldGFEYXRhOmx9fTt0aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkQsdSksdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0dSSURfREFUQV9CT1VORCx7RGF0YVNvdXJjZU5hbWU6dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxFdmVudERhdGE6e319KSwhMD09PXRoaXMuZGlzY292ZXJhYmxlJiZ0aGlzLnNldERpc2NvdmVyYWJsZSgpfSxlLnByb3RvdHlwZS5hZGRJbmZpbml0ZVNjcm9sbD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7ITA9PT10aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGwmJih0aGlzLmluZmluaXRlU2Nyb2xsZXI9bmV3IHBvKHtncmlkRWxlbWVudDp0aGlzLmVsZW1lbnQsaHR0cENsaWVudDp0aGlzLmh0dHBDbGllbnR9KSx0aGlzLmluZmluaXRlU2Nyb2xsZXIubmV4dFBhZ2VDYWxsYmFjaz1mdW5jdGlvbihlKXtyZXR1cm4gdC5wYWdpbmF0b3JDYWxsYmFjayhlKX0sdGhpcy5pbmZpbml0ZVNjcm9sbGVyLmVuYWJsZSgpKX0sZS5wcm90b3R5cGUuYWRkQWN0aW9ucz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5ncmlkQWN0aW9ucz1uZXcgdm8sdGhpcy5ncmlkQWN0aW9ucy5kYXRhU291cmNlTmFtZT10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLHRoaXMuZ3JpZEFjdGlvbnMuYWRkTmV3UmVjb3JkQWN0aW9uKChmdW5jdGlvbihlKXtyZXR1cm4gdC5hZGRFbXB0eVJvdygpfSkpLmFkZERlbGV0ZUFjdGlvbigoZnVuY3Rpb24oZSl7cmV0dXJuIHQuYm9keS5tYXJrRGVsZXRlZCgpfSkpLmFkZEdyaWRTZXR0aW5nc0FjdGlvbigpfSxlLnByb3RvdHlwZS5hZGRTb3J0aW5nPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dC5hZGRFdmVudEhhbmRsZXIoXCJjbGlja1wiLChmdW5jdGlvbihuKXt2YXIgaT0hMDt0Lmhhc0NsYXNzKFwic29ydGluZ19hc2NcIik/KHQucmVtb3ZlQ2xhc3MoXCJzb3J0aW5nX2FzY1wiKS5hZGRDbGFzcyhcInNvcnRpbmdfZGVzY1wiKSxpPSExKTp0LnJlbW92ZUNsYXNzKFwic29ydGluZ19kZXNjXCIpLmFkZENsYXNzKFwic29ydGluZ19hc2NcIiksdC5zaWJsaW5ncyhcInRoXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuY2xhc3NMaXN0LnJlbW92ZShcInNvcnRpbmdfYXNjXCIsXCJzb3J0aW5nX2Rlc2NcIil9KSk7dmFyIG89e0V2ZW50RGF0YTp7RXZlbnQ6bixQcm9wTmFtZTp0Lm9wdGlvbnMuUHJvcE5hbWUsQXNjOml9LERhdGFTb3VyY2VOYW1lOmUub3B0aW9ucy5kYXRhU291cmNlLm5hbWV9O3Qubm90aWZ5TGlzdGVuZXJzKHQuYXBwRGF0YUV2ZW50cy5PTl9TT1JUSU5HX1JFUVVFU1RFRCxvKX0pKX0sZS5wcm90b3R5cGUuY2xlYXJHcmlkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmZpbmRFbGVtZW50cyhcIi5ncmlkLXJvd1wiKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5yZW1vdmVFbGVtZW50KGUpfSkpO3ZhciBlPXRoaXMuYm9keS5nZXRUZW1wbGF0ZVJvdygpO3RoaXMuYm9keS5yb3dzPVtlXX0sZS5wcm90b3R5cGUuYXBwbHlDb2xTZXR0aW5ncz1mdW5jdGlvbih0LGUpe2UmJiF0aGlzLmlzRW1wdHlPYmooZSkmJighMT09PWUuVmlzaWJsZSYmKHQudmlzaWJsZT0hMSksZS5XaWR0aCYmKHQuY3NzPXtwb3NpdGlvbjpcInJlbGF0aXZlXCIsd2lkdGg6ZS5XaWR0aH0pKX0sZS5wcm90b3R5cGUuYXBwbHlDb2xPcmRlcmluZz1mdW5jdGlvbih0KXtpZighdHx8dGhpcy5pc0VtcHR5T2JqKHQpKXJldHVybiB0aGlzLm9wdGlvbnMuY29sRGVmaW5pdGlvbjt2YXIgZT1bXTtyZXR1cm4gdGhpcy5vcHRpb25zLmNvbERlZmluaXRpb24uZm9yRWFjaCgoZnVuY3Rpb24obixpKXt2YXIgbz10W24uUHJvcE5hbWVdO28mJihlW28uUG9zaXRpb25dPW4pfSkpLGUubGVuZ3RoIT09dGhpcy5vcHRpb25zLmNvbERlZmluaXRpb24ubGVuZ3RoP3RoaXMub3B0aW9ucy5jb2xEZWZpbml0aW9uOmV9LGUucHJvdG90eXBlLmJpbmREYXRhU291cmNlPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZih0JiYhKHQubGVuZ3RoPD0wKSl7dmFyIGk9dDshMT09PXRoaXMub3B0aW9ucy5kYXRhU291cmNlLmlzUmVtb3RlJiYoaT10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5nZXRQYWdlT2ZmbGluZUNCKGUucGFnZUluZGV4LHRoaXMub3B0aW9ucy5kYXRhU291cmNlLmRhdGEuaW5pdERhdGEsZSkpO3ZhciBvPW51bGw7aS5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3ZhciBpPW4uYWRkTmV3Um93KHQsITApO2kucm93Q2F0ZWdvcnk9XCJQUkVTVElORVwiLG89aX0pKSwwPT10aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGw/dGhpcy5iaW5kUGFnaW5hdG9yKGUpOih0aGlzLmluZmluaXRlU2Nyb2xsZXIuaW5pdE1ldGFEYXRhPWUsdGhpcy5pbmZpbml0ZVNjcm9sbGVyLmluaXREYXRhPWksbyYmKHRoaXMuaW5maW5pdGVTY3JvbGxlci51bm9ic2VydmUoKSx0aGlzLmluZmluaXRlU2Nyb2xsZXIub2JzZXJ2ZShvLmVsZW1lbnQpKSl9fSxlLnByb3RvdHlwZS5iaW5kUGFnaW5hdG9yPWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PW5ldyBRaSksdGhpcy5wYWdpbmF0b3Iub3B0aW9ucy5wYWdpbmdNZXRhRGF0YT10LHRoaXMucGFnaW5hdG9yLnJlbmRlcigpLGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiI1wiK3RoaXMub3B0aW9ucy5jb250YWluZXJJZCkuYXBwZW5kQ2hpbGQodGhpcy5wYWdpbmF0b3IuZWxlbWVudCl9LGUucHJvdG90eXBlLmFkZE5ld1Jvdz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsaT10aGlzLmJvZHkuZ2V0TmV4dFJvd0luZGV4KCksbz10aGlzLmJvZHkuZ2V0VGVtcGxhdGVSb3coKS5jbG9uZSgpO28ub3B0aW9ucy5pc1RlbXBsYXRlUm93PSExLG8uYWRkQ2xhc3MoXCJncmlkLXJvd1wiKSxvLmNzcz17ZGlzcGxheTpcInRhYmxlLXJvd1wifTt2YXIgcj10aGlzO28uZ2V0SW5wdXRzKCkuZm9yRWFjaCgoZnVuY3Rpb24obixzKXt2YXIgYT1uLGM9YS5pZDthLmlkPWMrXCJfXCIraTt2YXIgbD1hLm1vZGVsTmFtZSx1PXRbbF07aWYoXCJkYXRlXCI9PT1hLm9wdGlvbnMuSW5wdXRUeXBlJiZ1KXt2YXIgZD1uZXcgRGF0ZSh1KTthLnZhbD1yLnRvRGF0ZURpc3BsYXlGb3JtYXQoZCl9ZWxzZSBhIGluc3RhbmNlb2YgaW8mJihcInRydWVcIj09PXV8fFwiVHJ1ZVwiPT09dXx8ITA9PT11KT9hLnByb3AoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpOnZvaWQgMCE9PXUmJihhLnZhbD11KTshMT09PWUmJihhLmRpc2FibGVkPSExLGEucmVhZG9ubHk9ITEpLGEuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsKGZ1bmN0aW9uKHQpe28ucHJvcChcImRhdGEtaXNkaXJ0eVwiLCEwKSxcIkFEREVEXCIhPT1vLnJvd0NhdGVnb3J5JiYoby5yb3dDYXRlZ29yeT1cIlVQREFURURcIiksYS5yZW1vdmVDbGFzcyhcImlzLWludmFsaWRcIikucHJvcChcInRpdGxlXCIsXCJcIik7dmFyIGU9aGkuZ2V0SW5zdGFuY2UodC50YXJnZXQpO2UmJmUuZGlzcG9zZSgpO3ZhciBuPW8uZ2V0Um93RGF0YUV4dCgpLGk9ci5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxzPXtFdmVudERhdGE6e0V2ZW50OnQsR3JpZDpyfSxEYXRhU291cmNlTmFtZTppfSxjPXtFdmVudERhdGE6e0V2ZW50OnQsUm93Om59LERhdGFTb3VyY2VOYW1lOml9LGw9e0V2ZW50RGF0YTp7RXZlbnQ6dCxSb3c6bixGaWVsZDphfSxEYXRhU291cmNlTmFtZTppfTtvLm5vdGlmeUxpc3RlbmVycyhyLmFwcERhdGFFdmVudHMuT05fR1JJRF9VUERBVEVELHMpLG8ubm90aWZ5TGlzdGVuZXJzKHIuYXBwRGF0YUV2ZW50cy5PTl9GSUVMRF9VUERBVEVELGwpLG8ubm90aWZ5TGlzdGVuZXJzKHIuYXBwRGF0YUV2ZW50cy5PTl9ST1dfVVBEQVRFRCxjKX0pKSxhLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsKGZ1bmN0aW9uKHQpe3IuYm9keS5mb2N1c1JvdyhvKX0pKX0pKSxvLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGZ1bmN0aW9uKHQpe3IuYm9keS5mb2N1c1JvdyhvKX0pKSx0aGlzLmJvZHkuYWRkUm93KG8pO3ZhciBzPW8uZ2V0VmlzaWJsZUlucHV0cygpO3JldHVybiBzLmxlbmd0aD4wJiZzW3MubGVuZ3RoLTFdLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24odCl7cmV0dXJuIG4ub25JbnB1dEtleURvd259KSksb30sZS5wcm90b3R5cGUudG9EYXRlRGlzcGxheUZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10LmdldERhdGUoKSxuPXQuZ2V0TW9udGgoKSsxO3JldHVybiB0LmdldEZ1bGxZZWFyKCkrXCItXCIrKG48MTA/XCIwXCI6XCJcIikrbitcIi1cIisoZTwxMD9cIjBcIjpcIlwiKStlfSxlLnByb3RvdHlwZS50b1RpbWVEaXNwbGF5Rm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0SG91cnMoKSxuPXQuZ2V0TWludXRlcygpO3JldHVybihlPDEwP1wiMFwiOlwiXCIpK2UrXCI6XCIrKG48MTA/XCIwXCI6XCJcIikrbn0sZS5wcm90b3R5cGUub25JbnB1dEtleURvd249ZnVuY3Rpb24odCl7aWYoOT09PXQud2hpY2gmJiEwIT09dC5zaGlmdEtleSl7dmFyIGU9dGhpcy5ib2R5LmdldFZpc2libGVSb3dzKCk7aWYoIShlLmxlbmd0aDw9MCkpe3ZhciBuPWVbZS5sZW5ndGgtMV0uZ2V0Um93SW5kZXgoKSxpPXQudGFyZ2V0LmNsb3Nlc3QoXCJ0clwiKTtpJiZuPT09cGFyc2VJbnQoaS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd2luZGV4XCIpKSYmdGhpcy5hZGRFbXB0eVJvdygpfX19LGUucHJvdG90eXBlLmFkZEVtcHR5Um93PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5hZGROZXdSb3codGhpcy5jcmVhdGVFbXB0eVJvd0RhdGEoKSwhMSksZT10LmdldFZpc2libGVJbnB1dHMoKTtlLmxlbmd0aD4wJiZlWzBdLmZvY3VzKCksdC5yb3dDYXRlZ29yeT1cIkFEREVEXCIsdC5wcm9wKFwiZGF0YS1pc2RpcnR5XCIsXCJ0cnVlXCIpO3ZhciBuPXtFdmVudERhdGE6e0dyaWQ6dGhpcyxFdmVudDp0fSxEYXRhU291cmNlTmFtZTp0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lfTtyZXR1cm4gdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0dSSURfVVBEQVRFRCxuKSx0aGlzLmluZmluaXRlU2Nyb2xsZXIudW5vYnNlcnZlKCksdGhpcy5pbmZpbml0ZVNjcm9sbGVyLm9ic2VydmUodC5lbGVtZW50KSx0fSxlLnByb3RvdHlwZS5jcmVhdGVFbXB0eVJvd0RhdGE9ZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdGhpcy5vcHRpb25zLmNvbERlZmluaXRpb24uZm9yRWFjaCgoZnVuY3Rpb24oZSxuKXt0W2UuUHJvcE5hbWVdPXZvaWQgMH0pKSx0fSxlLnByb3RvdHlwZS5vbkhlYWRlck5leHQ9ZnVuY3Rpb24odCxlKXt0JiZ0LkV2ZW50RGF0YSYmKHRoaXMucmVzZXRTb3J0aW5nKCksdGhpcy5jbGVhckdyaWQoKSx0aGlzLnBhZ2luYXRvci5jbGVhcigpLCExIT09ZSYmKHRoaXMuZmV0Y2hHcmlkUGFnZSgxKSwhMD09PXRoaXMub3B0aW9ucy5lbmFibGVJbmZpbml0ZVNjcm9sbCYmKHRoaXMuaW5maW5pdGVTY3JvbGxlci5jdXJyZW50UGFnZT0xKSkpfSxlLnByb3RvdHlwZS5mZXRjaEdyaWRQYWdlPWZ1bmN0aW9uKHQpe2lmKCEwPT09dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UuaXNSZW1vdGUpe3ZhciBlPXRoaXMub3B0aW9ucy5kYXRhU291cmNlLnVybCh0KTtpZighZSlyZXR1cm47dmFyIG49bmV3IFppKGUsXCJHRVRcIik7dGhpcy5odHRwQ2xpZW50LmdldChuKX1lbHNle3ZhciBpPXRoaXMub3B0aW9ucy5kYXRhU291cmNlLmRhdGEuaW5pdERhdGEsbz10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5kYXRhLm1ldGFEYXRhLHI9e0RhdGFTb3VyY2VOYW1lOnRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUsRXZlbnREYXRhOntEYXRhOmksTWV0YURhdGE6bmV3IFFpKHQsby5wYWdlU2l6ZSxvLnRvdGFsUmVjb3Jkcyl9fTt0aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkQscil9fSxlLnByb3RvdHlwZS5vblNhdmVSZWNvcmQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLmJvZHkucm93cy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwiREVMRVRFRFwiPT09dC5yb3dDYXRlZ29yeXx8XCJBRERFRF9ERUxFVEVEXCI9PT10LnJvd0NhdGVnb3J5fSkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlLmJvZHkucmVtb3ZlUm93KHQpfSkpLHRoaXMuYm9keS5yb3dzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qucm93Q2F0ZWdvcnk9XCJQUkVTVElORVwiLHQuZ2V0SW5wdXRzKCkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc0tleX0pKS5mb3JFYWNoKChmdW5jdGlvbih0KXt0LmRpc2FibGVkPSEwfSkpfSkpfSxlLnByb3RvdHlwZS5vblNhdmVFcnJvcj1mdW5jdGlvbih0KXtpZih0JiZ0LkV2ZW50RGF0YSYmdC5FdmVudERhdGEuRXZlbnQucmVzcG9uc2VKU09OKWZvcih2YXIgZT10LkV2ZW50RGF0YS5FdmVudC5yZXNwb25zZUpTT04sbj10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLGk9dGhpcy5ib2R5LmdldERpcnR5Um93cygpLG89MDtvPGkubGVuZ3RoO28rKyl7dmFyIHI9ZVtuK1wiW1wiK28rXCJdXCJdO2lmKHImJnIubGVuZ3RoPjApe3ZhciBzPXJbMF0sYT1vLGM9dGhpcy5nZXRSb3dCeUluZGV4KHBhcnNlSW50KHMpKTtpZighYyljb250aW51ZTt0aGlzLm9wdGlvbnMuY29sRGVmaW5pdGlvbi5mb3JFYWNoKChmdW5jdGlvbih0LGkpe3ZhciBvPXQuUHJvcE5hbWUudG9QYXNjYWxDYXNlSnNvbigpLHI9ZVtuK1wiW1wiK2ErXCJdLlwiK29dO2lmKHImJnIubGVuZ3RoPjApe3ZhciBzPWMuZ2V0SW5wdXRzKCkuZmluZCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUubW9kZWxOYW1lPT09dC5Qcm9wTmFtZX0pKTtpZihzKXtzLmFkZENsYXNzKFwiaXMtaW52YWxpZFwiKTt2YXIgbD1cIlwiO0FycmF5LmZyb20ocikuZm9yRWFjaCgoZnVuY3Rpb24odCl7bCs9dCtcIiBcIn0pKSxzLnByb3AoXCJ0aXRsZVwiLGwpLG5ldyBoaShzWzBdLHtjdXN0b21DbGFzczpcInRvb2x0aXAtZXJyb3JcIn0pfX19KSl9fX0sZS5wcm90b3R5cGUuZ2V0Um93QnlJbmRleD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ib2R5LnJvd3MuZmluZCgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZS5nZXRSb3dJbmRleCgpPT09dH0pKX0sZS5wcm90b3R5cGUuc29ydFRhYmxlPWZ1bmN0aW9uKHQsZSl7dmFyIG4saSxvPXRoaXMscj1mdW5jdGlvbih0LGUpe3JldHVybiB0LmNlbGxzW2VdLmdldENlbGxUZXh0KCl9LHM9dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZTt0aGlzLmJvZHkucm93cy5zb3J0KChuPXRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHMuaW5kZXhPZih0KSxpPWU9IWUsZnVuY3Rpb24odCxlKXtyZXR1cm4gbz1yKGk/dDplLG4pLHM9cihpP2U6dCxuKSxvLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShzLnRvU3RyaW5nKCkpO3ZhciBvLHN9KSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIG8uYm9keS5hcHBlbmQodCwhMSl9KSk7dmFyIGE9e0V2ZW50RGF0YTp7Q3VycmVudENvbDp0LEFjdGlvbjpGaS5DT0xfU09SVElOR30sRGF0YVNvdXJjZU5hbWU6c30sYz17RXZlbnREYXRhOntDdXJyZW50Q29sOnQsQXNjOmV9LERhdGFTb3VyY2VOYW1lOnN9O3RoaXMubm90aWZ5TGlzdGVuZXJzKFdpLk9OX0NPTFNfUkVPUkRFUkVELGMpLHRoaXMubm90aWZ5TGlzdGVuZXJzKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9HUklEX0NPTkZJR19VUERBVEVELGEpfSxlLnByb3RvdHlwZS5vblNvcnRpbmdSZXF1ZXN0PWZ1bmN0aW9uKHQpe3ZhciBlPXQuRXZlbnREYXRhLkV2ZW50LnRhcmdldDtpZihcInRoXCIhPT1lLnRhZ05hbWUudG9Mb3dlckNhc2UoKSl7dmFyIG49ZS5jbG9zZXN0KFwidGhcIik7aWYoIW4pcmV0dXJuO2U9bn12YXIgaT10aGlzLmhlYWQuZ2V0R3JpZFRpdGxlc1JvdygpLmNlbGxzLmZpbmQoKGZ1bmN0aW9uKHQsbil7cmV0dXJuIHQuZWxlbWVudD09PWV9KSk7aSYmdGhpcy5zb3J0VGFibGUoaSx0LkV2ZW50RGF0YS5Bc2MpfSxlLnByb3RvdHlwZS5yZXNldFNvcnRpbmc9ZnVuY3Rpb24oKXt0aGlzLmhlYWQucm93cy5mb3JFYWNoKChmdW5jdGlvbih0LGUpe3QuaGFzQ2xhc3MoXCJzb3J0aW5nX2Rlc2NcIikmJnQucmVtb3ZlQ2xhc3MoXCJzb3J0aW5nX2FzY1wiKS5yZW1vdmVDbGFzcyhcInNvcnRpbmdfZGVzY1wiKX0pKX0sZS5wcm90b3R5cGUub25Db2xzUmVvcmRlcmVkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5ib2R5LnJvd3MuZm9yRWFjaCgoZnVuY3Rpb24odCxuKXt0LmdldElucHV0cygpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGUub25JbnB1dEtleURvd24pfSkpO3ZhciBpPXQuZ2V0VmlzaWJsZUlucHV0cygpO2kubGVuZ3RoPD0wfHxpW2kubGVuZ3RoLTFdLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIixlLm9uSW5wdXRLZXlEb3duKX0pKX0sZS5wcm90b3R5cGUuYWRkSGFuZGxlcj1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49ITEpO3ZhciBpPXtLZXk6dGhpcy5vcHRpb25zLmdyaWRJZCxFdmVudE5hbWU6dCxDYWxsYmFjazplLERhdGFTb3VyY2VOYW1lOnRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUsVmVyaWZ5RGF0YVNvdXJjZU5hbWU6bn07VWkuU3Vic2NyaWJlKGkpfSxlLnByb3RvdHlwZS5yZW1vdmVIYW5kbGVyPWZ1bmN0aW9uKHQpe3ZhciBlPXtLZXk6dGhpcy5vcHRpb25zLmdyaWRJZCxFdmVudE5hbWU6dCxEYXRhU291cmNlTmFtZTp0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lfTtVaS5VbnN1YnNjcmliZShlKX0sZS5wcm90b3R5cGUub25GZXRjaERhdGE9ZnVuY3Rpb24odCl7ITE9PT10aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGwmJnRoaXMuY2xlYXJHcmlkKCk7dmFyIGU9dC5FdmVudERhdGEuTWV0YURhdGE7ZSYmdGhpcy5iaW5kRGF0YVNvdXJjZSh0LkV2ZW50RGF0YS5EYXRhLG5ldyBRaShlLnBhZ2VJbmRleCxlLnBhZ2VTaXplLGUudG90YWxSZWNvcmRzKSl9LGUucHJvdG90eXBlLm9uRmV0Y2hEYXRhRXJyb3I9ZnVuY3Rpb24odCl7fSxlLnByb3RvdHlwZS5yZWdpc3RlckNhbGxiYWNrcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3ZvaWQgMD09PXQmJih0PSEwKSx0aGlzLm9wdGlvbnMuZ3JpZElkLHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUsdGhpcy5hZGRIYW5kbGVyKFdpLkdSSURfREFUQSwoZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5ib2R5LmdldERpcnR5UmVjb3JkcygpfSkpLHRoaXMuYWRkSGFuZGxlcihXaS5PTl9BRERfUkVDT1JELChmdW5jdGlvbih0LG4pe3JldHVybiBlLm9uSGVhZGVyTmV4dChuLCExKX0pKSx0aGlzLmFkZEhhbmRsZXIoV2kuT05fRkVUQ0hfUkVDT1JELChmdW5jdGlvbih0LG4pe3JldHVybiBlLm9uSGVhZGVyTmV4dChuLCEwKX0pKSx0aGlzLmFkZEhhbmRsZXIoV2kuT05fU0FWRV9SRUNPUkQsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUub25TYXZlUmVjb3JkKG4pfSkpLHRoaXMuYWRkSGFuZGxlcihXaS5PTl9TQVZFX0VSUk9SLChmdW5jdGlvbih0LG4pe3JldHVybiBlLm9uU2F2ZUVycm9yKG4pfSkpLHRoaXMuYWRkSGFuZGxlcihXaS5PTl9TT1JUSU5HX1JFUVVFU1RFRCwoZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5vblNvcnRpbmdSZXF1ZXN0KG4pfSksdCksdGhpcy5hZGRIYW5kbGVyKFdpLk9OX0NPTFNfUkVPUkRFUkVELChmdW5jdGlvbih0LG4pe3JldHVybiBlLm9uQ29sc1Jlb3JkZXJlZChuKX0pLHQpLHRoaXMuYWRkSGFuZGxlcihXaS5PTl9HUklEX0NPTkZJR19VUERBVEVELChmdW5jdGlvbih0LG4pe3JldHVybiBlLm9uR3JpZENvbmZpZ3VyYXRpb25DaGFuZ2VkKG4pfSksdCksdGhpcy5hZGRIYW5kbGVyKFdpLk9OX0dSSURfREFUQV9CT1VORCwoZnVuY3Rpb24odCxuKXtyZXR1cm4gZS5vbkdyaWREYXRhQm91bmQobil9KSx0KSx0aGlzLmFkZEhhbmRsZXIoV2kuT05fRkVUQ0hfR1JJRF9SRUNPUkQsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUub25GZXRjaERhdGEobil9KSx0KSx0aGlzLmFkZEhhbmRsZXIoV2kuT05fRkVUQ0hfR1JJRF9SRUNPUkRfRVJST1IsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUub25GZXRjaERhdGFFcnJvcihuKX0pLHQpfSxlLnByb3RvdHlwZS5jb25maWd1cmFibGVHcmlkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHMsbj10aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLGk9J1xcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbCBmYWRlXCIgaWQ9XCJzdGF0aWNCYWNrZHJvcF8nLmNvbmNhdChuLCdcIiBkYXRhLWJzLWJhY2tkcm9wPVwic3RhdGljXCIgZGF0YS1icy1rZXlib2FyZD1cImZhbHNlXCIgdGFiaW5kZXg9XCItMVwiXFxuICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwic3RhdGljQmFja2Ryb3BMYWJlbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1zY3JvbGxhYmxlXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIiBpZD1cInN0YXRpY0JhY2tkcm9wTGFiZWxfJykuY29uY2F0KG4sJ1wiPkNvbmZpZ3VyZSBjb2x1bW5zPC9oNT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cImxpc3QtZ3JvdXAgZ3JpZC1jb25maWctY29sc1wiPlxcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiPk9rPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+Jyksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO28uY2xhc3NMaXN0LmFkZChcInNldHRpbmdzLW1lbnVcIixcImdyaWQtY29uZmlnLXRlbXBsYXRlXCIpLG8uaW5uZXJIVE1MPWk7dmFyIHI9dGhpcy5maW5kQnlJZCh0aGlzLm9wdGlvbnMuY29udGFpbmVySWQpO3ImJnIuYXBwZW5kKG8pO3ZhciBzPW8ucXVlcnlTZWxlY3RvcihcIi5ncmlkLWNvbmZpZy1jb2xzXCIpO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXt2YXIgbz1lLm9wdGlvbnMuUHJvcE5hbWU7aWYobyl7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO3IuY2xhc3NMaXN0LmFkZChcImxpc3QtZ3JvdXAtaXRlbVwiKTt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7YS50eXBlPVwiY2hlY2tib3hcIixhLnZhbHVlPVwiXCIsYS5jbGFzc0xpc3QuYWRkKFwiZm9ybS1jaGVjay1pbnB1dFwiLFwibWUtMVwiKTt2YXIgYz1cImNvbF9jb25maWdfY2hrX1wiK287YS5zZXRBdHRyaWJ1dGUoXCJpZFwiLGMpLGEuc2V0QXR0cmlidXRlKFwiZGF0YS1jb25maWctcHJvcG5hbWVcIixvKSwhMD09PWUudmlzaWJsZSYmKGEuY2hlY2tlZD0hMCk7dmFyIGw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO2wuc2V0QXR0cmlidXRlKFwiZm9yXCIsYyksbC50ZXh0Q29udGVudD1lLmdldFRleHQoKSxyLmFwcGVuZENoaWxkKGEpLHIuYXBwZW5kQ2hpbGQobCkscy5hcHBlbmRDaGlsZChyKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbihlKXt2YXIgaT1lLnRhcmdldCxvPWkuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maWctcHJvcG5hbWVcIik7aWYobyl7dmFyIHI9dC5oZWFkLmdldEdyaWRUaXRsZXNSb3coKSxzPXIuY2VsbHMuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQub3B0aW9ucy5Qcm9wTmFtZT09PW99KSk7aWYocyl7dmFyIGE9dC5ib2R5LnJvd3MsYz1HbyhHbyhbXSxhLCEwKSxbcl0sITEpLGw9ci5jZWxscy5pbmRleE9mKHMpO2lmKCEobDwwKSl7Yy5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT10LmNlbGxzW2xdO2UmJihpLmNoZWNrZWQ/ZS52aXNpYmxlPSEwOmUudmlzaWJsZT0hMSl9KSksdC5ub3RpZnlMaXN0ZW5lcnMoV2kuT05fQ09MU19SRU9SREVSRUQse0RhdGFTb3VyY2VOYW1lOm4sRXZlbnREYXRhOntFdmVudDplfX0pO3ZhciB1PXtFdmVudERhdGE6e0V2ZW50OmUsQWN0aW9uOkZpLkNPTF9TSE9XX0hJREV9LERhdGFTb3VyY2VOYW1lOm59O3Qubm90aWZ5TGlzdGVuZXJzKFdpLk9OX0dSSURfQ09ORklHX1VQREFURUQsdSl9fX19KSl9fSkpfSxlLnByb3RvdHlwZS5yZXNpemFibGVHcmlkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxlPXRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHM7dGhpcy5jc3M9e30sdGhpcy5zZXRDc3MoXCJvdmVyZmxvd1wiLFwiaGlkZGVuXCIpO2Zvcih2YXIgbj10aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0LGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG89cyhuKTtlW2ldLmVsZW1lbnQuYXBwZW5kKG8pLGVbaV0uc2V0Q3NzKFwicG9zaXRpb25cIixcInJlbGF0aXZlXCIpLHIobyxlW2ldLHRoaXMpfWZ1bmN0aW9uIHIoZSxuLGkpe3ZhciBvLHIscyxjO2UuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLChmdW5jdGlvbih0KXtjPWkuZWxlbWVudC5vZmZzZXRXaWR0aCxyPW4uZWxlbWVudCxvPXQucGFnZVg7dmFyIGU9ZnVuY3Rpb24odCl7aWYoXCJib3JkZXItYm94XCI9PWEodCxcImJveC1zaXppbmdcIikpcmV0dXJuIDA7dmFyIGU9YSh0LFwicGFkZGluZy1sZWZ0XCIpLG49YSh0LFwicGFkZGluZy1yaWdodFwiKTtyZXR1cm4gcGFyc2VJbnQoZSkrcGFyc2VJbnQobil9KHIpO3M9ci5vZmZzZXRXaWR0aC1lfSkpLGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLChmdW5jdGlvbih0KXt0aGlzLnN0eWxlLmJvcmRlclJpZ2h0PVwiMnB4IHNvbGlkICMwMDAwZmZcIn0pKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLChmdW5jdGlvbih0KXt0aGlzLnN0eWxlLmJvcmRlclJpZ2h0PVwiXCJ9KSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLChmdW5jdGlvbih0KXtpZihyKXt2YXIgZT10LnBhZ2VYLW87ci5zdHlsZS53aWR0aD1zK2UrXCJweFwiLGkuZWxlbWVudC5zdHlsZS53aWR0aD1jK2UrXCJweFwifX0pKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLChmdW5jdGlvbihlKXtpZihyKXt2YXIgbj17RXZlbnREYXRhOntFdmVudDplLEN1cnJlbnRDb2w6cixBY3Rpb246RmkuQ09MX1JFU0laRUR9LERhdGFTb3VyY2VOYW1lOnR9O2kubm90aWZ5TGlzdGVuZXJzKFdpLk9OX0dSSURfQ09ORklHX1VQREFURUQsbil9cj12b2lkIDAsbz12b2lkIDAscz12b2lkIDB9KSl9ZnVuY3Rpb24gcyh0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlLnN0eWxlLnRvcD1cIjBcIixlLnN0eWxlLnJpZ2h0PVwiMFwiLGUuc3R5bGUud2lkdGg9XCI1cHhcIixlLnN0eWxlLnBvc2l0aW9uPVwiYWJzb2x1dGVcIixlLnN0eWxlLmN1cnNvcj1cImNvbC1yZXNpemVcIixlLnN0eWxlLnVzZXJTZWxlY3Q9XCJub25lXCIsZS5zdHlsZS5oZWlnaHQ9dCtcInB4XCIsZX1mdW5jdGlvbiBhKHQsZSl7cmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQsbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShlKX19LGUucHJvdG90eXBlLmVuYWJsZUNvbHVtblJlb3JkZXJpbmc9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxuPXRoaXMsaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuZHJhZ2dhYmxlPSEwLGkuY2xhc3NMaXN0LmFkZChcImdyaWQtaGVhZGVyXCIpO3ZhciBvLHI9bi5oZWFkLmdldEdyaWRUaXRsZXNSb3coKSxzPXIuY2VsbHM7cy5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgbj1lLmNoaWxkcmVuTm9kZXMoKTtpZigwPT09bi5sZW5ndGgpe3ZhciBvPWUuZ2V0VGV4dCgpO2Uuc2V0VGV4dChcIlwiKTt2YXIgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3IudGV4dENvbnRlbnQ9byxlLmFwcGVuZENoaWxkKHIpLHQud3JhcChpLHIpfWVsc2UgdC53cmFwKGksbil9KSksdGhpcy5maW5kRWxlbWVudHMoXCIuZ3JpZC1oZWFkZXJcIikuZm9yRWFjaCgoZnVuY3Rpb24oaSl7dC5hZGREcmFnSGFuZGxlcnMoaSx7ZHJhZ1N0YXJ0OmZ1bmN0aW9uKHQpe3RoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ3JpZC1oZWFkZXJcIik/KG89dGhpcyx0aGlzLnN0eWxlLm9wYWNpdHk9XCIwLjVcIik6bz12b2lkIDB9LGRyYWdMZWF2ZTpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksbyYmdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJncmlkLWhlYWRlclwiKSYmdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwib3ZlclwiKX0sZHJhZ0VudGVyOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSxvJiZ0aGlzLmNsYXNzTGlzdC5jb250YWlucyhcImdyaWQtaGVhZGVyXCIpJiZ0aGlzLmNsYXNzTGlzdC5hZGQoXCJvdmVyXCIpfSxkcmFnT3ZlcjpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksbyYmdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoXCJncmlkLWhlYWRlclwiKSYmdGhpcy5jbGFzc0xpc3QuYWRkKFwib3ZlclwiKX0sZHJhZ0VuZDpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksbyYmKHRoaXMuc3R5bGUub3BhY2l0eT1cIjFcIil9LGRyb3A6ZnVuY3Rpb24odCl7aWYodC5wcmV2ZW50RGVmYXVsdCgpLG8mJih0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJvdmVyXCIpLHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ3JpZC1oZWFkZXJcIikmJm8hPT10aGlzKSl7dmFyIGk9dGhpcy5jbG9zZXN0KFwidGhcIik7aWYoaSl7dmFyIGM9cy5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50PT09aX0pKTtpZihjKXt2YXIgbD1zLmluZGV4T2YoYyksdT1vLmNsb3Nlc3QoXCJ0aFwiKTtpZih1KXt2YXIgZD1zLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVsZW1lbnQ9PT11fSkpO2lmKGMpe3ZhciBwPXMuaW5kZXhPZihkKTtpZihsIT1wKXthKHIscyxwLGwpO3ZhciBoPW4uYm9keS5yb3dzO3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7Zm9yKHZhciBpPTA7aTxoLmxlbmd0aDtpKyspe3ZhciBvPWhbaV0scj1vLmNlbGxzO2lmKGw9PXApcmV0dXJuO2EobyxyLHAsbCl9bi5ub3RpZnlMaXN0ZW5lcnMoV2kuT05fQ09MU19SRU9SREVSRUQse0RhdGFTb3VyY2VOYW1lOmUsRXZlbnREYXRhOntFdmVudDp0fX0pO3ZhciBzPXtFdmVudERhdGE6e0V2ZW50OnQsQWN0aW9uOkZpLkNPTF9SRU9SREVSfSxEYXRhU291cmNlTmFtZTplfTtuLm5vdGlmeUxpc3RlbmVycyhXaS5PTl9HUklEX0NPTkZJR19VUERBVEVELHMpfSksNTAwKX19fX19fX19KX0pKTt2YXIgYT1mdW5jdGlvbih0LGUsbixpKXtpZihuIT1pKXt2YXIgbz1kLmx0cjtuPmkmJihvPWQucnRsKSxvPT09ZC5ydGw/YyhlLG4saSk6bChlLG4saSksdC5jZWxscz1bXSx0LmFkZENlbGxzKGUpfX0sYz1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciBpPWU7aT5uO2ktLSl1KHQsaSxpLTEpfSxsPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIGk9ZTtpPG47aSsrKXUodCxpLGkrMSl9LHU9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXRbZV07dFtlXT10W25dLHRbbl09aX0sZD17cnRsOlwiUklHSFQtVE8tTEVGVFwiLGx0cjpcIkxFRlQtVE8tUklHSFRcIn19LGUucHJvdG90eXBlLm9uR3JpZENvbmZpZ3VyYXRpb25DaGFuZ2VkPWZ1bmN0aW9uKHQpe3QuRXZlbnREYXRhLkFjdGlvbjt2YXIgZT10aGlzLm9wdGlvbnMuZ3JpZElkLG49dGhpcy5oZWFkLmdldEdyaWRUaXRsZXNSb3coKS5jZWxscyxpPXt9O24uZm9yRWFjaCgoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm9wdGlvbnMuUHJvcE5hbWU7aWYobil7dmFyIG89ITA7dC5oYXNDbGFzcyhcInNvcnRpbmdfZGVzY1wiKSYmKG89ITEpO3ZhciByPXtXaWR0aDp0LmdldENzcyhcIndpZHRoXCIpLFZpc2libGU6dC52aXNpYmxlLEFzY2VuZGluZzpvLFBvc2l0aW9uOmV9O2lbbl09cn19KSksR2kuZGVsZXRlKGUpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7R2kuc2V0SlNPTihlLGkse2RheXM6MzAsc2VjdXJlOiEwLFNhbWVTaXRlOlwic3RyaWN0XCJ9KX0pLDUwMCl9LGUucHJvdG90eXBlLm9uR3JpZERhdGFCb3VuZD1mdW5jdGlvbih0KXt0aGlzLmNvbmZpZ3VyYWJsZUdyaWQoKSx0aGlzLmVuYWJsZUNvbHVtblJlb3JkZXJpbmcoKSx0aGlzLnJlc2l6YWJsZUdyaWQoKX0sZX0oJGkpLFdvPWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdD1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fHtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSYmZnVuY3Rpb24odCxlKXt0Ll9fcHJvdG9fXz1lfXx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4gaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmKHRbbl09ZVtuXSl9LHQoZSxuKX07cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgbiYmbnVsbCE9PW4pdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKG4pK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gaSgpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooaS5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IGkpfX0oKSxVbz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBuPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBuLm9wdGlvbnM9ZSxuLnJlbmRlcigpLG59cmV0dXJuIFdvKGUsdCksZS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50PWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMub3B0aW9ucy5FbGVtZW50SWQpfSxlfShlbyl9KSgpLGl9KSgpfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZbk5rWVhSaGRHRmliR1V1YW5NaUxDSnRZWEJ3YVc1bmN5STZJanREUVVGQkxGTkJRVEpEUVN4RlFVRk5ReXhIUVVNeFFpeHBRa0ZCV2tNc1UwRkJNRU1zYVVKQlFWaERMRTlCUTNoRFFTeFBRVUZQUkN4UlFVRlZSQ3hKUVVOUkxHMUNRVUZZUnl4UlFVRjVRa0VzVDBGQlQwTXNTVUZET1VORUxFOUJRVThzUjBGQlNVZ3NSMEZEWlN4cFFrRkJXa01zVVVGRFpFRXNVVUZCY1VJc1dVRkJTVVFzU1VGRmVrSkVMRVZCUVd0Q0xGbEJRVWxETEVsQlVuaENMRU5CVTBkTExFMUJRVTBzVjBGRFZDdzBRa05IUTBNc1QwRkJUME1zVlVGQlZVTXNXVUZCWXl4WFFVTTFRaXhQUVVGUFF5eExRVUZMUXl4UlFVRlJMSFZDUVVGMVFpeFRRVUZUUXl4RlFVRk5ReXhIUVVOMFJDeFBRVUZwUWl4SlFVRldRU3hGUVVGalJDeEZRVUZMUlN4alFVRm5Ra1lzUlVGQlMwY3NhVUpCUXpsRFNpeFJRVUZSTEU5QlFWRXNTMEZSZWtKS0xFOUJRVTlETEZWQlFWVlJMR0ZCUVdVc1YwRkROVUlzVDBGQlQwNHNTMEZCUzBNc1VVRkJVU3gxUWtGQmRVSXNVMEZCVTBNc1JVRkJUVU1zUjBGRGRFUXNUMEZCYVVJc1NVRkJWa0VzUlVGQlkwUXNSVUZCUzBjc1kwRkJaMEpJTEVWQlFVdEZMR2xDUVVNNVEwZ3NVVUZCVVN4UFFVRlJMRXRCUjNwQ1NpeFBRVUZQUXl4VlFVRlZVeXhwUWtGQmJVSXNWMEZEYUVNc1QwRkJUMUFzUzBGQlMwTXNVVUZCVVN4MVFrRkJkVUlzVTBGQlUwTXNSVUZCVFVNc1IwRkRkRVFzVDBGQmFVSXNTVUZCVmtFc1JVRkJZMFFzUlVGQlMwY3NZMEZCWjBKSUxFdEJRM3BEUkN4UlFVRlJMRTlCUVZFc1MwRkhjRUpLTEU5QlFVOURMRlZCUVZWVkxGTkJRM0JDV0N4UFFVRlBReXhWUVVGVlZTeFBRVUZUTEZkQlEzaENMRWxCUVVsRExFVkJRVTlETEZWQlExZ3NUMEZCVDFZc1MwRkJTME1zVVVGQlVTeFpRVUZaTEZOQlFWTlZMRVZCUVU5RExFZEJRemxETEZsQlFUaENMRWxCUVdoQ1NDeEZRVUZMUnl4SFFVTm1TQ3hGUVVGTFJ5eEhRVU5NUkN4VFEzcERUa1VzUlVGQk1rSXNSMEZITDBJc1UwRkJVME1zUlVGQmIwSkRMRWRCUlRWQ0xFbEJRVWxETEVWQlFXVklMRVZCUVhsQ1JTeEhRVU0xUXl4UlFVRnhRa1VzU1VGQmFrSkVMRVZCUTBnc1QwRkJUMEVzUlVGQllYaENMRkZCUjNKQ0xFbEJRVWxETEVWQlFWTnZRaXhGUVVGNVFrVXNSMEZCV1N4RFFVZHFSSFpDTEZGQlFWTXNTVUZQVml4UFFVaEJNRUlzUlVGQmIwSklMRWRCUVZWMFFpeEZRVUZSUVN4RlFVRlBSQ3hSUVVGVGMwSXNSMEZITDBOeVFpeEZRVUZQUkN4UlEzQkNabk5DTEVWQlFXOUNTeXhGUVVGSkxFTkJRVU16UWl4RlFVRlRORUlzUzBGRGFrTXNTVUZCU1N4SlFVRkpReXhMUVVGUFJDeEZRVU5ZVGl4RlFVRnZRbEVzUlVGQlJVWXNSVUZCV1VNc1MwRkJVMUFzUlVGQmIwSlJMRVZCUVVVNVFpeEZRVUZUTmtJc1NVRkROVVZGTEU5QlFVOURMR1ZCUVdWb1F5eEZRVUZUTmtJc1JVRkJTeXhEUVVGRlNTeFpRVUZaTEVWQlFVMURMRWxCUVV0T0xFVkJRVmRETEUxRFNqTkZVQ3hGUVVGdlFsRXNSVUZCU1N4RFFVRkRTeXhGUVVGTFF5eEpRVUZWVEN4UFFVRlBla0lzVlVGQlZTdENMR1ZCUVdWRExFdEJRVXRJTEVWQlFVdERMRWREUTJ4R1pDeEZRVUZ2UW1sQ0xFVkJRVXQyUXl4SlFVTklMRzlDUVVGWWQwTXNVVUZCTUVKQkxFOUJRVTlETEdGQlF6RkRWaXhQUVVGUFF5eGxRVUZsYUVNc1JVRkJVM2RETEU5QlFVOURMRmxCUVdFc1EwRkJSVU1zVFVGQlR5eFhRVVUzUkZnc1QwRkJUME1zWlVGQlpXaERMRVZCUVZNc1lVRkJZeXhEUVVGRk1FTXNUMEZCVHl4NWNFUkRUR2hFTEVsQlFVa3NSVUZCVFN4TlFVTk9ReXhGUVVGVExGTkJRMVJETEVWQlFWRXNVVUZEVWtNc1JVRkJUeXhQUVVOUVF5eEZRVUZQTEU5QlExQkRMRVZCUVdsQ0xFTkJRVU1zUlVGQlMwb3NSVUZCVVVNc1JVRkJUME1zUjBGRGRFTkhMRVZCUVZFc1VVRkRVa01zUlVGQlRTeE5RVU5PUXl4RlFVRnJRaXhyUWtGRGJFSkRMRVZCUVZjc1YwRkRXRU1zUlVGQlV5eFRRVU5VUXl4RlFVRlpMRmxCUTFwRExFVkJRVzFEVUN4RlFVRmxVU3hSUVVGUExGTkJRVlZETEVWQlFVdERMRWRCUTJwR0xFOUJRVTlFTEVWQlFVbEZMRTlCUVU4c1EwRkJRMFFzUlVGQldTeEpRVUZOVkN4RlFVRlBVeXhGUVVGWkxFbEJRVTFTTEUxQlF6ZEVMRWxCUTFFc1JVRkJNRUlzUjBGQlIxTXNUMEZCVDFnc1JVRkJaMElzUTBGQlEwUXNTVUZCVDFNc1VVRkJUeXhUUVVGVlF5eEZRVUZMUXl4SFFVTXpSaXhQUVVGUFJDeEZRVUZKUlN4UFFVRlBMRU5CUVVORUxFVkJRVmRCTEVWQlFWa3NTVUZCVFZRc1JVRkJUMU1zUlVGQldTeEpRVUZOVWl4TlFVTjRSU3hKUVVWUlZTeEZRVUZoTEdGQlEySkRMRVZCUVU4c1QwRkRVRU1zUlVGQldTeFpRVVZhUXl4RlFVRmhMR0ZCUTJKRExFVkJRVThzVDBGRFVFTXNSVUZCV1N4WlFVVmFReXhGUVVGakxHTkJRMlJETEVWQlFWRXNVVUZEVWtNc1JVRkJZU3hoUVVOaVF5eEZRVUZwUWl4RFFVRkRWQ3hGUVVGWlF5eEZRVUZOUXl4RlFVRlhReXhGUVVGWlF5eEZRVUZOUXl4RlFVRlhReXhGUVVGaFF5eEZRVUZQUXl4SFF6bENOVVlzVTBGQlUwVXNSVUZCV1VNc1IwRkRiRU1zVDBGQlQwRXNSMEZCVjBFc1JVRkJVVU1zVlVGQldTeEpRVUZKTTBRc1kwRkJaMElzUzBORU4wTXNVMEZCVXpSRUxFVkJRVlZETEVkQlEyaERMRWRCUVZrc1RVRkJVa0VzUlVGRFJpeFBRVUZQUXl4UFFVZFVMRWRCUVhkQ0xHOUNRVUZ3UWtRc1JVRkJTMFVzVjBGQmEwTXNRMEZEZWtNc1NVRkJTVU1zUlVGQlowSklMRVZCUVV0SExHTkJRM3BDTEU5QlFVOUJMRWRCUVdkQ1FTeEZRVUZqUXl4aFFVRjNRa2dzVDBGSEwwUXNUMEZCVDBRc1JVTlNWQ3hUUVVGVFN5eEZRVUZWVEN4SFFVVnFRaXhQUVVGUFFTeGhRVVJWUkN4RlFVRlZReXhIUVVGTlRTeFRRVU5KVGl4aFFVRm5RazBzVVVGSGRrUXNVMEZCVTBNc1JVRkJZMUFzUjBGRmNrSXNUMEZCVDBFc1lVRkVWVVFzUlVGQlZVTXNSMEZCVFZFc1lVRkRTVklzWVVGQlowSlJMRmxCUjNaRUxGTkJRVk5ETEVWQlFXRlVMRWRCUlhCQ0xFMUJRVEJDTEc5Q1FVRm1WU3hoUVV0S1ZpeGhRVVJWUkN4RlFVRlZReXhIUVVGTlZTeFpRVU5KVml4aFFVRm5RbFVzV1VONVJIWkVMRk5CUTBWRExFdEJRVTBzWTBGRFRrTXNVMEZCVXl4RlFVTlVReXhOUVVGUExGRkJRMUJETEVkQk5VVkdMRk5CUVhGQ1F5eEhRVU51UWl4SlFVRkpReXhGUVVGUlJDeEZRVUZMUXl4TlFVTnFRakZFTEU5QlFVOHlSQ3hMUVVGTFJDeEZRVUZOUlN4VlFVRlZReXhUUVVGUkxGTkJRVlZTTEVkQlF6VkRMRWxCUVVsVExFVkJRVkZLTEVWQlFVMUxMRTlCUVU5V0xFbEJRVk1zUjBGRE9VSlhMRVZCUVdGT0xFVkJRVTFOTEZkQlFWZFlMRWxCUVZNc1IwRkRka05rTEVWQlFWVnRRaXhGUVVGTlJTeFRRVUZUVUN4SFFVVjRRa29zUlVGQlkxWXNTVUZCWVVRc1JVRkJXVU1zUzBGUE5VTjJReXhQUVVGUGFVVXNUMEZCVHpGQ0xFVkJRVkYxUWl4TlFVRlBRU3hIUVVNM1FqbEVMRTlCUVU4eVJDeExRVUZMU3l4SFFVRlpTQ3hUUVVGUkxGTkJRVlZTTEVkQlEzaERMRWxCUVVreFF5eEZRVUZSY1VRc1JVRkJWMWdzU1VGRlZDeEpRVUZXTVVNc1JVRkRSalJDTEVWQlFWRXlRaXhuUWtGQlowSmlMRWRCUlhoQ1pDeEZRVUZSTkVJc1lVRkJZV1FzUjBGQlowSXNTVUZCVmpGRExFVkJRV2xDTEVkQlFVdEJMRmRCZDBSMlJIbEVMRTlCYkVSR0xGTkJRV2RDUXl4SFFVTmtMRWxCUVVsWUxFVkJRVkZYTEVWQlFVMVlMRTFCUTJSWkxFVkJRV2RDTEVOQlEyeENha1FzVDBGQlVTeERRVU5PYTBRc1UwRkJWV0lzUlVGQlRXTXNVVUZCVVVNc1UwRkRlRUl6UkN4TFFVRk5MRWxCUTA0MFJDeEpRVUZMTEVsQlEweERMRTlCUVZFc1MwRkZWa01zVFVGQlR5eERRVU5NVEN4VFFVRlZMRmxCUlZwcVJDeFZRVUZYTEVsQlUySXNUMEZRUVhSQ0xFOUJRVTlwUlN4UFFVRlBVQ3hGUVVGTlJTeFRRVUZUZGtNc1QwRkJUM2xETEUxQlFVOVJMRVZCUVdOcVJDeFJRVU42UkhGRExFVkJRVTFMTEU5QlFWTlBMRVZCUlZoYUxFVkJRVTFGTEZOQlFWTm5RaXhQUVVOcVFqVkZMRTlCUVU5cFJTeFBRVUZQVUN4RlFVRk5SU3hUUVVGVFowSXNUVUZCVFdRc1RVRkJUMUVzUlVGQlkwMHNUMEZIYmtRc1YwRkRURFZGTEU5QlFVOHlSQ3hMUVVGTFJDeEZRVUZOUlN4VlFVRlZReXhUUVVGUkxGTkJRVlZTTEVkQlF6VkRMRWxCUVVsa0xFVkJRVlZ0UWl4RlFVRk5SU3hUUVVGVFVDeEhRVU42UWxjc1JVRkJZVTRzUlVGQlRVMHNWMEZCVjFnc1NVRkJVeXhIUVVkMlExTXNSVUZHYTBJNVJDeFBRVUZQTWtRc1MwRkJTMFFzUlVGQlRVc3NUMEZCVDNwRUxHVkJRV1VyUXl4SFFVRlJTeXhGUVVGTlN5eFBRVUZQVml4SFFVRlJhVUlzUlVGQlkycENMRWxCUlRkRk4wSXNVVUZCVHl4VFFVRlZjME1zUlVGQlQyVXNSMEZGYkVRc1QwRkVRV1lzUlVGQlRXVXNSMEZCV1N4SFFVTllaaXhKUVVOT0xFbEJSVVZpTEVWQlFXTldMRWxCUVdGRUxFVkJRVmxETEV0QlNUVkRka01zVDBGQlQybEZMRTlCUVU4eFFpeEZRVUZSZFVJc1RVRkJUMEVzUjBGRE4wSTVSQ3hQUVVGUE1rUXNTMEZCUzBzc1IwRkJXVWdzVTBGQlVTeFRRVUZWYVVJc1IwRkRlRU4yUXl4RlFVRlJNa0lzWjBKQlFXZENXU3haUVdFNVFrTXNVMEZCVlN4RFFVRkRMR3RDUTJwR1JTeFRRVUZUUXl4RlFVRnBRblJFTEVkQlEzWkRMRTlCUVU5QkxFVkJRVlYxUkN4TlFVRk5MRXRCUVVzc1IwTkdka0lzU1VGQlNTeEZRVUZOUXl4TFFVRkxReXhKUVVOWUxFVkJRVTFFTEV0QlFVdEZMRWxCUTFoRExFVkJRVkZJTEV0QlFVdEhMRTFEUVZRc1UwRkJVME1zUlVGQmMwSXZReXhGUVVGVFowUXNVVUZEYUVNc1NVRkJha0pCTEVsQlEwWkJMRWRCUVdVc1IwRkhha0lzU1VGQlNVTXNSVUZCVDJwRUxFVkJRVkVyUXl4M1FrRkRaa2NzUlVGQlV5eEZRVU5VUXl4RlFVRlRMRVZCUldJc1IwRkJTWHBETEVWQlFXTldMRWxCUVZsblJDeEZRVUZqTEVOQlF6RkRMRWxCUVVsSkxFVkJRV1Z3UkN4RlFVRlJiMFFzWVVGRGRrSkRMRVZCUVdOeVJDeEZRVUZSY1VRc1dVRkhkRUpCTEVWQlFXTXNTVUZEYUVKSUxFVkJRVk5LTEVWQlFVMUhMRVZCUVV0TExFOUJRVk5FTEVkQlFXVXNSMEZITVVORUxFVkJRV1VzU1VGRGFrSkVMRVZCUVZOTUxFVkJRVTFITEVWQlFVdE5MRkZCUVZWSUxFZEJRV2RDTEVkQlNXeEVMRTFCUVU4c1EwRkRURVVzVFVGQlQwd3NSVUZCUzBzc1RVRkJVVW9zUlVGRGNFSkxMRTlCUVZGT0xFVkJRVXROTEU5QlFWTktMRVZCUTNSQ2FFSXNTVUZCUzJNc1JVRkJTMlFzU1VGQlRXZENMRVZCUTJoQ04wVXNUVUZCVHpKRkxFVkJRVXN6UlN4TlFVRlJORVVzUlVGRGNFSTNSU3hQUVVGUk5FVXNSVUZCU3pWRkxFOUJRVk00UlN4RlFVTjBRalZGTEV0QlFVMHdSU3hGUVVGTE1VVXNTMEZCVHpKRkxFVkJRMnhDVFN4RlFVRkhVQ3hGUVVGTE1VVXNTMEZCVHpKRkxFVkJRMlpQTEVWQlFVZFNMRVZCUVV0a0xFbEJRVTFuUWl4SFF6bENTQ3hUUVVGVFR5eEZRVUZqTVVRc1IwRkRjRU1zU1VGQlNUSkVMRVZCUVdGYUxFVkJRWE5DTDBNc1IwRkhia056UkN4RlFVRlJkRVFzUlVGQlVYRkVMRmxCUTJoQ1JTeEZRVUZUZGtRc1JVRkJVVzlFTEdGQlZYSkNMRTlCVWtsVUxFdEJRVXRwUWl4SlFVRkpSQ3hGUVVGWFRDeE5RVUZSUVN4SlFVRlZMRWxCUTNoRFFTeEZRVUZSU3l4RlFVRlhUQ3hQUVVkcVFsZ3NTMEZCUzJsQ0xFbEJRVWxFTEVWQlFWZEtMRTlCUVZOQkxFbEJRVmNzU1VGRE1VTkJMRVZCUVZOSkxFVkJRVmRLTEZGQlIyWXNRMEZEVEVNc1JVRkJSM2hFTEVWQlFWRTJSQ3hYUVVOWVNpeEZRVUZIZWtRc1JVRkJVVGhFTEZWQlExaFNMRTFCUVU5QkxFVkJRMUJETEU5QlFWRkJMRWREY2tKSExGTkJRVk5STEVWQlFWTkRMRVZCUVZGRExFZEJRM1pETEVsQlFVbERMRVZCUVZkRUxFVkJRVTFGTEdGQlFXVkdMRVZCUVUxRkxHTkJSVEZETEVkQlFVbElMRVZCUVU5RUxGTkJRVk5GTEVkQlEyeENMRTlCUVU4c1JVRkZTaXhIUVVGSlF5eEhRVUZaZEVRc1JVRkJZWE5FTEVkQlFWY3NRMEZEZWtNc1NVRkJTVVVzUlVGQlQwZ3NSVUZGV0N4RlFVRkhMRU5CUTBRc1IwRkJTVWNzUjBGQlVVb3NSVUZCVDBzc1YwRkJWMFFzUjBGRE5VSXNUMEZCVHl4RlFVbFVRU3hGUVVGUFFTeEZRVUZMUlN4WlFVRmpSaXhGUVVGTFJ5eFhRVU40UWtnc1IwRkpZaXhQUVVGUExFVkRjRUpOTEZOQlFWTXNSVUZCYVVKd1JTeEhRVU4yUXl4UFFVRlBSU3hGUVVGVlJpeEhRVUZUZDBVc2FVSkJRV2xDZUVVc1IwTkVPVUlzVTBGQlUzbEZMRVZCUVdWNlJTeEhRVU55UXl4TlFVRlBMRU5CUVVNc1VVRkJVeXhMUVVGTkxFMUJRVTB3UlN4UlFVRlJNMFVzUlVGQldVTXNTMEZCWVN4RlEwUnFSQ3hUUVVGVE1rVXNSVUZCYlVJelJTeEhRVVY2UXl4UlFVRlRVU3hGUVVGVlVpeEhRVUZYUVN4RlFVRlJUU3hqUVVOMFEwNHNSVUZCVVRSRkxGZEJRV0Y0UlN4UFFVRlBkMFVzVlVGQlZVTXNaMEpEUkhwQ0xGTkJRVk5ETEVWQlFXTTVSU3hIUVVOd1F5eE5RVUUyUWl4VFFVRjZRa1FzUlVGQldVTXNSMEZEVUVFc1JVRk5VRUVzUlVGQlVTdEZMR05CUTFJdlJTeEZRVUZSYzBVc1lVRkRVakZFTEVWQlFXRmFMRWRCUVZkQkxFVkJRVkYxUlN4TFFVRlBMRTlCUlhaRFNTeEZRVUZ0UWpORkxFZERVblpDTEZOQlFWTm5SaXhGUVVGdlFtaEdMRWRCUXpOQ0xFOUJRVXRWTEVWQlFXTldMRWxCUTI5Q0xGVkJRWFpETEVWQlFXbENRU3hIUVVGVFowTXNVMEZKYmtKb1F5eEZRVUZSYVVZc1lVRklUaXhMUVhkRFNTeFRRVUZUUXl4RlFVRm5RbXhHTEVkQlNYUkRMRWxCU0VFc1NVRkJTVWtzUlVGQlUwWXNSVUZCVlVZc1IwRkRia0pwUml4RlFVRmxSQ3hGUVVGdlFtaEdMRWRCUldoRGFVWXNSMEZCWjBKU0xFVkJRV1ZSTEVsQlFUWkVMRmRCUVRWRExFVkJRV2xDUVN4SFFVRmpha1FzVlVGRGNFWnBSQ3hGUVVGbFJDeEZRVUZ2UWtNc1IwRkhja01zVDBGQlNVRXNTVUZCSzBNc1UwRkJPVUpzUml4RlFVRlphMFlzU1VGQk1FUXNVMEZCT1VKc1JpeEZRVUZaYTBZc1NVRkJkMFVzVjBGQk5VTXNSVUZCYVVKQkxFZEJRV05xUkN4VlFVTXpTRFZDTEVWQlIwWTJSU3hIUVRWRFZDeFRRVUUwUW1wR0xFZEJRekZDTEVsQlFVbHRSaXhIUVVGelJTeEpRVUV4UkVNc1ZVRkJWVU1zVlVGQlZTOUpMR05CUVdOdlNTeFJRVUZSTEZkQlJ6RkVMRWxCUm5WRUxFbEJRVFZEVlN4VlFVRlZReXhWUVVGVldDeFJRVUZSTEZsQlJUTkNhRVVzUlVGQlkxWXNTVUZKU1N4VlFVWllMRVZCUVdsQ1FTeEhRVVZ1UW1kRExGTkJRMklzVDBGQlR5eExRVTFZTEVsQlJrRXNTVUZCU1hORUxFVkJRV05TTEVWQlFXTTVSU3hIUVVWNlFsVXNSVUZCWXpSRkxFbEJRV2RDTEVOQlFVTXNUMEZCVVN4UlFVRlJXaXhSUVVGUk0wVXNSVUZCV1hWR0xFbEJRV2RDTEVkQlFVY3NRMEZETTBZc1NVRkJTVU1zUlVGQlRTeEZRVUZwUWtRc1IwRkpNMElzUjBGQmMwSXNVMEZCYkVKRExFVkJRVWxETEZkQlFUUkRMRk5CUVhCQ1JDeEZRVUZKUlN4aFFVRXdReXhWUVVGb1FrWXNSVUZCU1Vjc1ZVRkJhVVlzU1VGQk1VUXNRMEZCUXl4WlFVRmhMR1ZCUVdWb1FpeFJRVUZSWVN4RlFVRkpTU3hoUVVGelFsSXNSMEZCWjBNc1YwRkJia0pKTEVWQlFVbEpMRmxCUVRKQ1VpeEhRVUZoU1N4RlFVRkpTeXhSUVVGNVFpeFRRVUZtVEN4RlFVRkpTeXhQUVVOcVR5eFBRVUZQVGl4RlFVVlFRU3hGUVVGalFTeEZRVUZaYUVJc1YwRkpPVUlzVDBGQlR5eExRV2xDWjBKMVFpeERRVUZ0UWpkR0xFbEJRVmxKTEVWRE9VUjZReXhUUVVGVE1FWXNSVUZCZVVJelJ5eEhRVU12UXl4TlFVRlBMRU5CUVVNc1RVRkJUeXhWUVVGVmRVWXNVVUZCVVhaR0xFbEJRV01zUlVGQlNTeEpRVUZOTEVsRFFYQkVMRk5CUVZNMFJ5eEZRVUZQYkVRc1JVRkJTM3BGTEVWQlFVOTNSU3hIUVVOcVF5eFBRVUZQTEVWQlFWRkRMRVZCUVVzc1JVRkJVWHBGTEVWQlFVOTNSU3hKUTBSMFFpeFRRVUZUYjBRc1JVRkJiVUpETEVkQlEzcERMRTlCUVU5NFNTeFBRVUZQYVVVc1QwRkJUeXhIUTBSa0xFTkJRMHhUTEVsQlFVc3NSVUZEVERkRUxFMUJRVThzUlVGRFVFUXNUMEZCVVN4RlFVTlNSU3hMUVVGTkxFZEVTSFZETUVnc1IwVkdiRU1zVTBGQlUwTXNSVUZCWjBJNVNDeEZRVUZQWjBRc1IwRkROME1zVDBGQlQwRXNSVUZCUzI1RExGRkJRVThzVTBGQlZXdElMRVZCUVZNMVNTeEhRVVZ3UXl4UFFVUkJORWtzUlVGQlVUVkpMRWRCUVU5aExFVkJRMUlyU0N4SlFVTk9MRWxEZDBaTUxGTkJRMFZ5Uml4TFFVRk5MRkZCUTA1RExGTkJRVk1zUlVGRFZFTXNUVUZCVHl4UFFVTlFReXhIUVRsRlJpeFRRVUZsUXl4SFFVTmlMRWxCUVVsclJpeEZRVVZCYWtZc1JVRkJVVVFzUlVGQlMwTXNUVUZEWWt3c1JVRkJUMGtzUlVGQlMwb3NTMEZEV20xQ0xFVkJRVlZtTEVWQlFVdGxMRkZCUTJadlJTeEZRVUZsYkVZc1JVRkJUVVVzVTBGQlUyZENMRTFCUXpsQ2FVVXNSVUZCWjBKdVJpeEZRVUZOYjBZc1kwRkJZMFFzWTBGRGNFTkZMRVZCUVdkQ0wwUXNSVUZCYVVKMFFpeEZRVUZOYUVNc1YwRkRka056U0N4RlFVRlBXQ3hGUVVGNVFsVXNSMEZGYUVORkxFVkJSR0VzUTBGQlEyNUpMRVZCUVUxRUxFZEJRVTl2Unl4UlFVRlJPRUlzU1VGQmEwSXNSVUZEYkVNc1UwRkJWeXhSUVVWc1F5eEhRVUZMU0N4SFFVRnBRa01zUlVGQmRFSXNRMEZKUVN4SlFVRkpUQ3hGUVhoQ1owSXNVMEZCZVVKVkxFVkJRVk40Uml4SFFVbDBSQ3hQUVVGUE5rVXNSVUZCYzBNc2FVSkJTRGREVnl4RlFVRTJRaXh0UWtGQldrRXNSVUZCZVVKQkxFVkJRVkZzU2l4UFFVRlBhVVVzVDBGQlR5eEhRVUZKVUN4RlFVRk5lVVlzVFVGQlR5eERRVU12UlhwSUxGVkJRVmRuUXl4RlFVRk5hRU1zWVVGRFluZElMRWRCUTJ0RVFTeEZRVUZWVkN4RlFVRm5RbE1zUlVGQlUyeEpMRWxCYjBKMlJXOUpMRU5CUVdkQ05VVXNSVUZCVVRCRkxGRkJRVk40Uml4SFFVTnFSREpHTEVWQlFWbHdSQ3hGUVVGak1rTXNSMEZETVVKVkxFVkJRVzFDTEUxQlFWUk9MRVZCUVdVc1JVRkJUV3hKTEVWQlF5OUNlVWtzUlVGQmJVSXNUVUZCVkZBc1JVRkJaWEJKTEVWQlFWTkRMRVZCUTJ4RE1ra3NSVUZCVlRsR0xFVkJRVTE1Uml4TlFVRk5OMGdzVlVGQlZUSklMRWRCUVU5MlJpeEZRVUZOZVVZc1RVRkJUVGRJTEZWQlFWVXdTQ3hIUVVGUlNDeEZRVUZqUnl4SFFVRlJkRVlzUlVGQlRYbEdMRTFCUVUwNVNDeFBRVUZQTkVnc1IwRkRPVWRSTEVWQlFWbGFMRVZCUVdOSExFZEJRVkYwUml4RlFVRk5lVVlzVFVGQlRUZElMRlZCUVZVd1NDeEhRVU40UkZVc1JVRkJiMEpxUXl4RlFVRm5RbTFDTEVkQlEzQkRaU3hGUVVGaFJDeEZRVUUyUWl4TlFVRlVWaXhGUVVGbFZTeEZRVUZyUWtVc1kwRkJaMElzUlVGQlNVWXNSVUZCYTBKSExHRkJRV1VzUlVGQlNTeEZRVU16U0VNc1JVRkJiMEpPTEVWQlFWVXNSVUZCU1VNc1JVRkJXU3hGUVVjNVEzSkZMRVZCUVUxdlJDeEZRVUZqWXl4SFFVTndRbTVGTEVWQlFVMTNSU3hGUVVGaFRpeEZRVUZWU2l4SFFVRlBWQ3hGUVVGalpTeEhRVU5zUkZFc1JVRkJVMG9zUlVGQllTeEZRVUZKVGl4RlFVRlZTaXhIUVVGUExFVkJRVWxoTEVWQlF5OURSU3hGUVVGVE1VSXNSVUZCVDJ4RUxFVkJRVXN5UlN4RlFVRlJOVVVzUjBGRk4wSTRSU3hGUVVGWGFrSXNSVUZEWm5SR0xFVkJRVTF2Uml4alFVRmpla1lzUzBGQlUzTkdMRVZCUVhkQ0xFbEJRVEJDYzBJc1IwRkJXVVFzUlVGQlVYSkNMRVZCUVhOQ2RVSXNZVUZCWlVZc1JVRkJVMFFzUlVGQlVYQkNMRXRCTmtONlNuWkZMRTlCTVVOR0xGTkJRV2RDUXl4SFFVTmtMRWxCUVVsWUxFVkJRVkZYTEVWQlFVMVlMRTFCUldSNVJ5eEZRVVJWT1VZc1JVRkJUVWNzVVVGRFYycERMRkZCUXpOQ2NVY3NUMEZCYjBNc1NVRkJja0oxUWl4RlFVRTRRaXh6UWtGQmQwSkJMRVZCUlhKRUxFMUJRV2hDZGtJc1NVRkxkMElzYVVKQlFXcENRU3hKUVVOVVFTeEZRVUZsYkVZc1JVRkJUVVVzVTBGQlUzWkRMRTlCUVU4clNTeGpRVUZqZUVJc1RVRmhhRVIwUXl4RlFVRlROVU1zUlVGQlRVVXNVMEZCVTNaRExFOUJRVkYxU0N4TFFWRnlRMnhHTEVWQlFVMUZMRk5CUVZOblFpeE5RVUZSWjBVc1NVRlZka0kzUkN4VFFVRlZMRU5CUVVNc2FVSkJRMWh6Uml4cFFrRkJhMElzUTBGQlF5eHZRa051UjA0c1UwRkJVME1zUlVGQllUVkpMRWRCUTI1RExFOUJRVTlCTEVWQlFWVjFSQ3hOUVVGTkxFdEJRVXNzUjBOUk9VSXNTVUZCU1hOR0xFVkJRV0VzUTBGRFpqZEdMRWxCUVVzc1QwRkRURGRFTEUxQlFVOHNUMEZEVUVRc1QwRkJVU3hQUVVOU1JTeExRVUZOTEZGQlowSkVMRk5CUVZNd1NpeEZRVUZaYmtjc1IwRkRNVUlzU1VGQlNXOUhMRVZCUlVGd1NpeEZRVUZUWjBRc1JVRkJUV2hFTEU5QlEyWnhTaXhGUVVGaGNrY3NSVUZCVFhGSExGZEJRMjVDYUVvc1JVRkJXVEpETEVWQlFVMHpReXhWUVVOc1FtbEtMRVZCUVZsMFJ5eEZRVUZOYzBjc1ZVRkRiRUpETEVWQlFWVjJSeXhGUVVGTmRVY3NVVUZEYUVKeVJ5eEZRVUZYUml4RlFVRk5SU3hUUVVOcVFuTkhMRVZCUVd0Q2VFY3NSVUZCVFhkSExHZENRVU40UWtNc1JVRkJWM3BITEVWQlFVMTVSeXhUUVVOcVFrTXNSVUZCWlRGSExFVkJRVTB3Unl4aFFVTnlRa01zUlVGQlZUTkhMRVZCUVUweVJ5eFJRVU5vUWtNc1JVRkJZVXdzUlVGQlVUZEZMRVZCUTNKQ1FTeFBRVUZ0UWl4SlFVRm1hMFlzUlVGQmQwSXNSVUZCU1VFc1JVRkRhRU5ETEVWQlFXRk9MRVZCUVZFMVJTeEZRVU55UWtFc1QwRkJiVUlzU1VGQlptdEdMRVZCUVhkQ0xFVkJRVWxCTEVWQlJXaERReXhGUVVGblF5eHRRa0ZCYWtKS0xFVkJRVGhDUVN4RlFVRmhMRU5CUXpWRWFFWXNSVUZCUjBFc1JVRkRTRU1zUlVGQlIwRXNTVUZEUVN4RFFVTklSQ3hGUVVGSFFTeEZRVU5JUXl4RlFVRkhRU3hIUVVkTVJDeEZRVUZKYjBZc1JVRkJUWEJHTEVWQlExWkRMRVZCUVVsdFJpeEZRVUZOYmtZc1JVRkRWaXhKUVVGSmIwWXNSVUZCVDFJc1JVRkJVWFJMTEdWQlFXVXNTMEZET1VJclN5eEZRVUZQVkN4RlFVRlJkRXNzWlVGQlpTeExRVU01UW1kTUxFVkJRVkY0U3l4RlFVTlNlVXNzUlVGQlVTeEZRVU5TUXl4RlFVRk5OMGtzVDBGRlZpeEhRVUZKYlVrc1JVRkJWU3hEUVVOYUxFbEJRVWwwUkN4RlFVRmxReXhGUVVGblFuQkhMRWRCUXk5Q2Iwc3NSVUZCWVN4bFFVTmlReXhGUVVGWkxHTkJSVnBzUlN4SlFVRnBRaTlGTEVWQlFWVndRaXhKUVVkdFFpeFhRVUUxUXl4RlFVWktiVWNzUlVGQlpVNHNSVUZCYlVJM1JpeEpRVVZEYTBRc1ZVRkJjME1zWVVGQllrRXNTVUZETVVSclNDeEZRVUZoTEdWQlEySkRMRVZCUVZrc1pVRkxhRUpzUlN4RlFVRmxRU3hIUVVWWU9VWXNTVUZCWXl4SlFVRlJRU3hKUVVGaldpeEhRVUZSV1N4SlFVRmpZaXhKUVVGVk9Fb3NTVUZCWTNwS0xFdEJRM0JHY1Vzc1JVRkJVVE5MTEVWQlIxSnZSaXhKUVVaalowWXNSMEZCVjFFc1JVRkJTVWNzWlVGQmFVSklMRVZCUVVsSExHVkJRV1UzUml4UFFVTnFSVEJDTEVWQlFXRnBSU3hKUVVORlppeEZRVUZYTlVVc1QwRkRNVUpGTEVkQlFVczJSU3hGUVVGclFpeEhRVUZMTEVkQlJ6RkNia29zU1VGQlkxb3NTVUZCVTFrc1NVRkJZeXhIUVVGUFFTeEpRVUZqWkN4SFFVRlhLMG9zU1VGQlkzcEtMRXRCUTNKR2Iwc3NSVUZCVVhwTExFVkJSMUpyUml4SlFVWmphVVlzUjBGQlYxRXNSVUZCU1Vjc1pVRkJhVUpJTEVWQlFVbEhMR1ZCUVdVNVJpeE5RVU5xUlRKQ0xFVkJRV0ZyUlN4SlFVTkZhRUlzUlVGQlZ6ZEZMRTFCUXpGQ1JTeEhRVUZMT0VVc1JVRkJhMElzUjBGQlN5eEhRVWxvUXl4SlFXZENUV1VzUlVGb1FrWkRMRVZCUVdVM1RDeFBRVUZQYVVVc1QwRkJUeXhEUVVNdlFrMHNVMEZCVlVFc1IwRkRWSFZITEVkQlFWbFFMRWRCUlZoMVFpeEhRVUY1UWl4SlFVRnFRbVlzUlVGdVJtUXNVMEZCTWtKMFNDeEhRVU42UWl4SlFVRkpjME1zUlVGQlNYUkRMRVZCUVV0elF5eEZRVU5VUXl4RlFVRkpka01zUlVGQlMzVkRMRVZCUlZRclJpeEZRVVJOY0Vvc1QwRkRTWEZLTEd0Q1FVRnZRaXhGUVVOc1F5eE5RVUZQTEVOQlEweHFSeXhGUVVGSFZpeEZRVUZOVlN4RlFVRkpaMGNzUjBGQlQwRXNSMEZCVHl4RlFVTXpRaTlHTEVWQlFVZFlMRVZCUVUxWExFVkJRVWtyUml4SFFVRlBRU3hIUVVGUExFZEJORVZQUlN4RFFVRnJRaXhEUVVOd1JHeEhMRVZCUVVkQkxFVkJRMGhETEVWQlFVZEJMRWxCUTBFc1EwRkRTRVFzUlVGQlIwRXNSVUZEU0VNc1JVRkJSMEVzUjBGTlRDeFBRVWhCUkN4RlFVRkpLMFlzUlVGQlRTOUdMRVZCUTFaRExFVkJRVWs0Uml4RlFVRk5PVVlzUlVGRlRqWkZMRVZCUjBzM1N5eFBRVUZQYVVVc1QwRkJUeXhIUVVGSk5FZ3NTVUZCWlVRc1JVRkJhVUlzU1VGQmJVSk1MRWRCUVZOR0xFVkJRVThzU1VGQlRTeEhRVUZKVHl4RlFVRmxUaXhIUVVGVFJpeEZRVUZQTEVsQlFVMHNSMEZCU1ZFc1JVRkJaVGRFTEZkQlFXRjVSQ3hGUVVGSlVTeHJRa0ZCYjBJc1NVRkJUU3hGUVVGSkxHRkJRV1ZxUnl4RlFVRkpMRTlCUVZORExFVkJRVWtzVFVGQlVTeGxRVUZwUWtRc1JVRkJTU3hQUVVGVFF5eEZRVUZKTEZOQlFWVTBSaXhKUVVjMVVqVk1MRTlCUVU5cFJTeFBRVUZQTEVkQlFVazBTQ3hKUVVGbGNFSXNSVUZCYTBJc1NVRkJiMEpqTEVkQlFWTkdMRVZCUVU5eVJpeEZRVUZKTEV0QlFVOHNSMEZCU1hsRkxFVkJRV2RDWVN4SFFVRlRSaXhGUVVGUGNrWXNSVUZCU1N4TFFVRlBMRWRCUVVrd1JTeEZRVUZuUWpGRExGVkJRVmtzUjBGQlNUQkRMRWxCZDBRNVRDeFZRVU5GY0Vnc1MwRkJUU3huUWtGRFRrTXNVMEZCVXl4RlFVTlVReXhOUVVGUExHTkJRMUJETEVkQmVrUkdMRk5CUVhWQ01Fa3NSMEZEY2tJc1NVRkJTWGhKTEVWQlFWRjNTU3hGUVVGTmVFa3NUVUZEWkdNc1JVRkJWVEJJTEVWQlFVMHhTQ3hSUVVOb1FqSklMRVZCUVhkQ00wZ3NSVUZCVVhGSExHZENRVU5vUTBFc1QwRkJORU1zU1VGQk1VSnpRaXhIUVVFd1EwRXNSVUZETlVSRExFVkJRVzlDTlVnc1JVRkJVWE5ITEZOQlF6VkNRU3hQUVVGcFF5eEpRVUYwUW5OQ0xFZEJRWE5EUVN4RlFVTnFSRU1zUlVGQmQwSTNTQ3hGUVVGUmRVY3NZVUZEYUVOQkxFOUJRWGxETEVsQlFURkNjMElzUjBGQk1FTkJMRVZCV1hwRVVpeEZRVUZsTEVOQlEycENia3NzVlVGQlYzTkVMRVZCUVdsQ2RFSXNSVUZCVFdoRExGZEJRMnhEYVVvc1ZVRkJWMHdzUlVGQllUVkhMRVZCUVUxb1F5eFhRVU01UWt3c1QwRkJVWEZETEVWQlFVMUZMRk5CUVZOMlF5eFBRVU4yUW5GS0xGZEJRVmxvU0N4RlFVRk5lVVlzVFVGQlRUbElMRTlCUTNoQ2Qwb3NaMEpCUVdsQ1FTeEZRVU5xUWtjc1VVRkJiME1zVlVGQk0wSjBTQ3hGUVVGTll5eFJRVUZSUXl4VlFVZG5RaXhOUVVGeVEyWXNSVUZCVFc5R0xHTkJRV05FTEdkQ1FVTjBRbTVHTEVWQlFVMUxMRTlCUVU4eFF5eFBRVUZUY2tJc1QwRkJUMmxGTEU5QlFVOHNSMEZCU1ZBc1JVRkJUVXNzVDBGQlR6RkRMRTlCUVZGdFNpeEZRVUZaZUVzc1QwRkJUMmxGTEU5QlFVOHNSMEZCU1RSSUxFVkJRV01zUTBGRGRrZHFRaXhSUVVGVGJFZ3NSVUZCVFc5R0xHTkJRV05FTEdOQlF6ZENkRVVzVTBGQlZXSXNSVUZCVFdNc1VVRkJVVU1zVTBGRGVFSnhSeXhUUVVGVlFTeEZRVU5XUXl4aFFVRmpRU3hQUVVsbExFMUJRVGRDY2tnc1JVRkJUVzlHTEdOQlFXTnNSU3hSUVVOMFFteENMRVZCUVUxTExFOUJRVTloTEUxQlFWRTFSU3hQUVVGUGFVVXNUMEZCVHl4SFFVRkpVQ3hGUVVGTlN5eFBRVUZQWVN4TlFVRlBORVlzUlVGQldYaExMRTlCUVU5cFJTeFBRVUZQTEVkQlFVazBTQ3hGUVVGakxFTkJRM0pIYWtJc1VVRkJVMnhJTEVWQlFVMXZSaXhqUVVGamJFVXNUVUZETjBKTUxGTkJRVlVzVjBGRFZuVkhMRlZCUVZVc1JVRkRWa01zWVVGQlkwRXNUMEZKYkVKeVNDeEZRVUZOVFN4WFFVRlhNME1zVDBGQlUzSkNMRTlCUVU5cFJTeFBRVUZQTEVkQlFVbFFMRVZCUVUxTkxGZEJRVmN6UXl4UFFVRlJMRU5CUTI1RkxIZENRVUY1UW5GRExFVkJRVTFvUXl4aFFWVnFRelJMTEV0QlFVMHNTVU5xVEZJc1NVRkJTVU1zUjBGQlZTeERRVU5hUVN4VFFVRlRMRWRCYzBOWUxGVkJRMFZzU2l4TFFVRk5MR2xDUVVOT1F5eFRRVUZUTEVWQlExUkRMRTFCUVU4c1VVRkRVRU1zUjBGQlNTeGhRVU5LV1N4UFFYaERSaXhUUVVGblFsZ3NSMEZEWkN4SlFVRkpReXhGUVVGUlJDeEZRVUZMUXl4TlFVTmlPRWtzUlVGQlZ5OUpMRVZCUVVzclNTeFRRVU5vUW1oSkxFVkJRVlZtTEVWQlFVdGxMRkZCUTJacFNTeEZRVUZyUW1wSkxFVkJRVkZyU1N4UFFVTXhRa0VzVDBGQk5rSXNTVUZCY0VKRUxFZEJRVzlEUVN4RlFVTTNRMFVzUlVGQmEwSnVTU3hGUVVGUmIwa3NUMEZETVVKQkxFOUJRVFpDTEVsQlFYQkNSQ3hIUVVGdlEwRXNSVUZETjBOb1N5eEZRVUZUUml4RlFVRlZhVUlzUlVGQlRVVXNVMEZCVTNaRExGRkJRMnhEZDB3c1JVRkJaMElzUjBGQlIyeE1MRTlCUVU4clFpeEZRVUZOYlVvc1kwRkJZM1pNTEZWQlFWZHZReXhGUVVGTmJVb3NZMEZCWTNoTUxGRkJXV3BHTEU5QlZrbHhUQ3hIUVVOR1J5eEZRVUZqYUVvc1UwRkJVU3hUUVVGVmFVb3NSMEZET1VKQkxFVkJRV0ZETEdsQ1FVRnBRaXhUUVVGVlVDeEZRVUZUVVN4UFFVRlJWQ3hQUVVsNlJFc3NSMEZEUm1wTExFVkJRVTl2U3l4cFFrRkJhVUlzVTBGQlZWQXNSVUZCVTFFc1QwRkJVVlFzU1VGSE9VTXNWMEZEUkVjc1IwRkRSa2NzUlVGQlkyaEtMRk5CUVZFc1UwRkJWV2xLTEVkQlF6bENRU3hGUVVGaFJ5eHZRa0ZCYjBJc1UwRkJWVlFzUlVGQlUxRXNUMEZCVVZRc1QwRkpOVVJMTEVkQlEwWnFTeXhGUVVGUGMwc3NiMEpCUVc5Q0xGTkJRVlZVTEVWQlFWTlJMRTlCUVZGVUxFMUJXVEZFUkN4TFFVRk5MRWxETDBOU0xFbEJRVWxaTEVkQlFVOHNRMEZEVkhCTkxFdEJRVTBzVVVGRFRrUXNUVUZCVHl4UFFVTlFSQ3hQUVVGUkxFMUJRMUk0UkN4SlFVRkxMRlZCUlZFc1UwRkJVM2xKTEVkQlFYRkNla3dzUjBGRE0wTXNUMEZCVDBFc1JVRkJWV2hFTEZGQlFWRXNNRUpCUVRCQ0xGTkJRVlV3VHl4SFFVTXpSQ3hQUVVGUFJpeEhRVUZMUlN4TlExSm9RaXhKUVVGSkxFZEJRVThzUTBGRFZHNU5MRTFCUVU4c1RVRkRVRU1zU1VGQlN5eFRRVVZSTEZOQlFWTnRUU3hIUVVFNFFqTk1MRWRCUTNCRUxFOUJRVTlCTEVWQlFWVm9SQ3hSUVVGUkxHTkJRV01zVTBGQlZUQlBMRWRCUXk5RExFOUJRVThzUjBGQlMwRXNUVU5NUkN4VFFVRlRSU3hIUVVGblFqVkxMRWRCUTNSRExFbEJRVWs0U1N4RlFVRk5MMGtzUlVGQlZVTXNSMEZIY0VJc1RVRkJUeXhEUVVOTU5rc3NWMEZJWlM5Q0xFVkJRVWxuUXl4WlFVbHVRa01zVlVGSVkycERMRVZCUVVsclF5eGhRMFJRTEZOQlFWTkRMRWRCUVc5Q2NFd3NSMEZSTVVNc1QwRkJUeXRETEVWQlFYTkNORUlzUlVGQmJVSXpSU3hKUVVGVmVrSXNTMEZCVDNkTkxFZEJRV2RDTDBzc1IwRkJVMmRNTEZkRFZqZEZMRk5CUVZOTExFZEJRV1Z5VEN4SFFVVnlReXhKUVVGSmMwd3NSVUZCYjBJc1JVRkJhVUowVEN4SFFVTnlRM1ZNTEVWQlFWZEVMRVZCUVd0Q1F5eFRRVU0zUWtNc1JVRkJXVVlzUlVGQmEwSkZMRlZCUXpsQ1F5eEZRVUZaU0N4RlFVRnJRa2NzVlVGRmJFTXNUVUZCVHl3MlFrRkJOa0pETEV0QlFVdElMRVZCUVZkRkxFVkJRVmxFTEVkRFNtNUVMRk5CUVZOSExFZEJRV2RDZUV3c1IwRkRkRU1zVFVGQlNTeERRVUZETEU5QlFWRXNUMEZCVVN4aFFVRmhkVVVzVVVGQlVUTkZMRVZCUVZsSkxFdEJRVlVzUlVGRmRrUkJMRVZCUVV0SExHTkJRV056VEN4TFFVZDRRbXhNTEVWQlFXTlFMRWxCUVZOclRDeEhRVUZsYkV3c1IwRkRha05CTEVWQlIwWjNUQ3hIUVVGblFqZEhMRVZCUVdNelJTeEpRMGg0UWl4VFFVRlRNRXdzUjBGQmEwSTNUQ3hGUVVGVE9Fd3NSMEZEYWtRc1NVRkJTVU1zVDBGRlV5eEpRVUZVUkN4SlFVTkdRU3hGUVVGUExFbEJSMVFzU1VGQlNYWkNMRVZCUVdWdlFpeEhRVUZuUWpOTUxFZEJReTlDWjAwc1JVRkJVM3BDTEV0QlFYRkZMRTlCUVd4RWQwSXNSVUZCZDBJdlRDeEZRVUZSVFN4dlFrRkJlVUlzUlVGQlUzbE1MRVZCUVhOQ1NDeE5RVU53U0RORExFVkJRVTB2U1N4RlFVRlZjVXNzUjBGRGFFSXdRaXhGUVVGVFJDeEZRVUZUTEVOQlFVTXZReXhIUVVGTE4wb3NUMEZCVHpaS0xFVkJRVWxITEdkQ1FVRnJRaXhIUVVGSmFVTXNSMEZCWldRc1IwRkJaMEpCTEVWQlFXVXNTVUZCVFVFc1JVRkROMGN5UWl4RlFVRmpTaXhGUVVGTE1VMHNUMEZCVHpaTkxFZEJRemxDTEU5QlFVOUVMRVZCUVZORkxFVkJRMmhDUVN4RlFVRlpPVTBzVDBGQlQzbE5MRWRCUVd0Q0wwY3NSVUZCWTIxSUxFdERlRUowUXl4VFFVRlRSU3hIUVVGcFFteEtMRWRCUTNaRExFOUJRVTk0Uml4UFFVRlBhVVVzVDBGQlR5eEhRVUZKZFVJc1JVRkJUU3hEUVVNM1FqRkZMRXRCUVUwd1JTeEZRVUZMVHl4RlFVTllja0lzU1VGQlMyTXNSVUZCUzFFc1JVRkRWbTVHTEUxQlFVOHlSU3hGUVVGTFR5eEZRVUZKVUN4RlFVRkxTeXhOUVVOeVFtcEdMRTlCUVZFMFJTeEZRVUZMVVN4RlFVRkpVaXhGUVVGTFRTeFRRM1ZDTVVJc1UwRkJVelpKTEVkQlFUSkNjRTBzUlVGQlUzRk5MRWRCUXpORExFOUJRVTlCTEVsQlFXMUNlRTRzUlVGQlYzTk9MRWRETVVKNFFpeFRRVUY1UW01TkxFZEJRM1JETEVsQlFVbHBTaXhGUVVGTkwwa3NSVUZCVlVZc1IwRkRhRUp6VFN4RlFVRlBNMGdzUlVGQmJVSXpSU3hIUVVNeFFtOUtMRVZCUVdsQ1NDeEZRVUZKUnl4bFFVTnlRamxHTEVWQlFWRm5TaXhGUVVGTGFFWXNXVUZEWWk5RUxFVkJRVk1yU1N4RlFVRkxha1lzWVVGRFpEZEVMRVZCUVVrc1JVRkRTa01zUlVGQlNTeEZRWFZDVWl4UFFXcENTVEpHTEVsQlEwWTVSaXhGUVVGUk9FWXNSVUZCWlRsR0xFMUJRM1pDUXl4RlFVRlROa1lzUlVGQlpUZEdMRTlCVTI1Q0xHbERRVUZwUTIxSkxFdEJRVXQwUnl4VlFVRlZReXhoUVVOdVJEZENMRVZCUVVrMFJpeEZRVUZsZGtZc1YwRkRia0pLTEVWQlFVa3lSaXhGUVVGbGRFWXNXVUZKYUVJc1EwRkRURklzVFVGQlQwRXNSVUZEVUVNc1QwRkJVVUVzUlVGRFVrTXNSVUZCUjBFc1JVRkJTVFJJTEVkQlFXOUNjRXdzUjBGRE0wSjVSQ3hGUVVGSFFTeEhSRkpwUkRoSkxFTkJRV2RDZGswc1NVRkJXVkVzUlVGQlZUWk1MRWRCWkRsR0xGTkJRVzlEY2swc1IwRkRiRU1zU1VGQlNXbEVMRVZCUVU5R0xFVkJRWE5DTDBNc1IwRlRha01zVDBGU1FXbEVMRVZCUVV0a0xFbEJRVTFqTEVWQlFVdGtMRWxCUVUxdVF5eEZRVUZSZDAwc1ZVRkRPVUoyU2l4RlFVRkxNVVVzUzBGQlR6QkZMRVZCUVVzeFJTeExRVUZQZVVJc1JVRkJVWGxOTEZkQlEyaERlRW9zUlVGQlN6VkZMRTlCUVZNMFJTeEZRVUZMWkN4SlFVRk5ia01zUlVGQlVYRklMR0ZCUTJwRGNFVXNSVUZCU3pORkxFMUJRVkV5UlN4RlFVRkxNVVVzUzBGQlQzbENMRVZCUVZGelNDeFpRVU5xUTNKRkxFVkJRVXRMTEUxQlFWRjBSQ3hGUVVGUmMwZ3NXVUZEY2tKeVJTeEZRVUZMVFN4UFFVRlRka1FzUlVGQlVYRklMR0ZCUTNSQ2NFVXNSVUZCUzA4c1JVRkJTVkFzUlVGQlN6RkZMRXRCUTJRd1JTeEZRVUZMVVN4RlFVRkpVaXhGUVVGTFpDeEpRVU5RWXl4RlFVbDFSM2xLTEVOQlFUSkNUQ3hIUVVGclFrWXNSMFYwUWpsSkxGTkJRWGxDYmswc1IwRkRkRU1zU1VGQlNTdE1MRVZCUlVGUExFVkJRVTh6U0N4RlFVRnRRak5GTEVkQlF6RkNNazBzUlVGQldUVkNMRWRCUVdkQ0wwc3NSMEZETlVJMFRDeEZRVUV3UkN4UFFVRnNSRWNzUlVGQmQwSXZUQ3hGUVVGUlRTeHZRa0ZCZVVJc1JVRkJVM2xNTEVWQlFYTkNTQ3hMUVVOb1IzUkpMRVZCUVZFc1JVRkJTV2RLTEVWQlFVdE5MRmxCUVdGT0xFVkJRVXRvUml4WlFVRmhjMFVzUlVGQlQwRXNSVUZCUzJkQ0xGbEJRV01zUlVGQlIyaENMRVZCUVU5QkxFVkJRVXQwUlN4WlFVRmpMRWRCUTNaSEwwUXNSVUZCVXl4RlFVRkpLMGtzUlVGQlMwOHNZVUZCWTFBc1JVRkJTMnBHTEdGQlFXTjFSU3hGUVVGUFFTeEZRVUZMYVVJc1lVRkJaU3hGUVVGSGFrSXNSVUZCVDBFc1JVRkJTM1pGTEdGQlFXVXNSMEZETlVjM1JDeEhRVUZMYlVvc1JVRkJWVE5DTEZkQlFXRkpMRWRCUVc5Q2NFd3NSMEZEYUVSNVJDeEhRVUZMYTBvc1JVRkJWWHBDTEZWQlRXNUNMRTFCU21sRUxGRkJRVGRETEVWQlFXbENWU3hIUVVGUlZTeEhRVUZOVVN4WlFVTnFRM1JLTEVkQlFVc3NSVUZCU1RoSkxFVkJRVXRvUml4WlFVRmhjMFVzUlVGQlQwRXNSVUZCUzNSRkxGbEJRV01zUjBGQlMyaEZMRWRCUjNKRUxFTkJRMHhCTEUxQlFVOUJMRVZCUTFCRExFOUJRVkZCTEVWQlExSkRMRVZCUVVkQkxFVkJRMGhETEVWQlFVZEJMRWRHUjNWTGMwb3NRMEZCWjBKd1NTeEZRVUZ0UWpORkxFdEhla0pzVFN4VFFVRlRaMDRzUjBGQlpUbE1MRWRCUTNKRExFbEJUMGx0U0N4RlFWQkJkRW9zUlVGQldXMURMRVZCUVV0dVF5eFZRVU5xUW1sQ0xFVkJRVlZyUWl4RlFVRkxiRUlzVVVGRFptSXNSVUZCV1N0Q0xFVkJRVXN2UWl4VlFVTnFRbkZJTEVWQlFXZENja2dzUlVGQldYTkVMRVZCUVdsQ2RFUXNSMEZCWVN4TFFVTXhSR2xLTEVWQlFWbHFTaXhGUVVGWk5Fa3NSVUZCWVRWSkxFZEJRV0VzUzBGRGJFUTRUaXhGUVVGVmJFOHNSVUZCVlhsRkxFVkJRVWw2UlN4RlFVRlZkVVVzVFVGQlVTeEZRVUZKZEVRc1JVRkJVWE5FTEUxQlFWRXNSVUZET1VRMFNpeEZRVUZWYms4c1JVRkJWVEJGTEVWQlFVa3hSU3hGUVVGVmQwVXNUMEZCVXl4RlFVRkpka1FzUlVGQlVYVkVMRTlCUVZNc1JVRkhjRVVzVDBGQlVXbEVMRWRCUTA0c1MwRkJTeXhGUVVOSU5rSXNSVUZCVlN4RFFVTlNOMFVzUlVGQlIzbEtMRVZCUTBoNFNpeEZRVUZITVVVc1JVRkJWVEJGTEVWQlFVbDZSQ3hGUVVGUmRVUXNVVUZGTTBJc1RVRkZSaXhMUVVGTGJFWXNSVUZEU0dkTExFVkJRVlVzUTBGRFVqZEZMRVZCUVVkNVNpeEZRVU5JZUVvc1JVRkJSekZGTEVWQlFWVXdSU3hGUVVGSk1VVXNSVUZCVlhkRkxGRkJSVGRDTEUxQlJVWXNTMEZCUzJwR0xFVkJRMGdyU2l4RlFVRlZMRU5CUTFJM1JTeEZRVUZIZWtVc1JVRkJWWGxGTEVWQlFVbDZSU3hGUVVGVmRVVXNUVUZETTBKSExFVkJRVWQ1U2l4SFFVVk1MRTFCUlVZc1MwRkJTek5QTEVWQlEwZzRTaXhGUVVGVkxFTkJRMUkzUlN4RlFVRkhla1VzUlVGQlZYbEZMRVZCUVVsNFJDeEZRVUZSYzBRc1RVRkRla0pITEVWQlFVZDVTaXhIUVVWTUxFMUJSVVlzVVVGRFJUZEZMRVZCUVZVc1EwRkRVamRGTEVWQlFVZDZSU3hGUVVGVmVVVXNSVUZEWWtNc1JVRkJSekZGTEVWQlFWVXdSU3hIUVVsdVFpeEpRVUZKTUVvc1JVRkJWek5ITEVWQlFXZENWaXhGUVVGNVFsVXNSMEZCYVVJc1MwRkZla1VzUjBGQlowSXNUVUZCV2pKSExFVkJRV3RDTEVOQlEzQkNMRWxCUVVsNlJ5eEZRVUZ0UWl4TlFVRmllVWNzUlVGQmJVSXNVMEZCVnl4UlFVVjRReXhQUVVGUkwwVXNSMEZEVGl4TFFVRkxNVW9zUlVGRFNESktMRVZCUVZFNFJTeEhRVUZaT1VVc1JVRkJVVGhGTEVsQlFXRndUeXhGUVVGVk1rZ3NSMEZCVHl4RlFVRkpNVWNzUlVGQlVUQkhMRWRCUVU4c1IwRkROMFVzVFVGRlJpeExRVUZMTDBnc1JVRkRTREJLTEVWQlFWRTRSU3hIUVVGWk9VVXNSVUZCVVRoRkxFbEJRV0Z3VHl4RlFVRlZNa2dzUjBGQlR5eEZRVUZKTVVjc1JVRkJVVEJITEVkQlFVOHNTVUZQYmtZc1QwRkJUekpDTEVWRE1VUk5MRk5CUVZNclJTeEhRVUZsYWswc1JVRkJUMk1zVVVGRE5VSXNTVUZCV2tFc1NVRkRSa0VzUlVGQlZTeEpRVWRhTEVsQlFVbHZUQ3hGUVVGWGNFd3NSVUZEV0hGTUxFVkJRWEZDUkN4RlFVRlRiRThzVlVGRE9VSkJMRTlCUVcxRExFbEJRWFpDYlU4c1JVRkJaME51VFN4RlFVRk5hRU1zVlVGQldXMVBMRVZCUXpsRVF5eEZRVUZ2UWtZc1JVRkJVMGNzVTBGRE4wSkJMRTlCUVdsRExFbEJRWFJDUkN4RlFVRXJRak5QTEVWQlFXdENNazhzUlVGRE5VUkZMRVZCUVhkQ1NpeEZRVUZUU3l4aFFVTnFRMEVzVDBGQmVVTXNTVUZCTVVKRUxFVkJRVzFETlU4c1JVRkJWelJQTEVWQlF6ZEVSU3hGUVVGM1FrNHNSVUZCVTA4c1pVRkRha05CTEU5QlFUSkRMRWxCUVRGQ1JDeEZRVUZ0UXpkUExFVkJRVk0yVHl4RlFVTTNSRVVzUlVGQmRVSlNMRVZCUVZOVExGbEJRMmhEUVN4UFFVRjFReXhKUVVGNlFrUXNSMEZCTUVOQkxFVkJRM2hFUlN4RlFVRnRRbFlzUlVGQlV6RkhMRkZCUXpWQ1FTeFBRVUVyUWl4SlFVRnlRbTlJTEVWQlFUaENMRVZCUVVsQkxFVkJRelZET1Vnc1JVRkJaMEpFTEVWQlFYTkRMR2xDUVVGYVZ5eEZRVUYxUWtFc1JVRkJWVlFzUlVGQlowSlRMRVZCUVZOc1NTeEpRVU53UjNWUUxFVkJRV0ZLTEVsQlFXMUNPVThzUlVGQlUwTXNSVUZCV1VRc1JVRkRja1J4U2l4RlFVRmhhRWdzUlVGQlRYbEdMRTFCUVUwNVNDeFBRVU42UW10Q0xFVkJRVlZ0UWl4RlFVRk5SU3hUUVVGVGVVMHNSVUZCWTBVc1JVRkJZVW9zUjBGRGNFUkxMRVZLYjBKVExGTkJRWGxDYWs4c1JVRkJVM2RPTEVWQlFWVkZMRWRCUTNwRUxFbEJRVWxSTEVWQlFXMURMRzlDUVVGaVZpeEZRV3hDTlVJc1UwRkJORUo0VGl4SFFVTXhRaXhKUVVGSmNFSXNSVUZCYTBKcFRpeEhRVUZyUWk5SExFVkJRV001UlN4SlFVVnNSRzFQTEVWQlJHOUNMRU5CUVVNc1YwRkJXU3hUUVVGVGVrb3NVVUZCVVN4RlFVRnBRakZGTEVkQlFWTm5ReXhYUVVGaExFZEJRMjVFZEVJc1JVRkJZMVlzUjBGQlYydEdMRVZCUVdkQ2JFWXNSMEZCVjBFc1JVRkZPVVlzVDBGQlMxRXNSVUZCVlRKT0xFZEJTMUoyVUN4RlFVRm5RbWRJTEZGQlFVOHNVMEZCVlhsSExFZEJRM1JETEU5QlFVODNUQ3hGUVVGVk5rd3NTVUZCYlVKMFNTeEZRVUZUYzBrc1JVRkJaMEk0UWl4SlFVRnRSQ3hUUVVGb1EzQlBMRVZCUVZselRTeE5RVXh5Uml4SFFWbHJSQ3RDTEVOQlFXMUNjRThzUjBGQlZ5eEhRVUZIV2l4UFFVRlBiMDhzUjBGREwwWTFUeXhGUVVGclFpeEhRVUZIVVN4UFFVRlBPRThzUlVGQmNVSXNRMEZCUTFJc1NVRkRiRVJYTEVWQlFYTkNlbEFzUlVGQlowSXNSMEZEZEVNd1VDeEZRVUZsTVZBc1JVRkJaMEpMTEZGQlFVOHNVMEZCVlhOUUxFVkJRVk5zUXl4SFFVTXpSQ3hKUVVGSmNFb3NSVUZCVDIxS0xFZEJRVEpDY0Uwc1JVRkJVM0ZOTEVkQlN5OURMRTlCU2tGclF5eEZRVUZSY0Uwc1NVRkJUU3hGUVVGSll5eEZRVUZMWkN4SlFVRkxiMDBzUlVGQlVYQk5MRXRCUTNCRGIwMHNSVUZCVVdwUkxFMUJRVkVzUlVGQlNUSkZMRVZCUVVzelJTeE5RVUZQYVZFc1JVRkJVV3BSTEU5QlEzaERhVkVzUlVGQlVXeFJMRTlCUVZNc1JVRkJTVFJGTEVWQlFVczFSU3hQUVVGUmExRXNSVUZCVVd4UkxGRkJRekZEYTFFc1JVRkJVV2hSTEV0QlFVOHNSVUZCU1RCRkxFVkJRVXN4UlN4TFFVRk5aMUVzUlVGQlVXaFJMRTFCUXk5Q1oxRXNTVUZEVG01RExFZEJRVEpDY0Uwc1JVRkJVM0ZQTEVsQlMzWkRMRTlCU2tGRExFVkJRV0ZvVEN4TlFVRlJaMHdzUlVGQllXaFJMRTFCUVZGblVTeEZRVUZoTDFBc1MwRkRka1FyVUN4RlFVRmhMMHNzVDBGQlV5dExMRVZCUVdGcVVTeFBRVUZUYVZFc1JVRkJZVzVOTEVsQlEzcEViVTBzUlVGQllUbExMRVZCUVVrNFN5eEZRVUZoTDFBc1MwRkRPVUlyVUN4RlFVRmhOMHNzUlVGQlNUWkxMRVZCUVdGdVRTeEpRVU4yUW0xTkxFVkpjRU5yUWtVc1EwRkJaMEpvVHl4RlFVRlZVaXhIUVVGWFFTeEZRVUZWUVN4RlFVRlJlVThzWjBKQlFXdENPVW9zUlVGQmJVSjRSQ3hGUVVGTlJTeFRRVUZUZGtNc1VVRkJVekJQTEVWQlFWVkZMRWRCUTI1S1owSXNSVUZCYzBJelRDeEZRVUZ6UWpWQ0xFVkJRVTFGTEZOQlFWTjBReXhYUVVNelJIVklMRVZCUVdkQ01FY3NSMEZCWlN4RFFVTnFRMnBQTEZWQlFWY3lVQ3hGUVVOWU1VOHNVVUZCVTIxSkxFVkJRMVJxUnl4VFFVRlZMRmRCUTFZdlF5eFZRVUZYUVN4SlFVVlVkMUFzUlVGQmJVSjRReXhIUVVGcFFqRlBMRTlCUVU5cFJTeFBRVUZQTEVkQlFVbDVSeXhGUVVGWk4wSXNTVUZEYkVWelNTeEZRVUZ2UW1oQ0xFbEJRVzFDT1U4c1JVRkJVelpRTEVWQlFXMUNSQ3hGUVVkdVJVY3NSVUZCYTBJc1EwRkRjRUl4VFN4SlFVRkxPRXdzUlVGQmJVSTVUQ3hKUVVGTmVVMHNSVUZCYTBKNlRTeEpRVUZOT0VRc1JVRkJZemxFTEVsQlEzQkZPVVFzVDBGQlVYVlJMRVZCUVd0Q2RsRXNUMEZCVXpSUUxFVkJRVzFDTlZBc1QwRkJVelJJTEVWQlFXTTFTQ3hQUVVNM1JVVXNTMEZCVFRCUUxFVkJRVzFDTVZBc1MwRkJUM0ZSTEVWQlFXdENjbEVzUzBGQlR6QklMRVZCUVdNeFNDeExRVU4yUlVRc1RVRkJUM05STEVWQlFXdENkRkVzVFVGQlVUSlFMRVZCUVcxQ00xQXNUVUZCVVRKSUxFVkJRV016U0N4UFFVVjRSWGRSTEVWQlFXRXpUaXhGUVVGTmIwWXNZMEZCWTJ0Q0xFOUJSWEpETEVkQlFVbHRSeXhKUVVGdFFqbFBMRWRCUVZWblVTeEZRVUZaTEVOQlF6TkRMRWxCUVVseVNDeEZRVUZUY1Vnc1JVRkJWek5RTEVkQlEzaENNVUlzVDBGQlR6SkVMRXRCUVV0NVRpeEhRVUZwUW5aT0xGTkJRVkVzVTBGQlZTOUVMRWRCUXpkRExFbEJRVWwzVWl4RlFVRlhMRU5CUVVONlVTeEZRVUZQUkN4SFFVRlJjVWNzVVVGQlVXNUlMRWxCUVZFc1JVRkJTU3hIUVVGTExFVkJRM0JFYTBvc1JVRkJUeXhEUVVGRExFVkJRVXR3U1N4SFFVRlJjVWNzVVVGQlVXNUlMRWxCUVZFc1JVRkJTU3hKUVVGTkxFbEJRMjVFYzFJc1JVRkJaMEowVWl4SlFVRlJhMHNzUlVGQlQyaENMRWRCUVZGelNTeExRVWt6UXl4UFFVRlBSaXhGUXpSRlZDeFZRVU5GTDA0c1MwRkJUU3hQUVVOT1F5eFRRVUZUTEVWQlExUkRMRTFCUVU4c1QwRkRVRU1zUjBFMVNFWXNVMEZCWTBNc1IwRkRXaXhKUVVGSlF5eEZRVUZSUkN4RlFVRkxReXhOUVVOaVl5eEZRVUZWWml4RlFVRkxaU3hSUVVObWJrSXNSVUZCVDBrc1JVRkJTMG9zUzBGRmFFSXNTVUZCU1Vzc1JVRkJUVzlHTEdOQlFXTjZSaXhIUVVGTmEwOHNUVUZCT1VJc1EwRnZRMEVzU1VGb1EwRXNTVUZCU1VNc1JVRkJiMEpvVGl4RlFVRlJhMHdzVTBGRE5VSXJRaXhQUVVGelF5eEpRVUYwUWtRc1IwRkJjME5CTEVWQlEzUkVSU3hGUVVGdFFteE9MRVZCUVZGdFRpeFJRVU16UWtNc1QwRkJiME1zU1VGQmNrSkdMRWRCUVhGRFFTeEZRVU53UkVjc1JVRkJPRUp5VGl4RlFVRlJjMDRzYlVKQlEzUkROVWtzUlVGQlZURkZMRVZCUVZFd1JTeFJRVU5zUWpaSExFVkJRVmQyVEN4RlFVRlJkVXdzVTBGRGJrSkZMRVZCUVdWNlRDeEZRVUZSZVV3c1lVRkRka0pKTEVWQlFXTTNUQ3hGUVVGUk5rd3NXVUZEZEVJd1FpeEZRVUYzUW5aT0xFVkJRVkYzVGl4bFFVTm9RMEVzVDBGQk1rTXNTVUZCTVVKRUxFZEJRVEJEUVN4RlFVTXpSRVVzUlVGQmQwSjZUaXhGUVVGUmVVNHNjMEpCUTJoRFF5eEZRVUZ4UW5oUExFVkJRVTFqTEZGQlFWRTVReXhWUVVOdVEzRklMRVZCUVdkQ0wwUXNSVUZCYVVKclRpeEhRVVZxUTBvc1JVRkJjVUpFTEVsQlJFZzVTU3hKUVVGclFtMUtMRWRCUTNGRFJpeEZRV3BETDBVc1UwRkJkVU4wVVN4SFFVTnlReXhIUVVGSmMwUXNSVUZCYVVKMFJDeExRVUZsV0N4RlFVTnNReXhOUVVGUExFZEJSMVFzU1VGQlNXOVNMRVZCUVc5Q2FFWXNSMEZCY1VKNlRDeEhRVU0zUXl4TlFVRlBMRU5CUVVNeVRDeEhRVUU0UWpOTUxFZEJRVmw1VVN4RlFVRnRRamxGTEVkQlFUaENPRVVzU1VFeVFuZERReXhEUVVFNFFrWXNSMEZCTTBVc1EwRkJReTlGTEVkQlFYRkNLMFVzUzBGRGFFaEhMRVZCUVdFc1EwRkJRMGdzUjBGQmIwSjJVU3hQUVVGUGJWRXNSMEZCYjBKMFVTeFJRVUZQTEZOQlFWVkRMRVZCUVV0RExFZEJRM0pHTEU5QlFVOUVMRVZCUVVsRkxFOUJRVTl4UkN4RlFVRnBRblJFTEV0QlFXVllMRVZEZGtOMlF5eFRRVUU0UWpKRExFVkJRVTlqTEZGQlEyeERMRWxCUVZwQkxFbEJRMFpCTEVWQlFWVXNTVUZIV2l4SlFVRkpiMHdzUlVGQlYzQk1MRVZCUTFnNVF5eEZRVUZaYTA4c1JVRkJVMnhQTEZWQlEzSkNjVThzUlVGQlYwZ3NSVUZCVTBjc1UwRkRjRUpGTEVWQlFXVk1MRVZCUVZOTExHRkJRM2hDTDBjc1JVRkJWVEJITEVWQlFWTXhSeXhSUVVOdVFqaEpMRVZCUVdsQ2NFTXNSVUZCVTI5RExHVkJRekZDVFN4RlFVRjNRakZETEVWQlFWTnhReXh6UWtGRGFrTkJMRTlCUVd0RUxFbEJRVEZDU3l4RlFVRnRReXhGUVVGblFrRXNSVUZETTBVelNDeEZRVUZaVEN4RlFVRmhOVWtzUjBGRGVrSXlVU3hGUVVGaE1VZ3NSVUZCV1hGSUxFVkJRV2xDZWxFc1JVRkJjMEpCTEVWQlFXOUNORWNzVVVGQlR5eFRRVUZWZWtjc1IwRkRka2NzVDBGQlR6UkpMRVZCUVdFMVNTeExRVUZsYVVvc1MwRkRhRU16U2l4RlFVTkVkVklzUlVGQmIwSkdMRVZCUVZkc1N5eFJRVUZQTEZOQlFWVjZSeXhIUVVOc1JDeFBRVUZQZFZFc1JVRkJjMEpvVEN4UlFVRlJka1lzU1VGQll5eExRVWR3UWl4SlFVRTNRalpSTEVWQlFXdENReXhUUVVOd1FrUXNSVUZCYjBKR0xFZEJVWFJDTEVsQlFVbEpMRVZCUVZsR0xFVkJRV3RDTDFFc1VVRkJUeXhUUVVGVlF5eEZRVUZMUXl4SFFVOTBSQ3hQUVU1QlJDeEZRVUZKUXl4SFFVRmhhVThzUjBGQlpXcE5MRVZCUVU4c1EwRkRja05vUXl4VlFVRlhRU3hGUVVOWWNVOHNVMEZCVlVFc1JVRkRWa1VzWVVGQlkwRXNSVUZEWkM5SExGRkJRVk5CTEVsQlExSnNSU3hGUVVGcFFuUkVMRWxCUTJKRUxFbEJRMDRzU1VGRFNDeFBRVUZQZWtJc1QwRkJUekpFTEV0QlFVczRUeXhIUVVGWFF5eE5RVUZMTEZOQlFWVkRMRVZCUVVkRExFZEJRemxETEU5QlFVOUlMRVZCUVZWRkxFZEJRVXRHTEVWQlFWVkhMRTFFUkhsQ1F5eERRVUZ4UW01UUxFVkJRVThzUTBGRGJrWm9ReXhWUVVGWFFTeEZRVU5ZY1U4c1UwRkJWVUVzUlVGRFZrVXNZVUZCWTBFc1JVRkRaQzlITEZGQlFWTkJMRVZCUTFRNFNTeGxRVUZuUWtFc1JVRkRhRUpETEhOQ1FVRjFRa0VzU1VGRGNFSjJVU3hMUVVOS0xFbEJRME52VWl4RlFVRm5RbkJRTEVWQlFVMTVSaXhOUVVGTk4wZ3NWVUZETlVKdlNpeEZRVUZoYUVnc1JVRkJUWGxHTEUxQlFVMDVTQ3hQUVVONlFqQlNMRVZCUVZrc1NVRkJTVU1zU1VGRGFFSkRMRWRCUVhGQ0xFVkJRM0pDUXl4RlFVRjNRbUlzUlVGQlZ5eEhRVVU1UW1Nc1JVRkJTU3hGUVVGSFFTeEZRVUZKWkN4RlFVRlhSeXhQUVVGUlZ5eEpRVUZMTEVOQlF6RkRMRWxCUVVsNlVpeEZRVUZaTWxFc1JVRkJWMk1zUjBGRmRrSkRMRVZCUVdsQ2NFOHNSVUZCYVVKMFJDeEhRVVZzUXpKU0xFVkJRVzFDTDBrc1JVRkJZVFZKTEV0QlFXVlVMRVZCUXk5RGNWTXNSVUZCWVN4RFFVRkRMRVZCUVVzeFV5eEhRVUZSY1Vjc1VVRkJVVzFOTEVsQlFXMUNMRVZCUTNSRWJrc3NSVUZCVFhGTExFVkJRV0VzVVVGQlZTeFRRVU0zUW5oR0xFVkJRVmMyUWl4SFFVRmxhazBzUlVGQlR5eERRVU51UTJoRExGVkJRVmRCTEVWQlExaHhUeXhUUVVGVlFTeEZRVU5XUlN4aFFVRmpRU3hGUVVOa1NTeFpRVUZoUVN4RlFVTmlia2dzVVVGQlUwRXNTVUZGVUhGTExFVkJRVzlDUkN4RlFVRmhSQ3hGUVVGdFFuaFRMRVZCUVZGRExFVkJRVTkxVXl4RlFVRnRRbnBUTEVWQlFWTXNSVUZGTDBaclV5eEZRVUZqTjBvc1IwRkJUM2xDTEVWQlFWZDZRaXhMUVVOc1EzTkxMRVZCUVc5Q2NFY3NSMEZCY1VKdlJ5eEpRVWN6UXl4SlFVRkpReXhGUVVGdFFuSkhMRWRCUVhGQ2IwY3NSMEZEZUVORkxFVkJRVk1zUjBGVllpeEhRVkpKYUVNc1IwRkRSbWRETEVWQlFVOURMRXRCUVVzMVJpeEZRVUZUYzBZc1NVRkJiVUlzUjBGSGRFTjRRaXhIUVVOR05rSXNSVUZCVDBNc1MwRkJTelZHTEVWQlFWTjVSaXhKUVVGelFpeEZRVUZIZWtZc1JVRkJVekJHTEVsQlFYRkNMRWRCUnpGRlF5eEZRVUZQUlN4UFFVRk5MRk5CUVZWRExFZEJRM3BDTEU5QlFVOUJMRXRCUTB3c1EwRkRSbFlzUlVGQmQwSjRVaXhGUVVONFFuVlNMRWRCUVhGQ0xFVkJRM0pDTEUxQlIwWkdMRVZCUVZWakxFbEJRVWx1VXl4RlFVRlhLMUlzUjBGSE0wSXNSMEZCU1ZJc1JVRnhRa1lzU1VGdVFrRXNTVUZGU1dFc1JVRkJVU3hUUVVGbFF5eEhRVU42UWl4SlFVRkpReXhGUVVGdFFqTkNMRVZCUVZjMFFpeE5RVUZMTEZOQlFWVjJVeXhIUVVNdlF5eEpRVUZKSzFJc1JVRkJVMVlzUlVGQlZUVlRMRWxCUVVsMVFpeEhRVVV6UWl4SFFVRkpLMUlzUlVGRFJpeFBRVUZQUVN4RlFVRlBVeXhOUVVGTkxFVkJRVWRJTEVkQlFVbEtMRTlCUVUwc1UwRkJWVU1zUjBGRGVrTXNUMEZCVDBFc1VVRkxZaXhIUVVGSlNTeEZRVVZHTEU5QlJFRmtMRVZCUVhkQ1l5eEZRVU5xUWl4VFFVbEdSQ3hGUVc1Q1dTOUNMRVZCUVdsQ0xFVkJRVWtzUlVGdFFsb3JRaXhGUVVGTExFZEJSM0JDTEZWQlJrWkVMRVZCUVUxRExFZEJSRzFDUVN4TFFVOXdRM0pSTEVWQlFVMW9ReXhaUVVGamQxSXNTVUZEZEVKNFVDeEZRVUZOYjBZc1kwRkJZM3BHTEVkQlFVMXJUeXhQUVVGUkxFVkJRMnhETjA0c1JVRkJUV2hETEZWQlFWbDNVaXhGUVVOc1FuaFFMRVZCUVUxNVVTeFBRVUZSTEV0QlZXaENPVW9zYVVKQlFXdENMRU5CUVVNc1ZVRkRia0pwUXl4TFFVRk5MRU5CUTBwcFJpeFBRVUZQTEVsRk4wbFlMRk5CUVZNMlF5eEhRVUZsZEVjc1JVRkJWWFJKTEVWQlFVMDJUeXhIUVZGMFF5eFpRVkI1UWl4SlFVRnlRa0VzU1VGRFJrRXNSVUZCYlVJc1EwRkRha0owVHl4RlFVRkhMRVZCUTBoRExFVkJRVWNzU1VGSlFTeERRVU5NZEVJc1NVRkJTMjlLTEVWQlFWTndTaXhKUVVGTll5eEZRVUZMVFN4UFFVRlRkVThzUlVGQmFVSnlUeXhGUVVOdVJHNUdMRTFCUVU5cFRpeEZRVUZUYWs0c1RVRkJVVEpGTEVWQlFVdExMRTFCUVZGM1R5eEZRVUZwUW5SUExFVkJRM1JFYmtZc1QwRkJVV3RPTEVWQlFWTnNUaXhQUVVGVE5FVXNSVUZCUzAwc1QwRkJVM1ZQTEVWQlFXbENjazhzUlVGRGVrUnNSaXhMUVVGTlowNHNSVUZCVTJoT0xFdEJRVTh3UlN4RlFVRkxTeXhOUVVGUmQwOHNSVUZCYVVKMFR5eEhRVWw0UkN4VFFVRlRkVThzUjBGQmMwSjRSeXhIUVVNM1FpeE5RVUZQTEVOQlFVTXNSVUZCUzJwT0xFVkJRVTlFTEVWQlFWRkZMRWRCUVUxNVZDeE5RVUZMTEZOQlFWVkRMRWRCUXk5RExFOUJRVTh4Unl4RlFVRlRNRWNzU1VGQlV5eExRV2xETjBJc1ZVRkRSVzVTTEV0QlFVMHNUMEZEVGtNc1UwRkJVeXhGUVVOVVF5eE5RVUZQTEU5QlExQTRSeXhwUWtGQmEwSXNRMEZCUXl4dFFrRkRia0kzUnl4SFFXeERSaXhUUVVGalF5eEhRVU5hTEVsQlFVbERMRVZCUVZGRUxFVkJRVXRETEUxQlEySk1MRVZCUVU5SkxFVkJRVXRLTEV0QlExcDVVQ3hGUVVGblFuQlFMRVZCUVUxNVJpeE5RVUZOTjBnc1ZVRkROVUp2U2l4RlFVRmhhRWdzUlVGQlRYbEdMRTFCUVUwNVNDeFBRVU42UW1kVUxFVkJRVzFDTTFFc1JVRkJUVzlHTEdOQlFXTXlUQ3huUWtGRGRrTkRMRVZCUVc5Q0wwVXNSMEZCWldwTkxFVkJRVThzUTBGRE5VTjVUU3hsUVVGblFpeGpRVVZrZDBVc1JVRkJiMEpvUml4SFFVRmxhazBzUlVGQlR5eERRVU0xUXpKTkxHRkJRV0VzU1VGRldIVkZMRVZCUVRKQ1VpeEhRVUZsVFN4RlFVRnRRalZDTEVkQlF6ZEVLMElzUlVGQmMwSlVMRWRCUVdWUExFVkJRVzFDYWtzc1JVRkJXVEpLTEVkQlEzQkZVeXhGUVVGdlFsSXNSMEZCYzBKTkxFZEJRekZEUnl4RlFVRnRRbFFzUjBGQmMwSlBMRWRCUXpkRGJsSXNSVUZCVFc5R0xHTkJRV042Uml4SFFVRlJMRU5CUXpGQ2RWSXNlVUpCUVRCQ1FTeEZRVU14UWtNc2IwSkJRWEZDUVN4RlFVTnlRa01zYTBKQlFXMUNRU3hGUVVOdVFrTXNhVUpCUVd0Q1FTeEhRVVZ3UW5KU0xFVkJRVTFOTEZkQlFWY3pReXhQUVVGVGNrSXNUMEZCVDJsRkxFOUJRVThzUjBGQlNWQXNSVUZCVFUwc1YwRkJWek5ETEU5QlFWRXNRMEZEYmtVc0swSkJRV2REZVZRc1JVRkRhRU1zYzBKQlFYVkNReXhOUTBZelFpeEpRVU5GTVZJc1MwRkJUU3hUUVVOT1F5eFRRVUZUTEVWQlExUkRMRTFCUVU4c1QwRkRVSGRDTEZOQlFWVXNRMEZCUXl4cFFrRkRXSFpDTEVkQk5VSkdMRk5CUVdkQ1lTeEhRVU5rTEVsQlFVbFlMRVZCUVZGWExFVkJRVTFZTEUxQlEyUmpMRVZCUVZWSUxFVkJRVTFITEZGQlEyaENia0lzUlVGQlQyZENMRVZCUVUxb1FpeExRVU5pTWxJc1JVRkJhMEo0VVN4RlFVRlJkMFlzVDBGRE1VSkJMRTlCUVRaQ0xFbEJRWEJDWjB3c1JVRkJOa0lzUTBGQlF5eEZRVUZITEVkQlFVdEJMRVZCUXk5RE1Va3NSVUZCVHl4VlFVRnJRaXhUUVVGVk4wc3NSVUZCUzBNc1IwRkZNVU1zVDBGRVFVUXNSVUZCU1VNc1IwRTFRa1FzVTBGQmFVTkJMRVZCUVZkNVNDeEZRVUZQWVN4SFFVTjRSQ3hKUVVGSmFrSXNSVUZCWjBJdlJDeEZRVUZwUW5SRUxFZEJRMnBEZFZRc1JVRkJhVUlzUTBGQlEyNVZMRVZCUVUwc1IwRkJTMjFITEZGQlFWRTRRaXhKUVVGclFpeEhRVUZMTEVWQlFVa3NSVUZGYUVWMFJpeEZRVUY1UWl4dFFrRkJXSFZITEVWQlFYZENRU3hGUVVGUGFFc3NUMEZCVDJsRkxFOUJRVThzUjBGQlNXdEdMRVZCUVU4c1EwRkRlRVY2U0N4VlFVRlhRU3hMUVVOUWMwa3NSVUZEUm10TUxFVkJRVmQ2VWl4RlFVRkxMRWRCUTJoQ01GSXNSVUZCVnpGU0xFVkJRVXNzUjBGSmNFSXNUMEZHUVhsU0xFVkJRVmRCTEVkQlFWa3NSVUZEZGtKRExFZEJRVmxCTEVkQlFWa3NSMEZCUzBZc1JVRkRkRUlzUTBGQlEyNVZMRVZCUVUxRUxFZEJRVTl2Unl4UlFVRlJPRUlzU1VGQmEwSXNSVUZCU1N4RFFVTnFSR2hFTEVWQlFVZHZVQ3hGUVVOSWJsQXNSVUZCUjJ0UUxFZEJRMFFzUTBGRFJtNVFMRVZCUVVkdFVDeEZRVU5JYkZBc1JVRkJSMjFRTEVkQlYyTkRMRU5CUVhkQ01WUXNSVUZCVjJkRExFVkJRVTE1Uml4TlFVRlBZU3hIUVVNeFJIWkpMRWxCUTA0c1NVRkRRelJVTEVWQlFYZENMMGtzUlVGQlN6VkpMRVZCUVUxb1F5eFhRVU51UTNGRkxFVkJRVWx6VUN4RlFVRnpRblJRTEVWQlF6RkNReXhGUVVGSmNWQXNSVUZCYzBKeVVDeEZRVVZYTEUxQlFYSkRkRU1zUlVGQlRXOUdMR05CUVdORUxHZENRVU4wUW01R0xFVkJRVTF2Uml4alFVRmpSQ3hqUVVGak9VTXNSMEZCUzBFc1JVRkRka055UXl4RlFVRk5iMFlzWTBGQlkwUXNZMEZCWXpkRExFZEJRVXRCTEVkQlIzcERkRU1zUlVGQlRXOUdMR05CUVdONlJpeEhRVUZSYVVvc1NVTjZRamxDTEVsQlEwVnFTaXhMUVVGTkxHZENRVU5PUXl4VFFVRlRMRVZCUTFSRExFMUJRVThzVDBGRFVFTXNSMEZ3UWtZc1UwRkJkVUpETEVkQlEzSkNMRWxCUVVsRExFVkJRVkZFTEVWQlFVdERMRTFCUTJKTUxFVkJRVTlKTEVWQlFVdEtMRXRCUzJoQ1N5eEZRVUZOYjBZc1kwRkJZM3BHTEVkQlFWRnJUU3hIUVVGbExFTkJRM3BEYWs4c1ZVRkJWMjlETEVWQlFVMTVSaXhOUVVGTk4wZ3NWVUZEZGtKcFFpeFJRVUZUYlVJc1JVRkJUWGxHTEUxQlFVMDVTQ3hQUVVOeVFtOUVMRk5CUVZVc1YwRkRWaTlETEZWQlFWZG5ReXhGUVVGTmFFTXNZVUZWYmtJMFN5eExRVUZOTEVsRFowaFNMRWxCUTBWcVNpeExRVUZOTEd0Q1FVTk9ReXhUUVVGVExFVkJRMVJETEUxQlFVOHNUMEZEVUVNc1IwRXZTRVlzVTBGQmVVSkRMRWRCUTNaQ0xFbEJRVWxETEVWQlFWRkVMRVZCUVV0RExFMUJRMkpqTEVWQlFWVm1MRVZCUVV0bExGRkJRMlp1UWl4RlFVRlBTU3hGUVVGTFNpeExRVU5hYlU4c1JVRkJiMEpvVGl4RlFVRlJhMHdzVTBGRE5VSXJRaXhQUVVGelF5eEpRVUYwUWtRc1IwRkJjME5CTEVWQlEzUkVSU3hGUVVGdFFteE9MRVZCUVZGdFRpeFJRVU16UWtNc1QwRkJiME1zU1VGQmNrSkdMRWRCUVhORFFTeEZRVU55UkROQ0xFVkJRVmQyVEN4RlFVRlJkVXdzVTBGRGJrSkZMRVZCUVdWNlRDeEZRVUZSZVV3c1lVRkRka0pKTEVWQlFXTTNUQ3hGUVVGUk5rd3NXVUZEZEVKdVNDeEZRVUZWTVVVc1JVRkJVVEJGTEZGQlEyeENiMDBzUlVGQmEwSTVVU3hGUVVGUksxRXNUMEZETVVKQkxFOUJRVFpDTEVsQlFYQkNSQ3hIUVVGdlEwRXNSVUZETjBORkxFVkJRWGRDYUZJc1JVRkJVV2xTTEdGQlEyaERRU3hQUVVGNVF5eEpRVUV4UWtRc1JVRkJiVU1zUlVGQlNVRXNSVUZEZEVReFNDeEZRVUZYTmtJc1IwRkJaV3BOTEVWQlFVOHNRMEZEYmtOeFRTeFRRVUZWUVN4RlFVTldSU3hoUVVGalFTeEZRVU5rTDBjc1VVRkJVMEVzUlVGRFZHMUlMRmxCUVdGQkxFbEJSVmgwU0N4RlFVRm5RaTlFTEVWQlFXbENkRUlzUlVGQlRXaERMRmRCUTNaRGFVb3NSVUZCV1V3c1JVRkJZVFZITEVWQlFVMW9ReXhYUVVNdlFtZFZMRWRCUVcxQ0wwc3NSVUZEYmtJclJTeEZRVUZYY2tnc1JVRkJlVUpWTEVkQlEzQkRORWtzUlVOeVExa3NUVVJ4UTFOcVF5eEZRM0pEU0N4SlFVRk5MRWxFYzBONFFqZEhMRVZCUVdkQ2JrWXNSVUZCVFc5R0xHTkJRV05FTEdOQlEzQkRhVXNzUlVGQlowSndVQ3hGUVVGTmVVWXNUVUZCVFRkSUxGVkJRelZDYjBvc1JVRkJZV2hJTEVWQlFVMTVSaXhOUVVGTk9VZ3NUMEZEZWtKelZTeEZRVUUwUXl4dFFrRkJha0pHTEVWQlFUaENRU3hGUVVGaGVsWXNUMEZCVDJsRkxFOUJRVThzUjBGQlNWQXNSVUZCVFhsR0xFMUJRVThzUTBGRGRrZDZTQ3hWUVVGWFowTXNSVUZCVFdoRExHRkJRMklyVkN4RlFVTkdSeXhGUVVFeVJDeHBRa0ZCZEVKRUxFVkJRV2xETEVOQlEzaEZha2NzVTBGQlZXbEhMRVZCUTFab1JTeFJRVUZUWjBVc1IwRkRVRE5XTEU5QlFVOXBSU3hQUVVGUExFTkJRMmhDZVV3c1UwRkJWU3hGUVVOV2FVTXNVVUZCVXl4SFFVTlNaMFVzUjBGRFEwVXNSVUZCYzBKdVV5eEZRVUZOYjBZc1kwRkJZMnRDTEU5QlFWTjBSeXhGUVVGTmIwWXNZMEZCWTJ0Q0xFOUJRVTkwUnl4RlFVRk5hRU1zVjBGQllTeExRVU5xUnpSTExFVkJRVThzUTBGRFZIWkhMRVZCUVVjc1JVRkRTRU1zUlVGQlJ5eEhRVWRNTEVkQlFVczJReXhGUVVGTUxFTkJTVUVzUjBGQlNUUkpMRVZCUVdVc1EwRkRha0lzU1VGQlNYRkZMRVZCUlVGRExFVkJRWGRDTEUxQlFXSnlSeXhGUVVGdFFpeEZRVUZOTlU4c1JVRkRjRU5yVml4RlFVRjFRaXhOUVVGaWRFY3NSVUZCYlVJNVR5eEZRVUZUUXl4RlFVTjBRMjlKTEVWQlFXMUNMRTFCUVdKNVJ5eEZRVUZ0UWl4VFFVRlhMRkZCUTNCRE1VWXNSVUZCVTI1Q0xFVkJRV00yUnl4SFFVTjJRblJMTEVWQlFVMDBSU3hGUVVGVE9FUXNSVUZCVTJsSkxFZEJRM2hDTlZFc1JVRkJUVFpGTEVWQlFWTTRSQ3hGUVVGVGEwa3NSMEZEZUVKRExFVkJRVmRXTEVkQlFWVTNTeXhGUVVGWGVrSXNSMEZCVHl4RlFVRkpMRVZCUXpORGFVNHNSVUZCVTNaTUxFbEJRV014U2l4RlFVRlJObElzUlVGQll6ZEtMRWRCUVU5NVFpeEZRVUZYZWtJc1IwRkRMMFJyVGl4RlFVRlRlRXdzU1VGQll6RktMRWRCUVZONVNpeEZRVUZYZWtJc1NVRkJVVFpLTEVWQlFXTTNTaXhIUVVkcVJVd3NSVUZCWld4R0xFVkJRVTFGTEZOQlFWTm5RaXhOUVVNNVFubEZMRVZCUVZsclRTeEhRVUZWTTAwc1JVRkJaVE5ETEVWQlFXTXlReXhIUVVGblFpeERRVU55UlM5RExFMUJRVThzUlVGRFVFTXNUMEZCVVN4SFFVVk9jMUVzUjBGQmNVSXhVeXhGUVVGTmIwWXNZMEZCWXl4dlFrRkJjMEp3Uml4RlFVRk5iMFlzWTBGQll5eHZRa0ZCYjBKSkxGRjRRbWhHZEVjc1EwRkRUSGhGTEVsQlFVc3NSVUZEVERkRUxFMUJRVThzUlVGRFVFUXNUMEZCVVN4RlFVTlNSU3hMUVVGTkxFZDNRalpGUm5WV0xFZEJRV3RDUkN4SFFVRnRRa3dzUjBGRGNrTlBMRWRCUVd0Q1JpeEhRVUZ0UWtvc1IwRk5ja05QTEVkQlFWZHFUeXhGUVVGUExFVkJRVWQzU3l4RlFVRmpOMG9zUjBGQlRVa3NSVUZCVlVvc1NVRkRia1IxVGl4SFFVRlpaQ3hGUVVGclFqVkRMRVZCUVdNM1NpeEhRVUZQTEVWQlFVbG5UaXhGUVVGWFRTeEhRVUZYUml4SFFVRnJRbFFzUlVGQk5FSnNSeXhUUVVGWGQwY3NSVUZCVTBzc1IwRkJWMFlzUjBGQmEwSlVMRVZCUVRSQ2JFY3NVMEZEZUUwclJ5eEhRVUZaWml4SFFVRnRRalZETEVWQlFXTTNTaXhIUVVGUExFVkJRVWxuVGl4RlFVRlhUU3hIUVVGWFJDeEhRVUZyUWxZc1JVRkJORUpzUnl4VFFVRlhlVWNzUlVGQlUwa3NSMEZCVjBRc1IwRkJhMEpXTEVWQlFUUkNiRWNzVTBGRGVrMW9SeXhIUVVGdlFtaEhMRVZCUVUxRkxGTkJRVk5uUWl4UFFVRlROa01zUlVGQlowSXZSQ3hGUVVGTlJTeFRRVUZUWjBJc1QwRkRNMFU0VWl4SFFVRmxhRTRzUjBGQmFVTXNUVUZCWW1kSExFVkJRVzFDYUVjc1IwRkJhMEp4Uml4WFFVRmhMRVZCUVVseVJpeEhRVUZyUW5OR0xGbEJRV01zUlVGQlNTeEZRVU0zU0RKSUxFZEJRWGRJTEU5QlFXcEhZaXhGUVVFclF5eE5RVUYyUWtRc1QwRkJPRUlzUlVGQlUwRXNSVUZCYjBKdVJ5eEpRVUZ4UW05SExFVkJRWGRDTEVWQlJYWktZeXhIUVVGWk5VMHNSVUZCVTNsTkxFZEJRVmxGTEVkQlEycERSU3hIUVVGclFuWlBMRVZCUVU5cFRpeEZRVUZUTEVWQlFWRnVVU3hGUVVZNVFqUkZMRVZCUVZOM1RTeEhRVUZaUnl4SFFVRnpRa1FzU1VGRlMzUlNMRVZCUVVzMFJTeEZRVUZSZFV3c1JVRkJVeXhGUVVGUmNGRXNSVUZCUzNsU0xFbEJRV0Y2VWl4SFFVTm9TREJFTEVWQlFXTTJSeXhIUVVGWmJVZ3NSMEZETVVKMlN5eEZRVUZMYjBRc1IwRkJXVzFJTEVkQlFXdENOMDBzUlVGSGNrTXNSMEZCU1RSSUxFVkJRV01zUTBGRGFFSXNTVUZCU1d0R0xFZEJSVUZETEVkQlFYbENMRTFCUVdKeVNDeEZRVUZ0UWl4RlFVRk5OVThzUlVGRmNrTnJWeXhIUVVGM1FpeE5RVUZpZEVnc1JVRkJiVUk1VHl4RlFVRlRReXhGUVVWMlEyOVhMRWRCUVZWd1R5eEZRVUZqT0Vrc1IwRkZlRUoxUml4SFFVRnRRaXhOUVVGYWRrWXNSVUZCYTBJc1UwRkJWeXhSUVVWd1EzZEdMRWRCUVU5R0xFZEJRVlZ1U2l4RlFVRlRhVW9zU1VGRk1VSkxMRWRCUVU5SUxFZEJRVlZ1U2l4RlFVRlRhMG9zU1VGRk1VSkxMRWxCUVhWRUxFbEJRWGhETEVOQlFVTXNSVUZCUzNaWExFZEJRVTF0Unl4UlFVRlJPRUlzUjBGRmJrTjFUeXhIUVVGNVNDeFBRVUZxUjFJc1IwRkJaMFFzVFVGQmRrSnFRaXhQUVVFNFFpeEZRVUZUUVN4RlFVRnZRbXhGTEVsQlFXOUNiVVlzUjBGQmVVSXNSVUZGZWtwVExFZEJRV0ZHTEVkQlFXVkdMRWRCUVU5R0xFZEJRVlZ1UlN4RlFVRmpiMFVzU1VGQlVYaE5MRVZCUVZkM1RTeEpRVUZSU1N4SFFVRjFRakZDTEVWQlFUUkNha1VzVVVGRmVrazJSaXhIUVVGaFNDeEhRVUZsU2l4SFFVRlZia1VzUlVGQlkyOUZMRWxCUVZGNFRTeEZRVUZYZDAwc1NVRkJVVWtzUjBGQmRVSXhRaXhGUVVFMFFtcEZMRkZCUVZWNVJpeEhRVVUxU1Vzc1IwRkJiVUpzUXl4SFFVRlZPRUlzUnpGQ2VrZzVRaXhUUVVGM1FtcFRMRVZCUVV0NlJTeEZRVUZQZDBVc1IwRkRla01zU1VGQlNYVlRMRVZCUVVsd1VDeEZRVUZQYkVRc1JVRkJTM3BGTEVWQlFVOTNSU3hIUVVNelFpeFBRVUZQZFZNc1JVRkJTWFpUTEVWQlFVMUJMRVZCUVUxMVV5eEZNRUoxU0RKQ1F5eERRVUZsU2l4SFFVRlpUaXhIUVVGVFR5eEpRVUZqYkZBc1JVRkJUMmxPTEVWQlFWTm5ReXhIUVVGaFNpeEhRVUZOUml4SFFVRlRNVUlzUlVGQlUybERMRWRCUVdGS0xFbEJSWEJMZGs4c1JVRkJZemhKTEVkQlFWYzRSaXhIUVVONlFtNU1MRVZCUVV0eFJpeEhRVUZYT0VZc1IwRkJiVUpTTEVkQlIzSkRkbFFzUlVGQlRXOUdMR05CUVdONlJpeEhRVUZSYVVvc1NVRlROVUpxUXl4cFFrRkJhMElzUTBGQlF5eFhSVEZJVGl4VFFVRlRkVTRzUjBGQmFVSkRMRVZCUVhsQ2NsRXNSVUZCWTNkRUxGRkJRemxFTEVsQlFWcEJMRWxCUTBaQkxFZEJRVlVzUjBGSFdpeEpRMjVDYjBOMFNTeEZRMHBQU0N4RlJuVkNka04xVml4RlFVRXdRamRWTEVWQlFXTjFSU3hIUVVONFEzVlJMRVZCUVhWQ09WVXNSVUZCWTNWRkxFbEJaak5ETEZOQlFYbENha1lzUjBGRGRrSXNTVUZCU1dsRUxFVkJRVTlxUkN4RlFVRlJLME1zZDBKQlEyWkhMRVZCUVZOS0xFVkJRVTFITEVWQlFVdExMRTlCUVZOMFJDeEZRVUZSY1VRc1lVRkJaU3hGUVVOd1JFWXNSVUZCVTB3c1JVRkJUVWNzUlVGQlMwMHNVVUZCVlhaRUxFVkJRVkZ2UkN4alFVRm5RaXhGUVVNeFJDeFBRVUZyUWl4SlFVRllSaXhIUVVFeVFpeEpRVUZZUXl4RlFWZHRRM05UTEVOQlFXZENlRkVzUjBGRGRFVktMRVZCUVd0Q1JpeEZRVUZ0UWswc1IwRkRja05vUXl4RlFVRlBSaXhGUVVGelFuVlRMRVZCUVhsQ1JTeEhRVU4wUkhKTUxFVkJRVk1zUTBGRFdHRXNWMEZCV1N4RlFVTmFSU3hWUVVGWExFZEJSVlEzUXl4RlFVRlZMRU5CUTFvM1JTeEZRVUZITEVWQlEwaERMRVZCUVVjc1IwRnJRa3dzVDBGbVNUaFNMRWxCUVRSQ1FTeEpRVUUwUWpsTkxFMUJRM2hDTEZOQlFUbENNVWtzUlVGQldXdEdMRWxCUTJoQ2IwY3NSMEZCWlhoSExFMUJRMkp6Uml4SFEyNURaME5vU3l4RlJHMURWRGhGTEV0RGJFTmtMMFVzUlVGQlZVTXNTVUZCVlU4c1JVRkJZMUFzUjBOS2VFTXNRMEZEVERaTExGbEJSbmxEYUV3c1JVUlJZa2NzUjBOT1VqWkxMRmRCUTNCQ1JTeFZRVUZYYkV3c1JVRkJVV3RNTEZkRVIxcElMRWRCUVdkQ05Vc3NTVVJ2UTI1Q1R5eEZRVUZqZFVVc1MwRkRhRUp2UkN4RlFVRlZkRVlzUlVGQmMwSnJReXhIUVVGakxFbEJRM1JEZWtJc1IwRkJTM2xDTEVWQlFXRjNTQ3hYUVVNeFFuQkZMRVZCUVZFMVJTeEhRVUZMZDBJc1JVRkJZWFZJTEZkQlEycENNMGdzU1VGRFZIZEVMRVZCUVZFM1JTeEZRVUZKTkVnc1IwRkJiMEoyUnl4TFFVazNRaXhEUVVOTWNrSXNSVUZCUjFBc1JVRkJTekZGTEV0QlFVODBUQ3hGUVVGUFlTeFhRVUZoTTBNc1JVRkJVVGRGTEVWQlF6TkRReXhGUVVGSFVpeEZRVUZMWkN4SlFVRk5aMGtzUlVGQlQyVXNWVUZCV1RkRExFVkJRVkUxUlN4RlFVTjZRMGdzVFVGQlQwd3NSVUZCUzBzc1RVRkRXa01zVDBGQlVVNHNSVUZCUzAwc1VVZHlSR3BDTEZOQlFWTnRVeXhIUVVGTlF5eEhRVU5pTEVsQlFVbERMRVZCUVUwc1NVRkJTVzVHTEVsQlExWnZSaXhGUVVGVkxFbEJRVWxETEVsQlEyUkRMRVZCUVZNc1IwRkxZaXhUUVVGVE5VWXNSVUZCU3paR0xFZEJRMXBJTEVWQlFWRkpMRWxCUVVsRUxFVkJRVk5zVml4TlFVTk9MRWRCUVVjeFFpeFBRVUZQTkZjc1JVRkJVM2hVTEZWQlFWa3NSMEZCU1hkVUxFVkJRVk5zVHl4clFrRkJiMElzU1VGRGRFVjRSeXhUUVVGUkxGTkJRVlUwVlN4SFFVTjZRaXhKUVVGTFRDeEZRVUZSVFN4SlFVRkpSQ3hIUVVGTkxFTkJRM0pDTEVsQlFVbEZMRVZCUVdOU0xFVkJRVWxvV1N4SlFVRkpjMWtzUjBGRmRFSkZMRWRCUTBacVJ5eEZRVUZMYVVjc1QwRkpXRXdzUlVGQlR6VkZMRXRCUVVzMlJTeEhRVk5rTEU5QmVrSkJUQ3hGUVVGVmNsVXNVMEZCVVN4VFFVRlZNRlVzUjBGRE1VSktMRVZCUVVsMFJTeEpRVUZKTUVVc1JVRkJVMnhXTEV0QlFVMXJWaXhOUVd0Q2VrSk1MRVZCUVZWeVZTeFRRVUZSTEZOQlFWVXdWU3hIUVVOeVFrZ3NSVUZCVVUwc1NVRkJTVWdzUlVGQlUyeFdMRTlCUlhoQ2NWQXNSVUZCU3paR0xFMUJSMFpFTEVWRGFrSlVMRWxCUlVsTkxFZEJRV3RDTEVOQlEzQkNiRmdzVlVGQlZ5eFRRVU5ZZDFjc1ZVRkJWeXhIUVVOWWVsUXNVMEZCVlN4WlFVZGFMRk5CUVZOdlZTeExRVU5RTEVsQlFVc3NTVUZCU1ROQ0xFVkJRVTh2V0N4VlFVRlZjVlFzVDBGQlVYUlVMRVZCUVU4c1NVRkJTVFJhTEUxQlFVMDFRaXhIUVVGUE5rSXNSVUZCVHl4RlFVRkhRU3hGUVVGUE4wSXNSVUZCVFRaQ0xFbEJReTlGTjFvc1JVRkJTelphTEVkQlFWRTFXaXhWUVVGVk5Gb3NSMEZIZWtJc1QwRkJVVGRhTEVWQlFVdHhWaXhOUVVGTExGTkJRVlZvVXl4SFFVTXhRaXhSUVVGVFFTeEhRVUZ2UkN4dFFrRkJiRU5CTEVWQlFWRXJReXd3UWtGSmFFTXNVMEZCVXpCVUxFZEJRV2RDUXl4UlFVTk1MRWxCUVhKQ1FTeEpRVU5HUVN4RlFVRnRRaXhKUVVkeVFpeEpRVUZKUXl4RlFVRnZRa1FzUlVGRGNFSkZMRVZCUVhkQ1JDeEZRVUZyUWtVc2FVSkJRekZEUVN4UFFVRTJReXhKUVVFeFFrUXNSVUZCYlVNc1IwRkJTMEVzUlVGRE0wUkZMRVZCUVhsQ1NDeEZRVUZyUWtrc1pVRkRNME5CTEU5QlFUUkRMRWxCUVROQ1JDeEZRVUZ2UTFRc1IwRkJhMEpUTEVWQlF6TkZMRTlCUVU4c1UwRkJjMEl2V0N4RlFVRlhSQ3hGUVVGUmJVUXNVVUZET1VJc1NVRkJXa0VzU1VGRFJrRXNSVUZCVlRoVkxFZEJSMW9zU1VNdlF6WkNPVllzUlVGRE0wSXJWaXhGUkRoRFJUZFdMRVZCUVZFc1EwRkRWbWhETEZWQlFWY3NVMEZEV0RoWUxHbENRVUZyUWl4SFFVTnNRbWhXTEZGQlFWTjRSU3hQUVVGUGFVVXNUMEZCVHl4SFFVRkpNbFVzUjBGQmFVSlZMRWRCUXpWRGVGRXNZMEZCWlN4SFFVTm1iRVlzVTBGQlZTeERRVU5TZEVNc1ZVRkJWMEVzUlVGRFdFUXNUMEZCVVVFc1IwRkZWakpETEZkQlFWa3NSMEZEV2tRc1QwRkJVU3hKUVVWT01GWXNSVUZCYlVJc1IwRkRia0pETEVkQlFXTXNSVUZEWkd4T0xFVkJRVmNzUTBGRFlqbEpMRTFCUVU5QkxFVkJRMUJwVnl4WFFVRlpMRk5CUVc5Q1F5eEhRVU01UWl4SlFVRkpjRllzUlVGQmMwTXNiVUpCUVhKQ2IxWXNSVUZCYTBOQkxFVkJRV2xDYkZjc1JVRkJUV01zVTBGQlYyOVdMRVZCUTNwR1F5eEpRVU5CYmxjc1JVRkJUV01zVVVGQlZYaEZMRTlCUVU5cFJTeFBRVUZQTEVkQlFVbHhWaXhGUVVGblFqVldMRVZCUVUxakxGRkJRVk5CTEVkQlEycEZaQ3hGUVVGTmJVb3NZMEZCWjBJc1EwRkRjRUoyVEN4VlFVRlhlVUlzUlVGQlZYcENMRWRCUVdFNFRTeEhRVUZyUWpsTkxFZEJRV0ZCTEVWQlFWVXdVQ3hsUVVGcFFqVkRMRWRCUVd0Q09VMHNSVUZCVlRCUUxHZENRVUZyUWl4SFFVTXhTVE5RTEU5QlFWRXJUU3hIUVVGclFpOU5MRWxCU1RWQ0xFbEZla1UwUWpaWExFVkJRemxDTkVJc1JVWjNSVTFPTEVWRWRrTkhMRk5CUVhkQ2RFSXNSMEZGY2tNc1NVRkJTWE5DTEVWQlFXMUNka0lzUjBGQlRVTXNSMEZGTjBJc1QwRkJUemRXTEVWQlFXVmlMRkZCUVU4c1UwRkJWVU1zUlVGQlN6aENMRWRCUXpGRExFOUJRVTg1UWl4RlFVRkpSU3hQUVVGUE5sZ3NSVUZCYVVKeVVpeFJRVUZQTEZOQlFWVnZVU3hIUVVOc1JDeFBRVUZQUVN4RlFVRlRhRllzVVVGQlZVRXNVVUZGTTBJc1NVTXJRakJDZDFjc1JVVjZSVXMzUWl4RlJubEZjMElzUjBGQlIzWlhMRTlCUVU5NVdDeEZRVUZyUWpGV0xFVkJRVTFqTEZGQlFWRXdWQ3hYUlhoRk9VWTBRaXhGUVVGVE5VSXNSVUZCVlRGWExGRkJRVThzVTBGQlZYTlpMRVZCUVZGRkxFZEJRemxETEVsQlFVbERMRVZCUVZkSUxFVkJRVTlGTEVWQlFWRXpWeXhOUVVzNVFpeFBRVXBCZVZjc1JVRkJUMFVzUlVGQlVUTlhMRTFCUVZFMFZ5eEZRVUZYYW1Fc1QwRkJUMmxGTEU5QlFVOHNSMEZCU1dkWExFVkJRVlZFTEVWQlFWTXNRMEZEY2tWNFZpeFJRVUZUZUVVc1QwRkJUMmxGTEU5QlFVOHNSMEZCU1dkWExFVkJRVk42Vml4UlFVRlRkMVlzUlVGQlVYaFdMRk5CUTNKRU9FZ3NTMEZCVFhSTkxFOUJRVTlwUlN4UFFVRlBMRWRCUVVsblZ5eEZRVUZUTTA0c1MwRkJUVEJPTEVWQlFWRXhUaXhSUVVNMVF6Qk9MRVZCUTBWR0xFbEJRMDRzU1VGRlNUbGFMRTlCUVU4eVJDeExRVUZMYlZjc1IwRkJVVE5DTEV0QlFVa3NVMEZCVlhKWkxFZEJRM1pETEU5QlFVOW5ZU3hGUVVGUGFHRXNVVVoxUjFZc1QwRjJRMEUwUkN4RlFVRk5PRllzYVVKQlFXMUNRU3hGUVVGcFFuSlNMRkZCUVU4c1UwRkJWU3RTTEVkQlEzcEVMRTlCUVU5QkxFVkJRVVUxVnl4WFFYRktZa2tzUlVGQlRUaFdMR2xDUVVGcFFqTldMRk5CUVZFc1UwRkJWWE5JTEVkQlEzWkRMRWxCUVVrNVNDeEZRVUZQT0Vnc1JVRkJUVGxJTEV0QlEySTRWeXhGUVVGblFtaFFMRVZCUVUwelJ5eFJRVU4wUWtFc1QwRkJORUlzU1VGQmJFSXlWaXhGUVVFeVFpeEhRVUZMUVN4RlFVTXhReTlXTEVWQlFWTXJSeXhGUVVGTkwwY3NUMEZGYmtJc1IwRkJjMElzYlVKQlFWaEJMRVZCUVhWQ0xFTkJRMmhETEVsQlFVbG5WeXhGUVVGWmFGY3NSVUZCVHl4RFFVTnlRbFlzVFVGQlQwRXNSVUZEVUV3c1MwRkJUVUVzUlVGRFRtMUtMRk5CUVZWQkxFVkJRMVpvU1N4UlFVRlRRU3hKUVV0WWFWWXNSVUZCYVVJdlJpeExRVUZMTUVjc1IwRkdWQ3hyUWtFM1NGSTFUaXhGUVVGVFVTeFZRVTlzUW5GT0xGbEJRV0VzVjBGRFdDeEpRVUZKV0N4RlFVRktMRU5CU1VFc1NVRkJTVmtzUlVGQmEwSTFWeXhGUVVGTlJTeFRRVU40UW5SRExFVkJRVmxuV2l4RlFVRm5RbWhhTEZWQlF6VkNSQ3hGUVVGVGFWb3NSVUZCWjBKcVdpeFBRVWMzUWl4SFFVRkxkMWdzUjBGQmFVSjJXQ3hGUVVGWFJDeEhRVUZxUXl4RFFWTkJjVU1zUlVGQlRYbEdMRTFCUVZFc1EwRkRXamRJTEZWQlFWZHpWeXhIUVVGcFFuUlhMRVZCUVZkdFJ5eEZRVUZuUW5CSExFZEJRVzlETEZWQlFUTkNjVU1zUlVGQlRXTXNVVUZCVVVNc1ZVRkRPVVZ3UkN4UFFVRlJORVVzUlVGQll6VkZMRWxCVDNoQ2NVTXNSVUZCVFhsUkxFOUJRVkVzUlVGRFpIcFJMRVZCUVUxb1F5eFZRVUZaWjBNc1JVRkJUV01zVVVGQlVUbERMRlZCUzJoRFowTXNSVUZCVFRoV0xHbENRVUZwUWpOV0xGTkJRVkVzVTBGQlZUQlZMRWRCUTNaRExFOUJRVTgzVlN4RlFVRk5iMFlzWTBGQlkzbFFMRVZCUVZOc1ZpeE5RVUZSY2tRc1QwRkJUMmxGTEU5QlFVOHNSMEZCU1hOVkxFVkJRVk5xVFN4VFFVbDZSU3hKUVVaQkxFbEJSVk14VGl4RlFVRlJMRVZCUVVkQkxFVkJRVkU0UlN4RlFVRk5PRllzYVVKQlFXbENhRWdzVDBGQlVUVlVMRWxCVlhwRUxFbEJRVzlDTEVsQlFXaENPRVVzUlVGQlRYbFJMRTFCUVZZc1EwRk5RU3hKUVVGSmIwY3NSVUZCZDBJM1Z5eEZRVUZOT0ZZc2FVSkJRV2xDTldFc1IwRkRMME0wUlN4RlFVRkxLMWNzUlVGQmMwSXZWeXhIUVVNelFtZFlMRVZCUVhsQ1JDeEZRVUZ6UWk5V0xGRkJReTlEYjB3c1QwRkJjME1zU1VGQk0wSTBTeXhGUVVGdlF5eEhRVUZMUVN4RlFVTndSRzVZTEVWQlFVOXJXQ3hGUVVGelFteFlMRXRCUldZc2JVSkJRVkJITEVsQlExUkZMRVZCUVZGR0xFVkJRVWNzUTBGRFZFVXNUVUZCVDBFc1JVRkRVR01zVVVGQlUyOU1MRVZCUTFSMlRTeExRVUZOUVN4RlFVTk9iVW9zVTBGQlZVRXNTMEZEVGpsSkxGRkJha0pPUVN4RlFVRk5lVkVzVDBGQlVTeEZRVU5rZGxZc1IwRkJVeXhMUVhOQ1ptOVBMRkZEYkUweVFuaEtMRVZFYTAxV0xGZEJRMllzVDBGQlR5eEpRVUZKYVZnc1UwRkJVU3hUUVVGVlF5eEhRVU16UW14UExFVkJRVk0yVGl4alFVTlVTeXhGUVVGUmFGZ3NUME51VFZRc1YwRlZUQ3hQUVZSTE5sWXNTVUZEU0VFc1JVRkJWU3hKUVVGSmEwSXNVMEZCVVN4VFFVRlZReXhIUVVNNVFrUXNVVUZCVVVNc1ZVRkJWVU1zVFVGQlN5eFhRVU55UW5CQ0xFOUJRVlUzV2l4RlFVTldaMklzUlVGQlVXeFlMRmxCUzFBclZpeEpSRFJNVEhGQ0xGRkJRVk1zVjBGRFVHWXNTVUZEUVVnc1IwRkJZeXhKUVVsc1FpeEpRVUZMWWl4SFFVRnBRblpZTEVWQlFWZEVMRWRCU3k5Q0xFOUJRVTl0VEN4RlFXMURWQ3hUUVVGVGNVNHNTVUZEVUVvc1JVRkJhVUkxVml4VFFVRlJMRk5CUVZWTUxFZEJRMnBETEU5QlFVOUJMRTlCUlZScFZ5eEZRVUZ0UWl4SFFVZHlRaXhQUVhaRFFXcE9MRVZCUVZOdFRpeFhRVUZYYmxZc1IwRkJVMjFYTEUxQlFVc3NVMEZCVldwWUxFbEJRM0pEWjFjc1IwRkJaV3hXTEVWQlFWRnhWeXhsUVVNeFFuSlhMRVZCUVZGeFZ5eGpRVUZqYmxnc1RVRnhRMjVDT0Vrc1IwRkhTaXhKUVVGSmMwOHNSMEZCTkVJNVFpeExSM0pRYmtNc1IwRkJORUpCTEVkQlFXZENMRU5CUXpsRFNTeHBRa0ZHY1VJc1EwRkJRekpDTEVkQlFXZENMRWRCUVdVc1IwRkJaU3hGUVVGaExFZEJRVkVzUjBGQlRTeEhRVUZwUWl4RlFVRlBMRTFEU25KSUxFZEJRVFJDTDBJc1IwRkJaMElzUTBGRE9VTkpMR2xDUVVaeFFpeERRVUZETWtJc1IwRkJaMElzUjBGQlpTeEhRVUZsTEV0RFVYUkZMRTFCUlUxRExFZEJRV2xDTEdkQ1FYZENha0pETEVkQlFXTXhXU3hKUVVOc1FpeEpRVUZKTWxrc1JVRkJWek5aTEVWQlFWRTBXU3hoUVVGaExHdENRVVZ3UXl4SlFVRkxSQ3hIUVVGNVFpeE5RVUZpUVN4RlFVRnJRaXhEUVVOcVF5eEpRVUZKUlN4RlFVRlhOMWtzUlVGQlVUUlpMR0ZCUVdFc1VVRkxjRU1zU1VGQlMwTXNTVUZCWVVFc1JVRkJVME1zVTBGQlV5eFBRVUZUUkN4RlFVRlRSU3hYUVVGWExFdEJReTlFTEU5QlFVOHNTMEZKVEVZc1JVRkJVME1zVTBGQlV5eFBRVUZUUkN4RlFVRlRSU3hYUVVGWExFOUJRMnBFUml4RlFVRlhMRWxCUVVsQkxFVkJRVk51Vnl4TlFVRk5MRXRCUVVzc1RVRkhja05wVnl4RlFVRlhSU3hIUVVGNVFpeE5RVUZpUVN4RlFVRnRRa0VzUlVGQlUwY3NUMEZCVXl4TFFVYzVSQ3hQUVVGUFRDeEhRVWRJVFN4SFFVRjVRbXBhTEVsQlF6ZENMRTFCUVUweVdTeEZRVUZYUkN4SFFVRlpNVmtzUjBGRk4wSXNUMEZCU1RKWkxFZEJRMHN2VkN4VFFVRlRhVVFzWTBGQll6aFJMRWRCUVZsQkxFVkJSM0pETEUxQlIwaFBMRWRCUVhsQ2JGb3NTVUZETjBJc1RVRkJUVEpaTEVWQlFWZEVMRWRCUVZreFdTeEhRVU0zUWl4UFFVRlBNbGtzUlVGQlZ5OVVMRk5CUVZOcFJDeGpRVUZqT0ZFc1IwRkJXU3hOUVRCQ2FrUlJMRWRCUVhWQ2Jsb3NTVUZETTBKQkxFVkJRVkZ2V2l4alFVRmpMRWxCUVVsRExFMUJRVTFhTEUxQlJ6VkNMRWRCUVZrMVlTeE5RVU5ZUVN4SFFVRnpRaXhwUWtGQlVrRXNWVUZKVHl4SlFVRm1RU3hGUVVGSmVXSXNVMEZEWW5waUxFVkJRVTFCTEVWQlFVa3NVMEZIYlVJc1NVRkJha0pCTEVWQlFVa3dZaXhWUVVka1F5eEhRVUZoTTJJc1IwRkRZaXhIUVVGVlFTeEhRVVZNUVN4RlFVRkplV0lzVDBGQlUzcGlMRVZCUVVrc1IwRkJTMEVzUlVGSFdpeHBRa0ZCVWtFc1IwRkJiMEpCTEVWQlFVbHZVeXhQUVVGVExFVkJRMjVEY2t3c1UwRkJVMmxFTEdOQlFXTm9TeXhIUVVkNlFpeExRVWRJTkdJc1IwRkJhMElzUTBGQlEwTXNSVUZCWlVNc1JVRkJVVU1zUzBGRE9VTnVZeXhQUVVGUE1rUXNTMEZCUzNkWkxFZEJRV0YwV1N4VFFVRlJaMElzU1VGREwwSXNUVUZCVFhWWUxFVkJRV2RDUkN4RlFVRlpkRmdzUjBGRE5VSnNSU3hGUVVGUmRXSXNSVUZCVDNKWUxFZEJRMlozV0N4RlFVRlpNV0lzUjBGQlV5eEhRVUZWUVN4SFFVRlRMRlZCY0VnMVExQXNUMEZFVTBFc1JVRnhTSE5FVHl4SFFXNUlNVVFzUjBGQlIxQXNTVUZIVEN4SFFVRkhkME1zVTBGQlUzSkRMRXRCUVV0SUxFZEJRVXRvUWl4TlFVRk5MR1ZCUVdVc1IwRkJSMUFzWTBGTWVFTjFRaXhKUVVGQlFTeEZRWFZJV0N4SlFVRkxMRWxCUVVscll5eFBRVUZQUml4SFFVRmxiazhzUzBGQlMyOVBMRWRCUTJ4RExFMUJRVTBzU1VGQlNVVXNWVUZCVlN4SFFVRkhUaXhGUVVGamJtUXNNRUpCUVRCQ0swWXNjVUpCUVRSQ2QxZ3NlVUpCUVdsRFJDeFhRVXMxU0Vrc1IwRkJXV3BoTEUxQlExZ3NSMEZCVlVFc1NVRkJaMFFzU1VGQmNFTkJMRVZCUVZGcllTeHBRa0ZCYVVKcVN5eFRRVWxuUWl4WlFVRTNSSHBNTEdsQ1FVRnBRbmhGTEVkQlFWTnRZU3hwUWtGQmFVSXNZMEZIT1VORExFZEJRV0Z3WVN4SlFVTmFRU3hIUVVGWFFTeEZRVUZSZFZvc1YwRkJZV01zUzBGQlMwTXNaMEpCU1hSRGRHRXNSVUZCVVhWaExGVkJRVlY0Vnl4VFFVRlRMRzFDUVVsRExFbEJRWEpDTDBRc1JVRkJVWGRoTEZOQlExWjRZU3hGUVVGUmQyRXNVMEZIVm5oaExFVkJRVkY1WVN4aFFVRmhMR0ZCUVc5RUxGVkJRWEpEZW1Fc1JVRkJVVFJaTEdGQlFXRXNZVUZITlVRNFFpeEhRVUZwUWpGaExFbEJRM0pDTEVsQlFVczBSU3hUUVVGVFF5eG5Ra0ZCWjBJNFZpeGhRVU0xUWl4UFFVRlBMRXRCU1ZRc1IwRkJiVU1zYlVKQlFYaENNMkVzUlVGQlVXMUZMRmxCUVRSQ0xFTkJRemRETEUxQlFVMHpTU3hGUVVGUGQwVXNSVUZCVVcxRkxHTkJRM0pDTEU5QlFVOHpTU3hoUVVGblFuRkdMRmRCUVdGeVJpeEZRVUZQTEV0QlJ6ZERMRTlCUVVsM1JTeGhRVUZ0UW1Fc1YwRkRaR0lzUlVGSlNrRXNSVUZCVVhORkxGZEJTVTV2Vnl4SFFVRmxNV0VzUlVGQlVYTkZMRmxCU0hKQ0xFMUJUVXh6Vnl4SFFVRlBMRTlCVjFCRExFZEJRVk0zWVN4SlFVVmlRU3hGUVVGUmIwUXNZMEZIU2pCWUxFZEJRVmtzUzBGRGFFSXNUVUZCVFN4UFFVTktReXhIUVVORk0yRXNUMEZGU2l4UFFVRkpNbUVzU1VGQlYyNVhMRk5CUVZOblNDeExRVUZMTms4c1lVRkJZU3h4UWtGRGFrTk5MRVZCUjBZc1RVRkhTRU1zUjBGQk5FSXNSMEZwUWpWQ1F5eEhRVUZSTEVsQlFYVkRMRkZCUVdwRGNsY3NVMEZCVTBNc1owSkJRV2RDY1Zjc1NVRkZka05ETEVkQlFYRkNReXhKUVdwQ1FVTXNTVUZCUVVFc1JVRkJRVUVzUlVGclFrNHNTMEZEYWtJc1RVRkJUVU1zUlVGQlNWSXNTMEZIVml4SFFVRkpVU3hGUVVGSExFTkJRMHdzVFVGQlRYaGhMRVZCUVU5ellTeEZRVUZQUnl4TFFVTmtReXhGUVVGeFFrWXNSVUZCUlhKaExFZEJRVWRJTEVkQlEyaERkMkVzUlVGQlJYSmhMRWRCUVVkSUxFZEJRVkZ6WVN4RlFVRlBTeXhuUWtGRGNFSklMRVZCUVVWeVlTeEhRVUZIU0N4SFFVRk5OR0VzV1VGQlkwNHNSVUZGZWtKRkxFVkJRVVZ5WVN4SFFVRkhTQ3hIUVVGTk5tRXNWMEZCWVN4TFFVTjBRa3dzUlVGQlJYSmhMRWRCUVVkSUxFZEJRVkV3WVN4RlFVTk9TaXhGUVVGUFN5eHRRa0UzUWxFc1dVRkJlRUkzVnl4VFFVRlRaMWdzV1VGRlRsb3NSMEZCTUVJdlN5eFJRVU0zUW5KTUxGTkJRVk0wUml4cFFrRkJhVUlzYjBKQlFXOUNMRXRCUXpWRGQxRXNSMEZCTUVJeFdpeFRRVUZSSzFvc1IwRkJXVUVzVTBGSmJFUk1MRWRCUVRCQ04wb3NTMEZCUzJ0TExFbEJSUzlDUVN4TFFYbENSVkVzUjBGQlZWSXNTVUZEVlN4dFFrRkJZa0VzUjBGRFZFRXNTMEZKUlZNc1IwRkJlVUlzUTBGQlExUXNSVUZCVlZVc1JVRkJiVUpETEVkQlFXOUNMRXRCUXk5RkxFbEJRVXRCTEVWQlJVZ3NXVUZFUVVnc1IwRkJVVklzUjBGSlZpeE5RVU5OV1N4RlFUbE1hVU5xWXl4RFFVRkJRU3hKUVVOMlF5eEpRVUZMUVN4RlFVTklMRTlCUVU4c1JVRkpWQ3hKUVVGSkxHMUNRVU5HYTJNc1JVRkJhMElzWjBKQlEyeENReXhIUVVORkwySXNUMEZCVDI5RkxHbENRVUZwUW5oRkxFZEJRelZDTEUxQlFVMXZZeXhGUVVFd1FrTXNUMEZCVDBNc1YwRkJWMG9zUjBGRE5VTkxMRVZCUVhWQ1JpeFBRVUZQUXl4WFFVRlhTQ3hIUVVVdlF5eFBRVUZMUXl4SFFVRTBRa2NzUjBGTGFrTk1MRVZCUVhGQ1FTeEZRVUZ0UW5oYUxFMUJRVTBzUzBGQlN5eEhRVU51UkhsYUxFVkJRV3RDUVN4RlFVRm5RbnBhTEUxQlFVMHNTMEZCU3l4SFFXNUdaaXhMUVc5R2RFSXlXaXhQUVVGUFF5eFhRVUZYU2l4SFFVRnpRa2NzVDBGQlQwTXNWMEZCVjBnc1MwRk9la1FzUjBGblRHZENTeXhEUVVGcFExUXNSMEZFYkVNc1JVRkZlRUlzU1VGQlNWVXNSMEZCVXl4RlFVVmlMRTFCUVUxRExFVkJRVlVzUlVGRFpIcFJMRTlCUVVGQkxFMUJSVWxCTEVsQlFWYzRVQ3hKUVVsbVZTeEhRVUZUTEVWQlExUldMRVZCUVd0Q2NsSXNiMEpCUVc5Q0swNHNSMEZCWjBKcFJTeEhRVU4wUkdJc1IwRkJVVklzUzBGSFZsVXNSVUZCYTBKMlVpeHBRa0ZCYVVKcFR5eEhRVUZuUW1sRkxFZEJRMjVFUXl4WlFVRlhMRXRCUTBwR0xFZEJRMGgwUkN4SFFVRnhRalJETEV0QlJYUkNSU3hKUVdGRFZ5eEhRVUYxUWl4RFFVRkRPVkVzUlVGQlRTdFJMRVZCUVdWRExFVkJRV1ZETEV0QlEyaEZMRWxCUVVreFowSXNSVUZCVVhsUUxFVkJRVXR3U0N4UlFVRlJiVmtzUjBGRmVrSXNTVUZCWlN4SlFVRlllR2RDTEVWQlEwWXNUMEZCVDNsUUxFZEJRVTFuVWl4SFFVRnBRa01zUlVGQmFVSnFVaXhGUVVGTGJVVXNUMEZCVXl4RlFVRkpMRWRCUjI1RkxFMUJRVTByVFN4RlFVRmhiRklzUlVGQlMyMUZMRTlCVDNoQ0xFOUJUa0UxVkN4SFFVRlRlV2RDTEVWQlFXZENMRWRCUVVzc1JVRkZNVUpETEVsQlEwWXhaMElzUjBGQlUwRXNSVUZCVVRKblFpeEhRVUZqUVN4SFFVY3hRbXhTTEVWQlFVdHVTaXhMUVVGTFF5eEpRVUZKTEVWQlFVZEVMRXRCUVV0RkxFbEJRVWw0Unl4RlFVRlBNbWRDTEVWQlFXRXNUVUZsYWtSRExFZEJRV2xDTEhGQ1FVTnFRa01zUjBGQmFVSXNUMEZEYWtKRExFZEJRV2RDTEZOQlEyaENReXhIUVVGblFpeEhRVVYwUWl4SlFVRkpReXhIUVVGWExFVkJRMllzVFVGQlRVTXNSMEZCWlN4RFFVTnVRa01zVjBGQldTeFpRVU5hUXl4WFFVRlpMRmxCUlZKRExFZEJRVzlDTERSQ1FVTndRa01zUjBGQlpTeEpRVUZKTlVnc1NVRkJTU3hEUVVGRExGRkJRVk1zVjBGQldTeFZRVUZYTEZsQlFXRXNZMEZCWlN4aFFVRmpMR2xDUVVGclFpeFpRVUZoTEZkQlFWa3NXVUZCWVN4alFVRmxMRmxCUVdFc1ZVRkJWeXhYUVVGWkxGRkJRVk1zYjBKQlFYRkNMR0ZCUVdNc1dVRkJZU3hYUVVGWkxHTkJRV1VzWTBGQlpTeGpRVUZsTEZsQlFXRXNaVUZCWjBJc1owSkJRV2xDTEdWQlFXZENMR2RDUVVGcFFpeGhRVUZqTEZGQlFWTXNUMEZCVVN4VFFVRlZMRkZCUVZNc1UwRkJWU3hUUVVGVkxGVkJRVmNzVjBGQldTeFBRVUZSTEZOQlFWVXNaVUZCWjBJc1UwRkJWU3hQUVVGUkxHMUNRVUZ2UWl4dFFrRkJiMElzVVVGQlV5eFJRVUZUTEZkQlR5OXNRaXhUUVVGVE5rZ3NSMEZCV1ROa0xFVkJRVk0wWkN4SFFVTTFRaXhQUVVGUFFTeEhRVUZQTEVkQlFVZEJMRTFCUVZGUUxGRkJRV2RDY21Rc1JVRkJVWEZrTEZWQlFWbEJMRXRCUnk5RUxGTkJRVk5STEVkQlFWTTNaQ3hIUVVOb1FpeE5RVUZOTkdRc1JVRkJUVVFzUjBGQldUTmtMRWRCUjNoQ0xFOUJSa0ZCTEVWQlFWRnhaQ3hUUVVGWFR5eEZRVU51UWxJc1IwRkJZMUVzUjBGQlQxSXNSMEZCWTFFc1NVRkJVU3hIUVVOd1ExSXNSMEZCWTFFc1IwRjNRM1pDTEZOQlFWTkZMRWRCUVZsRExFVkJRVkZ5UWl4RlFVRlRjMElzUlVGQmNVSXNUVUZEZWtRc1RVRkJUVU1zUlVGQlpYaG5RaXhQUVVGUE1rUXNTMEZCU3pKakxFZEJSV3BETEVsQlFVc3NTVUZCU1c1T0xFVkJRVWtzUlVGQlIyeExMRVZCUVUxMVdDeEZRVUZoYUU4c1QwRkJVVmNzUlVGQlNXeExMRVZCUVV0clN5eEpRVUZMTEVOQlEzWkVMRTFCUVUxelRpeEZRVUZSU0N4RlFVRlBSU3hGUVVGaGNrNHNTVUZGYkVNc1IwRkJTWE5PTEVWQlFVMURMR3RDUVVGdlFucENMRWRCUVZkM1FpeEZRVUZOUml4eFFrRkJkVUpCTEVWQlEzQkZMRTlCUVU5RkxFVkJTVmdzVDBGQlR5eExRVWRVTEZOQlFWTkZMRWRCUVdkQ1F5eEZRVUZ0UWpOQ0xFVkJRVk0wUWl4SFFVTnVSQ3hOUVVGTlF5eEZRVUZuUXl4cFFrRkJXamRDTEVWQlEzQkNlVUlzUlVGQmEwSkpMRVZCUVdGRUxFVkJRV1UxUWl4RlFVTndSQ3hKUVVGSk9FSXNSVUZCV1VNc1IwRkJZVW9zUjBGUE4wSXNUMEZPYVVKWUxFZEJRV0YyU0N4SlFVRkpjVWtzUzBGSGFFTkJMRVZCUVZsSUxFZEJSMUFzUTBGQlEwVXNSVUZCV1Vvc1JVRkJhVUpMTEVkQlIzWkRMRk5CUVZORkxFZEJRVmN4WlN4RlFVRlRjV1VzUlVGQmJVSXpRaXhGUVVGVE5FSXNSVUZCWTBzc1IwRkRja1VzUjBGQmFVTXNhVUpCUVhSQ1RpeEpRVUZ0UTNKbExFVkJRelZETEU5QlZVWXNSMEZRU3pCakxFbEJRMGhCTEVWQlFWVTBRaXhGUVVOV1FTeEZRVUZsTEUxQlMySmlMRWRCUVd0Q0wxSXNTMEZCU3pKVExFZEJRVzlDTEVOQlF6ZERMRTFCUVUxUExFVkJRVk16WkN4SFFVTk9MRk5CUVZWcFpDeEhRVU5tTEVsQlFVdEJMRVZCUVUxWExHVkJRV2xDV0N4RlFVRk5WeXhuUWtGQmEwSllMRVZCUVUxWkxHbENRVUZ0UWxvc1JVRkJUVmtzWlVGQlpTOWhMRk5CUVZOdFlTeEZRVUZOVnl4bFFVTXZSeXhQUVVGUE5XUXNSVUZCUjJwRUxFdEJRVXM1UWl4TFFVRk5aMmxDTEVsQlMzWkNTU3hGUVVOR1FTeEZRVUZsVFN4RlFVRlBUaXhIUVVWMFFqVkNMRVZCUVZWclF5eEZRVUZQYkVNc1IwRkpja0lzVFVGQlR6WkNMRVZCUVZsS0xFVkJRV2xDU3l4SFFVRmhTaXhIUVVGblFrTXNSVUZCYlVJelFpeEZRVUZUTkVJc1IwRkRka1pRTEVWQlFWTkdMRWRCUVZNM1pDeEhRVU5zUWl0bExFVkJRVmRvUWl4RlFVRlBVeXhMUVVGbFZDeEZRVUZQVXl4SFFVRmhMRWxCUTNKRVVTeEZRVUZoYkVJc1IwRkJXV2xDTEVWQlFWVmFMRVZCUVdsQ1NTeEZRVUZoTjBJc1JVRkJWU3hOUVVWcVJpeEhRVUZKYzBNc1JVRkZSaXhaUVVSQlFTeEZRVUZYVEN4UFFVRlRTeXhGUVVGWFRDeFJRVUZWUVN4SFFVa3pReXhOUVVGTlppeEZRVUZOUkN4SFFVRlpVU3hGUVVGcFFrVXNSVUZCYTBKc2FVSXNVVUZCVVRoblFpeEhRVUZuUWl4TFFVTTNSV2hqTEVWQlFVdHpaQ3hGUVROR1lpeFRRVUZ2UTNabExFVkJRVk15V1N4RlFVRlZNVmdzUjBGRGNrUXNUMEZCVHl4VFFVRlRlV0lzUlVGQlVYZENMRWRCUTNSQ0xFMUJRVTFsTEVWQlFXTnFaaXhGUVVGUmEyWXNhVUpCUVdsQ2RrY3NSMEZGTjBNc1NVRkJTeXhKUVVGSkxFOUJRMUF4VFN4SFFVTkZhVk1zUlVGQlQycFRMRWRCUVZWQkxFbEJRVmN2VUN4TFFVRk5LMUFzUlVGQlUwRXNSVUZCVHpOSUxGZEJRM0JFTEVsQlFVc3NTVUZCU1hOTkxFVkJRVWx4VHl4RlFVRlphRkFzVDBGQlVWY3NTMEZETDBJc1IwRkJTWEZQTEVWQlFWbHlUeXhMUVVGUE0wVXNSVUZQY2tJc1QwRk9RV2xUTEVWQlFVMVpMR1ZCUVdsQ04xTXNSVUZGYmtKNVVTeEZRVUZSYVVNc1VVRkRWbEVzUjBGQllVTXNTVUZCU1hCbUxFVkJRVk5yWlN4RlFVRk5iVUlzUzBGQlRURkhMRVZCUVZVeFdDeEhRVWN6UTBFc1JVRkJSM0ZsTEUxQlFVMXlWQ3hGUVVGUkxFTkJRVU5wVXl4SlFVMHZRaXhQUVVGUExFMUJjMFZsY1VJc1EwRkJNa0oyWml4RlFVRlRNR01zUlVGQlV6UkNMRWRCZGtkMlJTeFRRVUV3UW5SbExFVkJRVk5wUWl4SFFVTnFReXhQUVVGUExGTkJRVk41WWl4RlFVRlJkMElzUjBGUGRFSXNUMEZPUVVFc1JVRkJUVmtzWlVGQmFVSTVaU3hGUVVWdVFqQmpMRVZCUVZGcFF5eFJRVU5XVVN4SFFVRmhReXhKUVVGSmNHWXNSVUZCVTJ0bExFVkJRVTF0UWl4TFFVRk5jR1VzUjBGSGFrTkJMRVZCUVVkeFpTeE5RVUZOZEdZc1JVRkJVeXhEUVVGRGEyVXNTMEVyUm5sRWMwSXNRMEZCYVVKNFppeEZRVUZUTUdNc1IwRkRMMGQ2WWl4RlFVRkhLMk1zYlVKQlFYRkNUeXhGUVVGaE4wSXNSVUZCVlN4TFFVTXZRM3BpTEVWQlFVZHJaQ3huUWtGQmEwSkJMRVZCUTNKQ2JHUXNSVUZCUnpCa0xFOUJRVk5CTEVWQlExb3haQ3hGUVVGSGIyTXNVMEZCVjA4c1JVRkRaRzFDTEVWQlFWTnVRaXhIUVVGUE0yTXNSVUZEYUVKcVFpeEZRVUZSZDBzc2FVSkJRV2xDWjFVc1JVRkJWM1prTEVWQlFVbHpaQ3hIUVVjeFF5eFRRVUZUYTBJc1IwRkJZM3BtTEVWQlFWTXJaQ3hGUVVGUlV5eEZRVUZYT1VJc1JVRkJVM05DTEVkQlF6RkVMRTFCUVUwdll5eEZRVUZMTm1Nc1IwRkJXVU1zUlVGQlQxTXNSMEZCV1RsQ0xFVkJRVk56UWl4SFFVVTVReTlqTEVsQlNVeHFRaXhGUVVGUk1Fc3NiMEpCUVc5Q09GUXNSVUZCVjNaa0xFVkJRVWw1WlN4UlFVRlJNVUlzVjBGRE5VTkVMRVZCUVU5VExFZEJRVmQyWkN4RlFVRkhiMk1zVjBGaE9VSXNVMEZCVTI5Q0xFZEJRV0ZRTEVkQlIzQkNMRTlCUkVGQkxFVkJRVkZCTEVWQlFVMHZhRUlzVVVGQlVTdG5RaXhIUVVGblFpeEpRVU12UWtrc1IwRkJZVmtzU1VGQlZVRXNSVUZIYUVNc1RVRkJUV2xDTEVkQlFXVXNRMEZEYmtKUkxFZEJRVWN6Wml4RlFVRlRhMlVzUlVGQlQzaENMRVZCUVZNMFFpeEhRVU14UWtrc1IwRkJWekZsTEVWQlFWTnJaU3hGUVVGUGVFSXNSVUZCVXpSQ0xFZEJRV01zU1VGSGNFUnpRaXhKUVVGSk5XWXNSVUZCVTJ0bExFVkJRVTk0UWl4RlFVRlRORUlzUjBGRE0wSkpMRWRCUVZjeFpTeEZRVUZUYTJVc1JVRkJUM2hDTEVWQlFWTTBRaXhIUVVGakxFbEJSM0JFWXl4SlFVRkpjR1lzUlVGQlUzRmxMRVZCUVcxQ00wSXNSVUZCVXpSQ0xFZEJRM1pETEVkQlFXbERMR2xDUVVGMFFrUXNTVUZCYlVOeVpTeEZRVU0xUXl4UFFVZEdMRTFCUVU5MVpTeEZRVUZaU2l4RlFVRnBRa3NzUjBGQllVb3NSMEZCWjBKRExFVkJRVzFDTTBJc1JVRkJVelJDTEVkQlEzWkdkVUlzUlVGQlkzSkNMRWxCUVdOSUxFVkJRelZDVGl4RlFVRlRSaXhIUVVGVE4yUXNSMEZEYkVJNFppeEZRVUZqZWtJc1JVRkJhMEowUml4WFFVRlhMRXRCUldwRUxGRkJRU3RDTEVsQlFYQkNiMFlzUlVGQmFVTXNRMEZGTVVNc1NVRkJTMG9zU1VGQlYwRXNSVUZCVDFNc1IwRkRja0lzVDBGSlJpeFpRVVJCYVVJc1IwRkJZM3BtTEVWQlFWTXJaQ3hGUVVGUlV5eEZRVUZYVEN4RlFVRnBRa2tzUlVGQllUZENMRVZCUVZVc1RVRkphRVp2UkN4SFFVTkdjbWxDTEU5QlFVOHlSQ3hMUVVGTE1tTXNSMEZCVVhwakxGTkJRVkY1WlN4TFFUbERiRU1zVTBGQmEwTXZaaXhGUVVGVEsyUXNSVUZCVVZNc1JVRkJWM2RDTEVkQlF6VkVMRTFCUVUxRExFVkJRVzlDYkVNc1JVRkJUMU1zU1VGQll5eEhRVU12UXk5blFpeFBRVUZQTWtRc1MwRkJTelpsTEVkQlFXMUNNMlVzVTBGQlVUUmxMRWxCUTNKRExFZEJRVWxCTEVWQlFWZHdTQ3hUUVVGVGEwZ3NSMEZCV1N4RFFVTnNReXhOUVVGTk9VSXNSVUZCVVN0Q0xFVkJRV3RDUXl4SFFVTm9RMVFzUjBGQlkzcG1MRVZCUVZNclpDeEZRVUZSVXl4RlFVRlhUaXhGUVVGTlF5eG5Ra0ZCYVVKRUxFVkJRVTFHTEhkQ1FUQkRja1Z0UXl4RFFVRjVRbTVuUWl4RlFVRlRLMlFzUlVGQlVXZERMRVZCUVdNeFFpeEZRVUZyUWpGTkxFMUJRVTBzVDBGSmNFWXNUVUZCVFhOUExFVkJRVzlDYkVNc1JVRkJUMU1zU1VGQll5eEhRVU12UXk5blFpeFBRVUZQTWtRc1MwRkJTelpsTEVkQlFXMUNNMlVzVTBGQlVUaGxMRWxCUTNKRExFMUJRVTFHTEVWQlFXRkZMRVZCUVZscWEwSXNVVUZCVVdkb1FpeEhRVUZsTEVsQlJYUkVMRWxCUVVzd1F5eEhRVUZsZUVJc1JVRkJhMEoyUml4VFFVRlRiMGdzUjBGQllTeERRVU14UkN4TlFVRk5hRU1zUlVGQlVTdENMRVZCUVd0Q1J5eEhRVU5vUTFnc1IwRkJZM3BtTEVWQlFWTXJaQ3hGUVVGUlV5eEZRVUZYVGl4RlFVRk5ReXhuUWtGQmFVSkVMRVZCUVUxR0xIbENRVXMzUlhGRExGRkJRVkZ5WjBJc1JVRkJVMnRsTEVWQlFVOTJhRUlzUjBGRGRFSXNSMEZCY1VJc2FVSkJRVloxYUVJc1NVRkJkVUpzWlN4RlFVTm9ReXhQUVVGUExFdEJSMVFzVFVGQlRYTmlMRVZCUVVsU0xFdEJRMG93UkN4RlFVRlpReXhIUVVGaFVDeEhRVU42UWpKQ0xFVkJRV016UWl4SlFVRlZUU3hGUVVONFFqaENMRVZCUVZjMVF5eEhRVUZoZGtnc1NVRkJTWEZKTEVkQlEyeERMRWxCUVVrclFpeEZRVU5CUXl4SFFVRlZMRVZCUTFaRExFZEJRV2xDTEVWQlEycENReXhIUVVGdFFpeEZRVU51UWtNc1JVRkJUU3hMUVRSRFZpeFBRVEZEU1dRc1IwRkJaWFpGTEVsQlEycENhVVlzUlVGQlkycEdMRVZCUVVWcVF5eE5RVUZOTmtVc1JVRkJUM1pvUWl4SFFVTTNRakpsTEVWQlFVVjBZaXhIUVVGVGNXZENMRkZCUVZGRkxFZEJRMjVDUXl4SFFVRlhSQ3hGUVVGWlN5eDFRa0ZEZGtKSUxFZEJRV3RDUml4RlFVRlpUU3huUTBGRE9VSklMRVZCUVcxQ1NDeEZRVUZaVHl4elFrRkhOMEpTTEVkQlEwWkxMRVZCUVUwdllpeFRRVUZUYldNc1dVRkJXU3hqUVVNelFrb3NSVUZCU1Vzc1ZVRkJWWGhETEVWQlFWZG5ReXhIUVVGVExFbEJSV3hEUnl4RlFVRk5MRWxCUVVsTkxGbEJRVmt2UXl4RlFVRlBMRU5CUXpOQ2MwTXNVVUZCUVVFc1JVRkRRVlVzV1VGQldTeFRRVXRKTEVsQlFWUjJhMElzUjBGRFZHTXNUMEZCVHpKRUxFdEJRVXQ2UlN4SFFVRk5Na1VzVTBGQlVTOUVMRWxCUTNoQ1JTeFBRVUZQUXl4bFFVRmxhV3BDTEVWQlFVdHdha0lzUlVGQlN5eERRVU01UWtzc1NVRkJSeXhKUVVOTmFrSXNSVUZCUzFrc1VVRlBhRUp0YWtJc1IwRkRSa01zUlVGQlNWRXNhVUpCUjBaV0xFZEJRMFo2WjBJc1JVRkJVVzlhTEdOQlFXTjFTQ3hIUVVkd1FrRXNSVUZCU1VRc2RVSkJRVEpETEVsQlFXaENTQ3hIUVVOcVEwRXNSVUZCV1Zrc2FVSkJSMUJTTEVsQmFVSk1VeXhIUVVGaExFbEJRVWt6VVN4SlFVTnFRalJSTEVkQlFVOHNRMEZEV0M5UUxFbEJRVWwwVWl4RlFVRlRla01zUlVGQlN6Qk5MRWRCUTFodFdDeEhRVUZYYWt3c1NVRkJTVzVYTEVsQlEyeENiMmhDTEVkQlFWYzVVQ3hKUVVGSmRGSXNSVUZCVXl4SlFVRkplVkVzUzBGSE9VSXNUVUZCVFRaUkxFVkJRV05HTEVkQlFWZDRha0lzU1VGQlNXOURMRWRCUnpsQ2MyaENMRVZCUVZsdVRDeEpRVUZKTlZrc1NVRkJOa0lzU1VGQmNrSXJha0lzUlVGQldVTXNTMEZOZWtORUxFVkJRVmxvVVN4SlFVRkpMMVFzUlVGQlN6Qk5MRWRCU201Q2RWZ3NVVUZCVVVNc1RVRkJUU3dyUlVGQkswVnNUQ3hOUVVGTmJVd3NTMEZCUzBvc1JVRkJXV3huUWl4UlFVRlJMRkZCVDJoSmVFUXNTVUZCUnl4RFFVRkRiME1zUlVGQlUzcERMRWxCUTFBMmFrSXNSMEZCVjJwTUxFbEJRVWx1Vnl4SlFVTldiMmhDTEVkQlFWZDRha0lzU1VGQlNXOURMRWRCUVZOd1F5eEpRVUZKVEN4SlFVYzVRaXhMUVVkVWIydENMRTlCUVU4emFFSXNSVUZCVTNwRExFZEJRMlFzU1VGQlN6WnFRaXhIUVVGWGFrd3NTVUZCU1c1WExFZEJRMnhDTEU5QlIwWXNUVUZCVFhOb1FpeEZRVUZqUml4SFFVRlhlR3BDTEVsQlFVbHZReXhIUVVOdVEzTm9RaXhGUVVGWlRTeFBRVUZQY210Q0xFZEJSVTBzU1VGQmNrSXJha0lzUlVGQldVTXNUVUZEWkVnc1IwRkJWMUVzVDBGQlR6Vm9RaXhMUVc5Q2VFSXNUVUZCVFRab1FpeEhRVU5LUXl4WlFVRlpPV2hDTEVsQlExWkJMRVZCUVZWM1dpeEhRVUZYZUZvc1RVRk5ja0k1UkN4TFFVRkxObXhDTEZOQlFWY3ZhRUlzUlVGRGFFSnhhRUlzUjBGQlN5OVFMRWxCUVVsd1ZpeExRVUZMTm14Q0xGTkJRVlUzYkVJc1MwRkJTelJzUWl4WlFVRlpSU3hUUVVGVk9XeENMRTlCUjNKRUsyeENMRlZCUTBWYUxFZEJRVXROTEU5QlFVOTZiRUlzUzBGQlN6WnNRaXhUUVVGVk4yeENMRXRCUVVzMGJFSXNXVUZCV1VVc1ZVRkROVU0zUXl4SFFVRmhReXhKUVVGSmJHcENMRXRCUVVzMmJFSXNVMEZCVlRkc1FpeExRVUZMTkd4Q0xGbEJRVmxKTEZkQlEycEVlbXRDTEU5QlFVOHdhMElzYjBKQlFXOUNhbTFDTEUxQlFVMXZSaXhUUVVGUk9HZENMRWxCUTNaRGJHMUNMRXRCUVV0cmJVSXNSMEZCWjBJc1VVRkpla0pETEdWQlFXVm9TQ3hGUVVGVmNtSXNSVUZCVTNOcFFpeEhRVUZoTEVkQlF6ZERlRWNzUjBGQmRVSlVMRVZCUVZWeVlpeEZRVUZUYzJsQ0xFZEJTelZEUXl4dFFrRkJiVUoyYVVJc1IwRkRha0lzVDBGQlQzRm9RaXhIUVVGTGVtcENMRWxCUVVrMFlpeEhRVUZYZUZvc1IwRkJWVGxFTEV0QlFVczRiRUlzVlVGSE5VTlBMREpDUVVFeVFuWnBRaXhGUVVGVE1sb3NSVUZCVXl4SlFVTXpReXhQUVVGUGVtUXNTMEZCUzNOdFFpeFpRVUZaZUdsQ0xFbEJRVmtzU1VGQlNUbEVMRXRCUVVzNFJDeEZRVUV5UWl4cFFrRkJXREphTEVWQlFYTkNRU3hGUVVGVExFMUJSMjVHT0Vrc2NVSkJRMVFzVFVGeVExa3NVVUYzUTBoc1NDeHJRa0ZEVkN4TlFVRk5MRWxCUVVsdFNDeE5RVUZOTEhWRlFVZFFWaXh6UWtGRFZDeE5RVUZQTEUxQlFVMDViRUlzUzBGQlMzRm1MRTlCUjFReVJ5eDFRa0ZEVkN4TlFVRlBMRWxCUVVsb2JVSXNTMEZCU3poc1FpeFpRVmx3UWl4TlFVRk5WeXhIUVVGMVFpeERRVUZEUXl4RlFVRlhReXhGUVVGVExGVkJRMmhFTEUxQlFVMURMRVZCUVdFc1owSkJRV2RDUml4RlFVRlZWaXhaUVVOMlEzQm9RaXhGUVVGUE9HaENMRVZCUVZWeVNDeExRVU4yUWpSRUxFZEJRV0ZSTEVkQlFVY3ZZU3hUUVVGVmEyVXNSVUZCV1N4eFFrRkJjVUpvYVVJc1QwRkJWU3hUUVVGVmIyUXNSMEZMTjBVc1IwRktTU3hEUVVGRExFbEJRVXNzVVVGQlVYQkdMRk5CUVZNMVl5eExRVUZMTm0xQ0xGVkJRemxDTjBVc1JVRkJUV2xFTEdsQ1FVZEtMMGNzUjBGQlYyeGxMRTFCUTJJc1QwRkhSaXhOUVVGTksxQXNSVUZCVTJsT0xFZEJRWFZDYUdRc1QwRkJVMEVzUzBGQlN6aHRRaXhSUVVGUkxFbEJRVWxzYVVJc1MwRkRMME00YUVJc1JVRkJWVXNzYjBKQlFXOUNhRmdzUjBGRmRFTTBWeXhUUVRaQ1lpeE5RVUZOU3l4WFFVRmpja0lzUjBGRlVIUkhMR3RDUVVOVUxFMUJhRUpYTEZGQmIwSmlORWdzVVVGSFJTeEhRVVp0UW1oRkxFZEJRV0ZyUWl4UlFVRlJibXRDTEV0QlFVczJiRUlzVTBGc1FqZENMR3RDUVc5Q1JISkNMR2xDUVVOaUxFOUJSMFo0YTBJc1MwRkJTelpzUWl4VFFVRlRlRWdzVlVGQlZXOUlMRTlCY2tKR0xGRkJkVUowUWl4TlFVRk5WeXhGUVVGaGNHMUNMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlY0Vnl4VFFYaENja0lzVVVFd1FuUkNOMGdzUzBGQlMyMXRRaXhuUWtGQlpTeEpRVUZOYm0xQ0xFdEJRVXRyYmtJc2JVSkJRVzFDYkc1Q0xFdEJRVXMyYkVJc1UwRkJWVThzUjBGSmJrVmpMR3RDUVVORmJHNUNMRXRCUVVzMmJFSXNVMEZCVTBvc1UwRkZaSGhETEVkQlFXRnJRaXhSUVVGUmJtdENMRXRCUVVzMmJFSXNVMEZzUTFRc2JVSkJiVU5xUWpkc1FpeExRVUZMSzJ4Q0xGVkJTVkJOTEhWQ1FVRjFRalZKTEVkQlEzSkNMRTlCUVU5NlpDeExRVUZMYlc1Q0xFMUJRVXNzVjBGRFppeE5RVUZOZEZvc1JVRkJUMjFhTEVkQlFVMUVMRzlDUVVGdlFpOXRRaXhOUVVWMlF5eEhRVUZ6UWl4cFFrRkJXSGxrTEVWQlFWZ3NRMEZKUVN4UlFVRnhRbmhqTEVsQlFXcENORTBzUlVGQlN6UlFMRWxCUVhsQ1FTeEZRVUZQV2l4WFFVRlhMRTFCUVcxQ0xHZENRVUZZV1N4RlFVTXhSQ3hOUVVGTkxFbEJRVWxMTEZWQlFWVXNiMEpCUVc5Q1RDeE5RVWN4UXpWUUxFVkJRVXMwVUN4SFFVRlJlbVFzVjBGWmJrSjViVUlzUjBGQmNVSlBMRWRCUVU4c1UwRlJOVUl2U0N4SFFVRnRRaXRJTEVsQlkyNUNMRTFCUzAxSkxFZEJRWGxDTERSQ1FWRXZRaXhOUVVGTlF5eFhRVUZsTVVJc1IwRkZVblJITEd0Q1FVTlVMRTFCYUVKWExGTkJiMEppYVVrc1UwRkZSWFJ1UWl4TFFVRkxObXhDTEZOQlFWTnVaMElzWVVGQllTeGxRVUZuUWpGR0xFdEJRVXMyYkVJc1UwRkJVM2hJTEZWQlFWVnBTaXhQUVd4Q00wTXNWMEZ6UWpGQ2FrSXNkVUpCUVhWQ05Va3NSMEZEY2tJc1QwRkJUM3BrTEV0QlFVdHRia0lzVFVGQlN5eFhRVU5tTEUxQlFVMTBXaXhGUVVGUGQxb3NSMEZCVDA0c2IwSkJRVzlDTDIxQ0xFMUJSWHBDTEZkQlFWaDVaQ3hIUVVOR05WQXNSVUZCU3pSUUxGTkJhME5pTEZOQlFWTTRTaXhIUVVGalF5eEhRVU55UWl4TlFVRlpMRk5CUVZKQkxFZEJTVkVzVlVGQlVrRXNTVUZKUVVFc1NVRkJVWEpJTEU5QlFVOXhTQ3hIUVVGTGNtcENMRmRCUTJabll5eFBRVUZQY1Vnc1IwRkhTaXhMUVVGU1FTeEhRVUZ6UWl4VFFVRlNRU3hGUVVOVUxFdEJSMFpCTEVkQlIxUXNVMEZCVTBNc1IwRkJhVUp3YlVJc1IwRkRlRUlzVDBGQlQwRXNSVUZCU1hCQ0xGRkJRVkVzVlVGQlZYbHVRaXhIUVVGUExFbEJRVWxCTEVWQlFVbDBia0lzYTBKQk1VTTVRelpwUWl4SFFVRmhVU3hIUVVGSEwyRXNVMEYwUTJVc01rSkJjME50UWpCbExFbEJRWGRDY0VZc1NVRkRlRVZCTEVWQlFVMXBSQ3hwUWtGRFRpeE5RVUZOTUVNc1JVRkJVek5HTEVWQlFVMXFVeXhQUVVGUEsxY3NVVUZCVVUwc1NVRkRka0pETEVkQlFVOU9MRzlDUVVGdlFsa3NSMEZEYmtOTUxGbEJVMUJ5U1N4SFFVRnRRbTlKTEVsQlowTnVRaXhOUVVGTlR5eEhRVUZqTEVOQlEyeENReXhwUWtGQmFVSXZha0lzUlVGQlUzcERMRVZCUVV0aExFZEJRemRDTkVJc1JVRkJVVFJDTEdGQlFXRXNWMEZCVnl0b1FpeEhRVUZwUW5CdFFpeExRVUZSWVN4SlFVY3pSRFJzUWl4dlFrRkJiMEpvYTBJc1JVRkJVM3BETEVkQlF6TkNlVU1zUlVGQlVUSkNMR2RDUVVGblFpeFhRVUZYWjJsQ0xFZEJRV2xDY0cxQ0xFOUJSM1JFTUcxQ0xHdENRVUZyUW1wclFpeEhRVU5vUWl4SlFVRkxRU3hGUVVOSUxFMUJRVThzUjBGSFZDeE5RVUZOZVVJc1JVRkJZU3hIUVUxdVFpeFBRVXhCYUVVc1QwRkJUekpFTEV0QlFVdHdRaXhGUVVGUmEydENMRk5CUVZOMFpTeFJRVUZQY2trc1IwRkJUMEVzUlVGQlNYZGlMRmRCUVZjc1VVRkJUM3BZTEZOQlFWRXZSQ3hKUVVOMlJTeEpRVUZKTkcxQ0xFVkJRVlUxYlVJc1JVRkJTWEJDTEZGQlFWRXNUVUZCVHl4SlFVTnFRMmR2UWl4RlFVRlZRU3hGUVVGUlF5eFBRVUZQTEVkQlFVYzVia0lzWTBGQlowSTJia0lzUlVGQlVYaFRMRTFCUVUwc1JVRkJSM2RUTEVWQlFWRnNWU3hSUVVOeVJYaFBMRVZCUVZjd2FVSXNSMEZCVjFZc1IwRkJZM3BxUWl4RlFVRlJhMnRDTEZGQlFWRXpiVUlzVDBGRkwwTnJSU3hIUVVkVU5HbENMR2xDUVVGblFpeERRVUZEY210Q0xFVkJRVk42UXl4SlFVTnFRbXR0UWl4SFFVRmplbXBDTEVWQlFWRTBXU3hoUVVGaExGZEJRVmNyU3l4SFFVRnBRbkJ0UWl4UFFVZDRSV3RMTEU5QlFVOTZTQ3hIUVVOTUxFMUJRVTFwUkN4RlFVRlBha1FzUlVGQlVTdERMSGRDUVVOeVFpeE5RVUZQTEVOQlEweGFMRWxCUVV0akxFVkJRVXRrTEVsQlFVMHZRaXhQUVVGUEswc3NXVUZEZGtJMVRTeExRVUZOTUVVc1JVRkJTekZGTEV0QlFVODJRaXhQUVVGUE5rc3NZMEZKTjBKcVNpeFRRVUZUYUVNc1NVRkRRU3hEUVVOTWJVTXNTVUZCUzI1RExFVkJRVkU0UkN4VlFVTmlka1lzUzBGQlRYbENMRVZCUVZFMlJDeGpRV0ZrZVdkQ0xFZEJRV2xDTEVOQlEzSkNOVk1zUzBGQlNTeERRVUZEYVVnc1JVRkJWVE5aTEVWQlFWVTBSU3hUUVVGVFF5eHJRa0ZEZWtJc1IwRkJSM3BHTEZWQlFWVnhRaXhSUVVGUmVrVXNWVUZCVld0cVFpeHBRa0ZCYVVKc2FFSXNTMEZCUzJkRExFVkJRVk15V1N4SlFVZDJSVFJNTEZGQlFVOHNRMEZCUXpWTUxFVkJRVlV6V1N4RlFVRlZORVVzVTBGQlUwTXNhMEpCUXpWQ2NFVXNVVUZCVVhwRkxGVkJRVlUyVEN4alFVRmpOMG9zUzBGQlMyZERMRVZCUVZNeVdTeEhRVWQyUkRaTUxGTkJRVkVzUTBGQlEzaHJRaXhGUVVGVE1sa3NTVUZEVkN4SFFVRkhkbG9zVlVGQlZWa3NSVUZCVVhkclFpeFZRVUZWTldVc1VVRkJUek5DTEVkQlFWTkJMRVZCUVUxM1owSXNVVUZCVVRsTUxFdEJSM1JGSzB3c1VVRkJVVEZyUWl4RlFVRlRNbGtzUjBGRFppeE5RVUZOSzB3c1JVRkJWU3hIUVVOb1FpeEpRVUZKUXl4RlFVRlhNMnRDTEVWQlFWRnpSU3hYUVVWMlFpeExRVUZQY1dkQ0xFZEJRVmxCTEVWQlFWTndUQ3hYUVVGaFl5eExRVUZMUXl4alFXeENhRU1zU1VGclFtZEVjVXNzUlVGQlUzQk1MRlZCUTJwRmIwd3NSVUZCVTBZc1VVRkJVVGxNTEVsQlEyNUNLMHdzUlVGQlVYWlVMRXRCUVV0M1ZDeEhRVWRtUVN4RlFVRlhRU3hGUVVGVGNtZENMRmRCUjNSQ0xFOUJRVTl2WjBJc1IwRkhWRVVzUzBGQlN6VnJRaXhGUVVGVE1sa3NSMEZEV2l4SlFVRkphMDBzUlVGQlZ6ZHJRaXhGUVVGUk9HdENMSFZDUVVWMlFpeExRVUZQUkN4SFFVRlZMRU5CUTJZc1IwRkJTVUVzUlVGQlUwb3NVVUZCVVRsTUxFZEJRMjVDTEUxQlFVOHNRMEZCUTJ0TkxFZEJSMVpCTEVWQlFWZEJMRVZCUVZORExIVkNRVWQwUWl4TlFVRlBMRWxCUjFReFowSXNTMEZCUzNCRkxFVkJRVk15V1N4SFFVTmFMRWxCUVVsMlZTeEZRVUZQY0VVc1JVRkJVU3RyUWl4dFFrRkZia0lzUzBGQlR6Tm5RaXhIUVVGTkxFTkJRMWdzUjBGQlNVRXNSVUZCUzNGblFpeFJRVUZST1V3c1IwRkRaaXhOUVVGUExFTkJRVU4yVlN4SFFVZFdRU3hGUVVGUFFTeEZRVUZMTW1kQ0xHMUNRVWRrTEUxQlFVOHNTVUZIVkVNc2EwSkJRV3RDYUd4Q0xFZEJRMmhDTEUxQlFVMXBiRUlzUlVGQllTeERRVUZETEVsQlFVc3NVMEZCVlN4UlFVRlRMRmRCUVZrc1UwRkJWU3hWUVVGWExHRkJRV01zTkVKQlFUUkNjbEFzUzBGQlNTdERMRWRCUVZrc1IwRkJSMEVzTWtKQlFXbERkVTBzUzBGQlN5eE5RVU5vVEN4UFFVRlBhSEJDTEV0QlFVdDNWaXhMUVVGTGRWUXNSVUZCV1dwc1FpeEhRVUZUTkVZc1VVRkJUM1ZtTEVsQlFVOHZTeXhIUVVGWEswc3NTVUZCVDJ4TUxFZEJRVlZyVEN4UFFXbENPVVZETEVkQlFWTXNWMEZUVkVNc1IwRkJXU3hEUVVOb1FrTXNVMEZCVlN4SlFVTldReXhWUVVGVkxFVkJRMVpETEU5QlFVOHNSVUZEVUVNc1RVRkJUeXhSUVVOUVF5eE5RVUZOTEVWQlEwNURMRTlCUVU4c1IwRkZTRU1zUjBGQlowSXNRMEZEY0VKT0xGTkJRVlVzYlVKQlExWkRMRk5CUVZVc1ZVRkRWa01zVFVGQlR5eHRRa0ZEVUVNc1RVRkJUeXh0UWtGRFVFTXNTMEZCVFN4VlFVTk9ReXhOUVVGUExGZEJSVWhGTEVkQlFXRXNUMEZEWWtNc1IwRkJZU3hQUVVOaVF5eEhRVUZwUWl4UFFVTnFRa01zUjBGQmEwSXNVVUZEYkVKRExFZEJRVzFDTEVOQlEzWkNMRlZCUVd0Q1JDeEhRVU5zUWl4WFFVRnRRa1FzU1VGSFprY3NSMEZCWVN4dFFrRmhZa01zUjBGQmMwSXNVMEZSZEVKRExFZEJRWFZDTEhkQ1FXZENOMElzVFVGQlRVTXNWMEZCYVVKNFJTeEhRVU55UWtNc1dVRkJXVGxvUWl4RlFVRlRNbG9zUjBGRGJrSXlUU3hOUVVGTmRHMUNMRWRCUTA0NVJDeExRVUZMY1hGQ0xFOUJRVk1zUzBGRFpISnhRaXhMUVVGTGMzRkNMRlZCUVZrc1MwRkRha0owY1VJc1MwRkJTM1Z4UWl4bFFVRnBRaXhMUVVOMFFuWnhRaXhMUVVGTGQzRkNMRmRCUVZrc1JVRkRha0o0Y1VJc1MwRkJTM2x4UWl4WlFVRmhMRVZCUTJ4Q2VuRkNMRXRCUVVzd2NVSXNZVUZCWlN4TFFVTndRakZ4UWl4TFFVRkxNbkZDTEZsQlFXTXNSVUZEYmtJemNVSXNTMEZCU3pSeFFpeFpRVUZqTEVWQlEyNUNOWEZDTEV0QlFVczJjVUlzVVVGQlZUZHhRaXhMUVVGTE9IRkNMRmRCUVZkeVRpeEhRVU12UW5wa0xFdEJRVXNyY1VJc2JVSkJRWEZDTTBNc1IwRkJaVU1zVVVGNFFtcENMSFZDUVhkQ09FTnliMElzUzBGQlN6WnNRaXhWUVVNelJUZHNRaXhMUVVGTFozSkNMR2RDUVVGclFpeHBRa0ZCYTBKMGFVSXNVMEZCVTBNc2FVSkJRVzFDVHl4VlFVRlZLMmhDTEdWQlFXbENMRVZCUTJoSGFuSkNMRXRCUVV0cmNrSXNZMEZCWjBJeFNDeFJRVUZSZEdZc1QwRkJUMmx1UWl4alFVVndRMjV5UWl4TFFVRkxiM0pDTEhGQ1FVbEpReXh4UWtGRFZDeFBRVUZQYkVNc1IwRkhSVGxLTEd0Q1FVTlVMRTlCUVU4MlNpeEhRVWxVYUdoQ0xFOUJRMFZzU1N4TFFVRkxjM0pDTEU5QlFVOHpRaXhKUVVka05FSXNiVUpCUjA4M2FVSXNVMEZCVXpocFFpeFJRVUZWZWs0c1IwRkJWUzlrTEV0QlFVczJiRUlzVjBGRGNrTTNiRUlzUzBGQlMydEpMRTlCU1ZSM1owSXNUMEZEUlRGdlFpeExRVUZMYzNKQ0xFOUJRVTh4UWl4SlFVZGtUQ3hOUVVGTmRrZ3NSMEZEUTBFc1NVRkRTR2hwUWl4TFFVRkxkM0ZDTEZkQlFWa3NSMEZIWm5CRExFZEJRV1ZETEZGQkwwUkpMREpEUVN0RWQwSnliMElzUzBGQlN6WnNRaXhaUVVOc1JEVkpMRWRCUVhGQ2FtUXNTMEZCU3pac1FpeFZRVU14UWpkc1FpeExRVUZMZVhKQ0xFOUJRVTBzU1VGSFlrTXNZMEZCWXpGeVFpeExRVUZMYzNGQ0xGZEJRMjVDZEhGQ0xFdEJRVXR6Y1VJc1ZVRkJXU3hMUVVkdVFtMUNMRTFCUVUxNlNpeEhRVU5EUVN4SlFVTklhR2xDTEV0QlFVdDNjVUlzVjBGQldTeEhRVWRtZUhGQ0xFdEJRVXR6Y1VJc1dVRkRVRzlDTEdOQlFXTXhja0lzUzBGQlMzTnhRaXhYUVVOdVFuUnhRaXhMUVVGTGMzRkNMRlZCUVZrc1RVRkhablJ4UWl4TFFVRkxObkZDTEZOQlFWYzNjVUlzUzBGQlN6WnhRaXhSUVVGUmVrSXNWMEZCWVhCd1FpeExRVUZMZDNGQ0xGbEJRMnBFZUhGQ0xFdEJRVXN5Y2tJc2EwSkJSVXd6Y2tJc1MwRkJTM054UWl4VlFVRlpjMElzWVVGQllXeHFRaXhUUVVGVGJXcENMR2RDUVVGclFqZHlRaXhMUVVGTGRYSkNMR2RDUVVGclFuWnlRaXhMUVVGTGEwa3NUVUZCVFRScVFpeExRVUZMT1hKQ0xFMUJRVTlCTEV0QlFVczJjVUlzVVVGQlVYcENMRmRCU1hoSU1rTXNSMEZCUnpWeVFpeEhRVU5FU0N4TFFVRkxkWEZDTEdWQlFXbENia01zUjBGQlpVTXNVVUZCVVRaQ0xFZEJRWE5DYkhGQ0xFdEJRVXMyYkVJc1ZVRkZlRVVzVFVGQlRXMUhMRVZCUVdOb2MwSXNTMEZCUzJselFpeGpRVUZqYW5OQ0xFdEJRVXQxY1VJc1owSkJSVFZETEVkQlFVbHdjVUlzUlVGQlVVZ3NTMEZCUzNGeFFpeFBRVUZQZEZjc1QwRkJVeXhIUVVGTE5WUXNSVUZCVVN4RlFVTTFReXhQUVVkR0xFZEJRVWxJTEV0QlFVdDVjVUlzVjBGRlVDeFpRVVJCZUVnc1IwRkJZVk1zU1VGQlNURnFRaXhMUVVGTE5teENMRk5CUVZWdFJTeEpRVUZaTEVsQlFVMW9jVUlzUzBGQlN5dHlRaXhIUVVGSE5YSkNMRXRCU1RWRUxFZEJRVWsyY2tJc1NVRkJaMEkzY2tJc1JVRkhiRUlzVDBGR1FVZ3NTMEZCUzNWd1FpeGhRVU5NZG5CQ0xFdEJRVXQ1Y2tJc1VVRkpVQ3hOUVVGTmFsTXNSVUZCVVhKYUxFVkJRVkUyY2tJc1JVRkJZM0pETEVkQlFXRkRMRWRCUldwRU5YQkNMRXRCUVV0emNrSXNUMEZCVHpsU0xFVkJRVTk0V2l4TFFVRkxjWEZDTEU5QlFVOXNjVUlzU1VGSmFrTXljVUlzVjBGQlYzSk9MRWRCVFZRc1QwRk1RVUVzUlVGQlV5eEpRVUZMTUV3c1RVRkRWSFpDTEVkQlFWbEhMR3RDUVVGclFpOXVRaXhMUVVGTE5teENMR0ZCUTJoQ0xHbENRVUZZY0Vrc1JVRkJjMEpCTEVWQlFWTXNTVUZGTlVOR0xFZEJRV2RDTWt3c1IwRkJVWHBNTEVWQlFWRnBUU3hKUVVONlFtcE5MRVZCUjFSNVR5eGxRVU5GTEUxQlFVMURMRVZCUVZreGJFSXNTMEZCUzJsQ0xFbEJRVWt4U0N4TFFVRkxOSEZDTEdGQlJXaERMRWRCUVVsMVFpeEhRV3BNWjBJc1IwRnJUR3hDTEU5QlIwWXNUVUZCVFhaaUxFVkJRVmwxWWl4RlFVRlpibk5DTEV0QlFVczBjVUlzV1VGRGJrTTFjVUlzUzBGQlN6UnhRaXhaUVVGakxFVkJSV1JvWVN4SFFVbE1OVkVzUzBGQlMzTnlRaXhQUVVGUE1XRXNSVUZCV1N4RlFVRkphMW9zUjBGQmEwSkVMRWxCUjJoRWRVSXNjVUpCUTAxd2NrSXNTMEZCU3paeFFpeFJRVUZSZUVJc1ZVRkRabkJITEVkQlFXRlJMRWRCUVVkNmFrSXNTMEZCU3pac1FpeFRRWFJMVEN4MVFrRnpTemhDTjBRc1IwRkJVMmhwUWl4TFFVRkxiM05DTEZOQlFWTndTeXhMUVVjMVF5eFZRVUYyUW1ocFFpeExRVUZMTm5GQ0xGRkJRVkYwUWl4UlFVTm1kRWNzUjBGQllWRXNSMEZCUjNwcVFpeExRVUZMTm14Q0xGTkJla3RHTERCQ1FYbExPRUkzUkN4SFFVRlRhR2xDTEV0QlFVdDFjRUlzVFVGQlRYWklMRXRCUTNKRmFVSXNSMEZCWVZFc1IwRkJSM3BxUWl4TFFVRkxObXhDTEZOQmVrdEdMREJDUVhsTE9FSTNSQ3hIUVVGVGFHbENMRXRCUVV0NWNrSXNUVUZCVFhwS0xFMUJSMjVGYUdsQ0xFdEJRVXMyY1VJc1VVRkJVWEJDTEU5QlFWTjZjRUlzUzBGQlMyZHlRaXhwUWtGRE4wSm9ja0lzUzBGQlMzRnpRaXd3UWtGSlZFRXNNRUpCUTBVc1RVRkJUVU1zUlVGQmNVSjBTeXhIUVVOc1FtaHBRaXhMUVVGTGEzSkNMR2RDUVhoS1R5eFJRWGRLVjJ4S0xFVkJRVTExU3l4aFFYcEtaaXhWUVhsS2JVUjJTeXhGUVVGTmRVc3NZVUZITVVVdmNFSXNSVUZCVVhkbUxFbEJRMUp6U3l4RlFVRnRRblJMTEVkQlEzSkNhR2xDTEV0QlFVc3ljVUlzV1VGQll6TkpMRVZCUVUxM1N5eFJRVU5tZUhOQ0xFdEJRVXRyY2tJc1owSkJRMlpzY2tJc1MwRkJTekp4UWl4WlFVRmpNMGtzUlVGQlRYbExMRkZCUVZFc1IwRkJSMFFzVlVGSmJFTkZMRVZCUVU4eFN5eEpRVVZZYUdsQ0xFdEJRVXMwY1VJc1dVRkJZelZKTEVWQlFVMTVTeXhUUVVGWGVrc3NSVUZCVFhsTExGRkJRVkV4V1N4UFFVRlRMRVZCUVVrc1JVRkJTV2xQTEVWQlFVMTVTeXhSUVVGUkxFZEJRVWRFTEZGQlFWVjRjMElzUzBGQlN6SnhRaXhoUVVjdlJteHZRaXhGUVVGTmRXWXNTVUZEVG5OTExFVkJRVzFDZEVzc1MwRkRja0pvYVVJc1MwRkJTelJ4UWl4WlFVRmpOVWtzUlVGQlRYZExMRkZCUVZWNGMwSXNTMEZCU3pKeFFpeGhRVWN4UXpOeFFpeExRVUZMYTNOQ0xHVkJSWE5DTEZWQlFYWkNiSE5DTEV0QlFVczJjVUlzVVVGQlVYUkNMRkZCVVdaMmNFSXNTMEZCUzNWd1FpeFJRVVZFZG5CQ0xFdEJRVXN3Y1VJc1kwRkRVR2xETEdGQlFXRXpjMElzUzBGQlN6QnhRaXhqUVVkd1FqRnhRaXhMUVVGTE1IRkNMR0ZCUVdWcVN5eFpRVUZYZFVJc1IwRkJVMmhwUWl4TFFVRkxlWEpDTEUxQlFVMTZTaXhKUVhaUU5VSXNTVUYxVURaRWFHbENMRXRCUVVzMmNVSXNVVUZCVVhwQ0xGbEJTWEpIYUVJc1IwRkJaVFZUTEV0QmVFMVBMSEZDUVhkTmFVSjRWaXhMUVVGTE5teENMRlZCUVZWNlowSXNVMEZCVVhkdVFpeEpRVU0xUkROS0xFZEJRV0ZSTEVkQlFVZHRTaXhGUVhaT1J5eDVRa0YxVG5kQ05Vc3NSMEZCVTBFc1JVRkJUV2xFTEhOQ1FVZDRSR3BzUWl4TFFVRkxhM0pDTEdWQlExQnFTU3hIUVVGaFVTeEhRVUZIZW1wQ0xFdEJRVXMyYkVJc1UwRTNUa1FzTWtKQk5rNDRRamRFTEVkQlFWTjRaaXhGUVVGTmQyWXNTMEZEYWtWcFFpeEhRVUZoVVN4SFFVRkhlbXBDTEV0QlFVczJiRUlzVTBFM1RrZ3NlVUpCTms0NFFqZEVMRWRCUVZOMlppeEZRVUZKZFdZc1MwRkZOMFJvYVVJc1MwRkJTelpzUWl4VFFVRlRlRWdzVlVGQlZYUkZMRWxCY0U1SExHMUNRWE5PTTBKclNpeEhRVUZoVVN4SFFVRkhlbXBDTEV0QlFVczJiRUlzVTBGeVQwWXNNRUpCY1U4NFFqZEVMRWRCUVZONFppeEZRVUZOZDJZc1MwRkRhRVZwUWl4SFFVRmhVU3hIUVVGSGVtcENMRXRCUVVzMmJFSXNVMEZ5VDBnc2VVSkJjVTg0UWpkRUxFZEJRVk13U3l4RlFVRkxNVXNzUzBGRE9VUnBRaXhIUVVGaFVTeEhRVUZIZW1wQ0xFdEJRVXMyYkVJc1UwRnlUMG9zZDBKQmNVODRRamRFTEVkQlFWTjJaaXhGUVVGSmRXWXNUVUZKYUVWdlN5eFRRVUZUY0Vzc1IwRkRVQ3hIUVVGSkxHdENRVUZyUW5oVExFdEJRVXQzVXl4RlFVRk5hbE1zVDBGQlR6aFhMRk5CUTNSRExFOUJSMFlzVFVGQlRXcFhMRVZCUVZsdFdpeEhRVUZwUWk5SUxFVkJRVTB6WjBJc1MwRkZja04xVUN4SlFVTkdiMUlzUlVGQlRXbEVMR2xDUVVWT2FteENMRXRCUVV0emNrSXNUMEZCVHpGaExFbEJTV2hDY1dJc1kwRkJZMjV2UWl4SFFVVmFMRTlCUkVFNVJDeExRVUZMY1hGQ0xFOUJRVk4yYlVJc1IwRkJWMEVzUlVGQlVYTkZMRmRCUVdGblowSXNSMEZCWlRWVExFdEJlRTh6UXl4cFFrRjNUeXRFTVZJc1JVRkJVWE5GTEZsQlFXTXNSMEZEYUVkd1NTeExRVUZMY1hGQ0xFOUJRVTgzYUVJc1VVRkJVVEZGTEVkQlJ6ZENLMjlDTEdkQ1FVRm5RbkpVTEVWQlFVOXRTQ3hIUVVOeVFpeE5RVUZOYlUwc1JVRkJVM1JVTEVsQlFWVnRVU3hIUVVONlFpeFBRVUZQYWtvc1IwRkJjVUl4WjBJc1MwRkJTM0Z4UWl4UFFVRlJNVW9zUlVGQlpXMU5MRVZCUVZFNWMwSXNTMEZCU3paeFFpeFJRVUZSY2tJc1RVRkhMMFYxUkN4dFFrRkJiVUp3U3l4RlFVRmxjVXNzUjBGRGFFTXNUVUZCVFVNc1JVRkJZMnAwUWl4TFFVRkxhWE5DTEdOQlFXTjBTaXhIUVVWcVEzVkxMRVZCUVZsc2RFSXNTMEZCUzJselFpeGpRVUZqTjBRc1IwRkJaVU1zVVVGQlVUWkNMRWRCUVhOQ2JIRkNMRXRCUVVzMmJFSXNWMEZGZGtZc1QwRkJUelZETEVkQlFXRnJRaXhSUVVGUmJtdENMRXRCUVVzMmJFSXNVMEUzVVdwQ0xHOUNRVFpSZDBNc1EwRkRkRVJzUkN4alFVRkJRU3hGUVVOQkwxSXNWVUZCVjI5akxFVkJRMWg0U0N4TFFVRk5NRWdzUlVGRFRtNUNMRWRCUVVsclFpeEpRVWxTUlN3eVFrRkJNa0p5Y0VJc1IwRkRla0lzUjBGQlNUbEVMRXRCUVVzcmNVSXNiVUpCUVc5Q0xFTkJRek5DTEUxQlFVMXhReXhGUVVGclFtaEdMRWRCUVdWRExGRkJiRkZ1UWl4VlFXdFJPRU55YjBJc1MwRkJTeXR4UWl4dlFrRkRka1Z4UXl4RlFVRm5RaTlQTEZWQlFWVnZTQ3hQUVVGUGQwVXNTVUZEYWtOdFJDeEZRVUZuUWpOdVFpeG5Ra0ZCWjBJc1owSkJRMmhETEUxQlFVMDBia0lzUlVGQllXcEdMRWRCUVdVMVV5eExRUzlRWWl4dFFrRXJVSE5EZUZZc1MwRkJTeXR4UWl4dlFrRkZhRVVzU1VGQlN5eEpRVUZKY2xjc1JVRkJTU3hGUVVGSFFTeEZRVUZKTWxrc1JVRkJWM1JhTEU5QlFWRlhMRWxCUTNKRExFZEJRVWw1VEN4UFFVRlBiVTRzVTBGQlUwUXNSVUZCVnpOWkxFZEJRVWRuU1N4aFFVRmhMRzlDUVVGeFFpeE5RVUZSTVdNc1MwRkJTMmx6UWl4alFVRmpibTlDTEVkQlFWVXNRMEZEZGtkMWNFSXNSVUZCVnpOWkxFZEJRVWN5U2l4VlFVRlZkRVVzU1VGQlNXdFJMRWxCUXpWQ2IwUXNSVUZCVnpOWkxFZEJRVWRvVUN4aFFVRmhMR1ZCUVdkQ0xGRkJRek5ETEZGQlRWSnBiVUlzYTBKQlEwVXNUVUZCVFRkdVFpeEZRVUZWT1VRc1MwRkJTM1Z4UWl4blFrRkJhMEp1UXl4SFFVRmxReXhSUVVGUk5rSXNSMEZCYzBKc2NVSXNTMEZCU3pac1FpeFZRVVY2Uml4SlFVRkxMMmhDTEVWQlEwZ3NUMEZIUml4TlFVRk5lWEJDTEVWQlFXdENjRTRzVDBGQlQyMU9MRk5CUVZONGNFSXNSVUZCVVRSWkxHRkJRV0VzYjBKQlFYRkNMRWxCUlRsRk5sRXNSMEZEUm5aMFFpeExRVUZMTm5GQ0xGRkJRVkV5UXl4blFrRkJhMEo0ZEVJc1MwRkJTelp4UWl4UlFVRlJNa01zYVVKQlFXMUNlSFJDTEV0QlFVczJjVUlzVVVGQlVYcENMRk5CUXpWRmNIQkNMRXRCUVVzMmNVSXNVVUZCVVhwQ0xGTkJRVmR0UlN4SFFVVjRRblowUWl4TFFVRkxObkZDTEZGQlFWRjZRaXhUUVVGWGNIQkNMRXRCUVVzMmNVSXNVVUZCVVRKRExHbENRVUZ0UW5oMFFpeExRVUZMTm5GQ0xGRkJRVkY2UWl4VFFVbDZSV3RETEU5QlFVOXRReXhGUVVGclFqTndRaXhIUVVOMlFpeE5RVUZOTUZZc1JVRkJVWGhhTEV0QlFVc3dkRUlzYTBKQlFXdENSQ3hIUVVVdlFqbE5MRVZCUVdkQ2VVZ3NSMEZCWlVNc1VVRkJVVFpDTEVkQlFYTkNiSEZDTEV0QlFVczJiRUlzVlVGRmJFVTRTQ3hGUVVGeFFqTjBRaXhMUVVGTGFYTkNMR05CUVdOMFRDeEhRVVY0UTJsT0xFVkJRV001Y0VJc1IwRkJWemxFTEV0QlFVczJjMElzWjBKQlFXZENjbFFzUlVGQlQyMUlMRWRCUlhKRWEwNHNSVUZCYlVJM2RFSXNTMEZCUzJselFpeGpRVUZqTWtJc1IwRkZkRU5GTEVWQlFWbDBTeXhSUVVGUmVHcENMRXRCUVV0emNVSXNWMEZEZWtKM1F5eEZRVUZUZEZRc1NVRkJWVzFSTEVkQlEyNUNiMFVzUlVGQmRVSnFRaXhGUVc1VVVpeHpRa0ZFUml4dlFrRnhWR0pyUWl4RlFVRnBRbXhDTEVWQmJsUklMSEZDUVVOQkxIRkNRVzlVWkVVc1JVRkJjVUpvZEVJc1MwRkJTMmwxUWl4clFrRkJhMEo2VlN4SFFVVnNSQ3hIUVVGSmIxVXNSMEZCWlVFc1JVRkJXWFpRTEZWQlFWVjRWeXhUUVVGVGIybENMRWxCUldoRUxGbEJSRUZxY1VJc1MwRkJTM2x4UWl4WlFVRmhMRWRCU1hCQ0xFZEJRVWw2Y1VJc1MwRkJTM2x4UWl4WFFVTlFMRTlCUzBZc1IwRkdiVUo2Y1VJc1MwRkJTeXR6UWl4dFFrRkJiVUpoTEVWQlFXRmFMRWRCUlhwRGVFa3NhVUpCUTJJc1QwRkhSaXhKUVVGTE4wUXNTVUZCYTBKcFRpeEZRVVZ5UWl4UFFVZEdOWFJDTEV0QlFVdDVjVUlzV1VGQllTeEZRVVZrY1VRc1IwRkRSamwwUWl4TFFVRkxkWEJDTEZGQlIxQjJjRUlzUzBGQlMyMTBRaXd5UWtGQk1rSlRMRWRCUldoRE5YUkNMRXRCUVV0MWNVSXNaVUZCYVVKeFJDeEZRVVYwUWl4TlFVRk5UU3hGUVVGdFFpeExRVU4yUW1wTUxFZEJRV0ZyUWl4UlFVRlJibXRDTEV0QlFVczJiRUlzVTBGQlZXMUZMRWRCUVZrc1EwRkRPVU55U0N4alFVRmxhVXdzUlVGRFptaGtMRlZCUVZkdll5eEZRVU5ZZUVnc1MwRkJUVzFKTEVWQlEwNDFRaXhIUVVGSk9FSXNTMEZKVWl4SFFVRkpOM1JDTEV0QlFVczJiRUlzVTBGQlUzaElMRlZCUVZWNFZ5eFRRV3BYVUN4VFFXbFhiVU1zUTBGRGRFUXJiRUlzUlVGQldYWlFMRlZCUVZWMFJTeEpRVUZKYVZVc1IwRkRNVUp5VUN4SFFVRlBhVkFzUjBGRFVHcE9MRVZCUVdOMFF5eFZRVUZWZEVVc1NVRkJTV2RWTEVkQlF6VkNTQ3hGUVVGWmRsQXNWVUZCVlhSRkxFbEJRVWxuVlN4SFFVVXhRaXhOUVVGTlNTeEZRVUZ0UWl4TFFVTjJRbEFzUlVGQldYWlFMRlZCUVZWdlNDeFBRVUZQYzBrc1JVRkJjMEpETEVkQlEyNUVTaXhGUVVGWmRsQXNWVUZCVlhSRkxFbEJRVWxyVVN4SlFVTXhRblJLTEVWQlFXTjBReXhWUVVGVmIwZ3NUMEZCVDNkRkxFZEJRWEZDSzBRc1JVRkJaMEpFTEVkQlEzQkZMM1JDTEV0QlFVdDVjVUlzV1VGQllTeEZRVU5zUW1oTExGZEJRVmQ1VGl4RlFVRnJRaXhKUVVjdlFteDFRaXhMUVVGTGJXMUNMR1ZCUVdWblNTeEZRVUZyUW5oT0xFZEJRV1VzVVVGRmNrUkJMRVZCUVdOMFF5eFZRVUZWYjBnc1QwRkJUM2RGTEVsQlF5OUNNa1FzUlVGQldYWlFMRlZCUVZWMFJTeEpRVUZKYTFFc1NVRkRNVUpxY1VJc1MwRkJTM2x4UWl4WlFVRmhMRVZCUTJ4Q2VVUXNTVUZIUlVvc1IwRkRSamwwUWl4TFFVRkxlWEpDTEZGQlNWUnBReXhyUWtGQmEwSTVZeXhIUVVOb1FpeE5RVUZMTEVOQlFVTnJXaXhIUVVGcFFrUXNTVUZCWjBKcVRpeFRRVUZUYUUwc1IwRkpOVU50VHl4TFFVTkxiazhzU1VGQlkybGFMRWRCUVdsQ1JDeEhRVUZoUkN4SFFVYzVReTlaTEVsQlFXTnBXaXhIUVVGcFFrWXNSMEZCWVVNc1IwRlFNVU5vV2l4RlFWVlljV1FzYTBKQlFXdENlbFVzUjBGRGFFSXNUVUZCU3l4RFFVRkRiVkVzUjBGQldVTXNTVUZCV1doT0xGTkJRVk53UkN4SFFVbHVRM1ZHTEV0QlEwdDJSaXhKUVVGVmIxRXNSMEZCWVVNc1IwRkJhVUpETEVkQlJ6RkRkRkVzU1VGQlZXOVJMRWRCUVdGRkxFZEJRV3RDUkN4SFFWQjJRM0pSTEVWQlYxZzJUU3g1UWtGQmVVSjJhVUlzUlVGQlV6SmFMRWRCUTJoRExFMUJRVTAxVUN4RlFVRlBjMk1zUjBGQlUzQkVMRzlDUVVGdlFtcHFRaXhGUVVGVE1sb3NSMEZEYmtRc1NVRkJTU3hSUVVOR2IwNHNSMEZEUldoa0xFVkJSV3RDTEdsQ1FVRllORkFzU1VGRFZHOU9MRVZCUVZVc1NVRkJTMEVzUzBGRFZuQk9MRWxCU1ZBc1RVRkJUVEpSTEVWQlFUSkNMR2xDUVVGWU0xRXNSVUZCYzBKQkxFVkJRVk52VGl4RlFVRlJka0lzVFVGRk4wUXNSMEZCYzBJc2FVSkJRVmczVEN4RlFVTlVOVkFzUlVGQlMydGxMRWRCUVVkMFR5eFJRVU5JTEVkQlFYTkNMR2xDUVVGWU1sRXNSVUZCY1VJc1EwRkRja01zVVVGQk5FSXNTVUZCYWtKMlowSXNSVUZCUzNWblFpeEhRVU5rTEUxQlFVMHNTVUZCU1hSUkxGVkJRVlVzYjBKQlFXOUNjMUVzVFVGSE1VTjJaMElzUlVGQlMzVm5RaXhWUVVOSmRrUXNSVUZCVVhwQ0xGVkJRVmw1UWl4RlFVRlJkMFFzVDBGRGNrTjRaMElzUlVGQlN6QmlMRkZCUTB3eFlpeEZRVUZMTkdRc1UwRkpWSEJHTEhWQ1FVRjFRalZKTEVkQlEzSkNMRTlCUVU5NlpDeExRVUZMYlc1Q0xFMUJRVXNzVjBGRFptZEVMRWRCUVZOdFJTeHJRa0ZCYTBKMGRVSXNTMEZCVFhsa0xFMUJTWEpETkVrc01rSkJRVEpDY2tVc1IwRkRla0lzVFVGQlRXcFRMRVZCUVZOcFRpeEhRVUYxUW1oa0xFMUJSWFJETEVsQlFVc3JVQ3hKUVVGWFFTeEZRVUZQYzA4c1ZVRkJWWGhYTEZOQk5XSlVMRmxCTm1KMFFpeFBRVWRHTEUxQlFVMDBWaXhGUVVGVExFbEJRVXR0U3l4SFFVRlpSeXhyUWtGQmEwSm9XU3hOUVVNM1F6WllMRWRCUVZsSExHdENRVUZyUWk5dVFpeFBRVVUzUW5WMVFpeEZRVUZoZG5WQ0xFdEJRVXN3WXl4aFFVRmhMRzlDUVVWcVF6WlNMRWxCUTBZNVVTeEZRVUZQTWt3c1ZVRkJWeXhIUVVkd1FtVXNSMEZCVTIxRkxHdENRVUZyUW5abExFVkJRVkV3VGl4SFFVVXZRamhSTEVkQlEwWndSU3hIUVVGVE4wUXNXVUZCV1haWExFZEJRVkZuWXl4SFFVRkhkME1zUjBGSGJFTjJUU3hGUVVGTmFVUXNhMEpCVjFab1F5eEhRVUZoVVN4SFFVRkhMMkVzVTBFelpHVXNOa0pCWjBKSUxITkRRVEpqTWtONWFFSXNSMEZCVTNGRkxIRkNRVU5vUm5aTUxFZEJRV0ZSTEVkQlFVZDJaaXhQUVRka1l5dzJRa0UyWkdsQ0xFdEJRemRETEUxQlFVMTFjVUlzUlVGQldYSkhMRWRCUVdVMVV5eExRVFZqVWl3MlFrRTRZM3BDTEVsQlFVc3NTVUZCU1dRc1JVRkJTU3hGUVVGSGJFc3NSVUZCVFdsclFpeEZRVUZWTVdFc1QwRkJVVmNzUlVGQlNXeExMRVZCUVV0clN5eEpRVU12UTNsV0xFZEJRVk50UlN4clFrRkJhMEpITEVWQlFWVXZXaXhIUVVGSmVWWXNSMEZCVXpkRUxGbEJRVmx0U1N4RlFVRlZMMW9zVVVGVk5VVjFTeXhIUVVGdFFtdE1MRWxCWTI1Q0xFMUJRVTExUlN4SFFVRlRMRmRCU1ZSRExFZEJRVmtzUTBGRGFFSnlTQ3hSUVVGUkxFVkJRMUo0Wml4UFFVRlJMRTFCUlVvNGJVSXNSMEZCWjBJc1EwRkRjRUowU0N4UFFVRlJMRlZCUTFKNFppeFBRVUZSTEd0Q1FVOUtLMjFDTEVkQlFXOUNMRTlCUTNCQ1F5eEhRVUZ6UWl4WFFVTjBRa01zUjBGQmQwSXNZVUZEZUVKRExFZEJRWFZDTEZsQlEzWkNReXhIUVVFMlFpdzJRa0ZMTjBKRExFZEJRWGxDTERoQ1FVOHZRaXhOUVVGTlF5eFhRVUZwUW5oS0xFZEJRM0pDUXl4WlFVRlpPV2hDTEVWQlFWTXlXaXhIUVVOdVFqSk5MRTFCUVUxMGJVSXNSMEZEVGpsRUxFdEJRVXR2ZGtJc2EwSkJRVzFDTEVWQlEzaENjSFpDTEV0QlFVczJjVUlzVVVGQlZUZHhRaXhMUVVGTE9IRkNMRmRCUVZkeVRpeEhRVU12UW5wa0xFdEJRVXR4ZGtJc1kwRkJaMElzUjBGRGNrSXNUVUZCVFVNc1JVRkJZV3hJTEVkQlFXVTFVeXhMUVVGTE1Gb3NTVUZGZGtNc1NVRkJTeXhKUVVGSmVHRXNSVUZCU1N4RlFVRkhiRXNzUlVGQlRUaHJRaXhGUVVGWGRtSXNUMEZCVVZjc1JVRkJTV3hMTEVWQlFVdHJTeXhKUVVGTExFTkJRM0pFTEUxQlFVMDJZU3hGUVVGUFJDeEZRVUZYTldFc1IwRkRiRUlyU0N4RlFVRlhUU3hIUVVGMVFuZFRMRWRCUTJ4RFF5eEZRVUZuUW5CSUxFZEJRV1UxVXl4TFFVRkxhVWdzUjBGQlZTOVRMRkZCUVU4cmJFSXNSMEZCWVVFc1NVRkJZM3AyUWl4TFFVRkxObXhDTEZkQlJURkZMRTlCUVdKd1NpeEhRVUZ4UWl0VExFVkJRV042WWl4VFFVTnlReTlVTEV0QlFVc3dka0lzVlVGQldXcFVMRVZCUldwQ2VtTXNTMEZCUzNGMlFpeGpRVUZqY0dFc1MwRkJTM05oTEVsQlNUVkNkblpDTEV0QlFVc3lka0lzYzBKQlJVRXpka0lzUzBGQlN6WnhRaXhSUVVGUkwybENMRkZCUTJoQ09VZ3NTMEZCU3pSMlFpd3dRa0ZCTUVJMWRrSXNTMEZCUzNGMlFpeGpRVUZsY25aQ0xFdEJRVXMyZGtJc1dVRkhkRVEzZGtJc1MwRkJTelp4UWl4UlFVRlJka1FzVVVGRFpuUnVRaXhMUVVGTGMyNUNMRk5CUzBVclJDeHhRa0ZEVkN4UFFVRlBjMFFzUjBGSFJYUlFMR3RDUVVOVUxFOUJRVTl4VUN4SFFVbFVjRWdzVTBGRFRYUnVRaXhMUVVGTE5uWkNMRmRCUTFBM2RrSXNTMEZCU3poMlFpeFBRVVZNT1haQ0xFdEJRVXNyZGtJc1QwRkpWRUVzVDBGRFJTeEhRVUZKTDNaQ0xFdEJRVXR2ZGtJc2EwSkJRVzlDY0haQ0xFdEJRVXMyZGtJc1YwRkRhRU1zVDBGSFJpeEpRVU5KUnl4RlFVUkJReXhGUVVGVkxFZEJSMlFzUjBGQlNXcDNRaXhMUVVGTE5uRkNMRkZCUVZFdmFVSXNUMEZCVVN4RFFVTjJRaXhOUVVGTmQyZENMRVZCUVZkR0xFZEJRV1UxVXl4TFFVRkxlVm9zUjBGQk5FSnFka0lzUzBGQlN6WnhRaXhSUVVGUkwybENMRkZCUXpsRmJXOUNMRVZCUVZVM1NDeEhRVUZsTlZNc1MwRnVSVTRzZFVOQmJVVTJRbmhXTEV0QlFVczJjVUlzVVVGQlVTOXBRaXhSUVVGUk5FSXNVVUZCVHpac1FpeEpRVUZUYWtnc1JVRkJVekZNTEZOQlFWTXlVeXhMUVVkNlJ5eE5RVUZOVnl4RlFVRlpPVWdzUjBGQlpVTXNVVUZCVVhKdlFpeExRVUZMTUhaQ0xGZEJSVGxETEVkQlFVbFBMRVZCUVZGc1l5eFBRVUZSTEVOQlEyeENMRTFCUVUxdll5eEZRVUZwUWtZc1JVRkJVWHBoTEUxQlFVc3JXaXhIUVVGUlZ5eEpRVUZqV0N4SlFVY3hSQ3hIUVVaQlV5eEZRVUZqUnl4RlFVRnBRbWhDTEVkQlFWTTNTU3haUVVGWk5rb3NSMEZCYTBJc1MwRkZiRVZJTEVkQlFXVkJMRVZCUVZsYUxHbENRVU0zUWl4UFFVMUtMRWRCUm0xQ2JrMHNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFUbEdOVUlzYjBKQlowZEdja0lzYVVKQlEySXNUMEZIUm5sTUxFVkJRVkUzY1VJc1UwRkJVV2R5UWl4SlFVTldSaXhKUVVGalJTeEhRVU5vUW1wQ0xFZEJRVk53U1N4dlFrRkJiMEp4U2l4RlFVRlpMRU5CUTNaRE9Va3NVVUZCVVN4SlFVTlFkMGtzVDBGSFFVVXNSMEZEU0RkTExFZEJRVXN2VUN4SlFVRkpaMklzUlVGMlNFVXNZMEYxU0hOQ0xGTkJTWEpETEUxQlFVMURMRVZCUVZseWQwSXNTMEZCUzNOM1FpeG5Ra0ZGZGtKMGQwSXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWVzlJTEU5QlFVOXhTaXhKUVVVdlFqbDFRaXhMUVVGTE5teENMRk5CUVZONFNDeFZRVUZWZEVVc1NVRkJTV2RXTEVsQlJUVkNMM1ZDTEV0QlFVczJiRUlzVTBGQlUzaG5RaXhOUVVGTlozSkNMRWRCUVdFc1JVRkZha055ZDBJc1MwRkJTelIyUWl3d1FrRkJNRUkxZGtJc1MwRkJTM0YyUWl4bFFVRmxMRWRCUlc1RWNuWkNMRXRCUVV0dmRrSXNhMEpCUVcxQ0xFVkJSWGhDTEUxQldVMXRRaXhGUVVGaExGTkJSRlZHTEVWQlFWVXNSMEZCUjJoM1FpeGpRVUZuUW1kM1FpeEZRVUZWTldFc1RVRkJUU3hMUVVjeFJYcFdMRXRCUVV0dGJVSXNaMEpCWkZrc1MwRkRabTV0UWl4TFFVRkxiM1pDTEd0Q1FVRnRRaXhGUVVWNFFuQjJRaXhMUVVGTE5teENMRk5CUVZONFNDeFZRVUZWYjBnc1QwRkJUM05LTEVsQlJTOUNMM1ZDTEV0QlFVczJiRUlzVTBGQlUzaElMRlZCUVZWMFJTeEpRVUZKSzFVc1IwRkJjVUpFTEVsQlJXcEVOM1ZDTEV0QlFVczJiRUlzVTBGQlUzaG5RaXhOUVVGTlozSkNMRWRCUVdFc1IwRkRha053VGl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CYmtsV0xIVkNRWGxKV1Rkc1FpeExRVUZMTm14Q0xGVkJRVlVzUjBGRk4wTTNiRUlzUzBGQlN6WnNRaXhUUVVGVGVHZENMRTFCUVUxbmNrSXNSMEZCWVN4SFFVRkhjbmRDTEV0QlFVczJiRUlzVTBGQlV6QkxMRTlCUjNCRVZDeFBRVU5GTEVkQlFVazVka0lzUzBGQlMyOTJRaXh0UWtGQmNVSndka0lzUzBGQlN6WjJRaXhYUVVOcVF5eFBRVXRHTEVkQlJtMUNOVTBzUjBGQllXdENMRkZCUVZGdWEwSXNTMEZCU3pac1FpeFRRV3hLTlVJc2IwSkJiMHBHY2tJc2FVSkJRMklzVDBGSFJpeE5RVUZOTmt3c1JVRkJXWEozUWl4TFFVRkxjM2RDTEdkQ1FVVjJRblIzUWl4TFFVRkxObXhDTEZOQlFWTjRaMElzVFVGQlRXZHlRaXhIUVVGaExFZEJRVWR5ZDBJc1MwRkJTelpzUWl4VFFVRlRhR1lzZDBKQlFYZENkM0JDTEU5QlF6RkZNVklzUjBGQlR6TmxMRXRCUVVzMmJFSXNWVUZGV2pkc1FpeExRVUZMTm14Q0xGTkJRVk40U0N4VlFVRlZkRVVzU1VGQlNXZFdMRWxCUlRWQ0wzVkNMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlZ2U0N4UFFVRlBjVW9zUjBGQmNVSkVMRWxCUlhCRUxFMUJRVTB5UWl4RlFVRnhRbmgzUWl4TFFVRkxjWFpDTEdOQlFXTjBZaXhQUVVVNVF5eEpRVUZMTEVsQlFVbFhMRVZCUVVrc1JVRkJSMEVzUlVGQlNUaGlMRVZCUVc5Q09XSXNTVUZCU3l4RFFVTXpReXhOUVVGTmVWQXNSVUZCVlc1clFpeExRVUZMY1haQ0xHTkJRV016WVN4SFFVTTNRalpoTEVWQlFVOTJVeXhIUVVGMVFtMUlMRWRCUldoRGIwd3NTVUZCVTNaMlFpeExRVUZMTm5aQ0xGTkJRVk5PTEVsQlEzcENkblpDTEV0QlFVczBka0lzTUVKQlFUQkNMRU5CUVVONlRDeEpRVUZWTEVkQlNUbERibXRDTEV0QlFVdHZka0lzYTBKQlFXMUNMRVZCV1hoQ2NIWkNMRXRCUVVzMmJFSXNVMEZCVTNoblFpeE5RVUZOWjNKQ0xFZEJRV0VzUjBGRmFrTnlkMElzUzBGQlMyMXRRaXhuUWtGYVdTeExRVU5tYm0xQ0xFdEJRVXR2ZGtJc2EwSkJRVzFDTEVWQlJYaENjSFpDTEV0QlFVczJiRUlzVTBGQlUzaElMRlZCUVZWdlNDeFBRVUZQYzBvc1NVRkZMMEl2ZFVJc1MwRkJTelpzUWl4VFFVRlRlRWdzVlVGQlZYUkZMRWxCUVVrclZTeEpRVVUxUWpkTUxFZEJRV0ZyUWl4UlFVRlJibXRDTEV0QlFVczJiRUlzVTBGd1RGUXNkMEpCZVV4WE4yeENMRXRCUVVzMmJFSXNWVUZCVlN4SFFVY3ZRMmRMTEZOQlFWTXZja0lzUlVGQlZUbEVMRXRCUVVzMmJFSXNWVUZEZEVJc1QwRkJUeTlvUWl4RlFVRlJkV0VzVlVGQlZYaFhMRk5CUVZObmJrSXNTVUZKY0VNdlJDeFhRVUZYY2s0c1IwRlRWQ3hQUVZKQlFTeEZRVUZUTEVsQlFVdHJVaXhOUVVOVUwwY3NSMEZCV1Vjc2EwSkJRV3RDTDI1Q0xFdEJRVXMyYkVJc1lVRkRia053U1N4SlFVVkZOa29zVDBGQlV6bEVMRkZCUVZFdlJpeEZRVUZQTmtvc1VVRkZMMEkzU2l4RlFVRlBNMVlzVDBGQlUzZFdMRWRCUVZkSExFVkJRVTh6Vml4UlFVTnNRM2xXTEVkQlFXZENiVklzUjBGQlVXcFNMRVZCUVZGdFVpeEpRVU42UW01U0xFVkJSMVEyVXl4blFrRkRSU3hQUVVGUGRIZENMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlY0Vnl4VFFYWk5UQ3gxUWtGRGFFSXNVVUZEUXl4VFFYZE5Zamh1UWl4elFrRkRSU3hKUVVGTE0zWkNMRXRCUVVzMmNVSXNVVUZCVVM5cFFpeFBRVU5vUWl4UFFVZEdMRTFCUVUxM1owSXNSVUZCVjBZc1IwRkJaVFZUTEV0QlFVdDVXaXhIUVVFMFFtcDJRaXhMUVVGTE5uRkNMRkZCUVZFdmFVSXNVVUZET1VWelowSXNSMEZCWlRWVExFdEJRVXN3V2l4SFFVRjNRbXgyUWl4TFFVRkxObkZDTEZGQlFWRXZhVUlzVVVGQlVUUkNMRkZCUVU4MmJFSXNTVUZCVTJwSUxFVkJRVk14VEN4VFFVRlRNbE1zUzBGQlQyNXhRaXhUUVVGUmRFSXNTVUZEYUVnc1RVRkJUVEp6UWl4RlFVRlhlbFFzUjBGQmRVSnNXaXhIUVVWd1F6SnpRaXhIUVVOR2VuZENMRXRCUVVzMGRrSXNNRUpCUVRCQ0xFTkJRVU01Y2tJc1IwRkJWVGxFTEV0QlFVczJka0lzVTBGQlUxa3NUMEZMT1VSaUxEQkNRVUV3UW1Nc1JVRkJZME1zUjBGRGFrTkVMRVZCUVdFell5eFJRVWxzUWpKakxFVkJRV0YwY2tJc1UwRkJVVzF4UWl4SlFVTm1iMElzUlVGRFJuQkNMRVZCUVV0c1VpeFZRVUZWYjBnc1QwRkJUM1ZLTEVsQlJYUkNUeXhGUVVGTGJGSXNWVUZCVlhSRkxFbEJRVWxwVml4SlFVZHlRazhzUlVGQlN6ZHdRaXhoUVVGaExHZENRVUZwUW1seVFpeE5RVXQyUTNSTExIVkNRVUYxUWpWSkxFZEJRM0pDTEU5QlFVOTZaQ3hMUVVGTGJXNUNMRTFCUVVzc1YwRkRaaXhOUVVGTk1FUXNSVUZCVlN4SFFVVk5MR2xDUVVGWWNFNHNSMEZCZFVJc1dVRkJXV3BQTEV0QlFVdHBUeXhMUVVOcVJHOU9MRVZCUVZGMlJDeFJRVUZUTEVkQlIyNUNMRTFCUVUxNldpeEZRVUZQYzJoQ0xFZEJRVk53U1N4dlFrRkJiMEl2YlVJc1MwRkJUVFp4UWl4SFFVVm9SQ3hIUVVGelFpeHBRa0ZCV0hCT0xFVkJRWEZDTEVOQlF6bENMRkZCUVRSQ0xFbEJRV3BDTlZBc1JVRkJTelJRTEVkQlEyUXNUVUZCVFN4SlFVRkpTeXhWUVVGVkxHOUNRVUZ2UWt3c1RVRkhNVU0xVUN4RlFVRkxORkFzVlVGaFluZEdMRWRCUVdGUkxFZEJRVWN2WVN4VFFUVlJaU3cyUWtFMFVXMUNkMjFDTEVsQlFYZENMRk5CUVZWc1RpeEpRVVZ5UkN4TlFVRjZRa0VzUlVGQlRXcFRMRTlCUVU4NFZ5eFRRVUZ0UWpkRkxFVkJRVTFaTEdkQ1FVRnRSQ3hOUVVGcVExb3NSVUZCVFZrc1pVRkJaV2xGTEZWQlF5OUZOMFVzUlVGQlRXbEVMR2xDUVVkU0xFMUJRVTE0U1N4RlFVRlhUU3hIUVVGMVFpOWpMRTFCUTJadmIwSXNSMEZCWlRWVExFdEJRVXRwU0N4SFFVTTFRbkpZTEZOQlFWRjBRaXhKUVVOMlFuRnlRaXhIUVVGVGNFa3NiMEpCUVc5Q2FtcENMRVZCUVZNc1EwRkRjRU4zYWtJc1VVRkJVU3hKUVVOUVFTeGxRVlZRY2trc1IwRkJiVUpyVVN4SlFXTnVRaXhOUVVGTmVVSXNSMEZCVXl4WFFVbFVReXhIUVVGbExGTkJRMlpETEVkQlFWa3NVVUZGV2tNc1IwRkJaU3hWUVVObVF5eEhRVUZwUWl4WlFVZHFRa01zUjBGQmFVSXNTVUZCU1hCVUxFOUJRVThzTkVKQlN6VkNjVlFzUjBGQmVVSXNOa0pCUTNwQ1F5eEhRVUY1UWl3clFrRkZla0pETEVkQlFXOUNMRTlCUzNCQ1F5eEhRVUY1UWl3NFFrRkRla0pETEVkQlFXZENMR2xDUVVkb1FrTXNSMEZCWjBKNFV5eExRVUZWTEZWQlFWa3NXVUZEZEVONVV5eEhRVUZ0UW5wVExFdEJRVlVzV1VGQll5eFZRVU16UXpCVExFZEJRVzFDTVZNc1MwRkJWU3hoUVVGbExHVkJRelZETWxNc1IwRkJjMEl6VXl4TFFVRlZMR1ZCUVdsQ0xHRkJRMnBFTkZNc1IwRkJhMEkxVXl4TFFVRlZMR0ZCUVdVc1kwRkRNME0yVXl4SFFVRnBRamRUTEV0QlFWVXNZMEZCWjBJc1lVRkRNME00VXl4SFFVRlpMRU5CUTJoQ2RHMUNMRTlCUVZFc1EwRkJReXhGUVVGSExFZEJRMW9yUml4VFFVRlZMR3RDUVVOV2VrOHNWVUZCVnl4VFFVTllhWFpDTEZGQlFWTXNWVUZEVkVNc1lVRkJZeXhMUVVOa1F5eFhRVUZYTEVkQlJWQkRMRWRCUVdkQ0xFTkJRM0JDTVcxQ0xFOUJRVkVzTUVKQlExSXJSaXhUUVVGVkxHMUNRVU5XZWs4c1ZVRkJWeXd3UWtGRFdHbDJRaXhSUVVGVExGTkJRMVJETEdGQlFXTXNlVUpCUTJSRExGVkJRVmNzYjBKQlVXSXNUVUZCVFVVc1YwRkJhVUoyVFN4SFFVTnlRa01zV1VGQldUbG9RaXhGUVVGVE1sb3NSMEZEYmtJeVRTeE5RVUZOZEcxQ0xFZEJRMDQ1UkN4TFFVRkxiWGxDTEZGQlFWVXNTMEZEWm01NVFpeExRVUZMTm5GQ0xGRkJRVlUzY1VJc1MwRkJTemh4UWl4WFFVRlhjazRzUjBGREwwSjZaQ3hMUVVGTGIzbENMRTFCUVZGd2VVSXNTMEZCUzNGNVFpeHJRa0ZEYkVKeWVVSXNTMEZCUzNONVFpeFZRVUZaZEhsQ0xFdEJRVXQxZVVJc1owSkJTV0pzU0N4eFFrRkRWQ3hQUVVGUGQwY3NSMEZIUlZjc2VVSkJRMVFzVDBGQlQxQXNSMEZIUlRWVExHdENRVU5VTEU5QlFVOTFVaXhIUVVsVWRFb3NVMEZEUlN4UFFVRlBkRzVDTEV0QlFVczJka0lzVjBGQllUZDJRaXhMUVVGTE9IWkNMRTlCUVZNNWRrSXNTMEZCU3l0MlFpeFBRVWM1UTBFc1QwRkRSU3hIUVVGSk4xSXNSMEZCVjJ4bExFdEJRVXMyYkVJc1YwRkJZVGRzUWl4TFFVRkxOblpDTEZOQlFWTTNka0lzUzBGQlMyOTVRaXhQUVVOc1JDeFBRVWRHTEUxQlFVMTZVQ3hGUVVGblFpeERRVU53UWtFc1kwRkJaVE5wUWl4TFFVRkxObXhDTEZWQlNYUkNMRWRCUm10Q05VTXNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFUZEZNMElzYlVKQk5rVnRSR3hFTEVkQlJYUkVOa0lzYVVKQlExb3NUMEZIUml4TlFVRk5NV01zUlVGQlUyOXhRaXhIUVVGVFR5eHhRa0ZCY1VKNmVVSXNTMEZCU3pac1FpeFZRVVU1UXpkc1FpeExRVUZMYzNsQ0xGVkJRMUF4U3l4SFFVRlpReXhwUWtGQmFVSTNia0lzUzBGQlMyOTVRaXhOUVVGUExGTkJRVlVzVVVGRmJrUndlVUlzUzBGQlN6QjVRaXhqUVVGak5YRkNMRWRCVDJwQ0xHbENRVUZyUWxrc1UwRkJVME1zYTBKQlFXOUNZaXhGUVVGUFoyWXNVVUZ1Um14RExHZENRVzlHZEVJc1IwRkJSelZxUWl4VlFVRlZkMFlzVTBGQlUyZElMRXRCUVVzMFdTeFZRVUZWYkdwQ0xGTkJRVkZ0Y1VJc1IwRkJVWFJOTEVkQlFXRlJMRWRCUVVjNFRDeEZRVUZOTEZsQlFXRTNVU3hOUVVjeFJqRmxMRXRCUVVzMmJFSXNVMEZCVXpoTkxGRkJSV1F6ZVVJc1MwRkJTelpzUWl4VFFVRlRibWRDTEdGQlFXRXNhVUpCUVdsQ0xFZEJSVFZETVVZc1MwRkJTMjk1UWl4TlFVRk5MMVFzVlVGQlZYUkZMRWxCUVVseFdDeEpRVVY2UW5CNFFpeExRVUZMTm14Q0xGTkJRVk40U0N4VlFVRlZkRVVzU1VGQlNYRllMRWxCUlRWQ2JrOHNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFURkhVaXh2UWtFd1IybERiRVFzUjBGSGNrUnRUaXhQUVVORkxFZEJRVWsxVWl4SFFVRlhiR1VzUzBGQlN6WnNRaXhaUVVGak4yeENMRXRCUVVzMmRrSXNVMEZCVXpkMlFpeExRVUZMYjNsQ0xFOUJRMjVFTEU5QlIwWXNUVUZCVFhwUUxFVkJRV2RDTEVOQlEzQkNRU3hqUVVGbE0ybENMRXRCUVVzMmJFSXNWVUZIZEVJM2JFSXNTMEZCU3pSNVFpeGpRVUZqYWxFc1IwRkhja0p2UkN4VlFVTk5MMnhDTEV0QlFVdHRlVUlzVTBGRFVHNTVRaXhMUVVGTGJYbENMRkZCUVZGb1Z5eFZRVWRtYVU4c1RVRkJUWEpGTEZWQlIxSjRXQ3hUUVVORmRrOHNTMEZCUzNONVFpeFZRVUZaZEhsQ0xFdEJRVXQxZVVJc1owSkJSV3hDZG5sQ0xFdEJRVXR0ZVVJc1UwRkRVRzU1UWl4TFFVRkxiWGxDTEZGQlFWRTFha0lzVTBGTGFrSnhhMElzWTBGQlkycFJMRWRCUTAxTkxFZEJRV0ZyUWl4UlFVRlJibXRDTEV0QlFVczJiRUlzVTBFNVNUTkNMRzFDUVRoSmJVUnNSQ3hIUVVWMFJEWkNMRzFDUVUxV0xHbENRVUZyUWpsaUxGTkJRVk5ETEdsQ1FVTTNRaXhIUVVGSGVrWXNWVUZCVlhkR0xGTkJRVk5uU0N4TFFVRkxORmtzVlVGQlZXeHFRaXhUUVVGUmJYRkNMRWRCUVZGMFRTeEhRVUZoUXl4SlFVRkpjVTBzUlVGQlRTeFpRVUZoTjFFc1RVRkhka1l4WlN4TFFVRkxiWGxDTEZOQlExQnVlVUlzUzBGQlMyMTVRaXhSUVVGUmFGY3NWVUZIWm01akxFdEJRVXR2ZVVJc1RVRkJUUzlVTEZWQlFWVnZTQ3hQUVVGUE1rd3NTVUZGTlVKd2VFSXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWVzlJTEU5QlFVOHlUQ3hKUVVVdlFuQjRRaXhMUVVGTE5teENMRk5CUVZOdVowSXNZVUZCWVN4blFrRkJhVUlzVTBGRk5VTnJhVUlzUjBGQldVVXNiMEpCUVc5Q09XNUNMRXRCUVV0dmVVSXNUVUZCVHl4VlFVTTFRMjVRTEVkQlFXRnJRaXhSUVVGUmJtdENMRXRCUVVzMmJFSXNVMEZ3UzFBc2NVSkJiMHRwUTJ4RUxFbEJSM1JFYlVrc1YwRkJWM0pPTEVkQlQxUXNSMEZPUVVFc1JVRkJVeXhKUVVGTGVtUXNTMEZCU3pSc1FpeFpRVUZaZVVZc1YwRkRNVUo2UkN4SFFVRlpSeXhyUWtGQmEwSXZia0lzUzBGQlN6WnNRaXhoUVVOdVEzQkpMRWRCUlV4R0xFZEJRV2RDY1ZRc1IwRkJVVzVVTEVWQlFWRjZaQ3hMUVVGTE5HeENMRmxCUVZrMFRTeGhRVVZxUWl4cFFrRkJja0l2VlN4RlFVRlBOV0VzV1VGQk1rSXNSMEZCVlRSaExFVkJRVTgxWVN4WlFVRm5SU3h0UWtGQk0wTTBZU3hGUVVGUE5XRXNWVUZCVldkRkxITkNRVVZzUnl4TlFVRk5MRWxCUVVscFdDeFZRVUZWTEVkQlFVYzRVeXhIUVVGUGRuZENMQ3RIUVVkb1F5eFBRVUZQYjJRc1JVRkhWR2xXTEdOQlFXTTFjVUlzUjBGRFdpeFJRVUZ6UWl4SlFVRllMRVZCUTFRc1RVRkJUU3hKUVVGSloxY3NWVUZCVlN4blJVRkhkRUlzU1VGQlNTdFZMRVZCUVcxQ04zbENMRXRCUVVzMmJFSXNVMEZGUnl4WFFVRXpRamRzUWl4TFFVRkxObkZDTEZGQlFWRm9iMElzVlVGRFptZDNRaXhGUVVGdFFpOXhRaXhGUVVOV0xFZEJRVlU1U0N4TFFVRkxObkZDTEZGQlFWRm9iMElzVjBGRGFFTm5kMElzUlVGQmJVSjJWaXhIUVVGWGRHUXNTMEZCU3paeFFpeFJRVUZSYUc5Q0xGZEJRMEVzYVVKQlFUTkNOME1zUzBGQlN6WnhRaXhSUVVGUmFHOUNMRmxCUXpkQ1ozZENMRVZCUVcxQ04zbENMRXRCUVVzMmNVSXNVVUZCVVdodlFpeFhRVWRzUXl4TlFVRk5hM1pDTEVWQlFXVXZlRUlzUzBGQlN6aDVRaXh0UWtGRmNFSkRMRVZCUVd0Q2FFSXNSVUZCWVhSWkxGVkJRVlZxUlN4TlFVRkxjMFVzUjBGQk9FSXNaMEpCUVd4Q1FTeEZRVUZUYkZZc1QwRkJLME1zU1VGQmNrSnJWaXhGUVVGVGFsWXNWVUZETlVjM1JTeExRVUZMYlhsQ0xGRkJRVlVzUjBGQmIwSlZMRVZCUVd0Q04zbENMRXRCUVV0dmVVSXNUVUZCVDB3c1IwRkZOMFJuUWl4SFFVTkdia3dzUjBGQldVTXNhVUpCUVdsQ04yNUNMRXRCUVV0dmVVSXNUVUZCVHl4VFFVRlZMRlZCU1haRWRrTXNVMEZCVXk5eVFpeEZRVUZWT1VRc1MwRkJTelpzUWl4VlFVTjBRaXhQUVVGUEwyaENMRVZCUVZGMVlTeFZRVUZWZUZjc1UwRkJVM1Z3UWl4SlFVZHdRMmxDTEd0Q1FVTkZMRTlCUVU5cVN5eEhRVUZsYkdkQ0xFdEJRVXRzU1N4TFFVRkxObXhDTEZOQlFWVjVUQ3hKUVVGbExFZEJSek5FTUVJc1owSkJRMFVzVFVGQlRVTXNSVUZCYVVKcWVrSXNTMEZCU3pac1FpeFRRVUZUZW1Rc1YwRkZja01zUjBGQlNUWnhRaXhGUVVGbE5WVXNWVUZCVlhoWExGTkJiRTVPTEZkQmJVNXlRaXhQUVVGUE9IQkNMRWRCUjFRc1IwRkJTWE5DTEVWQlFXVTFWU3hWUVVGVmVGY3NVMEZ5VGtvc1lVRnpUblpDTEU5QlFVOHJjRUlzUjBGSlZDeE5RVUZOYzBJc1JVRkJhMFlzVVVGQk1VVTFjVUlzYVVKQlFXbENkRWtzUzBGQlMyOTVRaXhQUVVGUGJsVXNhVUpCUVdsQ0xHbENRVUZwUW01Q0xFOUJSVGRGTEU5QlFVbHRWeXhGUVVGbE5WVXNWVUZCVlhoWExGTkJPVTVRTEZWQkswNWljWEpDTEVWQlFWRXhRaXhIUVVGdFFrUXNSMEZITjBJeVFpeEZRVUZSZUVJc1IwRkJjMEpFTEVkQlIzWkRZeXhuUWtGRFJTeFBRVUV3UkN4UFFVRnVSSFo1UWl4TFFVRkxObXhDTEZOQlFWTnBRaXhSUVVGUkxGZEJSeTlDY1Uwc1lVRkRSU3hOUVVGTkxFOUJRMG8xYmtJc1IwRkRSWFpNTEV0QlFVczJjVUlzVVVGRlZDeE5RVUZ6UWl4cFFrRkJXSFJtTEVWQlEwWkJMRVZCUVU4dlJTeE5RVUZOTEV0QlFVdHJWQ3hMUVVGSk9FNHNSMEZCVDNKSUxFOUJRVTl0VGl4VFFVRlRPVVlzUlVGQlN5eE5RVWR5UXl4dFFrRkJXR3BqTEVWQlEwWTJia0lzUjBGQll6ZHVRaXhGUVVGUE5tNUNMRVZCUVZsd2VrSXNTMEZCU3pac1FpeFZRVWQ0UTNSaExFVkJSMVIxYmtJc2JVSkJRMFVzVFVGQlRVOHNSVUZCZDBJc1EwRkROVUp3ZDBJc1ZVRkJWMnBFTEV0QlFVdG5la0lzWjBKQlEyaENkbG9zVlVGQlZ5eERRVUZETEVOQlExWTNWU3hMUVVGTkxHdENRVU5PYlVJc1VVRkJVeXhEUVVOUWRVd3NVMEZCVlhSU0xFdEJRVXMyY1VJc1VVRkJVWFphTEZkQlJYaENMRU5CUTBReFRTeExRVUZOTEZOQlEwNXRRaXhSUVVGVExFTkJRMUIzUml4UFFVRlJka3dzUzBGQlMyMTZRaXhwUWtGWmJrSXNUVUZRTmtJc1YwRkJla0p1ZWtJc1MwRkJTelp4UWl4UlFVRlJhVWdzVlVGRFpuVkNMRVZCUVhOQ05Wb3NWVUZCV1N4RFFVRkRMRU5CUTJwRE4xVXNTMEZCVFN4alFVTk9ReXhUUVVGVExFdEJTVTRzU1VGQlMzZDFRaXhMUVVNclFpeHRRa0ZCT1VKeWVrSXNTMEZCU3paeFFpeFJRVUZSYTBnc1lVRkJPRUl2ZUVJc1MwRkJTelp4UWl4UlFVRlJhMGdzWVVGQllYTkNMRWRCUVhsQ2NucENMRXRCUVVzMmNVSXNVVUZCVVd0SUxHTkJTVEZJZFVJc2FVSkJRV2RDTEVsQlEyUnFlVUlzUlVGQlJ5eFBRVU5JTUU4c1NVRkZRU3hOUVVGTmQycENMRVZCUVZGdVRDeEhRVUZsTlZNc1MwRnNVa1lzT0VSQmExSXJRbmhXTEV0QlFVdHZlVUlzVDBGQlR6RnZRaXhQUVVGUGNWVXNTVUZGZUVWM1ZpeEZRVUZOZUdZc1VVRk5XREpOTEVkQlFYRkNObE1zUlVGQlQzaHFRaXhGUVVGUk1VOHNTVUZCVVRKMlFpeEpRVUZwUW5WRExFVkJRVTB6Vnl4VFFVRlROMDBzU1VGQlV6UnBRaXhSUVVsMlJuUk5MSFZDUVVGMVFqVkpMRWRCUTNKQ0xFOUJRVTk2WkN4TFFVRkxiVzVDTEUxQlFVc3NWMEZEWml4TlFVRk5kRm9zUlVGQlQzRnJRaXhIUVVGVGJrd3NiMEpCUVc5Q0wyMUNMRXRCUVUxNVpDeEhRVVZvUkN4SFFVRnpRaXhwUWtGQldFRXNSVUZCV0N4RFFVbEJMRkZCUVRSQ0xFbEJRV3BDTlZBc1JVRkJTelJRTEVkQlEyUXNUVUZCVFN4SlFVRkpTeXhWUVVGVkxHOUNRVUZ2UWt3c1RVRkhNVU0xVUN4RlFVRkxORkFzVTBGSlZEUkpMR3RDUVVGclFuSkZMRWRCUTJoQ0xFZEJRVWxCTEVsQmFsVnRRaXhKUVdsVlZFRXNSVUZCVFRKR0xGRkJRV2RFTEZWQlFXWXpSaXhGUVVGTmJVSXNUVUZ3VlRkRExGRkJiMVZwUlc1Q0xFVkJRVTB6WjBJc1MwRkRia1lzVDBGSFJpeE5RVUZOYlhsQ0xFVkJRVlZ3VEN4SFFVRmxOVk1zUzBGQlN6WmlMRWxCUlhCRExFbEJRVXNzU1VGQlNUTmpMRVZCUVVrc1JVRkJSMnhMTEVWQlFVMW5jRUlzUlVGQlVYcG1MRTlCUVZGWExFVkJRVWxzU3l4RlFVRkxhMHNzU1VGQlN5eERRVU5zUkN4TlFVRk5LMlVzUlVGQlZYWkNMRWRCUVZNMVRDeFpRVUZaYTA0c1JVRkJVVGxsTEVsQlJUZERMRWxCUVVzclpTeEpRVUY1UXl4SlFVRTVRa0VzUlVGQlVUVkpMRkZCUVZGdFNDeFZRVU01UWl4VFFVZEdMRWxCUVV0NVFpeEZRVUZSTlVRc1YwRkRXQ3hUUVVkR0xFMUJRVTFzVGl4RlFVRm5RaXhEUVVOd1FrRXNZMEZCWlRoUkxFVkJRVkUxVGl4VlFVZDZRaXhIUVVGSk4wUXNSVUZCVHl4RFFVTlVMRTFCUVUwd1VpeEZRVUZsTVZJc1JVRkJUVEJTTEdWQlEzSkNReXhGUVVGbFJDeEZRVUZoT1Zjc1UwRkJVelpYTEVWQlFWRnlRaXhQUVVWdVJDeEhRVUZKYzBJc1JVRkJZVGxYTEZOQlFWTTJWeXhGUVVGUk5VNHNWMEZCTWtNc1YwRkJPVUkwVGl4RlFVRlJOVWtzVVVGQlVXMUlMRmxCUVRKQ01rSXNSMEZCT0VNc1dVRkJPVUpHTEVWQlFWRTFTU3hSUVVGUmJVZ3NWMEZCTWtJeVFpeEZRVU51U2l4VFFVbEdMRWRCUVVsR0xFVkJRVkZ5UWl4TlFVRk5kbkZDTEZOQlFWTnRZU3hGUVVGTmFsTXNWVUZCTWtJc1ZVRkJabWxUTEVWQlFVMXRRaXhOUVd4WGVrTXNVVUZyVnpaRWJrSXNSVUZCVFROblFpeExRVUZ4UWl4eFEwRkJjVU50VHl4TFFVRkxkMU1zUlVGQlRXcFRMRTlCUVU4NFZ5eFZRVU4yU2l4VFFVZHBRaXhWUVVGbU4wVXNSVUZCVFcxQ0xFOUJRMUpTTEVWQlFXTnBSU3hYUVVGaE5VVXNSMEZKTDBKNVVpeEZRVUZSWWl4alFVRmphbEVzU1VGSk1VSXdSQ3cwUWtGQk5FSjJhVUlzUjBGRE1VSXNUMEZCVDJ0YUxFZEJRWFZDYkZvc1NVRkJXVUVzUlVGQlVYTkZMRmRCUjNCRWFXVXNOa0pCUVRaQ2NrVXNSMEZSTTBJc1IwRkJTU3hyUWtGQmEwSjRVeXhMUVVGTGQxTXNSVUZCVFdwVExFOUJRVTg0Vnl4VFFVRlhOMFVzUlVGQlRUTm5RaXhOUVVGUmVYWkNMRWxCUVdFNVR5eEZRVUZOTTJkQ0xFMUJRVkYzZGtJc1MwRkJhVUkzVHl4RlFVRk5NMmRDTEUxQlFWRXlka0lzU1VGQmEwSm9VQ3hGUVVGTk0yZENMRTFCUVZFd2RrSXNTVUZCWjBJdlR5eEZRVUZOYWxNc1QwRkJUeXRYTEZGQlFWRjNTeXhOUVVGdFFrd3NSMEZCWlhwb1FpeExRVUZMZDFNc1JVRkJUVE5uUWl4TFFVTXpUeXhQUVVkR0xFMUJRVTExZVVJc1JVRkJWelY2UWl4TFFVRkxjV1VzVlVGQlZYaFhMRk5CUVZOMWNFSXNTVUZGZWtNc1NVRkJTM2RETEVkQlFWazFVaXhGUVVGTk0yZENMRTFCUVZGM2RrSXNSMEZETjBJc1QwRk5SaXhIUVVoQk4wOHNSVUZCVFdsRUxHbENRVU5PYWtRc1JVRkJUVFpTTEd0Q1FVVkdNMVlzUjBGQlYyeGxMRTFCUTJJc1QwRkhSaXhOUVVGTk9IcENMRVZCUVd0Q09YcENMRXRCUVV0MWIwSXNVVUZCVVRoSkxFbEJRVEJDY25oQ0xFdEJRVTl2YjBJc1IwRkJaVTBzUzBGQlN6RnZRaXhMUVVGTmNYaENMRWxCUVhkQ0xFZEJRMnhJZEdwQ0xFVkJRVmR0YTBJc1IwRkJVMjVNTEc5Q1FVRnZRaXROTEVkQlJUbERMRWRCUVVrNVVpeEZRVUZOTTJkQ0xFMUJRVkYzZGtJc1IwRkxiRUlzVDBGQlNUZFBMRVZCUVUwelowSXNUVUZCVVRCMlFpeEpRVUZuUWk5UExFVkJRVTB6WjBJc1RVRkJVVEoyUWl4SlFVTjZRelJETEVkQlEwZzNiRUlzUlVGQlUyZHBRaXhaUVVkWWFHbENMRVZCUVZOMWJFSXNaMEpCUVdkQ2RGSXNVMEZMZEVJMFVpeEhRVUZaTlZJc1JVRkJUVE5uUWl4TlFVRlJlWFpDTEVsQlF6ZENiMElzUjBGQlV6WkNMR05CWmxSb2JVSXNSVUZCVXl0b1FpeFJRVEpDWmpkTkxFZEJRV0ZSTEVkQlFVY3ZZU3hUUVVGVmVXOUNMRWRCUVhkQ1JTeEhRVUYzUW1Fc1IwRkJVemhDTEhWQ1FVTnVSaTlSTEVkQlFXRlJMRWRCUVVjdllTeFRRVUZWZVc5Q0xFZEJRWGRDUnl4SFFVRmxXU3hIUVVGVE9FSXNkVUpCUXpGRkwxRXNSMEZCWVZFc1IwRkJSeTloTEZOQlFWVjNiMElzUjBGQmQwSm5RaXhIUVVGVE5rSXNXVUZETTBRNVVTeEhRVUZoVVN4SFFVRkhMMkVzVTBGc1lXRXNOa0pCYTJGdFFuZHdRaXhIUVVGVE5rSXNXVUZEZWtRNVVTeEhRVUZoVVN4SFFVRkhMMkVzVTBGQlZYZHZRaXhIUVVGM1FrY3NTVUZCZDBJc1UwRkJWWEpRTEVkQlEyeEdRU3hGUVVGTmFVUXNhVUpCUTA1cFRpeEhRVUZUYmt3c2IwSkJRVzlDTDIxQ0xFMUJRVTF6YmtJc1dVRlRja055U1N4SFFVRnRRbWxVTEVsQlVXNUNMRTFCUVUwclFpeEhRVUY1UWl4dlJFRkRla0pETEVkQlFUQkNMR05CUldoRExFMUJRVTFETEVkQlEwcDJUeXhqUVVORk5XeENMRXRCUVVzMmJFSXNVMEZCVjI1a0xGTkJRVk5uU0N4TFFVY3pRakJyUWl4WFFVVkZMRTFCUVUxRExFVkJRV2RDTTNKQ0xGTkJRVk5ETEdkQ1FVRm5RbmxETEZsQlF5OURMRTlCUVU4elJTeExRVUZMYVVJc1NVRkJTWGhFTEU5QlFVOXZkMElzVjBGQllVUXNSMEZIZEVOMlJTeFBRVU5GTEUxQlFVMHhiMElzUlVGQlVYQklMRXRCUVV0dk1FSXNWMEZGYmtKd01FSXNTMEZCUzNVd1FpeHRRa0ZIVEhZd1FpeExRVUZMZHpCQ0xITkNRVUZ6UW5nd1FpeExRVUZMTm14Q0xGTkJRVlVzWjBKQlFXZENORThzUjBGQmJVSkJMRVZCUVd0Q2NuUkNMRWxCUnk5R2NFZ3NTMEZCUzNjd1FpeHpRa0ZCYzBKUUxFZEJRWGRDTEdkQ1FVRm5RbEVzUjBGQmJVSkJMRVZCUVd0Q2NuUkNMRWxCUlhoSGNFZ3NTMEZCUzNjd1FpeHpRa0ZCYzBKT0xFZEJRWGxDTEdWQlFXVlBMRWRCUVcxQ1FTeEZRVUZyUW5KMFFpeEpRVWN4UjIxMFFpeHRRa0ZEUlhZd1FpeExRVUZMTURCQ0xITkNRVUZ6UWpFd1FpeExRVUZMTm14Q0xGTkJRVlVzV1VGRk1VTTNiRUlzUzBGQlN6WnNRaXhUUVVGVGVHZENMRTFCUVUxblN5eFRRVUZYTEZOQlIycERiV3hDTEhOQ1FVRnpRaTlZTEVWQlFWVnJXU3hGUVVGWGVGWXNSMEZEZWtNc1RVRkJUWGxXTEVWQlFXbENOVEJDTEV0QlFVdHZNRUlzVjBGaE5VSndNRUlzUzBGQlN6WXdRaXd5UWtGQk1rSndXU3hIUVZoSU0xa3NTVUZETTBJc1IwRkJTVUVzU1VGQldUbEVMRXRCUVVzMmJFSXNWVUZCV1ROb1FpeFBRVUZQYjNkQ0xGZEJRV0Y0ZDBJc1JVRkJVWE5JTEZsQlFXTjNjRUlzUlVGRGVrVXNUMEZIUmpVd1FpeExRVUZMTURCQ0xITkNRVUZ6UWpWM1FpeEZRVUZUTm5kQ0xFZEJSWEJETEUxQlFVMUdMRVZCUVd0Q2RuZENMRTlCUVU5dlJTeHBRa0ZCYVVKNFJTeEhRVUZUTm5kQ0xFZEJRM3BFTjNkQ0xFVkJRVkYxUWl4TlFVRk5jM1pDTEVkQlFXRXNSMEZCUjNoV0xFVkJRVk5uUWl4UFFVRlBReXhYUVVGWGNWVXNWMEZOTjBRdlpTeFJRVU5GTVZZc1MwRkJTemd3UWl4M1FrRkJkMEk1TUVJc1MwRkJTelpzUWl4VFFVRlZMRmxCUlRWRE4yeENMRXRCUVVzNE1FSXNkMEpCUVhkQ09UQkNMRXRCUVVzMmJFSXNVMEZCVlN4blFrRkZOVU0zYkVJc1MwRkJTemd3UWl4M1FrRkJkMEppTEVkQlFYZENMR2RDUVVWeVJHb3dRaXhMUVVGTE9EQkNMSGRDUVVGM1Fsb3NSMEZCZVVJc1pVRkhlRVJSTEhOQ1FVRnpRalYzUWl4RlFVRlRObmRDTEVkQlF6ZENMRTFCUVUxSkxFVkJRV05xZUVJc1JVRkJVWFZDTEUxQlFVMXpka0lzUjBGRk9VSkpMRWRCUTBadVRpeEhRVUZaUXl4cFFrRkJhVUl2YWtJc1JVRkJVelozUWl4RlFVRlhTU3hIUVVseVJFUXNkMEpCUVhkQ2Nsa3NSVUZCVld0WkxFZEJXV2hETXpCQ0xFdEJRVXMyTUVJc01rSkJRVEpDY0Zrc1IwRllTRE5aTEVsQlF6TkNMRTFCUVUwMVFpeEZRVUZSTUd4Q0xFZEJRVmxQTEdsQ1FVRnBRbkpyUWl4RlFVRlRObmRDTEZGQlJTOUNMRWxCUVZaNmVVSXNSVUZEVkRSQ0xFVkJRVkYxUWl4TlFVRk5NblpDTEdWQlFXVk1MRWxCUlRkQ0wwMHNSMEZCV1VVc2IwSkJRVzlDYUd0Q0xFVkJRVk0yZDBJc1IwRkRla00zZDBJc1JVRkJVWFZDTEUxQlFVMXpka0lzUjBGQllYcDVRaXhOUVU5cVF6SjVRaXd5UWtGQk1rSndXU3hGUVVGVmQxa3NSMEZETDBJc1IwRkJWWGhaTEVkQlExcDNXU3hGUVVGVGVGa3NSMEZGVkRKTUxFZEJRV1UxVXl4TFFVRkxhVWdzUlVGQlZYcGpMRXRCUVVzMmJFSXNWVUZCVlhwblFpeFJRVUZSTm5aQ0xFZEJTWHBFUXl4blFrRkRSU3hQUVVGUGJERkNMRXRCUVV0dk1FSXNWMEZCWVN4SFFWYzNRaXhOUVVGTlpTeEhRVUZaTEVOQlEyaENReXhWUVVGWExHbENRVU5ZY2xnc1YwRkJWeXhGUVVWWWNVa3NXVUZCV1N4RlFVTmFhVkFzV1VGQllTeFBRVVZpUXl4alFVRmxMRTFCUlZoRExFZEJRV2RDTEVOQlEzQkNTQ3hWUVVGWExGTkJRMWh5V0N4VlFVRlhMRlZCUTFoeFNTeFhRVUZaTEZWQlExcHBVQ3haUVVGaExHMUNRVU5pUXl4alFVRmxMRzFDUVVsWVJTeEhRVUZ2UWl4UFFVTndRa01zUjBGQmEwSXNkMEpCUlhoQ0xFMUJRVTFETEVkQlEwbzVVQ3haUVVGWmJra3NSMEZEVm5wa0xFdEJRVXMyY1VJc1VVRkJWVGR4UWl4TFFVRkxPSEZDTEZkQlFWZHlUaXhIUVVNdlFucGtMRXRCUVVzeU1VSXNZVUZCWXl4RlFVTnVRak14UWl4TFFVRkxObXhDTEZOQlFWY3NTMEZIYkVKclN5eExRVUZMTlZFc1IwRkRSVzVtTEV0QlFVczJjVUlzVVVGQlVUbE5MRmRCUzJ4Q0wyUXNTMEZCU3pReFFpeFZRVVZFTlRGQ0xFdEJRVXMyY1VJc1VVRkJVWHBGTEZsQlEyWjZTQ3hIUVVGUE0yVXNTMEZCU3pZeFFpeGxRVWRrTnpGQ0xFdEJRVXMyTVVJc1kwRkJZM2hZTEZWQlFWVjBSU3hKUVVGSmVXSXNTVUZGYWtONE1VSXNTMEZCU3pneFFpeHRRa0ZCYTBJc1MwRkRja0p1Vnl4SFFVRlJVaXhQUVdKU1VTeEhRVUZSVWl4SFFXbENXakpSTEV0QlFVc3pVU3hIUVVORmJtWXNTMEZCU3paeFFpeFJRVUZST1Uwc1YwRkxiRUl2WkN4TFFVRkxOakZDTEdOQlFXTjRXQ3hWUVVGVmIwZ3NUMEZCVHl0UUxFbEJSWEJEZURGQ0xFdEJRVXM0TVVJc2JVSkJRV3RDTEV0QlEzSkNPVEZDTEV0QlFVc3JiRUlzVlVGRFRIQkhMRWRCUVZGU0xFOUJVbEpSTEVkQlFWRlNMRWRCWVZvd1Z5eGpRVU5GTEVsQlFVczNNVUlzUzBGQlN6WnNRaXhUUVVGVkxFTkJRMnhDTEUxQlFVMXJVU3hGUVVGWGNuUkNMRk5CUVZOemRFSXNZMEZCWXl4UFFVTjRRMFFzUlVGQlUxZ3NWVUZCV1hBeFFpeExRVUZMTm5GQ0xGRkJRVkYxU3l4VlFVVTVRbkF4UWl4TFFVRkxObkZDTEZGQlFWRjZSU3haUVVObU1sQXNSVUZCVXpGWUxGVkJRVlYwUlN4SlFXNUVSQ3hSUVhORWNFSXZXaXhMUVVGTE5teENMRk5CUVZkclVTeEZRVWRzUWl4UFFVRlBMekZDTEV0QlFVczJiRUlzVTBGSFpHbEdMRmRCUVZkeVRpeEhRVTlVTEU5QlRrRkJMRVZCUVZNc1NVRkJTekJZTEUxQlExVXNhVUpCUVZneFdDeEZRVUZ6UWtFc1JVRkJVeXhMUVVkeVF6UllMRmxCUVdNdldDeEhRVUZYUnl4RlFVRlBORmdzWVVGRGRrTTVXQ3hIUVc1RlZ5eFhRVzFGWVVVc1JVRkJVVGhZTEVsQlEzcENPVmdzUlVGSFZHMVpMRlZCUTAwMU1VSXNTMEZCU3pJeFFpeGpRVWxVTXpGQ0xFdEJRVXMyY1VJc1VVRkJVWGRMTEZsQlFWbFpMRTlCUVU5cU1rSXNTMEZCU3pZeFFpeGxRVVZ5UXpWVExFZEJRV0ZSTEVkQlFVZDZha0lzUzBGQlN6WXhRaXhqUVVGbFNpeEpRVUZwUWl4TFFVTnVSRGxXTEVkQlFWRXpaaXhMUVVGTE5uRkNMRkZCUVZGNVN5eHJRa0ZGZGtKME1VSXNTMEZCU3pJeFFpeGhRVUZqTEVkQlIzSkNOVkFzVlVGRFR5OXNRaXhMUVVGTE1qRkNMR05CU1ZZeFV5eEhRVUZoUXl4SlFVRkpiR3BDTEV0QlFVczJiRUlzVTBGQlZUUlFMRWxCUldoRGVqRkNMRXRCUVVzMmJFSXNVMEZCVTBvc1UwRkZaSHBzUWl4TFFVRkxNakZDTEdGQlFXTXNSMEZIY2tKSExHdENRVUZyUWpOWExFZEJRMmhDVXl4SFFVRjFRbFFzUlVGQlZXNW1MRXRCUVVzMk1VSXNZMEZCWlRjeFFpeExRVUZMTm5GQ0xGRkJRVkY2UlN4aFFWZDBSU3hOUVVGTk9GQXNSMEZCV1N4RFFVTm9Ra01zV1VGQllTeExRVVZpUXl4WFFVRlhMRWRCUlZCRExFZEJRV2RDTEVOQlEzQkNSaXhaUVVGaExGVkJRMkpETEZWQlFWY3NWMEZKVUVVc1IwRkJZeXhuUWtGTFpFTXNSMEZCYlVJc1YwRkZla0lzVFVGQlRVTXNSMEZEU2pWUkxGbEJRVmx1U1N4SFFVTldlbVFzUzBGQlN6WnhRaXhSUVVGVk4zRkNMRXRCUVVzNGNVSXNWMEZCVjNKT0xFZEJReTlDZW1Rc1MwRkJTM2t5UWl4WFFVRlpMRVZCUTJwQ2VqSkNMRXRCUVVzd01rSXNjVUpCUVhWQ0xFdEJSemxDUXl4WFFVTkZMRTFCUVUwc1dVRkRTbElzUlVGQlZ5eFZRVU5ZUXl4SFFVTkZjREpDTEV0QlFVczJjVUlzVVVGRlREZHhRaXhMUVVGTGVUSkNMRmxCU1V4TUxFZEJRMFpFTEVWQlFWbDRSQ3hSUVVka01WQXNSMEZCWVVNc1NVRkJTWGhoTEZOQlFWVTBkRUlzU1VGRk0wSnlWQ3hIUVVGaFVTeEhRVUZITDJFc1UwRTNRa2tzZDBKQk5rSjFRbk5hTEVkQlFWTm9hVUlzUzBGQlN6UXlRaXhsUVVGbE5WVXNTMEZEZUVWcFFpeEhRVUZoVVN4SFFVRkhMMkVzVTBFM1FrMHNORUpCTmtKMVFuTmFMRWRCUVZOb2FVSXNTMEZCU3pZeVFpeGxRVUZsTjFVc1MwRkRNVVZvYVVJc1MwRkJTM2t5UWl4WFFVRlpMRWRCUjI1Q1N5eGhRVU5QT1RKQ0xFdEJRVXQ1TWtJc1dVRkpWbm95UWl4TFFVRkxlVEpDTEZkQlFWa3NSVUZEYWtKNFZDeEhRVUZoUXl4SlFVRkplR0VzVTBGQlZUUjBRaXhMUVVrM1FrMHNaVUZCWlRWVkxFZEJRMklzVFVGQlRTeFBRVU5LYWxNc1IwRkRSV2xUTEVkQlEwVXNXVUZEU20xVkxFZEJRMFZ1TWtJc1MwRkJTelp4UWl4UlFVVlVMRWRCUVVrNVlTeEpRVUZYY2tnc1ZVRkJXWEZJTEVsQlFWZHZiVUlzUjBGQlpVRXNSVUZCV1hSMVFpeFRRVUZUYTBrc1IwRkRlRVVzVDBGSFJpeE5RVUZOTlVzc1JVRkJWMmxxUWl4SFFVRmxWU3hyUWtGQmEwSnhUaXhIUVVVeFFpeEpRVUZ3UW1oNFFpeEZRVUZUTkU4c1QwRkRXRzlwUWl4RlFVRlplRVFzVVVGRFNETjVRaXhMUVVGTE1ESkNMSFZDUVVGNVFrZ3NSMEZEZGtOd2VFSXNSVUZCVTBFc1JVRkJVelJQTEU5QlFWTXNSMEZCUnpSbExGRkJSVGxDZUhSQ0xFVkJRVk1zUjBGQlIzZDBRaXhSUVVsb1FtdEZMR1ZCUVdVM1ZTeEhRV3BGUkN4UlFXdEZVa0VzUlVGQlRUTm5RaXhOUVVsV2NrSXNTMEZCU3pBeVFpeHhRa0ZCZFVJeFZTeEZRVUZOSzFVc1UwRkJWMUlzUjBGeVJYcENMRmRCZDBWMFFucE1MRmRCUVZkeVRpeEhRVXRVTEU5QlNrRkJMRVZCUVZNc1NVRkJTM2xaTEUxQlExVXNhVUpCUVZoNldTeEZRVUZ6UWtFc1JVRkJVeXhKUVVVMVEwWXNSMEZzUmxjc1dVRnJSbUZGTEVWQlFWRTBXU3hKUVVONlFqVlpMRWRCYVVKWUxFMUJRVTExV2l4SFFVRlRMRkZCU1ZSRExFZEJRV1VzVTBGRFprTXNSMEZCV1N4RFFVTm9RbTVDTEZWQlFWVXNSVUZEVmpGTkxGVkJRVlVzUlVGRFZuTktMRTlCUVU4c1IwRkZTSGRGTEVkQlFXZENMRU5CUTNCQ2NFSXNVMEZCVlN4dFFrRkRWakZOTEZOQlFWVXNWVUZEVm5OS0xFMUJRVThzVjBGSlNIbEZMRWRCUVdsQ0xHdENRVU5xUWtNc1IwRkJaU3huUWtGRlprTXNSMEZCWlN4clFrRkRaa01zUjBGQmMwSXNlVUpCUTNSQ1F5eEhRVUV3UWl3eVFrRkZNVUpETEVkQlFUQkNMRFpDUVVVeFFrTXNSMEZCYTBJc1lVRkZiRUpETEVkQlFXOUNMRTlCUTNCQ1F5eEhRVUZ2UWl4bFFWY3hRaXhOUVVGTlF5eFhRVUZqYkZNc1IwRkRiRUpETEZsQlFWazVhRUlzUlVGQlV6SmFMRWRCUTI1Q01rMHNUVUZCVFhSdFFpeEhRVU5PT1VRc1MwRkJTelp4UWl4UlFVRlZOM0ZDTEV0QlFVczRjVUlzVjBGQlYzSk9MRWRCUXk5Q2VtUXNTMEZCU3pnelFpeFJRVUZWTVZBc1IwRkJaVU1zVVVGaVZpeG5Ra0ZoYlVOeWIwSXNTMEZCU3pac1FpeFZRVU0xUkRkc1FpeExRVUZMS3pOQ0xGVkJRVmt2TTBJc1MwRkJTMmMwUWl4elFrRkRkRUpvTkVJc1MwRkJTMmswUWl4WFFVRmhhalJDTEV0QlFVdHJORUlzZFVKQlEzWkNiRFJDTEV0QlFVczJka0lzVlVGQlZ5eEZRVU5vUWpkMlFpeExRVUZMYlRSQ0xITkNRVUYxUWl4RlFVTTFRbTQwUWl4TFFVRkxiM1pDTEd0Q1FVRnRRaXhGUVVONFFuQjJRaXhMUVVGTGJ6UkNMRmRCUVdFc1NVRkJTV3BGTEVkQlNXSTVTU3h4UWtGRFZDeFBRVUZQTmt3c1IwRkhSVGRZTEd0Q1FVTlVMRTlCUVU4eVdDeEhRVWxVTVZBc1QwRkJUek5GTEVkQlEwd3NUMEZCVHpOcFFpeExRVUZMTm5aQ0xGTkJRVmMzZGtJc1MwRkJTemgyUWl4UFFVRlRPWFpDTEV0QlFVc3Jka0lzUzBGQlMzQk9MRWRCUjJwRWIwNHNTMEZCUzNCT0xFZEJRME16YVVJc1MwRkJTeloyUWl4VlFVRlpOM1pDTEV0QlFVdHZka0lzYTBKQlNWSnVUU3hIUVVGaGEwSXNVVUZCVVc1clFpeExRVUZMTm14Q0xGTkJRVlYzVWl4SFFVRmpMRU5CUTJ4Rk1WVXNZMEZCUVVFc1NVRkhXVFpDTEcxQ1FVbGtlR3RDTEV0QlFVczJka0lzVlVGQlZ5eEZRVVZhTjNaQ0xFdEJRVXR4TkVJc1owSkJRMUJ5TkVJc1MwRkJTMjkyUWl4clFrRkJiVUlzUjBGSE1VSndka0lzUzBGQlMyODBRaXhYUVVGWGRFa3NUMEZGYUVKd2JrSXNVMEZCVTJkSUxFdEJRVXN5VHl4VlFVRlZkRVVzU1VGQlNUSmtMRWxCUlRWQ01UTkNMRXRCUVV0ek5FSXNaMEpCUlV4ME5FSXNTMEZCUzNVMFFpeHJRa0ZGVEhZMFFpeExRVUZMZHpSQ0xHdENRVVZNZGxZc1IwRkJZVkVzUjBGQlIzcHFRaXhMUVVGTE9ETkNMRkZCUVZOTUxFbEJRWGxDTEV0QlEzSkVlRlVzUjBGQllWTXNTVUZCU1RGcVFpeExRVUZMTm14Q0xGTkJNVVZGTERSQ1FUQkZLMEkzUkN4SlFVTnFSRUVzUlVGQlRXcFRMRk5CUVZjdlVDeExRVUZMTm14Q0xGZEJRM2hDTjJ4Q0xFdEJRVXR0TkVJc2MwSkJRWFZDTEZOQlMyeERialJDTEV0QlFVdDVORUlzWlVGQll5eEpRVUZOZWpSQ0xFdEJRVXN3TkVJc1lVRkJZUzlXTEUxQlJ6ZERiVTRzVDBGRFJTeEpRVUZMT1haQ0xFdEJRVXMyZGtJc1ZVRkJXVGQyUWl4TFFVRkxiM1pDTEdsQ1FVTjZRaXhQUVV0R0xFZEJSbXRDYmswc1IwRkJZV3RDTEZGQlFWRnVhMElzUzBGQlN6WnNRaXhUUVdwSE0wSXNhVUpCYlVkSWNrSXNhVUpCUTFvc1QwRkhSbmhyUWl4TFFVRkxOblpDTEZWQlFWY3NSVUZGYUVJc1RVRkJUWHBLTEVWQlFXRndiVUlzUzBGQlMzRTBRaXhqUVVWd1FtcFRMRWxCUTBad2JVSXNTMEZCUzI5MlFpeHJRa0ZCYlVJc1IwRkhNVUp3ZGtJc1MwRkJTM1UwUWl4clFrRkZUSFkwUWl4TFFVRkxkelJDTEd0Q1FVVk1lRFJDTEV0QlFVdHBORUlzVjBGQlYyNUNMR0ZCUldoQ09USkNMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlZ2U0N4UFFVRlBhMU1zU1VGRkwwSXhWU3hIUVVGaFF5eEpRVUZKYkdwQ0xFdEJRVXMyYkVJc1UwRkJWVEJTTEVsQlEyaERkRlVzUjBGQllVTXNTVUZCU1d4cVFpeExRVUZMT0ROQ0xGRkJRVk5NTEVsQlJTOUNlak5DTEV0QlFVdHRiVUlzWjBKQlFXVXNTVUZCVFc1dFFpeExRVUZMTWpSQ0xHTkJRV016TkVJc1MwRkJTelpzUWl4VFFVRlZUeXhIUVVjNVJFd3NWVUZEUlN4RFFVRkROMmhDTEU5QlFWRnNSU3hMUVVGTE9ETkNMRk5CUVZNeGVVSXNVMEZCVVhkNlFpeEhRVUZsTTFZc1IwRkJZVU1zU1VGQlNUQldMRVZCTTBrdlF5eGxRVFpKYUVJMU5FSXNTMEZCU3lzelFpeFZRVUZWYUZNc1ZVRkZaaTlzUWl4TFFVRkxhVFJDTEZkQlFWZHVRaXhoUVVWb1FqRk5MRTFCUVUxeVJTeFZRVWRTT0ZNc1pVRkRSVGMwUWl4TFFVRkxjelJDTEdkQ1FVbFFUaXh6UWtGRFJTeFBRVUZQTEVsQlFVbDBReXhIUVVGVExFTkJRMnhDTTFnc1ZVRkJWM2xHTEZGQlFWRjRha0lzUzBGQlN6WnhRaXhSUVVGUmEwd3NWVUZGYUVNelVDeFhRVUZaY0cxQ0xFdEJRVXR4TkVJc1owSkJTWEpDU0N4MVFrRkRSU3hQUVVGUExFbEJRVWt4UWl4SFFVRlZMRU5CUTI1Q1RDeFpRVUZoYmpKQ0xFdEJRVXMyYkVJc1YwRkpkRUpwUml4WFFVRlhjazRzUjBGTlZDeFBRVXhCUVN4RlFVRlRMRWxCUVV0NVdpeE5RVU5VZEZBc1IwRkJXVWNzYTBKQlFXdENMMjVDTEV0QlFVczJiRUlzWVVGRGFFSXNhVUpCUVZod1NTeEZRVUZ6UWtFc1JVRkJVeXhKUVVVMVEwWXNSMEZCWjBKNVdpeEhRVUZSZGxvc1JVRkJVVEJhTEVsQlEzcENNVm9zUlVGSFZHbGlMR0ZCUVdFdlZpeEhRVU5ZTEUxQlFVMTVSQ3hGUVVGaGNHMUNMRXRCUVV0eE5FSXNZMEZGYkVKVExFVkJRVmt4VVN4SFFVRmxReXhSUVhKS1ZDeGpRWEZLYzBOeWIwSXNTMEZCU3pnelFpeFRRVVU1UkRrelFpeExRVUZMTm14Q0xGTkJRVk42WkN4WlFVRmpjRWtzUzBGQlN6WnNRaXhUUVVGVGVtUXNWMEZCVjJsV0xGZEJRV0ZqTEV0QlFVdERMR05CUlRGRk1WWXNVMEZCVTJkSUxFdEJRVXQxYlVJc1QwRkJUMm95UWl4TFFVRkxObXhDTEZWQlJ6VkNOMnhDTEV0QlFVczJiRUlzVTBGQlUzaG5RaXhOUVVGTmVYTkNMRkZCUVZVc1VVRkZPVUk1ZUVJc1MwRkJTelpzUWl4VFFVRlRjR2RDTEdkQ1FVRm5RaXhsUVVVNVFucEdMRXRCUVVzMmJFSXNVMEZCVTI1blFpeGhRVUZoTEdOQlFXTXNSMEZGZWtNeFJpeExRVUZMTm14Q0xGTkJRVk51WjBJc1lVRkJZU3hQUVVGUkxGVkJSVzVETVVZc1MwRkJTelpzUWl4VFFVRlROMWNzVlVGQldTeEZRVVYwUWpod1FpeEpRVU5HUVN4RlFVRlZPWEJDTEZWQlFWa3NSMEZIY0VKdldDeEhRVU5HZWtnc1IwRkJUek5sTEV0QlFVczJiRUlzVlVGSFpEZHNRaXhMUVVGTE5teENMRk5CUVZONFNDeFZRVUZWZEVVc1NVRkJTVFJrTEVsQllUVkNNek5DTEV0QlFVdHRiVUlzWjBKQldITkNMRXRCUTNKQ2JtMUNMRXRCUVVzMmNVSXNVVUZCVVRoSUxFOUJRMll6ZVVJc1MwRkJTMmswUWl4WFFVRlhkRUlzVjBGSGJFSXpNa0lzUzBGQlMyOTJRaXhyUWtGQmJVSXNSVUZEZUVKdVRTeEhRVUZoYTBJc1VVRkJVVzVyUWl4TFFVRkxObXhDTEZOQmJrMVdMR2xDUVcxTmJVTXNRMEZEYWtSc1JDeGpRVUZCUVN4TlFVbHZRek5wUWl4TFFVRkxPRE5DTEZGQlFWTXhVaXhIUVVkNFJHMVRMR3RDUVVOTmRqUkNMRXRCUVVzMmRrSXNVMEZEVURWTkxFZEJRV0ZSTEVkQlFVZDZha0lzUzBGQlN6WnNRaXhUUVVGVk1sSXNTVUZCZVVKNFZpeEpRVU5zUkdocFFpeExRVUZMTm5GQ0xGRkJRVkY0UWl4VlFVRlpja2dzUlVGQlRUTm5RaXhOUVVGUk5ERkNMRWxCUTNwRGFsWXNSVUZCVFdsRUxHbENRVU5PYW14Q0xFdEJRVXM0ZGtJc1VVRkRTemwyUWl4TFFVRkxObkZDTEZGQlFWRjRRaXhWUVVGWmNrZ3NSVUZCVFROblFpeE5RVUZSTkRGQ0xFbEJRMnBFYWpOQ0xFdEJRVXNyTkVJc1owTkJTVlE1Vml4SFFVRmhReXhKUVVGSmJHcENMRXRCUVVzMmJFSXNVMEZCVlRKU0xFbEJTWEJEWjBJc2EwSkJRMDE0TkVJc1MwRkJTeloyUWl4VFFVTlFOVTBzUjBGQllWRXNSMEZCUjNabUxFOUJRVkZ2ZWtJc1NVRkJZeXhKUVVGTmRETkNMRXRCUVV0ek5FSXNhMEpCUldwRWNsWXNSMEZCWVVNc1NVRkJTV2htTEU5QlFWRnZla0lzU1VGSk4wSnhRaXhoUVVORk16UkNMRXRCUVVzMmJFSXNVMEZCVTNoblFpeE5RVUZOZVhOQ0xGRkJRVlVzVDBGRk9VSTVlRUlzUzBGQlN6WnNRaXhUUVVGVGJtZENMR0ZCUVdFc1pVRkJaU3hIUVVVeFF6RkdMRXRCUVVzMmJFSXNVMEZCVTNCblFpeG5Ra0ZCWjBJc1kwRkZPVUo2Uml4TFFVRkxObXhDTEZOQlFWTndaMElzWjBKQlFXZENMRkZCUlRsQ2VrWXNTMEZCUzI5MlFpeHJRa0ZCYlVJc1JVRkZlRUp3ZGtJc1MwRkJTeXN6UWl4VlFVRlZha2tzVFVGQlN5eExRVU5zUW5CdVFpeFRRVUZUWjBnc1MwRkJTekpQTEZWQlFWVnZTQ3hQUVVGUGFWTXNTVUZGTDBJeE0wSXNTMEZCUzJjMVFpeHZRa0ZGVEdnMVFpeExRVUZMYnpSQ0xGZEJRVmN4YVVJc1VVRkZhRUoxVGl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CUVZWMVVpeFBRVWw0UTNGQ0xHTkJRV04wV2l4SFFVTmFPRVFzUjBGQllWRXNSMEZCUjNwcVFpeExRVUZMTm14Q0xGTkJRVlV3VWl4SlFVRnhRblpXTEVsQlF6bERhR2xDTEV0QlFVdHRORUlzY1VKQlExQnVORUlzUzBGQlMyMDBRaXh6UWtGQmRVSXNSVUZKTVVKdVZ5eEZRVUZOYWxNc1UwRkJWMmxUTEVWQlFVMXBXQ3hwUWtGSlJ5eEpRVUV4UW1vMVFpeExRVUZMTm5GQ0xGRkJRVkZyVEN4VFFVTm1MekZDTEV0QlFVczRka0lzVDBGRE9FSXNWMEZCTVVJNWRrSXNTMEZCU3paeFFpeFJRVUZSYTB3c1ZVRkRkRUl2TVVJc1MwRkJTeXMwUWl4cFEwRkpWQzgwUWl4TFFVRkxLek5DTEZWQlFWVm9TU3hMUVVGTE5WRXNSMEZIZEVKcldpeGpRVU5GTEU5QlFVOXlORUlzUzBGQlN6WnNRaXhUUVVGVGVFZ3NWVUZCVlhoWExGTkJkRkZVTEZGQmVWRjRRbXQ0UWl3MlFrRkhSU3hIUVVaclFqbFdMRWRCUVdGclFpeFJRVUZSYm10Q0xFdEJRVXMyYkVJc1UwRnlVbTVDTERCQ1FYVlNXSEpDTEdsQ1FVTmFMRTlCUjBZc1RVRkJUU3hWUVVOS2JrY3NSVUZCVXl4aFFVTlVNVTRzUlVGQldTeE5RVU5hZEV3c1IwRkRSWEpHTEV0QlFVczJiRUlzVTBGRFNIRlVMRVZCUVhGQ2RtOUNMRVZCUVdWcVNTeFRRVUZUUXl4blFrRkJaMEozUXl4alFVVTVSQ3QwUWl4SFFVRXdReXhYUVVGd1FqZDZRaXhGUVVGTmEwc3NWMEZCTUVJNFR5eEZRVUZWZUZjc1UwRkJVeXQyUWl4TlFVbDZSWE5DTEVsQlEwZzNla0lzUlVGQlRXdExMRlZCUVZrc1ZVRkhjRUk0VHl4RlFVRlZkRVVzU1VGQlNUWmtMRWxCUldRMU0wSXNTMEZCUzIxdFFpeG5Ra0ZCWlN4TFFVTnNRamxJTEVWQlFWVnZTQ3hQUVVGUGJWTXNTVUZGV25OQ0xFZEJRMGhzTlVJc1MwRkJTMjF0UWl4blFrRkJaU3hMUVVOc1FqbG5RaXhGUVVGTmEwc3NWVUZCV1N4TFFVTnFRblpRTEV0QlFVczRNMElzVjBGRlZEa3pRaXhMUVVGTE9ETkNMRk5CUlZJNU0wSXNTMEZCU3pac1FpeFRRVUZUT0Uwc1UwRk5hRUl5Uml4blFrRkRSU3hOUVVGTldTeEZRVUZ4UW13MVFpeExRVUZMTm14Q0xGTkJRVk5zVml4aFFVRmxha2tzVTBGQlUwTXNaMEpCUVdkQ2QwTXNZVUZGTTBWNWNFSXNSVUZCYVVJMU1FSXNTMEZCUzI4MFFpeFhRVUZYYUVVc1YwRkZha01yUlN4RlFVRnZRblpGTEVWQlFXbENMRWxCUlhSRGRVVXNSMEZCY1VKRUxFbEJRWFZDYm1Fc1RVRkJWMjloTEVsQlFYTkNSQ3hIUVVGelFtNWhMRkZCUTNSSEwyVXNTMEZCU3pac1FpeFRRVUZUZUdkQ0xFMUJRVTByZWtJc1dVRkJZeXhIUVVGSGVFVXNVVUZIYmtOMVJTeEpRVUZ6UWtRc1NVRkJkVUp1WVN4UFFVRlpiMkVzUjBGQmNVSkVMRWRCUVhOQ2JtRXNVVUZEZEVjdlpTeExRVUZMTm14Q0xGTkJRVk40WjBJc1RVRkJUV2N3UWl4aFFVRmxMRWRCUVVkNlJTeFBRVWt4UTI5RkxHOUNRVU5GYURWQ0xFdEJRVXMyYkVJc1UwRkJVM2huUWl4TlFVRk5LM3BDTEZsQlFXTXNSMEZEYkVOd05VSXNTMEZCU3pac1FpeFRRVUZUZUdkQ0xFMUJRVTFuTUVJc1lVRkJaU3hIUVVseVEyaFVMSFZDUVVGMVFqVkpMRVZCUVZGclJpeEhRVU0zUWl4UFFVRlBNMmxDTEV0QlFVdHRia0lzVFVGQlN5eFhRVU5tTEUxQlFVMTBXaXhGUVVGUFozRkNMRWRCUVUwNVVTeHZRa0ZCYjBJdmJVSXNTMEZCVFhsa0xFZEJSVGRETEVkQlFYTkNMR2xDUVVGWVFTeEZRVUZZTEVOQlNVRXNVVUZCTkVJc1NVRkJha0kxVUN4RlFVRkxORkFzUjBGRFpDeE5RVUZOTEVsQlFVbExMRlZCUVZVc2IwSkJRVzlDVEN4TlFVY3hRelZRTEVWQlFVczBVQ3hIUVVGUmEwWXNVVUZaYmtKTkxFZEJRV0ZSTEVkQlFVY3ZZU3hUUVdwWFpTd3dRa0ZSUVN3MFFrRjVWakpETEZOQlFWVnpXaXhIUVVOc1JpeE5RVUZOYWxNc1JVRkJVMmxPTEVkQlFYVkNhR1FzVFVGRmJFTXNRMEZCUXl4SlFVRkxMRkZCUVZFMFl5eFRRVUZUTldNc1MwRkJTelp0UWl4VlFVTTVRamRGTEVWQlFVMXBSQ3hwUWtGSFVtaERMRWRCUVdGVExFbEJRVWt6VkN4RlFVRlJjMjVDTEVsQlFXTnBReXhKUVVOcVEwRXNSVUZCVlRsVkxHdENRVXRrZGtJc1IwRkJZVk1zU1VGQlNUTlVMRVZCUVZGeGJrSXNTVUZCWjBJc1MwRkRia055V2l4SFFVRlZMMlFzVDBGRFdrRXNTMEZCU3pKNVFpeGpRVXRZTEUxQlFVMDBSeXhGUVVGbGJsSXNSMEZCWlVNc1VVRm9XR1FzWlVGcldHeENhMUlzUjBGRFJqRkNMRWRCUVUxMlVpeFpRVUZaYVZRc1IwRkJZM3BLTEU5QlIzSkNLMGdzUjBGQlRUbFJMRzlDUVVGdlFtaFlMRWRCUTJ4RGRWZ3NUMEZCVDNSdVFpeFRRVVZrZVcxQ0xFZEJRWEZDYjFJc1NVRlJja0kxV1N4SFFVRnRRalJaTEVsQlkyNUNMRTFCUVUweVFpeEhRVUZUTEZsQlRWUkRMRWRCUVZrc1EwRkRhRUl4UkN4VlFVRlZMRVZCUTFZeFRTeFZRVUZWTEVWQlExWndZaXhSUVVGUkxFZEJSVXA1Y2tJc1IwRkJaMElzUTBGRGNFSXpSQ3hUUVVGVkxGVkJRMVl4VFN4VFFVRlZMRlZCUTFad1lpeFBRVUZSTEZkQlJVb3dja0lzUjBGQmIwSXNUMEZGY0VKRExFZEJRV2RDTEd0Q1FVbG9Ra01zUjBGQmFVSXNjMEpCVlhaQ0xFMUJRVTFETEZkQlFXdENibFVzUjBGRGRFSkRMRmxCUVZrNWFFSXNSVUZCVXpKYUxFZEJRMjVDTWswc1RVRkJUWFJ0UWl4SFFVTk9PVVFzUzBGQlN6WnhRaXhSUVVGVk4zRkNMRXRCUVVzNGNVSXNWMEZCVjNKT0xFZEJReTlDZW1Rc1MwRkJTeloyUWl4VlFVRlhMRVZCUTJoQ04zWkNMRXRCUVVzck0wSXNWVUZCV1M4elFpeExRVUZMWnpSQ0xITkNRVU4wUW1nMFFpeExRVUZMYVRSQ0xGZEJRV0ZxTkVJc1MwRkJTMnMwUWl4MVFrRkZka0pzTkVJc1MwRkJTMjl5UWl4eFFrRkpTUzlNTEd0Q1FVTlVMRTlCUVU5dFlTeEhRVWRGYms4c2NVSkJRMVFzVDBGQlQyOVBMRWRCU1ZSdVV5eFBRVUZQTTBVc1IwRkRUQ3hQUVVGUE0ybENMRXRCUVVzMmRrSXNVMEZCVnpkMlFpeExRVUZMT0haQ0xFOUJRVk01ZGtJc1MwRkJTeXQyUWl4TFFVRkxjRTRzUjBGSGFrUnZUaXhMUVVGTGNFNHNSMEZEUXpOcFFpeExRVUZMTm5aQ0xGVkJTVk0xVFN4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CTTBNelFpeHZRa0V5UTIxRUxFTkJRMnhGYkVRc1kwRkJRVUVzU1VGSFdUWkNMRzFDUVVsa2VHdENMRXRCUVVzMmRrSXNWVUZCVnl4RlFVTm9RamQyUWl4TFFVRkxObXhDTEZOQlFWTjRaMElzVFVGQlRUQXdRaXhYUVVGaExGVkJSV3BETHpWQ0xFdEJRVXNyTTBJc1ZVRkJWV2hKTEU5QlJWWXZka0lzUzBGQlN6WnhRaXhSUVVGUk5XTXNVMEZEYUVJc1NVRkJTV3R0UWl4SlFVRnJRbkpGTEU5QlIzaENPWFpDTEV0QlFVczJiRUlzVTBGQlUzQm5RaXhuUWtGQlowSXNaVUZGT1VKNlJpeExRVUZMTm14Q0xGTkJRVk51WjBJc1lVRkJZU3hqUVVGakxFZEJSWHBETVVZc1MwRkJTelpzUWl4VFFVRlRibWRDTEdGQlFXRXNUMEZCVVN4VlFVVnVRekZHTEV0QlFVczJiRUlzVTBGQlUzaElMRlZCUVZWMFJTeEpRVUZKTkdZc1NVRlpOVUl6TlVJc1MwRkJTMjF0UWl4blFrRldiMElzUzBGRGJFSnViVUlzUzBGQlN6WnhRaXhSUVVGUk5XTXNVVUZEYUVKcVR5eExRVUZMYVRSQ0xGZEJRVmQwUWl4WFFVZHNRakZVTEVkQlFXRnJRaXhSUVVGUmJtdENMRXRCUVVzMmJFSXNVMEY0UlZZc2NVSkJkMFZ0UXl4RFFVTnFSR3hFTEdOQlFVRkJMRTFCU1d0RE0ybENMRXRCUVVzMmJFSXNWVUZCVlN4SlFVZDJSR2xMTEU5QlEwODVka0lzUzBGQlN6WjJRaXhYUVVsUk5VMHNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFYQkdNMElzY1VKQmMwWklja0lzYlVKQlNXUjRhMElzUzBGQlMyazBRaXhYUVVGWGJrSXNZVUZGYUVJNU1rSXNTMEZCU3pac1FpeFRRVUZUYlZVc1QwRkZaR2cyUWl4TFFVRkxOblpDTEZWQlFWY3NSVUZGYUVJM2RrSXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWVzlJTEU5QlFVOXJWU3hKUVVVdlFqTTFRaXhMUVVGTEt6TkNMRlZCUVZWcVNTeFBRV3RDWmpsMlFpeExRVUZMYlcxQ0xHZENRV2hDYjBJc1MwRkRka0p1YlVJc1MwRkJTelpzUWl4VFFVRlRibWRDTEdGQlFXRXNaVUZCWlN4SFFVVXhRekZHTEV0QlFVczJiRUlzVTBGQlUzQm5RaXhuUWtGQlowSXNZMEZGT1VKNlJpeExRVUZMTm14Q0xGTkJRVk53WjBJc1owSkJRV2RDTEZGQlJUbENla1lzUzBGQlN6WnNRaXhUUVVGVGVHZENMRTFCUVUwd01FSXNWMEZCWVN4VFFVVTFRaTgxUWl4TFFVRkxObkZDTEZGQlFWRTFZeXhUUVVOb1FpeEpRVUZKYTIxQ0xFbEJRV3RDZW1Vc1VVRkhlRUoxVGl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CUVZWblZTeE5RVWRCTnpWQ0xFdEJRVXMyYkVJc1ZVRkJWU3hMUVVkMlJFVXNWVUZEUlM5c1FpeExRVUZMS3pOQ0xGVkJRVlZvVXl4VlFVVm1MMnhDTEV0QlFVdHBORUlzVjBGQlYyNUNMR0ZCUldoQ01VMHNUVUZCVFhKRkxGVkJTVklyUlN4WFFVRlhjazRzUjBGTlZDeFBRVXhCUVN4RlFVRlRMRWxCUVV0bll5eE5RVU5VTjFJc1IwRkJXVWNzYTBKQlFXdENMMjVDTEV0QlFVczJiRUlzWVVGRGFFSXNhVUpCUVZod1NTeEZRVUZ6UWtFc1JVRkJVeXhKUVVVMVEwWXNSMEZCWjBKcFl5eEhRVUZSTDJJc1JVRkJVV2xqTEVsQlEzcENhbU1zUlVGSFZIVmhMSE5DUVVORkxFOUJRVThzU1VGQlNYUkRMRWRCUVZNc1EwRkRiRUpPTEZWQkwwbHpRaXh4UWtGblNuUkNjbGdzVlVGQlZ5OWtMRXRCUVVzMmNVSXNVVUZCVVd0TUxGTkJRM2hDTTFBc1dVRkJXU3hGUVVOYWFWQXNXVUZCWVhJeFFpeExRVUZMTm14Q0xGTkJRVk42WkN4WFFVTXpRbXQwUWl4alFVRmxMRWxCUVUxME1VSXNTMEZCU3poMlFpeFRRVWs1UW05SkxIVkNRVU5GTEU5QlFVOHNTVUZCU1RGQ0xFZEJRVlVzUTBGRGJrSk1MRmxCUVdGdU1rSXNTMEZCU3pac1FpeFhRVWwwUW5WR0xIRkNRVU5GYmtrc1IwRkJZVkVzUjBGQlIzcHFRaXhMUVVGTE5teENMRk5CZGtwTExHZERRWFZLTkVJM1JDeEpRVU5vUkdocFFpeExRVUZMTm5GQ0xGRkJRVkY0UWl4VlFUTkxTaXhYUVRKTFowSnlTQ3hGUVVGTk0yZENMRXRCUTJwRGNrSXNTMEZCU3poMlFpeFZRVTFZZWtvc2RVSkJRWFZDTlVrc1IwRkRja0lzVDBGQlQzcGtMRXRCUVV0dGJrSXNUVUZCU3l4WFFVTm1MRTFCUVUxMFdpeEZRVUZQYVhOQ0xFZEJRVlV2VXl4dlFrRkJiMEl2YlVJc1MwRkJUWGxrTEVkQlJXcEVMRWRCUVhOQ0xHbENRVUZZUVN4RlFVRllMRU5CU1VFc1VVRkJjVUo0WXl4SlFVRnFRalJOTEVWQlFVczBVQ3hKUVVGNVFrRXNSVUZCVDFvc1YwRkJWeXhOUVVGdFFpeG5Ra0ZCV0Zrc1JVRkRNVVFzVFVGQlRTeEpRVUZKU3l4VlFVRlZMRzlDUVVGdlFrd3NUVUZITVVNMVVDeEZRVUZMTkZBc1IwRkJVWHBrTEZkQldXNUNhV3BDTEVkQlFXRlJMRWRCUVVjdllTeFRRWGhNWlN3NFFrRkZRU3huUTBGelRESkRMRk5CUVZWeldpeEhRVU5zUml4TlFVRk5hbE1zUlVGQlUybE9MRWRCUVhWQ2FHUXNUVUZOZEVNc1IwRktTU3hEUVVGRExFbEJRVXNzVVVGQlVUUmpMRk5CUVZNMVl5eExRVUZMTm0xQ0xGVkJRemxDTjBVc1JVRkJUV2xFTEdsQ1FVZEtMMGNzUjBGQlYyeGxMRTFCUTJJc1QwRkhSbWxxUWl4SFFVRmhVeXhKUVVGSk0xUXNSVUZCVVRod1FpeEpRVUZuUWl4TFFVVnVRemxpTEVkQlFWVXZaQ3hQUVVOYVFTeExRVUZMTW5sQ0xGZEJTVlFzVFVGQlRUUkhMRVZCUVdWdVVpeEhRVUZsUXl4UlFVRlJkVklzU1VGRmVFTk1MRWRCUVdkQ1FTeEpRVUZwUW5od1FpeEhRVU51UXl0d1FpeEhRVUZWZUZRc1dVRkJXV2xVTEVkQlFXTjZTaXhQUVVkNlFtZExMRWRCUVZVdlV5eHZRa0ZCYjBKb1dDeEhRVU4wUTNWWUxFOUJRVTkwYmtJc1UwRkZaR2xxUWl4SFFVRmhVU3hIUVVGSGRtWXNUMEYwVDJNc09FSkJjMDlwUWl4SlFVRk5hMnRDTEVkQlFXVTFVeXhMUVVGTGIydENMRWxCUVdWNE1FSXNVMEZCVVRacVFpeEhRVUZOTmxFc1IwRkJWUzlUTEc5Q1FVRnZRbXRETEVkQlFVazRSeXhYUVVONFNYUktMRWRCUVhGQ2NWUXNTVUZQY2tJM1lTeEhRVUZ0UWpaaExFbEJVVzVDTEUxQlFVMUhMRWRCUVdkQ0xFbEJRVWx5WjBJc1NVRkJTU3hEUVVGRExHRkJRV01zVDBGQlVTeFBRVUZSTEZkQlFWa3NWMEZCV1N4VFFVRlZMRTFCUVU4c1pVRlJhRWR6WjBJc1IwRkJiVUlzYVVWQlQyNUNReXhIUVVGdFFpeHhTVUZGYmtKRExFZEJRVzFDTEVOQlFVTXZla0lzUlVGQlYyY3dRaXhMUVVOdVF5eE5RVUZOUXl4RlFVRm5RbW93UWl4RlFVRlZkRU1zVTBGQlV6TkVMR05CUlhwRExFZEJRVWxwTmtJc1JVRkJjVUo2WkN4VFFVRlRNR1FzUjBGRGFFTXNUMEZCU1V3c1IwRkJZMmhuUWl4SlFVRkpjV2RDTEVsQlEySTVWeXhSUVVGUk1GY3NSMEZCYVVJeGNVSXNTMEZCUzI1S0xFVkJRVlZyTUVJc1dVRkJZMG9zUjBGQmFVSXpjVUlzUzBGQlMyNUtMRVZCUVZWck1FSXNXVUZOYWtjc1RVRkJUVU1zUlVGQlUwZ3NSVUZCY1VJemQwSXNVVUZCVHl0M1FpeEhRVUZyUWtFc1lVRkJNRUkxWXl4VFFVVjJSaXhKUVVGTExFbEJRVWx1U2l4RlFVRkpMRVZCUVVkc1N5eEZRVUZOWjNkQ0xFVkJRVTk2YlVJc1QwRkJVVmNzUlVGQlNXeExMRVZCUVV0clN5eEpRVU0xUXl4SFFVRkpPR3hDTEVWQlFVODViRUlzUjBGQlIyeEdMRXRCUVVzNGNVSXNSMEZEYWtJc1QwRkJUeXhGUVVsWUxFOUJRVThzUjBGdlExUXNVMEZCVTBrc1IwRkJZVU1zUlVGQldVTXNSVUZCVjBNc1IwRkRNME1zU1VGQlMwWXNSVUZCVnpWdFFpeFBRVU5rTEU5QlFVODBiVUlzUlVGSFZDeEhRVUZKUlN4SFFVRnZReXh0UWtGQlprRXNSVUZEZGtJc1QwRkJUMEVzUlVGQlYwWXNSMEZIY0VJc1RVRkRUVWNzUjBGRVdTeEpRVUZKTlRKQ0xFOUJRVTgyTWtJc1YwRkRTME1zWjBKQlFXZENUQ3hGUVVGWkxHRkJRM2hFZURGQ0xFVkJRVmNzUjBGQlIycERMRlZCUVZVME0wSXNSVUZCWjBKd2NrSXNTMEZCUzNOVUxHbENRVUZwUWl4TlFVVndSU3hKUVVGTExFbEJRVWwwVHl4RlFVRkpMRVZCUVVkc1N5eEZRVUZOY2tZc1JVRkJVelJQTEU5QlFWRlhMRVZCUVVsc1N5eEZRVUZMYTBzc1NVRkJTeXhEUVVOdVJDeE5RVUZOTlZFc1JVRkJWWEZDTEVWQlFWTjFVQ3hIUVVOdVFuVnRRaXhGUVVGamJqTkNMRVZCUVZGRExGTkJRVk16UkN4alFVVnlReXhKUVVGTGJVSXNUMEZCVHpKRUxFdEJRVXN3TVVJc1IwRkJWMmhsTEZOQlFWTnhaU3hIUVVGakxFTkJRMnBFYmpOQ0xFVkJRVkV5YUVJc1UwRkRVaXhUUVVkR0xFMUJRVTE1Vml4RlFVRm5RaXhIUVVGSGFEUkNMRlZCUVZWWkxFVkJRVkY1UWl4WlFVTnlRelF4UWl4RlFVRnZRaXhIUVVGSGFqUkNMRTlCUVU4d00wSXNSVUZCVlN4TlFVRlJMRWRCUVVsQkxFVkJRVlZMTEVsQlFXZENMRWxCUTNCR1F5eEZRVUZqT1RGQ0xGTkJRVkZwUWl4SlFVTm1LM3BDTEVkQlFXbENMM3BDTEVWQlFWYzRNRUlzU1VGREwwSnlNMElzUlVGQlVUSkNMR2RDUVVGblFsa3NSVUZCVlhSRExHRkJTM2hETEU5QlFVOHJNa0lzUlVGQlowSndja0lzUzBGQlN6QnlRaXhWUVdVNVFpeE5RVUZOUXl4SFFVRlRMRlZCU1ZSRExFZEJRWGRDTEVsQlFVa3hhRUlzU1VGQlNTeERRVUZETEZkQlFWa3NXVUZCWVN4bFFVTXhSREpvUWl4SFFVRm5RaXhEUVVOd1FrTXNWVUZCVnl4VlFVTllReXhUUVVGVkxGTkJRMVpETEUxQlFVOHNORUpCUTFCMldDeFJRVUZUTEZOQlExUjNXQ3hOUVVGUExHdENRVU5RZG5KQ0xFdEJRVTBzVlVGRFRuRk5MRk5CUVZVc2JVSkJRMVo0V2l4VlFVRlhMRzlDUVVOWWMwa3NUMEZCVVN3d1FrRkRVakpyUWl4VlFVRlhMREpDUVVOWU4yTXNiVUpCUVc5Q0xGRkJRM0JDTDBJc1UwRkJWU3h0UWtGRFZuTnhRaXhaUVVGaExHOUNRVU5pUXl4VFFVRlZMRlZCUTFab1FpeFhRVUZaTEd0Q1FVTmFSQ3hWUVVGWExGTkJRMWczU1N4aFFVRmpMREJDUVVWV0swb3NSMEZCWjBJc1EwRkRjRUpETEV0QlFVMHNUMEZEVGtNc1NVRkJTeXhOUVVOTVF5eE5RVUZQYkdRc1MwRkJWU3hQUVVGVExGRkJRekZDYldRc1QwRkJVU3hUUVVOU1F5eExRVUZOY0dRc1MwRkJWU3hSUVVGVkxGRkJSWFJDY1dRc1IwRkJXU3hEUVVOb1Fsb3NWMEZCVnl4RlFVTllReXhUUVVGVkxDdEhRVU5XZEZnc1VVRkJVeXhqUVVOVWRWZ3NUVUZCVHl4SFFVTlFReXhOUVVGUExFVkJRMUIyY2tJc1RVRkJUU3hGUVVOT2NVMHNWVUZCVlN4RlFVTldlRm9zVlVGQlZ5eE5RVU5ZYzBrc1QwRkJVU3hEUVVGRExFVkJRVWNzUjBGRFdqSnJRaXhYUVVGWExFVkJRMWczWXl4dFFrRkJiMElzUTBGQlF5eE5RVUZQTEZGQlFWTXNVMEZCVlN4UlFVTXZReTlDTEZOQlFWVXNhMEpCUTFaemNVSXNXVUZCWVN4SFFVTmlReXhWUVVGVkxFVkJRMVpvUWl4WFFVRlpMRXRCUTFwRUxGVkJPVWgxUWl4RFFVVjJRaXhKUVVGTExFTkJRVU1zVVVGQlV5eE5RVUZQTEV0QlFVMHNUMEZCVVN4UFFYaERVQ3hyUWtGNVF6ZENNVzFDTEVWQlFVY3NRMEZCUXl4VFFVRlZMRTlCUVZFc1VVRkJVeXhQUVVNdlFtMXZRaXhMUVVGTkxFZEJRMDVzYjBJc1JVRkJSeXhIUVVOSWJXOUNMRWRCUVVrc1IwRkRTa01zU1VGQlN5eEhRVU5NUXl4TFFVRk5MRWRCUTA1RExFbEJRVXNzUjBGRFRFTXNSMEZCU1N4SFFVTktReXhIUVVGSkxFZEJRMHBETEVkQlFVa3NSMEZEU2tNc1IwRkJTU3hIUVVOS1F5eEhRVUZKTEVkQlEwcERMRWRCUVVrc1IwRkRTa01zUjBGQlNTeEhRVU5LUXl4SFFVRkpMRWRCUTBwMmIwSXNSVUZCUnl4SFFVTklkMjlDTEVsQlFVc3NRMEZCUXl4TlFVRlBMRk5CUVZVc1RVRkJUeXhSUVVGVExGRkJRVk1zVlVGRGFFUkRMRWRCUVVrc1IwRkRTa01zUjBGQlNTeEhRVU5LUXl4RlFVRkhMRWRCUTBoRExFbEJRVXNzUjBGRFRFTXNSVUZCUnl4SFFVTklReXhOUVVGUExFZEJRMUJETEV0QlFVMHNSMEZEVGtNc1NVRkJTeXhIUVVOTVF5eEpRVUZMTEVkQlEweERMRTlCUVZFc1IwRkRVa01zUlVGQlJ5eEhRVU5JUXl4SFFVRkpMRWxCWjBkS0wwd3NZVUZCWXl4TlFVVldaMDBzUjBGQlZTeERRVU5rUXl4TFFVRk5MR3RDUVVOT1F5eFBRVUZSTEc5Q1FVTlNReXhMUVVGTkxHdENRVU5PUXl4TlFVRlBMRzFDUVVOUVF5eFRRVUZWTEhOQ1FVTldReXhOUVVGUExHMUNRVU5RUXl4UlFVRlRMSEZDUVVOVVF5eFRRVUZWTEhOQ1FVTldReXhYUVVGWkxIZENRVU5hUXl4WFFVRlpMSGxDUVVWU1F5eEhRVUZ2UWl4UFFVVndRa01zUjBGQmIwSXNUMEZEY0VKRExFZEJRVzFDTEU5QlEyNUNReXhIUVVGclFpeE5RVU5zUWtNc1IwRkJlVUlzYVVKQlEzcENReXhIUVVGcFFpeFRRVU5xUWtNc1IwRkJiVUlzWjBKQlEyNUNReXhIUVVGblFpeFJRVU5vUWtNc1IwRkJaMElzVVVGVGRFSXNUVUZCVFVNc1YwRkJaMEo0V2l4SFFVTndRa01zV1VGQldUbG9RaXhGUVVGVE1sb3NSMEZEYmtJc1VVRkJjMElzU1VGQldDeEZRVU5VTEUxQlFVMHNTVUZCU1Vzc1ZVRkJWU3dyUkVGSGRFSnpUU3hOUVVGTmRHMUNMRWRCUlU0NVJDeExRVUZMYnk5Q0xGbEJRV0VzUlVGRGJFSndMMElzUzBGQlMzRXZRaXhUUVVGWExFVkJRMmhDY2k5Q0xFdEJRVXR6TDBJc1dVRkJZeXhIUVVOdVFuUXZRaXhMUVVGTGRTOUNMR1ZCUVdsQ0xFZEJRM1JDZGk5Q0xFdEJRVXR0ZVVJc1VVRkJWU3hMUVVWbWJubENMRXRCUVVzMmNVSXNVVUZCVlRkeFFpeExRVUZMT0hGQ0xGZEJRVmR5VGl4SFFVTXZRbnBrTEV0QlFVdDNMMElzU1VGQlRTeExRVVZZZUM5Q0xFdEJRVXQ1TDBJc1owSkJTVWx3VlN4eFFrRkRWQ3hQUVVGUEsxRXNSMEZIUlM5akxHdENRVU5VTEU5QlFVOW5ZeXhIUVVkRmJHVXNiVUpCUTFRc1QwRkJUelJuUWl4SFFVZEZka3dzZVVKQlExUXNUMEZCVHl0SkxFZEJTVlJ0UlN4VFFVTkZNUzlDTEV0QlFVdHZMMElzV1VGQllTeEZRVWR3UWs4c1ZVRkRSVE12UWl4TFFVRkxieTlDTEZsQlFXRXNSVUZIY0VKUkxHZENRVU5GTlM5Q0xFdEJRVXR2TDBJc1dVRkJZM0F2UWl4TFFVRkxieTlDTEZkQlJ6RkNPVmdzVDBGQlQzUkdMRWRCUTB3c1IwRkJTMmhwUWl4TFFVRkxieTlDTEZkQlNWWXNSMEZCU1hCa0xFVkJRVThzUTBGRFZDeE5RVUZOZVZJc1JVRkJWWHA2UWl4TFFVRkxOaTlDTERaQ1FVRTJRamRrTEVkQlJXeEVlVklzUlVGQlVUaE1MR1ZCUVdWUExFOUJRVk55VFN4RlFVRlJPRXdzWlVGQlpVOHNUVUZGYmtSeVRTeEZRVUZSYzAwc2RVSkJRMVowVFN4RlFVRlJkVTBzVDBGQlR5eExRVUZOZGswc1IwRkZja0pCTEVWQlFWRjNUU3hQUVVGUExFdEJRVTE0VFN4UFFVVnNRaXhEUVVOTUxFZEJRVWw2ZWtJc1MwRkJTMnRuUXl4blFrRkJaMEkzYUVJc1ZVRkJWWGhYTEZOQlFWTTRNa0lzU1VGSE1VTXNXVUZHUVRNclFpeExRVUZMYVdkRExFOUJRVThzUzBGQlRXcG5ReXhOUVV0d1FrRXNTMEZCUzJkblF5eFBRVUZQTEV0QlFVMW9aME1zVDBGSmRFSXJiRUlzVlVGRFJUUkhMR0ZCUVdFemMwSXNTMEZCUzNFdlFpeFZRVU5zUW5CakxFZEJRV0ZETEVsQlFVbHNha0lzUzBGQlN6WnNRaXhUUVVGVGFVSXNVVUZCVVdsWkxFbEJRV2xDUXl4SFFVRnJRbWd2UWl4TFFVRkxiV2RETEcxQ1FVVXpSVzVuUXl4TFFVRkxkeTlDTEV0QlExQjRMMElzUzBGQlMzY3ZRaXhKUVVGSkwxb3NVMEZIV0hwc1FpeExRVUZMYjJkRExHbENRVVZNYUZjc1RVRkJUWEpGTEZWQlIxSm5TeXhQUVVORkxFZEJRVzlETEZOQlFXaERMM1pDTEV0QlFVczJiRUlzVTBGQlUzaG5RaXhOUVVGTmVYTkNMRkZCUTNSQ0xFMUJRVTBzU1VGQlNYUk1MRTFCUVUwc2RVTkJSMnhDTEVsQlFVMTRiVUlzUzBGQlMzRm5ReXhyUWtGQmJVSnlaME1zUzBGQlMyOHZRaXhYUVVOcVF5eFBRVWRHTEUxQlFVMDVSaXhGUVVGWmNsY3NSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFVRlZOMnhDTEV0QlFVczBiRUlzV1VGQldYcEpMRTFCUVUwclowSXNUVUZEZGtWdlF5eEZRVUZoT1doQ0xFZEJRV1Y0WlN4TFFVRkxObXhDTEZWQlEycERNR0VzUlVGQk5FSXNUMEZCWmtRc1JVRkJjMEowWjBNc1MwRkJTelpzUWl4VFFVRlRlbWhDTEdOQlFXTjFSU3huUWtGQlowSmtMRk5CUVZNM1NDeExRVUZMTm14Q0xGVkJRVmw1WVN4RlFVRlhlalJDTEZOQlFWTTNTQ3hMUVVGTE5teENMRlZCUlhoSkxFZEJRVWw1VkN4RlFVRlZPVlVzYlVKQlFYRkNLMklzUlVGRGFrTXNUMEZMTkVJc1dVRkJNVUoyWjBNc1MwRkJTelJzUWl4WlFVRlpka2NzVFVGQmMwSnlaaXhMUVVGTGR5OUNMRXRCUVU5NEwwSXNTMEZCUzNkblF5eGhRVUZsZUdkRExFdEJRVXQzTDBJc1NVRkJTVGQ2UWl4alFVRmpiWHBDTEVsQlFYZENNVVFzV1VGRGVFaHdOMElzUzBGQlMyOW5ReXhwUWtGRlRIQm5ReXhMUVVGTGR5OUNMRWxCUVVrdldpeFRRVU5VZW14Q0xFdEJRVXQzTDBJc1NVRkJUU3hOUVVkaUxFMUJRVTFCTEVWQlFVMTRMMElzUzBGQlMydG5ReXhuUWtGRFdFOHNSVUV6YlVoTFF5eERRVUZCUVN4SlFVTmlMRWRCUTBWQkxFZEJRVlZxTmtJc1MwRkJTMnMyUWl4TlFYQkNTQ3hKUVc5Q1UydzJRaXhMUVVGTGJUWkNMR2RDUVVOdVFtdzBRaXhUUVVGVGJUUkNMR1ZCUVdWSUxFbEJSV3BETEU5QlFVOUJMRWRCYzIxSVUwa3NRMEZCVHpsblF5eExRVUZMTkd4Q0xGbEJRVmwyUnl4TlFVTjBRMjFuUWl4RlFVRkpPVFZDTEdGQlFXRXNTMEZCVFNzMlFpeEhRVVYyUW5wblF5eExRVUZMTm14Q0xGTkJRVk51WjBJc1lVRkJZU3h0UWtGQmIwSXJOa0lzUjBGRk0wTjZaME1zUzBGQlN6WnhRaXhSUVVGUk1sRXNWMEZEWm1kRkxFVkJRVWx1YUVJc1ZVRkJWWFJGTEVsQlFVa3lhMElzU1VGSGNFSXNUVUZCVFhvM1FpeEZRVUU0UXl4dFFrRkJNMEpxUkN4TFFVRkxObkZDTEZGQlFWRTFia0lzVlVGQk1rSnFSQ3hMUVVGTE5uRkNMRkZCUVZFMWJrSXNWVUZCVlc1Q0xFdEJRVXM1UWl4TFFVRk5keTlDTEVWQlFVdDRMMElzUzBGQlN6WnNRaXhWUVVGWk4yeENMRXRCUVVzMmNVSXNVVUZCVVRWdVFpeFZRVVZvU1RnNVFpeEZRVUZoTDJkRExFdEJRVXRuYUVNc1pVRkJaUzg1UWl4SFFVVjJRMnBFTEV0QlFVdHBhRU1zYjBKQlFXOUNSaXhIUVVWNlFpeE5RVUZOTEZWQlEwbzNVU3hIUVVORmJIZENMRXRCUVVzMmNVSXNVVUZEVkRGR0xFZEJRVXN2VUN4SlFVRkpiM0ZDTEVWQlFVdDRMMElzUzBGQlN6UnNRaXhaUVVGWlJTeFRRVUZWT1d4Q0xFMUJSWEJEUVN4TFFVRkxObXhDTEZOQlFWTjZhRUlzWTBGQlkzVkZMR2RDUVVGblFtUXNVMEZCVXpkSUxFdEJRVXQzTDBJc1QwRkROMFIwVUN4RlFVRlZLMFlzVDBGQlQzVktMRWRCUTJwQ2RtTXNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFVRlZOMnhDTEV0QlFVczBiRUlzV1VGQldYcEpMRTFCUVUxcGFFSXNWMEZIZWtSd0swSXNTMEZCUzIxNVFpeFJRVU5RYm5sQ0xFdEJRVXR0ZVVJc1VVRkJVVFZxUWl4VFFVVmlkazhzUzBGQlMyMTVRaXhSUVVGVkxFZEJRVzlDYm5sQ0xFdEJRVXMyYkVJc1UwRkJWVEphTEVWQlFVdDRMMElzUzBGQlN6aDVRaXhwUWtGQmFVSnBUeXhKUVVjdlJYWkNMRVZCUVVsdWFFSXNWVUZCVlhSRkxFbEJRVWswYTBJc1NVRkZiRUlzVFVGQlRTOURMRVZCUVdNMU4wSXNTMEZCUzJ0b1F5eDVRa0ZCZVVKc2FFTXNTMEZCU3paeFFpeFJRVUZSSzFFc1lVRkZNMFJCTEVkQlEwWTBSQ3hGUVVGSmJtaENMRlZCUVZWMFJTeFBRVUZQTm1oQ0xFVkJRVmx3TVVJc1RVRkJUU3hOUVU5eVF5eHBRa0ZCYTBKclF5eFRRVUZUUXl4cFFrRkROMElzUjBGQlIzcEdMRlZCUVZWM1JpeFRRVUZUWjBnc1MwRkJTelJaTEZWQlFWVnNha0lzVTBGQlVYUkNMRWxCUXpORGJXWXNSMEZCWVZFc1IwRkJSek5tTEVWQlFWTXNXVUZCWVRSaExFOUJTVEZETEUxQlZVMHdTQ3hGUVVGaGNHMUNMRXRCUVV0M0wwSXNTVUZCU1c1b1FpeFZRVUZWZUZjc1UwRkJVell5UWl4SlFVVXZRekVyUWl4TFFVRkxiVzFDTEdkQ1FWcFpMRXRCUTJZc1RVRkJUV2RpTEVWQlFXbENibWhETEV0QlFVdHpMMElzV1VGRE5VSjBMMElzUzBGQlMzTXZRaXhaUVVGakxFdEJRMjVDY21Nc1IwRkJZV3RDTEZGQlFWRnVhMElzUzBGQlN6WnNRaXhUUVVGVk4yeENMRXRCUVVzMGJFSXNXVUZCV1hwSkxFMUJRVTFuYUVJc1QwRkZka1JuUkN4SlFVRnRRblJETEVsQlEzSkNOeXRDTEV0QlFVdHBaME1zVDBGQlR5eExRVUZOYW1kRExGRkJUVkZCTEV0QlFVdDNMMElzU1VGQlMzQmFMRWRCUnpGRE1Fb3NUMEZEUlN4SlFVRkxPWFpDTEV0QlFVdHRlVUlzVVVGRFVpeFBRVWRHTEUxQlFVMXhUaXhGUVVGTmVDOUNMRXRCUVV0clowTXNaMEpCYzBKcVFpeEhRVVpyUW1wa0xFZEJRV0ZyUWl4UlFVRlJibXRDTEV0QlFVczJiRUlzVTBGQlZUZHNRaXhMUVVGTE5HeENMRmxCUVZsNlNTeE5RVUZOTm1kQ0xFMUJSUzlFZUZvc2FVSkJRMW9zVDBGSFJtZGlMRVZCUVVsdWFFSXNWVUZCVlc5SUxFOUJRVTlyV2l4SlFVZHFRaXhwUWtGQmEwSnFNa0lzVTBGQlUwTXNhVUpCUXpkQ0xFZEJRVWQ2Uml4VlFVRlZkMFlzVTBGQlUyZElMRXRCUVVzMFdTeFZRVUZWYkdwQ0xGTkJRVkYwUWl4SFFVRlhiV1lzUjBGQllVTXNTVUZCU1hCbUxFVkJRVk1zV1VGQllUUmhMRTFCUjJwSE1XVXNTMEZCUzNVdlFpeGxRVUUwUWl4UFFVRkpMRVZCUTNKRGRpOUNMRXRCUVV0MUwwSXNaVUZCTkVJc1QwRkJTU3hGUVVOeVEzWXZRaXhMUVVGTGRTOUNMR1ZCUVRSQ0xFOUJRVWtzUlVGRGNrTXNUVUZCVFc1YUxFVkJRV0Z3YlVJc1MwRkJTM2N2UWl4SlFVRkpibWhDTEZWQlFWVjRWeXhUUVVGVE5qSkNMRWxCUlM5RE1TdENMRXRCUVV0dGJVSXNaMEpCY0VOWkxFdEJRMWh1YlVJc1MwRkJTeXN2UWl4NVFrRkpUQzh2UWl4TFFVRkxjeTlDTEdOQlFXZENWaXhKUVVOMlFsa3NSVUZCU1M5YUxGTkJSMDU2YkVJc1MwRkJTMjlvUXl4cFFrRkZUSEJvUXl4TFFVRkxObXhDTEZOQlFWTndaMElzWjBKQlFXZENMRzlDUVVVNVFuZGtMRWRCUVdGclFpeFJRVUZSYm10Q0xFdEJRVXMyYkVJc1UwRkJWVGRzUWl4TFFVRkxOR3hDTEZsQlFWbDZTU3hOUVVGTk9HZENMRkZCUlRORWFpdENMRXRCUVV0dlowTXNiMEpCY1VKMVFuQm5ReXhMUVVGTGR5OUNMRWxCUVV0d1dpeEhRVVY0UTNCdFFpeExRVUZMY3k5Q0xGbEJRV01zUjBGSGNrSXZkMElzVTBGRGRVSXNUMEZCYWtKMlR5eExRVUZMYlhsQ0xGTkJRMUJ1ZVVJc1MwRkJTMjE1UWl4UlFVRlJOV3BDTEZOQlMycENPSGhDTEdkQ1FVTkZMRTlCUVU4M1l5eFJRVUZSZUdwQ0xFdEJRVXQzWjBNc1dVRkhkRUpPTEdkQ1FVTkZMRWRCUVVsc1owTXNTMEZCUzNjdlFpeEpRVU5RTEU5QlFVOTRMMElzUzBGQlMzY3ZRaXhKUVVka0xFMUJRVTB4TjBJc1JVRkJWVFJGTEZOQlFWTnpkRUlzWTBGQll5eFBRVU4yUTJ4NVFpeEZRVUZSY3pOQ0xGVkJRVmx3TjBJc1MwRkJTelp4UWl4UlFVRlJORkVzVTBGRGFrTXNUVUZCVFN0RUxFVkJRVTB4TjBJc1JVRkJVWGRyUWl4VFFVRlRMRWRCU1RkQ0xFOUJTRUYwYjBJc1MwRkJTM0ZvUXl4WFFVRlhOMElzUjBGRGFFSkJMRVZCUVVsdWFFSXNWVUZCVlc5SUxFOUJRVTlwV2l4SFFVRnRRa01zU1VGRGVFTXpLMElzUzBGQlMzY3ZRaXhKUVVGTlFTeEZRVU5LZUM5Q0xFdEJRVXQzTDBJc1NVRkhaRFpDTEZkQlFWYzNRaXhIUVVOVWVDOUNMRXRCUVV0emFFTXNkVUpCUVhWQ09VSXNSVUZCUzNndlFpeExRVUZMZDJkRExGZEJRVmt4UWl4SlFVZHdSSGRETEhWQ1FVRjFRamRHTEVWQlFWVTRSaXhGUVVGVE9XdENMRWRCUTNoRExFMUJRVTByYTBJc1JVRkJhMEp3V2l4SFFVRmxReXhSUVVGUk5Vd3NSVUZCVldkbUxFZEJSWEJFT0VZc1NVRkJWME1zUlVGTmFFSjRhRU1zUzBGQlMzbG9ReXhyUWtGQmEwSkVMRVZCUVdsQ1JDeEhRVXgwUTBNc1JVRkJaMEl2WWl4VFFWRndRbWRqTEd0Q1FVRnJRak01UWl4RlFVRlRlVGxDTEVkQlEzcENMRWRCUVdkQ0xFOUJRVnA2T1VJc1JVRkpTaXhQUVVGSkxFZEJRVlY1T1VJc1NVRkRXa0VzUlVGQlZXcHJRaXhIUVVGWGFXdENMRkZCUldwQ2RtaERMRXRCUVVzMmNVSXNVVUZCVVhwaExFdEJRMWh0ZUVJc1JVRkJVVzQxUWl4aFFVRmxkRVVzU1VGRGVrSkJMRVZCUVZGek0wSXNWVUZCV1N4SFFVTndRblF6UWl4RlFVRlJiWGxDTEU5QlFVOXpUQ3hKUVVkcVFubzVRaXhGUVVGUk5EbENMRmxCUVdOSUxFVkJRVkZITEcxQ1FVMDVRakZvUXl4TFFVRkxObkZDTEZGQlFWRjZZU3hOUVVOWWNGRXNTMEZCU3paeFFpeFJRVUZSWjFJc1YwRkRaakJHTEVWQlFWVTNSeXhIUVVGaE5rY3NSVUZCVTNab1F5eExRVUZMTm5GQ0xGRkJRVkVyVUN4VlFVRlhOVFpDTEV0QlFVczJjVUlzVVVGQlVXZFJMR0ZCUjNaRkx6SkNMRVZCUVZGek0wSXNWVUZCV1cxSExFZEJSWEJDZWpsQ0xFVkJRVkUwT1VJc1dVRkJZMGdzUjBGSk1VSm1MRmRCUTBVc1RVRkJUVGxGTEVWQlFWRXhOMElzUzBGQlN6WnNRaXhUUVVGVGJrb3NZVUZCWVN3eVFrRkJOa0l4WXl4TFFVRkxObkZDTEZGQlFWRTJVU3hOUVVWdVJpeFBRVUZQTVRkQ0xFdEJRVXRyYUVNc2VVSkJRWGxDZUVZc1IwRkhka05wUnl4cFFrRkJhVUphTEVkQlEyWXNUVUZCYlVJc1ZVRkJaa0VzUlVGRFN5eE5RVWRWTEZOQlFXWkJMRVZCUTBzc1VVRkhSa0VzUlVGSlZHeENMRFpDUVVFMlFqZGtMRVZCUVU5NVVpeEhRVU5zUXl4UFFVRlBRU3hIUVVGWGVucENMRXRCUVVzMGJFSXNXVUZCV1cxQ0xHOUNRVUZ2UWk5RkxFVkJRVTFaTEdWQlFXZENOV2xDTEV0QlFVczBhRU1zYzBKQlIzQkdlazhzWVVGRFJTeE5RVUZOTEU5QlEwbzFia0lzUjBGRFJYWk1MRXRCUVVzMmNVSXNVVUZGVkN4TlFVRnpRaXhwUWtGQldIUm1MRVZCUTBaQkxFVkJRVTh2UlN4TlFVRk5MRXRCUVV0clZDeExRVUZKT0U0c1IwRkJUM0pJTEU5QlFVOXRUaXhUUVVGVE9VWXNSVUZCU3l4TlFVZHlReXh0UWtGQldHcGpMRVZCUTBZMmJrSXNSMEZCWXpkdVFpeEZRVUZQTm01Q0xFVkJRVmx3ZWtJc1MwRkJTelpzUWl4VlFVZDRRM1JoTEVWQlIxUXlNVUlzZVVKQlFYbENTeXhIUVVOMlFpeE5RVUV3UWl4dFFrRkJXa0VzUlVGQmVVSkJMRVZCUVZGNkwwSXNTMEZCU3psQ0xFdEJRVXMyYkVJc1ZVRkJXVEJpTEVWQlIzWkZlazhzYVVKQlFXbENhVThzUjBGRFppeE5RVUZOTVU0c1JVRkJkMElzUTBGRE5VSndkMElzVlVGQlZ6ZzVRaXhGUVVOWWRHNUNMRlZCUVZjc1EwRkJReXhEUVVOV04xVXNTMEZCVFN4UFFVTk9iVUlzVVVGQlV5eERRVU5RYzA0c2JVSkJRVzlDY2xRc1MwRkJTelp4UWl4UlFVRlJlRmdzY1VKQlJXeERMRU5CUTBSNlR5eExRVUZOTEZOQlEwNXRRaXhSUVVGVExFTkJRMUIzUml4UFFVRlJka3dzUzBGQlMyMTZRaXhsUVVWa0xFTkJRMFIyZFVJc1MwRkJUU3hyUWtGRFRtMUNMRkZCUVZNc1EwRkRVSFZNTEZOQlFWVjBVaXhMUVVGTE5uRkNMRkZCUVZGMldpeFhRVVY0UWl4RFFVTkVNVTBzUzBGQlRTeFJRVU5PYlVJc1VVRkJVeXhEUVVOUWFrTXNVVUZCVXl4SlFVRkpPVVFzUzBGQlN6UnNRaXhaUVVGWmRrY3NaVUZGTDBJc1EwRkRSSHBoTEV0QlFVMHNWMEZEVGtNc1UwRkJVeXhGUVVOVVF5eE5RVUZQTEdGQlExQkRMRWRCUVVrNFNTeEhRVUZSTjA0c1MwRkJTelpvUXl3MlFrRkJOa0pvTUVJc1MwRkZhRVIxVHl4alFVRmxkazhzU1VGRFZFRXNSVUZCU3psSUxGRkJRVkU1UXl4WlFVRmpORXNzUlVGQlN6VkxMRmRCUTJ4RGFrUXNTMEZCU3pab1F5dzJRa0ZCTmtKb01FSXNTMEZKZUVNc1RVRkJUeXhKUVVGTGQyeENMRXRCUXl0Q0xHMUNRVUU1UW5KNlFpeExRVUZMTm5GQ0xGRkJRVkZyU0N4aFFVRTRRaTk0UWl4TFFVRkxObkZDTEZGQlFWRnJTQ3hoUVVGaGMwSXNSMEZCZVVKeWVrSXNTMEZCU3paeFFpeFJRVUZSYTBnc1kwRkpNVWhyVUN4dlFrRkJiMEpHTEVkQlEyeENMMmRETEV0QlFVdHJaME1zWjBKQlFXZENOMmhDTEZWQlFWVjBSU3hKUVVGSkxFZEJRVWN2V2l4TFFVRkxPR2hETERCQ1FVRXdRamxvUXl4TFFVRkxNbWhETEdsQ1FVRnBRbG9zVFVGSE4wWkRMR1ZCUVdVdk9VSXNSMEZEWWl4UFFVRlBOalJDTEVkQlFXTTNORUlzUlVGQlZUVkRMR1ZCUjJwRGJ5OUNMR2RDUVVOdFFub3ZRaXhMUVVGTE5uRkNMRkZCUVZFeFJ5eFJRVUZSTTJRc1RVRkJUU3hMUVVWdVEzQkNMRk5CUVZFclpTeEpRVU5tTEVkQlFXZENMRlZCUVZwQkxFVkJRMFpzUWl4SFFVRmhVU3hIUVVGSGVtcENMRXRCUVVzMmJFSXNVMEZCVlRkc1FpeExRVUZMTkd4Q0xGbEJRVmw2U1N4TlFVRk5hMmhDTEUxQlFVOXlLMElzUzBGQlN6WnhRaXhSUVVGUmNFOHNWVUZCVlhWR0xFZEJRVk5vYVVJc1MwRkJTM051UWl4UFFVRlBkRVlzVlVGRGNFY3NSMEZ3V2xVc1YwRnZXazV0UXl4RlFVRTBRaXhEUVVOeVF5eE5RVUZOTkdRc1JVRkJWVFZrTEVsQlFWazRZU3hIUVVGblFtb3ZRaXhMUVVGTE5HeENMRmxCUVZsNlNTeE5RVUZOY1doQ0xGZEJRV0Y0SzBJc1MwRkJTelJzUWl4WlFVRlpla2tzVFVGQlRXMW9RaXhSUVVOcVJ6QkVMRVZCUVZjM1pDeEpRVUZaT0dFc1IwRkJaMEpxTDBJc1MwRkJTelJzUWl4WlFVRlpla2tzVFVGQlRYTm9RaXhYUVVGaGVpdENMRXRCUVVzMGJFSXNXVUZCV1hwSkxFMUJRVTF2YUVJc1UwRkRlRWQwWWl4SFFVRmhVU3hIUVVGSGVtcENMRXRCUVVzMmJFSXNVMEZCVld0akxFVkJRVk12YUVNc1MwRkJTelp4UWl4UlFVRlJjRThzVlVGQlZYVkdMRWRCUVZOb2FVSXNTMEZCUzJkblF5eFBRVUZQYUdVc1MwRkRjRVpwUWl4SFFVRmhVU3hIUVVGSGVtcENMRXRCUVVzMmJFSXNVMEZCVlcxakxFVkJRVlZvYVVNc1MwRkJTelp4UWl4UlFVRlJjRThzVlVGQlZYVkdMRWRCUVZOb2FVSXNTMEZCUzJsblF5eFBRVUZQYW1Vc1UwRkpla1pvYVVJc1MwRkJTMjFuUXl4clFrRkJiMElzUzBGRGJrSnVaME1zUzBGQlN6WnNRaXhWUVVOUU4yeENMRXRCUVVzNGRrSXNVVUZKVkRkTkxFZEJRV0ZSTEVkQlFVZDZha0lzUzBGQlN6WnNRaXhUUVVGVGFVSXNVVUZCVVdsWkxFbEJRV2xDUXl4SFFVRnJRbWd2UWl4TFFVRkxiV2RETEcxQ1FVVXhSVzVuUXl4TFFVRkxObkZDTEZGQlFWRndUeXhUUVVObWVtTXNTMEZCU3paeFFpeFJRVUZWTEVsQlFVczNjVUlzUzBGQlN6WnhRaXhSUVVOMlFqRkhMRkZCUVZNc1UwRkRWREZJTEZOQlFWVXNTVUZIV25wakxFdEJRVXRwYVVNc1dVRkpWRUVzV1VGRFJTeE5RVUZOZGtjc1JVRkJVVEUzUWl4TFFVRkxObXhDTEZOQlFWTnVTaXhoUVVGaExGTkJSVzVEZDJ4Q0xGTkJRVEpDYkdsRExFdEJRVXMyYkVJc1UwRkJVMjVLTEdGQlFXRXNNa0pCUlhoRVoyWXNSMEZCSzBJc1YwRkJkRUozUnl4TFFVTlliR2xETEV0QlFVczJiRUlzVTBGQlUyNW5RaXhoUVVGaExIbENRVUV3UW1jeVFpeEhRVUZUTEV0QlJURkVRU3hIUVVGVk1UZENMRXRCUVVzMmJFSXNVMEZCVTI1S0xHRkJRV0VzWlVGQmEwSXhZeXhMUVVGTE5teENMRk5CUVZNMllpeGhRVU4yUlRGb1F5eExRVUZMTm14Q0xGTkJRVk51WjBJc1lVRkJZU3hoUVVGalp6SkNMRWRCUnpORE1UZENMRXRCUVVzMmJFSXNVMEZCVTI1blFpeGhRVUZoTEZGQlFWTXNTMEZKZUVOek5rSXNUMEZCVDJobExFVkJRVTk1VWl4SFFVTmFRU3hGUVVGVmVucENMRXRCUVVzMkwwSXNOa0pCUVRaQ04yUXNSVUZCVDNsU0xFZEJSUzlEZWxJc1NVRkRSbmxTTEVWQlFWRTRUQ3hsUVVFNFFpeFpRVUZtZG1Rc1JVRkJUVzFDTEV0QlFYRkNLMklzUjBGQlowSkVMRXRCUVdsQ0xFZEJSMnBHZUV3c1JVRkJVWGxOTEdkQ1FVRm5RamRvUWl4VlFVRlZlRmNzVTBGQlV6Z3lRaXhMUVVGelFteE1MRVZCUVZFMlRDeGpRVUZuUWxZc1IwRkRNMFp1VEN4RlFVRlJOa3dzV1VGQlkxWXNTVUZKZUVKcVV5eGhRVUZoT0Vjc1JVRkJVVFJNTEZWQlEzSkNOVXdzUlVGQlVUWk1MRmxCUVdOV0xFZEJSV3BDYmt3c1JVRkJVVFZKTEZGQlFWRTRVU3hQUVVGVmJFa3NSVUZCVVRWSkxGRkJRVkU0VVN4TlFVRk5OVXdzUzBGTGNrUXdSQ3hGUVVGUk5Fd3NVMEZCVnpWbExGbEJRVmNzUzBGRGVFSm5WQ3hGUVVGUk5rd3NZMEZCWjBKV0xFbEJRekZDYmt3c1JVRkJVVEZFTEZOQlJWUXdSQ3hGUVVGUk5Va3NVVUZCVVRoUkxFMUJRVTAxVEN4TlFWSjJRakJFTEVWQlFWRXhSQ3hSUVZkYWExRXNUMEZCVDJwbExFVkJRVTk1VWl4SFFVTmFRU3hGUVVGVmVucENMRXRCUVVzMkwwSXNOa0pCUVRaQ04yUXNSVUZCVDNsU0xFZEJSUzlEZWxJc1NVRkRSbmxTTEVWQlFWRTRUQ3hsUVVFNFFpeGhRVUZtZG1Rc1JVRkJUVzFDTEV0QlFYTkNLMklzUjBGQlowSkVMRWxCUVdsQ2VFd3NSVUZCVVRWT0xGTkJRVk5vWlN4VFFVRlRiV0VzUlVGQlRWY3NaMEpCUjJ4SU9GRXNSVUZCVVhOTkxIbENRVWxhY0ZRc1lVRkJZVGhITEVWQlFWRTBUQ3hWUVVOeVFqVk1MRVZCUVZFMlRDeFpRVUZqVkN4SFFVVnFRbkJNTEVWQlFWRTFTU3hSUVVGUk9GRXNUMEZCVld4SkxFVkJRVkUxU1N4UlFVRlJPRkVzVFVGQlRUZE1MRXRCUzNKRU1rUXNSVUZCVVRSTUxGTkJRVmMxWlN4WlFVRlhMRXRCUTNoQ1oxUXNSVUZCVVRaTUxHTkJRV2RDVkN4SlFVTXhRbkJNTEVWQlFWRXpSQ3hUUVVWVU1rUXNSVUZCVVRWSkxGRkJRVkU0VVN4TlFVRk5OMHdzVFVGU2RrSXlSQ3hGUVVGUk0wUXNVVUZYV21sUkxIVkNRVU5GTEVsQlFVc3NUVUZCVFRWaUxFdEJRVmR1YTBJc1MwRkJTM1V2UWl4bFFVTjZRaXhIUVVGSmRpOUNMRXRCUVV0MUwwSXNaVUZCWlhCaUxFZEJRM1JDTEU5QlFVOHNSVUZKV0N4UFFVRlBMRVZCUjFReVJ5eFhRVUZYY2s0c1IwRkRWQ3hOUVVGTk1HdENMRVZCUVdsQ2RtRXNSMEZCV1Vjc2EwSkJRV3RDTDI1Q0xFdEJRVXMyYkVJc1ZVRnBRekZFTEU5QmFFTkJkR3RDTEU5QlFVOHlSQ3hMUVVGTGFUbENMRWRCUVdkQ0x6aENMRk5CUVZGbk9VSXNTVUZET1VJNVJ5eEhRVUZ6UW5Kb1FpeEpRVUZKYlc5Q0xGZEJRM0pDUkN4RlFVRmxReXhQUVVjeFFqTnJRaXhGUVVGVExFbEJRVXQ2WkN4TFFVRkxOR3hDTEZsQlFWbDVSaXhYUVVNeFFqaFhMRXRCUTIxQ0xHbENRVUZZTVd0Q0xFZEJRWFZDUVN4RlFVRlRRU3hGUVVGVExFdEJSUzlEZVZNc1YwRkJhVU1zU1VGQmNrSjZVeXhGUVVGUGVWTXNWVUZCYzBKNGJrSXNVMEZCVTJkSUxFdEJRVTgwVGl4SFFVRlhSeXhGUVVGUGVWTXNWMEZGZEVRc2FVSkJRV3BDZWxNc1JVRkJUMnRsTEZGQlEyaENiR1VzUlVGQlQydGxMRTFCUVZFc1EwRkRZalZNTEV0QlFVMTBVeXhGUVVGUGEyVXNUVUZEWWpkTUxFdEJRVTF5VXl4RlFVRlBhMlVzVVVGSlZ5eHBRa0ZCYWtKc1pTeEZRVUZQYVdVc1VVRkRhRUpxWlN4RlFVRlBhV1VzVFVGQlVXcGxMRVZCUVU5cFpTeE5RVUZOZGpOQ0xGbEJSMEVzYVVKQlFXNUNjMW9zUlVGQlR6aHFRaXhWUVVOb1FqbHFRaXhGUVVGUE9HcENMRkZCUVZVNWFrSXNSVUZCVHpocVFpeFJRVUZSY0RsQ0xGbEJSMnhEYjFvc1IwRkJaMEk0WkN4SFFVRlJOV1FzUlVGQlVYcGtMRXRCUVVzMGJFSXNXVUZCV1RSTkxHRkJSVGRETDFVc1JVRkJUMjlsTEZkQlExUndaU3hGUVVGUFoyVXNVMEZCVjJZc1IwRkJZV3BrTEVWQlFVOW5aU3hUUVVGVmFHVXNSVUZCVDIxa0xGVkJRVmR1WkN4RlFVRlBiMlFzWVVGSGNFVndaQ3hGUVVkVWJXdENMSEZDUVVORkxFMUJRVTF1YTBJc1JVRkJVeXhIUVVWbUxFbEJRVXNzVFVGQlRYQmpMRXRCUVU5eVFpeExRVUZMTm5GQ0xGRkJRMnBDTjNGQ0xFdEJRVXMwYkVJc1dVRkJXWGxHTEZGQlFWRm9jVUlzUzBGQlUzSkNMRXRCUVVzMmNVSXNVVUZCVVhod1FpeExRVU5xUkc5akxFVkJRVTl3WXl4SFFVRlBja0lzUzBGQlN6WnhRaXhSUVVGUmVIQkNMRWxCVHk5Q0xFOUJRVTl2WXl4RlFVZFVNbXBDTEdsQ1FVTkZMRTFCUVUwMVFpeEZRVUZOZUM5Q0xFdEJRVXRyWjBNc1owSkJRMWh0UXl4RlFVRjNRaXhKUVVGSmVHdENMRTlCUVU4c1ZVRkJWVGRrTEV0QlFVczRhRU1zTmtKQlFUaENMRXRCUTJoR1VTeEZRVUZYT1VNc1JVRkJTVGxwUWl4aFFVRmhMRk5CUVZNdllpeE5RVUZOTUdoRExFZEJSV2hETEU5QlFXSkRMRWRCUVhGQ1FTeEZRVUZUZG5WQ0xFOUJRVk1zUjBGRGVrTjFkVUlzUlVGQlV6VnZRaXhMUVVGSk5tOUNMRWRCUVZOQkxFVkJRVTE2YkVJc1UwRkJVVEZZTEZOQlFWRnZPVUlzUjBGQlZXaEVMRVZCUVVsdWFFSXNWVUZCVlc5SUxFOUJRVThyWXl4TFFVa3ZSVllzZFVKQlEwVXNUVUZzYjBKdFFpeGhRWEZ2UW5KQ1JDdzJRa0ZCTmtKNlR5eEhRVU16UWl4TlFVRk5MRTFCUTBwdWRVSXNSMEZEUlcxMVFpeEZRVVZEYm5WQ0xFbEJTVXhxUml4TFFVRkxkeTlDTEVsQlFVMTJOa0lzUlVGQlRVVXNVMEZCVTNaRExFOUJSVEZDTlVNc1MwRkJTMjlvUXl4cFFrRkZUSEJvUXl4TFFVRkxhV2hETEc5Q1FVRnZRbXBvUXl4TFFVRkxaMmhETEdWQlFXVXZOMElzUlVGQlRXaERMR0ZCUjNKRWJUbENMR2xDUVVOTmNHZERMRXRCUVV0dGVVSXNWVUZEVUc1NVFpeExRVUZMYlhsQ0xGRkJRVkZvVnl4VlFVVmlibU1zUzBGQlMyMTVRaXhSUVVGVkxFMUJTMjVDT1V3c2RVSkJRWFZDTlVrc1IwRkRja0lzVDBGQlQzcGtMRXRCUVV0dGJrSXNUVUZCU3l4WFFVTm1MRTFCUVUxMFdpeEZRVUZQYzNoQ0xFZEJRVkZ3V1N4dlFrRkJiMEl2YlVJc1MwRkJUWGxrTEVkQlJTOURMRWRCUVhOQ0xHbENRVUZZUVN4RlFVRnhRaXhEUVVNNVFpeFJRVUUwUWl4SlFVRnFRalZRTEVWQlFVczBVQ3hIUVVOa0xFMUJRVTBzU1VGQlNVc3NWVUZCVlN4dlFrRkJiMEpNTEUxQlJ6RkROVkFzUlVGQlN6UlFMRlZCWTJKM1FpeEhRVUZ0UW10blFpeEpRV051UWl4TlFVbE5jMFFzUjBGQldTeEpRVUZMZEVRc1IwRkJVVGxVTEZGQlF6ZENjRzlDTEZWQlFWY3NVVUZEV0hOSkxFOUJRVkVzUTBGQlF5eEZRVUZITEVkQlExbzBXU3hSUVVGVExGRkJRMVJ2WkN4UlFVRlRMRWRCUTFRNVJpeFRRVUZWTEN0SlFVVk9hVWdzUjBGQlowSXNTVUZCUzNaRUxFZEJRVkV6VFN4WlFVTnFReXRQTEZGQlFWTXNOa0pCUlV4dlFpeEhRVUZWTEVOQlEyUXpSU3hMUVVGTkxHdENRVU5PUXl4UFFVRlJMRzlDUVVOU1F5eExRVUZOTEd0Q1FVTk9ReXhOUVVGUExHMUNRVU5RUXl4VFFVRlZMSE5DUVVOV1F5eE5RVUZQTEcxQ1FVTlFReXhSUVVGVExIRkNRVU5VUXl4VFFVRlZMSE5DUVVOV1F5eFhRVUZaTEhkQ1FVTmFReXhYUVVGWkxIbENRVlZrTEUxQlFVMXRSU3hYUVVGblFucEVMRWRCUlZRNVZDeHhRa0ZEVkN4UFFVRlBiMWdzUjBGSFJYQnFRaXhyUWtGRFZDeE5RWHBEVnl4VlFUUkRSbXhETEcxQ1FVTlVMRTlCUVU5M2JFSXNSMEZIUlc1UkxIbENRVU5VTEU5QlFVOXJVU3hIUVVsVWNrTXNaMEpCUTBVc1QwRkJUM0puUXl4TFFVRkxkMmRETEZsQlFXTjRaME1zUzBGQlN6WnBReXhqUVVkcVEzaENMRmRCUVZjM1FpeEhRVU5VZUM5Q0xFdEJRVXR6YUVNc2RVSkJRWFZDT1VJc1JVRkJTM2d2UWl4TFFVRkxkMmRETEZkQmFFTnVRaXh0UWtGclEyNUNlR2RETEV0QlFVdHphRU1zZFVKQlFYVkNPVUlzUlVGQlMzZ3ZRaXhMUVVGTE5tbERMR05CYWtOcVFpeHBRa0Z4UTNaQ1FTeGpRVU5GTEU5QlFVODNhVU1zUzBGQlMydG9ReXg1UWtGQmVVSnNhRU1zUzBGQlN6WnhRaXhSUVVGUk1GY3NVMEZIY0VSUExIVkNRVU5GTEUxQmJFVnBRaXhoUVhORmJrSjZZaXgxUWtGQmRVSTFTU3hIUVVOeVFpeFBRVUZQZW1Rc1MwRkJTMjF1UWl4TlFVRkxMRmRCUTJZc1RVRkJUWFJhTEVWQlFVOHJNRUlzUjBGQlVUZGlMRzlDUVVGdlFpOXRRaXhMUVVGTmVXUXNSMEZGTDBNc1IwRkJjMElzYVVKQlFWaEJMRVZCUVhGQ0xFTkJRemxDTEZGQlFUUkNMRWxCUVdwQ05WQXNSVUZCU3pSUUxFZEJRMlFzVFVGQlRTeEpRVUZKU3l4VlFVRlZMRzlDUVVGdlFrd3NUVUZITVVNMVVDeEZRVUZMTkZBc1ZVRmpZbmRDTEVkQlFXMUNNbXBDTEVsQlkyNUNMRTFCUVUxRkxFZEJRVk1zV1VGSlZFTXNSMEZCV1N4RFFVTm9Rbmd6UWl4UFFVRlJMRWRCUTFKdllpeFBRVUZSTEU5QlExSTFWeXhQUVVGUkxFbEJSVXBwZWtJc1IwRkJaMElzUTBGRGNFSjZNMElzVDBGQlVTeFRRVU5TYjJJc1QwRkJVU3hUUVVOU05WY3NUMEZCVVN4dlFrRk5TbXQ2UWl4SFFVRnpRaXhUUVUxMFFrTXNSMEZCYzBJc09FTkJTWFJDUXl4SFFVRnJRaXhYUVU5NFFpeE5RVUZOUXl4WFFVRnJRbnBrTEVkQlEzUkNReXhaUVVGWk9XaENMRVZCUVZNeVdpeEhRVU51UWpKTkxFMUJRVTEwYlVJc1IwRkRUamxFTEV0QlFVdHhha01zWlVGQk1rTXNVMEZCTVVKeWFrTXNTMEZCU3pac1FpeFRRVUZUWjBJc1VVRkJjVUl6YVVJc1QwRkJVMnhGTEV0QlFVczJiRUlzVTBGRGRrVTNiRUlzUzBGQlN6WnhRaXhSUVVGVk4zRkNMRXRCUVVzNGNVSXNWMEZCVjNKT0xFZEJReTlDZW1Rc1MwRkJTM05xUXl4VFFVRlhMRWRCUTJoQ2RHcERMRXRCUVV0MWFrTXNVMEZCVnl4SFFVTm9RblpxUXl4TFFVRkxkMnBETEdOQlFXZENMRXRCUTNKQ2VHcERMRXRCUVV0NWFrTXNZMEZCWjBJc1JVRkRja0o0WjBJc1IwRkJZVkVzUjBGQlIzcHFRaXhMUVVGTGNXcERMR1ZCTjBKS0xIVkNRVFpDYTBNc1NVRkJUWEpxUXl4TFFVRkxNR3BETEdGQlF6bEVNV3BETEV0QlFVc3lha01zVlVGRlRETnFReXhMUVVGTE1HcERMRmRCU1VseVdTeHhRa0ZEVkN4UFFVRlBNRmdzUjBGSFJURnFRaXhyUWtGRFZDeFBRVUZQZVdwQ0xFZEJTVlJoTEZWQlEwVXNUVUZCVFVNc1JVRkJZVFZxUXl4TFFVRkxjV3BETEdsQ1FVRnRRbkpxUXl4TFFVRkxjV3BETEdWQlFXVnVMMElzVDBGc1F6ZERMRk5CYTBOelJXa3ZRaXhIUVVOc1JsVXNSVUZCZFVNc1UwRkJlRUkzYWtNc1MwRkJTelp4UWl4UlFVRlJiRVVzVDBGQmIwSnBaQ3hGUVVGaE5XcERMRXRCUVVzMmNVSXNVVUZCVVd4RkxFOUJRekZGYldRc1JVRkJZVVFzU1VGQmFVSldMRWRCUVd0Q2JtcERMRXRCUVVzcmFrTXNaMEpCUVd0Q0xFVkJRemRGTDJwRExFdEJRVXR6YWtNc1UwRkJWeXhIUVVOb1FuUnFReXhMUVVGTGRXcERMRk5CUVZjc1IwRkRhRUoyYWtNc1MwRkJTM2xxUXl4alFVRm5RbnBxUXl4TFFVRkxaMnRETEcxQ1FVTldOV0lzUjBGQlpUVlRMRXRCUVVzd2RFSXNSMEZCY1VKc2FrTXNTMEZCU3paeFFpeFJRVUZST1dFc1VVRkRPVVF5U2l4TFFVRkpOVllzU1VGRFZpeE5RVUZOYldkRExFVkJRV2xDYkc1Q0xFZEJRWFZDYWxvc1IwRkRlRU5wVFN4RlFVRlRhekJDTEVWQlFXbENOMklzUjBGQlpVTXNVVUZCVVRSaUxFZEJRV3RDTEV0QlJYcEZMRWRCUVVsc01FSXNSVUZCVVN4RFFVTldMRTFCUVUxdE1FSXNSVUZCV1c0d1FpeEZRVUZQYkVvc2QwSkJSWHBDTEVkQlFVbHhPVUlzUlVGQlZUazRRaXhQUVVGVE9EaENMRVZCUVZVM09FSXNUMEZETDBJc1RVRkJUeXhEUVVGRGRXZENMRWRCUVZscFl5eEhRVUZqT1hwQ0xFZEJRVkU1U2l4SlFVRk5OamxDTEVWQlFWbEhMRWRCU1doRkxFOUJRVThzVVVGRFRuWTJRaXhSUVVGUGVUWkNMRWRCUVZGQkxFbEJRVTFzZDBJc1RVRkJTeXhEUVVGRFF5eEZRVUZIUXl4SlFVRk5SQ3hGUVVGRkxFZEJRVXRETEVWQlFVVXNTMEZCU1M5UExGTkJRVkVySzBJc1NVRkRNVVJ1YTBNc1MwRkJTM05xUXl4VFFVRlRjblZDTEV0QlFVdHJka0lzUlVGQlN5eEpRVVY0UW01clF5eExRVUZMZFdwRExGTkJRVk4wZFVJc1MwRkJTMnQyUWl4RlFVRkxMRTlCU1RWQ2NHVXNWVUZEUlRsRExFZEJRV0ZETEVsQlFVbHNha0lzUzBGQlMzRnFReXhsUVhaR1RpeHBRa0YzUm1oQ2Fsb3NUVUZCVFhKRkxGVkJTVklyUlN4WFFVRlhjazRzUjBGUFZDeFBRVTVCUVN4RlFVRlRMRWxCUVV0emJFSXNUVUZEVkc1aUxFZEJRVmxITEd0Q1FVRnJRaTl1UWl4TFFVRkxObXhDTEdGQlEyaENMR2xDUVVGWWNFa3NSMEZCZFVKQkxFVkJRVk5CTEVWQlFWTXNTMEZGTDBNeFRpeFBRVUZUZFU0c1IwRkJWMGNzUlVGQlR6Rk9MRk5CUVZkeVNDeFRRVUZUUXl4blFrRkRkRVEwVlN4SFFVRm5RblZzUWl4SFFVRlJjbXhDTEVWQlFWRjFiRUlzU1VGRGVrSjJiRUlzUlVGSFZITnRRaXhuUWtGRFJTeFBRVUZQTDJwRExFdEJRVXR4YWtNc2FVSkJRVzFDYmk5Q0xFOUJRVk5zUlN4TFFVRkxjV3BETEdWQlFXVndNRUlzV1VGQlkycFFMRXRCUVV0eGFrTXNaVUZCWlhJd1FpeFZRVWRvUjJjeFFpeHRRa0ZEUlN4UFFVRlBhR3RETEV0QlFVdHhha01zWlVGQlpURjVRaXhqUVVGblFteExMRXRCUVV0RExFbEJRVWxuUXl4VFFVRlRaMGdzUzBGQlMybENMR0ZCUVdOcVNTeFRRVUZUUXl4blFrRkJaMEpuU1N4alFVY3pSM2w2UWl4dFFrRkRSU3hQUVVGUGNHdERMRXRCUVV0eGFrTXNhVUpCUVcxQ2JpOUNMRTlCUVZOQkxFOUJRVTl0WjBNc1dVRkJZM0pyUXl4TFFVRkxjV3BETEdWQlFXVjRPRUlzZDBKQlFYZENVU3hQUVVjelIzRTRRaXhYUVVORkxFMUJRVTB4TUVJc1JVRkJXV2hRTEV0QlFVc3Jha01zWjBKQlFXdENMMnBETEV0QlFVczJjVUlzVVVGQlVYUm1MRTlCUldoRWIwWXNSVUZCWlROUkxFdEJRVXRuYTBNc2JVSkJSWEJDVFN4RlFVRlpkR3RETEV0QlFVczJjVUlzVVVGQlVYUm1MRTlCUVZOdlJpeEZRVUZsTTFFc1MwRkJTMjlyUXl4dFFrRk5OVVFzUjBGS1NYQnJReXhMUVVGTGVXcERMR2RDUVVGclFqbDVRaXhIUVVONlFqTlJMRXRCUVVzeWFrTXNWVUZIU0RNd1FpeEhRVUZoY3pGQ0xFVkJRV3BDTEVOQlEwVXNUVUZCVFhZd1FpeEZRVUZUTDFBc1MwRkJTM1ZxUXl4VFFVRlRkbXBETEV0QlFVdDFha01zVTBGQlUzaDJRaXhQUVVGVExFZEJSV2hFTDFRc1MwRkJTM2RxUXl4blFrRkJhMEo2ZWtJc1IwRkRla0l2VUN4TFFVRkxkV3RETEZWQlFWVjRNRUlzVDBGS2JrSXNRMEZWUVN4SFFVRkpMMUFzUzBGQlMzZHFReXhsUVVGcFFuZ3dRaXhGUVVGWmFGQXNTMEZCUzNOcVF5eFRRVUZUTEVsQlFVMTBha01zUzBGQlMzTnFReXhUUVVGVExFZEJRVXNzUlVGTE0wVXNUMEZLUVhScVF5eExRVUZMZDJwRExHTkJRV2RDTEZWQlJYSkNlR3BETEV0QlFVdDNhME1zVTBGTFVDeEpRVUZMTEVsQlFVazVka0lzUlVGQlNURlZMRXRCUVV0emFrTXNVMEZCVTNaMlFpeFBRVUZSVnl4TFFVTldNVlVzUzBGQlMzZHFReXhuUWtGQmEwSjRha01zUzBGQlMzVnFReXhUUVVGVE4zVkNMRWxCUVUweFJpeEhRVUZoYUZBc1MwRkJTM05xUXl4VFFVRlROWFZDTEZWQlFYVkRMRWxCUVhwQ01WVXNTMEZCUzNOcVF5eFRRVUZUTlhWQ0xFVkJRVWtzU1VGQmMwSXhSaXhGUVVGWmFGQXNTMEZCUzNOcVF5eFRRVUZUTlhWQ0xFVkJRVWtzUzBGSEwwc3hWU3hMUVVGTGRXdERMRlZCUVZWMmEwTXNTMEZCUzNWcVF5eFRRVUZUTjNWQ0xFdEJTMjVETm5aQ0xGVkJRVlY0TUVJc1IwRkRVaTlRTEV0QlFVdDNha01zWTBGQlowSjZla0lzUlVGRmNrSXZVQ3hMUVVGTGQydERMRk5CUlV3c1RVRkJUVU1zUlVGQlZYWkNMRWRCUVc5Q01UaENMRTFCUVUwc1MwRkJTMnRVTEV0QlFVa3JReXhIUVVGWkxFZEJRVWRCTEhGQ1FVRTBRakZOTEU5QlFWa3dUU3hYUVVGclFqRk5MRkZCUTNSSU1qQkNMRVZCUVU5MFl5eEhRVUZsUXl4UlFVRlJiMk1zUlVGQlVYcGlMRXRCUVVzc1MwRkJUV2h3UWl4TFFVRkxObkZDTEZGQlFWRTVZU3hSUVVOd1JUSXdRaXhGUVVGTGNtMUNMRlZCUVZWMFJTeEpRVUZKYTNCQ0xFbEJSV1o1UWl4RlFVRkxjbTFDTEZWQlFWVjRWeXhUUVd4S1ZTeHBRa0Z0U2pOQ2RXZENMRWRCUVdWRExGRkJNVWxqTEcxQ1FUQkpjMEp4WXl4RlFVRkxOV1FzVVVFelNXeERMR05CTWtsblJYcEpMRlZCUVZWMFJTeEpRVUZKYTNCQ0xFbEJSWEJITjJFc1IwRkJaVWtzVVVGQlVXdGpMRVZCYkVwTExIRkNRV3RLTkVKMEwwSXNVMEZCVVhVdlFpeEpRVWM1UkhaakxFZEJRV1ZOTEV0QlFVdHBZeXhGUVVGWExDdENRVUZwUkhZdlFpeFRRVUZSS3l0Q0xFZEJRVkZCTEVWQlFVczViRUlzVlVGQlZYUkZMRWxCUVVscmNFSXNUVUZGYmtnM1lTeEhRVUZsVFN4TFFVRkxhV01zUlVGeVNrUXNZVUZ4U21kRGRpOUNMRk5CUVZGM0wwSXNTVUZEZWtSNFl5eEhRVUZsUlN4VFFVRlRjMk1zUlVGMlNsQXNZVUYxU205RGVDOUNMRk5CUVZFckswSXNSMEZCVVVFc1JVRkJTemxzUWl4VlFVRlZkRVVzU1VGQlNXdHdRaXhaUVVzNVJtaG5RaXhIUVVGaGEwSXNVVUZCVVc1clFpeExRVUZMY1dwRExHVkJia3RRTEhkQ1FXMUxkVU1zUTBGRGVFUXhaMElzWTBGQlpUVlRMRWxCU1c1Q2VUQkNMRk5CUTBWd1l5eEhRVUZsTlZNc1MwRkJTekIwUWl4SFFVRnhRbXhxUXl4TFFVRkxObkZDTEZGQlFWRTVZU3hSUVVGUmNrY3NVVUZCVDNwR0xFZEJRVkZCTEVWQlFVdHZZU3hWUVVGVmVGY3NVMEZCVTI4M1FpeE5RVUZ6UWpjNVFpeFRRVUZSYmtJc1IwRkJVVUVzUlVGQlMyOWhMRlZCUVZWdlNDeFBRVUZQZDJRc1RVRkpia3MxWXl4MVFrRkJkVUkxU1N4SFFVTnlRaXhQUVVGUGVtUXNTMEZCUzIxdVFpeE5RVUZMTEZkQlEyWXNUVUZCVFhSYUxFVkJRVTkxTVVJc1IwRkJWWEpqTEc5Q1FVRnZRaTl0UWl4TFFVRk5lV1FzUjBGRmFrUXNSMEZCYzBJc2FVSkJRVmhCTEVWQlFWZ3NRMEZKUVN4UlFVRTBRaXhKUVVGcVFqVlFMRVZCUVVzMFVDeEhRVU5rTEUxQlFVMHNTVUZCU1Vzc1ZVRkJWU3h2UWtGQmIwSk1MRTFCUnpGRE5WQXNSVUZCU3pSUUxGVkJXVmgzUml4SFFVRmhVU3hIUVVGSGRtWXNUMEZ1VFZrc09FSkJiVTFwUWl4TFFVTXpRMnRyUWl4SFFVRmxOVk1zUzBGcVRWTXNNRUpCYVUxbGNGRXNVMEZCVVhrdlFpeEhRVUZQTEVsQlFVbDZRaXhIUVVGVmVVSXNVVUZUZEVVMWJFSXNSMEZCYlVKdGEwSXNTVUZqYmtJc1RVRlZUVEJDTEVkQlFXOUNMRk5CUTNCQ1F5eEhRVUZ2UWl4UFFVTndRa01zUjBGQmIwSXNUMEZIY0VKRExFZEJRV3RDTEZWQlEyeENReXhIUVVGeFFpeDNRa0ZWTTBJc1RVRkJUVU1zVjBGQldYaG1MRWRCUlV4MFJ5eHJRa0ZEVkN4TlFUZENWeXhOUVdsRFlqQlJMRTlCUTBVc1IwRkJTUzkyUWl4TFFVRkxObXhDTEZOQlFWTjZaQ3haUVVGamNFa3NTMEZCU3pac1FpeFRRVUZUZW1Rc1YwRkJWMmxXTEZkQlFXRmpMRXRCUVV0RExHTkJRV2RDY0dVc1MwRkJTelpzUWl4VFFVRlRlRWdzVlVGQlZYaFhMRk5CUVZOcE9VSXNTVUZETVVnc1QwRkhSaXhKUVVGSmJtTXNSVUZEU2l4TlFVRk5OVmtzUlVGQlUybE9MRWRCUVhWQ2FHUXNTMEZCU3pac1FpeFZRVVZ5UTNWbUxFVkJRV053YkVNc1MwRkJTelpzUWl4VFFVRlRhVUlzVVVFelFrNHNjVUpCTmtJMVFpeEhRVUZKYzJVc1JVRkJZU3hEUVVObUxFMUJRVTFETEVWQlFYZERMRTlCUVhwQ1JDeEZRVUZaY21oRExGVkJRVGhETEU5QlFYcENjV2hETEVWQlFWbHlhRU1zVTBGQmIwSnRhRU1zUjBGQmNVSkVMRWRCUXpOSGRHTXNSVUZCVjFBc1IwRkJaVFZUTEV0QlFVczJka0lzUlVGQlkwUXNSMEZETjBONll5eEZRVUZYUVN4RlFVRlRRU3hGUVVGVE5WVXNUMEZCVXl4SFFVZDRReXhOUVVGTmRYaENMRVZCUVZrell5eEZRVUZYTVVZc1IwRkJZV3RDTEZGQlFWRjNSU3hGUVRkRGFrTXNZMEUyUTNsRUxFTkJRM2hGYUVjc1kwRkJaVE5wUWl4TFFVRkxObXhDTEZkQlEycENMRXRCUzB3c1IwRkthMEkxUXl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CT1VNelFpeGpRVGhEYlVRc1EwRkRiRVZzUkN4alFVRmxaMGNzU1VGSFNHNUZMR3RDUVVGclF5eFBRVUZrT0dkQ0xFZEJRWE5DUVN4RlFVRlZPV2RDTEdsQ1FVTm9SU3hQUVVkR2VHdENMRXRCUVV0MWEwTXNWVUZCVlhaclF5eExRVUZMTm14Q0xGTkJRVlYxWml4SFFVVTVRaXhOUVVGTlJ5eEZRVUZYTEV0QlEyWjBhVUlzUjBGQllXdENMRkZCUVZGM1JTeEZRVEZFU2l4blFrRXdSRGhDTEVOQlF6ZERhRWNzWTBGQlpUTnBRaXhMUVVGTE5teENMRmRCUlhSQ05VTXNSMEZCWVd0Q0xGRkJRVkZ1YTBJc1MwRkJTelpzUWl4VFFUTkVWaXhsUVRKRWJVTXNRMEZEYWtSc1JDeGpRVUZsWjBjc1MwRkpaalZaTEVWQlEwWXZVQ3hMUVVGTGRXdERMRlZCUVZWNE1FSXNSVUZCVVVFc1JVRkJUek5JTEZkQlFWbHRPVUlzUjBGRk1VTkJMRWxCUzBwb1FpeFZRVUZWZW1kRExFVkJRVk52YzBJc1JVRkJWeTlSTEVkQlF6VkNMRTFCUTAxeGJVSXNTVUZFYVVKMFZpeEhRVUZ4UXl4UFFVRjJRa0VzUlVGQlZXNXpRaXhWUVVFMFF5eFBRVUYyUW0xelFpeEZRVUZWYm5OQ0xGTkJRVEJGY1d0Q0xFZEJRV1ZGTEZOQlFWTTBTQ3hGUVVGWEsxVXNTVUZCZUVZM1l5eEhRVUZsTlZNc1MwRkJTekIyUWl4SFFVRnZRbWhXTEVsQlF6ZEhMRWRCUTNoQ2RWWXNSVUZCYTBKMGJVSXNSMEZCV1hGdFFpeEhRVUZWUVN4RlFVRlBibTVDTEZWQlFWVjRWeXhUUVVGVGF6bENMRWxCUld4RlVTeEZRVUZYTEVsQlFVMTJiRU1zUzBGQlN6QnNReXh2UWtGQmIwSTFhRU1zUlVGQlV6Qm9ReXhGUVVGUmNtMUNMRWRCUlRkRWNXMUNMRWRCUVZWRExFZEJRMXBFTEVWQlFVOXVia0lzVlVGQlZXOUlMRTlCUVU5MVppeEpRVVY0UW1oc1F5eExRVUZMYlcxQ0xHVkJRV1Z2Wml4RlFVRlZlbWhETEVkQlFWTXNTVUZGZGtONWFFTXNTVUZKU2tjc2IwSkJRVzlDTldoRExFVkJRVk13YUVNc1JVRkJVWEp0UWl4SFFVTnVReXhIUVVGSmNXMUNMRVZCUVZFc1EwRkRWa0VzUlVGQlQyNXVRaXhWUVVGVmIwZ3NUMEZCVDNGbUxFbEJRM2hDTEUxQlFVMWhMRVZCUVdkQ2RtUXNSMEZCWlVNc1VVRXZSVW9zYTBOQkswVTBRMjFrTEVWQlFVOXdPVUlzV1VGRmFFWjFPVUlzUjBGRFJrRXNSVUZCWTNSdVFpeFZRVUZWYjBnc1QwRkJUM0ZtTEVsQlIwY3NVVUZCYUVOVkxFVkJRVTg1YjBJc1lVRkJZU3hUUVVOMFFqaHZRaXhGUVVGUE9TOUNMR0ZCUVdFc2FVSkJRV2xDTEVkQlNYcEROVUlzUlVGQlVYVmhMRlZCUVZWMFJTeEpRVUZKSzNGQ0xFbEJSV1VzVVVGQmFrTm9hRU1zUlVGQlVUUlpMR0ZCUVdFc1UwRkRka0kxV1N4RlFVRlJORUlzWVVGQllTeHBRa0ZCYVVJc1IwRkhlRU5wV2l4SFFVRlBOMkVzUjBGRlNFRXNSVUZCVVhWaExGVkJRVlY0Vnl4VFFVRlRhemxDTEV0QlF6ZENhbWhETEVWQlFWRjFZU3hWUVVGVmRFVXNTVUZCU1dseVFpeEpRVWQ0UWl4SlFVRkpiRGxDTEVWQlFWTm9SU3hGUVVGUmMwVXNWMEZOY2tJc1IwRktTVTRzUjBGQk9FSXNUMEZCY0VKQkxFVkJRVTh2UkN4WFFVTnVRaXRFTEVWQlFWTkJMRVZCUVU5TkxGbEJSMlJPTEVkQlFWVkJMRVZCUVU5MVZ5eFZRVUZWZUZjc1UwRjBTRVlzYVVKQmMwaHpReXhEUVVOcVJTeE5RVUZOS3psQ0xFVkJRV3RDT1doRExFVkJRVkZuYWtJc1VVRnVTRm9zWVVGeFNHaENPR1VzUjBGRFJuaGtMRWRCUVdVMVV5eExRV3BJVlN4dFFrRnBTSEZDYjNkQ0xFZEJRV2xDZUdkRExGTkJRVkY1WjBNc1IwRkJXVUVzUlVGQlUzaHVRaXhWUVVGVmRFVXNTVUZCU1N0eFFpeE5RVWMxUjJob1F5eEZRVUZSTkVJc1lVRkJZU3hwUWtGQmFVSXNSMEZIY0VONVdpeEhRVU5HUVN4SlFVdEthMGdzZFVKQlFYVkNOVWtzUjBGRGNrSXNUMEZCVDNwa0xFdEJRVXR0YmtJc1RVRkJTeXhYUVVObUxFMUJRVTEwV2l4RlFVRlBjek5DTEVkQlFVbHdaU3h2UWtGQmIwSXZiVUlzVFVGRmNrTXNSMEZCYzBJc2FVSkJRVmg1WkN4RlFVRnhRaXhEUVVNNVFpeFJRVUUwUWl4SlFVRnFRalZRTEVWQlFVczBVQ3hIUVVOa0xFMUJRVTBzU1VGQlNVc3NWVUZCVlN4dlFrRkJiMEpNTEUxQlJ6RkROVkFzUlVGQlN6UlFMRlZCWVdKM1JpeEhRVUZoVVN4SFFVRkhMMkVzVTBFM1NtRXNkMEpCVTBFc05FVkJiMHA1UXl4VFFVRlZjMW9zUjBGRE1VVXNRMEZCUXl4SlFVRkxMRkZCUVZGd1JpeFRRVUZUTldNc1MwRkJTelp0UWl4VlFVTTVRamRGTEVWQlFVMXBSQ3hwUWtGSFNpOUhMRWRCUVZkc1pTeFBRVWxHYld4RExFZEJRVWx3WlN4dlFrRkJiMEl2YlVJc1RVRkRhRU1yZGtJc1ZVRlRVRGxSTEVkQlFXMUNhMjFDTEVsQlkyNUNMRTFCUVUwNWJFSXNSMEZCVHl4UlFWbFFlVzFDTEVkQlFXdENMRTlCUld4Q1F5eEhRVUZyUWl4UFFVTnNRa01zUjBGQmNVSXNWVUZEY2tKNFZDeEhRVUZqTEVOQlEyeENaMG9zVlVGQlZ5eFZRVU5ZZVVzc1UwRkJWU3hWUVVOV2RFc3NUVUZCVHl4VlFVVklkRkVzUjBGQlZTeERRVU5rYlZFc1YwRkJWeXhGUVVOWWVVc3NWVUZCVlN4RlFVTldkRXNzVFVGQlR5eExRVkZVTEUxQlFVMTFTeXhYUVVGamRtZENMRWRCUTJ4Q1F5eFpRVUZaT1doQ0xFVkJRVk15V2l4SFFVTnVRakpOTEUxQlFVMTBiVUlzUjBGRFRqbEVMRXRCUVVzMmNVSXNVVUZCVlRkeFFpeExRVUZMT0hGQ0xGZEJRVmR5VGl4SFFVTXZRbnBrTEV0QlFVdHhMMElzVTBGQlZ5eExRVU5vUW5JdlFpeExRVUZMYlcxRExITkNRVUYxUWl4RlFVTTFRbTV0UXl4TFFVRkxiMjFETEhsQ1FVRXdRaXhGUVVVdlFuQnRReXhMUVVGTGVTOUNMR2RDUVVsSmFrNHNlVUpCUTFRc1QwRkJUMEVzUjBGSFJXNUlMSEZDUVVOVUxFOUJRVTlCTEVkQlIwVm9UU3hyUWtGRFZDeFBRVUZQUVN4SFFVbFVNRkVzVDBGRGIwSTVUU3hIUVVGaGEwSXNVVUZCVVc1clFpeExRVUZMTm14Q0xGTkJha1EzUWl4cFFrRnRSRVJ5UWl4dFFrRkpaSGhyUWl4TFFVRkxjVzFETEdkQ1FVVkVjbTFETEV0QlFVczJjVUlzVVVGQlVUSlJMRmRCUTJaNE4wSXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWWFJGTEVsQmVFUk9MRkZCYlVWd1FpOWFMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlZ2U0N4UFFVRlBjV2RDTEVsQlJ5OUNibTVDTEVkQlFVOHpaU3hMUVVGTE5teENMRlZCUlZvM2JFSXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWWFJGTEVsQlFVbG5jMElzU1VGRk5VSXZiRU1zUzBGQlN6WnNRaXhUUVVGVGVFZ3NWVUZCVlhSRkxFbEJRVWxwYzBJc1NVRkZOVUpvYlVNc1MwRkJTMjF0UWl4blFrRnFRbGtzUzBGRFptNXRRaXhMUVVGTE5teENMRk5CUVZONFNDeFZRVUZWYjBnc1QwRkJUM1ZuUWl4SlFVVXZRaTlwUWl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CTDBSYUxHdENRV2xGWkRkc1FpeExRVUZMYzIxRExIVkNRVmwxUW5SdFF5eExRVUZMTm14Q0xGTkJRVlUzYkVJc1MwRkJTelp4UWl4UlFVRlJNbEVzV1VGSE5VUXhUQ3hQUVVOUE9YWkNMRXRCUVVzMmJFSXNVMEZCVTNoSUxGVkJRVlY0Vnl4VFFVRlRheXRDTEUxQlNYQkNPV2xDTEVkQlFXRnJRaXhSUVVGUmJtdENMRXRCUVVzMmJFSXNVMEY0UmpkQ0xHbENRVEJHUkhKQ0xHMUNRV1ZrZUd0Q0xFdEJRVXMyYkVJc1UwRkJVM2hJTEZWQlFWVjBSU3hKUVVGSmFYTkNMRWxCUlRWQ2FHMURMRXRCUVV0dGJVSXNaMEpCWWxrc1MwRkRabTV0UWl4TFFVRkxObXhDTEZOQlFWTjRTQ3hWUVVGVmRFVXNTVUZCU1N0eVFpeEpRVWMxUWpsc1F5eExRVUZMTm14Q0xGTkJRVk40U0N4VlFVRlZiMGdzVDBGQlQzVm5RaXhKUVVVdlFtaHRReXhMUVVGTE5teENMRk5CUVZONFNDeFZRVUZWYjBnc1QwRkJUM05uUWl4SlFVVXZRamxwUWl4SFFVRmhhMElzVVVGQlVXNXJRaXhMUVVGTE5teENMRk5CY2tkWUxIRkNRVEJIWVRkc1FpeExRVUZMTm14Q0xGTkJRVlUzYkVJc1MwRkJTelp4UWl4UlFVRlJNbEVzWVVGSE5VUjZWaXhWUVVORkwyeENMRXRCUVV0eGJVTXNaMEpCUlVSeWJVTXNTMEZCU3pac1FpeFRRVUZUZUVnc1ZVRkJWWGhYTEZOQlFWTnJLMElzUzBGRGJrTXZiRU1zUzBGQlN6WnNRaXhUUVVGVGVFZ3NWVUZCVlc5SUxFOUJRVTl6WjBJc1NVRkhha016WWl4TlFVRk5ja1VzVlVGSlVpdEZMRmRCUVZkeVRpeEhRVTFVTEU5QlRFRkJMRVZCUVZNc1NVRkJTelJPTEUxQlExUjZSQ3hIUVVGWlJ5eHJRa0ZCYTBJdmJrSXNTMEZCU3pac1FpeGhRVU5vUWl4cFFrRkJXSEJKTEVkQlFYVkNRU3hGUVVGVFFTeEZRVUZUTEVsQlJYUkVSaXhIUVVGblFqaENMRWRCUVUwMVFpeEZRVUZSZW1Rc1MwRkJTelJzUWl4WlFVRlpORTBzWVVGRGVFTXZWU3hGUVVkVU5tOUNMSEZDUVVOUGRHMURMRXRCUVVzMmNVSXNVVUZCVVc5aUxGZEJTV1JxYlVNc1MwRkJTMjF0UXl4elFrRkJkMEp1YlVNc1MwRkJTMjl0UXl3d1FrRkpkRU53YlVNc1MwRkJTM0V2UWl4VFFVRlhOV1VzV1VGQlZ5eExRVU42UW5wblFpeExRVUZMT0haQ0xGTkJRMG81ZGtJc1MwRkJTelp4UWl4UlFVRlJPRkVzVTBGSGJFSTBTeXhsUVVGbGRtdENMRVZCUVU5M2EwSXNSMEZEY0VJc1QwRkJVWGhyUWl4RlFVRk5iVUlzVFVGRFdpeEpRVUZMTEZsQlEwd3NTVUZCU3l4WFFVTklibXBDTEV0QlFVdHRiVU1zY1VKQlFYVkNTeXhGUVVNMVFpeE5RVVZHTEVsQlFVc3NWVUZEVEN4SlFVRkxMRmRCUTBoNGJVTXNTMEZCUzI5dFF5eDNRa0ZCTUVKSkxFVkJTVzVETEVkQlFVbEJMRVZCUjBZc1dVRkdRWGh0UXl4TFFVRkxjVzFETEdkQ1FVdFFMRTFCUVUxNldTeEZRVUZqTlV3c1JVRkJUVmNzWTBGRmRFSXphVUlzUzBGQlN6WnNRaXhYUVVGaEswZ3NSMEZCWlRWMFFpeExRVUZMTm14Q0xGTkJRVk5vWlN4VFFVRlRLMnhDTEVsQlNUVkVOWFJDTEV0QlFVdHpiVU1zY1VKQlIxQTNSeXhuUWtGRFJYaGpMRWRCUVdGUkxFZEJRVWQ2YWtJc1MwRkJTelpzUWl4VFFXcE1SQ3h6UWtGcFREUkNOMFFzUjBGQlUyaHBRaXhMUVVGTGRXMURMR1ZCUVdWMmEwSXNSMEZCVHl4TFFVTndSbWxDTEVkQlFXRlJMRWRCUVVkNmFrSXNTMEZCU3pac1FpeFRRV3BNUml4eFFrRnBURFJDTjBRc1IwRkJVMmhwUWl4TFFVRkxkVzFETEdWQlFXVjJhMElzUjBGQlR5eExRVU51Um1sQ0xFZEJRV0ZSTEVkQlFVZDZha0lzUzBGQlN6WnNRaXhUUVdwTVNDeHZRa0ZwVERSQ04wUXNSMEZCVTJocFFpeExRVUZMZFcxRExHVkJRV1YyYTBJc1IwRkJUeXhMUVVOc1JtbENMRWRCUVdGUkxFZEJRVWQ2YWtJc1MwRkJTelpzUWl4VFFXcE1SaXh4UWtGcFREUkNOMFFzUjBGQlUyaHBRaXhMUVVGTGRXMURMR1ZCUVdWMmEwSXNSMEZCVHl4TFFVZHlSbkZyUWl4blFrRkRSVEZhTEdGQlFXRXpjMElzUzBGQlMzRXZRaXhWUVVOc1FuSXZRaXhMUVVGTGNTOUNMRk5CUVZjc1MwRkpiRUpvV2l4MVFrRkJkVUkxU1N4SFFVTnlRaXhQUVVGUGVtUXNTMEZCUzIxdVFpeE5RVUZMTEZkQlEyWXNUVUZCVFhSYUxFVkJRVTl4TkVJc1IwRkJUVzVtTEc5Q1FVRnZRaTl0UWl4TFFVRk5lV1FzUjBGRk4wTXNSMEZCYzBJc2FVSkJRVmhCTEVWQlFYRkNMRU5CUXpsQ0xGRkJRVFJDTEVsQlFXcENOVkFzUlVGQlN6UlFMRWRCUTJRc1RVRkJUU3hKUVVGSlN5eFZRVUZWTEc5Q1FVRnZRa3dzVFVGSE1VTTFVQ3hGUVVGTE5GQXNSMEZCVVhwa0xGZEJUM0pDZVcxQ0xFZEJRWEZDZVdZc1NVRlJja0pxYmtJc1IwRkJiVUpwYmtJc09FNURkREZLVGs4c1IwRkJaU3hKUVhoRE5VSXNlVUpCYzBOQkxFOUJja05KTEZsQlFVRXZhME1zU1VGQlFTeFRRVUZKYTBRc1IwRkRRU3hKUVVGSk9HaERMRVZCUVVsb0swSXNVMEZCVTJrclFpeFBRVUZQYUcxRExFMUJRVTBzZDBKQlFXbENhVVVzUlVGQlNTd3dRa0ZCZVVJc1IwRkROVVVzUjBGQlNUaG9ReXhGUVVGSExFOUJRVTlGTEcxQ1FVRnRRa1lzU1VGSGNrTXNXVUZCUVhSNFFpeEpRVUZCTEZOQlFVbDRVU3hGUVVGak1VTXNSVUZCV1RKclF5eFJRVUZCTEVsQlFVRkJMRWxCUVVGQkxFVkJRVUVzU1VGRmRFSkJMRVZCUVV0RExFOUJRMHhFTEVWQlFVc3NWMEZCZVVJc1IwRkJXa0VzUlVGQlMwTXNTMEZCV1N4SFFVRkxMRlZCUjJwRFJDeEZRVUZMUXl4TlFVbG9Ra1FzUlVGQlQzUnNReXhQUVVGUGQyeERMRkZCUVZGR0xFZEJRVTA1YWtNc1VVRkRlRUlzVTBGQlEybHJReXhGUVVGblFpeFBRVUZEUXl4RlFVRkRMRXRCUVVWb2RVSXNSVUZCUXl4TFFVRk5MR2RDUVVGSEszUkNMRVZCUVdNc1lVRkJTME1zUlVGQlF5eFpRVUZKYUhWQ0xFdEJRVXNzU1VGSmFFVjJVU3hUUVVGVGFTdENMRTlCUVZNdmFFTXNSVUZCVHl4SlFVRk5jMmxETEcxQ1FVRnRRbWhzUXl4SFFVRlRNbXRETEVkQlJ5OUVMRmxCUVVGdWFFSXNUMEZCUVN4VFFVRlBPV2RDTEVWQlFXTnBhVU1zUjBGRGFrSTNiVU1zUzBGQlMyOVdMRWxCUVVsNFVTeEZRVUZOTEVkQlFVa3NSMEZCUml4RFFVRkpMRmRCUVZrc1IwRkJUV2xwUXl4TFFVa3pReXhaUVVGQlRTeFJRVUZCTEZOQlFWRjJhVU1zUjBGRFNpeEpRVUZKYVZZc1JVRkJVemRhTEV0QlFVc3dRaXhKUVVGSmEwUXNSMEZEZEVJc1QwRkJTMmxXTEVWQlEwVjFkRUlzUzBGQlMwTXNUVUZCVFhoMFFpeEhRVVJGTEVsQlNYaENMRmxCUVVGNWRFSXNVVUZCUVN4VFFVRlJNV2xETEVWQlFXTXhReXhGUVVGWk1tdERMRWRCUXpsQ04yMURMRXRCUVV0dlZpeEpRVUZKZUZFc1JVRkJUWGRwUXl4TFFVRkxSeXhWUVVGVmNteERMRWRCUVZFeWEwTXNTVUZGT1VNc1JVRjBRMEVzU1VORVFTdzBRa0ZMUVN4UFFVcHRRaXhGUVVGQlZ5eFpRVUZqTEdOQlEyUXNSVUZCUVVNc1dVRkJZeXhqUVVOa0xFVkJRVUZETEdOQlFXZENMR2RDUVVOb1FpeEZRVUZCUXl4WlFVRmpMR05CUTJwRExFVkJURUVzUjBGVlFTdzBRa0Y1UWtFc1QwRjJRbTFDTEVWQlFVRkRMRlZCUVZrc1dVRkRXaXhGUVVGQlF5eGxRVUZwUWl4cFFrRkRha0lzUlVGQlFVTXNaVUZCYVVJc2FVSkJRMnBDTEVWQlFVRkRMR1ZCUVdsQ0xHbENRVU5xUWl4RlFVRkJReXhwUWtGQmJVSXNiVUpCUTI1Q0xFVkJRVUZETEdWQlFXbENMR2xDUVVOcVFpeEZRVUZCUXl4blFrRkJhMElzYTBKQlEyeENMRVZCUVVGRExHTkJRV2RDTEdkQ1FVTm9RaXhGUVVGQlF5eG5Ra0ZCYTBJc2EwSkJRMnhDTEVWQlFVRkRMSE5DUVVGM1FpeDNRa0ZEZUVJc1JVRkJRVU1zY1VKQlFYVkNMSFZDUVVOMlFpeEZRVUZCUXl3eVFrRkJOa0lzTmtKQlF6ZENMRVZCUVVGRExIRkNRVUYxUWl4MVFrRkRka0lzUlVGQlFVTXNaMEpCUVd0Q0xHdENRVU5zUWl4RlFVRkJReXhqUVVGblFpeG5Ra0ZEYUVJc1JVRkJRVU1zY1VKQlFYVkNMSFZDUVVOMlFpeEZRVUZCUXl4clFrRkJiMElzYjBKQlEzQkNMRVZCUVVGRExHMUNRVUZ4UWl4eFFrRkRja0lzUlVGQlFVTXNkVUpCUVhsQ0xIbENRVU42UWl4RlFVRkJReXhqUVVGblFpeG5Ra0ZEYUVJc1JVRkJRVU1zWlVGQmFVSXNhVUpCUTJwQ0xFVkJRVUZETEdsQ1FVRnRRaXh0UWtGRGJrSXNSVUZCUVVNc2MwSkJRWGRDTEhkQ1FVTXpReXhGUVhwQ1FTeEhRekJEWVVNc1IwRkJiMElzU1VGd1JHcERMRmRCUlVrc1lVRkRTVzV3UXl4TFFVRkxiM0JETEZWQlFWa3NSMEZEYWtKd2NFTXNTMEZCUzNGd1F5eHpRa0U0UTJJc1QwRXhRMGtzV1VGQlFVRXNiMEpCUVVFc2MwSkJRMGx1YkVNc1QwRkJUMjlzUXl4WFFVRmhMRk5CUVVORExFZEJRMnBDTEVkQlFVbEJMRVZCUVVWMGEwTXNUMEZCVTNOclF5eEZRVUZGZEd0RExFMUJRVTExYTBNc1ZVRkJWeXhEUVVNNVFteHJRaXhSUVVGUmJXdENMRWxCUVVsR0xFVkJRVVYwYTBNc1QwRkRaQ3hKUVVGSmVXdERMRVZCUVc5Q0xFTkJRVVZETEZWQlFWZEtMRVZCUVVWMGEwTXNUVUZCVFhWclF5eFZRVUZYU1N4VlFVRlZMRVZCUVUxRExHVkJRV2RDTEVsQlEzaEdMRVZCUVV0RExFdEJRVXRETEVkQlFXTXpRaXhuUWtGQmFVSnNhME1zVDBGQlVYZHNReXhOUVVzM1JDeFpRVUZCU1N4TFFVRkJMRk5CUVV0RkxFVkJRVzFDUXl4RlFVRmhReXhIUVVOcVF5eEhRVUZMUml4RlFVTk1MRWxCUTBsb2NVTXNTMEZCUzI5d1F5eFZRVUZWYUd0RExGTkJRVkVzVTBGQlF5dHJReXhIUVVOb1FrRXNSVUZCUjBNc1dVRkJZMG9zUjBGQlkwY3NSVUZCUjA0c2FVSkJRVzFDU3l4RlFVRlZUQ3hwUWtGQk9FTXNTVUZCTlVKTkxFVkJRVWRGTEhOQ1FVVjRSa1lzUlVGQlIwY3NVMEZCVTB3c1JVRkJVVU1zVFVGSE1VSXNUVUZCVHpOclFpeEhRVU5NUkN4UlFVRlJReXhOUVVGTlFTeExRVWwwUWl4WlFVRkJaMnhDTEZsQlFVRXNVMEZCV1VNc1IwRkZVaXhKUVVGSlF5eEZRVUZYZW5GRExFdEJRVXR2Y0VNc1ZVRkRaakV2UWl4UlFVRlBMRk5CUVVONVowTXNSMEZCVHl4UFFVVjFReXhKUVVaMFEwRXNSVUZCUjA4c1RVRkJVVVlzUlVGQlRVVXNTMEZETTBKUUxFVkJRVWRETEZsQlFXTkpMRVZCUVUxS0xGZEJRM1pDUkN4RlFVRkhUaXhwUWtGQmJVSlhMRVZCUVUxWUxHMUNRVVYyUXpkd1F5eExRVUZMYjNCRExGVkJRVmx4UWl4SFFVbHlRaXhaUVVGQlJTeFZRVUZCTEZOQlFWVklMRWRCU1VSQkxFVkJRVTFLTEZkQlExaHdjVU1zUzBGQlMyOXdReXhWUVVGVmJqQkNMRXRCUVV0MU1VSXNTVUZGTlVJc1JVRnNSRUVzU1VOS1FTeGpRVU5KTEdGQlEwbHNiRUlzVVVGQlVXMXJRaXhKUVVGSkxHdERRWGxIY0VJc1QwRjBSMGtzV1VGQlFXMUNMRkZCUVVFc1UwRkJVWFp3UXl4RlFVRkxZU3hGUVVGUE1tOURMRWRCVFdoQ0xFbEJRVWwyYWtNc1JVRkJTU3hEUVVGRmNFWXNUVUZCVDBFc1JVRkJUMmxvUWl4TFFVRk5MRTlCUVZFd2JrSXNUMEZCVVVFc1JVRkJUME1zVjBGRmFFTXNhVUpCUVZZMWIwTXNVVUZCWjBOcVFpeEpRVUZXYVVJc1NVRkROMEp2Uml4RlFVRkZObUlzUzBGQlR5eFZRVWRpTkc1Q0xHVkJRV1ZETEZGQlFWRXpjRU1zUlVGQlN5dHNReXhMUVVGTFJ5eFZRVUZWYW1kRExFdEJSeTlETEZsQlFVRXlha01zVjBGQlFTeFRRVUZYTlhCRExFVkJRVXMyY0VNc1IwRkRXaXhKUVVOSkxFbEJRVWt2Unl4RlFVRlBibXRETEV0QlFVdHRja01zVjBGQlZ6bHdReXhIUVVNelFpeEhRVUZKT0dsRExFVkJRVTBzUTBGRFRpeEpRVUZKYVVnc1JVRkJWMFlzUlVGQll5OUhMRVZCUVV0cWFVTXNUMEZEYkVOc1F5eExRVUZMTkhGRExGRkJRVkYyY0VNc1JVRkJTeXR3UXl4RlFVRlZMRWxCUVVsRExFdEJRVXRzU0N4RlFVRkxNRWNzVlVGRmFFUXNUVUZCVDNSc1FpeEhRVU5NUkN4UlFVRlJReXhOUVVGTlFTeExRVWwwUWl4WlFVRkJLMnhDTEdkQ1FVRkJMRk5CUVdkQ2FuRkRMRWRCUTFvc1QwRkJUMEVzUlVGQlRTeFhRVWRxUWl4WlFVRkJPSEJETEZkQlFVRXNVMEZCVnpsd1F5eEhRVU5RTEVsQlFVbHJjVU1zUlVGQlVWSXNaVUZCWlZNc1VVRkJVVzV4UXl4SFFVTnVReXhIUVVGSmEzRkRMRVZCUVU4c1EwRkZVQ3hKUVVGSmFtdERMRVZCUVVrNEwwSXNTMEZCUzBNc1RVRkJUV3RGTEVkQlJXWldMRVZCUVZOMmFrTXNSVUZCUlhWcVF5eFBRVU5tTEU5QlFVbFJMRXRCUVV0SkxFMUJRVkZ1WlN4VFFVRlRkV1FzU1VGRGRFSTNjVU1zUzBGQlN6QnlReXhYUVVGWGNuRkRMRkZCUTJoQ2FXdENMRkZCUVZGdGEwSXNTVUZCU1N4cFEwRkJhME51YVVNc1NVRkpNME5CTEVWQlJWZ3NUMEZCVHl4TlFVZFlMRmxCUVVGcmEwTXNVVUZCUVN4VFFVRlJibkZETEVkQlEwb3NTVUZCU1d0eFF5eEZRVUZSVWl4bFFVRmxVeXhSUVVGUmJuRkRMRWRCUTI1RExFZEJRVWxyY1VNc1JVRkJUeXhEUVVWUUxFbEJRVWxxYTBNc1JVRkJTVGd2UWl4TFFVRkxReXhOUVVGTmEwVXNSMEZGWmxZc1JVRkJVM1pxUXl4RlFVRkZkV3BETEU5QlEyWXNUMEZCU1ZFc1MwRkJTMGtzVFVGQlVXNWxMRk5CUVZOMVpDeFJRVU4wUWpkeFF5eExRVUZMTUhKRExGZEJRVmR5Y1VNc1IwRkpZbWxITEVWQlFVVndSaXhOUVVWaUxFOUJRVThzVFVGSFdDeFpRVUZCZDNCRExGZEJRVUVzVTBGQlYzSnhReXhIUVVOUU1IQkRMR1ZCUVdWWExGZEJRVmR5Y1VNc1NVRlRPVUlzV1VGQlFYTnhReXhWUVVGQkxGTkJRVlZxVEN4SFFVVk9MRWRCUVV0QkxFVkJRVXdzUTBGTlFTeEpRVUZKTTNOQ0xFVkJRVk5uTTBJc1pVRkJaV2d6UWl4UFFVTTFRaXhMUVVGSlFTeEhRVUZWTEVkQlFXUXNRMEZMUVN4SlFVWkJMRWxCUVVrM1R5eEZRVUZwUWl4SFFVVmFMMFVzUlVGQlVTeEZRVUZIUVN4RlFVRlJORlFzUlVGQlVUVlVMRXRCUXpWQ2EwSXNSVUZCVFRCd1F5eGxRVUZsTVhCRExFbEJRVWxzUWl4SlFVTndRakJqTEZkQlFWYzJha0lzU1VGRmNFSjROMElzUlVGQlN5dFFMRXRCUVVzMVZDeEhRVWRrTEVsQlFWTnNRaXhGUVVGUkxFVkJRVWRCTEVWQlFWRXJSU3hGUVVGTE5rOHNUMEZCVVRWVUxFbEJRVk1zUTBGRE9VTXNTVUZCU1d0Q0xFVkJRVTAyUkN4RlFVRkxMMFVzUjBGRFpqUnhReXhsUVVGbFZ5eFhRVUZYY25GRExGVkJjRUl4UWpCd1F5eGxRVUZsV1N4aFFYVkNNMElzUlVFelIwRXNSME0yUTAxRExFZEJRVGhDTEVsQmRFTndReXgzUWtGRlNTeExRVUZCUXl4WFFVRm5ReXhIUVRaQ2NFTXNUMEV6UWtrc1dVRkJRVU1zU1VGQlFTeFRRVUZKUXl4SFFVTkJMM0pETEV0QlFVczJja01zVjBGQlZ6VXlRaXhMUVVGTE9ESkNMRWxCUjNwQ0xGbEJRVUZETEU5QlFVRXNWMEZEU1N4SlFVRkpibmxDTEVWQlFUUkNMRWRCVVdoRExFOUJVRUUzV2l4TFFVRkxObkpETEZkQlFWZDZiVU1zVTBGQlVTeFRRVUZETm0xRExFZEJRM0pDTEVsQlFVbEJMRVZCUVVkRExGZEJRVkFzUTBGRlFTeEpRVUZKTVVJc1JVRkJlVUlzUTBGQlJWZ3NaVUZCWjBKdlF5eEZRVUZIUlN4bFFVRm5RbWh1UWl4TFFVRk5PRzFDTEVWQlFVZEhMR05CUXpORmRubENMRVZCUVU4MVJTeExRVUZMZFRGQ0xFOUJSMVF6ZDBJc1IwRlBXQ3haUVVGQmQzbENMRmxCUVVFc1UwRkJXVU1zUjBGRFVpeEpRVUZKT1RKQ0xFVkJRVTk0Vml4TFFVRkxObkpETEZkQlFWZHlNa0lzVFVGQlN5eFRRVUZEZVRKQ0xFZEJRVThzVDBGQlFVRXNSVUZCUjBVc2FVSkJRVzFDUnl4TFFVTTVSQ3hIUVVGSk9USkNMRVZCUTBFc1RVRkJUeXhEUVVGRmNUQkNMR1ZCUVdkQ2NqQkNMRVZCUVVzeU1rSXNaVUZCWjBKb2JrSXNTMEZCVFROUUxFVkJRVXMwTWtJc1pVRkpja1VzUlVFdlFrRXNTVU5HUVN4alFWRkpMR0ZCUTBsd2MwTXNTMEZCUzNOdlFpeFRRVUZYTEVkQlEyaENkRzlDTEV0QlFVc3JjRU1zWTBGQlowSkJMRWRCUTNKQ0wzQkRMRXRCUVV0MWMwTXNWMEZCWVVFc1IwRjFWREZDTEU5QmNGUkpMRmxCUVVGRExHZENRVUZCTEZOQlFXZENReXhGUVVGdFFrTXNSMEZETDBKMlJDeEhRVUZyUWxjc1MwRkJTekpETEVWQlFWZDZjME1zUzBGQlRUQnpReXhKUVUwMVF5eFpRVUZCUXl4blFrRkJRU3hUUVVGblFqTkRMRVZCUVcxQ2VIQkNMRWRCU3k5Q2VHZENMRXRCUVVzNFJDeFJRVUZSZDBzc2FVSkJRV2xDTURkQ0xFVkJRVmQ0Y0VJc1NVRkhOME1zV1VGQlFXOXpRaXhuUWtGQlFTeFRRVUZuUWtNc1IwRkRXaXhKUVV0SkxFOUJTRzFDY0Vjc1IwRkJZVlVzVVVGQlVUQkdMRWRCU3pGRExFMUJRVTkwYmtJc1IwRkZUQ3haUVVSQlJDeFJRVUZSYld0Q0xFbEJRVWxzYTBJc1MwRlBjRUlzYzBKQlFVa3NOa0pCUVdNc1MwRkJiRUlzVjBGRFNTeFBRVUZQZG14Q0xFdEJRVXM0YzBNc2NVSkJSMmhDTEZOQlFXMUNOM3BDTEVkQlEyWnFXaXhMUVVGTE9ITkRMR2RDUVVGclFqZDZRaXh0UTBGSk0wSXNjMEpCUVVrc2VVSkJRVlVzUzBGQlpDeFhRVU5KTEU5QlFVOXFXaXhMUVVGTEszTkRMR2xDUVVkb1FpeFRRVUZsT1hwQ0xFZEJRMWhxV2l4TFFVRkxLM05ETEZsQlFXTTVla0lzYlVOQlIzWkNMSE5DUVVGSkxESkNRVUZaTEV0QlFXaENMRmRCUTBrc1RVRkJUeXh2UTBGSFdDeHpRa0ZCU1N4dlFrRkJTeXhMUVVGVUxGZEJRMGtzVDBGQlQycGFMRXRCUVVzNFJDeFJRVUZSZFVJc1RVRkJUU3RDTEZkQlJUbENMRk5CUVZWQkxFZEJRMDV3U0N4TFFVRkxPRVFzVVVGQlVYVkNMRTFCUVUwclFpeE5RVUZSUVN4dFEwRkhMMElzYzBKQlFVa3NjMEpCUVU4c1MwRkJXQ3hYUVVOSkxFOUJRU3RDTEVsQlFYaENjRWdzUzBGQlN6aEVMRkZCUVZFd2JrSXNXVUZGZUVJc1UwRkJXV2hGTEVkQlExSjRia0lzUzBGQlN6aEVMRkZCUVZFd2JrSXNVVUZCYVVJc1NVRkJVbWhGTEcxRFFVY3hRaXhaUVVGQmQyeENMRTlCUVVFc1UwRkJUME1zUjBGRFNDeFBRVUZQYW5SRExFdEJRVXM0UkN4UlFVRlJkVUlzVFVGQlRUUnVReXhKUVVjNVFpeFpRVUZCUXl4UFFVRkJMRk5CUVU5cVJ5eEZRVUZYYUhWQ0xFZEJSV1JxV2l4TFFVRkxPRVFzVVVGQlVYVkNMRTFCUVUwMGFFTXNSMEZCUzJoMVFpeEhRVWMxUWl4elFrRkJTU3hyUWtGQlJ5eExRVUZRTEZOQlFWRTFVQ3hIUVVGU0xGZEJRM1ZDTEdsQ1FVRlNRU3hIUVVFMFFpeFBRVUZTUVN4SlFVRjVReXhKUVVGNlFuSktMRXRCUVV0dGRFTXNWMEZCVnpscVF5eEpRVU5vUkRsSUxFOUJRVTh5UkN4TFFVRkxiVVVzUjBGRGJFSnFSU3hUUVVGUkxGTkJRVU0yYUVNc1IwRkRWaXhGUVVGTGJtcERMRkZCUVZGMVFpeE5RVUZOTkdoRExFZEJRVXMxT1VJc1JVRkJTVFE1UWl4MVEwRlRlRU1zV1VGQlFXMUhMRTFCUVVFc1UwRkJUVUVzUjBGRFJpeEpRVUZKUXl4RlFVRlJjblJETEV0QlExcHZkRU1zUlVGQlRXaHZReXhUUVVGUkxGTkJRVU5wTkVJc1IwRkJUU3hQUVVGQloxRXNSVUZCVFhweVF5eExRVUZMZVRkQ0xFVkJRVVZvT0VJc1NVRkJTMmM0UWl4RlFVRkZiamRDTEZkQlV6ZERMRmxCUVVGT0xFdEJRVUVzVTBGQlMxQXNSVUZCWVdFc1IwRkhaQ3hQUVVSQmJFTXNTMEZCU3poRUxGRkJRVkUwUWl4aFFVRmhja1VzUlVGQlMyRXNSMEZEZUVKc1F5eExRVUZMT0VRc1UwRkhhRUlzV1VGQlFYZHdReXhSUVVGQkxGTkJRVkZxYzBNc1IwRkRTaXhQUVVGUGNrSXNTMEZCU3poRUxGRkJRVkUwV1N4aFFVRmhjbUlzU1VGUGNrTXNXVUZCUVd0elF5eGhRVUZCTEZOQlFXRTVkMElzUjBGRFZDeFBRVUZQZW1Nc1MwRkJTemhFTEZGQlFWRnJaaXhwUWtGQmFVSjJSeXhKUVVkNlF5eFpRVUZCSzNkQ0xGTkJRVUVzVTBGQlUwTXNSMEZEVEN4UFFVRlBMMnRETEZOQlFWTnRORUlzWlVGQlpUUk5MRWxCUjI1RExGbEJRVUZETEdOQlFVRXNVMEZCWTNwclFpeEhRVU5IUVN4RlFVRkhNR3RDTEdOQlExUkRMRmxCUVZremEwSXNTVUZIZGtJc1dVRkJRVFJyUWl4VFFVRkJMRk5CUVZORExGTkJRMFIwYmtNc1JVRkJVWE51UXl4RlFVRlRkRzVETEUxQlFVMHNTMEZITTBJc1QwRkVRU3hGUVVGQmVFY3NTMEZCU3poRUxGRkJRVkYxWVN4WFFVRlZkRVVzU1VGQlJ5eFJRVUZKZGxRc1IwRkRka0o0Unl4TlFVZFlMRmxCUVVFcmRFTXNXVUZCUVN4VFFVRlpSQ3hIUVVWU0xFOUJSRUU1ZEVNc1MwRkJTemhFTEZGQlFWRjFZU3hWUVVGVmIwZ3NUMEZCVDNGdlFpeEhRVU4yUWpsMFF5eE5RVWRZTEZsQlFVRm5kVU1zVTBGQlFTeFRRVUZUUml4SFFVTk1MRTlCUVU4NWRFTXNTMEZCU3poRUxGRkJRVkYxWVN4VlFVRlZlRmNzVTBGQlUybHRReXhKUVVjelF5eFpRVUZCUnl4UlFVRkJMRk5CUVZGRExFZEJSVW9zVDBGRVFXeDFReXhMUVVGTE9FUXNVVUZCVVhGeFF5eFZRVUZaUkN4RlFVTnNRbXgxUXl4TlFVZFlMRmxCUVVGdmRVTXNVVUZCUVN4WFFVTkpMRTlCUVU5d2RVTXNTMEZCU3poRUxGRkJRVkZ4Y1VNc1YwRlBlRUlzV1VGQlFXeFpMRTlCUVVFc1UwRkJUekZITEVWQlFYVkNPR1VzUjBGUE1VSXNXVUZRTUVJc1NVRkJRVUVzU1VGQlFVRXNSMEZCUVN4SFFVVjBRa0VzUjBGRFFYSjFReXhMUVVGTGMyOUNMRk5CUVZOeVZDeExRVUZMYzJFc1IwRkhka0oyZGtJc1MwRkJTemhFTEZGQlFWRjNjVU1zV1VGQldTOWxMRVZCUVV0NmNrSXNVMEZEZGtJNVJDeE5RVWRZTEZsQlFVRXllVUlzVFVGQlFTeFhRVU5KTTNsQ0xFdEJRVXM0UkN4UlFVRlJOblZDTEZOQlIycENMRmxCUVVGM1lTeFhRVUZCTEZOQlFWZDRja01zUjBGRFVDeFBRVUZ0UXl4SlFVRTFRa29zVDBGQlR6SkVMRXRCUVV0MlJDeEhRVUZMYjFNc1VVRkhOVUlzYzBKQlFVa3NhVUpCUVVVc1MwRkJUaXhYUVVOSkxFOUJRVTh2VkN4TFFVRkxjM1JETEZGQlFWRXNWMEZIZUVJc1UwRkJUM0l3UWl4SFFVTklhbG9zUzBGQlN6UkNMRXRCUVVzc1MwRkJUWEZZTEc5RFFVZHdRaXhaUVVGQmN6RkNMRTFCUVVFc1YwRkZTU3hKUVVGSk4wZ3NSVUZCU1N4SlFVRkpPRWdzUlVGRlVteHVReXhGUVVGSmRFZ3NTMEZCU3poRUxGRkJRVkV5Y1VNc1dVRk5ja0lzUjBGTVNXNXVReXhoUVVGaE4wTXNZMEZEWW1scFF5eEZRVUZGTldsRExGRkJRVlYzUkN4SFFVbGFkRWdzUzBGQlMzTnZRaXhUUVVGVGRsVXNUMEZCVXl4RlFVRkhMRU5CUXpGQ0xFbEJRVWx1UlN4RlFVRlBOVkFzUzBGQlMzTnZRaXhUUVVGVE5VOHNTMEZCU1N4VFFVRkRWQ3hIUVVNeFFpeEpRVUZKZVRGQ0xFVkJRVXQ2TVVJc1JVRkJSWE14UWl4UlFVVllMRTlCUkVFM1NDeEZRVUZGTldsRExGRkJRVkZ0ZVVJc1QwRkJUM2xaTEVWQlFVYzFjVU1zVTBGRFlqUnhReXhMUVVWWWFFa3NSVUZCUlhCbExGTkJRVmN4V1N4RlFVZHFRaXhQUVVGUE9ESkNMRWRCVVZnc1dVRkJRV2xKTEZGQlFVRXNVMEZCVVdoMFF5eEhRVU5LTEU5QlFVdEJMRVZCUTBWS0xFOUJRVTlwUlN4UFFVRlBha1VzVDBGQlQzRjBReXhQUVVGUGNuUkRMRTlCUVU5emRFTXNaVUZCWld4MFF5eEpRVUZQUVN4SFFVUXZRMEVzUjBGSmNrSXNXVUZCUVcxMFF5eGpRVUZCTEZkQlEwa3NUMEZCVHpsMVF5eExRVUZMT0VRc1VVRkJVWGRyUWl4VlFVZDRRaXhaUVVGQloyMUNMRmxCUVVFc1UwRkJXWEp4UXl4SFFVTlNha1VzUzBGQlN6aEVMRkZCUVZGM2NVTXNXVUZCV1hKeFF5eEpRVWMzUWl4WlFVRkJkV3hDTEV0QlFVRXNVMEZCUzNWc1FpeEZRVUZyUWtNc1IwRkhia0lzU1VGQlNWUXNSVUZCVVZFc1JVRkJVVTRzV1VGRmNFSXNSMEZCU1U4c1lVRkJhVUo2Y1VNc1VVRkJVeXhEUVVNeFFpeEpRVUZKZFVRc1JVRkJVMnR1UXl4RlFVRk5ja0lzWTBGRGJrSlpMRVZCUVUxRUxGbEJRVmxWTEVkQlEyeENiRzVETEVWQlFVOTNiVU1zV1VGQldVTXNUMEZGYkVJc1EwRkRSQ3hIUVVGSlV5eEZRVUZOYWpkQ0xGRkJRVlVzUlVGQlJ5eFBRVU51UW1wTkxFVkJRVk5yYmtNc1JVRkJUU3hIUVVGSGNrSXNZMEZGZEVJc1NVRkdRU3hKUVVWVGVIUkRMRVZCUVZFc1JVRkJSMEVzUlVGQlVUWjFReXhGUVVGTmFqZENMRTlCUVZFMVZDeEpRVUZUTEVOQlF5OURMRWxCUVUweVJDeEZRVUZWYTNKRExFVkJRVTAzZFVNc1IwRkRkRUp2ZFVNc1JVRkJUVVFzV1VGQldYaHhReXhIUVVkMFFtZEZMRVZCUVU5M2JVTXNXVUZCV1VNc1MwRkpNMElzV1VGQlFWVXNaMEpCUVVFc1UwRkJaMEpvY2tNc1JVRkJaV2x5UXl4SFFWTjBRa0VzU1VGQlowSnNka01zUzBGQlMyMTBReXhYUVVGWEswSXNTMEZGYWtOQkxFVkJRV0ZETEZkQlEySnNja01zUlVGQlMzRkxMR2xDUVVGcFFpeFpRVUZoTkdkRExFVkJRV0ZETEZkQlIyaEVSQ3hGUVVGaFJTeFhRVU5pYm5KRExFVkJRVXR4U3l4cFFrRkJhVUlzV1VGQllUUm5ReXhGUVVGaFJTeFhRVWRvUkVZc1JVRkJZVWNzVjBGRFluQnlReXhGUVVGTGNVc3NhVUpCUVdsQ0xGbEJRV0UwWjBNc1JVRkJZVWNzVjBGSGFFUklMRVZCUVdGSkxGVkJRMkp5Y2tNc1JVRkJTM0ZMTEdsQ1FVRnBRaXhYUVVGWk5HZERMRVZCUVdGSkxGVkJSeTlEU2l4RlFVRmhTeXhUUVVOaWRISkRMRVZCUVV0eFN5eHBRa0ZCYVVJc1ZVRkJWelJuUXl4RlFVRmhTeXhUUVVjNVEwd3NSVUZCWVUwc1RVRkRZblp5UXl4RlFVRkxjVXNzYVVKQlFXbENMRTlCUVZFMFowTXNSVUZCWVUwc1VVRkxia1FzV1VGQlFXcHVRaXhSUVVGQkxGTkJRVkZuU0N4RlFVRmxOMnhDTEVkQlEyNUNMRk5CUVVrMmJFSXNSMEZCTUVJc1NVRkJiRUpCTEVWQlFVdHNVeXhoUVVOVU0xUXNSMEZEVHpac1FpeEZRVUZMYUVnc1VVRkJVVGRsTEV0QlQyaERMRmxCUVVFcmJFTXNVMEZCUVN4VFFVRlRhSHBDTEVkQlFWUXNWMEZEVVRkTkxFVkJRVThzUjBGRFdDeFBRVUZMTlZBc1MwRkJTemhFTEZGQlFWRnpSU3haUVVOc1FuQkpMRXRCUVVzNFJDeFJRVUZSYzBVc1YwRkJWM051UXl4WFFVRlhkSEZETEZOQlFWRXNVMEZCUTNWeFF5eEhRVU53UTBFc1NVRkJUeXhGUVVGTE4zSkRMRk5CUlZvc1JVRkJTM2xyUWl4UlFVRlJiMjVDTEVWQlFXMUNiSHBDTEVsQlEyaEROMDBzUlVGQlMzRkdMRXRCUVVzd05rSXNUVUZKV0M4dlFpeEhRVlE0UWtFc1IwRmxOME1zUlVGc1ZVRXNSME5uU0VFc1YwRlZTU3hUUVVGWloyZERMRVZCUVdNeGRFTXNSVUZCWlRKMFF5eFJRVUZCTEVsQlFVRkJMRWxCUVVGQkxFZEJRVUVzUjBGRGNrTTNka01zUzBGQlN6UjJReXhMUVVGUFFTeEZRVU5hTlhaRExFdEJRVXRyUXl4TlFVRlJRU3hGUVVOaWJFTXNTMEZCU3paMlF5eFhRVUZoUVN4SlFVc3hRaXhIUVhkQ1NTeFRRVUZaYW5KRExFVkJRV1ZyY2tNc1JVRkJiVUl4YjBNc1JVRkJaMEl5YjBNc1JVRkJiVUpETEVWQlF6ZEZReXhGUVVFd1EwTXNSVUZCYTBKRExFVkJRelZFUXl4RlFVRnBRME1zUjBGRGFrTnlkME1zUzBGQlMzTjNReXhMUVVGUE1YSkRMRVZCUTFvMVJTeExRVUZMZFhkRExGTkJRVmRVTEVWQlEyaENPWFpETEV0QlFVdDNkME1zVFVGQlVYQndReXhGUVVOaWNFZ3NTMEZCUzNsM1F5eFRRVUZYVml4RlFVTm9RaTkyUXl4TFFVRkxNSGRETEUxQlFWRldMRVZCUTJKb2QwTXNTMEZCU3pKM1F5eFhRVUZoVml4RlFVTnNRbXAzUXl4TFFVRkxOSGRETEZGQlFWVldMRVZCUTJac2QwTXNTMEZCU3paM1F5eFJRVUZWVml4RlFVTm1ibmRETEV0QlFVczRkME1zWlVGQmFVSldMRVZCUTNSQ2NIZERMRXRCUVVzcmQwTXNZVUZCWlZZc1IwRnRRalZDTEVkQlpVa3NVMEZCV1hweVF5eEZRVUZqYjNORExFVkJRM1JDUXl4RlFVRnRRa01zUlVGQk1rTkRMRkZCUVRORExFbEJRVUZFTEVsQlFVRkJMRVZCUVVFc1UwRkJkVUpGTEZkQlFXOUNMRWxCUVVGRUxFbEJRVUZCTEU5QlFVRXNSMEZET1VSdWVFTXNTMEZCU3pSRkxFdEJRVTlCTEVWQlExbzFSU3hMUVVGTE5rNHNTMEZCVDIxcVF5eEZRVU5hYUhoRExFdEJRVXRwZUVNc1UwRkJWMEVzUlVGRGFFSnFlRU1zUzBGQlMydDRReXhKUVVGTlFTeEZRVU5ZYkhoRExFdEJRVXR4ZUVNc2FVSkJRVzFDUml4SFFVdG9ReXhIUVdsQ1NTeFRRVUZaZEVVc1JVRkJaMEo1UlN4RlFVTjRRa01zUlVGQk1rTjBRaXhGUVVGdFEzVkNMRkZCUVVFc1NVRkJRVUVzU1VGQlFVRXNSMEZCUVN4SFFVTTVSWGg0UXl4TFFVRkxObk5ETEU5QlFWTkJMRVZCUTJRM2MwTXNTMEZCUzNONFF5eFpRVUZqUVN4RlFVTnVRblI0UXl4TFFVRkxkWGhETEdOQlFXZENRU3hGUVVOeVFuWjRReXhMUVVGTGFYZERMRmRCUVdGQkxFVkJRMnhDYW5kRExFdEJRVXQzZUVNc1YwRkJZVUVzUlVGRGJFSjRlRU1zUzBGQlMzbDRReXh6UWtGQmRVSXNSVUZETlVKNmVFTXNTMEZCU3pCNFF5eG5Ra0ZCYVVJc1IwRkpPVUlzUjBGVlNTeFRRVUZaUXl4RlFVRjFRa01zUlVGQmRVSkRMRkZCUVRsRExFbEJRVUZHTEVsQlFVRkJMRVZCUVVFc1VVRkJkVUlzU1VGQlFVTXNTVUZCUVVFc1JVRkJRU3hUUVVGMVFpeEpRVUZCUXl4SlFVRkJRU3hGUVVGQkxFbEJRM1JFTjNoRExFdEJRVXN5ZUVNc1ZVRkJXVUVzUlVGRGFrSXplRU1zUzBGQlN6UjRReXhWUVVGWlFTeEhRVUZaUVN4SFFVRlpMRVZCUVVrc1IwRkJTMEVzUlVGRGJFUTFlRU1zUzBGQlN6WjRReXhoUVVGbFFTeEZRVU53UWpkNFF5eExRVUZMT0hoRExGZEJRV0Z5Y2tNc1MwRkJTM055UXl4TFFVRkxMM2hETEV0QlFVczJlRU1zWVVGQlpUZDRReXhMUVVGTE5IaERMRmRCU3pkRUxFZEJVMGtzVTBGQldYUkdMRVZCUVdkQ01FWXNSVUZCTWtORExGRkJRVUVzU1VGQlFVRXNTVUZCUVVFc1JVRkJRU3hUUVVGdlFtSXNUVUZEZGtad2VFTXNTMEZCUzNOelF5eFBRVUZUUVN4RlFVTmtkSE5ETEV0QlFVdG5lVU1zWlVGQmFVSkJMRVZCUTNSQ2FIbERMRXRCUVV0cGVVTXNhVUpCUVcxQ1FTeEhRVXRvUXl4SFFWbEpMRk5CUVZsbUxFVkJRV0YyY1VJc1JVRkJaMEoxY2tJc1JVRkJLMEpETEZGQlFTOUNMRWxCUVVGRUxFbEJRVUZCTEU5QlFVRXNVVUZCSzBJc1NVRkJRVU1zU1VGQlFVRXNUMEZCUVN4SFFVTndSVzU1UXl4TFFVRkxhM2hETEVsQlFVMUJMRVZCUTFoc2VFTXNTMEZCU3pKdFFpeFBRVUZUUVN4RlFVTmtNMjFDTEV0QlFVdHJlVU1zVVVGQlZVRXNSVUZEWm14NVF5eExRVUZMYlhsRExGTkJRVmRCTERKalEzSlRlRUlzWlVGSFNTeFhRVUZaY0hORExFZEJRVm9zVFVGRFNTeGpRVUZQTEZsQlExQXNSVUZCUzBFc1VVRkJWVUVzU1VFeVNIWkNMRTlCYUVrclFpeFJRVkV6UWl4WlFVRkJjWE5ETEU5QlFVRXNWMEZEYlVNc1YwRkJNMEp3ZVVNc1MwRkJTeXRHTEZGQlFWRnpjME1zVlVGRFluSjVReXhMUVVGTE9FUXNVVUZCVlRSRkxGTkJRVk56ZEVJc1kwRkJZeXhWUVVWT0xGZEJRVE5DYURKQ0xFdEJRVXNyUml4UlFVRlJjM05ETEZkQlEyeENjbmxETEV0QlFVczRSQ3hSUVVGVk5FVXNVMEZCVTNOMFFpeGpRVUZqTEZWQlEzUkRhREpDTEV0QlFVczRSQ3hSUVVGUmRXRXNWVUZCVlhSRkxFbEJRVWtzVFVGQlR5eDVRa0ZIYkVNdldpeExRVUZMT0VRc1VVRkJWVFJGTEZOQlFWTnpkRUlzWTBGQll5eFRRVU4wUTJneVFpeExRVUZMT0VRc1VVRkJZeXhMUVVGSk9VUXNTMEZCU3l0R0xGRkJRVkZ6YzBNc1dVRkpOVU1zYzBKQlFVa3NhMEpCUVVjc1MwRkJVQ3hYUVVWSkxFZEJRVXR5ZVVNc1MwRkJTemhFTEZGQlJWWXNUMEZCU1RsRUxFdEJRVXM0UkN4dFFrRkJiVUozZFVNc2FVSkJRMDhzWVVGQk0wSjBlVU1zUzBGQlN5dEdMRkZCUVZGemMwTXNWVUZEVG5KNVF5eExRVUZMT0VRc1VVRkJVWGwxUXl4UlFVTlpMRmRCUVROQ2RubERMRXRCUVVzclJpeFJRVUZSYzNORExGVkJRMWh5ZVVNc1MwRkJTemhFTEZGQlFWRXdkVU1zWTBGRFduaDVReXhMUVVGTE9FUXNVVUZCVVRWQ0xFMUJSM1JDYkVNc1MwRkJTemhFTEZGQlFXVXNWMEZITDBJc1UwRkJVVzFXTEVkQlJVTnFXaXhMUVVGTE9FUXNWVUZGY1VJc1lVRkJNMEk1UkN4TFFVRkxLMFlzVVVGQlVYTnpReXhWUVVOaWNubERMRXRCUVVzNFJDeFJRVUZwUWl4UlFVRkpiVllzUlVGRk1VSnFXaXhMUVVGTE9FUXNVVUZCWlN4TlFVRkpiVllzUlVGSFJ5eFhRVUV6UW1wYUxFdEJRVXNyUml4UlFVRlJjM05ETEZkQlEySnllVU1zUzBGQlMzbDVReXd5UTBGVFlpeHpRa0ZCU1N4eFFrRkJUU3hMUVVGV0xGTkJRVmQ0TlVJc1IwRkRVR3BhTEV0QlFVdDNia0lzU1VGQlRYWlBMRVZCUTFocVdpeExRVUZMZVhsRExEQkRRVWRVTEhOQ1FVRkpMSGRDUVVGVExFdEJRV0lzVjBGRFNTeFBRVUZQZW5sRExFdEJRVXR6ZEVNc1VVRkJVU3h6UWtGSGVFSXNVMEZCWTNJd1FpeEhRVU5XYWxvc1MwRkJTelJDTEV0QlFVc3NaMEpCUVdsQ2NWZ3NiME5CUnk5Q0xITkNRVUZKTEhWQ1FVRlJMRXRCUVZvc1YwRkRTU3hQUVVGSmFsb3NTMEZCU3poRUxHMUNRVUZ0UW5kMVF5eHJRa0ZEYWtKMGVVTXNTMEZCU3poRUxGRkJRVkUwZFVNc1kwRkxOVUlzVTBGQllYbzFRaXhIUVVOTWFsb3NTMEZCU3poRUxHMUNRVUZ0UW5kMVF5eHRRa0ZEZUVKMGVVTXNTMEZCU3poRUxGRkJRVkUwZFVNc1UwRkJWM28xUWl4dlEwRkxhRU1zYzBKQlFVa3NkVUpCUVZFc1MwRkJXaXhYUVVOSkxFOUJRVWxxV2l4TFFVRkxPRVFzYlVKQlFXMUNkM1ZETEd0Q1FVRnZRblI1UXl4TFFVRkxPRVFzYlVKQlFXMUNOblZETEd0Q1FVTTNSRE41UXl4TFFVRkxPRVFzVVVGQlVYZGhMRk5CUjJVc1UwRkJOMEowWlN4TFFVRkxjM1JETEZGQlFWRXNhVUpCU3pOQ0xGTkJRV0Z5TUVJc1IwRkZWQ3hIUVVGSmFsb3NTMEZCU3poRUxHMUNRVUZ0UW5kMVF5eHJRa0ZCYjBKMGVVTXNTMEZCU3poRUxHMUNRVUZ0UWpaMVF5eHJRa0ZEY0VVemVVTXNTMEZCU3poRUxGRkJRVkYzWVN4VFFVRlhja1lzVFVGRU5VSXNRMEZMUVN4SlFVRkpkVThzUjBGQldTeEpRVUZPZGs4c1JVRkJZU3hQUVVGVExGRkJRMmhEYWxvc1MwRkJTelJDTEV0QlFVc3NWMEZCV1RSc1FpeHhRMEZITVVJc2MwSkJRVWtzYjBKQlFVc3NTMEZCVkN4WFFVTkpMRTFCUVRCRExGTkJRVzVEZUc1Q0xFdEJRVXR6ZEVNc1VVRkJVU3gxUWtGSmVFSXNVMEZCVlhJd1FpeEhRVU5PYWxvc1MwRkJTelJDTEV0QlFVc3NhVUpCUVd0Q2NWZ3NiME5CUjJoRExGbEJRVUZ6TVVJc1RVRkJRU3hYUVVOSkxFOUJRVThzV1VGQlRVRXNUVUZCU3l4WlFVZDBRaXhaUVVGQmNVVXNiMEpCUVVFc2MwSkJRMGsxZVVNc1MwRkJTemhFTEZGQlFWRjNTeXhwUWtGQmFVSXNXVUZCV1N4VFFVRkRhVGRDTEVkQlEzWkRMRVZCUVV0cFJDeG5Ra0ZCWjBJc1JVRkJTM3BETEdOQlFXTmlMSE5DUVVGMVFpeERRVUZGVXl4VlFVRlhMRU5CUVVWNGMwSXNUVUZCVDI5elFpeEhRVUZMVFN4bFFVRm5RaXhGUVVGTE9XcERMRkZCUVZFNGFrTXNjVUpCU1M5SUxGbEJRVUUwU1N4UFFVRkJMRmRCUTBsNmVVTXNTMEZCU3poRUxGRkJRVkZ2V2l4alFVRmpMRWxCUVVsRExFMUJRVTBzV1VGSE4wTXNSVUZvU1VFc1EwRkJLMEp4ZUVJc0syUkRSQzlDTEdWQlEwa3NWMEZCV1hKRExFZEJRVm9zVjBGRFVYQnRReXhGUVVFd1FpeERRVUZGT0dwRExHVkJRV2RDYzBNc1JVRkJaMEpyUnl4VlFVRlhMSEZDUVVNelJTeFpRVUZOZEhORExFbEJRVkVzVFVGRFZIRnpReXhYUVZkaUxFOUJabmxETEZGQlQzSkRMRmxCUVVFM1JDeE5RVUZCTEZkQlEwa3NTVUZCU1hORkxFVkJRVXNzV1VGQlRYUkZMRTFCUVVzc1YwRkRhRUkzU0N4RlFVRkpMRWxCUVVsdlRTeEZRVUZ2UWpsNVF5eExRVUZMTW5WRExGRkJRVkV6ZFVNc1MwRkJTeXRHTEZWQlNXeEVMRTlCU0VFeVowTXNSVUZCUlRWcFF5eFJRVUZWSzNWRExFVkJRVWN2ZFVNc1VVRkRaalJwUXl4RlFVRkZjR1VzVTBGQlYzVnhRaXhGUVVGSGRuRkNMRk5CUTJoQ2RHOUNMRXRCUVVzMGVVTXNjMEpCUTBWc1RTeEhRVVZtTEVWQlprRXNRMEZCZVVOeFRTd3JaRU5GZWtNc1pVRlhTU3hYUVVGWmFIUkRMRVZCUVcxRGFYUkRMRkZCUVVFc1NVRkJRVUVzU1VGQlFVRXNSMEZCUVN4SFFVRXZReXhOUVVOSkxHTkJRVThzV1VGRFVDeEZRVUZMYW5SRExGRkJRVlZCTEVkQlFWY3NTVUZCU1d0MFF5eEhRVU01UWl4RlFVRkxSQ3hUUVVGWFFTeEZRVU5vUWl4RlFVRkxXaXhYUVdsRVlpeFBRV2hGY1VNc1VVRnJRbXBETEZsQlFVRkJMRTlCUVVFc1YwRkRTU3hKUVVGSmFrTXNSVUZCVlc1M1F5eExRVUZMSzBZc1VVRkJWUzlHTEV0QlFVc3JSaXhSUVVGUk9IRkRMR0ZCUVZVMWRrTXNSVUZEYUVScGRrTXNSVUZCVld4M1F5eExRVUZMSzBZc1VVRkJWUzlHTEV0QlFVc3JSaXhSUVVGUk5uRkRMR0ZCUVZVemRrTXNSVUZGY0VScVFpeExRVUZMT0VRc1UwRkRhVUlzU1VGQmJFSTVSQ3hMUVVGTFozcERMRk5CUTBOMGNVTXNVMEZCVTNOMFFpeGpRVUZqTEUxQlEzWkNkSFJDTEZOQlFWTnpkRUlzWTBGQll5eE5RVVUzUW1neVFpeExRVUZMWjNwRExGVkJRMHhvZWtNc1MwRkJTemhFTEZGQlFWRjFZU3hWUVVGVmRFVXNTVUZCU1N4VlFVRlhMRlZCUjNSRGJ6SkNMRWRCUTBGdWQwTXNTMEZCU3pSQ0xFdEJRVXNzVlVGQlYzVjFReXhIUVVWeVFrUXNSMEZEUVd4M1F5eExRVUZMTkVJc1MwRkJTeXhWUVVGWGMzVkRMRWxCUnpkQ0xGbEJRVUZuUkN4WlFVRkJMRmRCUTBrc1NVRkJTVzV5UXl4RlFVRlJMMGdzUzBGQlMzTnZRaXhUUVVGVExFZEJRekZDTEVsQlFVdDJaMElzUlVGQlR5eE5RVUZQTEVkQlJXNUNMRWRCUVVsQkxFVkJRVTFxUlN4dFFrRkJiVUozZFVNc2FVSkJRV3RDTEVOQlF6TkRMRWRCUVVsMmNVTXNZVUZCYVVJcmNVTXNSMEZEYWtJc1QwRkJUeTl4UXl4RlFVRk5ha1VzVVVGQlVYbDFReXhSUVVGVkxFZEJSVGxDTEVkQlFVbDRjVU1zWVVGQmFVSm5ja01zUjBGRGRFSXNUMEZCVDJoeVF5eEZRVUZOZVdZc1NVRkpja0lzVDBGQlQzcG1MRVZCUVUxeGJVTXNWMEZMYWtJc1dVRkJRVWNzVFVGQlFTeFhRVVZKTEVsQlFVbHpSU3hGUVVGTExGbEJRVTEwUlN4TlFVRkxMRmRCUTJoQ04wZ3NSVUZCU1N4SlFVRkplVTBzUlVGQlowSnVla01zUzBGQlN6SjFReXhSUVVGUk0zVkRMRXRCUVVzclJpeFRRVUZWTDBZc1MwRkJTMmQ2UXl4VlFVYzNSQ3hQUVVaQmRFMHNSVUZCUlhCbExGTkJRVmQxY1VJc1JVRkJSM1p4UWl4VFFVTm9RbTlsTEVWQlFVVTFhVU1zVVVGQlZTdDFReXhGUVVGSEwzVkRMRkZCUTFJMGFVTXNSMEZGWml4RlFXaEZRU3hEUVVGeFF6aElMQ3RrUTBSeVF5eGxRVWxKTEZkQlFWbDZSQ3hGUVVGMVEyOUNMRWRCUVc1RUxFMUJRMGtzWTBGQlR5eFpRVU5RTEVWQlFVdHdReXhqUVVGblFrRXNSMEZEY2tJc1JVRkJTMmRDTEdWQlFXbENRU3hGUVVOMFFpeEZRVUZMYjBJc1pVRkJhVUpCTEVWQlEzUkNMRVZCUVV0MVJpeG5Ra0ZCYVVJc1NVRTJSRGxDTEU5QmRFVXlReXhSUVdkQ2RrTXNXVUZCUVdoM1F5eEpRVUZCTEZOQlFVbHhSU3hIUVVWQkxFbEJRVWx6YmtNc1JVRkJVWEowUXl4TFFVTlNiM3BETEVWQlFWRXZSaXhGUVVGTmNVVXNaVUZEYkVJc1NVRkJZeXhKUVVGV01FSXNSVUZCWjBJc1EwRkRhRUlzU1VGQlNTOTRReXhGUVVGTksyeERMRXRCUVV0SExGVkJRVlY0YUVNc1IwRkRja0kzUkN4RlFVRlJiRU1zUzBGQlN5dHhReXhsUVVGbFV5eFJRVUZSYm5GRExFZEJRM2hETEVkQlFVbGhMRVZCUlVFc1dVRkVRVzF5UXl4RlFVRk5aMGNzWlVGQlpXNTRReXhIUVVzM1FpeEpRVUZKYjNoRExFVkJRVlVzUTBGRFZqTnpRaXhQUVVGUkxFMUJRMUoxY2tJc1VVRkJVMjV6UXl4RlFVRlJiWE5ETEZGQlFWVnVjME1zUlVGQlVXMXpReXhSUVVGVkxFbEJSMnBFY1VJc1RVRkJUWGgwUXl4RlFVRlJiWEpETEVsQlFVdHZReXhIUVVOa2NETkNMRTFCUVVzc1UwRkJRWE16UWl4SFFVRlpMRTlCUVVGQkxFVkJRVk5ETEZWQlF6RkNkak5DTEUxQlFVc3NVMEZCUVhKUExFbEJRMWtzU1VGQlZuVnNReXhIUVVOQkwwWXNSVUZCVFhSRExHVkJRV1ZJTEZGQlFWRjJjRU1zUlVGQlMzZE5MRVZCUVUwc1NVRkJTWGM1UWl4TFFVRkxRU3hMUVVGTFNTeE5RVUZSTEUxQlJXeEZORUlzUlVGQlRXZEhMR1ZCUVdWNGJFTXNUVUZGZUVJMmJFTXNUMEZCVFN4VFFVRkJiblZDTEVkQlEwZzRia0lzUlVGQlRYTkhMRmxCUVZsd2RVSXNSVUZCVDNobUxFOUJTM0pETEZsQlFVRnpkRU1zWlVGQlFTeFRRVUZsUnl4SFFVVllMRWxCUTBrc1NVRkJTVWtzUlVGQmRVTXNRMEZEZGtNdlNpeGxRVUZuUWpkd1F5eExRVUZMYlhORExHVkJRM0pDZUVNc1ZVRkJWeXhEUVVOUWVHdENMRXRCUVUxeGRVSXNSVUZCVTJwblFpeE5RVU5tYzJkQ0xGTkJRVlVzU1VGQlNVTXNSMEZCTUVKT0xFVkJRVk5QTEZOQlFWTndReXhWUVVGWE5rSXNSVUZCVTA4c1UwRkJVMjVETEZOQlFWVTBRaXhGUVVGVFR5eFRRVUZUYkVNc1owSkJSemRJTEUxQlFVOTBjMElzUjBGRlRDeFpRVVJCUkN4UlFVRlJiV3RDTEVsQlFVa3NkMGhCU1doQ2VuQkRMRXRCUVV0M2MwTXNaMEpCUVdkQ2VITkRMRXRCUVVzcmNFTXNZMEZCWTNwQ0xIRkNRVUZ6UW5OTUxFbEJSMnhGTEZsQlFVRkVMRmxCUVVFc1UwRkJXWEIxUWl4RlFVRXdRbmhtTEVkQlEyeERMRWxCUVVscGRVTXNSVUZCYjBNc1EwRkJSVzVMTEdWQlFXZENOM0JETEV0QlFVdHRjME1zWlVGQlowSjRReXhWUVVGWExFTkJRVVY0YzBJc1RVRkJUMjlKTEVWQlFVOHdkVUlzVTBGQlZXeDFReXhGUVVGUmIzTkRMRmRCUXpWSWJubERMRXRCUVV0M2MwTXNaMEpCUVdkQ2VITkRMRXRCUVVzcmNFTXNZMEZCWTNoQ0xESkNRVUUwUW5sTUxFbEJSVFZGTEVWQmRFVkJMRU5CUVRKRGVFWXNLMlJEUkRORExHVkJVVWtzVjBGQldYcHZReXhIUVVGYUxFMUJRMGtzWTBGQlR5eFpRVU5RTEVWQlFVdEJMRkZCUVZWQkxFVkJRMllzUlVGQlMyMTFReXhQUVVGVExHdENRVUZYTEVWQlFVdHVkVU1zVVVGQlVYVnRReXhSUVVOMFF5eEZRVUZMWjBZc1dVRkJZeXgxUWtGQlowSXNSVUZCUzNaeVF5eFJRVUZSZFcxRExGVkJiMFY0UkN4UFFXaEdNa01zVVVGbGRrTXNXVUZCUVRoR0xFOUJRVUVzYzBKQlExRndlVU1zUzBGQlN6aEVMRk5CUTB3NVJDeExRVUZMT0VRc1VVRkJVVEpvUWl4VFFWVnFRbnBzUWl4TFFVRkxPRVFzVVVGQlZUUkZMRk5CUVZOemRFSXNZMEZCWXl4UFFVTjBRMmd5UWl4TFFVRkxPRVFzVVVGQlVUSndReXhIUVVGTGVuUkRMRXRCUVV0emVFTXNXVUZEZGtKMGVFTXNTMEZCU3paMFF5eFRRVUZUTEdsQ1FVVmtMRWxCUVVselJ5eEZRVUZSZW5KRExGTkJRVk56ZEVJc1kwRkJZeXhQUVVOdVEyMWxMRVZCUVUxNmRVTXNZVUZCWVN4alFVRmxMRzFDUVVWc1F6RkdMRXRCUVVzNFJDeFJRVUZSZDNGRExGbEJRVmsyUml4SFFVZDZRaXhKUVVGSlF5eEZRVUZYTVhKRExGTkJRVk56ZEVJc1kwRkJZeXhOUVVOMFEyOWxMRVZCUVZNelJ5eEhRVUZMZW5SRExFdEJRVXRyTUVNc1QwRkRia0pGTEVWQlFWTXZNVUlzVlVGQlZYUkZMRWxCUVVrc1lVRkJZeXgxUWtGSGNrTXNTVUZCU3l4SlFVRkpOVm9zUlVGQlVTeEZRVUZIUVN4SFFVRlRTQ3hMUVVGTEswWXNVVUZCVVdselF5eGxRVUZsUml4WlFVRmpNM2hETEVkQlFWTXNSVUZCUjBFc1NVRkJVeXhEUVVWNFJpeEpRVUZKWnpsQ0xFVkJRVXQ2TUVJc1UwRkJVM04wUWl4alFVRmpMRTFCUTJoRGJVZ3NSVUZCUnpsbExGVkJRVlYwUlN4SlFVRkpMR0ZCUjJwQ0xFbEJRVWt5Y1VJc1JVRkJUMmc0UWl4VFFVRlRjM1JDTEdOQlFXTXNTMEZEYkVNd1R5eEZRVUZMY20xQ0xGVkJRVlYwUlN4SlFVRkpMR0ZCUTI1Q01uRkNMRVZCUVVzeVVDeExRVUZQTEVsQlExb3pVQ3hGUVVGTGNtMUNMRlZCUVZWMFJTeEpRVUZKTEdkQ1FVTnVRakp4UWl4RlFVRkxlVW9zVlVGQldTeFZRVUZIYUhWRExFZEJSWEJDWnpsQ0xFVkJRVWR0VWl4WlFVRlpOVW9zUjBGRFpqQlFMRVZCUVZNNVJpeFpRVUZaYmxJc1IwRkhja0oxU0N4RlFVRkxjREpDTEdsQ1FVRnBRaXhUUVVGVExGTkJRVU5wTjBJc1IwRkZOVUlzUjBGRVFVRXNSVUZCUlhSclFpeHBRa0ZEUlhOclFpeEZRVUZGZURWQ0xHdENRVUZyUW5STUxGbEJRV0VzUTBGRGFrTXNTVUZCU1hSRkxFVkJRVkZ2Y0VNc1JVRkJSWGcxUWl4UFFVRlBNazBzWVVGQllTeG5Ra0ZGT1VJc1JVRkJTek5YTEZGQlFWRnJjME1zYTBKQlEySXNSVUZCUzJ4elF5eFJRVUZSYTNORExHbENRVUZwUWpOclFpeFRRVUZUYm5SQ0xGRkJUWFpFWnpCRExFVkJRVTAzUml4WlFVRlpPRVlzU1VGSGRFSXNXVUZCUVVVc1RVRkJRU3hYUVVObGREQkRMRXRCUVVzNFJDeFJRVUZSTmtnc1kwRkJZeXhKUVVGTk0wd3NTMEZCUzJzd1F5eFJRVWsxUTBzc2JVSkJSV0lzUlVGb1JrRXNRMEZCTWtNdlJpd3JaRU5ETTBNc1pVRjFRa2tzVjBGQldYcHZReXhIUVVGYUxFMUJRMGtzWTBGQlR5eFpRVU5RTEVWQlFVdDVkVU1zV1VGQlkzcDFReXhGUVVGUmVYVkRMRmxCUXpOQ0xFVkJRVXRETEZkQlFXRXhkVU1zUlVGQlVUQjFReXhYUVVVeFFpeEZRVUZMUXl4UFFVRlRMRXRCUTJRc1JVRkJTME1zVTBGQlZ5eExRVU5vUWl4RlFVRkxOV3RETEU5QlFWTXNTMEZIWkN4RlFVRkxObXRETEZsQlFXTXNSVUZEYmtJc1JVRkJTelZFTEZOQlFWY3NTMEZEYUVJc1JVRkJTelpFTEdGQlFXVXNTMEZEY0VJc1JVRkJTelZETEdsQ1FVRnRRaXhQUVN0RWFFTXNUMEZ1Unl0RExGRkJORU16UXl4WlFVRkJOa01zVjBGQlFTeFRRVUZYTDA0c1JVRkJjME5uVHl4SlFVZG9RaXhKUVVacVFtaFBMRVZCUVZFc1IwRkZWbWxQTEdkQ1FVOUdhREZETEV0QlFVczBNRU1zV1VGQll6VXdReXhMUVVGTE5qQkRMR0ZCUVdFdlF5eGhRVU55UTNoelFpeFJRVUZSYld0Q0xFbEJRVWtzZVVOQlFUQkRlbkJETEV0QlFVczBNRU1zV1VGQll5eEhRVU42UlRVd1F5eExRVUZMTkRCRExHTkJRMHcxTUVNc1MwRkJTMmw1UXl4cFFrRkJhVUpxZVVNc1MwRkJTelF3UXl4bFFVdDJReXhaUVVGQlN5eFJRVUZCTEZOQlFWRm9jMElzUjBGRFNtcHdRaXhMUVVGTEsxQXNUMEZCVTJ0YUxFVkJRMlJxY0VJc1MwRkJTekl3UXl4VFFVRlRUU3hSUVVGUmFITkNMRWxCUnpGQ0xGbEJRVUZwYzBJc1ZVRkJRU3hYUVVOSmJERkRMRXRCUVVzeU1FTXNVMEZCVTA4c1ZVRkJWV3d4UXl4TFFVRkxLMUFzVTBGSGFrTXNXVUZCUVRKMlFpeFBRVUZCTEhOQ1FVTkpNUzlDTEV0QlFVc3dNRU1zVDBGQlV5eGxRVUZwUWpFd1F5eExRVUZMZHpCRExGbEJRVmt2Unl4SFFVZG9SQ3hKUVVGSk1FZ3NSVUZCWVhwelF5eFRRVUZUYzNSQ0xHTkJRV01zVDBGRGVFTnRaaXhGUVVGWE1VZ3NSMEZCUzNwMFF5eExRVUZMTURCRExFOUJSWEpDVXl4RlFVRlhPVEpDTEZWQlFWVjBSU3hKUVVGSkxFMUJRVThzWVVGRmFFTXZXaXhMUVVGTGQzQkNMRXRCUVVzeWNrSXNSVUZCV1c0eFF5eExRVUZMZHpCRExHRkJSek5DTEVsQlEwbDZkVU1zUlVGQlZTeERRVU5XZWtjc1MwRkdUMjlLTEZOQlFWTnRORUlzWlVGQlpUZG5ReXhMUVVGTE1EQkRMRkZCUjNCRFZTeFhRVUZaTEUxQlExcERMRlZCUVZjc1IwRkRXRU1zYVVKQlFXbENMRWRCUjNKQ2RERkRMRXRCUVVzeU1FTXNVMEZCVnl4SlFVRkpXU3h6UWtGQmNVSXNVMEZCUTNoUExFVkJRVk5uVHl4SFFVRlhMRk5CUVV0RUxGZEJRVmN2VGl4RlFVRlRaMDhzUzBGQlUyaDJReXhIUVVWb1J5eEpRVUZKZVhaRExFVkJRVTk0TVVNc1MwRkJTM2N3UXl4WlFVRlplSGhDTEdsQ1FVRnBRaXhOUVVWNlEycFVMRVZCUkZWNWJFTXNSVUZCUzBFc1JVRkJTM3BvUXl4UFFVRlRMRWRCUjJwREwxUXNTMEZCUzJreFF5eFJRVUZSYkd4RExFbEJSWEpDTEVWQmJrZEJMRU5CUVN0RGVTdENMQ3RrUTBRdlF5eGxRVXRKTEcxQ1FVTkpMR05CUVU4c1dVRkRVQ3hGUVVGTGFtSXNUVUZCVVN4TFFXdENja0lzVDBGNlFubEVMRkZCWVhKRUxGbEJRVUY0V2l4SlFVRkJMRk5CUVVsdmNVSXNSMEZEUzI1clF5eExRVUZMZVRGRExGTkJRVk4wVWl4RlFVRkxjQ3RDTEZGQlFWRm5jVU1zVjBGRE5VSXZka01zUzBGQlMzVjZRaXhOUVVGTmRHVXNTMEZCUzJ0MlFpeEpRVTk0UWl4WlFVRkJjMUlzVTBGQlFTeFRRVUZUTVVZc1IwRkRUQ3hQUVVGUEwzWkRMRXRCUVV0MWVrSXNUVUZCVFM5a0xFMUJRVXNzVTBGQlF6SjFRaXhIUVVGVExFOUJRVUZCTEVWQlFVdHdLMElzVVVGQlVXZHhReXhYUVVGaFFTeE5RVVZ1UlN4RlFYcENRU3hEUVVGNVJIWkNMQ3RrUTBSNlJDeGxRVU5KTEcxQ1FVTkpMR05CUVU4c1dVRkRVQ3hGUVVGTE5FUXNWMEZYWWl4UFFXUjFReXhSUVUxdVF5eFpRVUZCUVN4UFFVRkJMRmRCUTBsd2VVTXNTMEZCU3poRUxGRkJRVlUwUlN4VFFVRlRjM1JDTEdOQlFXTXNTMEZEZEVOb01rSXNTMEZCU3poRUxGRkJRVkYxWVN4VlFVRlZkRVVzU1VGQlNTeExRVUZOTEdsQ1FVRnJRaXhsUVVkMlJDeFpRVUZCZHpCQ0xFMUJRVUVzVjBGRFNTeFBRVUZQTEZsQlFVMUJMRTFCUVVzc1dVRkZNVUlzUlVGa1FTeERRVUYxUTBNc0syUkRRWFpETEdWQlJVa3NiVUpCUTBrc1kwRkJUeXhaUVVOUUxFVkJRVXMwUkN4WFFYVkZZaXhQUVRORmQwTXNVVUZQY0VNc1dVRkJRVUVzVDBGQlFTeFhRVVZKY0hsRExFdEJRVXM0UkN4UlFVRlZORVVzVTBGQlUzTjBRaXhqUVVGakxFOUJRM1JEYURKQ0xFdEJRVXM0UkN4UlFVRlJkV0VzVlVGQlZYUkZMRWxCUVVrc1RVRkJUeXh6UWtGSGRFTXNXVUZCUVRJM1FpeFZRVUZCTEZOQlFWVnFTU3hGUVVGWmRIRkNMRVZCUVdOM2VVSXNSVUZCWTNneVFpeEhRVU01UXl4SlFVRkplVEpDTEVWQlFVMDFNVU1zUzBGQlN6WXhReXhWUVVGVmNFa3NSVUZCU1hSeFFpeEZRVUZOZDNsQ0xFZEJSMjVETEU5QlJrRkRMRVZCUVVsMGJrTXNhVUpCUVdsQ0xGRkJRVk0yVVN4SFFVTTVRbTVtTEV0QlFVczRSQ3hSUVVGUmQzRkRMRmxCUVZselNDeEhRVU5zUWpVeFF5eE5RVTFZTEZsQlFVRTRNVU1zWjBKQlFVRXNVMEZCWjBJek1rSXNSMEZMV2l4UFFVRlBibVlzUzBGQlN6QXhReXhWUVVGVkxHVkJRV2RDTEZOQlFWVXNVVUZCVTNZeVFpeEpRVTAzUkN4WlFVRkJOREpDTEcxQ1FVRkJMRk5CUVcxQ05USkNMRWRCUzJZc1QwRkJUMjVtTEV0QlFVc3dNVU1zVlVGQlZTeFpRVUZoTEZWQlFWY3NZMEZCWlhZeVFpeEpRVWRxUlN4WlFVRkJOakpDTEhOQ1FVRkJMRmRCVFVrc1NVRkJTVW9zUlVGQlRUVXhReXhMUVVGTE5qRkRMRlZCUVZVc1kwRkJaU3hWUVVGWExGRkJTVzVFTEU5QlNFRkVMRVZCUVVsc2QwTXNZVUZCWVN4cFFrRkJhMElzVTBGRGJrTnJkME1zUlVGQlNXeDNReXhoUVVGaExHbENRVUZyUWl3d1FrRkJiVUl4Uml4TFFVRkxiWE5ETEdsQ1FVTXpSRzV6UXl4TFFVRkxPRVFzVVVGQlVXMTVRaXhQUVVGUE1tWXNSMEZEWWpVeFF5eE5RVWRZTEZsQlFVRTJNVU1zVlVGQlFTeFRRVUZWY0Vrc1JVRkJXWFJ4UWl4RlFVRmpkM2xDTEVkQlEyaERMRWxCUVVsRExFVkJRVTFzZEVNc1UwRkJVM04wUWl4alFVRmpMRlZCVFdwRExFOUJURUUwWml4RlFVRkplbmxDTEV0QlFVOHNVMEZEV0hsNVFpeEZRVUZKZGpOQ0xGVkJRVlYwUlN4SlFVRkpMRTFCUVU4c1UwRkJWU3h6UWtGQlpXOUtMRWRCUVZFc2RVSkJRekZFZVhsQ0xFVkJRVWx1U1N4SFFVRkxMRlZCUVVkQkxFVkJRVVVzV1VGQlNYcDBReXhMUVVGTGJYTkRMR2RDUVVWMlFtNXpReXhMUVVGTGFUSkRMRmRCUVZkTUxFVkJRVXRFTEVkQlEyUkRMRWRCUjFnc1dVRkJRVTBzVVVGQlFTeFRRVUZSUXl4SFFVTktMRWxCUVVsU0xFVkJRVTlxZEVNc1UwRkJVM04wUWl4alFVRmpMRXRCUld4RExFOUJSRUV5Wml4RlFVRkxkRE5DTEZWQlFWVjBSU3hKUVVGSkxFdEJRVTBzWVVGQlRXODRRaXhKUVVONFFsSXNSMEZIV0N4WlFVRkJUU3hYUVVGQkxGTkJRVmN4YlVJc1JVRkJiVUkwYlVJc1IwRkRNVUlzU1VGQlNWSXNSVUZCVHpNeFF5eExRVUZMYXpKRExGRkJRVkZETEVkQlEzaENOVzFDTEVWQlFVc3dSeXhQUVVGUE1HWXNTVUZGY0VJc1JVRXpSVUVzUTBGQmQwTnVTQ3dyWkVORGVFTXNaVUZEU1N4WFFVRlpja01zUlVGQmQwSnBTeXhSUVVGQkxFbEJRVUZCTEVsQlFVRkJMRVZCUVVFc1VVRkJjRU1zVjBGRFVYSjNReXhGUVVFd1FpeERRVUZGT0dwRExHVkJRV2RDYzBNc1JVRkJaMEpyUnl4VlFVRlhLMFFzV1VGRE0wVXNXVUZCVFhKM1F5eEpRVUZSTEUxQlExUnhjME1zVjBGWFlpeFBRV1l3UXl4UlFVOTBReXhaUVVGQk4wUXNUVUZCUVN4WFFVTkpMRWxCUVVselJTeEZRVUZMTEZsQlFVMTBSU3hOUVVGTExGZEJRMmhDTjBnc1JVRkJTU3hKUVVGSk1sQXNSVUZCY1VKeU1rTXNTMEZCU3pKMVF5eFJRVUZSTTNWRExFdEJRVXNyUml4VlFVbHVSQ3hQUVVoQk1tZERMRVZCUVVVMWFVTXNVVUZCVlN0MVF5eEZRVUZITDNWRExGRkJRMlkwYVVNc1JVRkJSWEJsTEZOQlFWZDFjVUlzUlVGQlIzWnhRaXhUUVVOb1FtOWxMRVZCUVVWclRTeHpRa0ZEUzJ4TkxFZEJSV1lzUlVGbVFTeERRVUV3UTNGTkxDdGtRMEV4UXl4bFFVOUpMRmRCUVZsb2RFTXNSMEZCV2l4TlFVTkpMR05CUVU4c1dVRkRVQ3hGUVVGTFFTeFJRVUZWUVN4RlFVTm1MRVZCUVV0eGMwTXNWMEZyUW1Jc1QwRTFRalpETEZGQllYcERMRmxCUVVGQkxFOUJRVUVzVjBGRFNTeEpRVUZKYTBVc1JVRkJUVFYwUXl4VFFVRlRjM1JDTEdOQlFXTXNWVUZEYWtOelowSXNSVUZCU1hBd1F5eE5RVUZSYkVNc1MwRkJTeXRHTEZGQlFWRTNSQ3hOUVVONlFtOHdReXhGUVVGSk1VY3NTMEZCVHpWMlF5eExRVUZMSzBZc1VVRkJVVFp3UXl4TFFVTndRalYyUXl4TFFVRkxLMFlzVVVGQlVUaHdReXhoUVVOaWVVY3NSVUZCU1Rkc1FpeFZRVUZYTEVkQlJXNUNlbmRDTEV0QlFVczRSQ3hSUVVGVmQzbERMRWRCUjI1Q0xGbEJRVUV2U0N4TlFVRkJMRmRCUTBrc1NVRkJTVUVzUlVGQlVTeFpRVUZOUVN4TlFVRkxMRmRCUlhaQ0xFOUJSRUZCTEVWQlFVMU9MRkZCUVZGcWRVTXNTMEZCU3l0R0xGRkJRVkUyY0VNc1RVRkRjRUp5UWl4SFFVVm1MRVZCTlVKQkxFTkJRVFpEUXl3clpFTkROME1zWlVGSFNTeFhRVUZaZW05RExFZEJRVm9zVFVGRFNTeFpRVUZOTEVOQlFVVTRha01zWlVGQlowSTVha01zUlVGQlVUaHFReXhsUVVGblFuZEpMRlZCUVZjc1dVRkJWeXhaUVVOMFJTeEZRVUZMYTBVc1kwRkJaMEo0ZDBNc1JVRkJVWGQzUXl4alFVTTNRaXhGUVVGTGJrVXNWMEZ4UW1Jc1QwRXpRblZETEZGQlUyNURMRmxCUVVGQkxFOUJRVUVzYzBKQlEwa3NXVUZCVFVFc1QwRkJUU3hYUVVOYWNIbERMRXRCUVV0MU1rTXNZMEZCWTI1NFF5eFRRVUZSTEZOQlFVTnJlRU1zUjBGQlVTeFRRVUZMY21kQ0xFOUJRVThzU1VGQlNYVm5RaXhIUVVGM1FrWXNUMEZETlVWME1rTXNTMEZCU3paMFF5eFRRVUZUTEN0Q1FVZHNRaXhaUVVGQlZTeE5RVUZCTEZkQlEwa3NTVUZCU1hORkxFVkJRVXNzV1VGQlRYUkZMRTFCUVVzc1YwRkRhRUpyU1N4RlFVRXlRbm95UXl4TFFVRkxNblZETEZGQlFWRXpkVU1zUzBGQlN5dEdMRk5CUTJwRU1IZERMRVZCUVZOR0xHTkJRV2RDZGpKRExFdEJRVXN5ZFVNc1VVRkJVVE4xUXl4TFFVRkxkVEpETEdWQlJUTkRMRWxCUVVrM1VDeEZRVUZKTEVsQlFVbG5VU3hGUVVGclFrUXNSMEZMT1VJc1QwRktRUzlRTEVWQlFVVTFhVU1zVVVGQlZTdDFReXhGUVVGSEwzVkRMRkZCUTJZMGFVTXNSVUZCUlhCbExGTkJRVmQxY1VJc1JVRkJSM1p4UWl4VFFVTm9RblJ2UWl4TFFVRkxOSGxETEhOQ1FVVkZiRTBzUjBGRlppeEZRVE5DUVN4RFFVRjFRM0ZOTEN0a1EwUjJReXhsUVVsSkxGZEJRVmxvZEVNc1IwRkJXaXhOUVVOSkxGbEJRVTFCTEVsQlFWRXNXVUZEWkN4RlFVRkxRU3hSUVVGVlFTeEZRVU5tTEVWQlFVdHhjME1zVjBFeVFtSXNUMEZzUTNWRExGRkJWVzVETEZsQlFVRkJMRTlCUVVFc1YwRkhTU3hIUVVaQkxGbEJRVTFCTEU5QlFVMHNWMEZGVW5CNVF5eExRVUZMSzBZc1VVRkJVVFIzUXl4TFFVRk5MRU5CUTI1Q0xFbEJRVWxvUWl4RlFVRlBhblJETEZOQlFWTnpkRUlzWTBGQll5eExRVU5zUXpKbUxFVkJRVXQwTTBJc1ZVRkJWWFJGTEVsQlFVa3NTMEZCVFN4aFFVRk5MMW9zUzBGQlN5dEdMRkZCUVZFMGQwTXNUMEZETlVNek1rTXNTMEZCU3poRUxGRkJRVkYzY1VNc1dVRkJXWEZJTEVkQlIzcENNekZETEV0QlFVc3JSaXhSUVVGUk5uZERMRk5CUTJJMU1rTXNTMEZCU3pZeVF5eHRRa0ZIWWl4WlFVRkJRU3huUWtGQlFTeHpRa0ZEU1RjeVF5eExRVUZMT0VRc1VVRkJVWGRMTEdsQ1FVRnBRaXhUUVVGVExGTkJRVU5wTjBJc1IwRkJUU3hUUVVGTGVHcERMRkZCUVZFMmQwTXNVVUZCVVhKT0xFOUJSM1pGTEZsQlFVRm5SaXhOUVVGQkxGZEJRMGtzU1VGQlNYTkZMRVZCUVVzc1dVRkJUWFJGTEUxQlFVc3NWMEZEYUVKeFNDeEZRVUZOTEVsQlFVbHJRaXhGUVVGclFqa3lReXhMUVVGTE1uVkRMRkZCUVZFemRVTXNTMEZCU3l0R0xGVkJSMnhFTEU5QlJrRTJka01zUlVGQlNYUjBRaXhUUVVGWGRYRkNMRVZCUVVkMmNVSXNVMEZGV0hOMFFpeEhRVVZtTEVWQmJFTkJMRU5CUVhWRE4wTXNLMlJEUjNaRExHVkJZVWtzVjBGQldXaDBReXhIUVVGYUxFMUJRMGtzV1VGQlRVRXNTVUZCVVN4WlFVTmtMRVZCUVV0QkxGRkJRVlZCTEVWQlEyWXNSVUZCUzNGelF5eFhRWFZFWWl4UFFYWkZlVU1zVVVGMVFuSkRMRmxCUVVFeVJTeGxRVUZCTEZOQlFXVm9ReXhGUVVGdFEzaE1MRWRCUlRsRGFtdENMRkZCUVZGdGEwSXNTVUZCU1N4bFFVRm5Rbk5NTEVWQlFVOXBReXhMUVVGTGRHNURMRXRCUVV0MWJrTXNhMEpCUlRkRExFbEJRMGxETEVWQlJFMXVReXhGUVVGUGFVTXNTMEZCUzNSdVF5eExRVUZMZFc1RExHbENRVU5JUlN4WlFVRlpNMmhETEUxQlFVc3NVMEZCUXpSb1F5eEhRVUZWTEU5QlFVRkJMRVZCUVUxd1NDeFRRVU4wUkd0SUxFbEJSMEZzTTBNc1MwRkJTM0V6UXl4WFFVRlhOM1pDTEVsQlFVMHdka0lzUlVGQll6RjJRaXhKUVVOd1EzaHVRaXhMUVVGTGNUTkRMRmRCUVZjMVJTeFZRVVZ3UW5ORExFVkJRVTkxUXl4alFVRmplRzVDTEZGQlIzcENMRmxCUVVGemFVSXNUMEZCUVN4elFrRkZTWEI1UXl4TFFVRkxjVE5ETEZkQlFXRXNTVUZCU1doQ0xFZEJRWEZDY2pKRExFdEJRVXNyUml4UlFVRlJPR3BETEdkQ1FVTjRSRGR3UXl4TFFVRkxjVE5ETEZkQlEwRjRTaXhUUVVGVE4zUkRMRXRCUVVzclJpeFJRVUZSZDNoRExGVkJRM1JDYmtzc1RVRkJUU3hEUVVGRExFTkJRVVV2Y2tNc1NVRkJTeXhMUVVGTllTeE5RVUZQYkVNc1MwRkJTeXRHTEZGQlFWRjVlRU1zVjBGRGVrTXNRMEZCUlc0eVF5eEpRVUZMTEdOQlFXVmhMRTFCUVU5c1F5eExRVUZMSzBZc1VVRkJVVEI0UXl4aFFVTXhReXhEUVVGRmNESkRMRWxCUVVzc1owSkJRV2xDWVN4TlFVRlBiRU1zUzBGQlN5dEdMRkZCUVZFd2NVTXNXVUZGYUVSNmQwTXNTMEZCU3pBelF5eFhRVUZoTEVsQlFVbGFMRWRCUVd0Q0xFTkJRM0JEZWtVc1ZVRkJWeXhUUVVOWWVFa3NaVUZCWjBJM2NFTXNTMEZCU3l0R0xGRkJRVkU0YWtNc1pVRkROMEk0VFN4TFFVRk5MRk5CUTA1RExGRkJRVk1zVTBGQlEzSk9MRWRCUVUwc1UwRkJTM2hxUXl4UlFVRlJOSGhETEZOQlFWTXNSVUZCVFhCUExFMUJTV2hFTEVsQlFVbDNSaXhGUVVGVmNtMURMRk5CUVZOemRFSXNZMEZCWXl4UFFVTnlReXRaTEVWQlFWRXhkMElzVlVGQlZYUkZMRWxCUVVrc1kwRkJaU3hyUWtGRGNrTm5NVUlzUlVGQlVWUXNXVUZCV1hSMVF5eExRVUZMY1RORExGZEJRVmQyZWtNc1UwRkRjRU5wY2tNc1JVRkJVVlFzV1VGQldYUjFReXhMUVVGTE1ETkRMRmRCUVZjMWVrTXNVMEZGY0VNNVJDeExRVUZMT0VRc1VVRkJWV2x5UXl4SFFVZHVRaXhaUVVGQlVpeE5RVUZCTEZkQlJVa3NTVUZCU1hORkxFVkJRVXNzV1VGQlRYUkZMRTFCUVVzc1YwRkRhRUkzU0N4RlFVRkpMRWxCUVVsclVpeEZRVUZ2UWpVelF5eExRVUZMTW5WRExGRkJRVkV6ZFVNc1MwRkJTeXRHTEZWQlIyeEVMRTlCUmtFeVowTXNSVUZCUlhCbExGTkJRVmQxY1VJc1JVRkJSM1p4UWl4VFFVVlViMlVzUjBGRlppeEZRWFpGUVN4RFFVRjVRM0ZOTEN0a1EwRjZReXhsUVdWSkxGZEJRVmxvZEVNc1IwRkJXaXhOUVVOSkxHTkJRVThzV1VGRFVDeEZRVUZMUVN4UlFVRlZRU3hGUVVObUxFVkJRVXM0ZUVNc2EwSkJRVzlDTEVWQlFVczVlRU1zVVVGQlVYVnlReXhaUVVOMFF5eEZRVUZMZDBjc1VVRkJWU3hWUVVGSExFVkJRVXRFTEd0Q1FVRnBRaXhsUVVGUExFVkJRVXM1ZUVNc1VVRkJVV2R4UXl4VlFVTTFSQ3hGUVVGTFowa3NZVUZCWlN4VlFVRkhMRVZCUVV0R0xHdENRVUZwUWl4blFrRkJVU3hGUVVGTE9YaERMRkZCUVZGbmNVTXNWVUZEYkVVc1JVRkJTM1ZDTEZsQlFXTXNWVUZCUnl4RlFVRkxkVWNzYTBKQlFXbENMR2RDUVVGUkxFVkJRVXM1ZUVNc1VVRkJVV2R4UXl4VlFVTnFSU3hGUVVGTGJFUXNUMEZCVXl4VlFVRkhMRVZCUVV0blRDeHJRa0ZCYVVJc1kwRkJUU3hGUVVGTE9YaERMRkZCUVZGbmNVTXNWVUZETVVRc1JVRkJTM0ZETEZOQlEwd3NSVUZCU3pSRkxFdEJRVThzUlVGQlMyZENMR0ZCUTJwQ0xFVkJRVXRxUWl4bFFVRnBRaXhUUVVFMFFtaERMRVZCUVhkRGVFd3NSMEZCWVdwclFpeFJRVUZSYld0Q0xGTkJkMFoyU0N4UFFXcElLME1zVVVFMlFqTkRMRmxCUVVFeVNTeFBRVUZCTEhOQ1FVZFJOa1lzUlVGQlVYWjJReXhUUVVGVGJUUkNMR1ZCUVdVM1owTXNTMEZCU3pnelF5eFRRVVY2UXl4SFFVRkpSeXhGUVVOQmFqUkRMRXRCUVVzNFJDeFJRVUZWYlRCRExFVkJRMlpxTkVNc1MwRkJTM016UXl4alFVRm5RbnBtTEVkQlFVMDVVU3h2UWtGQmIwSnJlRUlzVDBGRk9VTXNRMEZEUkdvMFF5eExRVUZMT0VRc1VVRkJWVFJGTEZOQlFWTnpkRUlzWTBGQll5eFBRVU4wUTJneVFpeExRVUZMT0VRc1VVRkJVVEp3UXl4SFFVRkxlblJETEV0QlFVczRNME1zVVVGRGRrSTVNME1zUzBGQlN6aEVMRkZCUVZGMVlTeFZRVUZWZEVVc1NVRkJTU3hUUVVVelFpOWFMRXRCUVVzNFJDeFJRVUZSY3pOQ0xGVkJRVmtzTWxGQlIzRkRjRGRDTEV0QlFVc3JNME1zWVVGQldTeHRWa0ZKY0VNdk0wTXNTMEZCUzNONFF5eFpRVUZYTEcxaVFWVXpSQ3hKUVVGSk5FY3NSVUZCYTBKNGRrTXNVMEZCVTIwMFFpeGxRVUZsTjJkRExFdEJRVXMyTTBNc2JVSkJReTlEU3l4SFFVTkJRU3hGUVVGblFqVktMRmxCUVZsMGRVTXNTMEZCU3poRUxGTkJSM0pET1VRc1MwRkJTM016UXl4alFVRm5RaXhKUVVGSmVtWXNSMEZCVFRjelFpeExRVUZMT0VRc1UwRkZjRU01UkN4TFFVRkxPRVFzVVVGQlVYZExMR2xDUVVGcFFpeHJRa0ZCYTBJc1UwRkJRMmszUWl4SFFVTTNReXhGUVVGTGVVNHNTMEZCUzIxQ0xGbEJRMVlzUlVGQlMyNUNMRXRCUVV0dlFpeHBRa0ZCYVVKNFJDeFpRVUZqTEVWQlEzcERMRVZCUVV0dlF5eExRVUZMY1VJc1kwRkJZeXhSUVV0d1F5eFpRVUZCZEc5Q0xFdEJRVUVzVjBGRFNTOTJRaXhMUVVGTGN6TkRMR05CUVdOMmJrSXNVVUZIZGtJc1dVRkJRV2x2UWl4WFFVRkJMRmRCU1Vrc1NVRkJTUzlJTEVWQlFXRXNTVUZCU1hGSkxFZEJRWE5DTEdGQlEzWkRMRU5CUTBsMFNDeFRRVUZWTEVkQlExWXJReXhqUVVGVk9YbERMRWxCUldRc1JVRkRRV3BDTEV0QlFVc3JSaXhSUVVGUmQzbERMRTlCUjJKRExFVkJRVXNzU1VGQlNVTXNSMEZCYlVKNk5FTXNTMEZCU3paelF5eFBRVUZSTjNORExFdEJRVXR6ZUVNc1dVRkJZWFI0UXl4TFFVRkxLMFlzVVVGQlVUSjVReXhUUVVGVmVra3NSMEZCV1N4SFFVVTVSaXRITEVWQlFVOHNTVUZCU1RKQ0xFZEJRVmxJTEVkQmFVSXpRaXhQUVdoQ1FYaENMRVZCUVVzMFFpeHZRa0ZOVERWQ0xFVkJRVXQ2ZWtJc1kwRkJZM1pxUWl4TFFVRkxLM0JETEdOQlFXTnVReXhYUVVOMFEyOVFMRVZCUVV0NmVrSXNZMEZCWTNacVFpeExRVUZMSzNCRExHTkJRV00xUWl4bFFVTjBRelpQTEVWQlFVdDZla0lzWTBGQlkzWnFRaXhMUVVGTEszQkRMR05CUVdNelFpeHBRa0ZEZEVNMFR5eEZRVUZMZW5wQ0xHTkJRV04yYWtJc1MwRkJTeXR3UXl4alFVRmphRU1zWjBKQlEzUkRhVkFzUlVGQlMzcDZRaXhqUVVGamRtcENMRXRCUVVzcmNFTXNZMEZCWTNKQ0xHVkJSWFJEYzA4c1JVRkJTelZGTEZOQlIwdzBSU3hGUVVGTE5rSXNXVUZCV1VNc1UwRkJWU3hGUVVOd1FqbENMRWRCUldZc1JVRnFTRUVzUTBGQkswTjRTU3dyWkVOTEwwTXNaVUZYU1N4WFFVRlplbTlETEVkQlFWb3NUVUZEU1N4alFVRlBMRmxCVUZnc1JVRkJRV2Q2UXl4TlFVRXlRaXhIUVZGMlFpeEZRVUZMYUhwRExGRkJRVlZCTEVWQlEyWXNSVUZCUzNGelF5eFhRVEJPWWl4UFFYaFBiME1zVVVGcFFtaERMSE5DUVVGSkxEQkNRVUZYTEV0QlFXWXNWMEZEU1N4UFFVRlBjSGxETEV0QlFVdHpkRU1zVVVGQlVTeDVRa0ZIZUVJc1UwRkJaMEp5TUVJc1IwRkRXbXBhTEV0QlFVczBRaXhMUVVGTExHMUNRVUZ2UW5GWUxHOURRVTlzUXl4WlFVRkJLeTlDTEZGQlFVRXNVMEZCVVVNc1IwRkRTbW8xUXl4TFFVRkxPRVFzVVVGQlVXMTVRaXhQUVVGUFoycENMRVZCUVV0dU1VTXNVMEZEZWtJNVJDeExRVUZMS3pSRExFMUJRVTA1YWtNc1MwRkJTMmRyUXl4SlFVMXdRaXhaUVVGQlF5eFRRVUZCTEZOQlFWTklMRWRCUVZRc1YwRkRTVUVzUlVGQlRUTjZReXhUUVVGUkxGTkJRVU0yZWtNc1IwRkJVeXhUUVVGTFJDeFJRVUZSUXl4UFFVZDZReXhaUVVGQk4wY3NUMEZCUVN4WFFVTlRjSGxETEV0QlFVczRSQ3hWUVVOT09VUXNTMEZCU3poRUxGRkJRVlUwUlN4VFFVRlRjM1JDTEdOQlFXTXNVVUZQT1VNc1dVRkJRWFZaTEUxQlFVRXNWMEZMU1N4SlFVRkpORXNzUlVGQll5eFpRVUZOTlVzc1RVRkJTeXhYUVVWNlFtdEpMRVZCUVhsQ2VqSkRMRXRCUVVzeWRVTXNVVUZCVVROMVF5eExRVUZMSzBZc1UwRkRMME13ZDBNc1JVRkJVekpETEdWQlFXZENMRVZCUTNwQ0xFbEJRVWxETEVWQlFWY3NTVUZCU1VNc1JVRkJaVGRETEVkQlUyeERMRTlCVWtFMFF5eEZRVUZUZGpGRExGRkJRVlZ4TVVNc1JVRkJXWEl4UXl4UlFVTXZRblV4UXl4RlFVRlRMM2RDTEZOQlFWYzJkMElzUlVGQldUZDNRaXhUUVVOb1F5dDNRaXhGUVVGVFRpeE5RVUZSTHpSRExFdEJRVXNyTkVNc1RVRkJUWEl2UWl4TFFVRkpMRk5CUVVOVUxFZEJRemRDTEVsQlFVbHpaME1zUlVGQldYUm5ReXhGUVVGRmN6RkNMRkZCUld4Q0xFOUJSRUU0U3l4RlFVRlRkakZETEZGQlFWRnRlVUlzVDBGQlQzTnFRaXhGUVVGVmVqRkRMRk5CUXpOQ2VURkRMRXRCUjBwR0xFZEJSMWdzV1VGQlFVY3NVMEZCUVN4WFFVTkplRFZETEV0QlFVc3JkRU1zV1VGQldTeG5Ra0ZCWjBKR0xGTkJRVk1zYVVKQlJ6bERMRmxCUVVGelNpeFZRVUZCTEZkQlNVa3NTVUZCU1hORExFVkJRVFpDTEVkQlowSnFReXhQUVdKQmVqVkRMRXRCUVVzck5FTXNUVUZCVFRONlF5eFRRVUZSTEZOQlFVTTJla01zUlVGQlRWTXNSMEZEZEVJc1NVRkJTWEI0UWl4RlFVRlhNbmRDTEVWQlFVc3pkMElzVTBGRGFFSkJMRVZCUVZOMlZTeFBRVUZUTEVkQlEyeENkVlVzUlVGQlUyeHFRaXhUUVVGUkxGTkJRVU0yVkN4RlFVRkhka1VzUjBGRFluVkZMR0ZCUVdFeUswSXNSMEZEWWpaQ0xFVkJRVTk0YTBNc1MwRkJTMmRGTEVWQlFVVnZLMElzV1VGRFZIQXJRaXhoUVVGaE9EVkNMRWxCUTJ4Q01FY3NSVUZCVDNoclF5eExRVUZMWjBVc1UwRk5ja0ozWjBNc1IwRlRXQ3haUVVGQlJTeGxRVUZCTEZOQlFXVnVVQ3hGUVVGcFEzZE5MRWRCUVdoRUxGZEJRMUUwUXl4RlFVRkxOVFZETEV0QlFVc3JSaXhSUVVGUmIyMURMR1ZCUTJ4Q01FNHNSVUZCVFRjMVF5eExRVUZMSzBZc1VVRkJVVGh0UXl4UFFVVnVRblZMTEVWQlFWRXNTMEZIV2l4SFFVRjFRaXhYUVVGdVFqVk5MRVZCUVUwclJpeFRRVU5PTmtjc1JVRkJVU3hKUVVGSlZpeEhRVUZyUWl4RFFVRkROMDBzWlVGQlowSXJVQ3hGUVVGSmNrUXNZMEZCWlM5TUxFVkJRVTF0Unl4clFrRkZka1VzUjBGQmRVSXNZVUZCYmtKdVJ5eEZRVUZOSzBZc1UwRkRXRFpITEVWQlFWRXNTVUZCU1hSRkxFZEJRVzlDT0Vjc1VVRkZMMElzUjBGQmRVSXNZVUZCYmtKd1VDeEZRVUZOSzBZc1UwRkJlVUlzUTBGRmNFTXNTVUZCU1hWS0xFVkJRVlVzU1VGQlNVTXNSMEZCTUVJc1EwRkRlRU5vU3l4VFFVRlZka1lzUlVGQlRXbEhMRk5CUTJoQ1lTeFpRVUZoZEhoRExFdEJRVXNyUml4UlFVRlJkWEpETEZsQlF6RkNhVWdzVFVGQlR5OU9MRVZCUVUxelJ5eGxRVU5pTkVnc1UwRkJWV3hQTEVWQlFVMTFSeXhsUVVkd1FtbEhMRVZCUVV0blJDeFZRVUZWYW1kRExFbEJRVWtyTDBJc1IwRkZia0l4UXl4RlFVRlJMRWxCUVVsUkxFZEJRVzlDTEVOQlF6VkNMMDRzWlVGQlowSXJVQ3hGUVVOb1FtNUtMRk5CUVZWcVJ5eEZRVUZOYVVjc1UwRkRhRUozU2l4TlFVRlBMRTlCUVZOS0xFVkJRVTBzYVVKQlFXMUNjbEFzUlVGQlRXbEhMRk5CUXk5RE9FY3NVMEZCVlN3clFrRkRWa01zVlVGQlYzRkRMRVZCUVUwc2FVSkJRVzFDY2xBc1JVRkJUV2xITEZOQlF6RkRORUlzVlVGQlZ5eFBRVU5ZYjBZc1dVRkJZV3BPTEVWQlFVMDRSaXhMUVVOdVFuRklMRk5CUVZVc1UwRkJRelZETEVWQlFUWkNlRXdzUjBGRGNFTjFVU3hGUVVGUk9VTXNTMEZCUzNwNlFpeGpRVUZqTEVWQlFVdDNiVUlzWTBGQlkySXNkVUpCUXpsRE5GRXNSVUZCVVRsRExFdEJRVXQ0TUVJc1YwRkJWeXhGUVVGTGRXNUNMR05CUVdOaUxIVkNRVUYxUWl4VFFVRkRNMHdzUlVGQlIyMU5MRWRCUVU4c1QwRkJRWEZNTEVWQlFVOW5ReXhsUVVGbEswTXNSVUZCVTNCUkxFMUJRelZIYjFFc1JVRkJVUzl3UWl4bFFVMW9RbkZ1UWl4RlFVRlJMRWxCUVVsbUxFZEJRWEZDZFVRc1JVRkJTWEJRTEVWQlFVMHJSaXhYUVVOeVF6RkRMRk5CUVZNc1pVRkJaMElzYlVKQlIxb3NZVUZCYmtKeVJDeEZRVUZOSzBZc1ZVRkRUalpITEVWQlFVMW9TeXhOUVVGTkxFTkJRMUlzUTBGQlJTOXlReXhKUVVGTExHZENRVUZwUW1Fc1RVRkJUM052UXl4RlFVRk5hVWNzVlVGRGNrTXNRMEZCUlhCMlF5eEpRVUZMTEZGQlFWTmhMRTFCUVU5emIwTXNSVUZCVFRoR0xFMUJRemRDTEVOQlFVVnFka01zU1VGQlN5eExRVUZOWVN4TlFVRlBNak5ETEVWQlFVMHNhVUpCUVcxQ2NsQXNSVUZCVFdsSExGVkJRMjVFTEVOQlFVVndka01zU1VGQlN5eGpRVUZsWVN4TlFVRlBjMjlETEVWQlFVMDRSaXhUUVVkMlFpeEpRVUZvUWpsR0xFVkJRVTFyUnl4UlFVTk9NRWNzUlVGQlRUaERMRlZCUVZjc1JVRkRha0k1UXl4RlFVRk5jRWdzVDBGQlVTeEpRVWRqTEVsQlFUVkNaMGdzUlVGQlMycDRReXhSUVVGUmVYSkRMR0ZCUTJJMFJpeEZRVUZOT0VNc1ZVRkJWeXhGUVVOcVFqbERMRVZCUVUxc1N5eFBRVUZQTEZOQlFWVXNWMEZEZGtKclN5eEZRVUZOYkVzc1QwRkJUeXhqUVVGbExGTkJSMmhETEVsQlFVbHBUaXhGUVVGTExFbEJRVWxvU0N4SFFVRm5RaXhKUVVGSlJpeEpRVVZxUXl4UFFVUkJhMGdzUlVGQlIyeHJRaXhQUVVGUGJXaENMRWRCUTBnclF5eEhRVTlZTEZsQlFVRkRMR2RDUVVGQkxGTkJRV2RDTlZBc1IwRkRXaXhKUVVGSk5sQXNSVUZCU3l4SlFVRkpiRWdzUjBGQlowSXpTU3hIUVVGUExFZEJTWEJETEU5QlNFRTJVQ3hGUVVGSGVFMHNVMEZCVXl4WFFVRlhRU3hUUVVGVExGVkJRMmhEZDAwc1JVRkJSM0JOTEZGQlFWRjZSQ3hGUVVGTk9FWXNUVUZEYWtJclNpeEZRVUZIZWpSRExFdEJRVXNzYlVKQlFXOUNORzlETEVWQlFVMXBSeXhWUVVNelFqUktMRWRCUjFnc1dVRkJRVU1zYVVKQlFVRXNWMEZGU1N4UFFVUmhkRFpETEV0QlFVdHRNME1zV1VGRFNucDBReXhSUVVGUExGTkJRVU13ZEVNc1IwRkJWU3hQUVVGclFpeEpRVUZzUWtFc1JVRkJUVEJDTEZsQlR6RkRMRmxCUVVGNVFpeGpRVUZCTEZkQlEwa3NTVUZCU1VNc1JVRkJXWGcyUXl4TFFVRkxiVE5ETEZsQlEycENjMFFzUlVGQlV5eEhRVXRpTEU5QlNrRkVMRVZCUVZWd01VTXNVMEZCVVN4VFFVRkRjekZETEVWQlFWVm9iVU1zUjBGRGVrSXNTVUZCU1dsdFF5eEZRVUZsUkN4RlFVRlRSU3hWUVVNMVFrZ3NSVUZCVDBVc1IwRkJaMEpFTEV0QlJYQkNSQ3hIUVVkWUxGbEJRVUZKTEZsQlFVRXNWMEZEU1N4SlFVRkpReXhGUVVGWE9UWkRMRXRCUVV0emRFTXNVVUZCVVN4cFFrRkROVUlzVDBGQlQyaG5RaXhUUVVGVGQzUkNMRWxCVDNCQ0xGbEJRVUZETEZkQlFVRXNWMEZEU1N4SlFVRkpVQ3hGUVVGWmVEWkRMRXRCUVV0dE0wTXNXVUZEYWtJeVJDeEZRVUZYT1RaRExFdEJRVXMyTmtNc1kwRkRhRUpLTEVWQlFWTXNSMEZEVkU4c1JVRkJVMmczUXl4TFFVRkxhVGRETEZsQlUyeENMRTlCVWtGU0xFVkJRVzlDTEZsQlFVbFBMRVZCUlhoQ1VpeEZRVUZWY0RGRExGTkJRVkVzVTBGQlEzTXhReXhGUVVGVmFHMURMRWRCUTNwQ0xFbEJRVWxwYlVNc1JVRkJaVVFzUlVGQlUwVXNWVUZETlVKSUxFVkJRVTlGTEVkQlFXZENSQ3hGUVVGVGJIcENMRTlCUlhCRGFYcENMRVZCUVhkQ0xHZENRVUZKU3l4RlFVVnlRa3dzUjBGSFdDeFpRVUZCVXl4WFFVRkJMRmRCUTBrc1RVRkJkME1zVTBGQmFrTnNOME1zUzBGQlMzTjBReXhSUVVGUkxHbENRVVUxUWl4RlFYaFBRU3hEUVVGdlEydENMQ3RrUTFKd1F5eGxRVTFKTEcxQ1FVTkpMR05CUVU4c1dVRklXQ3hGUVVGQlowZ3NTMEZCZVVJc1MwRnRRemRDTEU5QmRrTTRReXhSUVdNeFF5eFpRVUZCTWtZc1QwRkJRU3hUUVVGUFF5eEhRVU5JY0RkRExFdEJRVXM0UkN4UlFVRlJiWGxDTEU5QlFVOXRiRUlzUlVGQlNYUXpReXhUUVVONFFpeEpRVUZKTTBRc1JVRkJVVWdzUzBGQlMzRTNReXhyUWtGRGFrSkVMRVZCUVVsNE5VTXNTMEZCU3l4blFrRkJhVUo2UWl4SFFVVXhRaXhKUVVGSmJUZERMRWRCUVcxRExFbEJRVE5DUml4RlFVRkpjakZETEZGQlFWRjNNVU1zVjBGQmMwSXNUMEZCVXl4UFFVZDJSQ3hQUVVaQlNDeEZRVUZKZURWRExFdEJRVXNzUzBGQlRTeFZRVUZIZHpWRExFVkJRVWx5TVVNc1VVRkJVVGh0UXl4UFFVRk5MRmxCUVVsNVR5eEZRVUZMTEZsQlFVbHVOME1zU1VGRGFrUklMRXRCUVV0M01VTXNTMEZCUzNablF5eExRVUZMYlcxRExFZEJRMUp3TjBNc1RVRkhXQ3haUVVGQmR6ZERMR1ZCUVVFc1YwRkRTU3hQUVVGUGVEZERMRXRCUVV0M01VTXNTMEZCU3pseVF5eFJRVUZQTEZOQlFVTXdlRU1zUjBGQlVTeFBRVUZuUWl4SlFVRm9Ra0VzUlVGQlNYUkRMRmxCUjNwRExGbEJRVUYxUXl4blFrRkJRU3hYUVVOSkxFOUJRVTl5TjBNc1MwRkJTM2N4UXl4TFFVRkxlbWhETEU5QlFWTXNSMEZOT1VJc1dVRkJRVEJ1UXl4cFFrRkJRU3hYUVVOSkxFOUJRVTk2TjBNc1MwRkJTM2N4UXl4TFFVRkxhR2RETEUxQlFVc3NVMEZCUXpSc1F5eEhRVUZSTEU5QlFUSkNMRWxCUVROQ1FTeEZRVUZKY2pGRExGRkJRVkYzTVVNc1pVRkZia1FzUlVGMlEwRXNRMEZCT0VNdlRTd3JaRU5FT1VNc1pVRkhTU3h0UWtGRFNTeGpRVUZQTEZsQlExQXNSVUZCU3pSRUxGZEJUMklzVDBGYWRVTXNVVUZSYmtNc1dVRkJRVUVzVDBGQlFTeFhRVU5KY0hsRExFdEJRVXM0UkN4UlFVRlZORVVzVTBGQlUzTjBRaXhqUVVGakxGTkJRM1JEYURKQ0xFdEJRVXMyZEVNc1UwRkJVeXhuUWtGRmRFSXNSVUZhUVN4RFFVRjFRelpPTEN0a1EwTjJReXhsUVVWSkxHMUNRVU5KTEdOQlFVOHNXVUZEVUN4RlFVRkxkRW9zVjBGcFNHSXNUMEZ5U0hGRExGRkJUMnBETEZsQlFVRkJMRTlCUVVFc1YwRkRTWEI1UXl4TFFVRkxPRVFzVVVGQlZUUkZMRk5CUVZOemRFSXNZMEZCWXl4VlFVMHhReXhaUVVGQk1teENMRmxCUVVFc1UwRkJXVkFzUjBGRFVpeFBRVUZQY0RkRExFdEJRVXQzTVVNc1MwRkJTemx5UXl4UlFVRlBMRk5CUVVOMVVDeEZRVUZIZGtVc1IwRkRlRUlzUjBGQlNYVkZMRWxCUVUxdGFVTXNSVUZEVGl4UFFVRlBibWxETEUxQlQyNUNMRmxCUVVGMVowTXNVMEZCUVN4VFFVRlRORUlzUjBGRFRFRXNSVUZCU1hKT0xGbEJRVmtzWjBKQlFXZENSaXhUUVVGVExHZENRVU14UWpkMFF5eExRVUZMTWpkRExGbEJRVmxRTEVkQlEzWkNhREpETEZOQlFWRXNVMEZCUXpaVUxFVkJRVWQyUlN4SFFVRk5MRTlCUVVGMVJTeEZRVUZGT0RCQ0xGbEJRVmtzYjBKQlN6ZERMRmxCUVVFMlRpeGxRVUZCTEZkQlEwa3NTVUZCU1M5b1F5eEZRVUZUTjFvc1MwRkJTM2N4UXl4TFFVRkxPWEpETEZGQlFVOHNVMEZCVlhWUUxFZEJRM0JETEVsQlFXZERMRWxCUVRWQ1FTeEZRVUZGYkZRc1VVRkJVWEY2UXl4alFVTldMRTlCUVU5dVowTXNTMEZIWml4SFFVRkpXU3hIUVVGVlFTeEZRVUZQT1VZc1QwRkJVeXhGUVVNeFFpeFBRVUZQT0VZc1JVRkJUeXhKUVVkMFFpeFpRVUZCWjJsRExHRkJRVUVzVjBGRlNTeFBRVVJYTnpkRExFdEJRVXQzTVVNc1MwRkJTemx5UXl4UlFVRlBMRk5CUVVOMVVDeEZRVUZIZGtVc1IwRkJUU3hQUVVGQmRVVXNSVUZCUldscFF5eHBRa0ZKTlVNc1dVRkJRVmtzWjBKQlFVRXNWMEZEU1N4SlFVRkpReXhGUVVGWkx6ZERMRXRCUVVzMk4wTXNaVUZGY2tJc1IwRkJlVUlzU1VGQmNrSkZMRVZCUVZWb2IwTXNUMEZEVml4TlFVRlBMRWRCUlZnc1NVRkJTV2x2UXl4RlFVRlZMRWRCUzJRc1QwRktRVVFzUlVGQlZUTXlReXhUUVVGUkxGTkJRVU5uTWtNc1JVRkJTekZ0UXl4SFFVTndRbk51UXl4RlFVRlJMMjFETEV0QlFVdHRiVU1zUlVGQlNVd3NhVUpCUjJScFFpeEhRVWRZTEZsQlFVRkRMR05CUVVFc1YwRkxTU3hKUVVGSmVrY3NSVUZCVDNneFF5eExRVUZMZHpGRExFdEJRVXM1Y2tNc1VVRkJUeXhUUVVGRE1IaERMRWRCUVZFc1QwRkJPRUlzU1VGQk9VSkJMRVZCUVVseU1VTXNVVUZCVVhGNlF5eHBRa0ZETjBNMFF5eEZRVUZWTEVkQlMyUXNUMEZLUVhoSExFVkJRVXR3ZDBNc1UwRkJVU3hUUVVGRFp6SkRMRWRCUTFaWkxFVkJRVkV2YlVNc1MwRkJTMjF0UXl4RlFVRkpUQ3hwUWtGSFpHbENMRWRCUjFnc1dVRkJRUzlGTEdWQlFVRXNWMEZEU1N4UFFVRlBhak5ETEV0QlFVdDNNVU1zUzBGQlMyaG5ReXhOUVVGTExGTkJRVU41UkN4RlFVRkhka1VzUjBGQlRTeFBRVUZCZFVVc1JVRkJSU3N3UWl4VFFVRlRMRzlDUVVrdlF5eFpRVUZCYTA4c1dVRkJRU3hYUVVOSkxFbEJRVWxrTEVWQlFVMXdOME1zUzBGQlMya3pReXhwUWtGRFppeEhRVUZMYlVVc1JVRkJUQ3hEUVVkQkxFbEJRVWt6VEN4RlFVRlhlblpETEV0QlFVc3lOME1zV1VGQldWQXNSMEZETlVKbExFVkJRV014VFN4RlFVRlRRU3hGUVVGVE1UZENMRTlCUVZNc1IwRkROME54YmtNc1JVRkJTWEpPTEZsQlFWa3NaMEpCUTJoQ2NVNHNSVUZCU1hnMVF5eExRVUZMTEdWQlFXZENMRkZCUTNwQ2R6VkRMRVZCUVVrdmVFTXNTVUZCVFN4RFFVRkZMRkZCUVZjc1VVRkZka0lzU1VGQlNUSjRReXhGUVVGVFNTeEZRVUZKU0N4WlFVVmlSeXhGUVVGSlNDeFpRVVJQTEZWQlFWaEVMRVZCUTJ0Q0xHZENRVWRCTEZWQlIzUkNhRGRETEV0QlFVdDNjME1zWjBKQlFXZENlSE5ETEV0QlFVc3JjRU1zWTBGQlkzUkNMR2RDUVVGcFFpeERRVUZGYjBJc1pVRkJaMEoxVWl4RlFVRkpjakZETEZGQlFWRnZiVU1zWlVGQlowSjRReXhWUVVGWExFTkJRVVY0YzBJc1RVRkJUMmtyUWl4TFFVVXpTSEEzUXl4TFFVRkxkelZETEZOQlFWTXlReXhMUVU5c1FpeFpRVUZCUXl4VlFVRkJMRk5CUVZWb1FpeEhRVWRPUVN4RlFVRkpkRE5ETEZGQlFWRXlhRUlzVTBGRldpeEpRVUZKZEd4Q0xFVkJRVkZJTEV0QlFVdDNNVU1zUzBGQlMyaDBReXhSUVVGUk5IbERMRWRCUXpGQ2FqZERMRWRCUVZNc1IwRkRWRWdzUzBGQlMzY3hReXhMUVVGTE5rY3NUMEZCVDJ3NFF5eEZRVUZQTEVsQlJYQkRMRVZCY2toQkxFTkJRWEZEZFRkRExHdHhRa00wUW5KRExHVkJZMGtzVjBGQldUTXhReXhIUVVGYUxFMUJRMGtzWTBGQlR5eFpRVVZRTEVWQlFVdEJMRkZCUVZWQkxFVkJRMllzUlVGQlMzVXlReXhMUVVGUExFbEJRVWxETEVkQlEyaENMRVZCUVVzM2MwTXNTMEZCVHl4SlFVRkpPSE5ETEVkQlEyaENMRVZCUVV0NFF5eFZRVUZaTEVsQlFVbDVReXhIUVVOeVFpeEZRVUZMUXl4VlFVRlpMRWxCUVVsRExFZEJRMnBDTEVsQlFVbERMRWRCUVRaQ0xFVkJRVXMzTWtNc1VVRkJVV3R4UXl4WFFVRlhjbkpETEV0QlEzSkVMRWxCUVVscmRrTXNTVUZEU2l4VFFVRkRNVU1zUjBGQlV5eFRRVUZMZVV3c2EwSkJRV3RDZWt3c1QwRkZla01zUlVGQlN6Qk1MR0ZCUVdVc1NVRkJTVU1zUjBGRGVFSXNSVUZCUzNSSkxGZEJRV0VzU1VGQlNYVkpMRWRCUVhOQ0xFVkJRVXRHTEdGQlFXTXNSVUZCU3k4eVF5eFJRVUZSYTNGRExGZEJRVmR5Y2tNc1RVRkRka1lzUlVGQlN6WjJReXhYUVVGWEwwTXNaVUZCYVVJc1JVRkJTek55UXl4UlFVRlJNbkpETEdWQlJUbERMRVZCUVVzd1J5eHBRa0ZCYlVJc1MwRkRlRUlzUlVGQlMxTXNXVUZCWXl4TFFVTnVRaXhGUVVGTGIwVXNZMEZCWlN4RlFVTndRaXhGUVVGTFF5eHBRa0ZCYlVKNE1FTXNVMEZCVTIwMFFpeGxRVUZsTEVWQlFVczVOa0lzVVVGQlVYVnlReXhsUVRJd1EzSkZMRTlCTlRKRGFVTXNSMEZCUVhGSUxFVkJRVUVzUjBGdlF6ZENMRmxCUVVGM1JTeG5Ra0ZCUVN4WFFVTkpkbElzUjBGQk5FSkZMRWxCUVVrNWNrTXNUMEZIY0VNc2MwSkJRVWtzTmtKQlFXTXNTMEZCYkVJc1YwRkRTU3hQUVVGUFFTeExRVUZMSzBZc1VVRkJVV3R4UXl4WFFVRlhjbkpETEhORFFVZHVReXh6UWtGQlNTeDVRa0ZCVlN4TFFVRmtMRmRCUTBrc1QwRkJUelZGTEV0QlFVc3JSaXhSUVVGUmVYSkRMRFJEUVVkNFFpeHpRa0ZCU1N3eVFrRkJXU3hMUVVGb1FpeFhRVU5KTEU5QlFVOTRlRU1zUzBGQlN6QlFMRXRCUVV0dmMwTXNiVVJCUjNKQ0xITkNRVUZKTEhsQ1FVRlZMRXRCUVdRc1YwRkRTU3hQUVVGUE9UZERMRXRCUVVzd1VDeExRVUZMZFhORExHbEVRVTF5UWl4WlFVRkJXU3hyUWtGQlFTeFRRVUZyUW5wTUxFZEJSV1J3ZUVNc1MwRkJTM0UwUXl4alFVRmpha2dzU1VGSGRrSXNXVUZCUVdkTkxGVkJRVUVzVjBGRFNYQTVReXhMUVVGTE9FUXNVVUZCVVcxNVFpeFBRVUZQYWpKQ0xFdEJRVXR6T0VNc1MwRkJTM2cwUXl4VlFVZHNReXhaUVVGQmRUVkRMRkZCUVVFc1YwRkRTWEk1UXl4TFFVRkxPRVFzVVVGQlVXMTVRaXhQUVVGUGFqSkNMRXRCUVVzd1VDeExRVUZMTlV3c1ZVRkhiRU1zV1VGQlFYTjFReXhQUVVGQkxITkNRVWRKY0hsRExFdEJRVXM0UkN4UlFVRlZORVVzVTBGQlUzTjBRaXhqUVVGakxGTkJRM1JEYURKQ0xFdEJRVXM0UkN4UlFVRlJkV0VzVlVGQlZYUkZMRWxCUVVrc1VVRkJVeXhwUWtGQmEwSXNZMEZCWlN4WFFVRlpMRmxCUVdFc1YwRkJXU3hUUVVGVkxGbEJSM0JJTDFvc1MwRkJTM2wwUXl4SFFVRkxlblJETEV0QlFVc3JSaXhSUVVGUk9HMURMRTlCUTNaQ04zTkRMRXRCUVVzMFFpeExRVUZMTEd0Q1FVRnRRalZDTEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkeWNrTXNUVUZGY2tRc1NVRkJTVEEwUXl4RlFVRlhkRGxETEV0QlFVczBjME1zWjBKQlFXZENOWE5ETEV0QlFVc3JSaXhSUVVGUk9HMURMRk5CUVZjc1IwRkROVVEzYzBNc1MwRkJTM0ZLTEVsQlFVMHNRMEZCUlN4TlFVRlRMRmRCUlhSQ0xFbEJRVWxyTUVNc1JVRkJaMElzU1VGQlNXcEZMRWRCUVdVc1EwRkRia051VGl4bFFVRm5RbTV6UXl4TFFVRkxLMFlzVVVGQlVXdHhReXhYUVVGWGNuSkRMRXRCUTNoRGFXOURMRTlCUVZFM2MwTXNTMEZCU3l0R0xGRkJRVkU0YlVNc1QwRkRja0l3VHl4WlFVRlpMRWxCUldoQ1owTXNSVUZCWXpGUUxGTkJRVk1zWVVGQllVRXNVMEZCVXl4aFFVVTNReXhKUVVGSk1sQXNSVUZCWXl4SlFVRkpiRVVzUjBGQlpTeERRVU5xUTBZc1pVRkJaU3hGUVVObWFrNHNaVUZCWjBKdWMwTXNTMEZCU3l0R0xGRkJRVkZyY1VNc1YwRkJWM0p5UXl4TFFVTjRRMmx2UXl4UFFVRlJOM05ETEV0QlFVc3JSaXhSUVVGUk9HMURMRTlCUTNKQ2VVVXNXVUZCWVhSNFF5eExRVUZMSzBZc1VVRkJVWFZ5UXl4alFVVTVRbXROTEVWQlFWa3pVQ3hUUVVGVExHRkJSWEpDTWxBc1JVRkJXVzR3UXl4SlFVRk5MRU5CUVVVc1VVRkJWeXhSUVVVdlFpeEpRVUZKYnpCRExFVkJRV042T1VNc1MwRkJTekE1UXl4cFFrRkJhVUpLTEVkQlMzQkRTeXhGUVVGTExFbEJRVWw0U3l4SFFVRm5RaXhKUVVGSlJpeEpRVUUwUWl4SFFVVjZSREpMTEVWQlFWTXNTVUZCU1VNc1IwRkRZa01zUlVGQlN5eEpRVUZKTTBzc1IwRkJaMElzU1VGQlNVWXNTVUZEYWtNMlN5eEZRVUZITjI1Q0xFOUJRVTh5YmtJc1IwRkZWa3dzUlVGQlkzWkZMRkZCUVZFeVJTeEhRVU4wUWtnc1JVRkJXWGhGTEZGQlFWRTRSU3hIUVVkd1Frd3NSVUZCV1hJMFF5eFRRVUZSTEZOQlFVTXlORU1zUjBGUGFrSXNSMEZCUzBFc1JVRkJSM1JPTEZOQlFWSXNRMEZGUVN4SlFVRkpkVTRzUlVGQlkxWXNSVUZCVTFNc1JVRkJSM1JPTEZWQlJURkNORW9zUlVGQlMydEVMRVZCUVdOdVJDeG5Ra0ZCWjBJeVJDeEhRVU51UXpWRUxFVkJRVXR4UkN4RlFVRlpOMFFzWlVGQlpXOUZMRVZCUVVrc1IwRkxlRU1zUlVGQlMwVXNWMEZCVnpWRUxFZEJRMmhDTEVWQlFVczJSQ3hwUWtGQmFVSTNSQ3hGUVVGSk1rUXNSMEZETVVJc1JVRkJTMFVzYVVKQlFXbENMMFFzUlVGQlNUWkVMRWRCUXpGQ1ZDeEZRVUZqZGtVc1VVRkJVWEZDTEVkQlEzUkNiVVFzUlVGQldYaEZMRkZCUVZGdFFpeFBRVWQ0UW00MlF5eExRVUZMY3poRExFdEJRVXR1UWl4UFFVRlBiME1zUjBGRGFrSjJPVU1zUzBGQlN6QlFMRXRCUVV0NWNrTXNUMEZCVDNGRExFZEJTMnBDZURsRExFdEJRVXR0SzBNc1lVRkxURzRyUXl4TFFVRkxiemxETEZsQlEweHdPVU1zUzBGQlMzRTVReXhWUVV0TWNqbERMRXRCUVV0ck9VTXNhVUpCUVdsQ05VOHNXVUZCV1hSMVF5eExRVUZMTmpSRExGbEJRVmt2TUVNc1UwRkxia1E1UkN4TFFVRkxhemxETEdsQ1FVRnBRalZQTEZsQlFWbDBkVU1zUzBGQlN6aEVMRk5CUzNaRE9VUXNTMEZCUzI4clF5eHZRa0ZMVEN4SlFVRkpkbmRETEVWQlFVODNUaXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY0dsRExFdEJRVXR0YWtNc1UwRkRjRU54VGl4RlFVRlJjaXRETEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkd2FVTXNTMEZCUzJ0dFF5eFRRVWR5UTNWTExFVkJRWEZETEVOQlEzSkRlbFVzWlVGQlowSTNjRU1zUzBGQlN5dEdMRkZCUVZGcmNVTXNWMEZCVjNKeVF5eExRVUZOSzJ0RExGVkJRVmNzUTBGRGNrUjRhMElzUzBGQlRYUllMRVZCUTA1bmJVTXNVMEZCVlhkTExFbEJSMnhDY2l0RExFdEJRVXQzYzBNc1owSkJRV2RDZUhORExFdEJRVXNyY0VNc1kwRkJZM3BDTEhGQ1FVRnpRbWRYTEVkQlN6bEVkQ3RETEV0QlFVdDNjME1zWjBKQlFXZENlSE5ETEV0QlFVc3JjRU1zWTBGQlkyeENMRzFDUVVOd1F5eERRVU5KWjBJc1pVRkJaMEkzY0VNc1MwRkJTeXRHTEZGQlFWRnJjVU1zVjBGQlYzSnlReXhMUVVONFF5dHJReXhWUVVGWExFMUJSMDhzU1VGQmRFSXpjRU1zUzBGQlMyazVReXhqUVVOTWFqbERMRXRCUVV0dE9VTXNiVUpCU1dJc1dVRkJRV2xDTEd0Q1FVRkJMSFZDUVVNNFF5eEpRVUYwUTNBclF5eExRVUZMSzBZc1VVRkJVVEJ5UXl4MVFrRkRZbnA0UXl4TFFVRkxielJETEdsQ1FVRnRRaXhKUVVGSmJVY3NSMEZCTUVJc1EwRkJSUzlLTEZsQlFXRjRNRU1zUzBGQlN6aEVMRkZCUVZNeWQwTXNWMEZCV1hvd1F5eExRVUZMZVRCRExHRkJRM0JIZWpCRExFdEJRVXR2TkVNc2FVSkJRV2xDYmtjc2FVSkJRVzFDTEZOQlFVTmlMRWRCUVZNc1UwRkJTM2xNTEd0Q1FVRnJRbnBNTEVsQlF6RkZjSGhETEV0QlFVdHZORU1zYVVKQlFXbENNVmtzVjBGSk9VSXNXVUZCUVhsbExGZEJRVUVzYzBKQlEwbHVLME1zUzBGQlN6WTBReXhaUVVGakxFbEJRVWt5Uml4SFFVTjJRbmdyUXl4TFFVRkxOalJETEZsQlFWa3hUU3hsUVVGcFFtNXpReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFdEJRekZFTlVVc1MwRkJTelkwUXl4WlFVRlpPVU1zYjBKQlFXMUNMRk5CUVVONFRTeEhRVUZOTEZOQlFVdHJWaXhwUWtGRE0wTXpTU3hwUWtGQlowSXNVMEZCUTNaTkxFZEJRVTBzVTBGQlN6YzFRaXhMUVVGTGQzTkRMR2xDUVVOcVEyeEhMSGxDUVUxVUxGbEJRVUZwU1N4WFFVRkJMRk5CUVZjMVJDeEhRVWxRTEVsQlFVbG9UaXhGUVVGUmNuUkRMRXRCUTFweE5rTXNSVUZCUnpGT0xHZENRVUZuUWl4VFFVRlRMRk5CUVZWd1JDeEhRVVZzUXl4SlFVRkpiVllzUjBGQlRTeEZRVU5PY2tVc1JVRkJSM0pOTEZOQlFWTXNaMEpCUTFweFRTeEZRVUZIZEUwc1dVRkJXU3hsUVVGbFJpeFRRVUZUTEdkQ1FVTjJRelpSTEVkQlFVMHNSMEZIVG5KRkxFVkJRVWQwVFN4WlFVRlpMR2RDUVVGblFrWXNVMEZCVXl4bFFVMDFRM2ROTEVWQlFVYzFTeXhUUVVGVExFMUJRVTF5Y1VNc1UwRkJVU3hUUVVGRGEwTXNSMEZEZGtKQkxFVkJRVVVyVnl4VlFVRlZiMGdzVDBGQlR5eGpRVUZsTEcxQ1FVMTBReXhKUVV0SmVrUXNSVUZCSzBJc1EwRkJSVEp1UWl4VlFVRlhMRU5CUVVWNGMwSXNUVUZCVDI5elFpeEZRVUZIYTBnc1UwRk1ha1EwU2l4RlFVRkhkREJETEZGQlFWRXdjVU1zVTBGTGMwUnJUeXhKUVVGTFJDeEhRVUZQTjFVc1pVRkJaMEozUkN4RlFVRk5kRzVETEZGQlFWRnJjVU1zVjBGQlYzSnlReXhOUVVWcVNYa3hReXhGUVVGSE4wNHNaMEpCUVdkQ05rNHNSVUZCUjNSUkxHTkJRV053UWl4eFFrRkJjMEl6YlVJc1QwRkxiRVVzV1VGQlFXMHlRaXhWUVVGQkxITkNRVVZsYmpSRExFdEJRVXQxZEVNc1lVRkJZU3hoUVVONFFtNXZReXhUUVVGUkxGTkJRVU5uTWtNc1IwRkJVU3hUUVVGTE1VNHNZMEZCWXpCT0xFMUJSM3BETEVsQlFVbDNSQ3hGUVVGak5TdERMRXRCUVVzd1VDeExRVUZMYTNORExHbENRVU0xUWpVM1F5eExRVUZMTUZBc1MwRkJTemhzUXl4TFFVRlBMRU5CUVVOdlNpeEpRVk4wUWl4WlFVRkJWaXhwUWtGQlFTeFRRVUZwUWpOb1FpeEZRVUZ6UWl0blFpeEhRVVU1UWtFc1NVRkJXWFE1UXl4TFFVRkxiWFJETEZkQlFWZHRVU3hOUVVWU0xFbEJRWEpDUVN4RlFVRlRkVUlzVlVGRFZIUnBRaXhGUVVGSmRXTXNVMEZCVlN4SFFVZGtkMFVzUlVGQlV6bE5MRkZCUTFScVZTeEZRVUZKYkhwQ0xFbEJRVTBzUTBGQlJTeFRRVUZaTEZkQlFWa3NUVUZCVTJrd1F5eEZRVUZUT1Uwc1ZVRlZPVVFzV1VGQlFXdE9MR2xDUVVGQkxGTkJRV2xDU2l4SFFVVmlMRWxCUVV0QkxFZEJRVmwwT1VNc1MwRkJTMjEwUXl4WFFVRlhiVkVzUjBGQlZ5eFBRVUZQZERsRExFdEJRVXNyUml4UlFVRlJkM0pETEdOQlEyaEZMRWxCUVVsMVRpeEZRVUZqTEVkQlUyeENMRTlCVUVFNUswTXNTMEZCU3l0R0xGRkJRVkYzY2tNc1kwRkJZMjV6UXl4VFFVRlJMRk5CUVVNeU5VTXNSVUZCVVhKeFF5eEhRVU40UXl4SlFVRkpjM0ZETEVWQlFTdENNVUlzUlVGQlUzbENMRVZCUVU5MFR5eFZRVU01UTNWUExFbEJRMHhHTEVWQlFWbEZMRVZCUVZkRExGVkJRVmxHTEUxQlNXNURSQ3hGUVVGWkwzRkRMRk5CUVZjdlZDeExRVUZMSzBZc1VVRkJVWGR5UXl4alFVRmplRGxDTEU5QlFXVXZWQ3hMUVVGTEswWXNVVUZCVVhkeVF5eGpRVVV6UlhWT0xFZEJVVmdzV1VGQlFVa3NaVUZCUVN4VFFVRmxjbmhETEVWQlFXZENhMjFETEVkQlFTOUNMRmRCUjBrc1IwRkJTMnh0UXl4TFFVRlJRU3hGUVVGTGEwY3NVVUZCVlN4SFFVRTFRaXhEUVVWQkxFbEJRVWx2Y2tNc1JVRkJXWFI0UXl4SFFVTjVRaXhKUVVGeVF6ZE9MRXRCUVVzclJpeFJRVUZSYTNGRExGZEJRVmRuUWl4WFFVTjRRbXRQTEVWQlFWbHVMME1zUzBGQlN5dEdMRkZCUVZGcmNVTXNWMEZCVjI5Q0xHbENRVUZwUWpCRExFVkJRVk53UXl4VlFVRlhNM2hETEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkd2FVTXNTMEZCUzIxcVF5eFRRVUZWSzBNc1NVRk5jRWdzU1VGQlNYRk1MRVZCUVRCQ0xFdEJRemxDUkN4RlFVRlZMelZETEZOQlFWRXNVMEZCUXpaVUxFVkJRVWQyUlN4SFFVTnNRaXhKUVVGSk1HMURMRVZCUVUwc1JVRkJTMmxGTEZWQlFWVndiVU1zUjBGQlJ5eEhRVU0xUW0xcFF5eEZRVUZKU0N4WlFVRmpMRmRCUTJ4Q2JVVXNSVUZCVldoRkxFdEJUVEpDTEVkQlFYSkRjRGRETEV0QlFVc3JSaXhSUVVGUk1ISkRMSEZDUVVOaWVuaERMRXRCUVV0ekwwTXNZMEZCWTNaTUxFbEJSVzVDTDNwRExFdEJRVXR2TkVNc2FVSkJRV2xDZGtRc1lVRkJaV1FzUlVGRGNrTXZla01zUzBGQlMyODBReXhwUWtGQmFVSndTQ3hUUVVGWGJVOHNSVUZETjBKRExFbEJSVUZ3TDBNc1MwRkJTMjgwUXl4cFFrRkJhVUpzUkN4WlFVTjBRbXd4UXl4TFFVRkxielJETEdsQ1FVRnBRbTVFTEZGQlFWRnRTeXhGUVVGUmREZERMR0ZCVTJ4RUxGbEJRVUYzTjBNc1kwRkJRU3hUUVVGalF5eFJRVUZCTEVsQlFVRkJMRWxCUVVGQkxFVkJRVUVzU1VGQmFVUjZUQ3hKUVVNelJEbDZReXhMUVVGTE1EaERMRlZCUVZVek1rTXNVVUZCVVdselF5eGxRVUZwUW5WT0xFVkJRM2hEZGk5RExFdEJRVXN3T0VNc1ZVRkJWWFJMTEZOQlEwTXhjRU1zVTBGQlUyMDBRaXhsUVVGbExFbEJRVTAzWjBNc1MwRkJTeXRHTEZGQlFWRjFja01zWVVGRGFrUm9SQ3haUVVGWmRIVkRMRXRCUVVzd09FTXNWVUZCVlRVMFF5eFZRVTk2UXl4WlFVRkJkVGRETEZWQlFVRXNVMEZCVlVjc1JVRkJhVUpETEVkQlFUTkNMRmRCUTFGRExFVkJRVmt4TDBNc1MwRkJTekJRTEV0QlFVc3lja01zYTBKQlEzUkNSQ3hGUVVGTmNEZERMRXRCUVVzd1VDeExRVUZMYTNORExHbENRVUZwUW5KT0xGRkJRM0pETmswc1JVRkJTWEl4UXl4UlFVRlJjWHBETEdWQlFXZENMRVZCUlRWQ1owTXNSVUZCU1haT0xGTkJRVk1zV1VGRFluVk9MRVZCUVVrdmVFTXNTVUZCVFN4RFFVRkZMRkZCUVZjc1lVRkZka0lzU1VGQlNXZHJReXhGUVVGUmNuUkRMRXRCUlVOdk4wTXNSVUZCU1dwRkxGbEJTVll2ZUVNc1UwRkJVU3hUUVVGVk5sUXNSVUZCUjNaRkxFZEJRM2hDTEVsQlFVa3dhVU1zUlVGQlVXNHJRaXhGUVVWU01HMURMRVZCUVZGMlNTeEZRVUZOTTBvc1IwRkRiRUl5U2l4RlFVRk5NMG9zUjBGQlMydFRMRVZCUVZFc1NVRkJUVVFzUlVGRmVrSXNTVUZCU1M5RkxFVkJRV1YyUkN4RlFVRk5kMFFzVlVGSGNrSm5SaXhGUVVGVlNpeEZRVUZSTjBVc1IwRkZkRUlzUjBGQlowTXNVMEZCTlVKMlJDeEZRVUZOY25oRExGRkJRVkZ6YzBNc1YwRkJkMEoxVGl4RlFVRlRMRU5CUXk5RExFbEJRVWxETEVWQlFVOHNTVUZCU1hoVkxFdEJRVXQxVlN4SFFVVndRbmhKTEVWQlFVMDFka0lzU1VGQlRUWnNRaXhGUVVGTmVWTXNiMEpCUVc5Q1JDeFJRVVZxUTNwSkxHRkJRV2xDZEVVc1MwRkRUaXhUUVVGYU9FMHNSMEZCYTBNc1UwRkJXa0VzU1VGQmEwTXNTVUZCV2tFc1IwRkRhRVI0U1N4RlFVRk5lREZETEV0QlFVc3NWVUZCVnl4blFrRkZURmdzU1VGQldqSXJReXhKUVVOTWVFa3NSVUZCVFRWMlFpeEpRVUZOYnpSQ0xFbEJTVk1zU1VGQmNrSklMRWxCUTBGeVNTeEZRVUZOT1RSQ0xGVkJRVmNzUlVGRGFrSTRORUlzUlVGQlRUaERMRlZCUVZjc1IwRkhja0k1UXl4RlFVRk5kSHBETEZGQlFWRjNTeXhwUWtGQmFVSXNWVUZCVlN4VFFVRkRhVGRDTEVkQlJYUkRObElzUlVGQlNYZzFReXhMUVVGTExHZENRVUZuUWl4SFFVZFdMRlZCUkVaM05VTXNSVUZCU1Vnc1kwRkZZa2NzUlVGQlNVZ3NXVUZCWXl4WFFVbDBRamRFTEVWQlFVMXlTaXhaUVVGWkxHTkJRV051YzBNc1MwRkJTeXhSUVVGVExFbEJSVGxETEVsQlFVbHRLME1zUlVGQlZUVm5RaXhIUVVGUk4xa3NXVUZCV1dscVFpeEZRVUZGZURWQ0xGRkJRMmhEWjNkRExFZEJRMEZCTEVWQlFWRm9Oa0lzVlVGRldpeEpRVUZKZVRWQ0xFVkJRVlZ3UlN4RlFVRkpZaXhuUWtGRFpGZ3NSVUZCUzNaTkxFVkJRVTEwYmtNc1VVRkJVV3R4UXl4WFFVRlhjbkpETEV0QlJUbENiemRETEVWQlFYTkRMRU5CUVVWeVZ5eFZRVUZYTEVOQlFVVjRjMElzVFVGQlQyOXpRaXhGUVVGSE1GY3NTMEZCVFRWVExFZEJRVk40UkN4bFFVRm5RaXRRTEVkQlF6bEdjMGNzUlVGQmNVTXNRMEZCUlhaWExGVkJRVmNzUTBGQlJYaHpRaXhOUVVGUGIzTkNMRVZCUVVjMFZ5eEpRVUZMV0N4SFFVRlhNMVlzWlVGQlowSXJVQ3hIUVVNNVJuZEhMRVZCUVhkRExFTkJRVVY2Vnl4VlFVRlhMRU5CUVVWNGMwSXNUVUZCVDI5elFpeEZRVUZITkZjc1NVRkJTMWdzUlVGQlUyRXNUVUZCVDJwS0xFZEJRVk4yVGl4bFFVRm5RaXRRTEVkQlIyNUlkMElzUlVGQlNUVlBMR2RDUVVGblFtRXNSVUZCVFhSRUxHTkJRV04wUWl4blFrRkJhVUoxV0N4SFFVTjZSRFZGTEVWQlFVazFUeXhuUWtGQlowSmhMRVZCUVUxMFJDeGpRVUZqWkN4cFFrRkJhMEp0V0N4SFFVTXhSR2hHTEVWQlFVazFUeXhuUWtGQlowSmhMRVZCUVUxMFJDeGpRVUZqWml4bFFVRm5RbXRZTEUxQlNUVkVPVWtzUlVGQlRYUjZReXhSUVVGUmQwc3NhVUpCUVdsQ0xGTkJRVk1zVTBGQlZXazNRaXhIUVVNNVF6aEVMRVZCUVUwek9VSXNTMEZCU3pod1F5eFRRVUZUTkVJc1UwRkpOVUpCTEVWQlFVbDBNME1zVVVGQlVYZExMR2xDUVVGcFFpeFRRVUZUTEZOQlFWVnBOMElzUjBGRE5VTTRSQ3hGUVVGTk16bENMRXRCUVVzNGNFTXNVMEZCVXpSQ0xFMUJSM2hDY0RkRExFdEJRVXN3VUN4TFFVRkxlWEpETEU5QlFVOURMRWRCUldwQ0xFbEJRVWxyUml4RlFVRm5RbXhHTEVWQlFVbGtMRzFDUVZGNFFpeFBRVTVKWjBjc1JVRkJZM1p6UXl4UFFVRlRMRWRCUTFCMWMwTXNSVUZCWTBFc1JVRkJZM1p6UXl4UFFVRlRMRWRCUlRORGFsRXNVVUZCVVhkTExHbENRVUZwUWl4WFFVRlhMRk5CUVVOcE4wSXNSMEZCVFN4VFFVRkxaMWdzYTBKQlIzWkVia1lzUjBGSldDeFpRVUZCTUVVc2IwSkJRVUVzVTBGQmIwSkVMRWRCUldoQ0xFbEJRVWxYTEVWQlFVMVlMRVZCUVV0WkxGVkJRMWhETEVWQlFWRmlMRVZCUVV0akxGZEJRV0VzUlVGTk9VSXNUMEZNVjJRc1JVRkJTMlVzWTBGTFJpeExRVWhGUml4RlFVRlJMRWRCUVVzc1NVRkJUU3hKUVVGTlFTeEZRVWRXTEV0QlJtcENSaXhGUVVGTkxFZEJRVXNzU1VGQlRTeEpRVUZOUVN4SFFVdDZReXhaUVVGQlN5eHZRa0ZCUVN4VFFVRnZRbWhDTEVkQlEyaENMRWxCUVVscFFpeEZRVUZQYWtJc1JVRkJTMnRDTEZkQlExcHdOa01zUlVGQlRXczFReXhGUVVGTGJVSXNZVUZMWml4UFFVaGxSaXhGUVVGUExFZEJRVXNzU1VGQlRTeEpRVUZOUVN4RlFVZDBRaXhMUVVaSWJqWkRMRVZCUVUwc1IwRkJTeXhKUVVGTkxFbEJRVTFCTEVkQlYzcERMRmxCUVVFME5VTXNaVUZCUVN4VFFVRmxhRmdzUjBGTldDeEhRVUZuUWl4SlFVRmFRU3hGUVVGRk1GZ3NVVUZCT0VJc1NVRkJaakZZTEVWQlFVVjRVeXhUUVVGMlFpeERRVVZCTEVsQlFVbHRjVUlzUlVGQlkyeG9SQ3hMUVVGTE1GQXNTMEZCU3poeVF5eHBRa0ZETlVJc1MwRkJTVEJHTEVWQlFWbHVkRU1zVVVGQlZTeEhRVUV4UWl4RFFVTkJMRWxCUVVsdmRFTXNSVUZCWlVRc1JVRkJXVUVzUlVGQldXNTBReXhQUVVGVExFZEJRVWM0YlVNc1kwRkZia1JQTEVWQlFVODNVaXhGUVVGRmVEVkNMRTlCUVcxQ0sxY3NVVUZCVVN4TlFVTnVRM013UWl4SFFVdEVLMFlzU1VGSVl6ZDZRaXhUUVVGVE9IUkNMRVZCUVVreEswSXNZVUZCWVN4dFFrRkpOMEl4WXl4TFFVRkxlU3RETEdsQ1FVbDRRaXhaUVVGQlFTeFpRVUZCTEZkQlJVa3NTVUZCU1RKRExFVkJRVmR3YUVRc1MwRkJTM0V2UXl4VlFVRlZjaTlETEV0QlFVdHhhRVFzYzBKQlFYTkNMRWRCUlhKRU5VZ3NSVUZCVXpKSUxFVkJRVk01Unl4dFFrRkRiRUppTEVWQlFVOHhiRU1zVDBGQlV5eEhRVU5vUWpCc1F5eEZRVUZQTEVkQlFVYzViVUlzVVVGSFpIbDFRaXhGUVVGVGJrY3NXVUZCWXl4UlFVTjJRbTFITEVWQlFWTjRMME1zUzBGQlN5eGxRVUZuUWl4UlFVVTVRaXhKUVVGSmJ5dERMRVZCUVhORExFTkJRVVZ5Vnl4VlFVRlhMRU5CUVVWelZ5eExRVUZOYW1kRUxFdEJRVTF0WkN4TlFVRlBhV3RETEVkQlFWbDJXQ3hsUVVGblFqZHdReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFMUJUV2hKTEU5QlRFRTFSU3hMUVVGTGQzTkRMR2RDUVVGblFuaHpReXhMUVVGTEszQkRMR05CUVdOMFFpeG5Ra0ZCYVVKMVdDeEhRVVY2UkdoblJDeExRVUZMYnpSRExHbENRVUZwUW14RUxGbEJRM1JDYkRGRExFdEJRVXR2TkVNc2FVSkJRV2xDYmtRc1VVRkJVVzFOTEVWQlFWTjBPVU1zVTBGRmFFTnpPVU1zUjBGSFdDeFpRVUZCUXl4dFFrRkJRU3hYUVVOSkxFbEJRVWsxUnl4RlFVRlRMRWRCUjJJc1QwRkdRWG8yUXl4TFFVRkxLMFlzVVVGQlVYZHlReXhqUVVGamJuTkRMRk5CUVZFc1UwRkJRelpVTEVWQlFVZDJSU3hIUVVGUksyeERMRVZCUVU5NGFFTXNSVUZCUlhjelFpeGxRVUZaZUhaRExFdEJSVGRFZHpWRExFZEJSMWdzV1VGQlFUWkhMR0ZCUVVFc1UwRkJZWEJZTEVWQlFXOUNjVmdzUjBGRmVFSnlXQ3hIUVVGalFTeEZRVUZWVUN4WlFVYzNRak53UXl4TFFVRkxkMmhFTEdWQlEweDRhRVFzUzBGQlMyMDBReXhaUVVOTWJqUkRMRXRCUVVzd09FTXNWVUZCVlhCSkxGTkJSVWNzU1VGQlpHbE9MRWxCU1VwMmFFUXNTMEZCUzNFMFF5eGpRVUZqTEVsQlJYVkNMRWxCUVhSRGNqUkRMRXRCUVVzclJpeFJRVUZSTUhKRExIVkNRVU5pZW5oRExFdEJRVXR2TkVNc2FVSkJRV2xDZUVRc1dVRkJZeXhOUVU4MVF5eFpRVUZCZVVRc1kwRkJRU3hUUVVGak1VY3NSMEZGVml4SlFVRjVReXhKUVVGeVF6TjRReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYWjBJc1UwRkJiVUlzUTBGRE0wTXNTVUZCU1VNc1JVRkJUV3g0UXl4TFFVRkxLMFlzVVVGQlVXdHhReXhYUVVGWGFVSXNTVUZCU1ZNc1IwRkRkRU1zU1VGQlMxUXNSVUZCU3l4UFFVVldMRWxCUVVsdWNrTXNSVUZCVlN4SlFVRkpNRGRETEVkQlFUWkNkbEVzUlVGQlN5eFBRVVZ3Ukd4NFF5eExRVUZMZVRCRExGZEJRVmN2ZVVNc1NVRkJTWEZGTEU5QlJXNUNMRU5CUTBRc1NVRkJTVGhJTEVWQlFVODNUaXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY0dsRExFdEJRVXR0YWtNc1UwRkRjRU54VGl4RlFVRlJjaXRETEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkd2FVTXNTMEZCUzJ0dFF5eFRRVWR5UTBnc1JVRkJkVU1zUTBGRGRrTXZTaXhsUVVGblFqZHdReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFdEJRM2hESzJ0RExGVkJRVmNzUTBGRFVIaHJRaXhMUVVGTmRGZ3NSVUZEVG1kdFF5eFRRVUZWTEVsQlFVbERMRWRCUVRCQ2JrTXNSVUZCVnpCTkxFVkJRVTE2VFN4VFFVRlZlVTBzUlVGQlRYaE5MR2RDUVVkcVJqZDRReXhMUVVGTGQzTkRMR2RDUVVGblFuaHpReXhMUVVGTEszQkRMR05CUVdONlFpeHhRa0ZCYzBKelRDeExRVTEwUlN4WlFVRkJPRTRzWVVGQlFTeFRRVUZoZUZnc1IwRkJZaXhYUVZsSmJIRkRMRXRCUVVzd1VDeExRVUZMT0d4RExFdEJRMHc1Y2tNc1VVRkJUeXhUUVVGRGRWQXNSMEZCVFN4TlFVRnJRaXhaUVVGc1FrRXNSVUZCUldkcFF5eGhRVUVyUXl4clFrRkJiRUpvYVVNc1JVRkJSV2RwUXl4bFFVTXZRemN4UXl4VFFVRlJMRk5CUVVNMlZDeEhRVUZOTEZOQlFVdDJTaXhMUVVGTE1ITkRMRlZCUVZWdWFrTXNUVUZMZUVOcVdpeExRVUZMTUZBc1MwRkJTemhzUXl4TFFVRkxjSGRETEZOQlFWRXNVMEZCUXpaVUxFZEJSM0JDUVN4RlFVRkZaMmxETEZsQlFXTXNWMEZIYUVKb2FVTXNSVUZCUldzclFpeFpRVUZaZW5SRExGRkJRVThzVTBGQlEzQkRMRWRCUVUwc1QwRkJRVUVzUlVGQlJUQnZReXhUUVVGUE5YRkRMRk5CUVZFc1UwRkJRM1U0UXl4SFFVRlRRU3hGUVVGSGNtcERMRlZCUVZjc1UwRkpOMFVzV1VGQlFYTnFReXhaUVVGQkxGTkJRVmt4V0N4SFFXOUNVaXhIUVVGTFFTeEhRVUZqUVN4RlFVRlZVQ3hYUVVGalR5eEZRVUZWVUN4VlFVRlZlSE5DTEUxQlFVMHdhME1zWVVGTmNrVXNTVUZNUVN4SlFVRkpReXhGUVVGVE5WZ3NSVUZCVlZBc1ZVRkJWWGh6UWl4TlFVRk5NR3RETEdGQlEyNURkbFlzUlVGQlUzUnpReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFdEJSV3BEYlRORExFVkJRVmt2TjBNc1MwRkJTekJRTEV0QlFVdHRjME1zWlVGRmFrSnVia01zUlVGQlNTeEZRVUZIUVN4RlFVRkpjVzVETEVWQlFWVm9iME1zVDBGQlVWY3NTVUZCU3l4RFFVVjJReXhKUVVOSmNYUkRMRVZCUVV0RUxFVkJSRTk0Vml4RlFVRlRMRWxCUVUwMU0wSXNSVUZCU1N4TFFVVnVReXhIUVVGSmNYUkRMRWRCUVUxQkxFVkJRVWRvZFVNc1QwRkJVeXhGUVVGSExFTkJRM0pDTEVsQlFVbHBkVU1zUlVGQlkwUXNSVUZCUnl4SFFVTnFRa1VzUlVGQlkzWjBReXhGUVVWa2QzUkRMRVZCUVZkc2FVUXNTMEZCUzIxcFJDeGpRVUZqTnpCQ0xGTkJRVk13TUVJc1NVRkRNME1zU1VGQlMwVXNSVUZCVlN4VFFVVm1iR2xFTEV0QlFVc3JSaXhSUVVGUmQzSkRMR05CUVdOdWMwTXNVMEZCVVN4VFFVRkRiVE5DTEVWQlFVczNia0lzUjBGRmNrTXNTVUZCU1hFM1FpeEZRVUZYZUZRc1JVRkJTV3RWTEZOQlFWTnNkME1zYlVKQlEzaENObWhFTEVWQlFXRk9MRVZCUVU5NFZpeEZRVUZUTEVsQlFVMHlWaXhGUVVGakxFdEJRVTlzVXl4SFFVTTFSQ3hIUVVGSmNWTXNSMEZCWTBFc1JVRkJWM0oxUXl4UFFVRlRMRVZCUVVjc1EwRkZja01zU1VGQlNYRnFReXhGUVVGUk9Fc3NSVUZCVXk5TExGbEJRVmt6YUVNc1RVRkJTeXhUUVVGRE5uTkRMRWRCUVZFc1QwRkJRVUVzUlVGQlNYcElMRmxCUVdOeVpTeEZRVUZKYTFVc1dVRkZja1VzUjBGQlNUSkhMRVZCUVU4c1EwRkRVRUVzUlVGQlRYWktMRk5CUVZNc1kwRkZaaXhKUVVGSmVWVXNSVUZCV1N4SFFVTm9RbXB2UXl4TlFVRk5iVXdzUzBGQlN6UTRRaXhIUVVGWmFEbERMRk5CUVZFc1UwRkJWVzA1UXl4SFFVTnlRMFFzUjBGQllVTXNSVUZCU3l4UFFVVjBRbTVNTEVWQlFVMTRNVU1zUzBGQlN5eFJRVUZUTUdkRUxFZEJRMDRzU1VGQlNXNXFRaXhIUVVGUmFWa3NSVUZCVFN4SFFVRkpMRU5CUVVWNFlpeFpRVUZoTERCQ1FWVXpSU3haUVVGQmRXMUNMR05CUVVFc1UwRkJZMmhwUkN4SFFVTldMRTlCUVU5SUxFdEJRVXN3VUN4TFFVRkxPR3hETEV0QlFVdG9aME1zVFVGQlN5eFRRVUZEZVVRc1JVRkJSM1pGTEVkQlFVMHNUMEZCUVhWRkxFVkJRVVUwYUVNc1owSkJRV3RDTVRaRExFMUJUemRFTEZsQlFVRnhhVVFzVlVGQlFTeFRRVUZWYmtrc1JVRkJjVUp2U1N4SFFVRXZRaXhKUVZrMlFpOUpMRVZCUVdGblJpeEZRVm94UXl4UFFVZFZaMFVzUlVGQlpTeFRRVUZEUXl4RlFVRnZRbXBLTEVkQlIzUkRMRTlCUmxscFNpeEZRVUZITlVvc1RVRkJUVmNzUjBGRlVuaEhMR1ZCT0VKaU1FY3NSVUZCU3pVMVF5eExRVUZMSzBZc1VVRkJVV3R4UXl4WFFVRlhjbkpETEV0QlJYUkNOVVVzUzBGQlN6QlFMRXRCUVVzNGJFTXNTMEZCUzNab1F5eE5RVEZDUkhsc1F5eEZRVEJDWlRFMVF5eExRVUZMY3poRExFdEJRVXRpTEcxQ1FVRnRRakZETEUxQlFVMTJkME1zVVVGQlVUWjRReXhIUVRGQ04wTnhSU3hGUVRCQ2EwUXJSQ3hIUVVGUlFTeEZRWFpDY2tZc1UwRkJWWFoxUXl4RlFVRnRRa01zUjBGTmFFTXNUMEZCYVVKNWRVTXNSVUZQWmtZc1JVRkJZV2hGTEVWQlFVMTRjVU1zUlVGQlNVTXNSVUZCUjNWc1F5eEhRVkJRYlVvc1JVRlBZVWdzUlVGQllXaEZMRVZCUVUxMmNVTXNSVUZCU1VRc1JVRkJSM2RzUXl4SFFVUnFSR3RLTEVWQlFVZDZLME1zVjBGQlZ6SXJReXhqUVVGalJDeEZRVUZITVN0RExGbEJUbTVETEVsQlFWVjVLME1zUlVGQlNVTXNTMEZ0UW5oQ2VqbERMRk5CUVZFc1UwRkJRWFU1UXl4SFFVRk5MRk5CUVV0cWVrTXNTMEZCUzNWdFFpeFBRVUZQTUhOQ0xFZEJRVWtzVFVGSGVFTXNTVUZCU1Vrc1JVRkJhME1zUTBGQlJYQmFMRlZCUVZjc1EwRkJSWEZhTEZkQlFWa3pTU3hGUVVGSk5Fa3NUMEZCVVRGWExFZEJRVmN2UlN4aFFVRmxjVU1zWlVGQlowSXJVQ3hIUVVOdVNITktMRVZCUVhkRExFTkJRVVYyV2l4VlFVRlhMRU5CUVVWeFdpeFhRVUZaTTBrc1JVRkJTWE5GTEVsQlFVczRSQ3hIUVVGUk5Wa3NaVUZCWjBJclVDeEhRVU40UnpVMVF5eExRVUZMZDNORExHZENRVUZuUW5wRExFZEJRV051UWl4clFrRkJiVUp6WVN4SFFVVjBSR3hxUkN4TFFVRkxkM05ETEdkQ1FVRm5Rbmh6UXl4TFFVRkxLM0JETEdOQlFXTnFRaXgxUWtGQmQwSnBZU3hKUVVsd1JTeFpRVUZCU1N4cFFrRkJRU3hUUVVGcFFtcGFMRWRCUjJJc1NVRkJTVzQyUWl4RlFVRlRiVFpDTEVWQlFWVlFMRlZCUVZWNGMwSXNUVUZCVFhCT0xFOUJTWFpETEVkQlJqUkRMRTlCUVdwRFFTeEZRVUZQT0Zjc1VVRkJVWHB0UWl4alFVVm1MRU5CUTFBc1NVRkJTV2syUXl4RlFVRkxkSEZETEVWQlFVOHJWeXhSUVVGUkxFMUJRM2hDTEVsQlFVdDFla0lzUlVGQlNTeFBRVVZVZEhGRExFVkJRVk56Y1VNc1JVRkZZaXhKUVVGSkswa3NSVUZCVFhCcVJDeExRVUZMY3poRExFdEJRVXRpTEcxQ1FVRnRRakZETEUxQlFVMTJha01zVFVGQlN5eFRRVUZEZVVRc1JVRkJSM1pGTEVkQlFVMHNUMEZCUVhWRkxFVkJRVVZ1Vml4VlFVRlphVTBzUzBGRGNrVnhla01zUjBGSFRIQnFSQ3hMUVVGTGQybEVMRlZCUVZWWkxFVkJRVXRzV2l4RlFVRlZVQ3hWUVVGVloxWXNUVUZITlVNc1dVRkJRVFpETEdGQlFVRXNWMEZGU1hob1JDeExRVUZMY3poRExFdEJRVXM1Unl4TFFVRkxjSGRETEZOQlFWRXNVMEZCUXpaVUxFVkJRVWQyUlN4SFFVTnVRblZGTEVWQlFVVXJNRUlzVTBGQlV5eHBRa0ZEV0M4d1FpeEZRVUZGT0RCQ0xGbEJRVmtzWlVGQlpVRXNXVUZCV1N4dlFrRkxja1FzV1VGQlFYTldMR2RDUVVGQkxGTkJRV2RDYmxvc1IwRkJhRUlzVjBGTFpXeHhReXhMUVVsT01GQXNTMEZCU3poc1F5eExRVUZMY0hkRExGTkJRVkVzVTBGQlEyY3lReXhGUVVGTE1XMURMRWRCUlZvd2JVTXNSVUZCU1dwRkxGbEJRMVl2ZUVNc1UwRkJVU3hUUVVGRGFUbERMRWRCUVZWQkxFVkJRVWwySzBNc1VVRkJVVEJMTEc5Q1FVRnZRaXhWUVVGWExFVkJRVXNyZUVNc2JVSkJRekZGTEVsQlFVbEVMRVZCUVdkQ2JFWXNSVUZCU1dRc2JVSkJRM0JDWjBjc1JVRkJZM1p6UXl4UlFVRlZMRWRCUTFwMWMwTXNSVUZCWTBFc1JVRkJZM1p6UXl4UFFVRlRMRWRCUXpORGFsRXNVVUZCVVhkTExHbENRVUZwUWl4VlFVRlhMRVZCUVV0cGVVTXNiMEpCVnpORUxGbEJRVUV2T1VJc1YwRkJRU3hUUVVGWGQyNUNMRVZCUVcxQ04zRkNMRVZCUVRCQ2JXdERMRkZCUVVFc1NVRkJRVUVzU1VGQlFVRXNSMEZCUVN4SFFVTndSQ3hKUVVGSk9Wa3NSVUZCWjBNc1EwRkRhRU5GTEVsQlFVc3hjVU1zUzBGQlN5dEdMRkZCUVZFNGJVTXNUMEZEYkVKNlF5eFZRVUZYU2l4RlFVTllUU3hUUVVGVmJuSkNMRVZCUTFZd2NVSXNaVUZCWjBJM2NFTXNTMEZCU3l0R0xGRkJRVkZyY1VNc1YwRkJWM0p5UXl4TFFVTjRRM2xzUXl4eFFrRkJjMEpwV2l4SFFVVXhRbTVoTEVkQlFXdENkMElzVlVGQlZVZ3NTVUZIYUVNc1dVRkJRV3B1UWl4alFVRkJMRk5CUVdONWJVSXNSMEZEVml4SlFVRkpVU3hGUVVGblF5eERRVU5vUTBVc1NVRkJTekZ4UXl4TFFVRkxLMFlzVVVGQlVUaHRReXhQUVVOc1FucERMRlZCUVZkS0xFVkJRMWhJTEdWQlFXZENOM0JETEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkeWNrTXNUVUZGTlVOMWEwTXNSMEZCYTBKdlFpeFpRVUZaUXl4SlFVZHNReXhaUVVGQksxa3NXVUZCUVN4VFFVRlpjbG9zU1VGUGEwTXNTVUZCZEVOc2NVTXNTMEZCU3l0R0xGRkJRVkV3Y2tNc2MwSkJRMko2ZUVNc1MwRkJTMjAwUXl4WlFVTlVMRWxCUVVseFRDeEZRVUZMZEZvc1JVRkJWVkFzVlVGQlZXdExMRk5CUTNoQ01sQXNSMEZEVEhocVJDeExRVUZMYXk5RExHVkJRV1ZvVml4RlFVRlZVQ3hWUVVGVmVHdENMRXRCUVUwc1NVRkJTVEoxUWl4SFFVRXdRakJRTEVWQlFVYzNVaXhWUVVGWE5sSXNSVUZCUnpWU0xGTkJRVlUwVWl4RlFVRkhNMUlzWjBKQlJ6bEhMRmxCUVVFMFVpeHBRa0ZCUVN4VFFVRnBRblphTEV0QlNXcENMRmxCUVVFd1R5eHJRa0ZCUVN4VFFVRnJRakJMTEVkQlFXeENMR2RDUVVGclFpeEpRVUZCUVN4SlFVRkJRU3hIUVVGQkxFZEJSVXgwYWtRc1MwRkJTeXRHTEZGQlFWRTRiVU1zVDBGRFlqZHpReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFdEJTMnBETlVVc1MwRkJTM2RwUWl4WFFVRlhkVzVDTEVkQlFXTnVReXhYUVVGWExGTkJRVU50VGl4RlFVRlJja3dzUjBGQlR5eFRRVUZMYURaQ0xFdEJRVXR2YzBNc2NVSkJRMjVGT1RkRExFdEJRVXQzYVVJc1YwRkJWM1Z1UWl4SFFVRmpOVUlzWlVGQlpTeFRRVUZETkUwc1JVRkJVWEpNTEVkQlFVOHNVMEZCU3pSWUxHRkJRV0UxV0N4SFFVRkpMRTFCUTI1R01YQkRMRXRCUVV0M2FVSXNWMEZCVjNWdVFpeEhRVUZqTTBJc2FVSkJRV2xDTEZOQlFVTXlUU3hGUVVGUmNrd3NSMEZCVHl4VFFVRkxORmdzWVVGQllUVllMRWRCUVVrc1RVRkRja1l4Y0VNc1MwRkJTM2RwUWl4WFFVRlhkVzVDTEVkQlFXTm9ReXhuUWtGQlowSXNVMEZCUTJkT0xFVkJRVkZ5VEN4SFFVRlBMRk5CUVV0bldTeGhRVUZoYUZrc1RVRkRhRVl4Y0VNc1MwRkJTM2RwUWl4WFFVRlhkVzVDTEVkQlFXTnlRaXhsUVVGbExGTkJRVU54VFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMYTFrc1dVRkJXV3haTEUxQlN6bEZNWEJETEV0QlFVdDNhVUlzVjBGQlYzVnVRaXhIUVVGamNFSXNjMEpCUVhOQ0xGTkJRVU52VFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMZVZvc2FVSkJRV2xDZWxvc1MwRkJTelJhTEVkQlF5OUdkR3BFTEV0QlFVdDNhVUlzVjBGQlYzVnVRaXhIUVVGamJrSXNiVUpCUVcxQ0xGTkJRVU50VFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMTWxvc1owSkJRV2RDTTFvc1MwRkJTelJhTEVkQlF6TkdkR3BFTEV0QlFVdDNhVUlzVjBGQlYzVnVRaXhIUVVGamFrSXNkMEpCUVhkQ0xGTkJRVU5wVFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMWjJFc01rSkJRVEpDYUdFc1MwRkJTelJhTEVkQlF6TkhkR3BFTEV0QlFVdDNhVUlzVjBGQlYzVnVRaXhIUVVGamJFSXNiMEpCUVc5Q0xGTkJRVU5yVFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMYVdFc1owSkJRV2RDYW1Fc1MwRkJTelJhTEVkQlF6VkdkR3BFTEV0QlFVdDNhVUlzVjBGQlYzVnVRaXhIUVVGamVrSXNjMEpCUVhOQ0xGTkJRVU41VFN4RlFVRlJja3dzUjBGQlR5eFRRVUZMTmxvc1dVRkJXVGRhTEV0QlFVczBXaXhIUVVNeFJuUnFSQ3hMUVVGTGQybENMRmRCUVZkMWJrSXNSMEZCWTNoQ0xEUkNRVUUwUWl4VFFVRkRkMDBzUlVGQlVYSk1MRWRCUVU4c1UwRkJTeXRhTEdsQ1FVRnBRaTlhTEV0QlFVczBXaXhKUVVkNlJ5eFpRVUZCVFN4cFFrRkJRU3h6UWtGRlVURlNMRVZCUVZWc2VVTXNTMEZCUzNNNFF5eExRVUZMWWl4dFFrRkJiVUl4UXl4TlFVTjJRMkVzUlVGQlN6VTFReXhMUVVGTEswWXNVVUZCVVd0eFF5eFhRVUZYY25KRExFdEJUemRDYVM5RExFVkJRMEVzYlVWQlF6WkRha3NzUlVGQlJTd3lXVUZMYlVKQkxFVkJRVVVzT0c1Q1FXZENjRVZyU3l4RlFVRlpjRGRETEZOQlFWTnpkRUlzWTBGQll5eFBRVU4yUXpoMFFpeEZRVUZWZW14RExGVkJRVlYwUlN4SlFVRkpMR2RDUVVGcFFpeDNRa0ZEZWtNcmNFTXNSVUZCVlRGdlFpeFZRVUZaZVc5Q0xFVkJSWFJDTEVsQlFVa3pla0lzUlVGQldXeDNRaXhMUVVGTGQzUkRMRk5CUVZONGRFTXNTMEZCU3l0R0xGRkJRVkYxY2tNc1lVRkZka053YUVJc1IwRkRRVUVzUlVGQlZTdEdMRTlCUVU4MmRFSXNSMEZQY2tJc1NVRkJTVU1zUlVGQlYwUXNSVUZCVlc0MFF5eGpRVUZqTEhGQ1FVTjJRM1Z0UXl4RlFVRlJPWE5ETEZOQlFWRXNVMEZCUXpRclF5eEZRVUZSTjJwRUxFZEJSWEpDTEVsQlFVazBka01zUlVGQlYybFZMRVZCUVU5cUswTXNVVUZCVVRCeFF5eFRRVU01UWl4SFFVRkxWaXhGUVVGTUxFTkJSMEVzU1VGQlNXdFZMRVZCUVdWMk4wTXNVMEZCVTNOMFFpeGpRVUZqTEUxQlF6RkRhWFZDTEVWQlFXRTFiRU1zVlVGQlZYUkZMRWxCUVVrc2JVSkJSek5DTEVsQlFVbHRjVU1zUlVGQlRYZzNReXhUUVVGVGMzUkNMR05CUVdNc1UwRkRha05yZFVJc1JVRkJTUzluUXl4TFFVRlBMRmRCUTFnclowTXNSVUZCU1docFJDeE5RVUZSTEVkQlExcG5hVVFzUlVGQlNUZHNReXhWUVVGVmRFVXNTVUZCU1N4dFFrRkJiMElzVVVGRmRFTXNTVUZCU1c5eFF5eEZRVUZSTEd0Q1FVRnZRbkJWTEVWQlEyaERiVlVzUlVGQlNYZ3JReXhoUVVGaExFdEJRVTE1SzBNc1IwRkRka0pFTEVWQlFVbDRLME1zWVVGQllTeDFRa0ZCZDBKeGNVTXNTVUZEYkVJc1NVRkJia0pwVlN4RlFVRlBiRXdzVlVGRFVHOU1MRVZCUVVrelVpeFRRVUZWTEVkQlNXeENMRWxCUVVrMlVpeEZRVUZUTVRkRExGTkJRVk56ZEVJc1kwRkJZeXhUUVVOd1EyOTFRaXhGUVVGUE1TdERMR0ZCUVdFc1RVRkJUM2tyUXl4SFFVY3pRa01zUlVGQlR6RnBRaXhaUVVGamMybENMRVZCUVU4MVZpeFZRVVUxUWpaV0xFVkJRV0V6Vml4WlFVRlpORllzUjBGRGVrSkVMRVZCUVdFelZpeFpRVUZaT0ZZc1IwRkRla0pNTEVWQlFWTjZWaXhaUVVGWk1sWXNSMEZGY2tKRExFVkJRVWsxTVVNc2FVSkJRV2xDTEZOQlFWTXNVMEZCUTJrM1FpeEhRVU16UWl4SlFVRkpPR0VzUlVGQllUbGhMRVZCUVVWNE5VSXNUMEZGWm01UExFVkJRVTk1YVVRc1JVRkJWek51UXl4aFFVRmhMSGRDUVVOdVF5eEhRVUZMT1dFc1JVRkJUQ3hEUVVWQkxFbEJRVWt3YVVRc1JVRkJXU3hGUVVGTGFFa3NTMEZCUzJJc2JVSkJRM1JDYkdZc1JVRkJUU3R1UWl4RlFVRlZka3dzVFVGQlRYWnFReXhOUVVGTExGTkJRVU41YWtNc1IwRkJVeXhQUVVGQlFTeEZRVUZMYkhwRExGRkJRVkV3Y1VNc1YwRkJZVGQxUXl4TFFVTnVSU3hIUVVGTE1qWkNMRVZCUVV3c1EwRkZRU3hKUVVGSloyOUNMRVZCUVZjc1JVRkJTemN3UXl4TFFVRkxPR3hETEV0QlJYSkNRU3hGUVVGUExFZEJRVWdzVFVGQlR5dFBMRWRCUVZVc1IwRkJSaXhEUVVGRlJDeEpRVUZUTEVkQlRUbENibXRFTEVWQlFWRnRhMFFzUlVGQlZYWk1MRTFCUVUxMmQwTXNVVUZCVVN0NlFpeEhRVU53UXl4TFFVRkpjRGhDTEVWQlFWRXNSMEZCV2l4RFFVVkJjVEZETEVWQlFVdHdkME1zVTBGQlVTeFRRVUZEWnpKRExFZEJSVllzU1VGQlNXNURMRVZCUVU5dFF5eEZRVUZKY2tNc1RVRkJUVFUwUXl4SFFVVm9RamcwUXl4SlFVVkViMHdzUlVGQlZ6bFNMRkZCUlZnd1J5eEZRVUZMU0N4VFFVRlZMRVZCU1daSExFVkJRVXRJTEZOQlFWVXNUVUZKZGtJc1JVRkJTM1JOTEdkQ1FVRm5RbnBETEVkQlFXTnVRaXhyUWtGQmJVSXNRMEZEYkVScFFpeGxRVUZuUWl0UUxFVkJRMmhDYWxFc1ZVRkJWeXhEUVVGRmVITkNMRTFCUVU5dmMwSXNTMEZIZUVJc1NVRkJTWGRhTEVWQlFXdERMRU5CUVVWd1dpeFZRVUZYTEVOQlFVVjRjMElzVFVGQlQyOXpRaXhGUVVGSE1Gb3NUMEZCVVRGWExFZEJRVmMzUlN4bFFVRnBRbTFETEdWQlFXZENLMUFzUjBGRGJrZ3NSVUZCUzNCT0xHZENRVUZuUW5wRExFZEJRV05xUWl4MVFrRkJkMEpwWVN4alFVMTJSU3haUVVGQmVVSXNZMEZCUVN4WFFVZEpMRWxCUVVseVdTeEZRVUZwUW01elF5eExRVUZMSzBZc1VVRkJVV3R4UXl4WFFVRlhjbkpETEV0QlJYcEROaTlETEVWQlFVOTZhMFFzUzBGQlMzTTRReXhMUVVGTFlpeHRRa0ZCYlVJeFF5eE5RVU40UXk4MFF5eExRVUZMY1Vvc1NVRkJUU3hIUVVWWWNrb3NTMEZCUzJ0MFF5eFBRVUZQTEZkQlFWa3NWVUZKZUVJc1NVRkdRU3hKUVVGSmQxZ3NSVUZCWXpGclJDeExRVUZMT0VRc1VVRkJVVzlFTEdGQlJYUkNkMDRzUlVGQlNTeEZRVUZIUVN4RlFVRkpLM1pETEVWQlFVc3hkME1zVDBGQlVWY3NTVUZCU3l4RFFVTnNReXhKUVVGSksyNUNMRVZCUVUxcmIwSXNSVUZCVlVRc1IwRkRjRUpFTEVWQlFVc3Zka01zUjBGQlJ6VlJMRkZCUVZGdGVVSXNUMEZCVDNkSExFZEJRM1pDWjI5Q0xFVkJRVXN2ZGtNc1IwRkJSM2MwUWl4UFFVRlBMRmRCUVZrc1dVRkRNMEl3V0N4RlFVRmhibTlDTEVWQlFVdG5iMElzUlVGQlN5OTJReXhIUVVGSk1WVXNUVUZSTDBJc1UwRkJVelJyUkN4RlFVRmhibTlDTEVWQlFYRkNSaXhGUVVGelFuTnZRaXhIUVVNM1JDeEpRVUZKUXl4RlFVTkZReXhGUVVOQlF5eEZRVVZCUXl4RlFVVk9lRzlDTEVWQlFVbHVkVUlzYVVKQlFXbENMR0ZCUVdFc1UwRkJWV2szUWl4SFFVVjRRekJpTEVWQlFXRktMRVZCUVUwdlowUXNVVUZCVVhGRUxGbEJSVE5DTkRsRExFVkJRVk40YjBJc1JVRkJTWG8wUWl4UlFVTmlaMmhFTEVWQlFWRjJZaXhGUVVGRmRXSXNUVUZGVml4SlFVRkpjalpETEVWQk1rUmFMRk5CUVhGQ09IaENMRWRCUldwQ0xFZEJRWE5ETEdOQlFXeERNbTlDTEVWQlFWa3piMElzUlVGQlN5eGpRVU5xUWl4UFFVRlBMRVZCUjFnc1NVRkJTVFJ2UWl4RlFVRlZSQ3hGUVVGWk0yOUNMRVZCUVVzc1owSkJRek5DTm05Q0xFVkJRVmRHTEVWQlFWa3piMElzUlVGQlN5eHBRa0ZEYUVNc1QwRkJVV3BRTEZOQlFWTTJNMElzUjBGQlZ6Y3pRaXhUUVVGVE9ETkNMRWRCYmtWdVFrTXNRMEZCV1U0c1IwRkZNVUpETEVWQlFXTkVMRVZCUVU4MU9VTXNXVUZCWTNORUxFdEJSM1pEWjNsQ0xFVkJRVWx1ZFVJc2FVSkJRV2xDTEdGQlFXRXNVMEZCVldrM1FpeEhRVU40UTNad1F5eExRVUZMY1VZc1RVRkJUV2xuUkN4WlFVRmpMSFZDUVVjM1FqZHZRaXhGUVVGSmJuVkNMR2xDUVVGcFFpeFpRVUZaTEZOQlFWVnBOMElzUjBGRGRrTjJjRU1zUzBGQlMzRkdMRTFCUVUxcFowUXNXVUZCWXl4TlFVYzNRalU0UXl4VFFVRlRORVlzYVVKQlFXbENMR0ZCUVdFc1UwRkJWV2szUWl4SFFVTTNReXhIUVVGSmQySXNSVUZCVVN4RFFVTlNMRWxCUVVsUkxFVkJRVkZvWXl4RlFVRkZkV0lzVFVGQlVVRXNSVUZGZEVKRExFVkJRVTh4TDBNc1RVRkJUU3RDTEUxQlFWTTBPVU1zUlVGQlkwOHNSVUZCVXl4TFFVTTNRMVlzUlVGQlRTOW5SQ3hSUVVGUmRVSXNUVUZCVFN0Q0xFMUJRVkUyT1VNc1JVRkJZVTBzUlVGQlVTeFRRVXQ2UkRjNFF5eFRRVUZUTkVZc2FVSkJRV2xDTEZkQlFWY3NVMEZCVldrM1FpeEhRVVV6UXl4SFFVRkpkMklzUlVGQlVTeERRVWRTTEVsQlFVbG9ReXhGUVVGclF5eERRVU5zUTNCYUxGVkJRVmNzUTBGRFVIaHpRaXhOUVVGUGIzTkNMRVZCUVVkNVdpeFhRVUZaSzBJc1JVRkRjRUk1UWl4UFFVRlJNVmNzUjBGQlZ6bEZMR0ZCUTNSQ2IwTXNaVUZCWjBKelF5eEhRVVYyUWpCWkxFVkJRVTF5V1N4blFrRkJaMEo2UXl4SFFVRmpha0lzZFVKQlFYZENhV0VzUjBGSGFFVm5ReXhQUVVGVE9XcEVMRVZCUTFRMmFrUXNUMEZCVVRkcVJDeEZRVVZTSzJwRUxFOUJRV012YWtRc1MwRlBkRUlzVTBGQlV6QnFSQ3hGUVVGVmREbERMRWRCUTJZc1NVRkJTVzh4UWl4RlFVRk5MM3BDTEZOQlFWTnpkRUlzWTBGQll5eFBRVkZxUXl4UFFWQkJlVWNzUlVGQlNYQXpRaXhOUVVGTldTeEpRVUZOTEVsQlEyaENkekpDTEVWQlFVbHdNMElzVFVGQlRXcEVMRTFCUVZFc1NVRkRiRUp4TmtJc1JVRkJTWEF6UWl4TlFVRk5LMElzVFVGQlVTeE5RVU5zUW5FeFFpeEZRVUZKY0ROQ0xFMUJRVTFUTEZOQlFWY3NWMEZEY2tJeU1rSXNSVUZCU1hBelFpeE5RVUZOYldkRUxFOUJRVk1zWVVGRGJrSXZiMElzUlVGQlNYQXpRaXhOUVVGTmIyZEVMRmRCUVdFc1QwRkRka0pvY0VJc1JVRkJTWEF6UWl4TlFVRk5aME1zVDBGQlUwRXNSVUZCVXl4TFFVTnlRbTh4UWl4RlFXVllMRk5CUVZONWIwSXNSVUZCV1ZFc1JVRkJTM0k0UXl4SFFVTjBRaXhQUVVGUmJrWXNUMEZCVDI5RkxHbENRVUZwUW04NVF5eEZRVUZMTEUxQlFVMTZia01zYVVKQlFXbENOVlVzUzBGTGNFVXNXVUZCUVhNNFF5eDFRa0ZCUVN4elFrRkpVWGhhTEVWQlFXbENibk5ETEV0QlFVc3JSaXhSUVVGUmEzRkRMRmRCUVZkeWNrTXNTMEZEZWtONWIwTXNSVUZCVVhKMFF5eExRV2RDVWl0MVF5eEZRVUZWY20xRExGTkJRVk56ZEVJc1kwRkJZeXhQUVVOeVF5dFpMRVZCUVZFMlZ5eFhRVUZaTEVWQlEzQkNOMWNzUlVGQlVURjNRaXhWUVVGVmRFVXNTVUZCU1N4bFFVVjBRaXhKUVhkQ1NUaHlReXhGUVhoQ1FYWkNMRVZCUVZscVdDeEZRVUZOYVZBc1MwRkJTMklzYlVKQlEzWkNNVU1zUlVGQlVYVk1MRVZCUVZWMlRDeE5RVVYwUWtFc1JVRkJUVE42UXl4VFFVRlJMRk5CUVVNMmVrTXNSMEZEV0N4SlFVRkpOazBzUlVGQlV6ZE5MRVZCUVV0dVN5eG5Ra0ZGYkVJc1IwRkJjMElzU1VGQmJFSm5XQ3hGUVVGUEwzaERMRTlCUVdNc1EwRkRja0lzU1VGQlNXMDJRaXhGUVVGTkswc3NSVUZCU3pkTExGVkJRMlkyU3l4RlFVRkxhRXdzVVVGQlVTeEpRVVZpTEVsQlFVbG9iRUlzUlVGQlMzWm5RaXhUUVVGVGMzUkNMR05CUVdNc1QwRkRhRU12VFN4RlFVRkhlVmtzV1VGQlkzZE5MRVZCUTJwQ0swc3NSVUZCU3pOTExGbEJRVmx5YkVJc1IwRkZha0lzUlVGQlMwOHNTMEZCUzNWc1FpeEZRVUZUT1d4Q0xGRkJSMjVDTEVWQlFVdFBMRXRCUVV0MWJFSXNSVUZCVXl0WExFMUJXVE5DT1d4RUxFdEJRVXQxZEVNc1lVRkJZU3huUWtGQlowSnViME1zVTBGQlVTeFRRVUZETm1wQ0xFZEJTM1pETEVWQlFVdG5iVUlzWjBKQlFXZENhRzFDTEVWQlFVa3NRMEZEY2tKcmJVSXNWVUZCVnl4VFFVRlZOVVlzUjBGRFduWndReXhMUVVGTGNXVXNWVUZCVlhoWExGTkJRVk1zWjBKQlN6ZENaeXRETEVWQlFXRTNiRVFzUzBGRFlrRXNTMEZCUzNGR0xFMUJRVTB3WjBRc1VVRkJWU3hQUVV4cVFrWXNUMEZCWVRWclJDeEhRVTl5UW0xMVF5eFZRVUZYTEZOQlFWVTNSaXhIUVVOcVFrRXNSVUZCUlhSclFpeHBRa0ZEUnpSblF5eEhRVVZCTjJ4RUxFdEJRVXR4WlN4VlFVRlZlRmNzVTBGQlV5eG5Ra0ZETjBJM1NDeExRVUZMY1dVc1ZVRkJWVzlJTEU5QlFVOHNVMEZGTVVJMGNFSXNWVUZCVnl4VFFVRlZPVVlzUjBGRGFrSkJMRVZCUVVWMGEwSXNhVUpCUTBjMFowTXNSMEZGUVRkc1JDeExRVUZMY1dVc1ZVRkJWWGhYTEZOQlFWTXNaMEpCUlRkQ04wZ3NTMEZCUzNGbExGVkJRVlYwUlN4SlFVRkpMRk5CUjNaQ2RURkNMRk5CUVZVc1UwRkJWUzlHTEVkQlEyaENRU3hGUVVGRmRHdENMR2xDUVVOSE5HZERMRWRCUlVFM2JFUXNTMEZCUzNGbExGVkJRVlY0Vnl4VFFVRlRMR2RDUVVNM1FqZElMRXRCUVV0eFpTeFZRVUZWZEVVc1NVRkJTU3hUUVVsMlFuY3hRaXhSUVVGVExGTkJRVlZvUnl4SFFVTm1RU3hGUVVGRmRHdENMR2xDUVVOSE5HZERMRWxCUTB3M2JFUXNTMEZCUzNGR0xFMUJRVTB3WjBRc1VVRkJWU3hOUVVWNlFuWlhMRXRCUVUwc1UwRkJWV3BITEVkQlJWb3NSMEZFUVVFc1JVRkJSWFJyUWl4cFFrRkRSelJuUXl4SlFVVk1OMnhFTEV0QlFVdHhaU3hWUVVGVmIwZ3NUMEZCVHl4UlFVVnFRbnBzUWl4TFFVRkxjV1VzVlVGQlZYaFhMRk5CUVZNc1owSkJRM3BDWnl0RExFbEJSbU0zYkVRc1RVRkZiRUlzUTBGTlFTeEpRVUZKWjIxRUxFVkJRV0ZvYlVRc1MwRkJTemh0UWl4UlFVRlJMRTFCUXpsQ0xFZEJRVXRyTDBJc1JVRkJUQ3hEUVVkQkxFbEJRVWxETEVWQlFXZENiRTRzUlVGQlRYWnFReXhOUVVGTExGTkJRVU41VkN4SFFVRlBMRTlCUVVGQkxFVkJRVWR1YkVJc1ZVRkJXV3RwUkN4TFFVTjBSQ3hIUVVGTFF5eEZRVUZNTEVOQlJVRXNTVUZCU1VNc1JVRkJWVzVPTEVWQlFVMTJkME1zVVVGQlVYazVReXhIUVVkNFFrVXNSVUZCV1U0c1JVRkJWeThyUWl4UlFVRlJMRTFCUTI1RExFZEJRVXR4TDBJc1JVRkJUQ3hEUVVkQkxFbEJRVWxETEVWQlFXZENjazRzUlVGQlRYWnFReXhOUVVGTExGTkJRVU41VkN4SFFVRlBMRTlCUVVGQkxFVkJRVWR1YkVJc1ZVRkJXWEZwUkN4TFFVTjBSQ3hIUVVGTFJpeEZRVUZNTEVOQlJVRXNTVUZCU1M4MFFpeEZRVUZaTm5KQ0xFVkJRVTEyZDBNc1VVRkJVVFE1UXl4SFFVazVRaXhIUVVGSlJpeEhRVUZYYURWQ0xFVkJRV1lzUTBGTFFXMDFRaXhGUVVGUkwwSXNSVUZCVjNaTUxFVkJRVTgzY2tJc1JVRkJWMmMxUWl4SFFVVnlReXhKUVVGSk1WRXNSVUZCVDI1SkxFVkJRVTB6T1VJc1MwRkJTemhzUXl4TFFVMTBRaTh3UWl4WlFVRlhMRmRCUlZBc1NVRkJTeXhKUVVGSmRHZENMRVZCUVZFc1JVRkJSMEVzUlVGQlVYRXhReXhGUVVGTGVtaERMRTlCUVZFMVZDeEpRVUZUTEVOQlJUbERMRWxCUVVscE4wTXNSVUZCVFRWR0xFVkJRVXR5TVVNc1IwRkRXRFEwUXl4RlFVRlJjVU1zUlVGQlNYSkRMRTFCUTJoQ0xFZEJRVWx0VGl4SFFVRlhhRFZDTEVWQlFWY3NUMEZETVVKdE5VSXNSVUZCVVdwTUxFVkJRVXR5UXl4RlFVRlBOM0pDTEVWQlFWZG5OVUlzUjBGUGJrTTNXU3hGUVVGTllpeG5Ra0ZCWjBKNlF5eEhRVUZqYmtJc2EwSkJRMmhETEVOQlFVVnBRaXhsUVVGblFuTkRMRVZCUVdkQ2VFTXNWVUZCVnl4RFFVRkZlSE5DTEUxQlFVOXZjMElzUzBGRk1VUXNTVUZCU1hkYUxFVkJRV3RETEVOQlFVVndXaXhWUVVGWExFTkJRVVY0YzBJc1RVRkJUMjl6UWl4RlFVRkhNRm9zVDBGQlVURlhMRWRCUVZjMVJTeGhRVUZsYTBNc1pVRkJaMEp6UXl4SFFVTnFTR3RDTEVWQlFVMWlMR2RDUVVGblFucERMRWRCUVdOcVFpeDFRa0ZCZDBKcFlTeExRVWMzUkN4cFFrRlBaaXhKUVVGSmMwUXNSVUZCVlN4VFFVRjNRMnBNTEVWQlEyWnlReXhGUVVOWU4zSkNMRVZCUTBGbk5VSXNSMEZIZUVJc1IwRkJTV2cxUWl4SFFVRmhaelZDTEVWQlFXcENMRU5CUlVFc1NVRkJTV3h1UXl4RlFVRk5jMjVETEVWQlFWZERMRWxCUldwQ2NqVkNMRVZCUVZsbk5VSXNTVUZEV214dVF5eEZRVUZOYzI1RExFVkJRVmRGTEV0QlIycENlRzVETEVsQlFWRnpia01zUlVGQlYwVXNTVUZEYmtKRExFVkJRVkV4VGl4RlFVRlBOM0pDTEVWQlFWZG5OVUlzUjBGSE1VSlJMRVZCUVZFelRpeEZRVUZQTjNKQ0xFVkJRVmRuTlVJc1IwRkpPVUk1U3l4RlFVRkpja01zVFVGQlVTeEhRVU5hY1VNc1JVRkJTV3hETEZOQlFWTklMRXRCUzJJd1RpeEZRVUZWTEZOQlFUSkRNVTRzUlVGRE4wSTNja0lzUlVGRFFXYzFRaXhIUVVONFFpeEpRVUZMTEVsQlFVbDRlRU1zUlVGQlNYZFpMRVZCUVZkNFdTeEZRVUZKZDNoRExFVkJRVk40ZUVNc1NVRkRha05wZVVNc1JVRkJTelZPTEVWQlFVOXlhME1zUlVGQlIwRXNSVUZCU1N4SlFVbDJRbWQ1UXl4RlFVRlZMRk5CUVRKRE0wNHNSVUZETjBJM2NrSXNSVUZEUVdjMVFpeEhRVU40UWl4SlFVRkxMRWxCUVVsNGVFTXNSVUZCU1hkWkxFVkJRVmQ0V1N4RlFVRkpkM2hETEVWQlFWTjRlRU1zU1VGRGFrTnBlVU1zUlVGQlN6Vk9MRVZCUVU5eWEwTXNSVUZCUjBFc1JVRkJTU3hKUVVsMlFtbDVReXhGUVVGUExGTkJRVEpEUXl4RlFVTXhRa01zUlVGRFFVTXNSMEZEZUVJc1NVRkJTVU1zUlVGQlQwZ3NSVUZCU1VNc1IwRkRaa1FzUlVGQlNVTXNSMEZCVFVRc1JVRkJTVVVzUjBGRFpFWXNSVUZCU1VVc1IwRkJUVU1zUjBGSFZsUXNSVUZCWVN4RFFVRkZSU3hKUVVGTExHZENRVUZwUWtRc1NVRkJTeXhyUWtGSGJFUXNXVUZCUVRkRExESkNRVUZCTEZOQlFUSkNlRm9zUjBGTFZrRXNSVUZCVlZBc1ZVRkJWWE5hTEU5QlFXcERMRWxCUTBsd1Z5eEZRVUZUTjNORExFdEJRVXNyUml4UlFVRlJPRzFETEU5QlJYUkNORmdzUlVGQlQzcHJSQ3hMUVVGTGN6aERMRXRCUVV0aUxHMUNRVUZ0UWpGRExFMUJSWEJEYVU4c1JVRkJWU3hIUVVOa2RrTXNSVUZCUzNJdlF5eFRRVUZSTEZOQlFVTnRNMElzUlVGQlMzQTRRaXhIUVVWbUxFbEJRVWw1UWl4RlFVRlBNalpDTEVWQlFVbDRNa0lzVVVGQlVUQnhReXhUUVVOMlFpeEhRVUZMTjNWRExFVkJRVXdzUTBGRlFTeEpRVUZKT0RoRExFZEJRVTBzUlVGRFRtNXBRaXhGUVVGSmVWSXNVMEZCVXl4clFrRkRZakJSTEVkQlFVMHNSMEZGVml4SlFVRkpkVWtzUlVGQk5FSXNRMEZCUlhwWExFMUJRVTlxVlN4RlFVRkplVkVzVDBGQlR5eFRRVUZWTmxJc1VVRkJVM1JwUWl4RlFVRkpkV01zVVVGQlUyOVBMRlZCUVZkNFNTeEZRVUZMVHl4VFFVRlZPU3RETEVkQlJUbEhObTFFTEVWQlFWRndiRVFzUjBGQlVYRnNSQ3hOUVV0d1FuaG5RaXhIUVVGQkxFOUJRVzlDYjBjc1IwRkRjRUp3YzBJc1dVRkJWeXhYUVVWUVoyMUNMRWRCUVdGaExGRkJRVkYxUml4RlFVRlJiV0VzUlVGQlV5eERRVUZGYkdkQ0xFdEJRVTBzUjBGQlNYRm5RaXhSUVVGUkxFVkJRVTFETEZOQlFWVXNZVUZETTBVc1RVRkhVQ3haUVVGQmVrUXNaMEpCUVVFc1UwRkJaMEo2V2l4SFFVOWFiSEZETEV0QlFVczBha1FzYlVKQlMwdzFha1FzUzBGQlN6SnNSQ3g1UWtGTFRETnNSQ3hMUVVGTGQydEVMR2xDUVVWaUxFVkJOVEpEUVN4RFFVRnBRMmhYTEN0a1F6VkNha01zWlVGRlNTeFhRVUZaZW05RExFZEJRVm9zVFVGRFNTeFpRVUZOUVN4SlFVRlJMRmxCUTJRc1JVRkJTMEVzVVVGQlZVRXNSVUZEWml4RlFVRkxjWE5ETEZkQlRXSXNUMEZZYzBNc1VVRlJiRU1zV1VGQlFVRXNUMEZCUVN4WFFVTkpjSGxETEV0QlFVczRSQ3hSUVVGVk5FVXNVMEZCVTIwMFFpeGxRVUZsTjJkRExFdEJRVXNyUml4UlFVRlJlWGhETEZsQlJUVkVMRVZCV0VFc1EwRkJjME42UlNJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTDNkbFluQmhZMnN2ZFc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMM055WXk5elpYSjJhV05sY3k5emRISnBibWN1WlhoMFpXNXphVzl1Y3k1MGN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzkzWldKd1lXTnJMM0oxYm5ScGJXVXZaR1ZtYVc1bElIQnliM0JsY25SNUlHZGxkSFJsY25NaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2ZDJWaWNHRmpheTl5ZFc1MGFXMWxMMmhoYzA5M2JsQnliM0JsY25SNUlITm9iM0owYUdGdVpDSXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM5M1pXSndZV05yTDNKMWJuUnBiV1V2YldGclpTQnVZVzFsYzNCaFkyVWdiMkpxWldOMElpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTlsYm5WdGN5NXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdlpHOXRMWFYwYVd4ekwyZGxkRTV2WkdWT1lXMWxMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOWtiMjB0ZFhScGJITXZaMlYwVjJsdVpHOTNMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOWtiMjB0ZFhScGJITXZhVzV6ZEdGdVkyVlBaaTVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZiVzlrYVdacFpYSnpMMkZ3Y0d4NVUzUjViR1Z6TG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTkxZEdsc2N5OW5aWFJDWVhObFVHeGhZMlZ0Wlc1MExtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5MWRHbHNjeTl0WVhSb0xtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5a2IyMHRkWFJwYkhNdloyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOWtiMjB0ZFhScGJITXZaMlYwVEdGNWIzVjBVbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2Wkc5dExYVjBhV3h6TDJOdmJuUmhhVzV6TG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTlrYjIwdGRYUnBiSE12WjJWMFEyOXRjSFYwWldSVGRIbHNaUzVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZaRzl0TFhWMGFXeHpMMmx6VkdGaWJHVkZiR1Z0Wlc1MExtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5a2IyMHRkWFJwYkhNdloyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MExtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5a2IyMHRkWFJwYkhNdloyVjBVR0Z5Wlc1MFRtOWtaUzVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZaRzl0TFhWMGFXeHpMMmRsZEU5bVpuTmxkRkJoY21WdWRDNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdmRYUnBiSE12WjJWMFRXRnBia0Y0YVhOR2NtOXRVR3hoWTJWdFpXNTBMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOTFkR2xzY3k5M2FYUm9hVzR1YW5NaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5dWIyUmxYMjF2WkhWc1pYTXZRSEJ2Y0hCbGNtcHpMMk52Y21VdmJHbGlMM1YwYVd4ekwyMWxjbWRsVUdGa1pHbHVaMDlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdmRYUnBiSE12WjJWMFJuSmxjMmhUYVdSbFQySnFaV04wTG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTkxZEdsc2N5OWxlSEJoYm1SVWIwaGhjMmhOWVhBdWFuTWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXViMlJsWDIxdlpIVnNaWE12UUhCdmNIQmxjbXB6TDJOdmNtVXZiR2xpTDIxdlpHbG1hV1Z5Y3k5aGNuSnZkeTVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZkWFJwYkhNdloyVjBWbUZ5YVdGMGFXOXVMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOXRiMlJwWm1sbGNuTXZZMjl0Y0hWMFpWTjBlV3hsY3k1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2Ylc5a2FXWnBaWEp6TDJWMlpXNTBUR2x6ZEdWdVpYSnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOTFkR2xzY3k5blpYUlBjSEJ2YzJsMFpWQnNZV05sYldWdWRDNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdmRYUnBiSE12WjJWMFQzQndiM05wZEdWV1lYSnBZWFJwYjI1UWJHRmpaVzFsYm5RdWFuTWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXViMlJsWDIxdlpIVnNaWE12UUhCdmNIQmxjbXB6TDJOdmNtVXZiR2xpTDJSdmJTMTFkR2xzY3k5blpYUlhhVzVrYjNkVFkzSnZiR3d1YW5NaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5dWIyUmxYMjF2WkhWc1pYTXZRSEJ2Y0hCbGNtcHpMMk52Y21VdmJHbGlMMlJ2YlMxMWRHbHNjeTluWlhSWGFXNWtiM2RUWTNKdmJHeENZWEpZTG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTlrYjIwdGRYUnBiSE12YVhOVFkzSnZiR3hRWVhKbGJuUXVhbk1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFIQnZjSEJsY21wekwyTnZjbVV2YkdsaUwyUnZiUzExZEdsc2N5OW5aWFJUWTNKdmJHeFFZWEpsYm5RdWFuTWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXViMlJsWDIxdlpIVnNaWE12UUhCdmNIQmxjbXB6TDJOdmNtVXZiR2xpTDJSdmJTMTFkR2xzY3k5c2FYTjBVMk55YjJ4c1VHRnlaVzUwY3k1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2ZFhScGJITXZjbVZqZEZSdlEyeHBaVzUwVW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdlpHOXRMWFYwYVd4ekwyZGxkRU5zYVhCd2FXNW5VbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2Wkc5dExYVjBhV3h6TDJkbGRGWnBaWGR3YjNKMFVtVmpkQzVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZaRzl0TFhWMGFXeHpMMmRsZEVSdlkzVnRaVzUwVW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdmRYUnBiSE12WTI5dGNIVjBaVTltWm5ObGRITXVhbk1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFIQnZjSEJsY21wekwyTnZjbVV2YkdsaUwzVjBhV3h6TDJSbGRHVmpkRTkyWlhKbWJHOTNMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2Ym05a1pWOXRiMlIxYkdWekwwQndiM0J3WlhKcWN5OWpiM0psTDJ4cFlpOXRiMlJwWm1sbGNuTXZabXhwY0M1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2ZFhScGJITXZZMjl0Y0hWMFpVRjFkRzlRYkdGalpXMWxiblF1YW5NaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5dWIyUmxYMjF2WkhWc1pYTXZRSEJ2Y0hCbGNtcHpMMk52Y21VdmJHbGlMMjF2WkdsbWFXVnljeTlvYVdSbExtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5dGIyUnBabWxsY25NdmIyWm1jMlYwTG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTl0YjJScFptbGxjbk12Y0c5d2NHVnlUMlptYzJWMGN5NXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5QWNHOXdjR1Z5YW5NdlkyOXlaUzlzYVdJdmJXOWthV1pwWlhKekwzQnlaWFpsYm5SUGRtVnlabXh2ZHk1cWN5SXNJbmRsWW5CaFkyczZMeTlpYzJSaGRHRjBZV0pzWlM4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBY0c5d2NHVnlhbk12WTI5eVpTOXNhV0l2ZFhScGJITXZaMlYwUVd4MFFYaHBjeTVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZaRzl0TFhWMGFXeHpMMmRsZEVOdmJYQnZjMmwwWlZKbFkzUXVhbk1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFIQnZjSEJsY21wekwyTnZjbVV2YkdsaUwyUnZiUzExZEdsc2N5OW5aWFJPYjJSbFUyTnliMnhzTG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTlrYjIwdGRYUnBiSE12WjJWMFNGUk5URVZzWlcxbGJuUlRZM0p2Ykd3dWFuTWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXViMlJsWDIxdlpIVnNaWE12UUhCdmNIQmxjbXB6TDJOdmNtVXZiR2xpTDNWMGFXeHpMMjl5WkdWeVRXOWthV1pwWlhKekxtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5amNtVmhkR1ZRYjNCd1pYSXVhbk1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFIQnZjSEJsY21wekwyTnZjbVV2YkdsaUwzVjBhV3h6TDJSbFltOTFibU5sTG1weklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmJtOWtaVjl0YjJSMWJHVnpMMEJ3YjNCd1pYSnFjeTlqYjNKbEwyeHBZaTkxZEdsc2N5OXRaWEpuWlVKNVRtRnRaUzVxY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDI1dlpHVmZiVzlrZFd4bGN5OUFjRzl3Y0dWeWFuTXZZMjl5WlM5c2FXSXZjRzl3Y0dWeUxtcHpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCd2IzQndaWEpxY3k5amIzSmxMMnhwWWk5d2IzQndaWEl0YkdsMFpTNXFjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMMjV2WkdWZmJXOWtkV3hsY3k5aWIyOTBjM1J5WVhBdlpHbHpkQzlxY3k5aWIyOTBjM1J5WVhBdVpYTnRMbXB6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2YzNKakwzTmxjblpwWTJWekwwTnZiMnRwWlVobGJIQmxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OXpaWEoyYVdObGN5OWtZWFJoTFdWMlpXNTBjeTUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OXpaWEoyYVdObGN5OWtZWFJoTFdWMlpXNTBjeTF6WlhKMmFXTmxMblJ6SWl3aWQyVmljR0ZqYXpvdkwySnpaR0YwWVhSaFlteGxMeTR2YzNKakwzTmxjblpwWTJWekwzTmxjM05wYjI0dGMzUnZjbUZuWlMxelpYSjJhV05sTG5Seklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmMzSmpMM05sY25acFkyVnpMMlJoZEdFdGRHRmliR1V0WkdselkyOTJaWEo1TFhObGNuWnBZMlV1ZEhNaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlDVTBSaGRHRlVZV0pzWlVKaGMyVXVkSE1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl6Y21NdlkyOXRiVzl1Vkhsd1pYTXZZMjl0Ylc5dUxYUjVjR1Z6TG5Seklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12UWxORVlYUmhWR0ZpYkdWSmJuQjFkQzUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMEpUUkdGMFlWUmhZbXhsUTJobFkydENiM2d1ZEhNaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlDVTBSaGRHRlVZV0pzWlVObGJHd3VkSE1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OUNVMFJoZEdGVVlXSnNaVWgwZEhCRGJHbGxiblF1ZEhNaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlDVTBSaGRHRlVZV0pzWlZCaFoybHVZWFJwYjI0dWRITWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5Q1UwUmhkR0ZVWVdKc1pVbHVabWx1YVhSbFUyTnliMnhzTG5Seklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12UWxORVlYUmhWR0ZpYkdWVFpXeGxZM1J2Y2xkcGJtUnZkME52Ykd4bFkzUnBiMjR1ZEhNaUxDSjNaV0p3WVdOck9pOHZZbk5rWVhSaGRHRmliR1V2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlDVTBSaGRHRlVZV0pzWlUxaGNtdGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMEpUUkdGMFlWUmhZbXhsUVdOMGFXOXVjeTUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMEpUUkdGMFlWUmhZbXhsVkdWNGRFbHVjSFYwTG5Seklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12UWxORVlYUmhWR0ZpYkdWVFpXeGxZM1JQY0hScGIyNHVkSE1pTENKM1pXSndZV05yT2k4dlluTmtZWFJoZEdGaWJHVXZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OUNVMFJoZEdGVVlXSnNaVk5sYkdWamRDNTBjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMM055WXk5amIyMXdiMjVsYm5SekwwSlRSR0YwWVZSaFlteGxRblYwZEc5dUxuUnpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdlFsTkVZWFJoVkdGaWJHVlRaV3hsWTNSdmNpNTBjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMM055WXk5amIyMXdiMjVsYm5SekwwSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSlhhVzVrYjNjdWRITWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5Q1UwUmhkR0ZVWVdKc1pWSnZkeTUwY3lJc0luZGxZbkJoWTJzNkx5OWljMlJoZEdGMFlXSnNaUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMEpUUkdGMFlWUmhZbXhsVW05M1EyOXNiR1ZqZEdsdmJpNTBjeUlzSW5kbFluQmhZMnM2THk5aWMyUmhkR0YwWVdKc1pTOHVMM055WXk5amIyMXdiMjVsYm5SekwwSlRSR0YwWVZSaFlteGxTR1ZoWkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDJKelpHRjBZWFJoWW14bEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdlFsTkVZWFJoVkdGaWJHVkNiMlI1TG5Seklpd2lkMlZpY0dGamF6b3ZMMkp6WkdGMFlYUmhZbXhsTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12UWxORVlYUmhWR0ZpYkdVdWRITWlMQ0ozWldKd1lXTnJPaTh2WW5Oa1lYUmhkR0ZpYkdVdkxpOXpjbU12WTI5dGNHOXVaVzUwY3k5Q1UxUmxlSFJKYm5CMWRFVjRkQzUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNGdkMlZpY0dGamExVnVhWFpsY25OaGJFMXZaSFZzWlVSbFptbHVhWFJwYjI0b2NtOXZkQ3dnWm1GamRHOXllU2tnZTF4dVhIUnBaaWgwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUcxdlpIVnNaU0E5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVdOMGIzSjVLQ2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVXVZVzFrS1Z4dVhIUmNkR1JsWm1sdVpTaGJYU3dnWm1GamRHOXllU2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEdWNGNHOXlkSE5iWENKaWMyUmhkR0YwWVdKc1pWd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JseDBaV3h6WlZ4dVhIUmNkSEp2YjNSYlhDSmljMlJoZEdGMFlXSnNaVndpWFNBOUlHWmhZM1J2Y25rb0tUdGNibjBwS0hObGJHWXNJR1oxYm1OMGFXOXVLQ2tnZTF4dWNtVjBkWEp1SUNJc0lseHlYRzVwYm5SbGNtWmhZMlVnVTNSeWFXNW5JSHRjY2x4dUlDQWdJSFJ2UTJGdFlXeERZWE5sS0NrNklITjBjbWx1Wnp0Y2NseHVJQ0FnSUhSdlVHRnpZMkZzUTJGelpTZ3BPaUJ6ZEhKcGJtYzdYSEpjYmlBZ0lDQjBiMUJoYzJOaGJFTmhjMlZLYzI5dUtDazZJSE4wY21sdVp6dGNjbHh1SUNBZ0lHWnZjbTFoZENncE9pQnpkSEpwYm1jN1hISmNibjFjY2x4dVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyOXVkbVZ5ZEhNZ2MzUnlhVzVuSUhSdklHTmhiV0ZzSUdOaGMybHVaMXh5WEc0Z0tpQkFjbVYwZFhKdWN5QmpZVzFsYkVOaGMybHVaeUJ2WmlCMGFHVWdjM1J5YVc1blhISmNiaUFxTDF4eVhHNGdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNTBiME5oYldGc1EyRnpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsY0d4aFkyVW9MeWcvT2w1Y1hIZDhXMEV0V2wxOFhGeGlYRngzS1M5bkxDQm1kVzVqZEdsdmJpaDNiM0prTENCcGJtUmxlQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJtUmxlQ0E5UFQwZ01DQS9JSGR2Y21RdWRHOU1iM2RsY2tOaGMyVW9LU0E2SUhkdmNtUXVkRzlWY0hCbGNrTmhjMlVvS1R0Y2NseHVJQ0FnSUNBZ2ZTa3VjbVZ3YkdGalpTZ3ZYRnh6S3k5bkxDQW5KeWs3WEhKY2JuMDdYSEpjYmx4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVOdmJuWmxjblJ6SUhOMGNtbHVaeUIwYnlCd1lYTmpZV3dnWTJGemFXNW5YSEpjYmlBcUlFQnlaWFIxY201eklGQmhjMk5oYkVOaGMybHVaeUJ2WmlCMGFHVWdjM1J5YVc1blhISmNiaUFxTDF4eVhHNVRkSEpwYm1jdWNISnZkRzkwZVhCbExuUnZVR0Z6WTJGc1EyRnpaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ3YkdGalpTZ3ZLRDg2WGx4Y2QzeGJRUzFhWFh4Y1hHSmNYSGNwTDJjc0lHWjFibU4wYVc5dUtIZHZjbVFzSUdsdVpHVjRLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdVpHVjRJRDA5UFNBd0lEOGdkMjl5WkM1MGIxVndjR1Z5UTJGelpTZ3BJRG9nZDI5eVpDNTBiMHh2ZDJWeVEyRnpaU2dwTzF4eVhHNGdJQ0FnSUNCOUtTNXlaWEJzWVdObEtDOWNYSE1yTDJjc0lDY25LVHRjY2x4dWZUdGNjbHh1WEhKY2JsTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWRHOVFZWE5qWVd4RFlYTmxTbk52YmlBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wd2JHRmpaU2d2S0Q4NlhseGNkM3hiUVMxYVhYeGNYR0pjWEhjcEwyY3NJR1oxYm1OMGFXOXVLSGR2Y21Rc0lHbHVaR1Y0S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVaR1Y0SUQwOVBTQXdJRDhnZDI5eVpDNTBiMVZ3Y0dWeVEyRnpaU2dwSURvZ2QyOXlaRHRjY2x4dUlDQWdJQ0FnZlNrdWNtVndiR0ZqWlNndlhGeHpLeTluTENBbkp5azdYSEpjYm4wN1hISmNibHh5WEc1cFppQW9JVk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabTl5YldGMEtTQjdYSEpjYmlBZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1bWIzSnRZWFFnUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lIWmhjaUJoY21keklEMGdZWEpuZFcxbGJuUnpPMXh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wd2JHRmpaU2d2ZXloY1hHUXJLWDB2Wnl3Z1puVnVZM1JwYjI0b2JXRjBZMmdzSUc1MWJXSmxjaWtnZXlCY2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21kelcyNTFiV0psY2wwZ0lUMGdKM1Z1WkdWbWFXNWxaQ2RjY2x4dUlDQWdJQ0FnSUNBL0lHRnlaM05iYm5WdFltVnlYVnh5WEc0Z0lDQWdJQ0FnSURvZ2JXRjBZMmhjY2x4dUlDQWdJQ0FnTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlR0Y2NseHVmVnh5WEc0aUxDSXZMeUJVYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzUyWVhJZ1gxOTNaV0p3WVdOclgyMXZaSFZzWlY5allXTm9aVjlmSUQwZ2UzMDdYRzVjYmk4dklGUm9aU0J5WlhGMWFYSmxJR1oxYm1OMGFXOXVYRzVtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNkQzh2SUVOb1pXTnJJR2xtSUcxdlpIVnNaU0JwY3lCcGJpQmpZV05vWlZ4dVhIUjJZWElnWTJGamFHVmtUVzlrZFd4bElEMGdYMTkzWldKd1lXTnJYMjF2WkhWc1pWOWpZV05vWlY5ZlcyMXZaSFZzWlVsa1hUdGNibHgwYVdZZ0tHTmhZMmhsWkUxdlpIVnNaU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzVjZEZ4MGNtVjBkWEp1SUdOaFkyaGxaRTF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVYSFI5WEc1Y2RDOHZJRU55WldGMFpTQmhJRzVsZHlCdGIyUjFiR1VnS0dGdVpDQndkWFFnYVhRZ2FXNTBieUIwYUdVZ1kyRmphR1VwWEc1Y2RIWmhjaUJ0YjJSMWJHVWdQU0JmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOWJiVzlrZFd4bFNXUmRJRDBnZTF4dVhIUmNkQzh2SUc1dklHMXZaSFZzWlM1cFpDQnVaV1ZrWldSY2JseDBYSFF2THlCdWJ5QnRiMlIxYkdVdWJHOWhaR1ZrSUc1bFpXUmxaRnh1WEhSY2RHVjRjRzl5ZEhNNklIdDlYRzVjZEgwN1hHNWNibHgwTHk4Z1JYaGxZM1YwWlNCMGFHVWdiVzlrZFd4bElHWjFibU4wYVc5dVhHNWNkRjlmZDJWaWNHRmphMTl0YjJSMWJHVnpYMTliYlc5a2RXeGxTV1JkS0cxdlpIVnNaU3dnYlc5a2RXeGxMbVY0Y0c5eWRITXNJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThwTzF4dVhHNWNkQzh2SUZKbGRIVnliaUIwYUdVZ1pYaHdiM0owY3lCdlppQjBhR1VnYlc5a2RXeGxYRzVjZEhKbGRIVnliaUJ0YjJSMWJHVXVaWGh3YjNKMGN6dGNibjFjYmx4dUlpd2lMeThnWkdWbWFXNWxJR2RsZEhSbGNpQm1kVzVqZEdsdmJuTWdabTl5SUdoaGNtMXZibmtnWlhod2IzSjBjMXh1WDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0lEMGdLR1Y0Y0c5eWRITXNJR1JsWm1sdWFYUnBiMjRwSUQwK0lIdGNibHgwWm05eUtIWmhjaUJyWlhrZ2FXNGdaR1ZtYVc1cGRHbHZiaWtnZTF4dVhIUmNkR2xtS0Y5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJ5aGtaV1pwYm1sMGFXOXVMQ0JyWlhrcElDWW1JQ0ZmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG04b1pYaHdiM0owY3l3Z2EyVjVLU2tnZTF4dVhIUmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lHdGxlU3dnZXlCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCblpYUTZJR1JsWm1sdWFYUnBiMjViYTJWNVhTQjlLVHRjYmx4MFhIUjlYRzVjZEgxY2JuMDdJaXdpWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dklEMGdLRzlpYWl3Z2NISnZjQ2tnUFQ0Z0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbW9zSUhCeWIzQXBLU0lzSWk4dklHUmxabWx1WlNCZlgyVnpUVzlrZFd4bElHOXVJR1Y0Y0c5eWRITmNibDlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y2lBOUlDaGxlSEJ2Y25SektTQTlQaUI3WEc1Y2RHbG1LSFI1Y0dWdlppQlRlVzFpYjJ3Z0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5a2dlMXh1WEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NzSUhzZ2RtRnNkV1U2SUNkTmIyUjFiR1VuSUgwcE8xeHVYSFI5WEc1Y2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0FuWDE5bGMwMXZaSFZzWlNjc0lIc2dkbUZzZFdVNklIUnlkV1VnZlNrN1hHNTlPeUlzSW1WNGNHOXlkQ0IyWVhJZ2RHOXdJRDBnSjNSdmNDYzdYRzVsZUhCdmNuUWdkbUZ5SUdKdmRIUnZiU0E5SUNkaWIzUjBiMjBuTzF4dVpYaHdiM0owSUhaaGNpQnlhV2RvZENBOUlDZHlhV2RvZENjN1hHNWxlSEJ2Y25RZ2RtRnlJR3hsWm5RZ1BTQW5iR1ZtZENjN1hHNWxlSEJ2Y25RZ2RtRnlJR0YxZEc4Z1BTQW5ZWFYwYnljN1hHNWxlSEJ2Y25RZ2RtRnlJR0poYzJWUWJHRmpaVzFsYm5SeklEMGdXM1J2Y0N3Z1ltOTBkRzl0TENCeWFXZG9kQ3dnYkdWbWRGMDdYRzVsZUhCdmNuUWdkbUZ5SUhOMFlYSjBJRDBnSjNOMFlYSjBKenRjYm1WNGNHOXlkQ0IyWVhJZ1pXNWtJRDBnSjJWdVpDYzdYRzVsZUhCdmNuUWdkbUZ5SUdOc2FYQndhVzVuVUdGeVpXNTBjeUE5SUNkamJHbHdjR2x1WjFCaGNtVnVkSE1uTzF4dVpYaHdiM0owSUhaaGNpQjJhV1YzY0c5eWRDQTlJQ2QyYVdWM2NHOXlkQ2M3WEc1bGVIQnZjblFnZG1GeUlIQnZjSEJsY2lBOUlDZHdiM0J3WlhJbk8xeHVaWGh3YjNKMElIWmhjaUJ5WldabGNtVnVZMlVnUFNBbmNtVm1aWEpsYm1ObEp6dGNibVY0Y0c5eWRDQjJZWElnZG1GeWFXRjBhVzl1VUd4aFkyVnRaVzUwY3lBOUlDOHFJMTlmVUZWU1JWOWZLaTlpWVhObFVHeGhZMlZ0Wlc1MGN5NXlaV1IxWTJVb1puVnVZM1JwYjI0Z0tHRmpZeXdnY0d4aFkyVnRaVzUwS1NCN1hHNGdJSEpsZEhWeWJpQmhZMk11WTI5dVkyRjBLRnR3YkdGalpXMWxiblFnS3lCY0lpMWNJaUFySUhOMFlYSjBMQ0J3YkdGalpXMWxiblFnS3lCY0lpMWNJaUFySUdWdVpGMHBPMXh1ZlN3Z1cxMHBPMXh1Wlhod2IzSjBJSFpoY2lCd2JHRmpaVzFsYm5SeklEMGdMeW9qWDE5UVZWSkZYMThxTDF0ZExtTnZibU5oZENoaVlYTmxVR3hoWTJWdFpXNTBjeXdnVzJGMWRHOWRLUzV5WldSMVkyVW9ablZ1WTNScGIyNGdLR0ZqWXl3Z2NHeGhZMlZ0Wlc1MEtTQjdYRzRnSUhKbGRIVnliaUJoWTJNdVkyOXVZMkYwS0Z0d2JHRmpaVzFsYm5Rc0lIQnNZV05sYldWdWRDQXJJRndpTFZ3aUlDc2djM1JoY25Rc0lIQnNZV05sYldWdWRDQXJJRndpTFZ3aUlDc2daVzVrWFNrN1hHNTlMQ0JiWFNrN0lDOHZJRzF2WkdsbWFXVnljeUIwYUdGMElHNWxaV1FnZEc4Z2NtVmhaQ0IwYUdVZ1JFOU5YRzVjYm1WNGNHOXlkQ0IyWVhJZ1ltVm1iM0psVW1WaFpDQTlJQ2RpWldadmNtVlNaV0ZrSnp0Y2JtVjRjRzl5ZENCMllYSWdjbVZoWkNBOUlDZHlaV0ZrSnp0Y2JtVjRjRzl5ZENCMllYSWdZV1owWlhKU1pXRmtJRDBnSjJGbWRHVnlVbVZoWkNjN0lDOHZJSEIxY21VdGJHOW5hV01nYlc5a2FXWnBaWEp6WEc1Y2JtVjRjRzl5ZENCMllYSWdZbVZtYjNKbFRXRnBiaUE5SUNkaVpXWnZjbVZOWVdsdUp6dGNibVY0Y0c5eWRDQjJZWElnYldGcGJpQTlJQ2R0WVdsdUp6dGNibVY0Y0c5eWRDQjJZWElnWVdaMFpYSk5ZV2x1SUQwZ0oyRm1kR1Z5VFdGcGJpYzdJQzh2SUcxdlpHbG1hV1Z5SUhkcGRHZ2dkR2hsSUhCMWNuQnZjMlVnZEc4Z2QzSnBkR1VnZEc4Z2RHaGxJRVJQVFNBb2IzSWdkM0pwZEdVZ2FXNTBieUJoSUdaeVlXMWxkMjl5YXlCemRHRjBaU2xjYmx4dVpYaHdiM0owSUhaaGNpQmlaV1p2Y21WWGNtbDBaU0E5SUNkaVpXWnZjbVZYY21sMFpTYzdYRzVsZUhCdmNuUWdkbUZ5SUhkeWFYUmxJRDBnSjNkeWFYUmxKenRjYm1WNGNHOXlkQ0IyWVhJZ1lXWjBaWEpYY21sMFpTQTlJQ2RoWm5SbGNsZHlhWFJsSnp0Y2JtVjRjRzl5ZENCMllYSWdiVzlrYVdacFpYSlFhR0Z6WlhNZ1BTQmJZbVZtYjNKbFVtVmhaQ3dnY21WaFpDd2dZV1owWlhKU1pXRmtMQ0JpWldadmNtVk5ZV2x1TENCdFlXbHVMQ0JoWm5SbGNrMWhhVzRzSUdKbFptOXlaVmR5YVhSbExDQjNjbWwwWlN3Z1lXWjBaWEpYY21sMFpWMDdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdaMlYwVG05a1pVNWhiV1VvWld4bGJXVnVkQ2tnZTF4dUlDQnlaWFIxY200Z1pXeGxiV1Z1ZENBL0lDaGxiR1Z0Wlc1MExtNXZaR1ZPWVcxbElIeDhJQ2NuS1M1MGIweHZkMlZ5UTJGelpTZ3BJRG9nYm5Wc2JEdGNibjBpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJuWlhSWGFXNWtiM2NvYm05a1pTa2dlMXh1SUNCcFppQW9ibTlrWlNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnY21WMGRYSnVJSGRwYm1SdmR6dGNiaUFnZlZ4dVhHNGdJR2xtSUNodWIyUmxMblJ2VTNSeWFXNW5LQ2tnSVQwOUlDZGJiMkpxWldOMElGZHBibVJ2ZDEwbktTQjdYRzRnSUNBZ2RtRnlJRzkzYm1WeVJHOWpkVzFsYm5RZ1BTQnViMlJsTG05M2JtVnlSRzlqZFcxbGJuUTdYRzRnSUNBZ2NtVjBkWEp1SUc5M2JtVnlSRzlqZFcxbGJuUWdQeUJ2ZDI1bGNrUnZZM1Z0Wlc1MExtUmxabUYxYkhSV2FXVjNJSHg4SUhkcGJtUnZkeUE2SUhkcGJtUnZkenRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ1YjJSbE8xeHVmU0lzSW1sdGNHOXlkQ0JuWlhSWGFXNWtiM2NnWm5KdmJTQmNJaTR2WjJWMFYybHVaRzkzTG1welhDSTdYRzVjYm1aMWJtTjBhVzl1SUdselJXeGxiV1Z1ZENodWIyUmxLU0I3WEc0Z0lIWmhjaUJQZDI1RmJHVnRaVzUwSUQwZ1oyVjBWMmx1Wkc5M0tHNXZaR1VwTGtWc1pXMWxiblE3WEc0Z0lISmxkSFZ5YmlCdWIyUmxJR2x1YzNSaGJtTmxiMllnVDNkdVJXeGxiV1Z1ZENCOGZDQnViMlJsSUdsdWMzUmhibU5sYjJZZ1JXeGxiV1Z1ZER0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOSVZFMU1SV3hsYldWdWRDaHViMlJsS1NCN1hHNGdJSFpoY2lCUGQyNUZiR1Z0Wlc1MElEMGdaMlYwVjJsdVpHOTNLRzV2WkdVcExraFVUVXhGYkdWdFpXNTBPMXh1SUNCeVpYUjFjbTRnYm05a1pTQnBibk4wWVc1alpXOW1JRTkzYmtWc1pXMWxiblFnZkh3Z2JtOWtaU0JwYm5OMFlXNWpaVzltSUVoVVRVeEZiR1Z0Wlc1ME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxTm9ZV1J2ZDFKdmIzUW9ibTlrWlNrZ2UxeHVJQ0F2THlCSlJTQXhNU0JvWVhNZ2JtOGdVMmhoWkc5M1VtOXZkRnh1SUNCcFppQW9kSGx3Wlc5bUlGTm9ZV1J2ZDFKdmIzUWdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnZG1GeUlFOTNia1ZzWlcxbGJuUWdQU0JuWlhSWGFXNWtiM2NvYm05a1pTa3VVMmhoWkc5M1VtOXZkRHRjYmlBZ2NtVjBkWEp1SUc1dlpHVWdhVzV6ZEdGdVkyVnZaaUJQZDI1RmJHVnRaVzUwSUh4OElHNXZaR1VnYVc1emRHRnVZMlZ2WmlCVGFHRmtiM2RTYjI5ME8xeHVmVnh1WEc1bGVIQnZjblFnZXlCcGMwVnNaVzFsYm5Rc0lHbHpTRlJOVEVWc1pXMWxiblFzSUdselUyaGhaRzkzVW05dmRDQjlPeUlzSW1sdGNHOXlkQ0JuWlhST2IyUmxUbUZ0WlNCbWNtOXRJRndpTGk0dlpHOXRMWFYwYVd4ekwyZGxkRTV2WkdWT1lXMWxMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMGhVVFV4RmJHVnRaVzUwSUgwZ1puSnZiU0JjSWk0dUwyUnZiUzExZEdsc2N5OXBibk4wWVc1alpVOW1MbXB6WENJN0lDOHZJRlJvYVhNZ2JXOWthV1pwWlhJZ2RHRnJaWE1nZEdobElITjBlV3hsY3lCd2NtVndZWEpsWkNCaWVTQjBhR1VnWUdOdmJYQjFkR1ZUZEhsc1pYTmdJRzF2WkdsbWFXVnlYRzR2THlCaGJtUWdZWEJ3YkdsbGN5QjBhR1Z0SUhSdklIUm9aU0JJVkUxTVJXeGxiV1Z1ZEhNZ2MzVmphQ0JoY3lCd2IzQndaWElnWVc1a0lHRnljbTkzWEc1Y2JtWjFibU4wYVc5dUlHRndjR3g1VTNSNWJHVnpLRjl5WldZcElIdGNiaUFnZG1GeUlITjBZWFJsSUQwZ1gzSmxaaTV6ZEdGMFpUdGNiaUFnVDJKcVpXTjBMbXRsZVhNb2MzUmhkR1V1Wld4bGJXVnVkSE1wTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0c1aGJXVXBJSHRjYmlBZ0lDQjJZWElnYzNSNWJHVWdQU0J6ZEdGMFpTNXpkSGxzWlhOYmJtRnRaVjBnZkh3Z2UzMDdYRzRnSUNBZ2RtRnlJR0YwZEhKcFluVjBaWE1nUFNCemRHRjBaUzVoZEhSeWFXSjFkR1Z6VzI1aGJXVmRJSHg4SUh0OU8xeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MElEMGdjM1JoZEdVdVpXeGxiV1Z1ZEhOYmJtRnRaVjA3SUM4dklHRnljbTkzSUdseklHOXdkR2x2Ym1Gc0lDc2dkbWx5ZEhWaGJDQmxiR1Z0Wlc1MGMxeHVYRzRnSUNBZ2FXWWdLQ0ZwYzBoVVRVeEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcElIeDhJQ0ZuWlhST2IyUmxUbUZ0WlNobGJHVnRaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDBnTHk4Z1JteHZkeUJrYjJWemJpZDBJSE4xY0hCdmNuUWdkRzhnWlhoMFpXNWtJSFJvYVhNZ2NISnZjR1Z5ZEhrc0lHSjFkQ0JwZENkeklIUm9aU0J0YjNOMFhHNGdJQ0FnTHk4Z1pXWm1aV04wYVhabElIZGhlU0IwYnlCaGNIQnNlU0J6ZEhsc1pYTWdkRzhnWVc0Z1NGUk5URVZzWlcxbGJuUmNiaUFnSUNBdkx5QWtSbXh2ZDBacGVFMWxXMk5oYm01dmRDMTNjbWwwWlYxY2JseHVYRzRnSUNBZ1QySnFaV04wTG1GemMybG5iaWhsYkdWdFpXNTBMbk4wZVd4bExDQnpkSGxzWlNrN1hHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1lYUjBjbWxpZFhSbGN5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdZWFIwY21saWRYUmxjMXR1WVcxbFhUdGNibHh1SUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwTG5KbGJXOTJaVUYwZEhKcFluVjBaU2h1WVcxbEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLRzVoYldVc0lIWmhiSFZsSUQwOVBTQjBjblZsSUQ4Z0p5Y2dPaUIyWVd4MVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbFptWmxZM1FvWDNKbFpqSXBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdYM0psWmpJdWMzUmhkR1U3WEc0Z0lIWmhjaUJwYm1sMGFXRnNVM1I1YkdWeklEMGdlMXh1SUNBZ0lIQnZjSEJsY2pvZ2UxeHVJQ0FnSUNBZ2NHOXphWFJwYjI0NklITjBZWFJsTG05d2RHbHZibk11YzNSeVlYUmxaM2tzWEc0Z0lDQWdJQ0JzWldaME9pQW5NQ2NzWEc0Z0lDQWdJQ0IwYjNBNklDY3dKeXhjYmlBZ0lDQWdJRzFoY21kcGJqb2dKekFuWEc0Z0lDQWdmU3hjYmlBZ0lDQmhjbkp2ZHpvZ2UxeHVJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZGhZbk52YkhWMFpTZGNiaUFnSUNCOUxGeHVJQ0FnSUhKbFptVnlaVzVqWlRvZ2UzMWNiaUFnZlR0Y2JpQWdUMkpxWldOMExtRnpjMmxuYmloemRHRjBaUzVsYkdWdFpXNTBjeTV3YjNCd1pYSXVjM1I1YkdVc0lHbHVhWFJwWVd4VGRIbHNaWE11Y0c5d2NHVnlLVHRjYmlBZ2MzUmhkR1V1YzNSNWJHVnpJRDBnYVc1cGRHbGhiRk4wZVd4bGN6dGNibHh1SUNCcFppQW9jM1JoZEdVdVpXeGxiV1Z1ZEhNdVlYSnliM2NwSUh0Y2JpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtITjBZWFJsTG1Wc1pXMWxiblJ6TG1GeWNtOTNMbk4wZVd4bExDQnBibWwwYVdGc1UzUjViR1Z6TG1GeWNtOTNLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb2MzUmhkR1V1Wld4bGJXVnVkSE1wTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0c1aGJXVXBJSHRjYmlBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ2MzUmhkR1V1Wld4bGJXVnVkSE5iYm1GdFpWMDdYRzRnSUNBZ0lDQjJZWElnWVhSMGNtbGlkWFJsY3lBOUlITjBZWFJsTG1GMGRISnBZblYwWlhOYmJtRnRaVjBnZkh3Z2UzMDdYRzRnSUNBZ0lDQjJZWElnYzNSNWJHVlFjbTl3WlhKMGFXVnpJRDBnVDJKcVpXTjBMbXRsZVhNb2MzUmhkR1V1YzNSNWJHVnpMbWhoYzA5M2JsQnliM0JsY25SNUtHNWhiV1VwSUQ4Z2MzUmhkR1V1YzNSNWJHVnpXMjVoYldWZElEb2dhVzVwZEdsaGJGTjBlV3hsYzF0dVlXMWxYU2s3SUM4dklGTmxkQ0JoYkd3Z2RtRnNkV1Z6SUhSdklHRnVJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QjFibk5sZENCMGFHVnRYRzVjYmlBZ0lDQWdJSFpoY2lCemRIbHNaU0E5SUhOMGVXeGxVSEp2Y0dWeWRHbGxjeTV5WldSMVkyVW9ablZ1WTNScGIyNGdLSE4wZVd4bExDQndjbTl3WlhKMGVTa2dlMXh1SUNBZ0lDQWdJQ0J6ZEhsc1pWdHdjbTl3WlhKMGVWMGdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMGVXeGxPMXh1SUNBZ0lDQWdmU3dnZTMwcE95QXZMeUJoY25KdmR5QnBjeUJ2Y0hScGIyNWhiQ0FySUhacGNuUjFZV3dnWld4bGJXVnVkSE5jYmx4dUlDQWdJQ0FnYVdZZ0tDRnBjMGhVVFV4RmJHVnRaVzUwS0dWc1pXMWxiblFwSUh4OElDRm5aWFJPYjJSbFRtRnRaU2hsYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9aV3hsYldWdWRDNXpkSGxzWlN3Z2MzUjViR1VwTzF4dUlDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb1lYUjBjbWxpZFhSbGN5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpQW9ZWFIwY21saWRYUmxLU0I3WEc0Z0lDQWdJQ0FnSUdWc1pXMWxiblF1Y21WdGIzWmxRWFIwY21saWRYUmxLR0YwZEhKcFluVjBaU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVHRjYm4wZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHbHRjRzl5ZEM5dWJ5MTFiblZ6WldRdGJXOWtkV3hsYzF4dVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYm1GdFpUb2dKMkZ3Y0d4NVUzUjViR1Z6Snl4Y2JpQWdaVzVoWW14bFpEb2dkSEoxWlN4Y2JpQWdjR2hoYzJVNklDZDNjbWwwWlNjc1hHNGdJR1p1T2lCaGNIQnNlVk4wZVd4bGN5eGNiaUFnWldabVpXTjBPaUJsWm1abFkzUXNYRzRnSUhKbGNYVnBjbVZ6T2lCYkoyTnZiWEIxZEdWVGRIbHNaWE1uWFZ4dWZUc2lMQ0pwYlhCdmNuUWdleUJoZFhSdklIMGdabkp2YlNCY0lpNHVMMlZ1ZFcxekxtcHpYQ0k3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJuWlhSQ1lYTmxVR3hoWTJWdFpXNTBLSEJzWVdObGJXVnVkQ2tnZTF4dUlDQnlaWFIxY200Z2NHeGhZMlZ0Wlc1MExuTndiR2wwS0NjdEp5bGJNRjA3WEc1OUlpd2laWGh3YjNKMElIWmhjaUJ0WVhnZ1BTQk5ZWFJvTG0xaGVEdGNibVY0Y0c5eWRDQjJZWElnYldsdUlEMGdUV0YwYUM1dGFXNDdYRzVsZUhCdmNuUWdkbUZ5SUhKdmRXNWtJRDBnVFdGMGFDNXliM1Z1WkRzaUxDSnBiWEJ2Y25RZ2V5QnBjMGhVVFV4RmJHVnRaVzUwSUgwZ1puSnZiU0JjSWk0dmFXNXpkR0Z1WTJWUFppNXFjMXdpTzF4dWFXMXdiM0owSUhzZ2NtOTFibVFnZlNCbWNtOXRJRndpTGk0dmRYUnBiSE12YldGMGFDNXFjMXdpTzF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtHVnNaVzFsYm5Rc0lHbHVZMngxWkdWVFkyRnNaU2tnZTF4dUlDQnBaaUFvYVc1amJIVmtaVk5qWVd4bElEMDlQU0IyYjJsa0lEQXBJSHRjYmlBZ0lDQnBibU5zZFdSbFUyTmhiR1VnUFNCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnlaV04wSUQwZ1pXeGxiV1Z1ZEM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LVHRjYmlBZ2RtRnlJSE5qWVd4bFdDQTlJREU3WEc0Z0lIWmhjaUJ6WTJGc1pWa2dQU0F4TzF4dVhHNGdJR2xtSUNocGMwaFVUVXhGYkdWdFpXNTBLR1ZzWlcxbGJuUXBJQ1ltSUdsdVkyeDFaR1ZUWTJGc1pTa2dlMXh1SUNBZ0lIWmhjaUJ2Wm1aelpYUklaV2xuYUhRZ1BTQmxiR1Z0Wlc1MExtOW1abk5sZEVobGFXZG9kRHRjYmlBZ0lDQjJZWElnYjJabWMyVjBWMmxrZEdnZ1BTQmxiR1Z0Wlc1MExtOW1abk5sZEZkcFpIUm9PeUF2THlCRWJ5QnViM1FnWVhSMFpXMXdkQ0IwYnlCa2FYWnBaR1VnWW5rZ01Dd2diM1JvWlhKM2FYTmxJSGRsSUdkbGRDQmdTVzVtYVc1cGRIbGdJR0Z6SUhOallXeGxYRzRnSUNBZ0x5OGdSbUZzYkdKaFkyc2dkRzhnTVNCcGJpQmpZWE5sSUdKdmRHZ2dkbUZzZFdWeklHRnlaU0JnTUdCY2JseHVJQ0FnSUdsbUlDaHZabVp6WlhSWGFXUjBhQ0ErSURBcElIdGNiaUFnSUNBZ0lITmpZV3hsV0NBOUlISnZkVzVrS0hKbFkzUXVkMmxrZEdncElDOGdiMlptYzJWMFYybGtkR2dnZkh3Z01UdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iMlptYzJWMFNHVnBaMmgwSUQ0Z01Da2dlMXh1SUNBZ0lDQWdjMk5oYkdWWklEMGdjbTkxYm1Rb2NtVmpkQzVvWldsbmFIUXBJQzhnYjJabWMyVjBTR1ZwWjJoMElIeDhJREU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQjNhV1IwYURvZ2NtVmpkQzUzYVdSMGFDQXZJSE5qWVd4bFdDeGNiaUFnSUNCb1pXbG5hSFE2SUhKbFkzUXVhR1ZwWjJoMElDOGdjMk5oYkdWWkxGeHVJQ0FnSUhSdmNEb2djbVZqZEM1MGIzQWdMeUJ6WTJGc1pWa3NYRzRnSUNBZ2NtbG5hSFE2SUhKbFkzUXVjbWxuYUhRZ0x5QnpZMkZzWlZnc1hHNGdJQ0FnWW05MGRHOXRPaUJ5WldOMExtSnZkSFJ2YlNBdklITmpZV3hsV1N4Y2JpQWdJQ0JzWldaME9pQnlaV04wTG14bFpuUWdMeUJ6WTJGc1pWZ3NYRzRnSUNBZ2VEb2djbVZqZEM1c1pXWjBJQzhnYzJOaGJHVllMRnh1SUNBZ0lIazZJSEpsWTNRdWRHOXdJQzhnYzJOaGJHVlpYRzRnSUgwN1hHNTlJaXdpYVcxd2IzSjBJR2RsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENCbWNtOXRJRndpTGk5blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUXVhbk5jSWpzZ0x5OGdVbVYwZFhKdWN5QjBhR1VnYkdGNWIzVjBJSEpsWTNRZ2IyWWdZVzRnWld4bGJXVnVkQ0J5Wld4aGRHbDJaU0IwYnlCcGRITWdiMlptYzJWMFVHRnlaVzUwTGlCTVlYbHZkWFJjYmk4dklHMWxZVzV6SUdsMElHUnZaWE51SjNRZ2RHRnJaU0JwYm5SdklHRmpZMjkxYm5RZ2RISmhibk5tYjNKdGN5NWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdaMlYwVEdGNWIzVjBVbVZqZENobGJHVnRaVzUwS1NCN1hHNGdJSFpoY2lCamJHbGxiblJTWldOMElEMGdaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0dWc1pXMWxiblFwT3lBdkx5QlZjMlVnZEdobElHTnNhV1Z1ZEZKbFkzUWdjMmw2WlhNZ2FXWWdhWFFuY3lCdWIzUWdZbVZsYmlCMGNtRnVjMlp2Y20xbFpDNWNiaUFnTHk4Z1JtbDRaWE1nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNCdmNIQmxjbXB6TDNCdmNIQmxjaTFqYjNKbEwybHpjM1ZsY3k4eE1qSXpYRzVjYmlBZ2RtRnlJSGRwWkhSb0lEMGdaV3hsYldWdWRDNXZabVp6WlhSWGFXUjBhRHRjYmlBZ2RtRnlJR2hsYVdkb2RDQTlJR1ZzWlcxbGJuUXViMlptYzJWMFNHVnBaMmgwTzF4dVhHNGdJR2xtSUNoTllYUm9MbUZpY3loamJHbGxiblJTWldOMExuZHBaSFJvSUMwZ2QybGtkR2dwSUR3OUlERXBJSHRjYmlBZ0lDQjNhV1IwYUNBOUlHTnNhV1Z1ZEZKbFkzUXVkMmxrZEdnN1hHNGdJSDFjYmx4dUlDQnBaaUFvVFdGMGFDNWhZbk1vWTJ4cFpXNTBVbVZqZEM1b1pXbG5hSFFnTFNCb1pXbG5hSFFwSUR3OUlERXBJSHRjYmlBZ0lDQm9aV2xuYUhRZ1BTQmpiR2xsYm5SU1pXTjBMbWhsYVdkb2REdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2VEb2daV3hsYldWdWRDNXZabVp6WlhSTVpXWjBMRnh1SUNBZ0lIazZJR1ZzWlcxbGJuUXViMlptYzJWMFZHOXdMRnh1SUNBZ0lIZHBaSFJvT2lCM2FXUjBhQ3hjYmlBZ0lDQm9aV2xuYUhRNklHaGxhV2RvZEZ4dUlDQjlPMXh1ZlNJc0ltbHRjRzl5ZENCN0lHbHpVMmhoWkc5M1VtOXZkQ0I5SUdaeWIyMGdYQ0l1TDJsdWMzUmhibU5sVDJZdWFuTmNJanRjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR052Ym5SaGFXNXpLSEJoY21WdWRDd2dZMmhwYkdRcElIdGNiaUFnZG1GeUlISnZiM1JPYjJSbElEMGdZMmhwYkdRdVoyVjBVbTl2ZEU1dlpHVWdKaVlnWTJocGJHUXVaMlYwVW05dmRFNXZaR1VvS1RzZ0x5OGdSbWx5YzNRc0lHRjBkR1Z0Y0hRZ2QybDBhQ0JtWVhOMFpYSWdibUYwYVhabElHMWxkR2h2WkZ4dVhHNGdJR2xtSUNod1lYSmxiblF1WTI5dWRHRnBibk1vWTJocGJHUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMGdMeThnZEdobGJpQm1ZV3hzWW1GamF5QjBieUJqZFhOMGIyMGdhVzF3YkdWdFpXNTBZWFJwYjI0Z2QybDBhQ0JUYUdGa2IzY2dSRTlOSUhOMWNIQnZjblJjYmlBZ1pXeHpaU0JwWmlBb2NtOXZkRTV2WkdVZ0ppWWdhWE5UYUdGa2IzZFNiMjkwS0hKdmIzUk9iMlJsS1NrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzVsZUhRZ1BTQmphR2xzWkR0Y2JseHVJQ0FnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtVjRkQ0FtSmlCd1lYSmxiblF1YVhOVFlXMWxUbTlrWlNodVpYaDBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5SUM4dklDUkdiRzkzUm1sNFRXVmJjSEp2Y0MxdGFYTnphVzVuWFRvZ2JtVmxaQ0JoSUdKbGRIUmxjaUIzWVhrZ2RHOGdhR0Z1Wkd4bElIUm9hWE11TGk1Y2JseHVYRzRnSUNBZ0lDQWdJRzVsZUhRZ1BTQnVaWGgwTG5CaGNtVnVkRTV2WkdVZ2ZId2dibVY0ZEM1b2IzTjBPMXh1SUNBZ0lDQWdmU0IzYUdsc1pTQW9ibVY0ZENrN1hHNGdJQ0FnZlNBdkx5QkhhWFpsSUhWd0xDQjBhR1VnY21WemRXeDBJR2x6SUdaaGJITmxYRzVjYmx4dUlDQnlaWFIxY200Z1ptRnNjMlU3WEc1OUlpd2lhVzF3YjNKMElHZGxkRmRwYm1SdmR5Qm1jbTl0SUZ3aUxpOW5aWFJYYVc1a2IzY3Vhbk5jSWp0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRFTnZiWEIxZEdWa1UzUjViR1VvWld4bGJXVnVkQ2tnZTF4dUlDQnlaWFIxY200Z1oyVjBWMmx1Wkc5M0tHVnNaVzFsYm5RcExtZGxkRU52YlhCMWRHVmtVM1I1YkdVb1pXeGxiV1Z1ZENrN1hHNTlJaXdpYVcxd2IzSjBJR2RsZEU1dlpHVk9ZVzFsSUdaeWIyMGdYQ0l1TDJkbGRFNXZaR1ZPWVcxbExtcHpYQ0k3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJwYzFSaFlteGxSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTQjdYRzRnSUhKbGRIVnliaUJiSjNSaFlteGxKeXdnSjNSa0p5d2dKM1JvSjEwdWFXNWtaWGhQWmloblpYUk9iMlJsVG1GdFpTaGxiR1Z0Wlc1MEtTa2dQajBnTUR0Y2JuMGlMQ0pwYlhCdmNuUWdleUJwYzBWc1pXMWxiblFnZlNCbWNtOXRJRndpTGk5cGJuTjBZVzVqWlU5bUxtcHpYQ0k3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJuWlhSRWIyTjFiV1Z1ZEVWc1pXMWxiblFvWld4bGJXVnVkQ2tnZTF4dUlDQXZMeUFrUm14dmQwWnBlRTFsVzJsdVkyOXRjR0YwYVdKc1pTMXlaWFIxY201ZE9pQmhjM04xYldVZ1ltOWtlU0JwY3lCaGJIZGhlWE1nWVhaaGFXeGhZbXhsWEc0Z0lISmxkSFZ5YmlBb0tHbHpSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTQS9JR1ZzWlcxbGJuUXViM2R1WlhKRWIyTjFiV1Z1ZENBNklDOHZJQ1JHYkc5M1JtbDRUV1ZiY0hKdmNDMXRhWE56YVc1blhWeHVJQ0JsYkdWdFpXNTBMbVJ2WTNWdFpXNTBLU0I4ZkNCM2FXNWtiM2N1Wkc5amRXMWxiblFwTG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYm4waUxDSnBiWEJ2Y25RZ1oyVjBUbTlrWlU1aGJXVWdabkp2YlNCY0lpNHZaMlYwVG05a1pVNWhiV1V1YW5OY0lqdGNibWx0Y0c5eWRDQm5aWFJFYjJOMWJXVnVkRVZzWlcxbGJuUWdabkp2YlNCY0lpNHZaMlYwUkc5amRXMWxiblJGYkdWdFpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMU5vWVdSdmQxSnZiM1FnZlNCbWNtOXRJRndpTGk5cGJuTjBZVzVqWlU5bUxtcHpYQ0k3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJuWlhSUVlYSmxiblJPYjJSbEtHVnNaVzFsYm5RcElIdGNiaUFnYVdZZ0tHZGxkRTV2WkdWT1lXMWxLR1ZzWlcxbGJuUXBJRDA5UFNBbmFIUnRiQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaV3hsYldWdWREdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW9MeThnZEdocGN5QnBjeUJoSUhGMWFXTnJaWElnS0dKMWRDQnNaWE56SUhSNWNHVWdjMkZtWlNrZ2QyRjVJSFJ2SUhOaGRtVWdjWFZwZEdVZ2MyOXRaU0JpZVhSbGN5Qm1jbTl0SUhSb1pTQmlkVzVrYkdWY2JpQWdJQ0F2THlBa1JteHZkMFpwZUUxbFcybHVZMjl0Y0dGMGFXSnNaUzF5WlhSMWNtNWRYRzRnSUNBZ0x5OGdKRVpzYjNkR2FYaE5aVnR3Y205d0xXMXBjM05wYm1kZFhHNGdJQ0FnWld4bGJXVnVkQzVoYzNOcFoyNWxaRk5zYjNRZ2ZId2dMeThnYzNSbGNDQnBiblJ2SUhSb1pTQnphR0ZrYjNjZ1JFOU5JRzltSUhSb1pTQndZWEpsYm5RZ2IyWWdZU0J6Ykc5MGRHVmtJRzV2WkdWY2JpQWdJQ0JsYkdWdFpXNTBMbkJoY21WdWRFNXZaR1VnZkh3Z0tDQXZMeUJFVDAwZ1JXeGxiV1Z1ZENCa1pYUmxZM1JsWkZ4dUlDQWdJR2x6VTJoaFpHOTNVbTl2ZENobGJHVnRaVzUwS1NBL0lHVnNaVzFsYm5RdWFHOXpkQ0E2SUc1MWJHd3BJSHg4SUM4dklGTm9ZV1J2ZDFKdmIzUWdaR1YwWldOMFpXUmNiaUFnSUNBdkx5QWtSbXh2ZDBacGVFMWxXMmx1WTI5dGNHRjBhV0pzWlMxallXeHNYVG9nU0ZSTlRFVnNaVzFsYm5RZ2FYTWdZU0JPYjJSbFhHNGdJQ0FnWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwS0dWc1pXMWxiblFwSUM4dklHWmhiR3hpWVdOclhHNWNiaUFnS1R0Y2JuMGlMQ0pwYlhCdmNuUWdaMlYwVjJsdVpHOTNJR1p5YjIwZ1hDSXVMMmRsZEZkcGJtUnZkeTVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRTV2WkdWT1lXMWxJR1p5YjIwZ1hDSXVMMmRsZEU1dlpHVk9ZVzFsTG1welhDSTdYRzVwYlhCdmNuUWdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTQm1jbTl0SUZ3aUxpOW5aWFJEYjIxd2RYUmxaRk4wZVd4bExtcHpYQ0k3WEc1cGJYQnZjblFnZXlCcGMwaFVUVXhGYkdWdFpXNTBJSDBnWm5KdmJTQmNJaTR2YVc1emRHRnVZMlZQWmk1cWMxd2lPMXh1YVcxd2IzSjBJR2x6VkdGaWJHVkZiR1Z0Wlc1MElHWnliMjBnWENJdUwybHpWR0ZpYkdWRmJHVnRaVzUwTG1welhDSTdYRzVwYlhCdmNuUWdaMlYwVUdGeVpXNTBUbTlrWlNCbWNtOXRJRndpTGk5blpYUlFZWEpsYm5ST2IyUmxMbXB6WENJN1hHNWNibVoxYm1OMGFXOXVJR2RsZEZSeWRXVlBabVp6WlhSUVlYSmxiblFvWld4bGJXVnVkQ2tnZTF4dUlDQnBaaUFvSVdselNGUk5URVZzWlcxbGJuUW9aV3hsYldWdWRDa2dmSHdnTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzQnZjSEJsY21wekwzQnZjSEJsY2kxamIzSmxMMmx6YzNWbGN5ODRNemRjYmlBZ1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNobGJHVnRaVzUwS1M1d2IzTnBkR2x2YmlBOVBUMGdKMlpwZUdWa0p5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1ZzWlcxbGJuUXViMlptYzJWMFVHRnlaVzUwTzF4dWZTQXZMeUJnTG05bVpuTmxkRkJoY21WdWRHQWdjbVZ3YjNKMGN5QmdiblZzYkdBZ1ptOXlJR1pwZUdWa0lHVnNaVzFsYm5SekxDQjNhR2xzWlNCaFluTnZiSFYwWlNCbGJHVnRaVzUwYzF4dUx5OGdjbVYwZFhKdUlIUm9aU0JqYjI1MFlXbHVhVzVuSUdKc2IyTnJYRzVjYmx4dVpuVnVZM1JwYjI0Z1oyVjBRMjl1ZEdGcGJtbHVaMEpzYjJOcktHVnNaVzFsYm5RcElIdGNiaUFnZG1GeUlHbHpSbWx5WldadmVDQTlJRzVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblF1ZEc5TWIzZGxja05oYzJVb0tTNXBibVJsZUU5bUtDZG1hWEpsWm05NEp5a2dJVDA5SUMweE8xeHVJQ0IyWVhJZ2FYTkpSU0E5SUc1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWFXNWtaWGhQWmlnblZISnBaR1Z1ZENjcElDRTlQU0F0TVR0Y2JseHVJQ0JwWmlBb2FYTkpSU0FtSmlCcGMwaFVUVXhGYkdWdFpXNTBLR1ZzWlcxbGJuUXBLU0I3WEc0Z0lDQWdMeThnU1c0Z1NVVWdPU3dnTVRBZ1lXNWtJREV4SUdacGVHVmtJR1ZzWlcxbGJuUnpJR052Ym5SaGFXNXBibWNnWW14dlkyc2dhWE1nWVd4M1lYbHpJR1Z6ZEdGaWJHbHphR1ZrSUdKNUlIUm9aU0IyYVdWM2NHOXlkRnh1SUNBZ0lIWmhjaUJsYkdWdFpXNTBRM056SUQwZ1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNobGJHVnRaVzUwS1R0Y2JseHVJQ0FnSUdsbUlDaGxiR1Z0Wlc1MFEzTnpMbkJ2YzJsMGFXOXVJRDA5UFNBblptbDRaV1FuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnWTNWeWNtVnVkRTV2WkdVZ1BTQm5aWFJRWVhKbGJuUk9iMlJsS0dWc1pXMWxiblFwTzF4dVhHNGdJSGRvYVd4bElDaHBjMGhVVFV4RmJHVnRaVzUwS0dOMWNuSmxiblJPYjJSbEtTQW1KaUJiSjJoMGJXd25MQ0FuWW05a2VTZGRMbWx1WkdWNFQyWW9aMlYwVG05a1pVNWhiV1VvWTNWeWNtVnVkRTV2WkdVcEtTQThJREFwSUh0Y2JpQWdJQ0IyWVhJZ1kzTnpJRDBnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2hqZFhKeVpXNTBUbTlrWlNrN0lDOHZJRlJvYVhNZ2FYTWdibTl1TFdWNGFHRjFjM1JwZG1VZ1luVjBJR052ZG1WeWN5QjBhR1VnYlc5emRDQmpiMjF0YjI0Z1ExTlRJSEJ5YjNCbGNuUnBaWE1nZEdoaGRGeHVJQ0FnSUM4dklHTnlaV0YwWlNCaElHTnZiblJoYVc1cGJtY2dZbXh2WTJzdVhHNGdJQ0FnTHk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlExTlRMME52Ym5SaGFXNXBibWRmWW14dlkyc2phV1JsYm5ScFpubHBibWRmZEdobFgyTnZiblJoYVc1cGJtZGZZbXh2WTJ0Y2JseHVJQ0FnSUdsbUlDaGpjM011ZEhKaGJuTm1iM0p0SUNFOVBTQW5ibTl1WlNjZ2ZId2dZM056TG5CbGNuTndaV04wYVhabElDRTlQU0FuYm05dVpTY2dmSHdnWTNOekxtTnZiblJoYVc0Z1BUMDlJQ2R3WVdsdWRDY2dmSHdnV3lkMGNtRnVjMlp2Y20wbkxDQW5jR1Z5YzNCbFkzUnBkbVVuWFM1cGJtUmxlRTltS0dOemN5NTNhV3hzUTJoaGJtZGxLU0FoUFQwZ0xURWdmSHdnYVhOR2FYSmxabTk0SUNZbUlHTnpjeTUzYVd4c1EyaGhibWRsSUQwOVBTQW5abWxzZEdWeUp5QjhmQ0JwYzBacGNtVm1iM2dnSmlZZ1kzTnpMbVpwYkhSbGNpQW1KaUJqYzNNdVptbHNkR1Z5SUNFOVBTQW5ibTl1WlNjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCamRYSnlaVzUwVG05a1pUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWTNWeWNtVnVkRTV2WkdVZ1BTQmpkWEp5Wlc1MFRtOWtaUzV3WVhKbGJuUk9iMlJsTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ1ZFd4c08xeHVmU0F2THlCSFpYUnpJSFJvWlNCamJHOXpaWE4wSUdGdVkyVnpkRzl5SUhCdmMybDBhVzl1WldRZ1pXeGxiV1Z1ZEM0Z1NHRnVaR3hsY3lCemIyMWxJR1ZrWjJVZ1kyRnpaWE1zWEc0dkx5QnpkV05vSUdGeklIUmhZbXhsSUdGdVkyVnpkRzl5Y3lCaGJtUWdZM0p2YzNNZ1luSnZkM05sY2lCaWRXZHpMbHh1WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRFOW1abk5sZEZCaGNtVnVkQ2hsYkdWdFpXNTBLU0I3WEc0Z0lIWmhjaUIzYVc1a2IzY2dQU0JuWlhSWGFXNWtiM2NvWld4bGJXVnVkQ2s3WEc0Z0lIWmhjaUJ2Wm1aelpYUlFZWEpsYm5RZ1BTQm5aWFJVY25WbFQyWm1jMlYwVUdGeVpXNTBLR1ZzWlcxbGJuUXBPMXh1WEc0Z0lIZG9hV3hsSUNodlptWnpaWFJRWVhKbGJuUWdKaVlnYVhOVVlXSnNaVVZzWlcxbGJuUW9iMlptYzJWMFVHRnlaVzUwS1NBbUppQm5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHOW1abk5sZEZCaGNtVnVkQ2t1Y0c5emFYUnBiMjRnUFQwOUlDZHpkR0YwYVdNbktTQjdYRzRnSUNBZ2IyWm1jMlYwVUdGeVpXNTBJRDBnWjJWMFZISjFaVTltWm5ObGRGQmhjbVZ1ZENodlptWnpaWFJRWVhKbGJuUXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tHOW1abk5sZEZCaGNtVnVkQ0FtSmlBb1oyVjBUbTlrWlU1aGJXVW9iMlptYzJWMFVHRnlaVzUwS1NBOVBUMGdKMmgwYld3bklIeDhJR2RsZEU1dlpHVk9ZVzFsS0c5bVpuTmxkRkJoY21WdWRDa2dQVDA5SUNkaWIyUjVKeUFtSmlCblpYUkRiMjF3ZFhSbFpGTjBlV3hsS0c5bVpuTmxkRkJoY21WdWRDa3VjRzl6YVhScGIyNGdQVDA5SUNkemRHRjBhV01uS1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIzYVc1a2IzYzdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdiMlptYzJWMFVHRnlaVzUwSUh4OElHZGxkRU52Ym5SaGFXNXBibWRDYkc5amF5aGxiR1Z0Wlc1MEtTQjhmQ0IzYVc1a2IzYzdYRzU5SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWjJWMFRXRnBia0Y0YVhOR2NtOXRVR3hoWTJWdFpXNTBLSEJzWVdObGJXVnVkQ2tnZTF4dUlDQnlaWFIxY200Z1d5ZDBiM0FuTENBblltOTBkRzl0SjEwdWFXNWtaWGhQWmlod2JHRmpaVzFsYm5RcElENDlJREFnUHlBbmVDY2dPaUFuZVNjN1hHNTlJaXdpYVcxd2IzSjBJSHNnYldGNElHRnpJRzFoZEdoTllYZ3NJRzFwYmlCaGN5QnRZWFJvVFdsdUlIMGdabkp2YlNCY0lpNHZiV0YwYUM1cWMxd2lPMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSGRwZEdocGJpaHRhVzRzSUhaaGJIVmxMQ0J0WVhncElIdGNiaUFnY21WMGRYSnVJRzFoZEdoTllYZ29iV2x1TENCdFlYUm9UV2x1S0haaGJIVmxMQ0J0WVhncEtUdGNibjFjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUIzYVhSb2FXNU5ZWGhEYkdGdGNDaHRhVzRzSUhaaGJIVmxMQ0J0WVhncElIdGNiaUFnZG1GeUlIWWdQU0IzYVhSb2FXNG9iV2x1TENCMllXeDFaU3dnYldGNEtUdGNiaUFnY21WMGRYSnVJSFlnUGlCdFlYZ2dQeUJ0WVhnZ09pQjJPMXh1ZlNJc0ltbHRjRzl5ZENCblpYUkdjbVZ6YUZOcFpHVlBZbXBsWTNRZ1puSnZiU0JjSWk0dloyVjBSbkpsYzJoVGFXUmxUMkpxWldOMExtcHpYQ0k3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJ0WlhKblpWQmhaR1JwYm1kUFltcGxZM1FvY0dGa1pHbHVaMDlpYW1WamRDa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWjJWMFJuSmxjMmhUYVdSbFQySnFaV04wS0Nrc0lIQmhaR1JwYm1kUFltcGxZM1FwTzF4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHZGxkRVp5WlhOb1UybGtaVTlpYW1WamRDZ3BJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0IwYjNBNklEQXNYRzRnSUNBZ2NtbG5hSFE2SURBc1hHNGdJQ0FnWW05MGRHOXRPaUF3TEZ4dUlDQWdJR3hsWm5RNklEQmNiaUFnZlR0Y2JuMGlMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQmxlSEJoYm1SVWIwaGhjMmhOWVhBb2RtRnNkV1VzSUd0bGVYTXBJSHRjYmlBZ2NtVjBkWEp1SUd0bGVYTXVjbVZrZFdObEtHWjFibU4wYVc5dUlDaG9ZWE5vVFdGd0xDQnJaWGtwSUh0Y2JpQWdJQ0JvWVhOb1RXRndXMnRsZVYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0J5WlhSMWNtNGdhR0Z6YUUxaGNEdGNiaUFnZlN3Z2UzMHBPMXh1ZlNJc0ltbHRjRzl5ZENCblpYUkNZWE5sVUd4aFkyVnRaVzUwSUdaeWIyMGdYQ0l1TGk5MWRHbHNjeTluWlhSQ1lYTmxVR3hoWTJWdFpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBUR0Y1YjNWMFVtVmpkQ0JtY205dElGd2lMaTR2Wkc5dExYVjBhV3h6TDJkbGRFeGhlVzkxZEZKbFkzUXVhbk5jSWp0Y2JtbHRjRzl5ZENCamIyNTBZV2x1Y3lCbWNtOXRJRndpTGk0dlpHOXRMWFYwYVd4ekwyTnZiblJoYVc1ekxtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFQyWm1jMlYwVUdGeVpXNTBJR1p5YjIwZ1hDSXVMaTlrYjIwdGRYUnBiSE12WjJWMFQyWm1jMlYwVUdGeVpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBUV0ZwYmtGNGFYTkdjbTl0VUd4aFkyVnRaVzUwSUdaeWIyMGdYQ0l1TGk5MWRHbHNjeTluWlhSTllXbHVRWGhwYzBaeWIyMVFiR0ZqWlcxbGJuUXVhbk5jSWp0Y2JtbHRjRzl5ZENCN0lIZHBkR2hwYmlCOUlHWnliMjBnWENJdUxpOTFkR2xzY3k5M2FYUm9hVzR1YW5OY0lqdGNibWx0Y0c5eWRDQnRaWEpuWlZCaFpHUnBibWRQWW1wbFkzUWdabkp2YlNCY0lpNHVMM1YwYVd4ekwyMWxjbWRsVUdGa1pHbHVaMDlpYW1WamRDNXFjMXdpTzF4dWFXMXdiM0owSUdWNGNHRnVaRlJ2U0dGemFFMWhjQ0JtY205dElGd2lMaTR2ZFhScGJITXZaWGh3WVc1a1ZHOUlZWE5vVFdGd0xtcHpYQ0k3WEc1cGJYQnZjblFnZXlCc1pXWjBMQ0J5YVdkb2RDd2dZbUZ6WlZCc1lXTmxiV1Z1ZEhNc0lIUnZjQ3dnWW05MGRHOXRJSDBnWm5KdmJTQmNJaTR1TDJWdWRXMXpMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMGhVVFV4RmJHVnRaVzUwSUgwZ1puSnZiU0JjSWk0dUwyUnZiUzExZEdsc2N5OXBibk4wWVc1alpVOW1MbXB6WENJN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnBiWEJ2Y25RdmJtOHRkVzUxYzJWa0xXMXZaSFZzWlhOY2JseHVkbUZ5SUhSdlVHRmtaR2x1WjA5aWFtVmpkQ0E5SUdaMWJtTjBhVzl1SUhSdlVHRmtaR2x1WjA5aWFtVmpkQ2h3WVdSa2FXNW5MQ0J6ZEdGMFpTa2dlMXh1SUNCd1lXUmthVzVuSUQwZ2RIbHdaVzltSUhCaFpHUnBibWNnUFQwOUlDZG1kVzVqZEdsdmJpY2dQeUJ3WVdSa2FXNW5LRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJSE4wWVhSbExuSmxZM1J6TENCN1hHNGdJQ0FnY0d4aFkyVnRaVzUwT2lCemRHRjBaUzV3YkdGalpXMWxiblJjYmlBZ2ZTa3BJRG9nY0dGa1pHbHVaenRjYmlBZ2NtVjBkWEp1SUcxbGNtZGxVR0ZrWkdsdVowOWlhbVZqZENoMGVYQmxiMllnY0dGa1pHbHVaeUFoUFQwZ0oyNTFiV0psY2ljZ1B5QndZV1JrYVc1bklEb2daWGh3WVc1a1ZHOUlZWE5vVFdGd0tIQmhaR1JwYm1jc0lHSmhjMlZRYkdGalpXMWxiblJ6S1NrN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCaGNuSnZkeWhmY21WbUtTQjdYRzRnSUhaaGNpQmZjM1JoZEdVa2JXOWthV1pwWlhKelJHRjBZU1E3WEc1Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnWDNKbFppNXpkR0YwWlN4Y2JpQWdJQ0FnSUc1aGJXVWdQU0JmY21WbUxtNWhiV1VzWEc0Z0lDQWdJQ0J2Y0hScGIyNXpJRDBnWDNKbFppNXZjSFJwYjI1ek8xeHVJQ0IyWVhJZ1lYSnliM2RGYkdWdFpXNTBJRDBnYzNSaGRHVXVaV3hsYldWdWRITXVZWEp5YjNjN1hHNGdJSFpoY2lCd2IzQndaWEpQWm1aelpYUnpJRDBnYzNSaGRHVXViVzlrYVdacFpYSnpSR0YwWVM1d2IzQndaWEpQWm1aelpYUnpPMXh1SUNCMllYSWdZbUZ6WlZCc1lXTmxiV1Z1ZENBOUlHZGxkRUpoYzJWUWJHRmpaVzFsYm5Rb2MzUmhkR1V1Y0d4aFkyVnRaVzUwS1R0Y2JpQWdkbUZ5SUdGNGFYTWdQU0JuWlhSTllXbHVRWGhwYzBaeWIyMVFiR0ZqWlcxbGJuUW9ZbUZ6WlZCc1lXTmxiV1Z1ZENrN1hHNGdJSFpoY2lCcGMxWmxjblJwWTJGc0lEMGdXMnhsWm5Rc0lISnBaMmgwWFM1cGJtUmxlRTltS0dKaGMyVlFiR0ZqWlcxbGJuUXBJRDQ5SURBN1hHNGdJSFpoY2lCc1pXNGdQU0JwYzFabGNuUnBZMkZzSUQ4Z0oyaGxhV2RvZENjZ09pQW5kMmxrZEdnbk8xeHVYRzRnSUdsbUlDZ2hZWEp5YjNkRmJHVnRaVzUwSUh4OElDRndiM0J3WlhKUFptWnpaWFJ6S1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnZG1GeUlIQmhaR1JwYm1kUFltcGxZM1FnUFNCMGIxQmhaR1JwYm1kUFltcGxZM1FvYjNCMGFXOXVjeTV3WVdSa2FXNW5MQ0J6ZEdGMFpTazdYRzRnSUhaaGNpQmhjbkp2ZDFKbFkzUWdQU0JuWlhSTVlYbHZkWFJTWldOMEtHRnljbTkzUld4bGJXVnVkQ2s3WEc0Z0lIWmhjaUJ0YVc1UWNtOXdJRDBnWVhocGN5QTlQVDBnSjNrbklEOGdkRzl3SURvZ2JHVm1kRHRjYmlBZ2RtRnlJRzFoZUZCeWIzQWdQU0JoZUdseklEMDlQU0FuZVNjZ1B5QmliM1IwYjIwZ09pQnlhV2RvZER0Y2JpQWdkbUZ5SUdWdVpFUnBabVlnUFNCemRHRjBaUzV5WldOMGN5NXlaV1psY21WdVkyVmJiR1Z1WFNBcklITjBZWFJsTG5KbFkzUnpMbkpsWm1WeVpXNWpaVnRoZUdselhTQXRJSEJ2Y0hCbGNrOW1abk5sZEhOYllYaHBjMTBnTFNCemRHRjBaUzV5WldOMGN5NXdiM0J3WlhKYmJHVnVYVHRjYmlBZ2RtRnlJSE4wWVhKMFJHbG1aaUE5SUhCdmNIQmxjazltWm5ObGRITmJZWGhwYzEwZ0xTQnpkR0YwWlM1eVpXTjBjeTV5WldabGNtVnVZMlZiWVhocGMxMDdYRzRnSUhaaGNpQmhjbkp2ZDA5bVpuTmxkRkJoY21WdWRDQTlJR2RsZEU5bVpuTmxkRkJoY21WdWRDaGhjbkp2ZDBWc1pXMWxiblFwTzF4dUlDQjJZWElnWTJ4cFpXNTBVMmw2WlNBOUlHRnljbTkzVDJabWMyVjBVR0Z5Wlc1MElEOGdZWGhwY3lBOVBUMGdKM2tuSUQ4Z1lYSnliM2RQWm1aelpYUlFZWEpsYm5RdVkyeHBaVzUwU0dWcFoyaDBJSHg4SURBZ09pQmhjbkp2ZDA5bVpuTmxkRkJoY21WdWRDNWpiR2xsYm5SWGFXUjBhQ0I4ZkNBd0lEb2dNRHRjYmlBZ2RtRnlJR05sYm5SbGNsUnZVbVZtWlhKbGJtTmxJRDBnWlc1a1JHbG1aaUF2SURJZ0xTQnpkR0Z5ZEVScFptWWdMeUF5T3lBdkx5Qk5ZV3RsSUhOMWNtVWdkR2hsSUdGeWNtOTNJR1J2WlhOdUozUWdiM1psY21ac2IzY2dkR2hsSUhCdmNIQmxjaUJwWmlCMGFHVWdZMlZ1ZEdWeUlIQnZhVzUwSUdselhHNGdJQzh2SUc5MWRITnBaR1VnYjJZZ2RHaGxJSEJ2Y0hCbGNpQmliM1Z1WkhOY2JseHVJQ0IyWVhJZ2JXbHVJRDBnY0dGa1pHbHVaMDlpYW1WamRGdHRhVzVRY205d1hUdGNiaUFnZG1GeUlHMWhlQ0E5SUdOc2FXVnVkRk5wZW1VZ0xTQmhjbkp2ZDFKbFkzUmJiR1Z1WFNBdElIQmhaR1JwYm1kUFltcGxZM1JiYldGNFVISnZjRjA3WEc0Z0lIWmhjaUJqWlc1MFpYSWdQU0JqYkdsbGJuUlRhWHBsSUM4Z01pQXRJR0Z5Y205M1VtVmpkRnRzWlc1ZElDOGdNaUFySUdObGJuUmxjbFJ2VW1WbVpYSmxibU5sTzF4dUlDQjJZWElnYjJabWMyVjBJRDBnZDJsMGFHbHVLRzFwYml3Z1kyVnVkR1Z5TENCdFlYZ3BPeUF2THlCUWNtVjJaVzUwY3lCaWNtVmhhMmx1WnlCemVXNTBZWGdnYUdsbmFHeHBaMmgwYVc1bkxpNHVYRzVjYmlBZ2RtRnlJR0Y0YVhOUWNtOXdJRDBnWVhocGN6dGNiaUFnYzNSaGRHVXViVzlrYVdacFpYSnpSR0YwWVZ0dVlXMWxYU0E5SUNoZmMzUmhkR1VrYlc5a2FXWnBaWEp6UkdGMFlTUWdQU0I3ZlN3Z1gzTjBZWFJsSkcxdlpHbG1hV1Z5YzBSaGRHRWtXMkY0YVhOUWNtOXdYU0E5SUc5bVpuTmxkQ3dnWDNOMFlYUmxKRzF2WkdsbWFXVnljMFJoZEdFa0xtTmxiblJsY2s5bVpuTmxkQ0E5SUc5bVpuTmxkQ0F0SUdObGJuUmxjaXdnWDNOMFlYUmxKRzF2WkdsbWFXVnljMFJoZEdFa0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXWm1aV04wS0Y5eVpXWXlLU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJRjl5WldZeUxuTjBZWFJsTEZ4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUY5eVpXWXlMbTl3ZEdsdmJuTTdYRzRnSUhaaGNpQmZiM0IwYVc5dWN5UmxiR1Z0Wlc1MElEMGdiM0IwYVc5dWN5NWxiR1Z0Wlc1MExGeHVJQ0FnSUNBZ1lYSnliM2RGYkdWdFpXNTBJRDBnWDI5d2RHbHZibk1rWld4bGJXVnVkQ0E5UFQwZ2RtOXBaQ0F3SUQ4Z0oxdGtZWFJoTFhCdmNIQmxjaTFoY25KdmQxMG5JRG9nWDI5d2RHbHZibk1rWld4bGJXVnVkRHRjYmx4dUlDQnBaaUFvWVhKeWIzZEZiR1Z0Wlc1MElEMDlJRzUxYkd3cElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMGdMeThnUTFOVElITmxiR1ZqZEc5eVhHNWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHRnljbTkzUld4bGJXVnVkQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCaGNuSnZkMFZzWlcxbGJuUWdQU0J6ZEdGMFpTNWxiR1Z0Wlc1MGN5NXdiM0J3WlhJdWNYVmxjbmxUWld4bFkzUnZjaWhoY25KdmQwVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ2FXWWdLQ0ZoY25KdmQwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlGd2ljSEp2WkhWamRHbHZibHdpS1NCN1hHNGdJQ0FnYVdZZ0tDRnBjMGhVVFV4RmJHVnRaVzUwS0dGeWNtOTNSV3hsYldWdWRDa3BJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1d5ZFFiM0J3WlhJNklGd2lZWEp5YjNkY0lpQmxiR1Z0Wlc1MElHMTFjM1FnWW1VZ1lXNGdTRlJOVEVWc1pXMWxiblFnS0c1dmRDQmhiaUJUVmtkRmJHVnRaVzUwS1M0bkxDQW5WRzhnZFhObElHRnVJRk5XUnlCaGNuSnZkeXdnZDNKaGNDQnBkQ0JwYmlCaGJpQklWRTFNUld4bGJXVnVkQ0IwYUdGMElIZHBiR3dnWW1VZ2RYTmxaQ0JoY3ljc0lDZDBhR1VnWVhKeWIzY3VKMTB1YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9JV052Ym5SaGFXNXpLSE4wWVhSbExtVnNaVzFsYm5SekxuQnZjSEJsY2l3Z1lYSnliM2RGYkdWdFpXNTBLU2tnZTF4dUlDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnWENKd2NtOWtkV04wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1d5ZFFiM0J3WlhJNklGd2lZWEp5YjNkY0lpQnRiMlJwWm1sbGNseGNKM01nWUdWc1pXMWxiblJnSUcxMWMzUWdZbVVnWVNCamFHbHNaQ0J2WmlCMGFHVWdjRzl3Y0dWeUp5d2dKMlZzWlcxbGJuUXVKMTB1YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0J6ZEdGMFpTNWxiR1Z0Wlc1MGN5NWhjbkp2ZHlBOUlHRnljbTkzUld4bGJXVnVkRHRjYm4wZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHbHRjRzl5ZEM5dWJ5MTFiblZ6WldRdGJXOWtkV3hsYzF4dVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYm1GdFpUb2dKMkZ5Y205M0p5eGNiaUFnWlc1aFlteGxaRG9nZEhKMVpTeGNiaUFnY0doaGMyVTZJQ2R0WVdsdUp5eGNiaUFnWm00NklHRnljbTkzTEZ4dUlDQmxabVpsWTNRNklHVm1abVZqZEN4Y2JpQWdjbVZ4ZFdseVpYTTZJRnNuY0c5d2NHVnlUMlptYzJWMGN5ZGRMRnh1SUNCeVpYRjFhWEpsYzBsbVJYaHBjM1J6T2lCYkozQnlaWFpsYm5SUGRtVnlabXh2ZHlkZFhHNTlPeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR2RsZEZaaGNtbGhkR2x2Ymlod2JHRmpaVzFsYm5RcElIdGNiaUFnY21WMGRYSnVJSEJzWVdObGJXVnVkQzV6Y0d4cGRDZ25MU2NwV3pGZE8xeHVmU0lzSW1sdGNHOXlkQ0I3SUhSdmNDd2diR1ZtZEN3Z2NtbG5hSFFzSUdKdmRIUnZiU3dnWlc1a0lIMGdabkp2YlNCY0lpNHVMMlZ1ZFcxekxtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFQyWm1jMlYwVUdGeVpXNTBJR1p5YjIwZ1hDSXVMaTlrYjIwdGRYUnBiSE12WjJWMFQyWm1jMlYwVUdGeVpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBWMmx1Wkc5M0lHWnliMjBnWENJdUxpOWtiMjB0ZFhScGJITXZaMlYwVjJsdVpHOTNMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MElHWnliMjBnWENJdUxpOWtiMjB0ZFhScGJITXZaMlYwUkc5amRXMWxiblJGYkdWdFpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNCbWNtOXRJRndpTGk0dlpHOXRMWFYwYVd4ekwyZGxkRU52YlhCMWRHVmtVM1I1YkdVdWFuTmNJanRjYm1sdGNHOXlkQ0JuWlhSQ1lYTmxVR3hoWTJWdFpXNTBJR1p5YjIwZ1hDSXVMaTkxZEdsc2N5OW5aWFJDWVhObFVHeGhZMlZ0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFZtRnlhV0YwYVc5dUlHWnliMjBnWENJdUxpOTFkR2xzY3k5blpYUldZWEpwWVhScGIyNHVhbk5jSWp0Y2JtbHRjRzl5ZENCN0lISnZkVzVrSUgwZ1puSnZiU0JjSWk0dUwzVjBhV3h6TDIxaGRHZ3Vhbk5jSWpzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHbHRjRzl5ZEM5dWJ5MTFiblZ6WldRdGJXOWtkV3hsYzF4dVhHNTJZWElnZFc1elpYUlRhV1JsY3lBOUlIdGNiaUFnZEc5d09pQW5ZWFYwYnljc1hHNGdJSEpwWjJoME9pQW5ZWFYwYnljc1hHNGdJR0p2ZEhSdmJUb2dKMkYxZEc4bkxGeHVJQ0JzWldaME9pQW5ZWFYwYnlkY2JuMDdJQzh2SUZKdmRXNWtJSFJvWlNCdlptWnpaWFJ6SUhSdklIUm9aU0J1WldGeVpYTjBJSE4xYVhSaFlteGxJSE4xWW5CcGVHVnNJR0poYzJWa0lHOXVJSFJvWlNCRVVGSXVYRzR2THlCYWIyOXRhVzVuSUdOaGJpQmphR0Z1WjJVZ2RHaGxJRVJRVWl3Z1luVjBJR2wwSUhObFpXMXpJSFJ2SUhKbGNHOXlkQ0JoSUhaaGJIVmxJSFJvWVhRZ2QybHNiRnh1THk4Z1kyeGxZVzVzZVNCa2FYWnBaR1VnZEdobElIWmhiSFZsY3lCcGJuUnZJSFJvWlNCaGNIQnliM0J5YVdGMFpTQnpkV0p3YVhobGJITXVYRzVjYm1aMWJtTjBhVzl1SUhKdmRXNWtUMlptYzJWMGMwSjVSRkJTS0Y5eVpXWXBJSHRjYmlBZ2RtRnlJSGdnUFNCZmNtVm1MbmdzWEc0Z0lDQWdJQ0I1SUQwZ1gzSmxaaTU1TzF4dUlDQjJZWElnZDJsdUlEMGdkMmx1Wkc5M08xeHVJQ0IyWVhJZ1pIQnlJRDBnZDJsdUxtUmxkbWxqWlZCcGVHVnNVbUYwYVc4Z2ZId2dNVHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0I0T2lCeWIzVnVaQ2g0SUNvZ1pIQnlLU0F2SUdSd2NpQjhmQ0F3TEZ4dUlDQWdJSGs2SUhKdmRXNWtLSGtnS2lCa2NISXBJQzhnWkhCeUlIeDhJREJjYmlBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUcxaGNGUnZVM1I1YkdWektGOXlaV1l5S1NCN1hHNGdJSFpoY2lCZlQySnFaV04wSkdGemMybG5iakk3WEc1Y2JpQWdkbUZ5SUhCdmNIQmxjaUE5SUY5eVpXWXlMbkJ2Y0hCbGNpeGNiaUFnSUNBZ0lIQnZjSEJsY2xKbFkzUWdQU0JmY21WbU1pNXdiM0J3WlhKU1pXTjBMRnh1SUNBZ0lDQWdjR3hoWTJWdFpXNTBJRDBnWDNKbFpqSXVjR3hoWTJWdFpXNTBMRnh1SUNBZ0lDQWdkbUZ5YVdGMGFXOXVJRDBnWDNKbFpqSXVkbUZ5YVdGMGFXOXVMRnh1SUNBZ0lDQWdiMlptYzJWMGN5QTlJRjl5WldZeUxtOW1abk5sZEhNc1hHNGdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlGOXlaV1l5TG5CdmMybDBhVzl1TEZ4dUlDQWdJQ0FnWjNCMVFXTmpaV3hsY21GMGFXOXVJRDBnWDNKbFpqSXVaM0IxUVdOalpXeGxjbUYwYVc5dUxGeHVJQ0FnSUNBZ1lXUmhjSFJwZG1VZ1BTQmZjbVZtTWk1aFpHRndkR2wyWlN4Y2JpQWdJQ0FnSUhKdmRXNWtUMlptYzJWMGN5QTlJRjl5WldZeUxuSnZkVzVrVDJabWMyVjBjeXhjYmlBZ0lDQWdJR2x6Um1sNFpXUWdQU0JmY21WbU1pNXBjMFpwZUdWa08xeHVJQ0IyWVhJZ1gyOW1abk5sZEhNa2VDQTlJRzltWm5ObGRITXVlQ3hjYmlBZ0lDQWdJSGdnUFNCZmIyWm1jMlYwY3lSNElEMDlQU0IyYjJsa0lEQWdQeUF3SURvZ1gyOW1abk5sZEhNa2VDeGNiaUFnSUNBZ0lGOXZabVp6WlhSekpIa2dQU0J2Wm1aelpYUnpMbmtzWEc0Z0lDQWdJQ0I1SUQwZ1gyOW1abk5sZEhNa2VTQTlQVDBnZG05cFpDQXdJRDhnTUNBNklGOXZabVp6WlhSekpIazdYRzVjYmlBZ2RtRnlJRjl5WldZeklEMGdkSGx3Wlc5bUlISnZkVzVrVDJabWMyVjBjeUE5UFQwZ0oyWjFibU4wYVc5dUp5QS9JSEp2ZFc1a1QyWm1jMlYwY3loN1hHNGdJQ0FnZURvZ2VDeGNiaUFnSUNCNU9pQjVYRzRnSUgwcElEb2dlMXh1SUNBZ0lIZzZJSGdzWEc0Z0lDQWdlVG9nZVZ4dUlDQjlPMXh1WEc0Z0lIZ2dQU0JmY21WbU15NTRPMXh1SUNCNUlEMGdYM0psWmpNdWVUdGNiaUFnZG1GeUlHaGhjMWdnUFNCdlptWnpaWFJ6TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2Q0SnlrN1hHNGdJSFpoY2lCb1lYTlpJRDBnYjJabWMyVjBjeTVvWVhOUGQyNVFjbTl3WlhKMGVTZ25lU2NwTzF4dUlDQjJZWElnYzJsa1pWZ2dQU0JzWldaME8xeHVJQ0IyWVhJZ2MybGtaVmtnUFNCMGIzQTdYRzRnSUhaaGNpQjNhVzRnUFNCM2FXNWtiM2M3WEc1Y2JpQWdhV1lnS0dGa1lYQjBhWFpsS1NCN1hHNGdJQ0FnZG1GeUlHOW1abk5sZEZCaGNtVnVkQ0E5SUdkbGRFOW1abk5sZEZCaGNtVnVkQ2h3YjNCd1pYSXBPMXh1SUNBZ0lIWmhjaUJvWldsbmFIUlFjbTl3SUQwZ0oyTnNhV1Z1ZEVobGFXZG9kQ2M3WEc0Z0lDQWdkbUZ5SUhkcFpIUm9VSEp2Y0NBOUlDZGpiR2xsYm5SWGFXUjBhQ2M3WEc1Y2JpQWdJQ0JwWmlBb2IyWm1jMlYwVUdGeVpXNTBJRDA5UFNCblpYUlhhVzVrYjNjb2NHOXdjR1Z5S1NrZ2UxeHVJQ0FnSUNBZ2IyWm1jMlYwVUdGeVpXNTBJRDBnWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwS0hCdmNIQmxjaWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaG5aWFJEYjIxd2RYUmxaRk4wZVd4bEtHOW1abk5sZEZCaGNtVnVkQ2t1Y0c5emFYUnBiMjRnSVQwOUlDZHpkR0YwYVdNbklDWW1JSEJ2YzJsMGFXOXVJRDA5UFNBbllXSnpiMngxZEdVbktTQjdYRzRnSUNBZ0lDQWdJR2hsYVdkb2RGQnliM0FnUFNBbmMyTnliMnhzU0dWcFoyaDBKenRjYmlBZ0lDQWdJQ0FnZDJsa2RHaFFjbTl3SUQwZ0ozTmpjbTlzYkZkcFpIUm9KenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJQzh2SUNSR2JHOTNSbWw0VFdWYmFXNWpiMjF3WVhScFlteGxMV05oYzNSZE9pQm1iM0pqWlNCMGVYQmxJSEpsWm1sdVpXMWxiblFzSUhkbElHTnZiWEJoY21VZ2IyWm1jMlYwVUdGeVpXNTBJSGRwZEdnZ2QybHVaRzkzSUdGaWIzWmxMQ0JpZFhRZ1JteHZkeUJrYjJWemJpZDBJR1JsZEdWamRDQnBkRnh1WEc1Y2JpQWdJQ0J2Wm1aelpYUlFZWEpsYm5RZ1BTQnZabVp6WlhSUVlYSmxiblE3WEc1Y2JpQWdJQ0JwWmlBb2NHeGhZMlZ0Wlc1MElEMDlQU0IwYjNBZ2ZId2dLSEJzWVdObGJXVnVkQ0E5UFQwZ2JHVm1kQ0I4ZkNCd2JHRmpaVzFsYm5RZ1BUMDlJSEpwWjJoMEtTQW1KaUIyWVhKcFlYUnBiMjRnUFQwOUlHVnVaQ2tnZTF4dUlDQWdJQ0FnYzJsa1pWa2dQU0JpYjNSMGIyMDdYRzRnSUNBZ0lDQjJZWElnYjJabWMyVjBXU0E5SUdselJtbDRaV1FnSmlZZ2QybHVMblpwYzNWaGJGWnBaWGR3YjNKMElEOGdkMmx1TG5acGMzVmhiRlpwWlhkd2IzSjBMbWhsYVdkb2RDQTZJQzh2SUNSR2JHOTNSbWw0VFdWYmNISnZjQzF0YVhOemFXNW5YVnh1SUNBZ0lDQWdiMlptYzJWMFVHRnlaVzUwVzJobGFXZG9kRkJ5YjNCZE8xeHVJQ0FnSUNBZ2VTQXRQU0J2Wm1aelpYUlpJQzBnY0c5d2NHVnlVbVZqZEM1b1pXbG5hSFE3WEc0Z0lDQWdJQ0I1SUNvOUlHZHdkVUZqWTJWc1pYSmhkR2x2YmlBL0lERWdPaUF0TVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2NHeGhZMlZ0Wlc1MElEMDlQU0JzWldaMElIeDhJQ2h3YkdGalpXMWxiblFnUFQwOUlIUnZjQ0I4ZkNCd2JHRmpaVzFsYm5RZ1BUMDlJR0p2ZEhSdmJTa2dKaVlnZG1GeWFXRjBhVzl1SUQwOVBTQmxibVFwSUh0Y2JpQWdJQ0FnSUhOcFpHVllJRDBnY21sbmFIUTdYRzRnSUNBZ0lDQjJZWElnYjJabWMyVjBXQ0E5SUdselJtbDRaV1FnSmlZZ2QybHVMblpwYzNWaGJGWnBaWGR3YjNKMElEOGdkMmx1TG5acGMzVmhiRlpwWlhkd2IzSjBMbmRwWkhSb0lEb2dMeThnSkVac2IzZEdhWGhOWlZ0d2NtOXdMVzFwYzNOcGJtZGRYRzRnSUNBZ0lDQnZabVp6WlhSUVlYSmxiblJiZDJsa2RHaFFjbTl3WFR0Y2JpQWdJQ0FnSUhnZ0xUMGdiMlptYzJWMFdDQXRJSEJ2Y0hCbGNsSmxZM1F1ZDJsa2RHZzdYRzRnSUNBZ0lDQjRJQ285SUdkd2RVRmpZMlZzWlhKaGRHbHZiaUEvSURFZ09pQXRNVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ1kyOXRiVzl1VTNSNWJHVnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdYRzRnSUNBZ2NHOXphWFJwYjI0NklIQnZjMmwwYVc5dVhHNGdJSDBzSUdGa1lYQjBhWFpsSUNZbUlIVnVjMlYwVTJsa1pYTXBPMXh1WEc0Z0lIWmhjaUJmY21WbU5DQTlJSEp2ZFc1a1QyWm1jMlYwY3lBOVBUMGdkSEoxWlNBL0lISnZkVzVrVDJabWMyVjBjMEo1UkZCU0tIdGNiaUFnSUNCNE9pQjRMRnh1SUNBZ0lIazZJSGxjYmlBZ2ZTa2dPaUI3WEc0Z0lDQWdlRG9nZUN4Y2JpQWdJQ0I1T2lCNVhHNGdJSDA3WEc1Y2JpQWdlQ0E5SUY5eVpXWTBMbmc3WEc0Z0lIa2dQU0JmY21WbU5DNTVPMXh1WEc0Z0lHbG1JQ2huY0hWQlkyTmxiR1Z5WVhScGIyNHBJSHRjYmlBZ0lDQjJZWElnWDA5aWFtVmpkQ1JoYzNOcFoyNDdYRzVjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1kyOXRiVzl1VTNSNWJHVnpMQ0FvWDA5aWFtVmpkQ1JoYzNOcFoyNGdQU0I3ZlN3Z1gwOWlhbVZqZENSaGMzTnBaMjViYzJsa1pWbGRJRDBnYUdGeldTQS9JQ2N3SnlBNklDY25MQ0JmVDJKcVpXTjBKR0Z6YzJsbmJsdHphV1JsV0YwZ1BTQm9ZWE5ZSUQ4Z0p6QW5JRG9nSnljc0lGOVBZbXBsWTNRa1lYTnphV2R1TG5SeVlXNXpabTl5YlNBOUlDaDNhVzR1WkdWMmFXTmxVR2w0Wld4U1lYUnBieUI4ZkNBeEtTQThQU0F4SUQ4Z1hDSjBjbUZ1YzJ4aGRHVW9YQ0lnS3lCNElDc2dYQ0p3ZUN3Z1hDSWdLeUI1SUNzZ1hDSndlQ2xjSWlBNklGd2lkSEpoYm5Oc1lYUmxNMlFvWENJZ0t5QjRJQ3NnWENKd2VDd2dYQ0lnS3lCNUlDc2dYQ0p3ZUN3Z01DbGNJaXdnWDA5aWFtVmpkQ1JoYzNOcFoyNHBLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JqYjIxdGIyNVRkSGxzWlhNc0lDaGZUMkpxWldOMEpHRnpjMmxuYmpJZ1BTQjdmU3dnWDA5aWFtVmpkQ1JoYzNOcFoyNHlXM05wWkdWWlhTQTlJR2hoYzFrZ1B5QjVJQ3NnWENKd2VGd2lJRG9nSnljc0lGOVBZbXBsWTNRa1lYTnphV2R1TWx0emFXUmxXRjBnUFNCb1lYTllJRDhnZUNBcklGd2ljSGhjSWlBNklDY25MQ0JmVDJKcVpXTjBKR0Z6YzJsbmJqSXVkSEpoYm5ObWIzSnRJRDBnSnljc0lGOVBZbXBsWTNRa1lYTnphV2R1TWlrcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamIyMXdkWFJsVTNSNWJHVnpLRjl5WldZMUtTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlGOXlaV1kxTG5OMFlYUmxMRnh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJRjl5WldZMUxtOXdkR2x2Ym5NN1hHNGdJSFpoY2lCZmIzQjBhVzl1Y3lSbmNIVkJZMk5sYkdWeVlYUWdQU0J2Y0hScGIyNXpMbWR3ZFVGalkyVnNaWEpoZEdsdmJpeGNiaUFnSUNBZ0lHZHdkVUZqWTJWc1pYSmhkR2x2YmlBOUlGOXZjSFJwYjI1ekpHZHdkVUZqWTJWc1pYSmhkQ0E5UFQwZ2RtOXBaQ0F3SUQ4Z2RISjFaU0E2SUY5dmNIUnBiMjV6Skdkd2RVRmpZMlZzWlhKaGRDeGNiaUFnSUNBZ0lGOXZjSFJwYjI1ekpHRmtZWEIwYVhabElEMGdiM0IwYVc5dWN5NWhaR0Z3ZEdsMlpTeGNiaUFnSUNBZ0lHRmtZWEIwYVhabElEMGdYMjl3ZEdsdmJuTWtZV1JoY0hScGRtVWdQVDA5SUhadmFXUWdNQ0EvSUhSeWRXVWdPaUJmYjNCMGFXOXVjeVJoWkdGd2RHbDJaU3hjYmlBZ0lDQWdJRjl2Y0hScGIyNXpKSEp2ZFc1a1QyWm1jMlYwY3lBOUlHOXdkR2x2Ym5NdWNtOTFibVJQWm1aelpYUnpMRnh1SUNBZ0lDQWdjbTkxYm1SUFptWnpaWFJ6SUQwZ1gyOXdkR2x2Ym5Na2NtOTFibVJQWm1aelpYUnpJRDA5UFNCMmIybGtJREFnUHlCMGNuVmxJRG9nWDI5d2RHbHZibk1rY205MWJtUlBabVp6WlhSek8xeHVYRzRnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ1hDSndjbTlrZFdOMGFXOXVYQ0lwSUh0Y2JpQWdJQ0IyWVhJZ2RISmhibk5wZEdsdmJsQnliM0JsY25SNUlEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaHpkR0YwWlM1bGJHVnRaVzUwY3k1d2IzQndaWElwTG5SeVlXNXphWFJwYjI1UWNtOXdaWEowZVNCOGZDQW5KenRjYmx4dUlDQWdJR2xtSUNoaFpHRndkR2wyWlNBbUppQmJKM1J5WVc1elptOXliU2NzSUNkMGIzQW5MQ0FuY21sbmFIUW5MQ0FuWW05MGRHOXRKeXdnSjJ4bFpuUW5YUzV6YjIxbEtHWjFibU4wYVc5dUlDaHdjbTl3WlhKMGVTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlZVzV6YVhScGIyNVFjbTl3WlhKMGVTNXBibVJsZUU5bUtIQnliM0JsY25SNUtTQStQU0F3TzF4dUlDQWdJSDBwS1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9XeWRRYjNCd1pYSTZJRVJsZEdWamRHVmtJRU5UVXlCMGNtRnVjMmwwYVc5dWN5QnZiaUJoZENCc1pXRnpkQ0J2Ym1VZ2IyWWdkR2hsSUdadmJHeHZkMmx1Wnljc0lDZERVMU1nY0hKdmNHVnlkR2xsY3pvZ1hDSjBjbUZ1YzJadmNtMWNJaXdnWENKMGIzQmNJaXdnWENKeWFXZG9kRndpTENCY0ltSnZkSFJ2YlZ3aUxDQmNJbXhsWm5SY0lpNG5MQ0FuWEZ4dVhGeHVKeXdnSjBScGMyRmliR1VnZEdobElGd2lZMjl0Y0hWMFpWTjBlV3hsYzF3aUlHMXZaR2xtYVdWeVhGd25jeUJnWVdSaGNIUnBkbVZnSUc5d2RHbHZiaUIwYnlCaGJHeHZkeWNzSUNkbWIzSWdjMjF2YjNSb0lIUnlZVzV6YVhScGIyNXpMQ0J2Y2lCeVpXMXZkbVVnZEdobGMyVWdjSEp2Y0dWeWRHbGxjeUJtY205dElIUm9aU0JEVTFNbkxDQW5kSEpoYm5OcGRHbHZiaUJrWldOc1lYSmhkR2x2YmlCdmJpQjBhR1VnY0c5d2NHVnlJR1ZzWlcxbGJuUWdhV1lnYjI1c2VTQjBjbUZ1YzJsMGFXOXVhVzVuSnl3Z0oyOXdZV05wZEhrZ2IzSWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNpQm1iM0lnWlhoaGJYQnNaUzRuTENBblhGeHVYRnh1Snl3Z0oxZGxJSEpsWTI5dGJXVnVaQ0IxYzJsdVp5QjBhR1VnY0c5d2NHVnlJR1ZzWlcxbGJuUWdZWE1nWVNCM2NtRndjR1Z5SUdGeWIzVnVaQ0JoYmlCcGJtNWxjaWNzSUNkbGJHVnRaVzUwSUhSb1lYUWdZMkZ1SUdoaGRtVWdZVzU1SUVOVFV5QndjbTl3WlhKMGVTQjBjbUZ1YzJsMGFXOXVaV1FnWm05eUlHRnVhVzFoZEdsdmJuTXVKMTB1YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCMllYSWdZMjl0Ylc5dVUzUjViR1Z6SUQwZ2UxeHVJQ0FnSUhCc1lXTmxiV1Z1ZERvZ1oyVjBRbUZ6WlZCc1lXTmxiV1Z1ZENoemRHRjBaUzV3YkdGalpXMWxiblFwTEZ4dUlDQWdJSFpoY21saGRHbHZiam9nWjJWMFZtRnlhV0YwYVc5dUtITjBZWFJsTG5Cc1lXTmxiV1Z1ZENrc1hHNGdJQ0FnY0c5d2NHVnlPaUJ6ZEdGMFpTNWxiR1Z0Wlc1MGN5NXdiM0J3WlhJc1hHNGdJQ0FnY0c5d2NHVnlVbVZqZERvZ2MzUmhkR1V1Y21WamRITXVjRzl3Y0dWeUxGeHVJQ0FnSUdkd2RVRmpZMlZzWlhKaGRHbHZiam9nWjNCMVFXTmpaV3hsY21GMGFXOXVMRnh1SUNBZ0lHbHpSbWw0WldRNklITjBZWFJsTG05d2RHbHZibk11YzNSeVlYUmxaM2tnUFQwOUlDZG1hWGhsWkNkY2JpQWdmVHRjYmx4dUlDQnBaaUFvYzNSaGRHVXViVzlrYVdacFpYSnpSR0YwWVM1d2IzQndaWEpQWm1aelpYUnpJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQnpkR0YwWlM1emRIbHNaWE11Y0c5d2NHVnlJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnYzNSaGRHVXVjM1I1YkdWekxuQnZjSEJsY2l3Z2JXRndWRzlUZEhsc1pYTW9UMkpxWldOMExtRnpjMmxuYmloN2ZTd2dZMjl0Ylc5dVUzUjViR1Z6TENCN1hHNGdJQ0FnSUNCdlptWnpaWFJ6T2lCemRHRjBaUzV0YjJScFptbGxjbk5FWVhSaExuQnZjSEJsY2s5bVpuTmxkSE1zWEc0Z0lDQWdJQ0J3YjNOcGRHbHZiam9nYzNSaGRHVXViM0IwYVc5dWN5NXpkSEpoZEdWbmVTeGNiaUFnSUNBZ0lHRmtZWEIwYVhabE9pQmhaR0Z3ZEdsMlpTeGNiaUFnSUNBZ0lISnZkVzVrVDJabWMyVjBjem9nY205MWJtUlBabVp6WlhSelhHNGdJQ0FnZlNrcEtUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoemRHRjBaUzV0YjJScFptbGxjbk5FWVhSaExtRnljbTkzSUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXpkSGxzWlhNdVlYSnliM2NnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCemRHRjBaUzV6ZEhsc1pYTXVZWEp5YjNjc0lHMWhjRlJ2VTNSNWJHVnpLRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJR052YlcxdmJsTjBlV3hsY3l3Z2UxeHVJQ0FnSUNBZ2IyWm1jMlYwY3pvZ2MzUmhkR1V1Ylc5a2FXWnBaWEp6UkdGMFlTNWhjbkp2ZHl4Y2JpQWdJQ0FnSUhCdmMybDBhVzl1T2lBbllXSnpiMngxZEdVbkxGeHVJQ0FnSUNBZ1lXUmhjSFJwZG1VNklHWmhiSE5sTEZ4dUlDQWdJQ0FnY205MWJtUlBabVp6WlhSek9pQnliM1Z1WkU5bVpuTmxkSE5jYmlBZ0lDQjlLU2twTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1WVhSMGNtbGlkWFJsY3k1d2IzQndaWElnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCemRHRjBaUzVoZEhSeWFXSjFkR1Z6TG5CdmNIQmxjaXdnZTF4dUlDQWdJQ2RrWVhSaExYQnZjSEJsY2kxd2JHRmpaVzFsYm5Rbk9pQnpkR0YwWlM1d2JHRmpaVzFsYm5SY2JpQWdmU2s3WEc1OUlDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnBiWEJ2Y25RdmJtOHRkVzUxYzJWa0xXMXZaSFZzWlhOY2JseHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUc1aGJXVTZJQ2RqYjIxd2RYUmxVM1I1YkdWekp5eGNiaUFnWlc1aFlteGxaRG9nZEhKMVpTeGNiaUFnY0doaGMyVTZJQ2RpWldadmNtVlhjbWwwWlNjc1hHNGdJR1p1T2lCamIyMXdkWFJsVTNSNWJHVnpMRnh1SUNCa1lYUmhPaUI3ZlZ4dWZUc2lMQ0pwYlhCdmNuUWdaMlYwVjJsdVpHOTNJR1p5YjIwZ1hDSXVMaTlrYjIwdGRYUnBiSE12WjJWMFYybHVaRzkzTG1welhDSTdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JwYlhCdmNuUXZibTh0ZFc1MWMyVmtMVzF2WkhWc1pYTmNibHh1ZG1GeUlIQmhjM05wZG1VZ1BTQjdYRzRnSUhCaGMzTnBkbVU2SUhSeWRXVmNibjA3WEc1Y2JtWjFibU4wYVc5dUlHVm1abVZqZENoZmNtVm1LU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJRjl5WldZdWMzUmhkR1VzWEc0Z0lDQWdJQ0JwYm5OMFlXNWpaU0E5SUY5eVpXWXVhVzV6ZEdGdVkyVXNYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdYM0psWmk1dmNIUnBiMjV6TzF4dUlDQjJZWElnWDI5d2RHbHZibk1rYzJOeWIyeHNJRDBnYjNCMGFXOXVjeTV6WTNKdmJHd3NYRzRnSUNBZ0lDQnpZM0p2Ykd3Z1BTQmZiM0IwYVc5dWN5UnpZM0p2Ykd3Z1BUMDlJSFp2YVdRZ01DQS9JSFJ5ZFdVZ09pQmZiM0IwYVc5dWN5UnpZM0p2Ykd3c1hHNGdJQ0FnSUNCZmIzQjBhVzl1Y3lSeVpYTnBlbVVnUFNCdmNIUnBiMjV6TG5KbGMybDZaU3hjYmlBZ0lDQWdJSEpsYzJsNlpTQTlJRjl2Y0hScGIyNXpKSEpsYzJsNlpTQTlQVDBnZG05cFpDQXdJRDhnZEhKMVpTQTZJRjl2Y0hScGIyNXpKSEpsYzJsNlpUdGNiaUFnZG1GeUlIZHBibVJ2ZHlBOUlHZGxkRmRwYm1SdmR5aHpkR0YwWlM1bGJHVnRaVzUwY3k1d2IzQndaWElwTzF4dUlDQjJZWElnYzJOeWIyeHNVR0Z5Wlc1MGN5QTlJRnRkTG1OdmJtTmhkQ2h6ZEdGMFpTNXpZM0p2Ykd4UVlYSmxiblJ6TG5KbFptVnlaVzVqWlN3Z2MzUmhkR1V1YzJOeWIyeHNVR0Z5Wlc1MGN5NXdiM0J3WlhJcE8xeHVYRzRnSUdsbUlDaHpZM0p2Ykd3cElIdGNiaUFnSUNCelkzSnZiR3hRWVhKbGJuUnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSE5qY205c2JGQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2MyTnliMnhzVUdGeVpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM05qY205c2JDY3NJR2x1YzNSaGJtTmxMblZ3WkdGMFpTd2djR0Z6YzJsMlpTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JwWmlBb2NtVnphWHBsS1NCN1hHNGdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM0psYzJsNlpTY3NJR2x1YzNSaGJtTmxMblZ3WkdGMFpTd2djR0Z6YzJsMlpTazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNoelkzSnZiR3dwSUh0Y2JpQWdJQ0FnSUhOamNtOXNiRkJoY21WdWRITXVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9jMk55YjJ4c1VHRnlaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lITmpjbTlzYkZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkelkzSnZiR3duTENCcGJuTjBZVzVqWlM1MWNHUmhkR1VzSUhCaGMzTnBkbVVwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tISmxjMmw2WlNrZ2UxeHVJQ0FnSUNBZ2QybHVaRzkzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozSmxjMmw2WlNjc0lHbHVjM1JoYm1ObExuVndaR0YwWlN3Z2NHRnpjMmwyWlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1ZlNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2FXMXdiM0owTDI1dkxYVnVkWE5sWkMxdGIyUjFiR1Z6WEc1Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2UxeHVJQ0J1WVcxbE9pQW5aWFpsYm5STWFYTjBaVzVsY25NbkxGeHVJQ0JsYm1GaWJHVmtPaUIwY25WbExGeHVJQ0J3YUdGelpUb2dKM2R5YVhSbEp5eGNiaUFnWm00NklHWjFibU4wYVc5dUlHWnVLQ2tnZTMwc1hHNGdJR1ZtWm1WamREb2daV1ptWldOMExGeHVJQ0JrWVhSaE9pQjdmVnh1ZlRzaUxDSjJZWElnYUdGemFDQTlJSHRjYmlBZ2JHVm1kRG9nSjNKcFoyaDBKeXhjYmlBZ2NtbG5hSFE2SUNkc1pXWjBKeXhjYmlBZ1ltOTBkRzl0T2lBbmRHOXdKeXhjYmlBZ2RHOXdPaUFuWW05MGRHOXRKMXh1ZlR0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRFOXdjRzl6YVhSbFVHeGhZMlZ0Wlc1MEtIQnNZV05sYldWdWRDa2dlMXh1SUNCeVpYUjFjbTRnY0d4aFkyVnRaVzUwTG5KbGNHeGhZMlVvTDJ4bFpuUjhjbWxuYUhSOFltOTBkRzl0ZkhSdmNDOW5MQ0JtZFc1amRHbHZiaUFvYldGMFkyaGxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQm9ZWE5vVzIxaGRHTm9aV1JkTzF4dUlDQjlLVHRjYm4waUxDSjJZWElnYUdGemFDQTlJSHRjYmlBZ2MzUmhjblE2SUNkbGJtUW5MRnh1SUNCbGJtUTZJQ2R6ZEdGeWRDZGNibjA3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJuWlhSUGNIQnZjMmwwWlZaaGNtbGhkR2x2YmxCc1lXTmxiV1Z1ZENod2JHRmpaVzFsYm5RcElIdGNiaUFnY21WMGRYSnVJSEJzWVdObGJXVnVkQzV5WlhCc1lXTmxLQzl6ZEdGeWRIeGxibVF2Wnl3Z1puVnVZM1JwYjI0Z0tHMWhkR05vWldRcElIdGNiaUFnSUNCeVpYUjFjbTRnYUdGemFGdHRZWFJqYUdWa1hUdGNiaUFnZlNrN1hHNTlJaXdpYVcxd2IzSjBJR2RsZEZkcGJtUnZkeUJtY205dElGd2lMaTluWlhSWGFXNWtiM2N1YW5OY0lqdGNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHZGxkRmRwYm1SdmQxTmpjbTlzYkNodWIyUmxLU0I3WEc0Z0lIWmhjaUIzYVc0Z1BTQm5aWFJYYVc1a2IzY29ibTlrWlNrN1hHNGdJSFpoY2lCelkzSnZiR3hNWldaMElEMGdkMmx1TG5CaFoyVllUMlptYzJWME8xeHVJQ0IyWVhJZ2MyTnliMnhzVkc5d0lEMGdkMmx1TG5CaFoyVlpUMlptYzJWME8xeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lITmpjbTlzYkV4bFpuUTZJSE5qY205c2JFeGxablFzWEc0Z0lDQWdjMk55YjJ4c1ZHOXdPaUJ6WTNKdmJHeFViM0JjYmlBZ2ZUdGNibjBpTENKcGJYQnZjblFnWjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMElHWnliMjBnWENJdUwyZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRVJ2WTNWdFpXNTBSV3hsYldWdWRDQm1jbTl0SUZ3aUxpOW5aWFJFYjJOMWJXVnVkRVZzWlcxbGJuUXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUlhhVzVrYjNkVFkzSnZiR3dnWm5KdmJTQmNJaTR2WjJWMFYybHVaRzkzVTJOeWIyeHNMbXB6WENJN1hHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCblpYUlhhVzVrYjNkVFkzSnZiR3hDWVhKWUtHVnNaVzFsYm5RcElIdGNiaUFnTHk4Z1NXWWdQR2gwYld3K0lHaGhjeUJoSUVOVFV5QjNhV1IwYUNCbmNtVmhkR1Z5SUhSb1lXNGdkR2hsSUhacFpYZHdiM0owTENCMGFHVnVJSFJvYVhNZ2QybHNiQ0JpWlZ4dUlDQXZMeUJwYm1OdmNuSmxZM1FnWm05eUlGSlVUQzVjYmlBZ0x5OGdVRzl3Y0dWeUlERWdhWE1nWW5KdmEyVnVJR2x1SUhSb2FYTWdZMkZ6WlNCaGJtUWdibVYyWlhJZ2FHRmtJR0VnWW5WbklISmxjRzl5ZENCemJ5QnNaWFFuY3lCaGMzTjFiV1ZjYmlBZ0x5OGdhWFFuY3lCdWIzUWdZVzRnYVhOemRXVXVJRWtnWkc5dUozUWdkR2hwYm1zZ1lXNTViMjVsSUdWMlpYSWdjM0JsWTJsbWFXVnpJSGRwWkhSb0lHOXVJRHhvZEcxc1BseHVJQ0F2THlCaGJubDNZWGt1WEc0Z0lDOHZJRUp5YjNkelpYSnpJSGRvWlhKbElIUm9aU0JzWldaMElITmpjbTlzYkdKaGNpQmtiMlZ6YmlkMElHTmhkWE5sSUdGdUlHbHpjM1ZsSUhKbGNHOXlkQ0JnTUdBZ1ptOXlYRzRnSUM4dklIUm9hWE1nS0dVdVp5NGdSV1JuWlNBeU1ERTVMQ0JKUlRFeExDQlRZV1poY21rcFhHNGdJSEpsZEhWeWJpQm5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwS0dWc1pXMWxiblFwS1M1c1pXWjBJQ3NnWjJWMFYybHVaRzkzVTJOeWIyeHNLR1ZzWlcxbGJuUXBMbk5qY205c2JFeGxablE3WEc1OUlpd2lhVzF3YjNKMElHZGxkRU52YlhCMWRHVmtVM1I1YkdVZ1puSnZiU0JjSWk0dloyVjBRMjl0Y0hWMFpXUlRkSGxzWlM1cWMxd2lPMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdhWE5UWTNKdmJHeFFZWEpsYm5Rb1pXeGxiV1Z1ZENrZ2UxeHVJQ0F2THlCR2FYSmxabTk0SUhkaGJuUnpJSFZ6SUhSdklHTm9aV05ySUdBdGVHQWdZVzVrSUdBdGVXQWdkbUZ5YVdGMGFXOXVjeUJoY3lCM1pXeHNYRzRnSUhaaGNpQmZaMlYwUTI5dGNIVjBaV1JUZEhsc1pTQTlJR2RsZEVOdmJYQjFkR1ZrVTNSNWJHVW9aV3hsYldWdWRDa3NYRzRnSUNBZ0lDQnZkbVZ5Wm14dmR5QTlJRjluWlhSRGIyMXdkWFJsWkZOMGVXeGxMbTkyWlhKbWJHOTNMRnh1SUNBZ0lDQWdiM1psY21ac2IzZFlJRDBnWDJkbGRFTnZiWEIxZEdWa1UzUjViR1V1YjNabGNtWnNiM2RZTEZ4dUlDQWdJQ0FnYjNabGNtWnNiM2RaSUQwZ1gyZGxkRU52YlhCMWRHVmtVM1I1YkdVdWIzWmxjbVpzYjNkWk8xeHVYRzRnSUhKbGRIVnliaUF2WVhWMGIzeHpZM0p2Ykd4OGIzWmxjbXhoZVh4b2FXUmtaVzR2TG5SbGMzUW9iM1psY21ac2IzY2dLeUJ2ZG1WeVpteHZkMWtnS3lCdmRtVnlabXh2ZDFncE8xeHVmU0lzSW1sdGNHOXlkQ0JuWlhSUVlYSmxiblJPYjJSbElHWnliMjBnWENJdUwyZGxkRkJoY21WdWRFNXZaR1V1YW5OY0lqdGNibWx0Y0c5eWRDQnBjMU5qY205c2JGQmhjbVZ1ZENCbWNtOXRJRndpTGk5cGMxTmpjbTlzYkZCaGNtVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRTV2WkdWT1lXMWxJR1p5YjIwZ1hDSXVMMmRsZEU1dlpHVk9ZVzFsTG1welhDSTdYRzVwYlhCdmNuUWdleUJwYzBoVVRVeEZiR1Z0Wlc1MElIMGdabkp2YlNCY0lpNHZhVzV6ZEdGdVkyVlBaaTVxYzF3aU8xeHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1oyVjBVMk55YjJ4c1VHRnlaVzUwS0c1dlpHVXBJSHRjYmlBZ2FXWWdLRnNuYUhSdGJDY3NJQ2RpYjJSNUp5d2dKeU5rYjJOMWJXVnVkQ2RkTG1sdVpHVjRUMllvWjJWMFRtOWtaVTVoYldVb2JtOWtaU2twSUQ0OUlEQXBJSHRjYmlBZ0lDQXZMeUFrUm14dmQwWnBlRTFsVzJsdVkyOXRjR0YwYVdKc1pTMXlaWFIxY201ZE9pQmhjM04xYldVZ1ltOWtlU0JwY3lCaGJIZGhlWE1nWVhaaGFXeGhZbXhsWEc0Z0lDQWdjbVYwZFhKdUlHNXZaR1V1YjNkdVpYSkViMk4xYldWdWRDNWliMlI1TzF4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6U0ZSTlRFVnNaVzFsYm5Rb2JtOWtaU2tnSmlZZ2FYTlRZM0p2Ykd4UVlYSmxiblFvYm05a1pTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtOWtaVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJuWlhSVFkzSnZiR3hRWVhKbGJuUW9aMlYwVUdGeVpXNTBUbTlrWlNodWIyUmxLU2s3WEc1OUlpd2lhVzF3YjNKMElHZGxkRk5qY205c2JGQmhjbVZ1ZENCbWNtOXRJRndpTGk5blpYUlRZM0p2Ykd4UVlYSmxiblF1YW5OY0lqdGNibWx0Y0c5eWRDQm5aWFJRWVhKbGJuUk9iMlJsSUdaeWIyMGdYQ0l1TDJkbGRGQmhjbVZ1ZEU1dlpHVXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUlhhVzVrYjNjZ1puSnZiU0JjSWk0dloyVjBWMmx1Wkc5M0xtcHpYQ0k3WEc1cGJYQnZjblFnYVhOVFkzSnZiR3hRWVhKbGJuUWdabkp2YlNCY0lpNHZhWE5UWTNKdmJHeFFZWEpsYm5RdWFuTmNJanRjYmk4cVhHNW5hWFpsYmlCaElFUlBUU0JsYkdWdFpXNTBMQ0J5WlhSMWNtNGdkR2hsSUd4cGMzUWdiMllnWVd4c0lITmpjbTlzYkNCd1lYSmxiblJ6TENCMWNDQjBhR1VnYkdsemRDQnZaaUJoYm1ObGMyOXljMXh1ZFc1MGFXd2dkMlVnWjJWMElIUnZJSFJvWlNCMGIzQWdkMmx1Wkc5M0lHOWlhbVZqZEM0Z1ZHaHBjeUJzYVhOMElHbHpJSGRvWVhRZ2QyVWdZWFIwWVdOb0lITmpjbTlzYkNCc2FYTjBaVzVsY25OY2JuUnZMQ0JpWldOaGRYTmxJR2xtSUdGdWVTQnZaaUIwYUdWelpTQndZWEpsYm5RZ1pXeGxiV1Z1ZEhNZ2MyTnliMnhzTENCM1pTZHNiQ0J1WldWa0lIUnZJSEpsTFdOaGJHTjFiR0YwWlNCMGFHVmNibkpsWm1WeVpXNWpaU0JsYkdWdFpXNTBKM01nY0c5emFYUnBiMjR1WEc0cUwxeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnNhWE4wVTJOeWIyeHNVR0Z5Wlc1MGN5aGxiR1Z0Wlc1MExDQnNhWE4wS1NCN1hHNGdJSFpoY2lCZlpXeGxiV1Z1ZENSdmQyNWxja1J2WTNWdFpXNDdYRzVjYmlBZ2FXWWdLR3hwYzNRZ1BUMDlJSFp2YVdRZ01Da2dlMXh1SUNBZ0lHeHBjM1FnUFNCYlhUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCelkzSnZiR3hRWVhKbGJuUWdQU0JuWlhSVFkzSnZiR3hRWVhKbGJuUW9aV3hsYldWdWRDazdYRzRnSUhaaGNpQnBjMEp2WkhrZ1BTQnpZM0p2Ykd4UVlYSmxiblFnUFQwOUlDZ29YMlZzWlcxbGJuUWtiM2R1WlhKRWIyTjFiV1Z1SUQwZ1pXeGxiV1Z1ZEM1dmQyNWxja1J2WTNWdFpXNTBLU0E5UFNCdWRXeHNJRDhnZG05cFpDQXdJRG9nWDJWc1pXMWxiblFrYjNkdVpYSkViMk4xYldWdUxtSnZaSGtwTzF4dUlDQjJZWElnZDJsdUlEMGdaMlYwVjJsdVpHOTNLSE5qY205c2JGQmhjbVZ1ZENrN1hHNGdJSFpoY2lCMFlYSm5aWFFnUFNCcGMwSnZaSGtnUHlCYmQybHVYUzVqYjI1allYUW9kMmx1TG5acGMzVmhiRlpwWlhkd2IzSjBJSHg4SUZ0ZExDQnBjMU5qY205c2JGQmhjbVZ1ZENoelkzSnZiR3hRWVhKbGJuUXBJRDhnYzJOeWIyeHNVR0Z5Wlc1MElEb2dXMTBwSURvZ2MyTnliMnhzVUdGeVpXNTBPMXh1SUNCMllYSWdkWEJrWVhSbFpFeHBjM1FnUFNCc2FYTjBMbU52Ym1OaGRDaDBZWEpuWlhRcE8xeHVJQ0J5WlhSMWNtNGdhWE5DYjJSNUlEOGdkWEJrWVhSbFpFeHBjM1FnT2lBdkx5QWtSbXh2ZDBacGVFMWxXMmx1WTI5dGNHRjBhV0pzWlMxallXeHNYVG9nYVhOQ2IyUjVJSFJsYkd4eklIVnpJSFJoY21kbGRDQjNhV3hzSUdKbElHRnVJRWhVVFV4RmJHVnRaVzUwSUdobGNtVmNiaUFnZFhCa1lYUmxaRXhwYzNRdVkyOXVZMkYwS0d4cGMzUlRZM0p2Ykd4UVlYSmxiblJ6S0dkbGRGQmhjbVZ1ZEU1dlpHVW9kR0Z5WjJWMEtTa3BPMXh1ZlNJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhKbFkzUlViME5zYVdWdWRGSmxZM1FvY21WamRDa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnY21WamRDd2dlMXh1SUNBZ0lHeGxablE2SUhKbFkzUXVlQ3hjYmlBZ0lDQjBiM0E2SUhKbFkzUXVlU3hjYmlBZ0lDQnlhV2RvZERvZ2NtVmpkQzU0SUNzZ2NtVmpkQzUzYVdSMGFDeGNiaUFnSUNCaWIzUjBiMjA2SUhKbFkzUXVlU0FySUhKbFkzUXVhR1ZwWjJoMFhHNGdJSDBwTzF4dWZTSXNJbWx0Y0c5eWRDQjdJSFpwWlhkd2IzSjBJSDBnWm5KdmJTQmNJaTR1TDJWdWRXMXpMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBWbWxsZDNCdmNuUlNaV04wSUdaeWIyMGdYQ0l1TDJkbGRGWnBaWGR3YjNKMFVtVmpkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRVJ2WTNWdFpXNTBVbVZqZENCbWNtOXRJRndpTGk5blpYUkViMk4xYldWdWRGSmxZM1F1YW5OY0lqdGNibWx0Y0c5eWRDQnNhWE4wVTJOeWIyeHNVR0Z5Wlc1MGN5Qm1jbTl0SUZ3aUxpOXNhWE4wVTJOeWIyeHNVR0Z5Wlc1MGN5NXFjMXdpTzF4dWFXMXdiM0owSUdkbGRFOW1abk5sZEZCaGNtVnVkQ0JtY205dElGd2lMaTluWlhSUFptWnpaWFJRWVhKbGJuUXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUkViMk4xYldWdWRFVnNaVzFsYm5RZ1puSnZiU0JjSWk0dloyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFEyOXRjSFYwWldSVGRIbHNaU0JtY205dElGd2lMaTluWlhSRGIyMXdkWFJsWkZOMGVXeGxMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnBjMFZzWlcxbGJuUXNJR2x6U0ZSTlRFVnNaVzFsYm5RZ2ZTQm1jbTl0SUZ3aUxpOXBibk4wWVc1alpVOW1MbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBJR1p5YjIwZ1hDSXVMMmRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZEM1cWMxd2lPMXh1YVcxd2IzSjBJR2RsZEZCaGNtVnVkRTV2WkdVZ1puSnZiU0JjSWk0dloyVjBVR0Z5Wlc1MFRtOWtaUzVxYzF3aU8xeHVhVzF3YjNKMElHTnZiblJoYVc1eklHWnliMjBnWENJdUwyTnZiblJoYVc1ekxtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFRtOWtaVTVoYldVZ1puSnZiU0JjSWk0dloyVjBUbTlrWlU1aGJXVXVhbk5jSWp0Y2JtbHRjRzl5ZENCeVpXTjBWRzlEYkdsbGJuUlNaV04wSUdaeWIyMGdYQ0l1TGk5MWRHbHNjeTl5WldOMFZHOURiR2xsYm5SU1pXTjBMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnRZWGdzSUcxcGJpQjlJR1p5YjIwZ1hDSXVMaTkxZEdsc2N5OXRZWFJvTG1welhDSTdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFbHVibVZ5UW05MWJtUnBibWREYkdsbGJuUlNaV04wS0dWc1pXMWxiblFwSUh0Y2JpQWdkbUZ5SUhKbFkzUWdQU0JuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb1pXeGxiV1Z1ZENrN1hHNGdJSEpsWTNRdWRHOXdJRDBnY21WamRDNTBiM0FnS3lCbGJHVnRaVzUwTG1Oc2FXVnVkRlJ2Y0R0Y2JpQWdjbVZqZEM1c1pXWjBJRDBnY21WamRDNXNaV1owSUNzZ1pXeGxiV1Z1ZEM1amJHbGxiblJNWldaME8xeHVJQ0J5WldOMExtSnZkSFJ2YlNBOUlISmxZM1F1ZEc5d0lDc2daV3hsYldWdWRDNWpiR2xsYm5SSVpXbG5hSFE3WEc0Z0lISmxZM1F1Y21sbmFIUWdQU0J5WldOMExteGxablFnS3lCbGJHVnRaVzUwTG1Oc2FXVnVkRmRwWkhSb08xeHVJQ0J5WldOMExuZHBaSFJvSUQwZ1pXeGxiV1Z1ZEM1amJHbGxiblJYYVdSMGFEdGNiaUFnY21WamRDNW9aV2xuYUhRZ1BTQmxiR1Z0Wlc1MExtTnNhV1Z1ZEVobGFXZG9kRHRjYmlBZ2NtVmpkQzU0SUQwZ2NtVmpkQzVzWldaME8xeHVJQ0J5WldOMExua2dQU0J5WldOMExuUnZjRHRjYmlBZ2NtVjBkWEp1SUhKbFkzUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRU5zYVdWdWRGSmxZM1JHY205dFRXbDRaV1JVZVhCbEtHVnNaVzFsYm5Rc0lHTnNhWEJ3YVc1blVHRnlaVzUwS1NCN1hHNGdJSEpsZEhWeWJpQmpiR2x3Y0dsdVoxQmhjbVZ1ZENBOVBUMGdkbWxsZDNCdmNuUWdQeUJ5WldOMFZHOURiR2xsYm5SU1pXTjBLR2RsZEZacFpYZHdiM0owVW1WamRDaGxiR1Z0Wlc1MEtTa2dPaUJwYzBWc1pXMWxiblFvWTJ4cGNIQnBibWRRWVhKbGJuUXBJRDhnWjJWMFNXNXVaWEpDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvWTJ4cGNIQnBibWRRWVhKbGJuUXBJRG9nY21WamRGUnZRMnhwWlc1MFVtVmpkQ2huWlhSRWIyTjFiV1Z1ZEZKbFkzUW9aMlYwUkc5amRXMWxiblJGYkdWdFpXNTBLR1ZzWlcxbGJuUXBLU2s3WEc1OUlDOHZJRUVnWENKamJHbHdjR2x1WnlCd1lYSmxiblJjSWlCcGN5QmhiaUJ2ZG1WeVpteHZkMkZpYkdVZ1kyOXVkR0ZwYm1WeUlIZHBkR2dnZEdobElHTm9ZWEpoWTNSbGNtbHpkR2xqSUc5bVhHNHZMeUJqYkdsd2NHbHVaeUFvYjNJZ2FHbGthVzVuS1NCdmRtVnlabXh2ZDJsdVp5QmxiR1Z0Wlc1MGN5QjNhWFJvSUdFZ2NHOXphWFJwYjI0Z1pHbG1abVZ5Wlc1MElHWnliMjFjYmk4dklHQnBibWwwYVdGc1lGeHVYRzVjYm1aMWJtTjBhVzl1SUdkbGRFTnNhWEJ3YVc1blVHRnlaVzUwY3lobGJHVnRaVzUwS1NCN1hHNGdJSFpoY2lCamJHbHdjR2x1WjFCaGNtVnVkSE1nUFNCc2FYTjBVMk55YjJ4c1VHRnlaVzUwY3loblpYUlFZWEpsYm5ST2IyUmxLR1ZzWlcxbGJuUXBLVHRjYmlBZ2RtRnlJR05oYmtWelkyRndaVU5zYVhCd2FXNW5JRDBnV3lkaFluTnZiSFYwWlNjc0lDZG1hWGhsWkNkZExtbHVaR1Y0VDJZb1oyVjBRMjl0Y0hWMFpXUlRkSGxzWlNobGJHVnRaVzUwS1M1d2IzTnBkR2x2YmlrZ1BqMGdNRHRjYmlBZ2RtRnlJR05zYVhCd1pYSkZiR1Z0Wlc1MElEMGdZMkZ1UlhOallYQmxRMnhwY0hCcGJtY2dKaVlnYVhOSVZFMU1SV3hsYldWdWRDaGxiR1Z0Wlc1MEtTQS9JR2RsZEU5bVpuTmxkRkJoY21WdWRDaGxiR1Z0Wlc1MEtTQTZJR1ZzWlcxbGJuUTdYRzVjYmlBZ2FXWWdLQ0ZwYzBWc1pXMWxiblFvWTJ4cGNIQmxja1ZzWlcxbGJuUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGdGRPMXh1SUNCOUlDOHZJQ1JHYkc5M1JtbDRUV1ZiYVc1amIyMXdZWFJwWW14bExYSmxkSFZ5YmwwNklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1ZV05sWW05dmF5OW1iRzkzTDJsemMzVmxjeTh4TkRFMFhHNWNibHh1SUNCeVpYUjFjbTRnWTJ4cGNIQnBibWRRWVhKbGJuUnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9ZMnhwY0hCcGJtZFFZWEpsYm5RcElIdGNiaUFnSUNCeVpYUjFjbTRnYVhORmJHVnRaVzUwS0dOc2FYQndhVzVuVUdGeVpXNTBLU0FtSmlCamIyNTBZV2x1Y3loamJHbHdjR2x1WjFCaGNtVnVkQ3dnWTJ4cGNIQmxja1ZzWlcxbGJuUXBJQ1ltSUdkbGRFNXZaR1ZPWVcxbEtHTnNhWEJ3YVc1blVHRnlaVzUwS1NBaFBUMGdKMkp2Wkhrbk8xeHVJQ0I5S1R0Y2JuMGdMeThnUjJWMGN5QjBhR1VnYldGNGFXMTFiU0JoY21WaElIUm9ZWFFnZEdobElHVnNaVzFsYm5RZ2FYTWdkbWx6YVdKc1pTQnBiaUJrZFdVZ2RHOGdZVzU1SUc1MWJXSmxjaUJ2Wmx4dUx5OGdZMnhwY0hCcGJtY2djR0Z5Wlc1MGMxeHVYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR2RsZEVOc2FYQndhVzVuVW1WamRDaGxiR1Z0Wlc1MExDQmliM1Z1WkdGeWVTd2djbTl2ZEVKdmRXNWtZWEo1S1NCN1hHNGdJSFpoY2lCdFlXbHVRMnhwY0hCcGJtZFFZWEpsYm5SeklEMGdZbTkxYm1SaGNua2dQVDA5SUNkamJHbHdjR2x1WjFCaGNtVnVkSE1uSUQ4Z1oyVjBRMnhwY0hCcGJtZFFZWEpsYm5SektHVnNaVzFsYm5RcElEb2dXMTB1WTI5dVkyRjBLR0p2ZFc1a1lYSjVLVHRjYmlBZ2RtRnlJR05zYVhCd2FXNW5VR0Z5Wlc1MGN5QTlJRnRkTG1OdmJtTmhkQ2h0WVdsdVEyeHBjSEJwYm1kUVlYSmxiblJ6TENCYmNtOXZkRUp2ZFc1a1lYSjVYU2s3WEc0Z0lIWmhjaUJtYVhKemRFTnNhWEJ3YVc1blVHRnlaVzUwSUQwZ1kyeHBjSEJwYm1kUVlYSmxiblJ6V3pCZE8xeHVJQ0IyWVhJZ1kyeHBjSEJwYm1kU1pXTjBJRDBnWTJ4cGNIQnBibWRRWVhKbGJuUnpMbkpsWkhWalpTaG1kVzVqZEdsdmJpQW9ZV05qVW1WamRDd2dZMnhwY0hCcGJtZFFZWEpsYm5RcElIdGNiaUFnSUNCMllYSWdjbVZqZENBOUlHZGxkRU5zYVdWdWRGSmxZM1JHY205dFRXbDRaV1JVZVhCbEtHVnNaVzFsYm5Rc0lHTnNhWEJ3YVc1blVHRnlaVzUwS1R0Y2JpQWdJQ0JoWTJOU1pXTjBMblJ2Y0NBOUlHMWhlQ2h5WldOMExuUnZjQ3dnWVdOalVtVmpkQzUwYjNBcE8xeHVJQ0FnSUdGalkxSmxZM1F1Y21sbmFIUWdQU0J0YVc0b2NtVmpkQzV5YVdkb2RDd2dZV05qVW1WamRDNXlhV2RvZENrN1hHNGdJQ0FnWVdOalVtVmpkQzVpYjNSMGIyMGdQU0J0YVc0b2NtVmpkQzVpYjNSMGIyMHNJR0ZqWTFKbFkzUXVZbTkwZEc5dEtUdGNiaUFnSUNCaFkyTlNaV04wTG14bFpuUWdQU0J0WVhnb2NtVmpkQzVzWldaMExDQmhZMk5TWldOMExteGxablFwTzF4dUlDQWdJSEpsZEhWeWJpQmhZMk5TWldOME8xeHVJQ0I5TENCblpYUkRiR2xsYm5SU1pXTjBSbkp2YlUxcGVHVmtWSGx3WlNobGJHVnRaVzUwTENCbWFYSnpkRU5zYVhCd2FXNW5VR0Z5Wlc1MEtTazdYRzRnSUdOc2FYQndhVzVuVW1WamRDNTNhV1IwYUNBOUlHTnNhWEJ3YVc1blVtVmpkQzV5YVdkb2RDQXRJR05zYVhCd2FXNW5VbVZqZEM1c1pXWjBPMXh1SUNCamJHbHdjR2x1WjFKbFkzUXVhR1ZwWjJoMElEMGdZMnhwY0hCcGJtZFNaV04wTG1KdmRIUnZiU0F0SUdOc2FYQndhVzVuVW1WamRDNTBiM0E3WEc0Z0lHTnNhWEJ3YVc1blVtVmpkQzU0SUQwZ1kyeHBjSEJwYm1kU1pXTjBMbXhsWm5RN1hHNGdJR05zYVhCd2FXNW5VbVZqZEM1NUlEMGdZMnhwY0hCcGJtZFNaV04wTG5SdmNEdGNiaUFnY21WMGRYSnVJR05zYVhCd2FXNW5VbVZqZER0Y2JuMGlMQ0pwYlhCdmNuUWdaMlYwVjJsdVpHOTNJR1p5YjIwZ1hDSXVMMmRsZEZkcGJtUnZkeTVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRVJ2WTNWdFpXNTBSV3hsYldWdWRDQm1jbTl0SUZ3aUxpOW5aWFJFYjJOMWJXVnVkRVZzWlcxbGJuUXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUlhhVzVrYjNkVFkzSnZiR3hDWVhKWUlHWnliMjBnWENJdUwyZGxkRmRwYm1SdmQxTmpjbTlzYkVKaGNsZ3Vhbk5jSWp0Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRGWnBaWGR3YjNKMFVtVmpkQ2hsYkdWdFpXNTBLU0I3WEc0Z0lIWmhjaUIzYVc0Z1BTQm5aWFJYYVc1a2IzY29aV3hsYldWdWRDazdYRzRnSUhaaGNpQm9kRzFzSUQwZ1oyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHVJQ0IyWVhJZ2RtbHpkV0ZzVm1sbGQzQnZjblFnUFNCM2FXNHVkbWx6ZFdGc1ZtbGxkM0J2Y25RN1hHNGdJSFpoY2lCM2FXUjBhQ0E5SUdoMGJXd3VZMnhwWlc1MFYybGtkR2c3WEc0Z0lIWmhjaUJvWldsbmFIUWdQU0JvZEcxc0xtTnNhV1Z1ZEVobGFXZG9kRHRjYmlBZ2RtRnlJSGdnUFNBd08xeHVJQ0IyWVhJZ2VTQTlJREE3SUM4dklFNUNPaUJVYUdseklHbHpiaWQwSUhOMWNIQnZjblJsWkNCdmJpQnBUMU1nUEQwZ01USXVJRWxtSUhSb1pTQnJaWGxpYjJGeVpDQnBjeUJ2Y0dWdUxDQjBhR1VnY0c5d2NHVnlYRzRnSUM4dklHTmhiaUJpWlNCdlluTmpkWEpsWkNCMWJtUmxjbTVsWVhSb0lHbDBMbHh1SUNBdkx5QkJiSE52TENCZ2FIUnRiQzVqYkdsbGJuUklaV2xuYUhSZ0lHRmtaSE1nZEdobElHSnZkSFJ2YlNCaVlYSWdhR1ZwWjJoMElHbHVJRk5oWm1GeWFTQnBUMU1zSUdWMlpXNWNiaUFnTHk4Z2FXWWdhWFFnYVhOdUozUWdiM0JsYml3Z2MyOGdhV1lnZEdocGN5QnBjMjRuZENCaGRtRnBiR0ZpYkdVc0lIUm9aU0J3YjNCd1pYSWdkMmxzYkNCaVpTQmtaWFJsWTNSbFpGeHVJQ0F2THlCMGJ5QnZkbVZ5Wm14dmR5QjBhR1VnWW05MGRHOXRJRzltSUhSb1pTQnpZM0psWlc0Z2RHOXZJR1ZoY214NUxseHVYRzRnSUdsbUlDaDJhWE4xWVd4V2FXVjNjRzl5ZENrZ2UxeHVJQ0FnSUhkcFpIUm9JRDBnZG1semRXRnNWbWxsZDNCdmNuUXVkMmxrZEdnN1hHNGdJQ0FnYUdWcFoyaDBJRDBnZG1semRXRnNWbWxsZDNCdmNuUXVhR1ZwWjJoME95QXZMeUJWYzJWeklFeGhlVzkxZENCV2FXVjNjRzl5ZENBb2JHbHJaU0JEYUhKdmJXVTdJRk5oWm1GeWFTQmtiMlZ6SUc1dmRDQmpkWEp5Wlc1MGJIa3BYRzRnSUNBZ0x5OGdTVzRnUTJoeWIyMWxMQ0JwZENCeVpYUjFjbTV6SUdFZ2RtRnNkV1VnZG1WeWVTQmpiRzl6WlNCMGJ5QXdJQ2dyTHkwcElHSjFkQ0JqYjI1MFlXbHVjeUJ5YjNWdVpHbHVaMXh1SUNBZ0lDOHZJR1Z5Y205eWN5QmtkV1VnZEc4Z1pteHZZWFJwYm1jZ2NHOXBiblFnYm5WdFltVnljeXdnYzI4Z2QyVWdibVZsWkNCMGJ5QmphR1ZqYXlCd2NtVmphWE5wYjI0dVhHNGdJQ0FnTHk4Z1UyRm1ZWEpwSUhKbGRIVnlibk1nWVNCdWRXMWlaWElnUEQwZ01Dd2dkWE4xWVd4c2VTQThJQzB4SUhkb1pXNGdjR2x1WTJndGVtOXZiV1ZrWEc0Z0lDQWdMeThnUm1WaGRIVnlaU0JrWlhSbFkzUnBiMjRnWm1GcGJITWdhVzRnYlc5aWFXeGxJR1Z0ZFd4aGRHbHZiaUJ0YjJSbElHbHVJRU5vY205dFpTNWNiaUFnSUNBdkx5Qk5ZWFJvTG1GaWN5aDNhVzR1YVc1dVpYSlhhV1IwYUNBdklIWnBjM1ZoYkZacFpYZHdiM0owTG5OallXeGxJQzBnZG1semRXRnNWbWxsZDNCdmNuUXVkMmxrZEdncElEeGNiaUFnSUNBdkx5QXdMakF3TVZ4dUlDQWdJQzh2SUVaaGJHeGlZV05ySUdobGNtVTZJRndpVG05MElGTmhabUZ5YVZ3aUlIVnpaWEpCWjJWdWRGeHVYRzRnSUNBZ2FXWWdLQ0V2WGlnb1B5RmphSEp2YldWOFlXNWtjbTlwWkNrdUtTcHpZV1poY21rdmFTNTBaWE4wS0c1aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RcEtTQjdYRzRnSUNBZ0lDQjRJRDBnZG1semRXRnNWbWxsZDNCdmNuUXViMlptYzJWMFRHVm1kRHRjYmlBZ0lDQWdJSGtnUFNCMmFYTjFZV3hXYVdWM2NHOXlkQzV2Wm1aelpYUlViM0E3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQjNhV1IwYURvZ2QybGtkR2dzWEc0Z0lDQWdhR1ZwWjJoME9pQm9aV2xuYUhRc1hHNGdJQ0FnZURvZ2VDQXJJR2RsZEZkcGJtUnZkMU5qY205c2JFSmhjbGdvWld4bGJXVnVkQ2tzWEc0Z0lDQWdlVG9nZVZ4dUlDQjlPMXh1ZlNJc0ltbHRjRzl5ZENCblpYUkViMk4xYldWdWRFVnNaVzFsYm5RZ1puSnZiU0JjSWk0dloyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFEyOXRjSFYwWldSVGRIbHNaU0JtY205dElGd2lMaTluWlhSRGIyMXdkWFJsWkZOMGVXeGxMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBWMmx1Wkc5M1UyTnliMnhzUW1GeVdDQm1jbTl0SUZ3aUxpOW5aWFJYYVc1a2IzZFRZM0p2Ykd4Q1lYSllMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBWMmx1Wkc5M1UyTnliMnhzSUdaeWIyMGdYQ0l1TDJkbGRGZHBibVJ2ZDFOamNtOXNiQzVxYzF3aU8xeHVhVzF3YjNKMElIc2diV0Y0SUgwZ1puSnZiU0JjSWk0dUwzVjBhV3h6TDIxaGRHZ3Vhbk5jSWpzZ0x5OGdSMlYwY3lCMGFHVWdaVzUwYVhKbElITnBlbVVnYjJZZ2RHaGxJSE5qY205c2JHRmliR1VnWkc5amRXMWxiblFnWVhKbFlTd2daWFpsYmlCbGVIUmxibVJwYm1jZ2IzVjBjMmxrWlZ4dUx5OGdiMllnZEdobElHQThhSFJ0YkQ1Z0lHRnVaQ0JnUEdKdlpIaytZQ0J5WldOMElHSnZkVzVrY3lCcFppQm9iM0pwZW05dWRHRnNiSGtnYzJOeWIyeHNZV0pzWlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCblpYUkViMk4xYldWdWRGSmxZM1FvWld4bGJXVnVkQ2tnZTF4dUlDQjJZWElnWDJWc1pXMWxiblFrYjNkdVpYSkViMk4xYldWdU8xeHVYRzRnSUhaaGNpQm9kRzFzSUQwZ1oyVjBSRzlqZFcxbGJuUkZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHVJQ0IyWVhJZ2QybHVVMk55YjJ4c0lEMGdaMlYwVjJsdVpHOTNVMk55YjJ4c0tHVnNaVzFsYm5RcE8xeHVJQ0IyWVhJZ1ltOWtlU0E5SUNoZlpXeGxiV1Z1ZENSdmQyNWxja1J2WTNWdFpXNGdQU0JsYkdWdFpXNTBMbTkzYm1WeVJHOWpkVzFsYm5RcElEMDlJRzUxYkd3Z1B5QjJiMmxrSURBZ09pQmZaV3hsYldWdWRDUnZkMjVsY2tSdlkzVnRaVzR1WW05a2VUdGNiaUFnZG1GeUlIZHBaSFJvSUQwZ2JXRjRLR2gwYld3dWMyTnliMnhzVjJsa2RHZ3NJR2gwYld3dVkyeHBaVzUwVjJsa2RHZ3NJR0p2WkhrZ1B5QmliMlI1TG5OamNtOXNiRmRwWkhSb0lEb2dNQ3dnWW05a2VTQS9JR0p2WkhrdVkyeHBaVzUwVjJsa2RHZ2dPaUF3S1R0Y2JpQWdkbUZ5SUdobGFXZG9kQ0E5SUcxaGVDaG9kRzFzTG5OamNtOXNiRWhsYVdkb2RDd2dhSFJ0YkM1amJHbGxiblJJWldsbmFIUXNJR0p2WkhrZ1B5QmliMlI1TG5OamNtOXNiRWhsYVdkb2RDQTZJREFzSUdKdlpIa2dQeUJpYjJSNUxtTnNhV1Z1ZEVobGFXZG9kQ0E2SURBcE8xeHVJQ0IyWVhJZ2VDQTlJQzEzYVc1VFkzSnZiR3d1YzJOeWIyeHNUR1ZtZENBcklHZGxkRmRwYm1SdmQxTmpjbTlzYkVKaGNsZ29aV3hsYldWdWRDazdYRzRnSUhaaGNpQjVJRDBnTFhkcGJsTmpjbTlzYkM1elkzSnZiR3hVYjNBN1hHNWNiaUFnYVdZZ0tHZGxkRU52YlhCMWRHVmtVM1I1YkdVb1ltOWtlU0I4ZkNCb2RHMXNLUzVrYVhKbFkzUnBiMjRnUFQwOUlDZHlkR3duS1NCN1hHNGdJQ0FnZUNBclBTQnRZWGdvYUhSdGJDNWpiR2xsYm5SWGFXUjBhQ3dnWW05a2VTQS9JR0p2WkhrdVkyeHBaVzUwVjJsa2RHZ2dPaUF3S1NBdElIZHBaSFJvTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0IzYVdSMGFEb2dkMmxrZEdnc1hHNGdJQ0FnYUdWcFoyaDBPaUJvWldsbmFIUXNYRzRnSUNBZ2VEb2dlQ3hjYmlBZ0lDQjVPaUI1WEc0Z0lIMDdYRzU5SWl3aWFXMXdiM0owSUdkbGRFSmhjMlZRYkdGalpXMWxiblFnWm5KdmJTQmNJaTR2WjJWMFFtRnpaVkJzWVdObGJXVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRlpoY21saGRHbHZiaUJtY205dElGd2lMaTluWlhSV1lYSnBZWFJwYjI0dWFuTmNJanRjYm1sdGNHOXlkQ0JuWlhSTllXbHVRWGhwYzBaeWIyMVFiR0ZqWlcxbGJuUWdabkp2YlNCY0lpNHZaMlYwVFdGcGJrRjRhWE5HY205dFVHeGhZMlZ0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnZXlCMGIzQXNJSEpwWjJoMExDQmliM1IwYjIwc0lHeGxablFzSUhOMFlYSjBMQ0JsYm1RZ2ZTQm1jbTl0SUZ3aUxpNHZaVzUxYlhNdWFuTmNJanRjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR052YlhCMWRHVlBabVp6WlhSektGOXlaV1lwSUh0Y2JpQWdkbUZ5SUhKbFptVnlaVzVqWlNBOUlGOXlaV1l1Y21WbVpYSmxibU5sTEZ4dUlDQWdJQ0FnWld4bGJXVnVkQ0E5SUY5eVpXWXVaV3hsYldWdWRDeGNiaUFnSUNBZ0lIQnNZV05sYldWdWRDQTlJRjl5WldZdWNHeGhZMlZ0Wlc1ME8xeHVJQ0IyWVhJZ1ltRnpaVkJzWVdObGJXVnVkQ0E5SUhCc1lXTmxiV1Z1ZENBL0lHZGxkRUpoYzJWUWJHRmpaVzFsYm5Rb2NHeGhZMlZ0Wlc1MEtTQTZJRzUxYkd3N1hHNGdJSFpoY2lCMllYSnBZWFJwYjI0Z1BTQndiR0ZqWlcxbGJuUWdQeUJuWlhSV1lYSnBZWFJwYjI0b2NHeGhZMlZ0Wlc1MEtTQTZJRzUxYkd3N1hHNGdJSFpoY2lCamIyMXRiMjVZSUQwZ2NtVm1aWEpsYm1ObExuZ2dLeUJ5WldabGNtVnVZMlV1ZDJsa2RHZ2dMeUF5SUMwZ1pXeGxiV1Z1ZEM1M2FXUjBhQ0F2SURJN1hHNGdJSFpoY2lCamIyMXRiMjVaSUQwZ2NtVm1aWEpsYm1ObExua2dLeUJ5WldabGNtVnVZMlV1YUdWcFoyaDBJQzhnTWlBdElHVnNaVzFsYm5RdWFHVnBaMmgwSUM4Z01qdGNiaUFnZG1GeUlHOW1abk5sZEhNN1hHNWNiaUFnYzNkcGRHTm9JQ2hpWVhObFVHeGhZMlZ0Wlc1MEtTQjdYRzRnSUNBZ1kyRnpaU0IwYjNBNlhHNGdJQ0FnSUNCdlptWnpaWFJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQjRPaUJqYjIxdGIyNVlMRnh1SUNBZ0lDQWdJQ0I1T2lCeVpXWmxjbVZ1WTJVdWVTQXRJR1ZzWlcxbGJuUXVhR1ZwWjJoMFhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JqWVhObElHSnZkSFJ2YlRwY2JpQWdJQ0FnSUc5bVpuTmxkSE1nUFNCN1hHNGdJQ0FnSUNBZ0lIZzZJR052YlcxdmJsZ3NYRzRnSUNBZ0lDQWdJSGs2SUhKbFptVnlaVzVqWlM1NUlDc2djbVZtWlhKbGJtTmxMbWhsYVdkb2RGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnWTJGelpTQnlhV2RvZERwY2JpQWdJQ0FnSUc5bVpuTmxkSE1nUFNCN1hHNGdJQ0FnSUNBZ0lIZzZJSEpsWm1WeVpXNWpaUzU0SUNzZ2NtVm1aWEpsYm1ObExuZHBaSFJvTEZ4dUlDQWdJQ0FnSUNCNU9pQmpiMjF0YjI1WlhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JqWVhObElHeGxablE2WEc0Z0lDQWdJQ0J2Wm1aelpYUnpJRDBnZTF4dUlDQWdJQ0FnSUNCNE9pQnlaV1psY21WdVkyVXVlQ0F0SUdWc1pXMWxiblF1ZDJsa2RHZ3NYRzRnSUNBZ0lDQWdJSGs2SUdOdmJXMXZibGxjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCdlptWnpaWFJ6SUQwZ2UxeHVJQ0FnSUNBZ0lDQjRPaUJ5WldabGNtVnVZMlV1ZUN4Y2JpQWdJQ0FnSUNBZ2VUb2djbVZtWlhKbGJtTmxMbmxjYmlBZ0lDQWdJSDA3WEc0Z0lIMWNibHh1SUNCMllYSWdiV0ZwYmtGNGFYTWdQU0JpWVhObFVHeGhZMlZ0Wlc1MElEOGdaMlYwVFdGcGJrRjRhWE5HY205dFVHeGhZMlZ0Wlc1MEtHSmhjMlZRYkdGalpXMWxiblFwSURvZ2JuVnNiRHRjYmx4dUlDQnBaaUFvYldGcGJrRjRhWE1nSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJSFpoY2lCc1pXNGdQU0J0WVdsdVFYaHBjeUE5UFQwZ0oza25JRDhnSjJobGFXZG9kQ2NnT2lBbmQybGtkR2duTzF4dVhHNGdJQ0FnYzNkcGRHTm9JQ2gyWVhKcFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdjM1JoY25RNlhHNGdJQ0FnSUNBZ0lHOW1abk5sZEhOYmJXRnBia0Y0YVhOZElEMGdiMlptYzJWMGMxdHRZV2x1UVhocGMxMGdMU0FvY21WbVpYSmxibU5sVzJ4bGJsMGdMeUF5SUMwZ1pXeGxiV1Z1ZEZ0c1pXNWRJQzhnTWlrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNCallYTmxJR1Z1WkRwY2JpQWdJQ0FnSUNBZ2IyWm1jMlYwYzF0dFlXbHVRWGhwYzEwZ1BTQnZabVp6WlhSelcyMWhhVzVCZUdselhTQXJJQ2h5WldabGNtVnVZMlZiYkdWdVhTQXZJRElnTFNCbGJHVnRaVzUwVzJ4bGJsMGdMeUF5S1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzltWm5ObGRITTdYRzU5SWl3aWFXMXdiM0owSUdkbGRFTnNhWEJ3YVc1blVtVmpkQ0JtY205dElGd2lMaTR2Wkc5dExYVjBhV3h6TDJkbGRFTnNhWEJ3YVc1blVtVmpkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRVJ2WTNWdFpXNTBSV3hsYldWdWRDQm1jbTl0SUZ3aUxpNHZaRzl0TFhWMGFXeHpMMmRsZEVSdlkzVnRaVzUwUld4bGJXVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ0JtY205dElGd2lMaTR2Wkc5dExYVjBhV3h6TDJkbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDNXFjMXdpTzF4dWFXMXdiM0owSUdOdmJYQjFkR1ZQWm1aelpYUnpJR1p5YjIwZ1hDSXVMMk52YlhCMWRHVlBabVp6WlhSekxtcHpYQ0k3WEc1cGJYQnZjblFnY21WamRGUnZRMnhwWlc1MFVtVmpkQ0JtY205dElGd2lMaTl5WldOMFZHOURiR2xsYm5SU1pXTjBMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QmpiR2x3Y0dsdVoxQmhjbVZ1ZEhNc0lISmxabVZ5Wlc1alpTd2djRzl3Y0dWeUxDQmliM1IwYjIwc0lIUnZjQ3dnY21sbmFIUXNJR0poYzJWUWJHRmpaVzFsYm5SekxDQjJhV1YzY0c5eWRDQjlJR1p5YjIwZ1hDSXVMaTlsYm5WdGN5NXFjMXdpTzF4dWFXMXdiM0owSUhzZ2FYTkZiR1Z0Wlc1MElIMGdabkp2YlNCY0lpNHVMMlJ2YlMxMWRHbHNjeTlwYm5OMFlXNWpaVTltTG1welhDSTdYRzVwYlhCdmNuUWdiV1Z5WjJWUVlXUmthVzVuVDJKcVpXTjBJR1p5YjIwZ1hDSXVMMjFsY21kbFVHRmtaR2x1WjA5aWFtVmpkQzVxYzF3aU8xeHVhVzF3YjNKMElHVjRjR0Z1WkZSdlNHRnphRTFoY0NCbWNtOXRJRndpTGk5bGVIQmhibVJVYjBoaGMyaE5ZWEF1YW5OY0lqc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR2x0Y0c5eWRDOXVieTExYm5WelpXUXRiVzlrZFd4bGMxeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQmtaWFJsWTNSUGRtVnlabXh2ZHloemRHRjBaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQnBaaUFvYjNCMGFXOXVjeUE5UFQwZ2RtOXBaQ0F3S1NCN1hHNGdJQ0FnYjNCMGFXOXVjeUE5SUh0OU8xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUY5dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUY5dmNIUnBiMjV6SkhCc1lXTmxiV1Z1ZENBOUlGOXZjSFJwYjI1ekxuQnNZV05sYldWdWRDeGNiaUFnSUNBZ0lIQnNZV05sYldWdWRDQTlJRjl2Y0hScGIyNXpKSEJzWVdObGJXVnVkQ0E5UFQwZ2RtOXBaQ0F3SUQ4Z2MzUmhkR1V1Y0d4aFkyVnRaVzUwSURvZ1gyOXdkR2x2Ym5Na2NHeGhZMlZ0Wlc1MExGeHVJQ0FnSUNBZ1gyOXdkR2x2Ym5Na1ltOTFibVJoY25rZ1BTQmZiM0IwYVc5dWN5NWliM1Z1WkdGeWVTeGNiaUFnSUNBZ0lHSnZkVzVrWVhKNUlEMGdYMjl3ZEdsdmJuTWtZbTkxYm1SaGNua2dQVDA5SUhadmFXUWdNQ0EvSUdOc2FYQndhVzVuVUdGeVpXNTBjeUE2SUY5dmNIUnBiMjV6SkdKdmRXNWtZWEo1TEZ4dUlDQWdJQ0FnWDI5d2RHbHZibk1rY205dmRFSnZkVzVrWVhKNUlEMGdYMjl3ZEdsdmJuTXVjbTl2ZEVKdmRXNWtZWEo1TEZ4dUlDQWdJQ0FnY205dmRFSnZkVzVrWVhKNUlEMGdYMjl3ZEdsdmJuTWtjbTl2ZEVKdmRXNWtZWEo1SUQwOVBTQjJiMmxrSURBZ1B5QjJhV1YzY0c5eWRDQTZJRjl2Y0hScGIyNXpKSEp2YjNSQ2IzVnVaR0Z5ZVN4Y2JpQWdJQ0FnSUY5dmNIUnBiMjV6SkdWc1pXMWxiblJEYjI1MFpTQTlJRjl2Y0hScGIyNXpMbVZzWlcxbGJuUkRiMjUwWlhoMExGeHVJQ0FnSUNBZ1pXeGxiV1Z1ZEVOdmJuUmxlSFFnUFNCZmIzQjBhVzl1Y3lSbGJHVnRaVzUwUTI5dWRHVWdQVDA5SUhadmFXUWdNQ0EvSUhCdmNIQmxjaUE2SUY5dmNIUnBiMjV6SkdWc1pXMWxiblJEYjI1MFpTeGNiaUFnSUNBZ0lGOXZjSFJwYjI1ekpHRnNkRUp2ZFc1a1lYSjVJRDBnWDI5d2RHbHZibk11WVd4MFFtOTFibVJoY25rc1hHNGdJQ0FnSUNCaGJIUkNiM1Z1WkdGeWVTQTlJRjl2Y0hScGIyNXpKR0ZzZEVKdmRXNWtZWEo1SUQwOVBTQjJiMmxrSURBZ1B5Qm1ZV3h6WlNBNklGOXZjSFJwYjI1ekpHRnNkRUp2ZFc1a1lYSjVMRnh1SUNBZ0lDQWdYMjl3ZEdsdmJuTWtjR0ZrWkdsdVp5QTlJRjl2Y0hScGIyNXpMbkJoWkdScGJtY3NYRzRnSUNBZ0lDQndZV1JrYVc1bklEMGdYMjl3ZEdsdmJuTWtjR0ZrWkdsdVp5QTlQVDBnZG05cFpDQXdJRDhnTUNBNklGOXZjSFJwYjI1ekpIQmhaR1JwYm1jN1hHNGdJSFpoY2lCd1lXUmthVzVuVDJKcVpXTjBJRDBnYldWeVoyVlFZV1JrYVc1blQySnFaV04wS0hSNWNHVnZaaUJ3WVdSa2FXNW5JQ0U5UFNBbmJuVnRZbVZ5SnlBL0lIQmhaR1JwYm1jZ09pQmxlSEJoYm1SVWIwaGhjMmhOWVhBb2NHRmtaR2x1Wnl3Z1ltRnpaVkJzWVdObGJXVnVkSE1wS1R0Y2JpQWdkbUZ5SUdGc2RFTnZiblJsZUhRZ1BTQmxiR1Z0Wlc1MFEyOXVkR1Y0ZENBOVBUMGdjRzl3Y0dWeUlEOGdjbVZtWlhKbGJtTmxJRG9nY0c5d2NHVnlPMXh1SUNCMllYSWdjRzl3Y0dWeVVtVmpkQ0E5SUhOMFlYUmxMbkpsWTNSekxuQnZjSEJsY2p0Y2JpQWdkbUZ5SUdWc1pXMWxiblFnUFNCemRHRjBaUzVsYkdWdFpXNTBjMXRoYkhSQ2IzVnVaR0Z5ZVNBL0lHRnNkRU52Ym5SbGVIUWdPaUJsYkdWdFpXNTBRMjl1ZEdWNGRGMDdYRzRnSUhaaGNpQmpiR2x3Y0dsdVowTnNhV1Z1ZEZKbFkzUWdQU0JuWlhSRGJHbHdjR2x1WjFKbFkzUW9hWE5GYkdWdFpXNTBLR1ZzWlcxbGJuUXBJRDhnWld4bGJXVnVkQ0E2SUdWc1pXMWxiblF1WTI5dWRHVjRkRVZzWlcxbGJuUWdmSHdnWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwS0hOMFlYUmxMbVZzWlcxbGJuUnpMbkJ2Y0hCbGNpa3NJR0p2ZFc1a1lYSjVMQ0J5YjI5MFFtOTFibVJoY25rcE8xeHVJQ0IyWVhJZ2NtVm1aWEpsYm1ObFEyeHBaVzUwVW1WamRDQTlJR2RsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENoemRHRjBaUzVsYkdWdFpXNTBjeTV5WldabGNtVnVZMlVwTzF4dUlDQjJZWElnY0c5d2NHVnlUMlptYzJWMGN5QTlJR052YlhCMWRHVlBabVp6WlhSektIdGNiaUFnSUNCeVpXWmxjbVZ1WTJVNklISmxabVZ5Wlc1alpVTnNhV1Z1ZEZKbFkzUXNYRzRnSUNBZ1pXeGxiV1Z1ZERvZ2NHOXdjR1Z5VW1WamRDeGNiaUFnSUNCemRISmhkR1ZuZVRvZ0oyRmljMjlzZFhSbEp5eGNiaUFnSUNCd2JHRmpaVzFsYm5RNklIQnNZV05sYldWdWRGeHVJQ0I5S1R0Y2JpQWdkbUZ5SUhCdmNIQmxja05zYVdWdWRGSmxZM1FnUFNCeVpXTjBWRzlEYkdsbGJuUlNaV04wS0U5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUhCdmNIQmxjbEpsWTNRc0lIQnZjSEJsY2s5bVpuTmxkSE1wS1R0Y2JpQWdkbUZ5SUdWc1pXMWxiblJEYkdsbGJuUlNaV04wSUQwZ1pXeGxiV1Z1ZEVOdmJuUmxlSFFnUFQwOUlIQnZjSEJsY2lBL0lIQnZjSEJsY2tOc2FXVnVkRkpsWTNRZ09pQnlaV1psY21WdVkyVkRiR2xsYm5SU1pXTjBPeUF2THlCd2IzTnBkR2wyWlNBOUlHOTJaWEptYkc5M2FXNW5JSFJvWlNCamJHbHdjR2x1WnlCeVpXTjBYRzRnSUM4dklEQWdiM0lnYm1WbllYUnBkbVVnUFNCM2FYUm9hVzRnZEdobElHTnNhWEJ3YVc1bklISmxZM1JjYmx4dUlDQjJZWElnYjNabGNtWnNiM2RQWm1aelpYUnpJRDBnZTF4dUlDQWdJSFJ2Y0RvZ1kyeHBjSEJwYm1kRGJHbGxiblJTWldOMExuUnZjQ0F0SUdWc1pXMWxiblJEYkdsbGJuUlNaV04wTG5SdmNDQXJJSEJoWkdScGJtZFBZbXBsWTNRdWRHOXdMRnh1SUNBZ0lHSnZkSFJ2YlRvZ1pXeGxiV1Z1ZEVOc2FXVnVkRkpsWTNRdVltOTBkRzl0SUMwZ1kyeHBjSEJwYm1kRGJHbGxiblJTWldOMExtSnZkSFJ2YlNBcklIQmhaR1JwYm1kUFltcGxZM1F1WW05MGRHOXRMRnh1SUNBZ0lHeGxablE2SUdOc2FYQndhVzVuUTJ4cFpXNTBVbVZqZEM1c1pXWjBJQzBnWld4bGJXVnVkRU5zYVdWdWRGSmxZM1F1YkdWbWRDQXJJSEJoWkdScGJtZFBZbXBsWTNRdWJHVm1kQ3hjYmlBZ0lDQnlhV2RvZERvZ1pXeGxiV1Z1ZEVOc2FXVnVkRkpsWTNRdWNtbG5hSFFnTFNCamJHbHdjR2x1WjBOc2FXVnVkRkpsWTNRdWNtbG5hSFFnS3lCd1lXUmthVzVuVDJKcVpXTjBMbkpwWjJoMFhHNGdJSDA3WEc0Z0lIWmhjaUJ2Wm1aelpYUkVZWFJoSUQwZ2MzUmhkR1V1Ylc5a2FXWnBaWEp6UkdGMFlTNXZabVp6WlhRN0lDOHZJRTltWm5ObGRITWdZMkZ1SUdKbElHRndjR3hwWldRZ2IyNXNlU0IwYnlCMGFHVWdjRzl3Y0dWeUlHVnNaVzFsYm5SY2JseHVJQ0JwWmlBb1pXeGxiV1Z1ZEVOdmJuUmxlSFFnUFQwOUlIQnZjSEJsY2lBbUppQnZabVp6WlhSRVlYUmhLU0I3WEc0Z0lDQWdkbUZ5SUc5bVpuTmxkQ0E5SUc5bVpuTmxkRVJoZEdGYmNHeGhZMlZ0Wlc1MFhUdGNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aHZkbVZ5Wm14dmQwOW1abk5sZEhNcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHdGxlU2tnZTF4dUlDQWdJQ0FnZG1GeUlHMTFiSFJwY0d4NUlEMGdXM0pwWjJoMExDQmliM1IwYjIxZExtbHVaR1Y0VDJZb2EyVjVLU0ErUFNBd0lEOGdNU0E2SUMweE8xeHVJQ0FnSUNBZ2RtRnlJR0Y0YVhNZ1BTQmJkRzl3TENCaWIzUjBiMjFkTG1sdVpHVjRUMllvYTJWNUtTQStQU0F3SUQ4Z0oza25JRG9nSjNnbk8xeHVJQ0FnSUNBZ2IzWmxjbVpzYjNkUFptWnpaWFJ6VzJ0bGVWMGdLejBnYjJabWMyVjBXMkY0YVhOZElDb2diWFZzZEdsd2JIazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdiM1psY21ac2IzZFBabVp6WlhSek8xeHVmU0lzSW1sdGNHOXlkQ0JuWlhSUGNIQnZjMmwwWlZCc1lXTmxiV1Z1ZENCbWNtOXRJRndpTGk0dmRYUnBiSE12WjJWMFQzQndiM05wZEdWUWJHRmpaVzFsYm5RdWFuTmNJanRjYm1sdGNHOXlkQ0JuWlhSQ1lYTmxVR3hoWTJWdFpXNTBJR1p5YjIwZ1hDSXVMaTkxZEdsc2N5OW5aWFJDWVhObFVHeGhZMlZ0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFQzQndiM05wZEdWV1lYSnBZWFJwYjI1UWJHRmpaVzFsYm5RZ1puSnZiU0JjSWk0dUwzVjBhV3h6TDJkbGRFOXdjRzl6YVhSbFZtRnlhV0YwYVc5dVVHeGhZMlZ0Wlc1MExtcHpYQ0k3WEc1cGJYQnZjblFnWkdWMFpXTjBUM1psY21ac2IzY2dabkp2YlNCY0lpNHVMM1YwYVd4ekwyUmxkR1ZqZEU5MlpYSm1iRzkzTG1welhDSTdYRzVwYlhCdmNuUWdZMjl0Y0hWMFpVRjFkRzlRYkdGalpXMWxiblFnWm5KdmJTQmNJaTR1TDNWMGFXeHpMMk52YlhCMWRHVkJkWFJ2VUd4aFkyVnRaVzUwTG1welhDSTdYRzVwYlhCdmNuUWdleUJpYjNSMGIyMHNJSFJ2Y0N3Z2MzUmhjblFzSUhKcFoyaDBMQ0JzWldaMExDQmhkWFJ2SUgwZ1puSnZiU0JjSWk0dUwyVnVkVzF6TG1welhDSTdYRzVwYlhCdmNuUWdaMlYwVm1GeWFXRjBhVzl1SUdaeWIyMGdYQ0l1TGk5MWRHbHNjeTluWlhSV1lYSnBZWFJwYjI0dWFuTmNJanNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdsdGNHOXlkQzl1YnkxMWJuVnpaV1F0Ylc5a2RXeGxjMXh1WEc1bWRXNWpkR2x2YmlCblpYUkZlSEJoYm1SbFpFWmhiR3hpWVdOclVHeGhZMlZ0Wlc1MGN5aHdiR0ZqWlcxbGJuUXBJSHRjYmlBZ2FXWWdLR2RsZEVKaGMyVlFiR0ZqWlcxbGJuUW9jR3hoWTJWdFpXNTBLU0E5UFQwZ1lYVjBieWtnZTF4dUlDQWdJSEpsZEhWeWJpQmJYVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnZjSEJ2YzJsMFpWQnNZV05sYldWdWRDQTlJR2RsZEU5d2NHOXphWFJsVUd4aFkyVnRaVzUwS0hCc1lXTmxiV1Z1ZENrN1hHNGdJSEpsZEhWeWJpQmJaMlYwVDNCd2IzTnBkR1ZXWVhKcFlYUnBiMjVRYkdGalpXMWxiblFvY0d4aFkyVnRaVzUwS1N3Z2IzQndiM05wZEdWUWJHRmpaVzFsYm5Rc0lHZGxkRTl3Y0c5emFYUmxWbUZ5YVdGMGFXOXVVR3hoWTJWdFpXNTBLRzl3Y0c5emFYUmxVR3hoWTJWdFpXNTBLVjA3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1pzYVhBb1gzSmxaaWtnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0JmY21WbUxuTjBZWFJsTEZ4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUY5eVpXWXViM0IwYVc5dWN5eGNiaUFnSUNBZ0lHNWhiV1VnUFNCZmNtVm1MbTVoYldVN1hHNWNiaUFnYVdZZ0tITjBZWFJsTG0xdlpHbG1hV1Z5YzBSaGRHRmJibUZ0WlYwdVgzTnJhWEFwSUh0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0IyWVhJZ1gyOXdkR2x2Ym5Na2JXRnBia0Y0YVhNZ1BTQnZjSFJwYjI1ekxtMWhhVzVCZUdsekxGeHVJQ0FnSUNBZ1kyaGxZMnROWVdsdVFYaHBjeUE5SUY5dmNIUnBiMjV6SkcxaGFXNUJlR2x6SUQwOVBTQjJiMmxrSURBZ1B5QjBjblZsSURvZ1gyOXdkR2x2Ym5Na2JXRnBia0Y0YVhNc1hHNGdJQ0FnSUNCZmIzQjBhVzl1Y3lSaGJIUkJlR2x6SUQwZ2IzQjBhVzl1Y3k1aGJIUkJlR2x6TEZ4dUlDQWdJQ0FnWTJobFkydEJiSFJCZUdseklEMGdYMjl3ZEdsdmJuTWtZV3gwUVhocGN5QTlQVDBnZG05cFpDQXdJRDhnZEhKMVpTQTZJRjl2Y0hScGIyNXpKR0ZzZEVGNGFYTXNYRzRnSUNBZ0lDQnpjR1ZqYVdacFpXUkdZV3hzWW1GamExQnNZV05sYldWdWRITWdQU0J2Y0hScGIyNXpMbVpoYkd4aVlXTnJVR3hoWTJWdFpXNTBjeXhjYmlBZ0lDQWdJSEJoWkdScGJtY2dQU0J2Y0hScGIyNXpMbkJoWkdScGJtY3NYRzRnSUNBZ0lDQmliM1Z1WkdGeWVTQTlJRzl3ZEdsdmJuTXVZbTkxYm1SaGNua3NYRzRnSUNBZ0lDQnliMjkwUW05MWJtUmhjbmtnUFNCdmNIUnBiMjV6TG5KdmIzUkNiM1Z1WkdGeWVTeGNiaUFnSUNBZ0lHRnNkRUp2ZFc1a1lYSjVJRDBnYjNCMGFXOXVjeTVoYkhSQ2IzVnVaR0Z5ZVN4Y2JpQWdJQ0FnSUY5dmNIUnBiMjV6Skdac2FYQldZWEpwWVhScGJ5QTlJRzl3ZEdsdmJuTXVabXhwY0ZaaGNtbGhkR2x2Ym5Nc1hHNGdJQ0FnSUNCbWJHbHdWbUZ5YVdGMGFXOXVjeUE5SUY5dmNIUnBiMjV6Skdac2FYQldZWEpwWVhScGJ5QTlQVDBnZG05cFpDQXdJRDhnZEhKMVpTQTZJRjl2Y0hScGIyNXpKR1pzYVhCV1lYSnBZWFJwYnl4Y2JpQWdJQ0FnSUdGc2JHOTNaV1JCZFhSdlVHeGhZMlZ0Wlc1MGN5QTlJRzl3ZEdsdmJuTXVZV3hzYjNkbFpFRjFkRzlRYkdGalpXMWxiblJ6TzF4dUlDQjJZWElnY0hKbFptVnljbVZrVUd4aFkyVnRaVzUwSUQwZ2MzUmhkR1V1YjNCMGFXOXVjeTV3YkdGalpXMWxiblE3WEc0Z0lIWmhjaUJpWVhObFVHeGhZMlZ0Wlc1MElEMGdaMlYwUW1GelpWQnNZV05sYldWdWRDaHdjbVZtWlhKeVpXUlFiR0ZqWlcxbGJuUXBPMXh1SUNCMllYSWdhWE5DWVhObFVHeGhZMlZ0Wlc1MElEMGdZbUZ6WlZCc1lXTmxiV1Z1ZENBOVBUMGdjSEpsWm1WeWNtVmtVR3hoWTJWdFpXNTBPMXh1SUNCMllYSWdabUZzYkdKaFkydFFiR0ZqWlcxbGJuUnpJRDBnYzNCbFkybG1hV1ZrUm1Gc2JHSmhZMnRRYkdGalpXMWxiblJ6SUh4OElDaHBjMEpoYzJWUWJHRmpaVzFsYm5RZ2ZId2dJV1pzYVhCV1lYSnBZWFJwYjI1eklEOGdXMmRsZEU5d2NHOXphWFJsVUd4aFkyVnRaVzUwS0hCeVpXWmxjbkpsWkZCc1lXTmxiV1Z1ZENsZElEb2daMlYwUlhod1lXNWtaV1JHWVd4c1ltRmphMUJzWVdObGJXVnVkSE1vY0hKbFptVnljbVZrVUd4aFkyVnRaVzUwS1NrN1hHNGdJSFpoY2lCd2JHRmpaVzFsYm5SeklEMGdXM0J5WldabGNuSmxaRkJzWVdObGJXVnVkRjB1WTI5dVkyRjBLR1poYkd4aVlXTnJVR3hoWTJWdFpXNTBjeWt1Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2hoWTJNc0lIQnNZV05sYldWdWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCaFkyTXVZMjl1WTJGMEtHZGxkRUpoYzJWUWJHRmpaVzFsYm5Rb2NHeGhZMlZ0Wlc1MEtTQTlQVDBnWVhWMGJ5QS9JR052YlhCMWRHVkJkWFJ2VUd4aFkyVnRaVzUwS0hOMFlYUmxMQ0I3WEc0Z0lDQWdJQ0J3YkdGalpXMWxiblE2SUhCc1lXTmxiV1Z1ZEN4Y2JpQWdJQ0FnSUdKdmRXNWtZWEo1T2lCaWIzVnVaR0Z5ZVN4Y2JpQWdJQ0FnSUhKdmIzUkNiM1Z1WkdGeWVUb2djbTl2ZEVKdmRXNWtZWEo1TEZ4dUlDQWdJQ0FnY0dGa1pHbHVaem9nY0dGa1pHbHVaeXhjYmlBZ0lDQWdJR1pzYVhCV1lYSnBZWFJwYjI1ek9pQm1iR2x3Vm1GeWFXRjBhVzl1Y3l4Y2JpQWdJQ0FnSUdGc2JHOTNaV1JCZFhSdlVHeGhZMlZ0Wlc1MGN6b2dZV3hzYjNkbFpFRjFkRzlRYkdGalpXMWxiblJ6WEc0Z0lDQWdmU2tnT2lCd2JHRmpaVzFsYm5RcE8xeHVJQ0I5TENCYlhTazdYRzRnSUhaaGNpQnlaV1psY21WdVkyVlNaV04wSUQwZ2MzUmhkR1V1Y21WamRITXVjbVZtWlhKbGJtTmxPMXh1SUNCMllYSWdjRzl3Y0dWeVVtVmpkQ0E5SUhOMFlYUmxMbkpsWTNSekxuQnZjSEJsY2p0Y2JpQWdkbUZ5SUdOb1pXTnJjMDFoY0NBOUlHNWxkeUJOWVhBb0tUdGNiaUFnZG1GeUlHMWhhMlZHWVd4c1ltRmphME5vWldOcmN5QTlJSFJ5ZFdVN1hHNGdJSFpoY2lCbWFYSnpkRVpwZEhScGJtZFFiR0ZqWlcxbGJuUWdQU0J3YkdGalpXMWxiblJ6V3pCZE8xeHVYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NHeGhZMlZ0Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCd2JHRmpaVzFsYm5RZ1BTQndiR0ZqWlcxbGJuUnpXMmxkTzF4dVhHNGdJQ0FnZG1GeUlGOWlZWE5sVUd4aFkyVnRaVzUwSUQwZ1oyVjBRbUZ6WlZCc1lXTmxiV1Z1ZENod2JHRmpaVzFsYm5RcE8xeHVYRzRnSUNBZ2RtRnlJR2x6VTNSaGNuUldZWEpwWVhScGIyNGdQU0JuWlhSV1lYSnBZWFJwYjI0b2NHeGhZMlZ0Wlc1MEtTQTlQVDBnYzNSaGNuUTdYRzRnSUNBZ2RtRnlJR2x6Vm1WeWRHbGpZV3dnUFNCYmRHOXdMQ0JpYjNSMGIyMWRMbWx1WkdWNFQyWW9YMkpoYzJWUWJHRmpaVzFsYm5RcElENDlJREE3WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJR2x6Vm1WeWRHbGpZV3dnUHlBbmQybGtkR2duSURvZ0oyaGxhV2RvZENjN1hHNGdJQ0FnZG1GeUlHOTJaWEptYkc5M0lEMGdaR1YwWldOMFQzWmxjbVpzYjNjb2MzUmhkR1VzSUh0Y2JpQWdJQ0FnSUhCc1lXTmxiV1Z1ZERvZ2NHeGhZMlZ0Wlc1MExGeHVJQ0FnSUNBZ1ltOTFibVJoY25rNklHSnZkVzVrWVhKNUxGeHVJQ0FnSUNBZ2NtOXZkRUp2ZFc1a1lYSjVPaUJ5YjI5MFFtOTFibVJoY25rc1hHNGdJQ0FnSUNCaGJIUkNiM1Z1WkdGeWVUb2dZV3gwUW05MWJtUmhjbmtzWEc0Z0lDQWdJQ0J3WVdSa2FXNW5PaUJ3WVdSa2FXNW5YRzRnSUNBZ2ZTazdYRzRnSUNBZ2RtRnlJRzFoYVc1V1lYSnBZWFJwYjI1VGFXUmxJRDBnYVhOV1pYSjBhV05oYkNBL0lHbHpVM1JoY25SV1lYSnBZWFJwYjI0Z1B5QnlhV2RvZENBNklHeGxablFnT2lCcGMxTjBZWEowVm1GeWFXRjBhVzl1SUQ4Z1ltOTBkRzl0SURvZ2RHOXdPMXh1WEc0Z0lDQWdhV1lnS0hKbFptVnlaVzVqWlZKbFkzUmJiR1Z1WFNBK0lIQnZjSEJsY2xKbFkzUmJiR1Z1WFNrZ2UxeHVJQ0FnSUNBZ2JXRnBibFpoY21saGRHbHZibE5wWkdVZ1BTQm5aWFJQY0hCdmMybDBaVkJzWVdObGJXVnVkQ2h0WVdsdVZtRnlhV0YwYVc5dVUybGtaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdGc2RGWmhjbWxoZEdsdmJsTnBaR1VnUFNCblpYUlBjSEJ2YzJsMFpWQnNZV05sYldWdWRDaHRZV2x1Vm1GeWFXRjBhVzl1VTJsa1pTazdYRzRnSUNBZ2RtRnlJR05vWldOcmN5QTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tHTm9aV05yVFdGcGJrRjRhWE1wSUh0Y2JpQWdJQ0FnSUdOb1pXTnJjeTV3ZFhOb0tHOTJaWEptYkc5M1cxOWlZWE5sVUd4aFkyVnRaVzUwWFNBOFBTQXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJobFkydEJiSFJCZUdsektTQjdYRzRnSUNBZ0lDQmphR1ZqYTNNdWNIVnphQ2h2ZG1WeVpteHZkMXR0WVdsdVZtRnlhV0YwYVc5dVUybGtaVjBnUEQwZ01Dd2diM1psY21ac2IzZGJZV3gwVm1GeWFXRjBhVzl1VTJsa1pWMGdQRDBnTUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTm9aV05yY3k1bGRtVnllU2htZFc1amRHbHZiaUFvWTJobFkyc3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmphR1ZqYXp0Y2JpQWdJQ0I5S1NrZ2UxeHVJQ0FnSUNBZ1ptbHljM1JHYVhSMGFXNW5VR3hoWTJWdFpXNTBJRDBnY0d4aFkyVnRaVzUwTzF4dUlDQWdJQ0FnYldGclpVWmhiR3hpWVdOclEyaGxZMnR6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNWNiaUFnSUNCamFHVmphM05OWVhBdWMyVjBLSEJzWVdObGJXVnVkQ3dnWTJobFkydHpLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHRZV3RsUm1Gc2JHSmhZMnREYUdWamEzTXBJSHRjYmlBZ0lDQXZMeUJnTW1BZ2JXRjVJR0psSUdSbGMybHlaV1FnYVc0Z2MyOXRaU0JqWVhObGN5RGlnSk1nY21WelpXRnlZMmdnYkdGMFpYSmNiaUFnSUNCMllYSWdiblZ0WW1WeVQyWkRhR1ZqYTNNZ1BTQm1iR2x3Vm1GeWFXRjBhVzl1Y3lBL0lETWdPaUF4TzF4dVhHNGdJQ0FnZG1GeUlGOXNiMjl3SUQwZ1puVnVZM1JwYjI0Z1gyeHZiM0FvWDJrcElIdGNiaUFnSUNBZ0lIWmhjaUJtYVhSMGFXNW5VR3hoWTJWdFpXNTBJRDBnY0d4aFkyVnRaVzUwY3k1bWFXNWtLR1oxYm1OMGFXOXVJQ2h3YkdGalpXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR05vWldOcmN5QTlJR05vWldOcmMwMWhjQzVuWlhRb2NHeGhZMlZ0Wlc1MEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1kyaGxZMnR6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTm9aV05yY3k1emJHbGpaU2d3TENCZmFTa3VaWFpsY25rb1puVnVZM1JwYjI0Z0tHTm9aV05yS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMmhsWTJzN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQnBaaUFvWm1sMGRHbHVaMUJzWVdObGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCbWFYSnpkRVpwZEhScGJtZFFiR0ZqWlcxbGJuUWdQU0JtYVhSMGFXNW5VR3hoWTJWdFpXNTBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYQ0ppY21WaGExd2lPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQmZhU0E5SUc1MWJXSmxjazltUTJobFkydHpPeUJmYVNBK0lEQTdJRjlwTFMwcElIdGNiaUFnSUNBZ0lIWmhjaUJmY21WMElEMGdYMnh2YjNBb1gya3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb1gzSmxkQ0E5UFQwZ1hDSmljbVZoYTF3aUtTQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCcFppQW9jM1JoZEdVdWNHeGhZMlZ0Wlc1MElDRTlQU0JtYVhKemRFWnBkSFJwYm1kUWJHRmpaVzFsYm5RcElIdGNiaUFnSUNCemRHRjBaUzV0YjJScFptbGxjbk5FWVhSaFcyNWhiV1ZkTGw5emEybHdJRDBnZEhKMVpUdGNiaUFnSUNCemRHRjBaUzV3YkdGalpXMWxiblFnUFNCbWFYSnpkRVpwZEhScGJtZFFiR0ZqWlcxbGJuUTdYRzRnSUNBZ2MzUmhkR1V1Y21WelpYUWdQU0IwY25WbE8xeHVJQ0I5WEc1OUlDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnBiWEJ2Y25RdmJtOHRkVzUxYzJWa0xXMXZaSFZzWlhOY2JseHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUc1aGJXVTZJQ2RtYkdsd0p5eGNiaUFnWlc1aFlteGxaRG9nZEhKMVpTeGNiaUFnY0doaGMyVTZJQ2R0WVdsdUp5eGNiaUFnWm00NklHWnNhWEFzWEc0Z0lISmxjWFZwY21WelNXWkZlR2x6ZEhNNklGc25iMlptYzJWMEoxMHNYRzRnSUdSaGRHRTZJSHRjYmlBZ0lDQmZjMnRwY0RvZ1ptRnNjMlZjYmlBZ2ZWeHVmVHNpTENKcGJYQnZjblFnWjJWMFZtRnlhV0YwYVc5dUlHWnliMjBnWENJdUwyZGxkRlpoY21saGRHbHZiaTVxYzF3aU8xeHVhVzF3YjNKMElIc2dkbUZ5YVdGMGFXOXVVR3hoWTJWdFpXNTBjeXdnWW1GelpWQnNZV05sYldWdWRITXNJSEJzWVdObGJXVnVkSE1nWVhNZ1lXeHNVR3hoWTJWdFpXNTBjeUI5SUdaeWIyMGdYQ0l1TGk5bGJuVnRjeTVxYzF3aU8xeHVhVzF3YjNKMElHUmxkR1ZqZEU5MlpYSm1iRzkzSUdaeWIyMGdYQ0l1TDJSbGRHVmpkRTkyWlhKbWJHOTNMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBRbUZ6WlZCc1lXTmxiV1Z1ZENCbWNtOXRJRndpTGk5blpYUkNZWE5sVUd4aFkyVnRaVzUwTG1welhDSTdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQmpiMjF3ZFhSbFFYVjBiMUJzWVdObGJXVnVkQ2h6ZEdGMFpTd2diM0IwYVc5dWN5a2dlMXh1SUNCcFppQW9iM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5QTlJSHQ5TzF4dUlDQjlYRzVjYmlBZ2RtRnlJRjl2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeXhjYmlBZ0lDQWdJSEJzWVdObGJXVnVkQ0E5SUY5dmNIUnBiMjV6TG5Cc1lXTmxiV1Z1ZEN4Y2JpQWdJQ0FnSUdKdmRXNWtZWEo1SUQwZ1gyOXdkR2x2Ym5NdVltOTFibVJoY25rc1hHNGdJQ0FnSUNCeWIyOTBRbTkxYm1SaGNua2dQU0JmYjNCMGFXOXVjeTV5YjI5MFFtOTFibVJoY25rc1hHNGdJQ0FnSUNCd1lXUmthVzVuSUQwZ1gyOXdkR2x2Ym5NdWNHRmtaR2x1Wnl4Y2JpQWdJQ0FnSUdac2FYQldZWEpwWVhScGIyNXpJRDBnWDI5d2RHbHZibk11Wm14cGNGWmhjbWxoZEdsdmJuTXNYRzRnSUNBZ0lDQmZiM0IwYVc5dWN5UmhiR3h2ZDJWa1FYVjBiMUFnUFNCZmIzQjBhVzl1Y3k1aGJHeHZkMlZrUVhWMGIxQnNZV05sYldWdWRITXNYRzRnSUNBZ0lDQmhiR3h2ZDJWa1FYVjBiMUJzWVdObGJXVnVkSE1nUFNCZmIzQjBhVzl1Y3lSaGJHeHZkMlZrUVhWMGIxQWdQVDA5SUhadmFXUWdNQ0EvSUdGc2JGQnNZV05sYldWdWRITWdPaUJmYjNCMGFXOXVjeVJoYkd4dmQyVmtRWFYwYjFBN1hHNGdJSFpoY2lCMllYSnBZWFJwYjI0Z1BTQm5aWFJXWVhKcFlYUnBiMjRvY0d4aFkyVnRaVzUwS1R0Y2JpQWdkbUZ5SUhCc1lXTmxiV1Z1ZEhNZ1BTQjJZWEpwWVhScGIyNGdQeUJtYkdsd1ZtRnlhV0YwYVc5dWN5QS9JSFpoY21saGRHbHZibEJzWVdObGJXVnVkSE1nT2lCMllYSnBZWFJwYjI1UWJHRmpaVzFsYm5SekxtWnBiSFJsY2lobWRXNWpkR2x2YmlBb2NHeGhZMlZ0Wlc1MEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRGWmhjbWxoZEdsdmJpaHdiR0ZqWlcxbGJuUXBJRDA5UFNCMllYSnBZWFJwYjI0N1hHNGdJSDBwSURvZ1ltRnpaVkJzWVdObGJXVnVkSE03WEc0Z0lIWmhjaUJoYkd4dmQyVmtVR3hoWTJWdFpXNTBjeUE5SUhCc1lXTmxiV1Z1ZEhNdVptbHNkR1Z5S0daMWJtTjBhVzl1SUNod2JHRmpaVzFsYm5RcElIdGNiaUFnSUNCeVpYUjFjbTRnWVd4c2IzZGxaRUYxZEc5UWJHRmpaVzFsYm5SekxtbHVaR1Y0VDJZb2NHeGhZMlZ0Wlc1MEtTQStQU0F3TzF4dUlDQjlLVHRjYmx4dUlDQnBaaUFvWVd4c2IzZGxaRkJzWVdObGJXVnVkSE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ1lXeHNiM2RsWkZCc1lXTmxiV1Z1ZEhNZ1BTQndiR0ZqWlcxbGJuUnpPMXh1WEc0Z0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lDRTlQU0JjSW5CeWIyUjFZM1JwYjI1Y0lpa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loYkoxQnZjSEJsY2pvZ1ZHaGxJR0JoYkd4dmQyVmtRWFYwYjFCc1lXTmxiV1Z1ZEhOZ0lHOXdkR2x2YmlCa2FXUWdibTkwSUdGc2JHOTNJR0Z1ZVNjc0lDZHdiR0ZqWlcxbGJuUnpMaUJGYm5OMWNtVWdkR2hsSUdCd2JHRmpaVzFsYm5SZ0lHOXdkR2x2YmlCdFlYUmphR1Z6SUhSb1pTQjJZWEpwWVhScGIyNG5MQ0FuYjJZZ2RHaGxJR0ZzYkc5M1pXUWdjR3hoWTJWdFpXNTBjeTRuTENBblJtOXlJR1Y0WVcxd2JHVXNJRndpWVhWMGIxd2lJR05oYm01dmRDQmlaU0IxYzJWa0lIUnZJR0ZzYkc5M0lGd2lZbTkwZEc5dExYTjBZWEowWENJdUp5d2dKMVZ6WlNCY0ltRjFkRzh0YzNSaGNuUmNJaUJwYm5OMFpXRmtMaWRkTG1wdmFXNG9KeUFuS1NrN1hHNGdJQ0FnZlZ4dUlDQjlJQzh2SUNSR2JHOTNSbWw0VFdWYmFXNWpiMjF3WVhScFlteGxMWFI1Y0dWZE9pQkdiRzkzSUhObFpXMXpJSFJ2SUdoaGRtVWdjSEp2WW14bGJYTWdkMmwwYUNCMGQyOGdZWEp5WVhrZ2RXNXBiMjV6TGk0dVhHNWNibHh1SUNCMllYSWdiM1psY21ac2IzZHpJRDBnWVd4c2IzZGxaRkJzWVdObGJXVnVkSE11Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2hoWTJNc0lIQnNZV05sYldWdWRDa2dlMXh1SUNBZ0lHRmpZMXR3YkdGalpXMWxiblJkSUQwZ1pHVjBaV04wVDNabGNtWnNiM2NvYzNSaGRHVXNJSHRjYmlBZ0lDQWdJSEJzWVdObGJXVnVkRG9nY0d4aFkyVnRaVzUwTEZ4dUlDQWdJQ0FnWW05MWJtUmhjbms2SUdKdmRXNWtZWEo1TEZ4dUlDQWdJQ0FnY205dmRFSnZkVzVrWVhKNU9pQnliMjkwUW05MWJtUmhjbmtzWEc0Z0lDQWdJQ0J3WVdSa2FXNW5PaUJ3WVdSa2FXNW5YRzRnSUNBZ2ZTbGJaMlYwUW1GelpWQnNZV05sYldWdWRDaHdiR0ZqWlcxbGJuUXBYVHRjYmlBZ0lDQnlaWFIxY200Z1lXTmpPMXh1SUNCOUxDQjdmU2s3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1YTJWNWN5aHZkbVZ5Wm14dmQzTXBMbk52Y25Rb1puVnVZM1JwYjI0Z0tHRXNJR0lwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiM1psY21ac2IzZHpXMkZkSUMwZ2IzWmxjbVpzYjNkelcySmRPMXh1SUNCOUtUdGNibjBpTENKcGJYQnZjblFnZXlCMGIzQXNJR0p2ZEhSdmJTd2diR1ZtZEN3Z2NtbG5hSFFnZlNCbWNtOXRJRndpTGk0dlpXNTFiWE11YW5OY0lqdGNibWx0Y0c5eWRDQmtaWFJsWTNSUGRtVnlabXh2ZHlCbWNtOXRJRndpTGk0dmRYUnBiSE12WkdWMFpXTjBUM1psY21ac2IzY3Vhbk5jSWp0Y2JseHVablZ1WTNScGIyNGdaMlYwVTJsa1pVOW1abk5sZEhNb2IzWmxjbVpzYjNjc0lISmxZM1FzSUhCeVpYWmxiblJsWkU5bVpuTmxkSE1wSUh0Y2JpQWdhV1lnS0hCeVpYWmxiblJsWkU5bVpuTmxkSE1nUFQwOUlIWnZhV1FnTUNrZ2UxeHVJQ0FnSUhCeVpYWmxiblJsWkU5bVpuTmxkSE1nUFNCN1hHNGdJQ0FnSUNCNE9pQXdMRnh1SUNBZ0lDQWdlVG9nTUZ4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJSFJ2Y0RvZ2IzWmxjbVpzYjNjdWRHOXdJQzBnY21WamRDNW9aV2xuYUhRZ0xTQndjbVYyWlc1MFpXUlBabVp6WlhSekxua3NYRzRnSUNBZ2NtbG5hSFE2SUc5MlpYSm1iRzkzTG5KcFoyaDBJQzBnY21WamRDNTNhV1IwYUNBcklIQnlaWFpsYm5SbFpFOW1abk5sZEhNdWVDeGNiaUFnSUNCaWIzUjBiMjA2SUc5MlpYSm1iRzkzTG1KdmRIUnZiU0F0SUhKbFkzUXVhR1ZwWjJoMElDc2djSEpsZG1WdWRHVmtUMlptYzJWMGN5NTVMRnh1SUNBZ0lHeGxablE2SUc5MlpYSm1iRzkzTG14bFpuUWdMU0J5WldOMExuZHBaSFJvSUMwZ2NISmxkbVZ1ZEdWa1QyWm1jMlYwY3k1NFhHNGdJSDA3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6UVc1NVUybGtaVVoxYkd4NVEyeHBjSEJsWkNodmRtVnlabXh2ZHlrZ2UxeHVJQ0J5WlhSMWNtNGdXM1J2Y0N3Z2NtbG5hSFFzSUdKdmRIUnZiU3dnYkdWbWRGMHVjMjl0WlNobWRXNWpkR2x2YmlBb2MybGtaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnZkbVZ5Wm14dmQxdHphV1JsWFNBK1BTQXdPMXh1SUNCOUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FHbGtaU2hmY21WbUtTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlGOXlaV1l1YzNSaGRHVXNYRzRnSUNBZ0lDQnVZVzFsSUQwZ1gzSmxaaTV1WVcxbE8xeHVJQ0IyWVhJZ2NtVm1aWEpsYm1ObFVtVmpkQ0E5SUhOMFlYUmxMbkpsWTNSekxuSmxabVZ5Wlc1alpUdGNiaUFnZG1GeUlIQnZjSEJsY2xKbFkzUWdQU0J6ZEdGMFpTNXlaV04wY3k1d2IzQndaWEk3WEc0Z0lIWmhjaUJ3Y21WMlpXNTBaV1JQWm1aelpYUnpJRDBnYzNSaGRHVXViVzlrYVdacFpYSnpSR0YwWVM1d2NtVjJaVzUwVDNabGNtWnNiM2M3WEc0Z0lIWmhjaUJ5WldabGNtVnVZMlZQZG1WeVpteHZkeUE5SUdSbGRHVmpkRTkyWlhKbWJHOTNLSE4wWVhSbExDQjdYRzRnSUNBZ1pXeGxiV1Z1ZEVOdmJuUmxlSFE2SUNkeVpXWmxjbVZ1WTJVblhHNGdJSDBwTzF4dUlDQjJZWElnY0c5d2NHVnlRV3gwVDNabGNtWnNiM2NnUFNCa1pYUmxZM1JQZG1WeVpteHZkeWh6ZEdGMFpTd2dlMXh1SUNBZ0lHRnNkRUp2ZFc1a1lYSjVPaUIwY25WbFhHNGdJSDBwTzF4dUlDQjJZWElnY21WbVpYSmxibU5sUTJ4cGNIQnBibWRQWm1aelpYUnpJRDBnWjJWMFUybGtaVTltWm5ObGRITW9jbVZtWlhKbGJtTmxUM1psY21ac2IzY3NJSEpsWm1WeVpXNWpaVkpsWTNRcE8xeHVJQ0IyWVhJZ2NHOXdjR1Z5UlhOallYQmxUMlptYzJWMGN5QTlJR2RsZEZOcFpHVlBabVp6WlhSektIQnZjSEJsY2tGc2RFOTJaWEptYkc5M0xDQndiM0J3WlhKU1pXTjBMQ0J3Y21WMlpXNTBaV1JQWm1aelpYUnpLVHRjYmlBZ2RtRnlJR2x6VW1WbVpYSmxibU5sU0dsa1pHVnVJRDBnYVhOQmJubFRhV1JsUm5Wc2JIbERiR2x3Y0dWa0tISmxabVZ5Wlc1alpVTnNhWEJ3YVc1blQyWm1jMlYwY3lrN1hHNGdJSFpoY2lCb1lYTlFiM0J3WlhKRmMyTmhjR1ZrSUQwZ2FYTkJibmxUYVdSbFJuVnNiSGxEYkdsd2NHVmtLSEJ2Y0hCbGNrVnpZMkZ3WlU5bVpuTmxkSE1wTzF4dUlDQnpkR0YwWlM1dGIyUnBabWxsY25ORVlYUmhXMjVoYldWZElEMGdlMXh1SUNBZ0lISmxabVZ5Wlc1alpVTnNhWEJ3YVc1blQyWm1jMlYwY3pvZ2NtVm1aWEpsYm1ObFEyeHBjSEJwYm1kUFptWnpaWFJ6TEZ4dUlDQWdJSEJ2Y0hCbGNrVnpZMkZ3WlU5bVpuTmxkSE02SUhCdmNIQmxja1Z6WTJGd1pVOW1abk5sZEhNc1hHNGdJQ0FnYVhOU1pXWmxjbVZ1WTJWSWFXUmtaVzQ2SUdselVtVm1aWEpsYm1ObFNHbGtaR1Z1TEZ4dUlDQWdJR2hoYzFCdmNIQmxja1Z6WTJGd1pXUTZJR2hoYzFCdmNIQmxja1Z6WTJGd1pXUmNiaUFnZlR0Y2JpQWdjM1JoZEdVdVlYUjBjbWxpZFhSbGN5NXdiM0J3WlhJZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQnpkR0YwWlM1aGRIUnlhV0oxZEdWekxuQnZjSEJsY2l3Z2UxeHVJQ0FnSUNka1lYUmhMWEJ2Y0hCbGNpMXlaV1psY21WdVkyVXRhR2xrWkdWdUp6b2dhWE5TWldabGNtVnVZMlZJYVdSa1pXNHNYRzRnSUNBZ0oyUmhkR0V0Y0c5d2NHVnlMV1Z6WTJGd1pXUW5PaUJvWVhOUWIzQndaWEpGYzJOaGNHVmtYRzRnSUgwcE8xeHVmU0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYVcxd2IzSjBMMjV2TFhWdWRYTmxaQzF0YjJSMWJHVnpYRzVjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnVZVzFsT2lBbmFHbGtaU2NzWEc0Z0lHVnVZV0pzWldRNklIUnlkV1VzWEc0Z0lIQm9ZWE5sT2lBbmJXRnBiaWNzWEc0Z0lISmxjWFZwY21WelNXWkZlR2x6ZEhNNklGc25jSEpsZG1WdWRFOTJaWEptYkc5M0oxMHNYRzRnSUdadU9pQm9hV1JsWEc1OU95SXNJbWx0Y0c5eWRDQm5aWFJDWVhObFVHeGhZMlZ0Wlc1MElHWnliMjBnWENJdUxpOTFkR2xzY3k5blpYUkNZWE5sVUd4aFkyVnRaVzUwTG1welhDSTdYRzVwYlhCdmNuUWdleUIwYjNBc0lHeGxablFzSUhKcFoyaDBMQ0J3YkdGalpXMWxiblJ6SUgwZ1puSnZiU0JjSWk0dUwyVnVkVzF6TG1welhDSTdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JwYlhCdmNuUXZibTh0ZFc1MWMyVmtMVzF2WkhWc1pYTmNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1JwYzNSaGJtTmxRVzVrVTJ0cFpHUnBibWRVYjFoWktIQnNZV05sYldWdWRDd2djbVZqZEhNc0lHOW1abk5sZENrZ2UxeHVJQ0IyWVhJZ1ltRnpaVkJzWVdObGJXVnVkQ0E5SUdkbGRFSmhjMlZRYkdGalpXMWxiblFvY0d4aFkyVnRaVzUwS1R0Y2JpQWdkbUZ5SUdsdWRtVnlkRVJwYzNSaGJtTmxJRDBnVzJ4bFpuUXNJSFJ2Y0YwdWFXNWtaWGhQWmloaVlYTmxVR3hoWTJWdFpXNTBLU0ErUFNBd0lEOGdMVEVnT2lBeE8xeHVYRzRnSUhaaGNpQmZjbVZtSUQwZ2RIbHdaVzltSUc5bVpuTmxkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QS9JRzltWm5ObGRDaFBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQnlaV04wY3l3Z2UxeHVJQ0FnSUhCc1lXTmxiV1Z1ZERvZ2NHeGhZMlZ0Wlc1MFhHNGdJSDBwS1NBNklHOW1abk5sZEN4Y2JpQWdJQ0FnSUhOcmFXUmthVzVuSUQwZ1gzSmxabHN3WFN4Y2JpQWdJQ0FnSUdScGMzUmhibU5sSUQwZ1gzSmxabHN4WFR0Y2JseHVJQ0J6YTJsa1pHbHVaeUE5SUhOcmFXUmthVzVuSUh4OElEQTdYRzRnSUdScGMzUmhibU5sSUQwZ0tHUnBjM1JoYm1ObElIeDhJREFwSUNvZ2FXNTJaWEowUkdsemRHRnVZMlU3WEc0Z0lISmxkSFZ5YmlCYmJHVm1kQ3dnY21sbmFIUmRMbWx1WkdWNFQyWW9ZbUZ6WlZCc1lXTmxiV1Z1ZENrZ1BqMGdNQ0EvSUh0Y2JpQWdJQ0I0T2lCa2FYTjBZVzVqWlN4Y2JpQWdJQ0I1T2lCemEybGtaR2x1WjF4dUlDQjlJRG9nZTF4dUlDQWdJSGc2SUhOcmFXUmthVzVuTEZ4dUlDQWdJSGs2SUdScGMzUmhibU5sWEc0Z0lIMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOW1abk5sZENoZmNtVm1NaWtnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0JmY21WbU1pNXpkR0YwWlN4Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCZmNtVm1NaTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdibUZ0WlNBOUlGOXlaV1l5TG01aGJXVTdYRzRnSUhaaGNpQmZiM0IwYVc5dWN5UnZabVp6WlhRZ1BTQnZjSFJwYjI1ekxtOW1abk5sZEN4Y2JpQWdJQ0FnSUc5bVpuTmxkQ0E5SUY5dmNIUnBiMjV6Skc5bVpuTmxkQ0E5UFQwZ2RtOXBaQ0F3SUQ4Z1d6QXNJREJkSURvZ1gyOXdkR2x2Ym5Na2IyWm1jMlYwTzF4dUlDQjJZWElnWkdGMFlTQTlJSEJzWVdObGJXVnVkSE11Y21Wa2RXTmxLR1oxYm1OMGFXOXVJQ2hoWTJNc0lIQnNZV05sYldWdWRDa2dlMXh1SUNBZ0lHRmpZMXR3YkdGalpXMWxiblJkSUQwZ1pHbHpkR0Z1WTJWQmJtUlRhMmxrWkdsdVoxUnZXRmtvY0d4aFkyVnRaVzUwTENCemRHRjBaUzV5WldOMGN5d2diMlptYzJWMEtUdGNiaUFnSUNCeVpYUjFjbTRnWVdOak8xeHVJQ0I5TENCN2ZTazdYRzRnSUhaaGNpQmZaR0YwWVNSemRHRjBaU1J3YkdGalpXMWxiblFnUFNCa1lYUmhXM04wWVhSbExuQnNZV05sYldWdWRGMHNYRzRnSUNBZ0lDQjRJRDBnWDJSaGRHRWtjM1JoZEdVa2NHeGhZMlZ0Wlc1MExuZ3NYRzRnSUNBZ0lDQjVJRDBnWDJSaGRHRWtjM1JoZEdVa2NHeGhZMlZ0Wlc1MExuazdYRzVjYmlBZ2FXWWdLSE4wWVhSbExtMXZaR2xtYVdWeWMwUmhkR0V1Y0c5d2NHVnlUMlptYzJWMGN5QWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ2MzUmhkR1V1Ylc5a2FXWnBaWEp6UkdGMFlTNXdiM0J3WlhKUFptWnpaWFJ6TG5nZ0t6MGdlRHRjYmlBZ0lDQnpkR0YwWlM1dGIyUnBabWxsY25ORVlYUmhMbkJ2Y0hCbGNrOW1abk5sZEhNdWVTQXJQU0I1TzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1Ylc5a2FXWnBaWEp6UkdGMFlWdHVZVzFsWFNBOUlHUmhkR0U3WEc1OUlDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnBiWEJ2Y25RdmJtOHRkVzUxYzJWa0xXMXZaSFZzWlhOY2JseHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUc1aGJXVTZJQ2R2Wm1aelpYUW5MRnh1SUNCbGJtRmliR1ZrT2lCMGNuVmxMRnh1SUNCd2FHRnpaVG9nSjIxaGFXNG5MRnh1SUNCeVpYRjFhWEpsY3pvZ1d5ZHdiM0J3WlhKUFptWnpaWFJ6SjEwc1hHNGdJR1p1T2lCdlptWnpaWFJjYm4wN0lpd2lhVzF3YjNKMElHTnZiWEIxZEdWUFptWnpaWFJ6SUdaeWIyMGdYQ0l1TGk5MWRHbHNjeTlqYjIxd2RYUmxUMlptYzJWMGN5NXFjMXdpTzF4dVhHNW1kVzVqZEdsdmJpQndiM0J3WlhKUFptWnpaWFJ6S0Y5eVpXWXBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdYM0psWmk1emRHRjBaU3hjYmlBZ0lDQWdJRzVoYldVZ1BTQmZjbVZtTG01aGJXVTdYRzRnSUM4dklFOW1abk5sZEhNZ1lYSmxJSFJvWlNCaFkzUjFZV3dnY0c5emFYUnBiMjRnZEdobElIQnZjSEJsY2lCdVpXVmtjeUIwYnlCb1lYWmxJSFJ2SUdKbFhHNGdJQzh2SUhCeWIzQmxjbXg1SUhCdmMybDBhVzl1WldRZ2JtVmhjaUJwZEhNZ2NtVm1aWEpsYm1ObElHVnNaVzFsYm5SY2JpQWdMeThnVkdocGN5QnBjeUIwYUdVZ2JXOXpkQ0JpWVhOcFl5QndiR0ZqWlcxbGJuUXNJR0Z1WkNCM2FXeHNJR0psSUdGa2FuVnpkR1ZrSUdKNVhHNGdJQzh2SUhSb1pTQnRiMlJwWm1sbGNuTWdhVzRnZEdobElHNWxlSFFnYzNSbGNGeHVJQ0J6ZEdGMFpTNXRiMlJwWm1sbGNuTkVZWFJoVzI1aGJXVmRJRDBnWTI5dGNIVjBaVTltWm5ObGRITW9lMXh1SUNBZ0lISmxabVZ5Wlc1alpUb2djM1JoZEdVdWNtVmpkSE11Y21WbVpYSmxibU5sTEZ4dUlDQWdJR1ZzWlcxbGJuUTZJSE4wWVhSbExuSmxZM1J6TG5CdmNIQmxjaXhjYmlBZ0lDQnpkSEpoZEdWbmVUb2dKMkZpYzI5c2RYUmxKeXhjYmlBZ0lDQndiR0ZqWlcxbGJuUTZJSE4wWVhSbExuQnNZV05sYldWdWRGeHVJQ0I5S1R0Y2JuMGdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR2x0Y0c5eWRDOXVieTExYm5WelpXUXRiVzlrZFd4bGMxeHVYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2JtRnRaVG9nSjNCdmNIQmxjazltWm5ObGRITW5MRnh1SUNCbGJtRmliR1ZrT2lCMGNuVmxMRnh1SUNCd2FHRnpaVG9nSjNKbFlXUW5MRnh1SUNCbWJqb2djRzl3Y0dWeVQyWm1jMlYwY3l4Y2JpQWdaR0YwWVRvZ2UzMWNibjA3SWl3aWFXMXdiM0owSUhzZ2RHOXdMQ0JzWldaMExDQnlhV2RvZEN3Z1ltOTBkRzl0TENCemRHRnlkQ0I5SUdaeWIyMGdYQ0l1TGk5bGJuVnRjeTVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRUpoYzJWUWJHRmpaVzFsYm5RZ1puSnZiU0JjSWk0dUwzVjBhV3h6TDJkbGRFSmhjMlZRYkdGalpXMWxiblF1YW5OY0lqdGNibWx0Y0c5eWRDQm5aWFJOWVdsdVFYaHBjMFp5YjIxUWJHRmpaVzFsYm5RZ1puSnZiU0JjSWk0dUwzVjBhV3h6TDJkbGRFMWhhVzVCZUdselJuSnZiVkJzWVdObGJXVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRUZzZEVGNGFYTWdabkp2YlNCY0lpNHVMM1YwYVd4ekwyZGxkRUZzZEVGNGFYTXVhbk5jSWp0Y2JtbHRjRzl5ZENCN0lIZHBkR2hwYml3Z2QybDBhR2x1VFdGNFEyeGhiWEFnZlNCbWNtOXRJRndpTGk0dmRYUnBiSE12ZDJsMGFHbHVMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBUR0Y1YjNWMFVtVmpkQ0JtY205dElGd2lMaTR2Wkc5dExYVjBhV3h6TDJkbGRFeGhlVzkxZEZKbFkzUXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUlBabVp6WlhSUVlYSmxiblFnWm5KdmJTQmNJaTR1TDJSdmJTMTFkR2xzY3k5blpYUlBabVp6WlhSUVlYSmxiblF1YW5OY0lqdGNibWx0Y0c5eWRDQmtaWFJsWTNSUGRtVnlabXh2ZHlCbWNtOXRJRndpTGk0dmRYUnBiSE12WkdWMFpXTjBUM1psY21ac2IzY3Vhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUldZWEpwWVhScGIyNGdabkp2YlNCY0lpNHVMM1YwYVd4ekwyZGxkRlpoY21saGRHbHZiaTVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRVp5WlhOb1UybGtaVTlpYW1WamRDQm1jbTl0SUZ3aUxpNHZkWFJwYkhNdloyVjBSbkpsYzJoVGFXUmxUMkpxWldOMExtcHpYQ0k3WEc1cGJYQnZjblFnZXlCdGFXNGdZWE1nYldGMGFFMXBiaXdnYldGNElHRnpJRzFoZEdoTllYZ2dmU0JtY205dElGd2lMaTR2ZFhScGJITXZiV0YwYUM1cWMxd2lPMXh1WEc1bWRXNWpkR2x2YmlCd2NtVjJaVzUwVDNabGNtWnNiM2NvWDNKbFppa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQmZjbVZtTG5OMFlYUmxMRnh1SUNBZ0lDQWdiM0IwYVc5dWN5QTlJRjl5WldZdWIzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUc1aGJXVWdQU0JmY21WbUxtNWhiV1U3WEc0Z0lIWmhjaUJmYjNCMGFXOXVjeVJ0WVdsdVFYaHBjeUE5SUc5d2RHbHZibk11YldGcGJrRjRhWE1zWEc0Z0lDQWdJQ0JqYUdWamEwMWhhVzVCZUdseklEMGdYMjl3ZEdsdmJuTWtiV0ZwYmtGNGFYTWdQVDA5SUhadmFXUWdNQ0EvSUhSeWRXVWdPaUJmYjNCMGFXOXVjeVJ0WVdsdVFYaHBjeXhjYmlBZ0lDQWdJRjl2Y0hScGIyNXpKR0ZzZEVGNGFYTWdQU0J2Y0hScGIyNXpMbUZzZEVGNGFYTXNYRzRnSUNBZ0lDQmphR1ZqYTBGc2RFRjRhWE1nUFNCZmIzQjBhVzl1Y3lSaGJIUkJlR2x6SUQwOVBTQjJiMmxrSURBZ1B5Qm1ZV3h6WlNBNklGOXZjSFJwYjI1ekpHRnNkRUY0YVhNc1hHNGdJQ0FnSUNCaWIzVnVaR0Z5ZVNBOUlHOXdkR2x2Ym5NdVltOTFibVJoY25rc1hHNGdJQ0FnSUNCeWIyOTBRbTkxYm1SaGNua2dQU0J2Y0hScGIyNXpMbkp2YjNSQ2IzVnVaR0Z5ZVN4Y2JpQWdJQ0FnSUdGc2RFSnZkVzVrWVhKNUlEMGdiM0IwYVc5dWN5NWhiSFJDYjNWdVpHRnllU3hjYmlBZ0lDQWdJSEJoWkdScGJtY2dQU0J2Y0hScGIyNXpMbkJoWkdScGJtY3NYRzRnSUNBZ0lDQmZiM0IwYVc5dWN5UjBaWFJvWlhJZ1BTQnZjSFJwYjI1ekxuUmxkR2hsY2l4Y2JpQWdJQ0FnSUhSbGRHaGxjaUE5SUY5dmNIUnBiMjV6SkhSbGRHaGxjaUE5UFQwZ2RtOXBaQ0F3SUQ4Z2RISjFaU0E2SUY5dmNIUnBiMjV6SkhSbGRHaGxjaXhjYmlBZ0lDQWdJRjl2Y0hScGIyNXpKSFJsZEdobGNrOW1abk5sZENBOUlHOXdkR2x2Ym5NdWRHVjBhR1Z5VDJabWMyVjBMRnh1SUNBZ0lDQWdkR1YwYUdWeVQyWm1jMlYwSUQwZ1gyOXdkR2x2Ym5Na2RHVjBhR1Z5VDJabWMyVjBJRDA5UFNCMmIybGtJREFnUHlBd0lEb2dYMjl3ZEdsdmJuTWtkR1YwYUdWeVQyWm1jMlYwTzF4dUlDQjJZWElnYjNabGNtWnNiM2NnUFNCa1pYUmxZM1JQZG1WeVpteHZkeWh6ZEdGMFpTd2dlMXh1SUNBZ0lHSnZkVzVrWVhKNU9pQmliM1Z1WkdGeWVTeGNiaUFnSUNCeWIyOTBRbTkxYm1SaGNuazZJSEp2YjNSQ2IzVnVaR0Z5ZVN4Y2JpQWdJQ0J3WVdSa2FXNW5PaUJ3WVdSa2FXNW5MRnh1SUNBZ0lHRnNkRUp2ZFc1a1lYSjVPaUJoYkhSQ2IzVnVaR0Z5ZVZ4dUlDQjlLVHRjYmlBZ2RtRnlJR0poYzJWUWJHRmpaVzFsYm5RZ1BTQm5aWFJDWVhObFVHeGhZMlZ0Wlc1MEtITjBZWFJsTG5Cc1lXTmxiV1Z1ZENrN1hHNGdJSFpoY2lCMllYSnBZWFJwYjI0Z1BTQm5aWFJXWVhKcFlYUnBiMjRvYzNSaGRHVXVjR3hoWTJWdFpXNTBLVHRjYmlBZ2RtRnlJR2x6UW1GelpWQnNZV05sYldWdWRDQTlJQ0YyWVhKcFlYUnBiMjQ3WEc0Z0lIWmhjaUJ0WVdsdVFYaHBjeUE5SUdkbGRFMWhhVzVCZUdselJuSnZiVkJzWVdObGJXVnVkQ2hpWVhObFVHeGhZMlZ0Wlc1MEtUdGNiaUFnZG1GeUlHRnNkRUY0YVhNZ1BTQm5aWFJCYkhSQmVHbHpLRzFoYVc1QmVHbHpLVHRjYmlBZ2RtRnlJSEJ2Y0hCbGNrOW1abk5sZEhNZ1BTQnpkR0YwWlM1dGIyUnBabWxsY25ORVlYUmhMbkJ2Y0hCbGNrOW1abk5sZEhNN1hHNGdJSFpoY2lCeVpXWmxjbVZ1WTJWU1pXTjBJRDBnYzNSaGRHVXVjbVZqZEhNdWNtVm1aWEpsYm1ObE8xeHVJQ0IyWVhJZ2NHOXdjR1Z5VW1WamRDQTlJSE4wWVhSbExuSmxZM1J6TG5CdmNIQmxjanRjYmlBZ2RtRnlJSFJsZEdobGNrOW1abk5sZEZaaGJIVmxJRDBnZEhsd1pXOW1JSFJsZEdobGNrOW1abk5sZENBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUhSbGRHaGxjazltWm5ObGRDaFBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQnpkR0YwWlM1eVpXTjBjeXdnZTF4dUlDQWdJSEJzWVdObGJXVnVkRG9nYzNSaGRHVXVjR3hoWTJWdFpXNTBYRzRnSUgwcEtTQTZJSFJsZEdobGNrOW1abk5sZER0Y2JpQWdkbUZ5SUc1dmNtMWhiR2w2WldSVVpYUm9aWEpQWm1aelpYUldZV3gxWlNBOUlIUjVjR1Z2WmlCMFpYUm9aWEpQWm1aelpYUldZV3gxWlNBOVBUMGdKMjUxYldKbGNpY2dQeUI3WEc0Z0lDQWdiV0ZwYmtGNGFYTTZJSFJsZEdobGNrOW1abk5sZEZaaGJIVmxMRnh1SUNBZ0lHRnNkRUY0YVhNNklIUmxkR2hsY2s5bVpuTmxkRlpoYkhWbFhHNGdJSDBnT2lCUFltcGxZM1F1WVhOemFXZHVLSHRjYmlBZ0lDQnRZV2x1UVhocGN6b2dNQ3hjYmlBZ0lDQmhiSFJCZUdsek9pQXdYRzRnSUgwc0lIUmxkR2hsY2s5bVpuTmxkRlpoYkhWbEtUdGNiaUFnZG1GeUlHOW1abk5sZEUxdlpHbG1hV1Z5VTNSaGRHVWdQU0J6ZEdGMFpTNXRiMlJwWm1sbGNuTkVZWFJoTG05bVpuTmxkQ0EvSUhOMFlYUmxMbTF2WkdsbWFXVnljMFJoZEdFdWIyWm1jMlYwVzNOMFlYUmxMbkJzWVdObGJXVnVkRjBnT2lCdWRXeHNPMXh1SUNCMllYSWdaR0YwWVNBOUlIdGNiaUFnSUNCNE9pQXdMRnh1SUNBZ0lIazZJREJjYmlBZ2ZUdGNibHh1SUNCcFppQW9JWEJ2Y0hCbGNrOW1abk5sZEhNcElIdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMmhsWTJ0TllXbHVRWGhwY3lrZ2UxeHVJQ0FnSUhaaGNpQmZiMlptYzJWMFRXOWthV1pwWlhKVGRHRjBaU1E3WEc1Y2JpQWdJQ0IyWVhJZ2JXRnBibE5wWkdVZ1BTQnRZV2x1UVhocGN5QTlQVDBnSjNrbklEOGdkRzl3SURvZ2JHVm1kRHRjYmlBZ0lDQjJZWElnWVd4MFUybGtaU0E5SUcxaGFXNUJlR2x6SUQwOVBTQW5lU2NnUHlCaWIzUjBiMjBnT2lCeWFXZG9kRHRjYmlBZ0lDQjJZWElnYkdWdUlEMGdiV0ZwYmtGNGFYTWdQVDA5SUNkNUp5QS9JQ2RvWldsbmFIUW5JRG9nSjNkcFpIUm9KenRjYmlBZ0lDQjJZWElnYjJabWMyVjBJRDBnY0c5d2NHVnlUMlptYzJWMGMxdHRZV2x1UVhocGMxMDdYRzRnSUNBZ2RtRnlJRzFwYmlBOUlHOW1abk5sZENBcklHOTJaWEptYkc5M1cyMWhhVzVUYVdSbFhUdGNiaUFnSUNCMllYSWdiV0Y0SUQwZ2IyWm1jMlYwSUMwZ2IzWmxjbVpzYjNkYllXeDBVMmxrWlYwN1hHNGdJQ0FnZG1GeUlHRmtaR2wwYVhabElEMGdkR1YwYUdWeUlEOGdMWEJ2Y0hCbGNsSmxZM1JiYkdWdVhTQXZJRElnT2lBd08xeHVJQ0FnSUhaaGNpQnRhVzVNWlc0Z1BTQjJZWEpwWVhScGIyNGdQVDA5SUhOMFlYSjBJRDhnY21WbVpYSmxibU5sVW1WamRGdHNaVzVkSURvZ2NHOXdjR1Z5VW1WamRGdHNaVzVkTzF4dUlDQWdJSFpoY2lCdFlYaE1aVzRnUFNCMllYSnBZWFJwYjI0Z1BUMDlJSE4wWVhKMElEOGdMWEJ2Y0hCbGNsSmxZM1JiYkdWdVhTQTZJQzF5WldabGNtVnVZMlZTWldOMFcyeGxibDA3SUM4dklGZGxJRzVsWldRZ2RHOGdhVzVqYkhWa1pTQjBhR1VnWVhKeWIzY2dhVzRnZEdobElHTmhiR04xYkdGMGFXOXVJSE52SUhSb1pTQmhjbkp2ZHlCa2IyVnpiaWQwSUdkdlhHNGdJQ0FnTHk4Z2IzVjBjMmxrWlNCMGFHVWdjbVZtWlhKbGJtTmxJR0p2ZFc1a2MxeHVYRzRnSUNBZ2RtRnlJR0Z5Y205M1JXeGxiV1Z1ZENBOUlITjBZWFJsTG1Wc1pXMWxiblJ6TG1GeWNtOTNPMXh1SUNBZ0lIWmhjaUJoY25KdmQxSmxZM1FnUFNCMFpYUm9aWElnSmlZZ1lYSnliM2RGYkdWdFpXNTBJRDhnWjJWMFRHRjViM1YwVW1WamRDaGhjbkp2ZDBWc1pXMWxiblFwSURvZ2UxeHVJQ0FnSUNBZ2QybGtkR2c2SURBc1hHNGdJQ0FnSUNCb1pXbG5hSFE2SURCY2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCaGNuSnZkMUJoWkdScGJtZFBZbXBsWTNRZ1BTQnpkR0YwWlM1dGIyUnBabWxsY25ORVlYUmhXeWRoY25KdmR5TndaWEp6YVhOMFpXNTBKMTBnUHlCemRHRjBaUzV0YjJScFptbGxjbk5FWVhSaFd5ZGhjbkp2ZHlOd1pYSnphWE4wWlc1MEoxMHVjR0ZrWkdsdVp5QTZJR2RsZEVaeVpYTm9VMmxrWlU5aWFtVmpkQ2dwTzF4dUlDQWdJSFpoY2lCaGNuSnZkMUJoWkdScGJtZE5hVzRnUFNCaGNuSnZkMUJoWkdScGJtZFBZbXBsWTNSYmJXRnBibE5wWkdWZE8xeHVJQ0FnSUhaaGNpQmhjbkp2ZDFCaFpHUnBibWROWVhnZ1BTQmhjbkp2ZDFCaFpHUnBibWRQWW1wbFkzUmJZV3gwVTJsa1pWMDdJQzh2SUVsbUlIUm9aU0J5WldabGNtVnVZMlVnYkdWdVozUm9JR2x6SUhOdFlXeHNaWElnZEdoaGJpQjBhR1VnWVhKeWIzY2diR1Z1WjNSb0xDQjNaU0JrYjI0bmRDQjNZVzUwWEc0Z0lDQWdMeThnZEc4Z2FXNWpiSFZrWlNCcGRITWdablZzYkNCemFYcGxJR2x1SUhSb1pTQmpZV3hqZFd4aGRHbHZiaTRnU1dZZ2RHaGxJSEpsWm1WeVpXNWpaU0JwY3lCemJXRnNiRnh1SUNBZ0lDOHZJR0Z1WkNCdVpXRnlJSFJvWlNCbFpHZGxJRzltSUdFZ1ltOTFibVJoY25rc0lIUm9aU0J3YjNCd1pYSWdZMkZ1SUc5MlpYSm1iRzkzSUdWMlpXNGdhV1lnZEdobFhHNGdJQ0FnTHk4Z2NtVm1aWEpsYm1ObElHbHpJRzV2ZENCdmRtVnlabXh2ZDJsdVp5QmhjeUIzWld4c0lDaGxMbWN1SUhacGNuUjFZV3dnWld4bGJXVnVkSE1nZDJsMGFDQnViMXh1SUNBZ0lDOHZJSGRwWkhSb0lHOXlJR2hsYVdkb2RDbGNibHh1SUNBZ0lIWmhjaUJoY25KdmQweGxiaUE5SUhkcGRHaHBiaWd3TENCeVpXWmxjbVZ1WTJWU1pXTjBXMnhsYmwwc0lHRnljbTkzVW1WamRGdHNaVzVkS1R0Y2JpQWdJQ0IyWVhJZ2JXbHVUMlptYzJWMElEMGdhWE5DWVhObFVHeGhZMlZ0Wlc1MElEOGdjbVZtWlhKbGJtTmxVbVZqZEZ0c1pXNWRJQzhnTWlBdElHRmtaR2wwYVhabElDMGdZWEp5YjNkTVpXNGdMU0JoY25KdmQxQmhaR1JwYm1kTmFXNGdMU0J1YjNKdFlXeHBlbVZrVkdWMGFHVnlUMlptYzJWMFZtRnNkV1V1YldGcGJrRjRhWE1nT2lCdGFXNU1aVzRnTFNCaGNuSnZkMHhsYmlBdElHRnljbTkzVUdGa1pHbHVaMDFwYmlBdElHNXZjbTFoYkdsNlpXUlVaWFJvWlhKUFptWnpaWFJXWVd4MVpTNXRZV2x1UVhocGN6dGNiaUFnSUNCMllYSWdiV0Y0VDJabWMyVjBJRDBnYVhOQ1lYTmxVR3hoWTJWdFpXNTBJRDhnTFhKbFptVnlaVzVqWlZKbFkzUmJiR1Z1WFNBdklESWdLeUJoWkdScGRHbDJaU0FySUdGeWNtOTNUR1Z1SUNzZ1lYSnliM2RRWVdSa2FXNW5UV0Y0SUNzZ2JtOXliV0ZzYVhwbFpGUmxkR2hsY2s5bVpuTmxkRlpoYkhWbExtMWhhVzVCZUdseklEb2diV0Y0VEdWdUlDc2dZWEp5YjNkTVpXNGdLeUJoY25KdmQxQmhaR1JwYm1kTllYZ2dLeUJ1YjNKdFlXeHBlbVZrVkdWMGFHVnlUMlptYzJWMFZtRnNkV1V1YldGcGJrRjRhWE03WEc0Z0lDQWdkbUZ5SUdGeWNtOTNUMlptYzJWMFVHRnlaVzUwSUQwZ2MzUmhkR1V1Wld4bGJXVnVkSE11WVhKeWIzY2dKaVlnWjJWMFQyWm1jMlYwVUdGeVpXNTBLSE4wWVhSbExtVnNaVzFsYm5SekxtRnljbTkzS1R0Y2JpQWdJQ0IyWVhJZ1kyeHBaVzUwVDJabWMyVjBJRDBnWVhKeWIzZFBabVp6WlhSUVlYSmxiblFnUHlCdFlXbHVRWGhwY3lBOVBUMGdKM2tuSUQ4Z1lYSnliM2RQWm1aelpYUlFZWEpsYm5RdVkyeHBaVzUwVkc5d0lIeDhJREFnT2lCaGNuSnZkMDltWm5ObGRGQmhjbVZ1ZEM1amJHbGxiblJNWldaMElIeDhJREFnT2lBd08xeHVJQ0FnSUhaaGNpQnZabVp6WlhSTmIyUnBabWxsY2xaaGJIVmxJRDBnS0Y5dlptWnpaWFJOYjJScFptbGxjbE4wWVhSbEpDQTlJRzltWm5ObGRFMXZaR2xtYVdWeVUzUmhkR1VnUFQwZ2JuVnNiQ0EvSUhadmFXUWdNQ0E2SUc5bVpuTmxkRTF2WkdsbWFXVnlVM1JoZEdWYmJXRnBia0Y0YVhOZEtTQWhQU0J1ZFd4c0lEOGdYMjltWm5ObGRFMXZaR2xtYVdWeVUzUmhkR1VrSURvZ01EdGNiaUFnSUNCMllYSWdkR1YwYUdWeVRXbHVJRDBnYjJabWMyVjBJQ3NnYldsdVQyWm1jMlYwSUMwZ2IyWm1jMlYwVFc5a2FXWnBaWEpXWVd4MVpTQXRJR05zYVdWdWRFOW1abk5sZER0Y2JpQWdJQ0IyWVhJZ2RHVjBhR1Z5VFdGNElEMGdiMlptYzJWMElDc2diV0Y0VDJabWMyVjBJQzBnYjJabWMyVjBUVzlrYVdacFpYSldZV3gxWlR0Y2JpQWdJQ0IyWVhJZ2NISmxkbVZ1ZEdWa1QyWm1jMlYwSUQwZ2QybDBhR2x1S0hSbGRHaGxjaUEvSUcxaGRHaE5hVzRvYldsdUxDQjBaWFJvWlhKTmFXNHBJRG9nYldsdUxDQnZabVp6WlhRc0lIUmxkR2hsY2lBL0lHMWhkR2hOWVhnb2JXRjRMQ0IwWlhSb1pYSk5ZWGdwSURvZ2JXRjRLVHRjYmlBZ0lDQndiM0J3WlhKUFptWnpaWFJ6VzIxaGFXNUJlR2x6WFNBOUlIQnlaWFpsYm5SbFpFOW1abk5sZER0Y2JpQWdJQ0JrWVhSaFcyMWhhVzVCZUdselhTQTlJSEJ5WlhabGJuUmxaRTltWm5ObGRDQXRJRzltWm5ObGREdGNiaUFnZlZ4dVhHNGdJR2xtSUNoamFHVmphMEZzZEVGNGFYTXBJSHRjYmlBZ0lDQjJZWElnWDI5bVpuTmxkRTF2WkdsbWFXVnlVM1JoZEdVa01qdGNibHh1SUNBZ0lIWmhjaUJmYldGcGJsTnBaR1VnUFNCdFlXbHVRWGhwY3lBOVBUMGdKM2duSUQ4Z2RHOXdJRG9nYkdWbWREdGNibHh1SUNBZ0lIWmhjaUJmWVd4MFUybGtaU0E5SUcxaGFXNUJlR2x6SUQwOVBTQW5lQ2NnUHlCaWIzUjBiMjBnT2lCeWFXZG9kRHRjYmx4dUlDQWdJSFpoY2lCZmIyWm1jMlYwSUQwZ2NHOXdjR1Z5VDJabWMyVjBjMXRoYkhSQmVHbHpYVHRjYmx4dUlDQWdJSFpoY2lCZmJHVnVJRDBnWVd4MFFYaHBjeUE5UFQwZ0oza25JRDhnSjJobGFXZG9kQ2NnT2lBbmQybGtkR2duTzF4dVhHNGdJQ0FnZG1GeUlGOXRhVzRnUFNCZmIyWm1jMlYwSUNzZ2IzWmxjbVpzYjNkYlgyMWhhVzVUYVdSbFhUdGNibHh1SUNBZ0lIWmhjaUJmYldGNElEMGdYMjltWm5ObGRDQXRJRzkyWlhKbWJHOTNXMTloYkhSVGFXUmxYVHRjYmx4dUlDQWdJSFpoY2lCcGMwOXlhV2RwYmxOcFpHVWdQU0JiZEc5d0xDQnNaV1owWFM1cGJtUmxlRTltS0dKaGMyVlFiR0ZqWlcxbGJuUXBJQ0U5UFNBdE1UdGNibHh1SUNBZ0lIWmhjaUJmYjJabWMyVjBUVzlrYVdacFpYSldZV3gxWlNBOUlDaGZiMlptYzJWMFRXOWthV1pwWlhKVGRHRjBaU1F5SUQwZ2IyWm1jMlYwVFc5a2FXWnBaWEpUZEdGMFpTQTlQU0J1ZFd4c0lEOGdkbTlwWkNBd0lEb2diMlptYzJWMFRXOWthV1pwWlhKVGRHRjBaVnRoYkhSQmVHbHpYU2tnSVQwZ2JuVnNiQ0EvSUY5dlptWnpaWFJOYjJScFptbGxjbE4wWVhSbEpESWdPaUF3TzF4dVhHNGdJQ0FnZG1GeUlGOTBaWFJvWlhKTmFXNGdQU0JwYzA5eWFXZHBibE5wWkdVZ1B5QmZiV2x1SURvZ1gyOW1abk5sZENBdElISmxabVZ5Wlc1alpWSmxZM1JiWDJ4bGJsMGdMU0J3YjNCd1pYSlNaV04wVzE5c1pXNWRJQzBnWDI5bVpuTmxkRTF2WkdsbWFXVnlWbUZzZFdVZ0t5QnViM0p0WVd4cGVtVmtWR1YwYUdWeVQyWm1jMlYwVm1Gc2RXVXVZV3gwUVhocGN6dGNibHh1SUNBZ0lIWmhjaUJmZEdWMGFHVnlUV0Y0SUQwZ2FYTlBjbWxuYVc1VGFXUmxJRDhnWDI5bVpuTmxkQ0FySUhKbFptVnlaVzVqWlZKbFkzUmJYMnhsYmwwZ0t5QndiM0J3WlhKU1pXTjBXMTlzWlc1ZElDMGdYMjltWm5ObGRFMXZaR2xtYVdWeVZtRnNkV1VnTFNCdWIzSnRZV3hwZW1Wa1ZHVjBhR1Z5VDJabWMyVjBWbUZzZFdVdVlXeDBRWGhwY3lBNklGOXRZWGc3WEc1Y2JpQWdJQ0IyWVhJZ1gzQnlaWFpsYm5SbFpFOW1abk5sZENBOUlIUmxkR2hsY2lBbUppQnBjMDl5YVdkcGJsTnBaR1VnUHlCM2FYUm9hVzVOWVhoRGJHRnRjQ2hmZEdWMGFHVnlUV2x1TENCZmIyWm1jMlYwTENCZmRHVjBhR1Z5VFdGNEtTQTZJSGRwZEdocGJpaDBaWFJvWlhJZ1B5QmZkR1YwYUdWeVRXbHVJRG9nWDIxcGJpd2dYMjltWm5ObGRDd2dkR1YwYUdWeUlEOGdYM1JsZEdobGNrMWhlQ0E2SUY5dFlYZ3BPMXh1WEc0Z0lDQWdjRzl3Y0dWeVQyWm1jMlYwYzF0aGJIUkJlR2x6WFNBOUlGOXdjbVYyWlc1MFpXUlBabVp6WlhRN1hHNGdJQ0FnWkdGMFlWdGhiSFJCZUdselhTQTlJRjl3Y21WMlpXNTBaV1JQWm1aelpYUWdMU0JmYjJabWMyVjBPMXh1SUNCOVhHNWNiaUFnYzNSaGRHVXViVzlrYVdacFpYSnpSR0YwWVZ0dVlXMWxYU0E5SUdSaGRHRTdYRzU5SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCcGJYQnZjblF2Ym04dGRXNTFjMlZrTFcxdlpIVnNaWE5jYmx4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJRzVoYldVNklDZHdjbVYyWlc1MFQzWmxjbVpzYjNjbkxGeHVJQ0JsYm1GaWJHVmtPaUIwY25WbExGeHVJQ0J3YUdGelpUb2dKMjFoYVc0bkxGeHVJQ0JtYmpvZ2NISmxkbVZ1ZEU5MlpYSm1iRzkzTEZ4dUlDQnlaWEYxYVhKbGMwbG1SWGhwYzNSek9pQmJKMjltWm5ObGRDZGRYRzU5T3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRFRnNkRUY0YVhNb1lYaHBjeWtnZTF4dUlDQnlaWFIxY200Z1lYaHBjeUE5UFQwZ0ozZ25JRDhnSjNrbklEb2dKM2duTzF4dWZTSXNJbWx0Y0c5eWRDQm5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FnWm5KdmJTQmNJaTR2WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMExtcHpYQ0k3WEc1cGJYQnZjblFnWjJWMFRtOWtaVk5qY205c2JDQm1jbTl0SUZ3aUxpOW5aWFJPYjJSbFUyTnliMnhzTG1welhDSTdYRzVwYlhCdmNuUWdaMlYwVG05a1pVNWhiV1VnWm5KdmJTQmNJaTR2WjJWMFRtOWtaVTVoYldVdWFuTmNJanRjYm1sdGNHOXlkQ0I3SUdselNGUk5URVZzWlcxbGJuUWdmU0JtY205dElGd2lMaTlwYm5OMFlXNWpaVTltTG1welhDSTdYRzVwYlhCdmNuUWdaMlYwVjJsdVpHOTNVMk55YjJ4c1FtRnlXQ0JtY205dElGd2lMaTluWlhSWGFXNWtiM2RUWTNKdmJHeENZWEpZTG1welhDSTdYRzVwYlhCdmNuUWdaMlYwUkc5amRXMWxiblJGYkdWdFpXNTBJR1p5YjIwZ1hDSXVMMmRsZEVSdlkzVnRaVzUwUld4bGJXVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHbHpVMk55YjJ4c1VHRnlaVzUwSUdaeWIyMGdYQ0l1TDJselUyTnliMnhzVUdGeVpXNTBMbXB6WENJN1hHNXBiWEJ2Y25RZ2V5QnliM1Z1WkNCOUlHWnliMjBnWENJdUxpOTFkR2xzY3k5dFlYUm9MbXB6WENJN1hHNWNibVoxYm1OMGFXOXVJR2x6Uld4bGJXVnVkRk5qWVd4bFpDaGxiR1Z0Wlc1MEtTQjdYRzRnSUhaaGNpQnlaV04wSUQwZ1pXeGxiV1Z1ZEM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LVHRjYmlBZ2RtRnlJSE5qWVd4bFdDQTlJSEp2ZFc1a0tISmxZM1F1ZDJsa2RHZ3BJQzhnWld4bGJXVnVkQzV2Wm1aelpYUlhhV1IwYUNCOGZDQXhPMXh1SUNCMllYSWdjMk5oYkdWWklEMGdjbTkxYm1Rb2NtVmpkQzVvWldsbmFIUXBJQzhnWld4bGJXVnVkQzV2Wm1aelpYUklaV2xuYUhRZ2ZId2dNVHRjYmlBZ2NtVjBkWEp1SUhOallXeGxXQ0FoUFQwZ01TQjhmQ0J6WTJGc1pWa2dJVDA5SURFN1hHNTlJQzh2SUZKbGRIVnlibk1nZEdobElHTnZiWEJ2YzJsMFpTQnlaV04wSUc5bUlHRnVJR1ZzWlcxbGJuUWdjbVZzWVhScGRtVWdkRzhnYVhSeklHOW1abk5sZEZCaGNtVnVkQzVjYmk4dklFTnZiWEJ2YzJsMFpTQnRaV0Z1Y3lCcGRDQjBZV3RsY3lCcGJuUnZJR0ZqWTI5MWJuUWdkSEpoYm5ObWIzSnRjeUJoY3lCM1pXeHNJR0Z6SUd4aGVXOTFkQzVjYmx4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCblpYUkRiMjF3YjNOcGRHVlNaV04wS0dWc1pXMWxiblJQY2xacGNuUjFZV3hGYkdWdFpXNTBMQ0J2Wm1aelpYUlFZWEpsYm5Rc0lHbHpSbWw0WldRcElIdGNiaUFnYVdZZ0tHbHpSbWw0WldRZ1BUMDlJSFp2YVdRZ01Da2dlMXh1SUNBZ0lHbHpSbWw0WldRZ1BTQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJwYzA5bVpuTmxkRkJoY21WdWRFRnVSV3hsYldWdWRDQTlJR2x6U0ZSTlRFVnNaVzFsYm5Rb2IyWm1jMlYwVUdGeVpXNTBLVHRjYmlBZ2RtRnlJRzltWm5ObGRGQmhjbVZ1ZEVselUyTmhiR1ZrSUQwZ2FYTklWRTFNUld4bGJXVnVkQ2h2Wm1aelpYUlFZWEpsYm5RcElDWW1JR2x6Uld4bGJXVnVkRk5qWVd4bFpDaHZabVp6WlhSUVlYSmxiblFwTzF4dUlDQjJZWElnWkc5amRXMWxiblJGYkdWdFpXNTBJRDBnWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwS0c5bVpuTmxkRkJoY21WdWRDazdYRzRnSUhaaGNpQnlaV04wSUQwZ1oyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLR1ZzWlcxbGJuUlBjbFpwY25SMVlXeEZiR1Z0Wlc1MExDQnZabVp6WlhSUVlYSmxiblJKYzFOallXeGxaQ2s3WEc0Z0lIWmhjaUJ6WTNKdmJHd2dQU0I3WEc0Z0lDQWdjMk55YjJ4c1RHVm1kRG9nTUN4Y2JpQWdJQ0J6WTNKdmJHeFViM0E2SURCY2JpQWdmVHRjYmlBZ2RtRnlJRzltWm5ObGRITWdQU0I3WEc0Z0lDQWdlRG9nTUN4Y2JpQWdJQ0I1T2lBd1hHNGdJSDA3WEc1Y2JpQWdhV1lnS0dselQyWm1jMlYwVUdGeVpXNTBRVzVGYkdWdFpXNTBJSHg4SUNGcGMwOW1abk5sZEZCaGNtVnVkRUZ1Uld4bGJXVnVkQ0FtSmlBaGFYTkdhWGhsWkNrZ2UxeHVJQ0FnSUdsbUlDaG5aWFJPYjJSbFRtRnRaU2h2Wm1aelpYUlFZWEpsYm5RcElDRTlQU0FuWW05a2VTY2dmSHdnTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzQnZjSEJsY21wekwzQnZjSEJsY2kxamIzSmxMMmx6YzNWbGN5OHhNRGM0WEc0Z0lDQWdhWE5UWTNKdmJHeFFZWEpsYm5Rb1pHOWpkVzFsYm5SRmJHVnRaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2MyTnliMnhzSUQwZ1oyVjBUbTlrWlZOamNtOXNiQ2h2Wm1aelpYUlFZWEpsYm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHBjMGhVVFV4RmJHVnRaVzUwS0c5bVpuTmxkRkJoY21WdWRDa3BJSHRjYmlBZ0lDQWdJRzltWm5ObGRITWdQU0JuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb2IyWm1jMlYwVUdGeVpXNTBMQ0IwY25WbEtUdGNiaUFnSUNBZ0lHOW1abk5sZEhNdWVDQXJQU0J2Wm1aelpYUlFZWEpsYm5RdVkyeHBaVzUwVEdWbWREdGNiaUFnSUNBZ0lHOW1abk5sZEhNdWVTQXJQU0J2Wm1aelpYUlFZWEpsYm5RdVkyeHBaVzUwVkc5d08xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pHOWpkVzFsYm5SRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCdlptWnpaWFJ6TG5nZ1BTQm5aWFJYYVc1a2IzZFRZM0p2Ykd4Q1lYSllLR1J2WTNWdFpXNTBSV3hsYldWdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCNE9pQnlaV04wTG14bFpuUWdLeUJ6WTNKdmJHd3VjMk55YjJ4c1RHVm1kQ0F0SUc5bVpuTmxkSE11ZUN4Y2JpQWdJQ0I1T2lCeVpXTjBMblJ2Y0NBcklITmpjbTlzYkM1elkzSnZiR3hVYjNBZ0xTQnZabVp6WlhSekxua3NYRzRnSUNBZ2QybGtkR2c2SUhKbFkzUXVkMmxrZEdnc1hHNGdJQ0FnYUdWcFoyaDBPaUJ5WldOMExtaGxhV2RvZEZ4dUlDQjlPMXh1ZlNJc0ltbHRjRzl5ZENCblpYUlhhVzVrYjNkVFkzSnZiR3dnWm5KdmJTQmNJaTR2WjJWMFYybHVaRzkzVTJOeWIyeHNMbXB6WENJN1hHNXBiWEJ2Y25RZ1oyVjBWMmx1Wkc5M0lHWnliMjBnWENJdUwyZGxkRmRwYm1SdmR5NXFjMXdpTzF4dWFXMXdiM0owSUhzZ2FYTklWRTFNUld4bGJXVnVkQ0I5SUdaeWIyMGdYQ0l1TDJsdWMzUmhibU5sVDJZdWFuTmNJanRjYm1sdGNHOXlkQ0JuWlhSSVZFMU1SV3hsYldWdWRGTmpjbTlzYkNCbWNtOXRJRndpTGk5blpYUklWRTFNUld4bGJXVnVkRk5qY205c2JDNXFjMXdpTzF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWjJWMFRtOWtaVk5qY205c2JDaHViMlJsS1NCN1hHNGdJR2xtSUNodWIyUmxJRDA5UFNCblpYUlhhVzVrYjNjb2JtOWtaU2tnZkh3Z0lXbHpTRlJOVEVWc1pXMWxiblFvYm05a1pTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1oyVjBWMmx1Wkc5M1UyTnliMnhzS0c1dlpHVXBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSEpsZEhWeWJpQm5aWFJJVkUxTVJXeGxiV1Z1ZEZOamNtOXNiQ2h1YjJSbEtUdGNiaUFnZlZ4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHZGxkRWhVVFV4RmJHVnRaVzUwVTJOeWIyeHNLR1ZzWlcxbGJuUXBJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J6WTNKdmJHeE1aV1owT2lCbGJHVnRaVzUwTG5OamNtOXNiRXhsWm5Rc1hHNGdJQ0FnYzJOeWIyeHNWRzl3T2lCbGJHVnRaVzUwTG5OamNtOXNiRlJ2Y0Z4dUlDQjlPMXh1ZlNJc0ltbHRjRzl5ZENCN0lHMXZaR2xtYVdWeVVHaGhjMlZ6SUgwZ1puSnZiU0JjSWk0dUwyVnVkVzF6TG1welhDSTdJQzh2SUhOdmRYSmpaVG9nYUhSMGNITTZMeTl6ZEdGamEyOTJaWEptYkc5M0xtTnZiUzl4ZFdWemRHbHZibk12TkRrNE56VXlOVFZjYmx4dVpuVnVZM1JwYjI0Z2IzSmtaWElvYlc5a2FXWnBaWEp6S1NCN1hHNGdJSFpoY2lCdFlYQWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lIWmhjaUIyYVhOcGRHVmtJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQjJZWElnY21WemRXeDBJRDBnVzEwN1hHNGdJRzF2WkdsbWFXVnljeTVtYjNKRllXTm9LR1oxYm1OMGFXOXVJQ2h0YjJScFptbGxjaWtnZTF4dUlDQWdJRzFoY0M1elpYUW9iVzlrYVdacFpYSXVibUZ0WlN3Z2JXOWthV1pwWlhJcE8xeHVJQ0I5S1RzZ0x5OGdUMjRnZG1semFYUnBibWNnYjJKcVpXTjBMQ0JqYUdWamF5Qm1iM0lnYVhSeklHUmxjR1Z1WkdWdVkybGxjeUJoYm1RZ2RtbHphWFFnZEdobGJTQnlaV04xY25OcGRtVnNlVnh1WEc0Z0lHWjFibU4wYVc5dUlITnZjblFvYlc5a2FXWnBaWElwSUh0Y2JpQWdJQ0IyYVhOcGRHVmtMbUZrWkNodGIyUnBabWxsY2k1dVlXMWxLVHRjYmlBZ0lDQjJZWElnY21WeGRXbHlaWE1nUFNCYlhTNWpiMjVqWVhRb2JXOWthV1pwWlhJdWNtVnhkV2x5WlhNZ2ZId2dXMTBzSUcxdlpHbG1hV1Z5TG5KbGNYVnBjbVZ6U1daRmVHbHpkSE1nZkh3Z1cxMHBPMXh1SUNBZ0lISmxjWFZwY21WekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHUmxjQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRjJhWE5wZEdWa0xtaGhjeWhrWlhBcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pYQk5iMlJwWm1sbGNpQTlJRzFoY0M1blpYUW9aR1Z3S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWkdWd1RXOWthV1pwWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0J6YjNKMEtHUmxjRTF2WkdsbWFXVnlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsYzNWc2RDNXdkWE5vS0cxdlpHbG1hV1Z5S1R0Y2JpQWdmVnh1WEc0Z0lHMXZaR2xtYVdWeWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHRiMlJwWm1sbGNpa2dlMXh1SUNBZ0lHbG1JQ2doZG1semFYUmxaQzVvWVhNb2JXOWthV1pwWlhJdWJtRnRaU2twSUh0Y2JpQWdJQ0FnSUM4dklHTm9aV05ySUdadmNpQjJhWE5wZEdWa0lHOWlhbVZqZEZ4dUlDQWdJQ0FnYzI5eWRDaHRiMlJwWm1sbGNpazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdiM0prWlhKTmIyUnBabWxsY25Nb2JXOWthV1pwWlhKektTQjdYRzRnSUM4dklHOXlaR1Z5SUdKaGMyVmtJRzl1SUdSbGNHVnVaR1Z1WTJsbGMxeHVJQ0IyWVhJZ2IzSmtaWEpsWkUxdlpHbG1hV1Z5Y3lBOUlHOXlaR1Z5S0cxdlpHbG1hV1Z5Y3lrN0lDOHZJRzl5WkdWeUlHSmhjMlZrSUc5dUlIQm9ZWE5sWEc1Y2JpQWdjbVYwZFhKdUlHMXZaR2xtYVdWeVVHaGhjMlZ6TG5KbFpIVmpaU2htZFc1amRHbHZiaUFvWVdOakxDQndhR0Z6WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJoWTJNdVkyOXVZMkYwS0c5eVpHVnlaV1JOYjJScFptbGxjbk11Wm1sc2RHVnlLR1oxYm1OMGFXOXVJQ2h0YjJScFptbGxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzF2WkdsbWFXVnlMbkJvWVhObElEMDlQU0J3YUdGelpUdGNiaUFnSUNCOUtTazdYRzRnSUgwc0lGdGRLVHRjYm4waUxDSnBiWEJ2Y25RZ1oyVjBRMjl0Y0c5emFYUmxVbVZqZENCbWNtOXRJRndpTGk5a2IyMHRkWFJwYkhNdloyVjBRMjl0Y0c5emFYUmxVbVZqZEM1cWMxd2lPMXh1YVcxd2IzSjBJR2RsZEV4aGVXOTFkRkpsWTNRZ1puSnZiU0JjSWk0dlpHOXRMWFYwYVd4ekwyZGxkRXhoZVc5MWRGSmxZM1F1YW5OY0lqdGNibWx0Y0c5eWRDQnNhWE4wVTJOeWIyeHNVR0Z5Wlc1MGN5Qm1jbTl0SUZ3aUxpOWtiMjB0ZFhScGJITXZiR2x6ZEZOamNtOXNiRkJoY21WdWRITXVhbk5jSWp0Y2JtbHRjRzl5ZENCblpYUlBabVp6WlhSUVlYSmxiblFnWm5KdmJTQmNJaTR2Wkc5dExYVjBhV3h6TDJkbGRFOW1abk5sZEZCaGNtVnVkQzVxYzF3aU8xeHVhVzF3YjNKMElHZGxkRU52YlhCMWRHVmtVM1I1YkdVZ1puSnZiU0JjSWk0dlpHOXRMWFYwYVd4ekwyZGxkRU52YlhCMWRHVmtVM1I1YkdVdWFuTmNJanRjYm1sdGNHOXlkQ0J2Y21SbGNrMXZaR2xtYVdWeWN5Qm1jbTl0SUZ3aUxpOTFkR2xzY3k5dmNtUmxjazF2WkdsbWFXVnljeTVxYzF3aU8xeHVhVzF3YjNKMElHUmxZbTkxYm1ObElHWnliMjBnWENJdUwzVjBhV3h6TDJSbFltOTFibU5sTG1welhDSTdYRzVwYlhCdmNuUWdkbUZzYVdSaGRHVk5iMlJwWm1sbGNuTWdabkp2YlNCY0lpNHZkWFJwYkhNdmRtRnNhV1JoZEdWTmIyUnBabWxsY25NdWFuTmNJanRjYm1sdGNHOXlkQ0IxYm1seGRXVkNlU0JtY205dElGd2lMaTkxZEdsc2N5OTFibWx4ZFdWQ2VTNXFjMXdpTzF4dWFXMXdiM0owSUdkbGRFSmhjMlZRYkdGalpXMWxiblFnWm5KdmJTQmNJaTR2ZFhScGJITXZaMlYwUW1GelpWQnNZV05sYldWdWRDNXFjMXdpTzF4dWFXMXdiM0owSUcxbGNtZGxRbmxPWVcxbElHWnliMjBnWENJdUwzVjBhV3h6TDIxbGNtZGxRbmxPWVcxbExtcHpYQ0k3WEc1cGJYQnZjblFnWkdWMFpXTjBUM1psY21ac2IzY2dabkp2YlNCY0lpNHZkWFJwYkhNdlpHVjBaV04wVDNabGNtWnNiM2N1YW5OY0lqdGNibWx0Y0c5eWRDQjdJR2x6Uld4bGJXVnVkQ0I5SUdaeWIyMGdYQ0l1TDJSdmJTMTFkR2xzY3k5cGJuTjBZVzVqWlU5bUxtcHpYQ0k3WEc1cGJYQnZjblFnZXlCaGRYUnZJSDBnWm5KdmJTQmNJaTR2Wlc1MWJYTXVhbk5jSWp0Y2JuWmhjaUJKVGxaQlRFbEVYMFZNUlUxRlRsUmZSVkpTVDFJZ1BTQW5VRzl3Y0dWeU9pQkpiblpoYkdsa0lISmxabVZ5Wlc1alpTQnZjaUJ3YjNCd1pYSWdZWEpuZFcxbGJuUWdjSEp2ZG1sa1pXUXVJRlJvWlhrZ2JYVnpkQ0JpWlNCbGFYUm9aWElnWVNCRVQwMGdaV3hsYldWdWRDQnZjaUIyYVhKMGRXRnNJR1ZzWlcxbGJuUXVKenRjYm5aaGNpQkpUa1pKVGtsVVJWOU1UMDlRWDBWU1VrOVNJRDBnSjFCdmNIQmxjam9nUVc0Z2FXNW1hVzVwZEdVZ2JHOXZjQ0JwYmlCMGFHVWdiVzlrYVdacFpYSnpJR041WTJ4bElHaGhjeUJpWldWdUlHUmxkR1ZqZEdWa0lTQlVhR1VnWTNsamJHVWdhR0Z6SUdKbFpXNGdhVzUwWlhKeWRYQjBaV1FnZEc4Z2NISmxkbVZ1ZENCaElHSnliM2R6WlhJZ1kzSmhjMmd1Snp0Y2JuWmhjaUJFUlVaQlZVeFVYMDlRVkVsUFRsTWdQU0I3WEc0Z0lIQnNZV05sYldWdWREb2dKMkp2ZEhSdmJTY3NYRzRnSUcxdlpHbG1hV1Z5Y3pvZ1cxMHNYRzRnSUhOMGNtRjBaV2Q1T2lBbllXSnpiMngxZEdVblhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCaGNtVldZV3hwWkVWc1pXMWxiblJ6S0NrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJmYkdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2dZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGZiR1Z1S1N3Z1gydGxlU0E5SURBN0lGOXJaWGtnUENCZmJHVnVPeUJmYTJWNUt5c3BJSHRjYmlBZ0lDQmhjbWR6VzE5clpYbGRJRDBnWVhKbmRXMWxiblJ6VzE5clpYbGRPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJQ0ZoY21kekxuTnZiV1VvWm5WdVkzUnBiMjRnS0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdJU2hsYkdWdFpXNTBJQ1ltSUhSNWNHVnZaaUJsYkdWdFpXNTBMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENBOVBUMGdKMloxYm1OMGFXOXVKeWs3WEc0Z0lIMHBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NHOXdjR1Z5UjJWdVpYSmhkRzl5S0dkbGJtVnlZWFJ2Y2s5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0dkbGJtVnlZWFJ2Y2s5d2RHbHZibk1nUFQwOUlIWnZhV1FnTUNrZ2UxeHVJQ0FnSUdkbGJtVnlZWFJ2Y2s5d2RHbHZibk1nUFNCN2ZUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCZloyVnVaWEpoZEc5eVQzQjBhVzl1Y3lBOUlHZGxibVZ5WVhSdmNrOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNCZloyVnVaWEpoZEc5eVQzQjBhVzl1Y3lSa1pXWWdQU0JmWjJWdVpYSmhkRzl5VDNCMGFXOXVjeTVrWldaaGRXeDBUVzlrYVdacFpYSnpMRnh1SUNBZ0lDQWdaR1ZtWVhWc2RFMXZaR2xtYVdWeWN5QTlJRjluWlc1bGNtRjBiM0pQY0hScGIyNXpKR1JsWmlBOVBUMGdkbTlwWkNBd0lEOGdXMTBnT2lCZloyVnVaWEpoZEc5eVQzQjBhVzl1Y3lSa1pXWXNYRzRnSUNBZ0lDQmZaMlZ1WlhKaGRHOXlUM0IwYVc5dWN5UmtaV1l5SUQwZ1gyZGxibVZ5WVhSdmNrOXdkR2x2Ym5NdVpHVm1ZWFZzZEU5d2RHbHZibk1zWEc0Z0lDQWdJQ0JrWldaaGRXeDBUM0IwYVc5dWN5QTlJRjluWlc1bGNtRjBiM0pQY0hScGIyNXpKR1JsWmpJZ1BUMDlJSFp2YVdRZ01DQS9JRVJGUmtGVlRGUmZUMUJVU1U5T1V5QTZJRjluWlc1bGNtRjBiM0pQY0hScGIyNXpKR1JsWmpJN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmpjbVZoZEdWUWIzQndaWElvY21WbVpYSmxibU5sTENCd2IzQndaWElzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2IzQjBhVzl1Y3lBOVBUMGdkbTlwWkNBd0tTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1eklEMGdaR1ZtWVhWc2RFOXdkR2x2Ym5NN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlITjBZWFJsSUQwZ2UxeHVJQ0FnSUNBZ2NHeGhZMlZ0Wlc1ME9pQW5ZbTkwZEc5dEp5eGNiaUFnSUNBZ0lHOXlaR1Z5WldSTmIyUnBabWxsY25NNklGdGRMRnh1SUNBZ0lDQWdiM0IwYVc5dWN6b2dUMkpxWldOMExtRnpjMmxuYmloN2ZTd2dSRVZHUVZWTVZGOVBVRlJKVDA1VExDQmtaV1poZFd4MFQzQjBhVzl1Y3lrc1hHNGdJQ0FnSUNCdGIyUnBabWxsY25ORVlYUmhPaUI3ZlN4Y2JpQWdJQ0FnSUdWc1pXMWxiblJ6T2lCN1hHNGdJQ0FnSUNBZ0lISmxabVZ5Wlc1alpUb2djbVZtWlhKbGJtTmxMRnh1SUNBZ0lDQWdJQ0J3YjNCd1pYSTZJSEJ2Y0hCbGNseHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHRjBkSEpwWW5WMFpYTTZJSHQ5TEZ4dUlDQWdJQ0FnYzNSNWJHVnpPaUI3ZlZ4dUlDQWdJSDA3WEc0Z0lDQWdkbUZ5SUdWbVptVmpkRU5zWldGdWRYQkdibk1nUFNCYlhUdGNiaUFnSUNCMllYSWdhWE5FWlhOMGNtOTVaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnYVc1emRHRnVZMlVnUFNCN1hHNGdJQ0FnSUNCemRHRjBaVG9nYzNSaGRHVXNYRzRnSUNBZ0lDQnpaWFJQY0hScGIyNXpPaUJtZFc1amRHbHZiaUJ6WlhSUGNIUnBiMjV6S0hObGRFOXdkR2x2Ym5OQlkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzl3ZEdsdmJuTWdQU0IwZVhCbGIyWWdjMlYwVDNCMGFXOXVjMEZqZEdsdmJpQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lITmxkRTl3ZEdsdmJuTkJZM1JwYjI0b2MzUmhkR1V1YjNCMGFXOXVjeWtnT2lCelpYUlBjSFJwYjI1elFXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCamJHVmhiblZ3VFc5a2FXWnBaWEpGWm1abFkzUnpLQ2s3WEc0Z0lDQWdJQ0FnSUhOMFlYUmxMbTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0JrWldaaGRXeDBUM0IwYVc5dWN5d2djM1JoZEdVdWIzQjBhVzl1Y3l3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lITjBZWFJsTG5OamNtOXNiRkJoY21WdWRITWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVm1aWEpsYm1ObE9pQnBjMFZzWlcxbGJuUW9jbVZtWlhKbGJtTmxLU0EvSUd4cGMzUlRZM0p2Ykd4UVlYSmxiblJ6S0hKbFptVnlaVzVqWlNrZ09pQnlaV1psY21WdVkyVXVZMjl1ZEdWNGRFVnNaVzFsYm5RZ1B5QnNhWE4wVTJOeWIyeHNVR0Z5Wlc1MGN5aHlaV1psY21WdVkyVXVZMjl1ZEdWNGRFVnNaVzFsYm5RcElEb2dXMTBzWEc0Z0lDQWdJQ0FnSUNBZ2NHOXdjR1Z5T2lCc2FYTjBVMk55YjJ4c1VHRnlaVzUwY3lod2IzQndaWElwWEc0Z0lDQWdJQ0FnSUgwN0lDOHZJRTl5WkdWeWN5QjBhR1VnYlc5a2FXWnBaWEp6SUdKaGMyVmtJRzl1SUhSb1pXbHlJR1JsY0dWdVpHVnVZMmxsY3lCaGJtUWdZSEJvWVhObFlGeHVJQ0FnSUNBZ0lDQXZMeUJ3Y205d1pYSjBhV1Z6WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRzl5WkdWeVpXUk5iMlJwWm1sbGNuTWdQU0J2Y21SbGNrMXZaR2xtYVdWeWN5aHRaWEpuWlVKNVRtRnRaU2hiWFM1amIyNWpZWFFvWkdWbVlYVnNkRTF2WkdsbWFXVnljeXdnYzNSaGRHVXViM0IwYVc5dWN5NXRiMlJwWm1sbGNuTXBLU2s3SUM4dklGTjBjbWx3SUc5MWRDQmthWE5oWW14bFpDQnRiMlJwWm1sbGNuTmNibHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTNXZjbVJsY21Wa1RXOWthV1pwWlhKeklEMGdiM0prWlhKbFpFMXZaR2xtYVdWeWN5NW1hV3gwWlhJb1puVnVZM1JwYjI0Z0tHMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlM1bGJtRmliR1ZrTzF4dUlDQWdJQ0FnSUNCOUtUc2dMeThnVm1Gc2FXUmhkR1VnZEdobElIQnliM1pwWkdWa0lHMXZaR2xtYVdWeWN5QnpieUIwYUdGMElIUm9aU0JqYjI1emRXMWxjaUIzYVd4c0lHZGxkQ0IzWVhKdVpXUmNiaUFnSUNBZ0lDQWdMeThnYVdZZ2IyNWxJRzltSUhSb1pTQnRiMlJwWm1sbGNuTWdhWE1nYVc1MllXeHBaQ0JtYjNJZ1lXNTVJSEpsWVhOdmJseHVYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnWENKd2NtOWtkV04wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdiVzlrYVdacFpYSnpJRDBnZFc1cGNYVmxRbmtvVzEwdVkyOXVZMkYwS0c5eVpHVnlaV1JOYjJScFptbGxjbk1zSUhOMFlYUmxMbTl3ZEdsdmJuTXViVzlrYVdacFpYSnpLU3dnWm5WdVkzUnBiMjRnS0Y5eVpXWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ1WVcxbElEMGdYM0psWmk1dVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdkbUZzYVdSaGRHVk5iMlJwWm1sbGNuTW9iVzlrYVdacFpYSnpLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2huWlhSQ1lYTmxVR3hoWTJWdFpXNTBLSE4wWVhSbExtOXdkR2x2Ym5NdWNHeGhZMlZ0Wlc1MEtTQTlQVDBnWVhWMGJ5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1pzYVhCTmIyUnBabWxsY2lBOUlITjBZWFJsTG05eVpHVnlaV1JOYjJScFptbGxjbk11Wm1sdVpDaG1kVzVqZEdsdmJpQW9YM0psWmpJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzVoYldVZ1BTQmZjbVZtTWk1dVlXMWxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtRnRaU0E5UFQwZ0oyWnNhWEFuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpteHBjRTF2WkdsbWFXVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1d5ZFFiM0J3WlhJNklGd2lZWFYwYjF3aUlIQnNZV05sYldWdWRITWdjbVZ4ZFdseVpTQjBhR1VnWENKbWJHbHdYQ0lnYlc5a2FXWnBaWElnWW1VbkxDQW5jSEpsYzJWdWRDQmhibVFnWlc1aFlteGxaQ0IwYnlCM2IzSnJMaWRkTG1wdmFXNG9KeUFuS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlGOW5aWFJEYjIxd2RYUmxaRk4wZVd4bElEMGdaMlYwUTI5dGNIVjBaV1JUZEhsc1pTaHdiM0J3WlhJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYSm5hVzVVYjNBZ1BTQmZaMlYwUTI5dGNIVjBaV1JUZEhsc1pTNXRZWEpuYVc1VWIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmxKcFoyaDBJRDBnWDJkbGRFTnZiWEIxZEdWa1UzUjViR1V1YldGeVoybHVVbWxuYUhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGNtZHBia0p2ZEhSdmJTQTlJRjluWlhSRGIyMXdkWFJsWkZOMGVXeGxMbTFoY21kcGJrSnZkSFJ2YlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVUR1ZtZENBOUlGOW5aWFJEYjIxd2RYUmxaRk4wZVd4bExtMWhjbWRwYmt4bFpuUTdJQzh2SUZkbElHNXZJR3h2Ym1kbGNpQjBZV3RsSUdsdWRHOGdZV05qYjNWdWRDQmdiV0Z5WjJsdWMyQWdiMjRnZEdobElIQnZjSEJsY2l3Z1lXNWtJR2wwSUdOaGJseHVJQ0FnSUNBZ0lDQWdJQzh2SUdOaGRYTmxJR0oxWjNNZ2QybDBhQ0J3YjNOcGRHbHZibWx1Wnl3Z2MyOGdkMlVuYkd3Z2QyRnliaUIwYUdVZ1kyOXVjM1Z0WlhKY2JseHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGdHRZWEpuYVc1VWIzQXNJRzFoY21kcGJsSnBaMmgwTENCdFlYSm5hVzVDYjNSMGIyMHNJRzFoY21kcGJreGxablJkTG5OdmJXVW9ablZ1WTNScGIyNGdLRzFoY21kcGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCaGNuTmxSbXh2WVhRb2JXRnlaMmx1S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0ZzblVHOXdjR1Z5T2lCRFUxTWdYQ0p0WVhKbmFXNWNJaUJ6ZEhsc1pYTWdZMkZ1Ym05MElHSmxJSFZ6WldRZ2RHOGdZWEJ3YkhrZ2NHRmtaR2x1Wnljc0lDZGlaWFIzWldWdUlIUm9aU0J3YjNCd1pYSWdZVzVrSUdsMGN5QnlaV1psY21WdVkyVWdaV3hsYldWdWRDQnZjaUJpYjNWdVpHRnllUzRuTENBblZHOGdjbVZ3YkdsallYUmxJRzFoY21kcGJpd2dkWE5sSUhSb1pTQmdiMlptYzJWMFlDQnRiMlJwWm1sbGNpd2dZWE1nZDJWc2JDQmhjeWNzSUNkMGFHVWdZSEJoWkdScGJtZGdJRzl3ZEdsdmJpQnBiaUIwYUdVZ1lIQnlaWFpsYm5SUGRtVnlabXh2ZDJBZ1lXNWtJR0JtYkdsd1lDY3NJQ2R0YjJScFptbGxjbk11SjEwdWFtOXBiaWduSUNjcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlkVzVOYjJScFptbGxja1ZtWm1WamRITW9LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1YzNSaGJtTmxMblZ3WkdGMFpTZ3BPMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQzh2SUZONWJtTWdkWEJrWVhSbElPS0FreUJwZENCM2FXeHNJR0ZzZDJGNWN5QmlaU0JsZUdWamRYUmxaQ3dnWlhabGJpQnBaaUJ1YjNRZ2JtVmpaWE56WVhKNUxpQlVhR2x6WEc0Z0lDQWdJQ0F2THlCcGN5QjFjMlZtZFd3Z1ptOXlJR3h2ZHlCbWNtVnhkV1Z1WTNrZ2RYQmtZWFJsY3lCM2FHVnlaU0J6ZVc1aklHSmxhR0YyYVc5eUlITnBiWEJzYVdacFpYTWdkR2hsWEc0Z0lDQWdJQ0F2THlCc2IyZHBZeTVjYmlBZ0lDQWdJQzh2SUVadmNpQm9hV2RvSUdaeVpYRjFaVzVqZVNCMWNHUmhkR1Z6SUNobExtY3VJR0J5WlhOcGVtVmdJR0Z1WkNCZ2MyTnliMnhzWUNCbGRtVnVkSE1wTENCaGJIZGhlWE5jYmlBZ0lDQWdJQzh2SUhCeVpXWmxjaUIwYUdVZ1lYTjVibU1nVUc5d2NHVnlJM1Z3WkdGMFpTQnRaWFJvYjJSY2JpQWdJQ0FnSUdadmNtTmxWWEJrWVhSbE9pQm1kVzVqZEdsdmJpQm1iM0pqWlZWd1pHRjBaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlGOXpkR0YwWlNSbGJHVnRaVzUwY3lBOUlITjBZWFJsTG1Wc1pXMWxiblJ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZtWlhKbGJtTmxJRDBnWDNOMFlYUmxKR1ZzWlcxbGJuUnpMbkpsWm1WeVpXNWpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjSEJsY2lBOUlGOXpkR0YwWlNSbGJHVnRaVzUwY3k1d2IzQndaWEk3SUM4dklFUnZiaWQwSUhCeWIyTmxaV1FnYVdZZ1lISmxabVZ5Wlc1alpXQWdiM0lnWUhCdmNIQmxjbUFnWVhKbElHNXZkQ0IyWVd4cFpDQmxiR1Z0Wlc1MGMxeHVJQ0FnSUNBZ0lDQXZMeUJoYm5sdGIzSmxYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmhjbVZXWVd4cFpFVnNaVzFsYm5SektISmxabVZ5Wlc1alpTd2djRzl3Y0dWeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ1hDSndjbTlrZFdOMGFXOXVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1NVNVdRVXhKUkY5RlRFVk5SVTVVWDBWU1VrOVNLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDBnTHk4Z1UzUnZjbVVnZEdobElISmxabVZ5Wlc1alpTQmhibVFnY0c5d2NHVnlJSEpsWTNSeklIUnZJR0psSUhKbFlXUWdZbmtnYlc5a2FXWnBaWEp6WEc1Y2JseHVJQ0FnSUNBZ0lDQnpkR0YwWlM1eVpXTjBjeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV1psY21WdVkyVTZJR2RsZEVOdmJYQnZjMmwwWlZKbFkzUW9jbVZtWlhKbGJtTmxMQ0JuWlhSUFptWnpaWFJRWVhKbGJuUW9jRzl3Y0dWeUtTd2djM1JoZEdVdWIzQjBhVzl1Y3k1emRISmhkR1ZuZVNBOVBUMGdKMlpwZUdWa0p5a3NYRzRnSUNBZ0lDQWdJQ0FnY0c5d2NHVnlPaUJuWlhSTVlYbHZkWFJTWldOMEtIQnZjSEJsY2lsY2JpQWdJQ0FnSUNBZ2ZUc2dMeThnVFc5a2FXWnBaWEp6SUdoaGRtVWdkR2hsSUdGaWFXeHBkSGtnZEc4Z2NtVnpaWFFnZEdobElHTjFjbkpsYm5RZ2RYQmtZWFJsSUdONVkyeGxMaUJVYUdWY2JpQWdJQ0FnSUNBZ0x5OGdiVzl6ZENCamIyMXRiMjRnZFhObElHTmhjMlVnWm05eUlIUm9hWE1nYVhNZ2RHaGxJR0JtYkdsd1lDQnRiMlJwWm1sbGNpQmphR0Z1WjJsdVp5QjBhR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2NHeGhZMlZ0Wlc1MExDQjNhR2xqYUNCMGFHVnVJRzVsWldSeklIUnZJSEpsTFhKMWJpQmhiR3dnZEdobElHMXZaR2xtYVdWeWN5d2dZbVZqWVhWelpTQjBhR1ZjYmlBZ0lDQWdJQ0FnTHk4Z2JHOW5hV01nZDJGeklIQnlaWFpwYjNWemJIa2djbUZ1SUdadmNpQjBhR1VnY0hKbGRtbHZkWE1nY0d4aFkyVnRaVzUwSUdGdVpDQnBjeUIwYUdWeVpXWnZjbVZjYmlBZ0lDQWdJQ0FnTHk4Z2MzUmhiR1V2YVc1amIzSnlaV04wWEc1Y2JpQWdJQ0FnSUNBZ2MzUmhkR1V1Y21WelpYUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdjM1JoZEdVdWNHeGhZMlZ0Wlc1MElEMGdjM1JoZEdVdWIzQjBhVzl1Y3k1d2JHRmpaVzFsYm5RN0lDOHZJRTl1SUdWaFkyZ2dkWEJrWVhSbElHTjVZMnhsTENCMGFHVWdZRzF2WkdsbWFXVnljMFJoZEdGZ0lIQnliM0JsY25SNUlHWnZjaUJsWVdOb0lHMXZaR2xtYVdWeVhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUdacGJHeGxaQ0IzYVhSb0lIUm9aU0JwYm1sMGFXRnNJR1JoZEdFZ2MzQmxZMmxtYVdWa0lHSjVJSFJvWlNCdGIyUnBabWxsY2k0Z1ZHaHBjeUJ0WldGdWMxeHVJQ0FnSUNBZ0lDQXZMeUJwZENCa2IyVnpiaWQwSUhCbGNuTnBjM1FnWVc1a0lHbHpJR1p5WlhOb0lHOXVJR1ZoWTJnZ2RYQmtZWFJsTGx4dUlDQWdJQ0FnSUNBdkx5QlVieUJsYm5OMWNtVWdjR1Z5YzJsemRHVnVkQ0JrWVhSaExDQjFjMlVnWUNSN2JtRnRaWDBqY0dWeWMybHpkR1Z1ZEdCY2JseHVJQ0FnSUNBZ0lDQnpkR0YwWlM1dmNtUmxjbVZrVFc5a2FXWnBaWEp6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0cxdlpHbG1hV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjBZWFJsTG0xdlpHbG1hV1Z5YzBSaGRHRmJiVzlrYVdacFpYSXVibUZ0WlYwZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQnRiMlJwWm1sbGNpNWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFpoY2lCZlgyUmxZblZuWDJ4dmIzQnpYMThnUFNBd08xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2x1WkdWNElEMGdNRHNnYVc1a1pYZ2dQQ0J6ZEdGMFpTNXZjbVJsY21Wa1RXOWthV1pwWlhKekxteGxibWQwYURzZ2FXNWtaWGdyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnWENKd2NtOWtkV04wYVc5dVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOWZaR1ZpZFdkZmJHOXZjSE5mWHlBclBTQXhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWDE5a1pXSjFaMTlzYjI5d2MxOWZJRDRnTVRBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvU1U1R1NVNUpWRVZmVEU5UFVGOUZVbEpQVWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNXlaWE5sZENBOVBUMGdkSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVXVjbVZ6WlhRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnWDNOMFlYUmxKRzl5WkdWeVpXUk5iMlJwWm1sbElEMGdjM1JoZEdVdWIzSmtaWEpsWkUxdlpHbG1hV1Z5YzF0cGJtUmxlRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1p1SUQwZ1gzTjBZWFJsSkc5eVpHVnlaV1JOYjJScFptbGxMbVp1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmYzNSaGRHVWtiM0prWlhKbFpFMXZaR2xtYVdVeUlEMGdYM04wWVhSbEpHOXlaR1Z5WldSTmIyUnBabWxsTG05d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjl2Y0hScGIyNXpJRDBnWDNOMFlYUmxKRzl5WkdWeVpXUk5iMlJwWm1sbE1pQTlQVDBnZG05cFpDQXdJRDhnZTMwZ09pQmZjM1JoZEdVa2IzSmtaWEpsWkUxdlpHbG1hV1V5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbElEMGdYM04wWVhSbEpHOXlaR1Z5WldSTmIyUnBabWxsTG01aGJXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHWnVJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUdadUtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1U2SUhOMFlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQmZiM0IwYVc5dWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nYm1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJVNklHbHVjM1JoYm1ObFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1NCOGZDQnpkR0YwWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlCQmMzbHVZeUJoYm1RZ2IzQjBhVzFwYzNScFkyRnNiSGtnYjNCMGFXMXBlbVZrSUhWd1pHRjBaU0RpZ0pNZ2FYUWdkMmxzYkNCdWIzUWdZbVVnWlhobFkzVjBaV1FnYVdaY2JpQWdJQ0FnSUM4dklHNXZkQ0J1WldObGMzTmhjbmtnS0dSbFltOTFibU5sWkNCMGJ5QnlkVzRnWVhRZ2JXOXpkQ0J2Ym1ObExYQmxjaTEwYVdOcktWeHVJQ0FnSUNBZ2RYQmtZWFJsT2lCa1pXSnZkVzVqWlNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaUFvY21WemIyeDJaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1ObExtWnZjbU5sVlhCa1lYUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoemRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQmtaWE4wY205NU9pQm1kVzVqZEdsdmJpQmtaWE4wY205NUtDa2dlMXh1SUNBZ0lDQWdJQ0JqYkdWaGJuVndUVzlrYVdacFpYSkZabVpsWTNSektDazdYRzRnSUNBZ0lDQWdJR2x6UkdWemRISnZlV1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0NGaGNtVldZV3hwWkVWc1pXMWxiblJ6S0hKbFptVnlaVzVqWlN3Z2NHOXdjR1Z5S1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUNFOVBTQmNJbkJ5YjJSMVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0VsT1ZrRk1TVVJmUlV4RlRVVk9WRjlGVWxKUFVpazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnBibk4wWVc1alpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcGJuTjBZVzVqWlM1elpYUlBjSFJwYjI1ektHOXdkR2x2Ym5NcExuUm9aVzRvWm5WdVkzUnBiMjRnS0hOMFlYUmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb0lXbHpSR1Z6ZEhKdmVXVmtJQ1ltSUc5d2RHbHZibk11YjI1R2FYSnpkRlZ3WkdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbTl1Um1seWMzUlZjR1JoZEdVb2MzUmhkR1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwT3lBdkx5Qk5iMlJwWm1sbGNuTWdhR0YyWlNCMGFHVWdZV0pwYkdsMGVTQjBieUJsZUdWamRYUmxJR0Z5WW1sMGNtRnllU0JqYjJSbElHSmxabTl5WlNCMGFHVWdabWx5YzNSY2JpQWdJQ0F2THlCMWNHUmhkR1VnWTNsamJHVWdjblZ1Y3k0Z1ZHaGxlU0IzYVd4c0lHSmxJR1Y0WldOMWRHVmtJR2x1SUhSb1pTQnpZVzFsSUc5eVpHVnlJR0Z6SUhSb1pTQjFjR1JoZEdWY2JpQWdJQ0F2THlCamVXTnNaUzRnVkdocGN5QnBjeUIxYzJWbWRXd2dkMmhsYmlCaElHMXZaR2xtYVdWeUlHRmtaSE1nYzI5dFpTQndaWEp6YVhOMFpXNTBJR1JoZEdFZ2RHaGhkRnh1SUNBZ0lDOHZJRzkwYUdWeUlHMXZaR2xtYVdWeWN5QnVaV1ZrSUhSdklIVnpaU3dnWW5WMElIUm9aU0J0YjJScFptbGxjaUJwY3lCeWRXNGdZV1owWlhJZ2RHaGxJR1JsY0dWdVpHVnVkRnh1SUNBZ0lDOHZJRzl1WlM1Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhKMWJrMXZaR2xtYVdWeVJXWm1aV04wY3lncElIdGNiaUFnSUNBZ0lITjBZWFJsTG05eVpHVnlaV1JOYjJScFptbGxjbk11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWDNKbFpqTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNWhiV1VnUFNCZmNtVm1NeTV1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNKbFpqTWtiM0IwYVc5dWN5QTlJRjl5WldZekxtOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpJRDBnWDNKbFpqTWtiM0IwYVc5dWN5QTlQVDBnZG05cFpDQXdJRDhnZTMwZ09pQmZjbVZtTXlSdmNIUnBiMjV6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV1ptWldOMElEMGdYM0psWmpNdVpXWm1aV04wTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdaV1ptWldOMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdOc1pXRnVkWEJHYmlBOUlHVm1abVZqZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMFpUb2djM1JoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQnVZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVTZJR2x1YzNSaGJtTmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJRzV2YjNCR2JpQTlJR1oxYm1OMGFXOXVJRzV2YjNCR2JpZ3BJSHQ5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdaV1ptWldOMFEyeGxZVzUxY0VadWN5NXdkWE5vS0dOc1pXRnVkWEJHYmlCOGZDQnViMjl3Um00cE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiR1ZoYm5Wd1RXOWthV1pwWlhKRlptWmxZM1J6S0NrZ2UxeHVJQ0FnSUNBZ1pXWm1aV04wUTJ4bFlXNTFjRVp1Y3k1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobWJpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabTRvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ1pXWm1aV04wUTJ4bFlXNTFjRVp1Y3lBOUlGdGRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCcGJuTjBZVzVqWlR0Y2JpQWdmVHRjYm4xY2JtVjRjRzl5ZENCMllYSWdZM0psWVhSbFVHOXdjR1Z5SUQwZ0x5b2pYMTlRVlZKRlgxOHFMM0J2Y0hCbGNrZGxibVZ5WVhSdmNpZ3BPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYVcxd2IzSjBMMjV2TFhWdWRYTmxaQzF0YjJSMWJHVnpYRzVjYm1WNGNHOXlkQ0I3SUdSbGRHVmpkRTkyWlhKbWJHOTNJSDA3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWkdWaWIzVnVZMlVvWm00cElIdGNiaUFnZG1GeUlIQmxibVJwYm1jN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0NGd1pXNWthVzVuS1NCN1hHNGdJQ0FnSUNCd1pXNWthVzVuSUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNGdLSEpsYzI5c2RtVXBJSHRjYmlBZ0lDQWdJQ0FnVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NHVnVaR2x1WnlBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR1p1S0NrcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQndaVzVrYVc1bk8xeHVJQ0I5TzF4dWZTSXNJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHMWxjbWRsUW5sT1lXMWxLRzF2WkdsbWFXVnljeWtnZTF4dUlDQjJZWElnYldWeVoyVmtJRDBnYlc5a2FXWnBaWEp6TG5KbFpIVmpaU2htZFc1amRHbHZiaUFvYldWeVoyVmtMQ0JqZFhKeVpXNTBLU0I3WEc0Z0lDQWdkbUZ5SUdWNGFYTjBhVzVuSUQwZ2JXVnlaMlZrVzJOMWNuSmxiblF1Ym1GdFpWMDdYRzRnSUNBZ2JXVnlaMlZrVzJOMWNuSmxiblF1Ym1GdFpWMGdQU0JsZUdsemRHbHVaeUEvSUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdWNGFYTjBhVzVuTENCamRYSnlaVzUwTENCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6T2lCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCbGVHbHpkR2x1Wnk1dmNIUnBiMjV6TENCamRYSnlaVzUwTG05d2RHbHZibk1wTEZ4dUlDQWdJQ0FnWkdGMFlUb2dUMkpxWldOMExtRnpjMmxuYmloN2ZTd2daWGhwYzNScGJtY3VaR0YwWVN3Z1kzVnljbVZ1ZEM1a1lYUmhLVnh1SUNBZ0lIMHBJRG9nWTNWeWNtVnVkRHRjYmlBZ0lDQnlaWFIxY200Z2JXVnlaMlZrTzF4dUlDQjlMQ0I3ZlNrN0lDOHZJRWxGTVRFZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCUFltcGxZM1F1ZG1Gc2RXVnpYRzVjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektHMWxjbWRsWkNrdWJXRndLR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnSUNCeVpYUjFjbTRnYldWeVoyVmtXMnRsZVYwN1hHNGdJSDBwTzF4dWZTSXNJbWx0Y0c5eWRDQjdJSEJ2Y0hCbGNrZGxibVZ5WVhSdmNpd2daR1YwWldOMFQzWmxjbVpzYjNjZ2ZTQm1jbTl0SUZ3aUxpOWpjbVZoZEdWUWIzQndaWEl1YW5OY0lqdGNibWx0Y0c5eWRDQmxkbVZ1ZEV4cGMzUmxibVZ5Y3lCbWNtOXRJRndpTGk5dGIyUnBabWxsY25NdlpYWmxiblJNYVhOMFpXNWxjbk11YW5OY0lqdGNibWx0Y0c5eWRDQndiM0J3WlhKUFptWnpaWFJ6SUdaeWIyMGdYQ0l1TDIxdlpHbG1hV1Z5Y3k5d2IzQndaWEpQWm1aelpYUnpMbXB6WENJN1hHNXBiWEJ2Y25RZ1kyOXRjSFYwWlZOMGVXeGxjeUJtY205dElGd2lMaTl0YjJScFptbGxjbk12WTI5dGNIVjBaVk4wZVd4bGN5NXFjMXdpTzF4dWFXMXdiM0owSUdGd2NHeDVVM1I1YkdWeklHWnliMjBnWENJdUwyMXZaR2xtYVdWeWN5OWhjSEJzZVZOMGVXeGxjeTVxYzF3aU8xeHVhVzF3YjNKMElHOW1abk5sZENCbWNtOXRJRndpTGk5dGIyUnBabWxsY25NdmIyWm1jMlYwTG1welhDSTdYRzVwYlhCdmNuUWdabXhwY0NCbWNtOXRJRndpTGk5dGIyUnBabWxsY25NdlpteHBjQzVxYzF3aU8xeHVhVzF3YjNKMElIQnlaWFpsYm5SUGRtVnlabXh2ZHlCbWNtOXRJRndpTGk5dGIyUnBabWxsY25NdmNISmxkbVZ1ZEU5MlpYSm1iRzkzTG1welhDSTdYRzVwYlhCdmNuUWdZWEp5YjNjZ1puSnZiU0JjSWk0dmJXOWthV1pwWlhKekwyRnljbTkzTG1welhDSTdYRzVwYlhCdmNuUWdhR2xrWlNCbWNtOXRJRndpTGk5dGIyUnBabWxsY25NdmFHbGtaUzVxYzF3aU8xeHVkbUZ5SUdSbFptRjFiSFJOYjJScFptbGxjbk1nUFNCYlpYWmxiblJNYVhOMFpXNWxjbk1zSUhCdmNIQmxjazltWm5ObGRITXNJR052YlhCMWRHVlRkSGxzWlhNc0lHRndjR3g1VTNSNWJHVnpMQ0J2Wm1aelpYUXNJR1pzYVhBc0lIQnlaWFpsYm5SUGRtVnlabXh2ZHl3Z1lYSnliM2NzSUdocFpHVmRPMXh1ZG1GeUlHTnlaV0YwWlZCdmNIQmxjaUE5SUM4cUkxOWZVRlZTUlY5ZktpOXdiM0J3WlhKSFpXNWxjbUYwYjNJb2UxeHVJQ0JrWldaaGRXeDBUVzlrYVdacFpYSnpPaUJrWldaaGRXeDBUVzlrYVdacFpYSnpYRzU5S1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHbHRjRzl5ZEM5dWJ5MTFiblZ6WldRdGJXOWtkV3hsYzF4dVhHNWxlSEJ2Y25RZ2V5QmpjbVZoZEdWUWIzQndaWElzSUhCdmNIQmxja2RsYm1WeVlYUnZjaXdnWkdWbVlYVnNkRTF2WkdsbWFXVnljeXdnWkdWMFpXTjBUM1psY21ac2IzY2dmVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdsdGNHOXlkQzl1YnkxMWJuVnpaV1F0Ylc5a2RXeGxjMXh1WEc1bGVIQnZjblFnZXlCamNtVmhkR1ZRYjNCd1pYSWdZWE1nWTNKbFlYUmxVRzl3Y0dWeVRHbDBaU0I5SUdaeWIyMGdYQ0l1TDNCdmNIQmxjaTFzYVhSbExtcHpYQ0k3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCcGJYQnZjblF2Ym04dGRXNTFjMlZrTFcxdlpIVnNaWE5jYmx4dVpYaHdiM0owSUNvZ1puSnZiU0JjSWk0dmJXOWthV1pwWlhKekwybHVaR1Y0TG1welhDSTdJaXdpYVcxd2IzSjBJSHNnY0c5d2NHVnlSMlZ1WlhKaGRHOXlMQ0JrWlhSbFkzUlBkbVZ5Wm14dmR5QjlJR1p5YjIwZ1hDSXVMMk55WldGMFpWQnZjSEJsY2k1cWMxd2lPMXh1YVcxd2IzSjBJR1YyWlc1MFRHbHpkR1Z1WlhKeklHWnliMjBnWENJdUwyMXZaR2xtYVdWeWN5OWxkbVZ1ZEV4cGMzUmxibVZ5Y3k1cWMxd2lPMXh1YVcxd2IzSjBJSEJ2Y0hCbGNrOW1abk5sZEhNZ1puSnZiU0JjSWk0dmJXOWthV1pwWlhKekwzQnZjSEJsY2s5bVpuTmxkSE11YW5OY0lqdGNibWx0Y0c5eWRDQmpiMjF3ZFhSbFUzUjViR1Z6SUdaeWIyMGdYQ0l1TDIxdlpHbG1hV1Z5Y3k5amIyMXdkWFJsVTNSNWJHVnpMbXB6WENJN1hHNXBiWEJ2Y25RZ1lYQndiSGxUZEhsc1pYTWdabkp2YlNCY0lpNHZiVzlrYVdacFpYSnpMMkZ3Y0d4NVUzUjViR1Z6TG1welhDSTdYRzUyWVhJZ1pHVm1ZWFZzZEUxdlpHbG1hV1Z5Y3lBOUlGdGxkbVZ1ZEV4cGMzUmxibVZ5Y3l3Z2NHOXdjR1Z5VDJabWMyVjBjeXdnWTI5dGNIVjBaVk4wZVd4bGN5d2dZWEJ3YkhsVGRIbHNaWE5kTzF4dWRtRnlJR055WldGMFpWQnZjSEJsY2lBOUlDOHFJMTlmVUZWU1JWOWZLaTl3YjNCd1pYSkhaVzVsY21GMGIzSW9lMXh1SUNCa1pXWmhkV3gwVFc5a2FXWnBaWEp6T2lCa1pXWmhkV3gwVFc5a2FXWnBaWEp6WEc1OUtUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR2x0Y0c5eWRDOXVieTExYm5WelpXUXRiVzlrZFd4bGMxeHVYRzVsZUhCdmNuUWdleUJqY21WaGRHVlFiM0J3WlhJc0lIQnZjSEJsY2tkbGJtVnlZWFJ2Y2l3Z1pHVm1ZWFZzZEUxdlpHbG1hV1Z5Y3l3Z1pHVjBaV04wVDNabGNtWnNiM2NnZlRzaUxDSXZLaUZjYmlBZ0tpQkNiMjkwYzNSeVlYQWdkalV1TVM0eklDaG9kSFJ3Y3pvdkwyZGxkR0p2YjNSemRISmhjQzVqYjIwdktWeHVJQ0FxSUVOdmNIbHlhV2RvZENBeU1ERXhMVEl3TWpFZ1ZHaGxJRUp2YjNSemRISmhjQ0JCZFhSb2IzSnpJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEhkaWN5OWliMjkwYzNSeVlYQXZaM0poY0doekwyTnZiblJ5YVdKMWRHOXljeWxjYmlBZ0tpQk1hV05sYm5ObFpDQjFibVJsY2lCTlNWUWdLR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwZDJKekwySnZiM1J6ZEhKaGNDOWliRzlpTDIxaGFXNHZURWxEUlU1VFJTbGNiaUFnS2k5Y2JtbHRjRzl5ZENBcUlHRnpJRkJ2Y0hCbGNpQm1jbTl0SUNkQWNHOXdjR1Z5YW5NdlkyOXlaU2M3WEc1Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVKdmIzUnpkSEpoY0NBb2RqVXVNUzR6S1RvZ2RYUnBiQzlwYm1SbGVDNXFjMXh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnVFVsVUlDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkSGRpY3k5aWIyOTBjM1J5WVhBdllteHZZaTl0WVdsdUwweEpRMFZPVTBVcFhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVqYjI1emRDQk5RVmhmVlVsRUlEMGdNVEF3TURBd01EdGNibU52Ym5OMElFMUpURXhKVTBWRFQwNUVVMTlOVlV4VVNWQk1TVVZTSUQwZ01UQXdNRHRjYm1OdmJuTjBJRlJTUVU1VFNWUkpUMDVmUlU1RUlEMGdKM1J5WVc1emFYUnBiMjVsYm1Rbk95QXZMeUJUYUc5MWRHOTFkQ0JCYm1kMWMwTnliMnhzSUNob2RIUndjem92TDJkdmJ5NW5iQzl3ZUhkUlIzQXBYRzVjYm1OdmJuTjBJSFJ2Vkhsd1pTQTlJRzlpYWlBOVBpQjdYRzRnSUdsbUlDaHZZbW9nUFQwOUlHNTFiR3dnZkh3Z2IySnFJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCeVpYUjFjbTRnWUNSN2IySnFmV0E3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnZTMwdWRHOVRkSEpwYm1jdVkyRnNiQ2h2WW1vcExtMWhkR05vS0M5Y1hITW9XMkV0ZWwwcktTOXBLVnN4WFM1MGIweHZkMlZ5UTJGelpTZ3BPMXh1ZlR0Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUZCMVlteHBZeUJWZEdsc0lFRndhVnh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNWNibU52Ym5OMElHZGxkRlZKUkNBOUlIQnlaV1pwZUNBOVBpQjdYRzRnSUdSdklIdGNiaUFnSUNCd2NtVm1hWGdnS3owZ1RXRjBhQzVtYkc5dmNpaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ1RVRllYMVZKUkNrN1hHNGdJSDBnZDJocGJHVWdLR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tIQnlaV1pwZUNrcE8xeHVYRzRnSUhKbGRIVnliaUJ3Y21WbWFYZzdYRzU5TzF4dVhHNWpiMjV6ZENCblpYUlRaV3hsWTNSdmNpQTlJR1ZzWlcxbGJuUWdQVDRnZTF4dUlDQnNaWFFnYzJWc1pXTjBiM0lnUFNCbGJHVnRaVzUwTG1kbGRFRjBkSEpwWW5WMFpTZ25aR0YwWVMxaWN5MTBZWEpuWlhRbktUdGNibHh1SUNCcFppQW9JWE5sYkdWamRHOXlJSHg4SUhObGJHVmpkRzl5SUQwOVBTQW5JeWNwSUh0Y2JpQWdJQ0JzWlhRZ2FISmxaa0YwZEhJZ1BTQmxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2duYUhKbFppY3BPeUF2THlCVWFHVWdiMjVzZVNCMllXeHBaQ0JqYjI1MFpXNTBJSFJvWVhRZ1kyOTFiR1FnWkc5MVlteGxJR0Z6SUdFZ2MyVnNaV04wYjNJZ1lYSmxJRWxFY3lCdmNpQmpiR0Z6YzJWekxGeHVJQ0FnSUM4dklITnZJR1YyWlhKNWRHaHBibWNnYzNSaGNuUnBibWNnZDJsMGFDQmdJMkFnYjNJZ1lDNWdMaUJKWmlCaElGd2ljbVZoYkZ3aUlGVlNUQ0JwY3lCMWMyVmtJR0Z6SUhSb1pTQnpaV3hsWTNSdmNpeGNiaUFnSUNBdkx5QmdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y21BZ2QybHNiQ0J5YVdkb2RHWjFiR3g1SUdOdmJYQnNZV2x1SUdsMElHbHpJR2x1ZG1Gc2FXUXVYRzRnSUNBZ0x5OGdVMlZsSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGQySnpMMkp2YjNSemRISmhjQzlwYzNOMVpYTXZNekl5TnpOY2JseHVJQ0FnSUdsbUlDZ2hhSEpsWmtGMGRISWdmSHdnSVdoeVpXWkJkSFJ5TG1sdVkyeDFaR1Z6S0Njakp5a2dKaVlnSVdoeVpXWkJkSFJ5TG5OMFlYSjBjMWRwZEdnb0p5NG5LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlNBdkx5QktkWE4wSUdsdUlHTmhjMlVnYzI5dFpTQkRUVk1nY0hWMGN5QnZkWFFnWVNCbWRXeHNJRlZTVENCM2FYUm9JSFJvWlNCaGJtTm9iM0lnWVhCd1pXNWtaV1JjYmx4dVhHNGdJQ0FnYVdZZ0tHaHlaV1pCZEhSeUxtbHVZMngxWkdWektDY2pKeWtnSmlZZ0lXaHlaV1pCZEhSeUxuTjBZWEowYzFkcGRHZ29KeU1uS1NrZ2UxeHVJQ0FnSUNBZ2FISmxaa0YwZEhJZ1BTQmdJeVI3YUhKbFprRjBkSEl1YzNCc2FYUW9KeU1uS1ZzeFhYMWdPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxiR1ZqZEc5eUlEMGdhSEpsWmtGMGRISWdKaVlnYUhKbFprRjBkSElnSVQwOUlDY2pKeUEvSUdoeVpXWkJkSFJ5TG5SeWFXMG9LU0E2SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjMlZzWldOMGIzSTdYRzU5TzF4dVhHNWpiMjV6ZENCblpYUlRaV3hsWTNSdmNrWnliMjFGYkdWdFpXNTBJRDBnWld4bGJXVnVkQ0E5UGlCN1hHNGdJR052Ym5OMElITmxiR1ZqZEc5eUlEMGdaMlYwVTJWc1pXTjBiM0lvWld4bGJXVnVkQ2s3WEc1Y2JpQWdhV1lnS0hObGJHVmpkRzl5S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb2MyVnNaV04wYjNJcElEOGdjMlZzWldOMGIzSWdPaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVqYjI1emRDQm5aWFJGYkdWdFpXNTBSbkp2YlZObGJHVmpkRzl5SUQwZ1pXeGxiV1Z1ZENBOVBpQjdYRzRnSUdOdmJuTjBJSE5sYkdWamRHOXlJRDBnWjJWMFUyVnNaV04wYjNJb1pXeGxiV1Z1ZENrN1hHNGdJSEpsZEhWeWJpQnpaV3hsWTNSdmNpQS9JR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb2MyVnNaV04wYjNJcElEb2diblZzYkR0Y2JuMDdYRzVjYm1OdmJuTjBJR2RsZEZSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmtaeWIyMUZiR1Z0Wlc1MElEMGdaV3hsYldWdWRDQTlQaUI3WEc0Z0lHbG1JQ2doWld4bGJXVnVkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQXdPMXh1SUNCOUlDOHZJRWRsZENCMGNtRnVjMmwwYVc5dUxXUjFjbUYwYVc5dUlHOW1JSFJvWlNCbGJHVnRaVzUwWEc1Y2JseHVJQ0JzWlhRZ2UxeHVJQ0FnSUhSeVlXNXphWFJwYjI1RWRYSmhkR2x2Yml4Y2JpQWdJQ0IwY21GdWMybDBhVzl1UkdWc1lYbGNiaUFnZlNBOUlIZHBibVJ2ZHk1blpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dWc1pXMWxiblFwTzF4dUlDQmpiMjV6ZENCbWJHOWhkRlJ5WVc1emFYUnBiMjVFZFhKaGRHbHZiaUE5SUU1MWJXSmxjaTV3WVhKelpVWnNiMkYwS0hSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmlrN1hHNGdJR052Ym5OMElHWnNiMkYwVkhKaGJuTnBkR2x2YmtSbGJHRjVJRDBnVG5WdFltVnlMbkJoY25ObFJteHZZWFFvZEhKaGJuTnBkR2x2YmtSbGJHRjVLVHNnTHk4Z1VtVjBkWEp1SURBZ2FXWWdaV3hsYldWdWRDQnZjaUIwY21GdWMybDBhVzl1SUdSMWNtRjBhVzl1SUdseklHNXZkQ0JtYjNWdVpGeHVYRzRnSUdsbUlDZ2habXh2WVhSVWNtRnVjMmwwYVc5dVJIVnlZWFJwYjI0Z0ppWWdJV1pzYjJGMFZISmhibk5wZEdsdmJrUmxiR0Y1S1NCN1hHNGdJQ0FnY21WMGRYSnVJREE3WEc0Z0lIMGdMeThnU1dZZ2JYVnNkR2x3YkdVZ1pIVnlZWFJwYjI1eklHRnlaU0JrWldacGJtVmtMQ0IwWVd0bElIUm9aU0JtYVhKemRGeHVYRzVjYmlBZ2RISmhibk5wZEdsdmJrUjFjbUYwYVc5dUlEMGdkSEpoYm5OcGRHbHZia1IxY21GMGFXOXVMbk53YkdsMEtDY3NKeWxiTUYwN1hHNGdJSFJ5WVc1emFYUnBiMjVFWld4aGVTQTlJSFJ5WVc1emFYUnBiMjVFWld4aGVTNXpjR3hwZENnbkxDY3BXekJkTzF4dUlDQnlaWFIxY200Z0tFNTFiV0psY2k1d1lYSnpaVVpzYjJGMEtIUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpa2dLeUJPZFcxaVpYSXVjR0Z5YzJWR2JHOWhkQ2gwY21GdWMybDBhVzl1UkdWc1lYa3BLU0FxSUUxSlRFeEpVMFZEVDA1RVUxOU5WVXhVU1ZCTVNVVlNPMXh1ZlR0Y2JseHVZMjl1YzNRZ2RISnBaMmRsY2xSeVlXNXphWFJwYjI1RmJtUWdQU0JsYkdWdFpXNTBJRDArSUh0Y2JpQWdaV3hsYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkZkbVZ1ZENoVVVrRk9VMGxVU1U5T1gwVk9SQ2twTzF4dWZUdGNibHh1WTI5dWMzUWdhWE5GYkdWdFpXNTBJRDBnYjJKcUlEMCtJSHRjYmlBZ2FXWWdLQ0Z2WW1vZ2ZId2dkSGx3Wlc5bUlHOWlhaUFoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUc5aWFpNXFjWFZsY25rZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnYjJKcUlEMGdiMkpxV3pCZE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb3VibTlrWlZSNWNHVWdJVDA5SUNkMWJtUmxabWx1WldRbk8xeHVmVHRjYmx4dVkyOXVjM1FnWjJWMFJXeGxiV1Z1ZENBOUlHOWlhaUE5UGlCN1hHNGdJR2xtSUNocGMwVnNaVzFsYm5Rb2IySnFLU2tnZTF4dUlDQWdJQzh2SUdsMEozTWdZU0JxVVhWbGNua2diMkpxWldOMElHOXlJR0VnYm05a1pTQmxiR1Z0Wlc1MFhHNGdJQ0FnY21WMGRYSnVJRzlpYWk1cWNYVmxjbmtnUHlCdlltcGJNRjBnT2lCdlltbzdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ2IySnFMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaRzlqZFcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2lodlltb3BPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1amIyNXpkQ0IwZVhCbFEyaGxZMnREYjI1bWFXY2dQU0FvWTI5dGNHOXVaVzUwVG1GdFpTd2dZMjl1Wm1sbkxDQmpiMjVtYVdkVWVYQmxjeWtnUFQ0Z2UxeHVJQ0JQWW1wbFkzUXVhMlY1Y3loamIyNW1hV2RVZVhCbGN5a3VabTl5UldGamFDaHdjbTl3WlhKMGVTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pYaHdaV04wWldSVWVYQmxjeUE5SUdOdmJtWnBaMVI1Y0dWelczQnliM0JsY25SNVhUdGNiaUFnSUNCamIyNXpkQ0IyWVd4MVpTQTlJR052Ym1acFoxdHdjbTl3WlhKMGVWMDdYRzRnSUNBZ1kyOXVjM1FnZG1Gc2RXVlVlWEJsSUQwZ2RtRnNkV1VnSmlZZ2FYTkZiR1Z0Wlc1MEtIWmhiSFZsS1NBL0lDZGxiR1Z0Wlc1MEp5QTZJSFJ2Vkhsd1pTaDJZV3gxWlNrN1hHNWNiaUFnSUNCcFppQW9JVzVsZHlCU1pXZEZlSEFvWlhod1pXTjBaV1JVZVhCbGN5a3VkR1Z6ZENoMllXeDFaVlI1Y0dVcEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0FrZTJOdmJYQnZibVZ1ZEU1aGJXVXVkRzlWY0hCbGNrTmhjMlVvS1gwNklFOXdkR2x2YmlCY0lpUjdjSEp2Y0dWeWRIbDlYQ0lnY0hKdmRtbGtaV1FnZEhsd1pTQmNJaVI3ZG1Gc2RXVlVlWEJsZlZ3aUlHSjFkQ0JsZUhCbFkzUmxaQ0IwZVhCbElGd2lKSHRsZUhCbFkzUmxaRlI1Y0dWemZWd2lMbUFwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5TzF4dVhHNWpiMjV6ZENCcGMxWnBjMmxpYkdVZ1BTQmxiR1Z0Wlc1MElEMCtJSHRjYmlBZ2FXWWdLQ0ZwYzBWc1pXMWxiblFvWld4bGJXVnVkQ2tnZkh3Z1pXeGxiV1Z1ZEM1blpYUkRiR2xsYm5SU1pXTjBjeWdwTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR1ZzWlcxbGJuUXBMbWRsZEZCeWIzQmxjblI1Vm1Gc2RXVW9KM1pwYzJsaWFXeHBkSGtuS1NBOVBUMGdKM1pwYzJsaWJHVW5PMXh1ZlR0Y2JseHVZMjl1YzNRZ2FYTkVhWE5oWW14bFpDQTlJR1ZzWlcxbGJuUWdQVDRnZTF4dUlDQnBaaUFvSVdWc1pXMWxiblFnZkh3Z1pXeGxiV1Z1ZEM1dWIyUmxWSGx3WlNBaFBUMGdUbTlrWlM1RlRFVk5SVTVVWDA1UFJFVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5Z25aR2x6WVdKc1pXUW5LU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmxiR1Z0Wlc1MExtUnBjMkZpYkdWa0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYkdWdFpXNTBMbVJwYzJGaWJHVmtPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1ZzWlcxbGJuUXVhR0Z6UVhSMGNtbGlkWFJsS0Nka2FYTmhZbXhsWkNjcElDWW1JR1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Nka2FYTmhZbXhsWkNjcElDRTlQU0FuWm1Gc2MyVW5PMXh1ZlR0Y2JseHVZMjl1YzNRZ1ptbHVaRk5vWVdSdmQxSnZiM1FnUFNCbGJHVnRaVzUwSUQwK0lIdGNiaUFnYVdZZ0tDRmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RdVlYUjBZV05vVTJoaFpHOTNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMGdMeThnUTJGdUlHWnBibVFnZEdobElITm9ZV1J2ZHlCeWIyOTBJRzkwYUdWeWQybHpaU0JwZENkc2JDQnlaWFIxY200Z2RHaGxJR1J2WTNWdFpXNTBYRzVjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR1ZzWlcxbGJuUXVaMlYwVW05dmRFNXZaR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQmpiMjV6ZENCeWIyOTBJRDBnWld4bGJXVnVkQzVuWlhSU2IyOTBUbTlrWlNncE8xeHVJQ0FnSUhKbGRIVnliaUJ5YjI5MElHbHVjM1JoYm1ObGIyWWdVMmhoWkc5M1VtOXZkQ0EvSUhKdmIzUWdPaUJ1ZFd4c08xeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCVGFHRmtiM2RTYjI5MEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWc1pXMWxiblE3WEc0Z0lIMGdMeThnZDJobGJpQjNaU0JrYjI0bmRDQm1hVzVrSUdFZ2MyaGhaRzkzSUhKdmIzUmNibHh1WEc0Z0lHbG1JQ2doWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1ptbHVaRk5vWVdSdmQxSnZiM1FvWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsS1R0Y2JuMDdYRzVjYm1OdmJuTjBJRzV2YjNBZ1BTQW9LU0E5UGlCN2ZUdGNiaThxS2x4dUlDb2dWSEpwWTJzZ2RHOGdjbVZ6ZEdGeWRDQmhiaUJsYkdWdFpXNTBKM01nWVc1cGJXRjBhVzl1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRJVkUxTVJXeGxiV1Z1ZEgwZ1pXeGxiV1Z1ZEZ4dUlDb2dRSEpsZEhWeWJpQjJiMmxrWEc0Z0tseHVJQ29nUUhObFpTQm9kSFJ3Y3pvdkwzZDNkeTVqYUdGeWFYTjBhR1Z2TG1sdkwySnNiMmN2TWpBeU1TOHdNaTl5WlhOMFlYSjBMV0V0WTNOekxXRnVhVzFoZEdsdmJpMTNhWFJvTFdwaGRtRnpZM0pwY0hRdkkzSmxjM1JoY25ScGJtY3RZUzFqYzNNdFlXNXBiV0YwYVc5dVhHNGdLaTljYmx4dVhHNWpiMjV6ZENCeVpXWnNiM2NnUFNCbGJHVnRaVzUwSUQwK0lIdGNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxbGVIQnlaWE56YVc5dWMxeHVJQ0JsYkdWdFpXNTBMbTltWm5ObGRFaGxhV2RvZER0Y2JuMDdYRzVjYm1OdmJuTjBJR2RsZEdwUmRXVnllU0E5SUNncElEMCtJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR3BSZFdWeWVWeHVJQ0I5SUQwZ2QybHVaRzkzTzF4dVhHNGdJR2xtSUNocVVYVmxjbmtnSmlZZ0lXUnZZM1Z0Wlc1MExtSnZaSGt1YUdGelFYUjBjbWxpZFhSbEtDZGtZWFJoTFdKekxXNXZMV3B4ZFdWeWVTY3BLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHcFJkV1Z5ZVR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVZMjl1YzNRZ1JFOU5RMjl1ZEdWdWRFeHZZV1JsWkVOaGJHeGlZV05yY3lBOUlGdGRPMXh1WEc1amIyNXpkQ0J2YmtSUFRVTnZiblJsYm5STWIyRmtaV1FnUFNCallXeHNZbUZqYXlBOVBpQjdYRzRnSUdsbUlDaGtiMk4xYldWdWRDNXlaV0ZrZVZOMFlYUmxJRDA5UFNBbmJHOWhaR2x1WnljcElIdGNiaUFnSUNBdkx5QmhaR1FnYkdsemRHVnVaWElnYjI0Z2RHaGxJR1pwY25OMElHTmhiR3dnZDJobGJpQjBhR1VnWkc5amRXMWxiblFnYVhNZ2FXNGdiRzloWkdsdVp5QnpkR0YwWlZ4dUlDQWdJR2xtSUNnaFJFOU5RMjl1ZEdWdWRFeHZZV1JsWkVOaGJHeGlZV05yY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUdSdlkzVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjBSUFRVTnZiblJsYm5STWIyRmtaV1FuTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUVSUFRVTnZiblJsYm5STWIyRmtaV1JEWVd4c1ltRmphM011Wm05eVJXRmphQ2hqWVd4c1ltRmpheUE5UGlCallXeHNZbUZqYXlncEtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFUlBUVU52Ym5SbGJuUk1iMkZrWldSRFlXeHNZbUZqYTNNdWNIVnphQ2hqWVd4c1ltRmpheWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWTJGc2JHSmhZMnNvS1R0Y2JpQWdmVnh1ZlR0Y2JseHVZMjl1YzNRZ2FYTlNWRXdnUFNBb0tTQTlQaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUXVaR2x5SUQwOVBTQW5jblJzSnp0Y2JseHVZMjl1YzNRZ1pHVm1hVzVsU2xGMVpYSjVVR3gxWjJsdUlEMGdjR3gxWjJsdUlEMCtJSHRjYmlBZ2IyNUVUMDFEYjI1MFpXNTBURzloWkdWa0tDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQWtJRDBnWjJWMGFsRjFaWEo1S0NrN1hHNGdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUdsbUlDb3ZYRzVjYmlBZ0lDQnBaaUFvSkNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSEJzZFdkcGJpNU9RVTFGTzF4dUlDQWdJQ0FnWTI5dWMzUWdTbEZWUlZKWlgwNVBYME5QVGtaTVNVTlVJRDBnSkM1bWJsdHVZVzFsWFR0Y2JpQWdJQ0FnSUNRdVptNWJibUZ0WlYwZ1BTQndiSFZuYVc0dWFsRjFaWEo1U1c1MFpYSm1ZV05sTzF4dUlDQWdJQ0FnSkM1bWJsdHVZVzFsWFM1RGIyNXpkSEoxWTNSdmNpQTlJSEJzZFdkcGJqdGNibHh1SUNBZ0lDQWdKQzVtYmx0dVlXMWxYUzV1YjBOdmJtWnNhV04wSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBa0xtWnVXMjVoYldWZElEMGdTbEZWUlZKWlgwNVBYME5QVGtaTVNVTlVPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR3gxWjJsdUxtcFJkV1Z5ZVVsdWRHVnlabUZqWlR0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYm4wN1hHNWNibU52Ym5OMElHVjRaV04xZEdVZ1BTQmpZV3hzWW1GamF5QTlQaUI3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdZMkZzYkdKaFkyc2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCallXeHNZbUZqYXlncE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQmxlR1ZqZFhSbFFXWjBaWEpVY21GdWMybDBhVzl1SUQwZ0tHTmhiR3hpWVdOckxDQjBjbUZ1YzJsMGFXOXVSV3hsYldWdWRDd2dkMkZwZEVadmNsUnlZVzV6YVhScGIyNGdQU0IwY25WbEtTQTlQaUI3WEc0Z0lHbG1JQ2doZDJGcGRFWnZjbFJ5WVc1emFYUnBiMjRwSUh0Y2JpQWdJQ0JsZUdWamRYUmxLR05oYkd4aVlXTnJLVHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCa2RYSmhkR2x2YmxCaFpHUnBibWNnUFNBMU8xeHVJQ0JqYjI1emRDQmxiWFZzWVhSbFpFUjFjbUYwYVc5dUlEMGdaMlYwVkhKaGJuTnBkR2x2YmtSMWNtRjBhVzl1Um5KdmJVVnNaVzFsYm5Rb2RISmhibk5wZEdsdmJrVnNaVzFsYm5RcElDc2daSFZ5WVhScGIyNVFZV1JrYVc1bk8xeHVJQ0JzWlhRZ1kyRnNiR1ZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsY2lBOUlDaDdYRzRnSUNBZ2RHRnlaMlYwWEc0Z0lIMHBJRDArSUh0Y2JpQWdJQ0JwWmlBb2RHRnlaMlYwSUNFOVBTQjBjbUZ1YzJsMGFXOXVSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOaGJHeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2RISmhibk5wZEdsdmJrVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaFVVa0ZPVTBsVVNVOU9YMFZPUkN3Z2FHRnVaR3hsY2lrN1hHNGdJQ0FnWlhobFkzVjBaU2hqWVd4c1ltRmpheWs3WEc0Z0lIMDdYRzVjYmlBZ2RISmhibk5wZEdsdmJrVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loVVVrRk9VMGxVU1U5T1gwVk9SQ3dnYUdGdVpHeGxjaWs3WEc0Z0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDZ2hZMkZzYkdWa0tTQjdYRzRnSUNBZ0lDQjBjbWxuWjJWeVZISmhibk5wZEdsdmJrVnVaQ2gwY21GdWMybDBhVzl1Uld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1SUNCOUxDQmxiWFZzWVhSbFpFUjFjbUYwYVc5dUtUdGNibjA3WEc0dktpcGNiaUFxSUZKbGRIVnliaUIwYUdVZ2NISmxkbWx2ZFhNdmJtVjRkQ0JsYkdWdFpXNTBJRzltSUdFZ2JHbHpkQzVjYmlBcVhHNGdLaUJBY0dGeVlXMGdlMkZ5Y21GNWZTQnNhWE4wSUNBZ0lGUm9aU0JzYVhOMElHOW1JR1ZzWlcxbGJuUnpYRzRnS2lCQWNHRnlZVzBnWVdOMGFYWmxSV3hsYldWdWRDQWdJRlJvWlNCaFkzUnBkbVVnWld4bGJXVnVkRnh1SUNvZ1FIQmhjbUZ0SUhOb2IzVnNaRWRsZEU1bGVIUWdJQ0JEYUc5dmMyVWdkRzhnWjJWMElHNWxlSFFnYjNJZ2NISmxkbWx2ZFhNZ1pXeGxiV1Z1ZEZ4dUlDb2dRSEJoY21GdElHbHpRM2xqYkdWQmJHeHZkMlZrWEc0Z0tpQkFjbVYwZFhKdUlIdEZiR1Z0Wlc1MGZHVnNaVzE5SUZSb1pTQndjbTl3WlhJZ1pXeGxiV1Z1ZEZ4dUlDb3ZYRzVjYmx4dVkyOXVjM1FnWjJWMFRtVjRkRUZqZEdsMlpVVnNaVzFsYm5RZ1BTQW9iR2x6ZEN3Z1lXTjBhWFpsUld4bGJXVnVkQ3dnYzJodmRXeGtSMlYwVG1WNGRDd2dhWE5EZVdOc1pVRnNiRzkzWldRcElEMCtJSHRjYmlBZ2JHVjBJR2x1WkdWNElEMGdiR2x6ZEM1cGJtUmxlRTltS0dGamRHbDJaVVZzWlcxbGJuUXBPeUF2THlCcFppQjBhR1VnWld4bGJXVnVkQ0JrYjJWeklHNXZkQ0JsZUdsemRDQnBiaUIwYUdVZ2JHbHpkQ0J5WlhSMWNtNGdZVzRnWld4bGJXVnVkQ0JrWlhCbGJtUnBibWNnYjI0Z2RHaGxJR1JwY21WamRHbHZiaUJoYm1RZ2FXWWdZM2xqYkdVZ2FYTWdZV3hzYjNkbFpGeHVYRzRnSUdsbUlDaHBibVJsZUNBOVBUMGdMVEVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiR2x6ZEZzaGMyaHZkV3hrUjJWMFRtVjRkQ0FtSmlCcGMwTjVZMnhsUVd4c2IzZGxaQ0EvSUd4cGMzUXViR1Z1WjNSb0lDMGdNU0E2SURCZE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2JHbHpkRXhsYm1kMGFDQTlJR3hwYzNRdWJHVnVaM1JvTzF4dUlDQnBibVJsZUNBclBTQnphRzkxYkdSSFpYUk9aWGgwSUQ4Z01TQTZJQzB4TzF4dVhHNGdJR2xtSUNocGMwTjVZMnhsUVd4c2IzZGxaQ2tnZTF4dUlDQWdJR2x1WkdWNElEMGdLR2x1WkdWNElDc2diR2x6ZEV4bGJtZDBhQ2tnSlNCc2FYTjBUR1Z1WjNSb08xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHeHBjM1JiVFdGMGFDNXRZWGdvTUN3Z1RXRjBhQzV0YVc0b2FXNWtaWGdzSUd4cGMzUk1aVzVuZEdnZ0xTQXhLU2xkTzF4dWZUdGNibHh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRbTl2ZEhOMGNtRndJQ2gyTlM0eExqTXBPaUJrYjIwdlpYWmxiblF0YUdGdVpHeGxjaTVxYzF4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ1RVbFVJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEhkaWN5OWliMjkwYzNSeVlYQXZZbXh2WWk5dFlXbHVMMHhKUTBWT1UwVXBYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRMjl1YzNSaGJuUnpYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1WEc1amIyNXpkQ0J1WVcxbGMzQmhZMlZTWldkbGVDQTlJQzliWGk1ZEtpZy9QVnhjTGk0cUtWeGNMbnd1S2k4N1hHNWpiMjV6ZENCemRISnBjRTVoYldWU1pXZGxlQ0E5SUM5Y1hDNHVLaTg3WEc1amIyNXpkQ0J6ZEhKcGNGVnBaRkpsWjJWNElEMGdMem82WEZ4a0t5UXZPMXh1WTI5dWMzUWdaWFpsYm5SU1pXZHBjM1J5ZVNBOUlIdDlPeUF2THlCRmRtVnVkSE1nYzNSdmNtRm5aVnh1WEc1c1pYUWdkV2xrUlhabGJuUWdQU0F4TzF4dVkyOXVjM1FnWTNWemRHOXRSWFpsYm5SeklEMGdlMXh1SUNCdGIzVnpaV1Z1ZEdWeU9pQW5iVzkxYzJWdmRtVnlKeXhjYmlBZ2JXOTFjMlZzWldGMlpUb2dKMjF2ZFhObGIzVjBKMXh1ZlR0Y2JtTnZibk4wSUdOMWMzUnZiVVYyWlc1MGMxSmxaMlY0SUQwZ0wxNG9iVzkxYzJWbGJuUmxjbnh0YjNWelpXeGxZWFpsS1M5cE8xeHVZMjl1YzNRZ2JtRjBhWFpsUlhabGJuUnpJRDBnYm1WM0lGTmxkQ2hiSjJOc2FXTnJKeXdnSjJSaWJHTnNhV05ySnl3Z0oyMXZkWE5sZFhBbkxDQW5iVzkxYzJWa2IzZHVKeXdnSjJOdmJuUmxlSFJ0Wlc1MUp5d2dKMjF2ZFhObGQyaGxaV3duTENBblJFOU5UVzkxYzJWVFkzSnZiR3duTENBbmJXOTFjMlZ2ZG1WeUp5d2dKMjF2ZFhObGIzVjBKeXdnSjIxdmRYTmxiVzkyWlNjc0lDZHpaV3hsWTNSemRHRnlkQ2NzSUNkelpXeGxZM1JsYm1RbkxDQW5hMlY1Wkc5M2JpY3NJQ2RyWlhsd2NtVnpjeWNzSUNkclpYbDFjQ2NzSUNkdmNtbGxiblJoZEdsdmJtTm9ZVzVuWlNjc0lDZDBiM1ZqYUhOMFlYSjBKeXdnSjNSdmRXTm9iVzkyWlNjc0lDZDBiM1ZqYUdWdVpDY3NJQ2QwYjNWamFHTmhibU5sYkNjc0lDZHdiMmx1ZEdWeVpHOTNiaWNzSUNkd2IybHVkR1Z5Ylc5MlpTY3NJQ2R3YjJsdWRHVnlkWEFuTENBbmNHOXBiblJsY214bFlYWmxKeXdnSjNCdmFXNTBaWEpqWVc1alpXd25MQ0FuWjJWemRIVnlaWE4wWVhKMEp5d2dKMmRsYzNSMWNtVmphR0Z1WjJVbkxDQW5aMlZ6ZEhWeVpXVnVaQ2NzSUNkbWIyTjFjeWNzSUNkaWJIVnlKeXdnSjJOb1lXNW5aU2NzSUNkeVpYTmxkQ2NzSUNkelpXeGxZM1FuTENBbmMzVmliV2wwSnl3Z0oyWnZZM1Z6YVc0bkxDQW5abTlqZFhOdmRYUW5MQ0FuYkc5aFpDY3NJQ2QxYm14dllXUW5MQ0FuWW1WbWIzSmxkVzVzYjJGa0p5d2dKM0psYzJsNlpTY3NJQ2R0YjNabEp5d2dKMFJQVFVOdmJuUmxiblJNYjJGa1pXUW5MQ0FuY21WaFpIbHpkR0YwWldOb1lXNW5aU2NzSUNkbGNuSnZjaWNzSUNkaFltOXlkQ2NzSUNkelkzSnZiR3duWFNrN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nVUhKcGRtRjBaU0J0WlhSb2IyUnpYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCblpYUlZhV1JGZG1WdWRDaGxiR1Z0Wlc1MExDQjFhV1FwSUh0Y2JpQWdjbVYwZFhKdUlIVnBaQ0FtSmlCZ0pIdDFhV1I5T2pva2UzVnBaRVYyWlc1MEt5dDlZQ0I4ZkNCbGJHVnRaVzUwTG5WcFpFVjJaVzUwSUh4OElIVnBaRVYyWlc1MEt5czdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRVYyWlc1MEtHVnNaVzFsYm5RcElIdGNiaUFnWTI5dWMzUWdkV2xrSUQwZ1oyVjBWV2xrUlhabGJuUW9aV3hsYldWdWRDazdYRzRnSUdWc1pXMWxiblF1ZFdsa1JYWmxiblFnUFNCMWFXUTdYRzRnSUdWMlpXNTBVbVZuYVhOMGNubGJkV2xrWFNBOUlHVjJaVzUwVW1WbmFYTjBjbmxiZFdsa1hTQjhmQ0I3ZlR0Y2JpQWdjbVYwZFhKdUlHVjJaVzUwVW1WbmFYTjBjbmxiZFdsa1hUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ltOXZkSE4wY21Gd1NHRnVaR3hsY2lobGJHVnRaVzUwTENCbWJpa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYUdGdVpHeGxjaWhsZG1WdWRDa2dlMXh1SUNBZ0lHVjJaVzUwTG1SbGJHVm5ZWFJsVkdGeVoyVjBJRDBnWld4bGJXVnVkRHRjYmx4dUlDQWdJR2xtSUNob1lXNWtiR1Z5TG05dVpVOW1aaWtnZTF4dUlDQWdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOW1aaWhsYkdWdFpXNTBMQ0JsZG1WdWRDNTBlWEJsTENCbWJpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUdadUxtRndjR3g1S0dWc1pXMWxiblFzSUZ0bGRtVnVkRjBwTzF4dUlDQjlPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmliMjkwYzNSeVlYQkVaV3hsWjJGMGFXOXVTR0Z1Wkd4bGNpaGxiR1Z0Wlc1MExDQnpaV3hsWTNSdmNpd2dabTRwSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHaGhibVJzWlhJb1pYWmxiblFwSUh0Y2JpQWdJQ0JqYjI1emRDQmtiMjFGYkdWdFpXNTBjeUE5SUdWc1pXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQ2h6Wld4bFkzUnZjaWs3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0I3WEc0Z0lDQWdJQ0IwWVhKblpYUmNiaUFnSUNCOUlEMGdaWFpsYm5RN0lIUmhjbWRsZENBbUppQjBZWEpuWlhRZ0lUMDlJSFJvYVhNN0lIUmhjbWRsZENBOUlIUmhjbWRsZEM1d1lYSmxiblJPYjJSbEtTQjdYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnWkc5dFJXeGxiV1Z1ZEhNdWJHVnVaM1JvT3lCcExTMDdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtiMjFGYkdWdFpXNTBjMXRwWFNBOVBUMGdkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUXVaR1ZzWldkaGRHVlVZWEpuWlhRZ1BTQjBZWEpuWlhRN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FHRnVaR3hsY2k1dmJtVlBabVlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRVYyWlc1MFNHRnVaR3hsY2k1dlptWW9aV3hsYldWdWRDd2daWFpsYm5RdWRIbHdaU3dnYzJWc1pXTjBiM0lzSUdadUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHRnlaMlYwTENCYlpYWmxiblJkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ0x5OGdWRzhnY0d4bFlYTmxJRVZUVEdsdWRGeHVYRzVjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVaRWhoYm1Sc1pYSW9aWFpsYm5SekxDQm9ZVzVrYkdWeUxDQmtaV3hsWjJGMGFXOXVVMlZzWldOMGIzSWdQU0J1ZFd4c0tTQjdYRzRnSUdOdmJuTjBJSFZwWkVWMlpXNTBUR2x6ZENBOUlFOWlhbVZqZEM1clpYbHpLR1YyWlc1MGN5azdYRzVjYmlBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd4bGJpQTlJSFZwWkVWMlpXNTBUR2x6ZEM1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lHTnZibk4wSUdWMlpXNTBJRDBnWlhabGJuUnpXM1ZwWkVWMlpXNTBUR2x6ZEZ0cFhWMDdYRzVjYmlBZ0lDQnBaaUFvWlhabGJuUXViM0pwWjJsdVlXeElZVzVrYkdWeUlEMDlQU0JvWVc1a2JHVnlJQ1ltSUdWMlpXNTBMbVJsYkdWbllYUnBiMjVUWld4bFkzUnZjaUE5UFQwZ1pHVnNaV2RoZEdsdmJsTmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1pYWmxiblE3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzUxYkd3N1hHNTlYRzVjYm1aMWJtTjBhVzl1SUc1dmNtMWhiR2w2WlZCaGNtRnRjeWh2Y21sbmFXNWhiRlI1Y0dWRmRtVnVkQ3dnYUdGdVpHeGxjaXdnWkdWc1pXZGhkR2x2YmtadUtTQjdYRzRnSUdOdmJuTjBJR1JsYkdWbllYUnBiMjRnUFNCMGVYQmxiMllnYUdGdVpHeGxjaUE5UFQwZ0ozTjBjbWx1WnljN1hHNGdJR052Ym5OMElHOXlhV2RwYm1Gc1NHRnVaR3hsY2lBOUlHUmxiR1ZuWVhScGIyNGdQeUJrWld4bFoyRjBhVzl1Um00Z09pQm9ZVzVrYkdWeU8xeHVJQ0JzWlhRZ2RIbHdaVVYyWlc1MElEMGdaMlYwVkhsd1pVVjJaVzUwS0c5eWFXZHBibUZzVkhsd1pVVjJaVzUwS1R0Y2JpQWdZMjl1YzNRZ2FYTk9ZWFJwZG1VZ1BTQnVZWFJwZG1WRmRtVnVkSE11YUdGektIUjVjR1ZGZG1WdWRDazdYRzVjYmlBZ2FXWWdLQ0ZwYzA1aGRHbDJaU2tnZTF4dUlDQWdJSFI1Y0dWRmRtVnVkQ0E5SUc5eWFXZHBibUZzVkhsd1pVVjJaVzUwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUZ0a1pXeGxaMkYwYVc5dUxDQnZjbWxuYVc1aGJFaGhibVJzWlhJc0lIUjVjR1ZGZG1WdWRGMDdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHRmtaRWhoYm1Sc1pYSW9aV3hsYldWdWRDd2diM0pwWjJsdVlXeFVlWEJsUlhabGJuUXNJR2hoYm1Sc1pYSXNJR1JsYkdWbllYUnBiMjVHYml3Z2IyNWxUMlptS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYjNKcFoybHVZV3hVZVhCbFJYWmxiblFnSVQwOUlDZHpkSEpwYm1jbklIeDhJQ0ZsYkdWdFpXNTBLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGb1lXNWtiR1Z5S1NCN1hHNGdJQ0FnYUdGdVpHeGxjaUE5SUdSbGJHVm5ZWFJwYjI1R2JqdGNiaUFnSUNCa1pXeGxaMkYwYVc5dVJtNGdQU0J1ZFd4c08xeHVJQ0I5SUM4dklHbHVJR05oYzJVZ2IyWWdiVzkxYzJWbGJuUmxjaUJ2Y2lCdGIzVnpaV3hsWVhabElIZHlZWEFnZEdobElHaGhibVJzWlhJZ2QybDBhR2x1SUdFZ1puVnVZM1JwYjI0Z2RHaGhkQ0JqYUdWamEzTWdabTl5SUdsMGN5QkVUMDBnY0c5emFYUnBiMjVjYmlBZ0x5OGdkR2hwY3lCd2NtVjJaVzUwY3lCMGFHVWdhR0Z1Wkd4bGNpQm1jbTl0SUdKbGFXNW5JR1JwYzNCaGRHTm9aV1FnZEdobElITmhiV1VnZDJGNUlHRnpJRzF2ZFhObGIzWmxjaUJ2Y2lCdGIzVnpaVzkxZENCa2IyVnpYRzVjYmx4dUlDQnBaaUFvWTNWemRHOXRSWFpsYm5SelVtVm5aWGd1ZEdWemRDaHZjbWxuYVc1aGJGUjVjR1ZGZG1WdWRDa3BJSHRjYmlBZ0lDQmpiMjV6ZENCM2NtRndSbTRnUFNCbWJpQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFpYWmxiblF1Y21Wc1lYUmxaRlJoY21kbGRDQjhmQ0JsZG1WdWRDNXlaV3hoZEdWa1ZHRnlaMlYwSUNFOVBTQmxkbVZ1ZEM1a1pXeGxaMkYwWlZSaGNtZGxkQ0FtSmlBaFpYWmxiblF1WkdWc1pXZGhkR1ZVWVhKblpYUXVZMjl1ZEdGcGJuTW9aWFpsYm5RdWNtVnNZWFJsWkZSaGNtZGxkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptNHVZMkZzYkNoMGFHbHpMQ0JsZG1WdWRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNoa1pXeGxaMkYwYVc5dVJtNHBJSHRjYmlBZ0lDQWdJR1JsYkdWbllYUnBiMjVHYmlBOUlIZHlZWEJHYmloa1pXeGxaMkYwYVc5dVJtNHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCb1lXNWtiR1Z5SUQwZ2QzSmhjRVp1S0doaGJtUnNaWElwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJRnRrWld4bFoyRjBhVzl1TENCdmNtbG5hVzVoYkVoaGJtUnNaWElzSUhSNWNHVkZkbVZ1ZEYwZ1BTQnViM0p0WVd4cGVtVlFZWEpoYlhNb2IzSnBaMmx1WVd4VWVYQmxSWFpsYm5Rc0lHaGhibVJzWlhJc0lHUmxiR1ZuWVhScGIyNUdiaWs3WEc0Z0lHTnZibk4wSUdWMlpXNTBjeUE5SUdkbGRFVjJaVzUwS0dWc1pXMWxiblFwTzF4dUlDQmpiMjV6ZENCb1lXNWtiR1Z5Y3lBOUlHVjJaVzUwYzF0MGVYQmxSWFpsYm5SZElIeDhJQ2hsZG1WdWRITmJkSGx3WlVWMlpXNTBYU0E5SUh0OUtUdGNiaUFnWTI5dWMzUWdjSEpsZG1sdmRYTkdiaUE5SUdacGJtUklZVzVrYkdWeUtHaGhibVJzWlhKekxDQnZjbWxuYVc1aGJFaGhibVJzWlhJc0lHUmxiR1ZuWVhScGIyNGdQeUJvWVc1a2JHVnlJRG9nYm5Wc2JDazdYRzVjYmlBZ2FXWWdLSEJ5WlhacGIzVnpSbTRwSUh0Y2JpQWdJQ0J3Y21WMmFXOTFjMFp1TG05dVpVOW1aaUE5SUhCeVpYWnBiM1Z6Um00dWIyNWxUMlptSUNZbUlHOXVaVTltWmp0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQjFhV1FnUFNCblpYUlZhV1JGZG1WdWRDaHZjbWxuYVc1aGJFaGhibVJzWlhJc0lHOXlhV2RwYm1Gc1ZIbHdaVVYyWlc1MExuSmxjR3hoWTJVb2JtRnRaWE53WVdObFVtVm5aWGdzSUNjbktTazdYRzRnSUdOdmJuTjBJR1p1SUQwZ1pHVnNaV2RoZEdsdmJpQS9JR0p2YjNSemRISmhjRVJsYkdWbllYUnBiMjVJWVc1a2JHVnlLR1ZzWlcxbGJuUXNJR2hoYm1Sc1pYSXNJR1JsYkdWbllYUnBiMjVHYmlrZ09pQmliMjkwYzNSeVlYQklZVzVrYkdWeUtHVnNaVzFsYm5Rc0lHaGhibVJzWlhJcE8xeHVJQ0JtYmk1a1pXeGxaMkYwYVc5dVUyVnNaV04wYjNJZ1BTQmtaV3hsWjJGMGFXOXVJRDhnYUdGdVpHeGxjaUE2SUc1MWJHdzdYRzRnSUdadUxtOXlhV2RwYm1Gc1NHRnVaR3hsY2lBOUlHOXlhV2RwYm1Gc1NHRnVaR3hsY2p0Y2JpQWdabTR1YjI1bFQyWm1JRDBnYjI1bFQyWm1PMXh1SUNCbWJpNTFhV1JGZG1WdWRDQTlJSFZwWkR0Y2JpQWdhR0Z1Wkd4bGNuTmJkV2xrWFNBOUlHWnVPMXh1SUNCbGJHVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvZEhsd1pVVjJaVzUwTENCbWJpd2daR1ZzWldkaGRHbHZiaWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsYlc5MlpVaGhibVJzWlhJb1pXeGxiV1Z1ZEN3Z1pYWmxiblJ6TENCMGVYQmxSWFpsYm5Rc0lHaGhibVJzWlhJc0lHUmxiR1ZuWVhScGIyNVRaV3hsWTNSdmNpa2dlMXh1SUNCamIyNXpkQ0JtYmlBOUlHWnBibVJJWVc1a2JHVnlLR1YyWlc1MGMxdDBlWEJsUlhabGJuUmRMQ0JvWVc1a2JHVnlMQ0JrWld4bFoyRjBhVzl1VTJWc1pXTjBiM0lwTzF4dVhHNGdJR2xtSUNnaFptNHBJSHRjYmlBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmx4dUlDQmxiR1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9kSGx3WlVWMlpXNTBMQ0JtYml3Z1FtOXZiR1ZoYmloa1pXeGxaMkYwYVc5dVUyVnNaV04wYjNJcEtUdGNiaUFnWkdWc1pYUmxJR1YyWlc1MGMxdDBlWEJsUlhabGJuUmRXMlp1TG5WcFpFVjJaVzUwWFR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WdGIzWmxUbUZ0WlhOd1lXTmxaRWhoYm1Sc1pYSnpLR1ZzWlcxbGJuUXNJR1YyWlc1MGN5d2dkSGx3WlVWMlpXNTBMQ0J1WVcxbGMzQmhZMlVwSUh0Y2JpQWdZMjl1YzNRZ2MzUnZjbVZGYkdWdFpXNTBSWFpsYm5RZ1BTQmxkbVZ1ZEhOYmRIbHdaVVYyWlc1MFhTQjhmQ0I3ZlR0Y2JpQWdUMkpxWldOMExtdGxlWE1vYzNSdmNtVkZiR1Z0Wlc1MFJYWmxiblFwTG1admNrVmhZMmdvYUdGdVpHeGxja3RsZVNBOVBpQjdYRzRnSUNBZ2FXWWdLR2hoYm1Sc1pYSkxaWGt1YVc1amJIVmtaWE1vYm1GdFpYTndZV05sS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWlhabGJuUWdQU0J6ZEc5eVpVVnNaVzFsYm5SRmRtVnVkRnRvWVc1a2JHVnlTMlY1WFR0Y2JpQWdJQ0FnSUhKbGJXOTJaVWhoYm1Sc1pYSW9aV3hsYldWdWRDd2daWFpsYm5SekxDQjBlWEJsUlhabGJuUXNJR1YyWlc1MExtOXlhV2RwYm1Gc1NHRnVaR3hsY2l3Z1pYWmxiblF1WkdWc1pXZGhkR2x2YmxObGJHVmpkRzl5S1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJVZVhCbFJYWmxiblFvWlhabGJuUXBJSHRjYmlBZ0x5OGdZV3hzYjNjZ2RHOGdaMlYwSUhSb1pTQnVZWFJwZG1VZ1pYWmxiblJ6SUdaeWIyMGdibUZ0WlhOd1lXTmxaQ0JsZG1WdWRITWdLQ2RqYkdsamF5NWljeTVpZFhSMGIyNG5JQzB0UGlBblkyeHBZMnNuS1Z4dUlDQmxkbVZ1ZENBOUlHVjJaVzUwTG5KbGNHeGhZMlVvYzNSeWFYQk9ZVzFsVW1WblpYZ3NJQ2NuS1R0Y2JpQWdjbVYwZFhKdUlHTjFjM1J2YlVWMlpXNTBjMXRsZG1WdWRGMGdmSHdnWlhabGJuUTdYRzU5WEc1Y2JtTnZibk4wSUVWMlpXNTBTR0Z1Wkd4bGNpQTlJSHRjYmlBZ2IyNG9aV3hsYldWdWRDd2daWFpsYm5Rc0lHaGhibVJzWlhJc0lHUmxiR1ZuWVhScGIyNUdiaWtnZTF4dUlDQWdJR0ZrWkVoaGJtUnNaWElvWld4bGJXVnVkQ3dnWlhabGJuUXNJR2hoYm1Sc1pYSXNJR1JsYkdWbllYUnBiMjVHYml3Z1ptRnNjMlVwTzF4dUlDQjlMRnh1WEc0Z0lHOXVaU2hsYkdWdFpXNTBMQ0JsZG1WdWRDd2dhR0Z1Wkd4bGNpd2daR1ZzWldkaGRHbHZia1p1S1NCN1hHNGdJQ0FnWVdSa1NHRnVaR3hsY2lobGJHVnRaVzUwTENCbGRtVnVkQ3dnYUdGdVpHeGxjaXdnWkdWc1pXZGhkR2x2YmtadUxDQjBjblZsS1R0Y2JpQWdmU3hjYmx4dUlDQnZabVlvWld4bGJXVnVkQ3dnYjNKcFoybHVZV3hVZVhCbFJYWmxiblFzSUdoaGJtUnNaWElzSUdSbGJHVm5ZWFJwYjI1R2Jpa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiM0pwWjJsdVlXeFVlWEJsUlhabGJuUWdJVDA5SUNkemRISnBibWNuSUh4OElDRmxiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdXMlJsYkdWbllYUnBiMjRzSUc5eWFXZHBibUZzU0dGdVpHeGxjaXdnZEhsd1pVVjJaVzUwWFNBOUlHNXZjbTFoYkdsNlpWQmhjbUZ0Y3lodmNtbG5hVzVoYkZSNWNHVkZkbVZ1ZEN3Z2FHRnVaR3hsY2l3Z1pHVnNaV2RoZEdsdmJrWnVLVHRjYmlBZ0lDQmpiMjV6ZENCcGJrNWhiV1Z6Y0dGalpTQTlJSFI1Y0dWRmRtVnVkQ0FoUFQwZ2IzSnBaMmx1WVd4VWVYQmxSWFpsYm5RN1hHNGdJQ0FnWTI5dWMzUWdaWFpsYm5SeklEMGdaMlYwUlhabGJuUW9aV3hsYldWdWRDazdYRzRnSUNBZ1kyOXVjM1FnYVhOT1lXMWxjM0JoWTJVZ1BTQnZjbWxuYVc1aGJGUjVjR1ZGZG1WdWRDNXpkR0Z5ZEhOWGFYUm9LQ2N1SnlrN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHOXlhV2RwYm1Gc1NHRnVaR3hsY2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUM4dklGTnBiWEJzWlhOMElHTmhjMlU2SUdoaGJtUnNaWElnYVhNZ2NHRnpjMlZrTENCeVpXMXZkbVVnZEdoaGRDQnNhWE4wWlc1bGNpQlBUa3haTGx4dUlDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEhNZ2ZId2dJV1YyWlc1MGMxdDBlWEJsUlhabGJuUmRLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WdGIzWmxTR0Z1Wkd4bGNpaGxiR1Z0Wlc1MExDQmxkbVZ1ZEhNc0lIUjVjR1ZGZG1WdWRDd2diM0pwWjJsdVlXeElZVzVrYkdWeUxDQmtaV3hsWjJGMGFXOXVJRDhnYUdGdVpHeGxjaUE2SUc1MWJHd3BPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHBjMDVoYldWemNHRmpaU2tnZTF4dUlDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb1pYWmxiblJ6S1M1bWIzSkZZV05vS0dWc1pXMWxiblJGZG1WdWRDQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVTVoYldWemNHRmpaV1JJWVc1a2JHVnljeWhsYkdWdFpXNTBMQ0JsZG1WdWRITXNJR1ZzWlcxbGJuUkZkbVZ1ZEN3Z2IzSnBaMmx1WVd4VWVYQmxSWFpsYm5RdWMyeHBZMlVvTVNrcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYzNSdmNtVkZiR1Z0Wlc1MFJYWmxiblFnUFNCbGRtVnVkSE5iZEhsd1pVVjJaVzUwWFNCOGZDQjdmVHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWh6ZEc5eVpVVnNaVzFsYm5SRmRtVnVkQ2t1Wm05eVJXRmphQ2hyWlhsSVlXNWtiR1Z5Y3lBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCb1lXNWtiR1Z5UzJWNUlEMGdhMlY1U0dGdVpHeGxjbk11Y21Wd2JHRmpaU2h6ZEhKcGNGVnBaRkpsWjJWNExDQW5KeWs3WEc1Y2JpQWdJQ0FnSUdsbUlDZ2hhVzVPWVcxbGMzQmhZMlVnZkh3Z2IzSnBaMmx1WVd4VWVYQmxSWFpsYm5RdWFXNWpiSFZrWlhNb2FHRnVaR3hsY2t0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaWFpsYm5RZ1BTQnpkRzl5WlVWc1pXMWxiblJGZG1WdWRGdHJaWGxJWVc1a2JHVnljMTA3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVWhoYm1Sc1pYSW9aV3hsYldWdWRDd2daWFpsYm5SekxDQjBlWEJsUlhabGJuUXNJR1YyWlc1MExtOXlhV2RwYm1Gc1NHRnVaR3hsY2l3Z1pYWmxiblF1WkdWc1pXZGhkR2x2YmxObGJHVmpkRzl5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmU3hjYmx4dUlDQjBjbWxuWjJWeUtHVnNaVzFsYm5Rc0lHVjJaVzUwTENCaGNtZHpLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJsZG1WdWRDQWhQVDBnSjNOMGNtbHVaeWNnZkh3Z0lXVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUNRZ1BTQm5aWFJxVVhWbGNua29LVHRjYmlBZ0lDQmpiMjV6ZENCMGVYQmxSWFpsYm5RZ1BTQm5aWFJVZVhCbFJYWmxiblFvWlhabGJuUXBPMXh1SUNBZ0lHTnZibk4wSUdsdVRtRnRaWE53WVdObElEMGdaWFpsYm5RZ0lUMDlJSFI1Y0dWRmRtVnVkRHRjYmlBZ0lDQmpiMjV6ZENCcGMwNWhkR2wyWlNBOUlHNWhkR2wyWlVWMlpXNTBjeTVvWVhNb2RIbHdaVVYyWlc1MEtUdGNiaUFnSUNCc1pYUWdhbEYxWlhKNVJYWmxiblE3WEc0Z0lDQWdiR1YwSUdKMVltSnNaWE1nUFNCMGNuVmxPMXh1SUNBZ0lHeGxkQ0J1WVhScGRtVkVhWE53WVhSamFDQTlJSFJ5ZFdVN1hHNGdJQ0FnYkdWMElHUmxabUYxYkhSUWNtVjJaVzUwWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JzWlhRZ1pYWjBJRDBnYm5Wc2JEdGNibHh1SUNBZ0lHbG1JQ2hwYms1aGJXVnpjR0ZqWlNBbUppQWtLU0I3WEc0Z0lDQWdJQ0JxVVhWbGNubEZkbVZ1ZENBOUlDUXVSWFpsYm5Rb1pYWmxiblFzSUdGeVozTXBPMXh1SUNBZ0lDQWdKQ2hsYkdWdFpXNTBLUzUwY21sbloyVnlLR3BSZFdWeWVVVjJaVzUwS1R0Y2JpQWdJQ0FnSUdKMVltSnNaWE1nUFNBaGFsRjFaWEo1UlhabGJuUXVhWE5RY205d1lXZGhkR2x2YmxOMGIzQndaV1FvS1R0Y2JpQWdJQ0FnSUc1aGRHbDJaVVJwYzNCaGRHTm9JRDBnSVdwUmRXVnllVVYyWlc1MExtbHpTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjVUZEc5d2NHVmtLQ2s3WEc0Z0lDQWdJQ0JrWldaaGRXeDBVSEpsZG1WdWRHVmtJRDBnYWxGMVpYSjVSWFpsYm5RdWFYTkVaV1poZFd4MFVISmxkbVZ1ZEdWa0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2x6VG1GMGFYWmxLU0I3WEc0Z0lDQWdJQ0JsZG5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmRtVnVkQ2duU0ZSTlRFVjJaVzUwY3ljcE8xeHVJQ0FnSUNBZ1pYWjBMbWx1YVhSRmRtVnVkQ2gwZVhCbFJYWmxiblFzSUdKMVltSnNaWE1zSUhSeWRXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCbGRuUWdQU0J1WlhjZ1EzVnpkRzl0UlhabGJuUW9aWFpsYm5Rc0lIdGNiaUFnSUNBZ0lDQWdZblZpWW14bGN5eGNiaUFnSUNBZ0lDQWdZMkZ1WTJWc1lXSnNaVG9nZEhKMVpWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQXZMeUJ0WlhKblpTQmpkWE4wYjIwZ2FXNW1iM0p0WVhScGIyNGdhVzRnYjNWeUlHVjJaVzUwWEc1Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1lYSm5jeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0dGeVozTXBMbVp2Y2tWaFkyZ29hMlY1SUQwK0lIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWMmRDd2dhMlY1TENCN1hHNGdJQ0FnSUNBZ0lDQWdaMlYwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z5WjNOYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1pHVm1ZWFZzZEZCeVpYWmxiblJsWkNrZ2UxeHVJQ0FnSUNBZ1pYWjBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzVoZEdsMlpVUnBjM0JoZEdOb0tTQjdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvWlhaMEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aWFowTG1SbFptRjFiSFJRY21WMlpXNTBaV1FnSmlZZ2RIbHdaVzltSUdwUmRXVnllVVYyWlc1MElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2FsRjFaWEo1UlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWlhaME8xeHVJQ0I5WEc1Y2JuMDdYRzVjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRUp2YjNSemRISmhjQ0FvZGpVdU1TNHpLVG9nWkc5dEwyUmhkR0V1YW5OY2JpQXFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlFMUpWQ0FvYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNSM1luTXZZbTl2ZEhOMGNtRndMMkpzYjJJdmJXRnBiaTlNU1VORlRsTkZLVnh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5dWMzUmhiblJ6WEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVkyOXVjM1FnWld4bGJXVnVkRTFoY0NBOUlHNWxkeUJOWVhBb0tUdGNibU52Ym5OMElFUmhkR0VnUFNCN1hHNGdJSE5sZENobGJHVnRaVzUwTENCclpYa3NJR2x1YzNSaGJtTmxLU0I3WEc0Z0lDQWdhV1lnS0NGbGJHVnRaVzUwVFdGd0xtaGhjeWhsYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnWld4bGJXVnVkRTFoY0M1elpYUW9aV3hsYldWdWRDd2dibVYzSUUxaGNDZ3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCcGJuTjBZVzVqWlUxaGNDQTlJR1ZzWlcxbGJuUk5ZWEF1WjJWMEtHVnNaVzFsYm5RcE95QXZMeUJ0WVd0bElHbDBJR05zWldGeUlIZGxJRzl1YkhrZ2QyRnVkQ0J2Ym1VZ2FXNXpkR0Z1WTJVZ2NHVnlJR1ZzWlcxbGJuUmNiaUFnSUNBdkx5QmpZVzRnWW1VZ2NtVnRiM1psWkNCc1lYUmxjaUIzYUdWdUlHMTFiSFJwY0d4bElHdGxlUzlwYm5OMFlXNWpaWE1nWVhKbElHWnBibVVnZEc4Z1ltVWdkWE5sWkZ4dVhHNGdJQ0FnYVdZZ0tDRnBibk4wWVc1alpVMWhjQzVvWVhNb2EyVjVLU0FtSmlCcGJuTjBZVzVqWlUxaGNDNXphWHBsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dFkyOXVjMjlzWlZ4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGdRbTl2ZEhOMGNtRndJR1J2WlhOdUozUWdZV3hzYjNjZ2JXOXlaU0IwYUdGdUlHOXVaU0JwYm5OMFlXNWpaU0J3WlhJZ1pXeGxiV1Z1ZEM0Z1FtOTFibVFnYVc1emRHRnVZMlU2SUNSN1FYSnlZWGt1Wm5KdmJTaHBibk4wWVc1alpVMWhjQzVyWlhsektDa3BXekJkZlM1Z0tUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwYm5OMFlXNWpaVTFoY0M1elpYUW9hMlY1TENCcGJuTjBZVzVqWlNrN1hHNGdJSDBzWEc1Y2JpQWdaMlYwS0dWc1pXMWxiblFzSUd0bGVTa2dlMXh1SUNBZ0lHbG1JQ2hsYkdWdFpXNTBUV0Z3TG1oaGN5aGxiR1Z0Wlc1MEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHVnNaVzFsYm5STllYQXVaMlYwS0dWc1pXMWxiblFwTG1kbGRDaHJaWGtwSUh4OElHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMHNYRzVjYmlBZ2NtVnRiM1psS0dWc1pXMWxiblFzSUd0bGVTa2dlMXh1SUNBZ0lHbG1JQ2doWld4bGJXVnVkRTFoY0M1b1lYTW9aV3hsYldWdWRDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JwYm5OMFlXNWpaVTFoY0NBOUlHVnNaVzFsYm5STllYQXVaMlYwS0dWc1pXMWxiblFwTzF4dUlDQWdJR2x1YzNSaGJtTmxUV0Z3TG1SbGJHVjBaU2hyWlhrcE95QXZMeUJtY21WbElIVndJR1ZzWlcxbGJuUWdjbVZtWlhKbGJtTmxjeUJwWmlCMGFHVnlaU0JoY21VZ2JtOGdhVzV6ZEdGdVkyVnpJR3hsWm5RZ1ptOXlJR0Z1SUdWc1pXMWxiblJjYmx4dUlDQWdJR2xtSUNocGJuTjBZVzVqWlUxaGNDNXphWHBsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0JsYkdWdFpXNTBUV0Z3TG1SbGJHVjBaU2hsYkdWdFpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVHRjYmx4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUW05dmRITjBjbUZ3SUNoMk5TNHhMak1wT2lCaVlYTmxMV052YlhCdmJtVnVkQzVxYzF4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ1RVbFVJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEhkaWN5OWliMjkwYzNSeVlYQXZZbXh2WWk5dFlXbHVMMHhKUTBWT1UwVXBYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRMjl1YzNSaGJuUnpYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1WEc1amIyNXpkQ0JXUlZKVFNVOU9JRDBnSnpVdU1TNHpKenRjYmx4dVkyeGhjM01nUW1GelpVTnZiWEJ2Ym1WdWRDQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHVnNaVzFsYm5RcElIdGNiaUFnSUNCbGJHVnRaVzUwSUQwZ1oyVjBSV3hsYldWdWRDaGxiR1Z0Wlc1MEtUdGNibHh1SUNBZ0lHbG1JQ2doWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblFnUFNCbGJHVnRaVzUwTzF4dUlDQWdJRVJoZEdFdWMyVjBLSFJvYVhNdVgyVnNaVzFsYm5Rc0lIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJFRlVRVjlMUlZrc0lIUm9hWE1wTzF4dUlDQjlYRzVjYmlBZ1pHbHpjRzl6WlNncElIdGNiaUFnSUNCRVlYUmhMbkpsYlc5MlpTaDBhR2x6TGw5bGJHVnRaVzUwTENCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtSQlZFRmZTMFZaS1R0Y2JpQWdJQ0JGZG1WdWRFaGhibVJzWlhJdWIyWm1LSFJvYVhNdVgyVnNaVzFsYm5Rc0lIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJWWkZUbFJmUzBWWktUdGNiaUFnSUNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loMGFHbHpLUzVtYjNKRllXTm9LSEJ5YjNCbGNuUjVUbUZ0WlNBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6VzNCeWIzQmxjblI1VG1GdFpWMGdQU0J1ZFd4c08xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYM0YxWlhWbFEyRnNiR0poWTJzb1kyRnNiR0poWTJzc0lHVnNaVzFsYm5Rc0lHbHpRVzVwYldGMFpXUWdQU0IwY25WbEtTQjdYRzRnSUNBZ1pYaGxZM1YwWlVGbWRHVnlWSEpoYm5OcGRHbHZiaWhqWVd4c1ltRmpheXdnWld4bGJXVnVkQ3dnYVhOQmJtbHRZWFJsWkNrN1hHNGdJSDFjYmlBZ0x5b3FJRk4wWVhScFl5QXFMMXh1WEc1Y2JpQWdjM1JoZEdsaklHZGxkRWx1YzNSaGJtTmxLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1JHRjBZUzVuWlhRb1oyVjBSV3hsYldWdWRDaGxiR1Z0Wlc1MEtTd2dkR2hwY3k1RVFWUkJYMHRGV1NrN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaGxiR1Z0Wlc1MExDQmpiMjVtYVdjZ1BTQjdmU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFbHVjM1JoYm1ObEtHVnNaVzFsYm5RcElIeDhJRzVsZHlCMGFHbHpLR1ZzWlcxbGJuUXNJSFI1Y0dWdlppQmpiMjVtYVdjZ1BUMDlJQ2R2WW1wbFkzUW5JRDhnWTI5dVptbG5JRG9nYm5Wc2JDazdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwSUZaRlVsTkpUMDRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRlpGVWxOSlQwNDdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwSUU1QlRVVW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFpiM1VnYUdGMlpTQjBieUJwYlhCc1pXMWxiblFnZEdobElITjBZWFJwWXlCdFpYUm9iMlFnWENKT1FVMUZYQ0lzSUdadmNpQmxZV05vSUdOdmJYQnZibVZ1ZENFbktUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnUkVGVVFWOUxSVmtvS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0JpY3k0a2UzUm9hWE11VGtGTlJYMWdPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZENCRlZrVk9WRjlMUlZrb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdBdUpIdDBhR2x6TGtSQlZFRmZTMFZaZldBN1hHNGdJSDFjYmx4dWZWeHVYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkNiMjkwYzNSeVlYQWdLSFkxTGpFdU15azZJSFYwYVd3dlkyOXRjRzl1Wlc1MExXWjFibU4wYVc5dWN5NXFjMXh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnVFVsVUlDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkSGRpY3k5aWIyOTBjM1J5WVhBdllteHZZaTl0WVdsdUwweEpRMFZPVTBVcFhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYm1OdmJuTjBJR1Z1WVdKc1pVUnBjMjFwYzNOVWNtbG5aMlZ5SUQwZ0tHTnZiWEJ2Ym1WdWRDd2diV1YwYUc5a0lEMGdKMmhwWkdVbktTQTlQaUI3WEc0Z0lHTnZibk4wSUdOc2FXTnJSWFpsYm5RZ1BTQmdZMnhwWTJzdVpHbHpiV2x6Y3lSN1kyOXRjRzl1Wlc1MExrVldSVTVVWDB0RldYMWdPMXh1SUNCamIyNXpkQ0J1WVcxbElEMGdZMjl0Y0c5dVpXNTBMazVCVFVVN1hHNGdJRVYyWlc1MFNHRnVaR3hsY2k1dmJpaGtiMk4xYldWdWRDd2dZMnhwWTJ0RmRtVnVkQ3dnWUZ0a1lYUmhMV0p6TFdScGMyMXBjM005WENJa2UyNWhiV1Y5WENKZFlDd2dablZ1WTNScGIyNGdLR1YyWlc1MEtTQjdYRzRnSUNBZ2FXWWdLRnNuUVNjc0lDZEJVa1ZCSjEwdWFXNWpiSFZrWlhNb2RHaHBjeTUwWVdkT1lXMWxLU2tnZTF4dUlDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hWE5FYVhOaFlteGxaQ2gwYUdsektTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSFJoY21kbGRDQTlJR2RsZEVWc1pXMWxiblJHY205dFUyVnNaV04wYjNJb2RHaHBjeWtnZkh3Z2RHaHBjeTVqYkc5elpYTjBLR0F1Skh0dVlXMWxmV0FwTzF4dUlDQWdJR052Ym5OMElHbHVjM1JoYm1ObElEMGdZMjl0Y0c5dVpXNTBMbWRsZEU5eVEzSmxZWFJsU1c1emRHRnVZMlVvZEdGeVoyVjBLVHNnTHk4Z1RXVjBhRzlrSUdGeVozVnRaVzUwSUdseklHeGxablFzSUdadmNpQkJiR1Z5ZENCaGJtUWdiMjVzZVN3Z1lYTWdhWFFnWkc5bGMyNG5kQ0JwYlhCc1pXMWxiblFnZEdobElDZG9hV1JsSnlCdFpYUm9iMlJjYmx4dUlDQWdJR2x1YzNSaGJtTmxXMjFsZEdodlpGMG9LVHRjYmlBZ2ZTazdYRzU5TzF4dVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2lCQ2IyOTBjM1J5WVhBZ0tIWTFMakV1TXlrNklHRnNaWEowTG1welhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQk5TVlFnS0doMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGQySnpMMkp2YjNSemRISmhjQzlpYkc5aUwyMWhhVzR2VEVsRFJVNVRSU2xjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjI1emRHRnVkSE5jYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JtTnZibk4wSUU1QlRVVWtaQ0E5SUNkaGJHVnlkQ2M3WEc1amIyNXpkQ0JFUVZSQlgwdEZXU1JqSUQwZ0oySnpMbUZzWlhKMEp6dGNibU52Ym5OMElFVldSVTVVWDB0RldTUmpJRDBnWUM0a2UwUkJWRUZmUzBWWkpHTjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgwTk1UMU5GSUQwZ1lHTnNiM05sSkh0RlZrVk9WRjlMUlZra1kzMWdPMXh1WTI5dWMzUWdSVlpGVGxSZlEweFBVMFZFSUQwZ1lHTnNiM05sWkNSN1JWWkZUbFJmUzBWWkpHTjlZRHRjYm1OdmJuTjBJRU5NUVZOVFgwNUJUVVZmUmtGRVJTUTFJRDBnSjJaaFpHVW5PMXh1WTI5dWMzUWdRMHhCVTFOZlRrRk5SVjlUU0U5WEpEZ2dQU0FuYzJodmR5YzdYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyeGhjM01nUkdWbWFXNXBkR2x2Ymx4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JseHVZMnhoYzNNZ1FXeGxjblFnWlhoMFpXNWtjeUJDWVhObFEyOXRjRzl1Wlc1MElIdGNiaUFnTHk4Z1IyVjBkR1Z5YzF4dUlDQnpkR0YwYVdNZ1oyVjBJRTVCVFVVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUU1QlRVVWtaRHRjYmlBZ2ZTQXZMeUJRZFdKc2FXTmNibHh1WEc0Z0lHTnNiM05sS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR05zYjNObFJYWmxiblFnUFNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlEVEU5VFJTazdYRzVjYmlBZ0lDQnBaaUFvWTJ4dmMyVkZkbVZ1ZEM1a1pXWmhkV3gwVUhKbGRtVnVkR1ZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0VOTVFWTlRYMDVCVFVWZlUwaFBWeVE0S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR2x6UVc1cGJXRjBaV1FnUFNCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWhEVEVGVFUxOU9RVTFGWDBaQlJFVWtOU2s3WEc1Y2JpQWdJQ0IwYUdsekxsOXhkV1YxWlVOaGJHeGlZV05yS0NncElEMCtJSFJvYVhNdVgyUmxjM1J5YjNsRmJHVnRaVzUwS0Nrc0lIUm9hWE11WDJWc1pXMWxiblFzSUdselFXNXBiV0YwWldRcE8xeHVJQ0I5SUM4dklGQnlhWFpoZEdWY2JseHVYRzRnSUY5a1pYTjBjbTk1Uld4bGJXVnVkQ2dwSUh0Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MExuSmxiVzkyWlNncE8xeHVYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMblJ5YVdkblpYSW9kR2hwY3k1ZlpXeGxiV1Z1ZEN3Z1JWWkZUbFJmUTB4UFUwVkVLVHRjYmlBZ0lDQjBhR2x6TG1ScGMzQnZjMlVvS1R0Y2JpQWdmU0F2THlCVGRHRjBhV05jYmx4dVhHNGdJSE4wWVhScFl5QnFVWFZsY25sSmJuUmxjbVpoWTJVb1kyOXVabWxuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdRV3hsY25RdVoyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaDBhR2x6S1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjVtYVdjZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHUmhkR0ZiWTI5dVptbG5YU0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJR052Ym1acFp5NXpkR0Z5ZEhOWGFYUm9LQ2RmSnlrZ2ZId2dZMjl1Wm1sbklEMDlQU0FuWTI5dWMzUnlkV04wYjNJbktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUU1dklHMWxkR2h2WkNCdVlXMWxaQ0JjSWlSN1kyOXVabWxuZlZ3aVlDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1JoZEdGYlkyOXVabWxuWFNoMGFHbHpLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzU5WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dSR0YwWVNCQmNHa2dhVzF3YkdWdFpXNTBZWFJwYjI1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNWNibHh1Wlc1aFlteGxSR2x6YldsemMxUnlhV2RuWlhJb1FXeGxjblFzSUNkamJHOXpaU2NwTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR3BSZFdWeWVWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQmhaR1FnTGtGc1pYSjBJSFJ2SUdwUmRXVnllU0J2Ym14NUlHbG1JR3BSZFdWeWVTQnBjeUJ3Y21WelpXNTBYRzRnS2k5Y2JseHVaR1ZtYVc1bFNsRjFaWEo1VUd4MVoybHVLRUZzWlhKMEtUdGNibHh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRbTl2ZEhOMGNtRndJQ2gyTlM0eExqTXBPaUJpZFhSMGIyNHVhbk5jYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUUxSlZDQW9hSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1IzWW5NdlltOXZkSE4wY21Gd0wySnNiMkl2YldGcGJpOU1TVU5GVGxORktWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlFTnZibk4wWVc1MGMxeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibHh1WTI5dWMzUWdUa0ZOUlNSaklEMGdKMkoxZEhSdmJpYzdYRzVqYjI1emRDQkVRVlJCWDB0RldTUmlJRDBnSjJKekxtSjFkSFJ2YmljN1hHNWpiMjV6ZENCRlZrVk9WRjlMUlZra1lpQTlJR0F1Skh0RVFWUkJYMHRGV1NSaWZXQTdYRzVqYjI1emRDQkVRVlJCWDBGUVNWOUxSVmtrTnlBOUlDY3VaR0YwWVMxaGNHa25PMXh1WTI5dWMzUWdRMHhCVTFOZlRrRk5SVjlCUTFSSlZrVWtNeUE5SUNkaFkzUnBkbVVuTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmUkVGVVFWOVVUMGRIVEVVa05TQTlJQ2RiWkdGMFlTMWljeTEwYjJkbmJHVTlYQ0ppZFhSMGIyNWNJbDBuTzF4dVkyOXVjM1FnUlZaRlRsUmZRMHhKUTB0ZlJFRlVRVjlCVUVra05pQTlJR0JqYkdsamF5UjdSVlpGVGxSZlMwVlpKR0o5Skh0RVFWUkJYMEZRU1Y5TFJWa2tOMzFnTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRU5zWVhOeklFUmxabWx1YVhScGIyNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRUoxZEhSdmJpQmxlSFJsYm1SeklFSmhjMlZEYjIxd2IyNWxiblFnZTF4dUlDQXZMeUJIWlhSMFpYSnpYRzRnSUhOMFlYUnBZeUJuWlhRZ1RrRk5SU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUa0ZOUlNSak8xeHVJQ0I5SUM4dklGQjFZbXhwWTF4dVhHNWNiaUFnZEc5bloyeGxLQ2tnZTF4dUlDQWdJQzh2SUZSdloyZHNaU0JqYkdGemN5QmhibVFnYzNsdVl5QjBhR1VnWUdGeWFXRXRjSEpsYzNObFpHQWdZWFIwY21saWRYUmxJSGRwZEdnZ2RHaGxJSEpsZEhWeWJpQjJZV3gxWlNCdlppQjBhR1VnWUM1MGIyZG5iR1VvS1dBZ2JXVjBhRzlrWEc0Z0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEM1elpYUkJkSFJ5YVdKMWRHVW9KMkZ5YVdFdGNISmxjM05sWkNjc0lIUm9hWE11WDJWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG5SdloyZHNaU2hEVEVGVFUxOU9RVTFGWDBGRFZFbFdSU1F6S1NrN1hHNGdJSDBnTHk4Z1UzUmhkR2xqWEc1Y2JseHVJQ0J6ZEdGMGFXTWdhbEYxWlhKNVNXNTBaWEptWVdObEtHTnZibVpwWnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJRUoxZEhSdmJpNW5aWFJQY2tOeVpXRjBaVWx1YzNSaGJtTmxLSFJvYVhNcE8xeHVYRzRnSUNBZ0lDQnBaaUFvWTI5dVptbG5JRDA5UFNBbmRHOW5aMnhsSnlrZ2UxeHVJQ0FnSUNBZ0lDQmtZWFJoVzJOdmJtWnBaMTBvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc1OVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUkdGMFlTQkJjR2tnYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYmx4dVJYWmxiblJJWVc1a2JHVnlMbTl1S0dSdlkzVnRaVzUwTENCRlZrVk9WRjlEVEVsRFMxOUVRVlJCWDBGUVNTUTJMQ0JUUlV4RlExUlBVbDlFUVZSQlgxUlBSMGRNUlNRMUxDQmxkbVZ1ZENBOVBpQjdYRzRnSUdWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUdOdmJuTjBJR0oxZEhSdmJpQTlJR1YyWlc1MExuUmhjbWRsZEM1amJHOXpaWE4wS0ZORlRFVkRWRTlTWDBSQlZFRmZWRTlIUjB4RkpEVXBPMXh1SUNCamIyNXpkQ0JrWVhSaElEMGdRblYwZEc5dUxtZGxkRTl5UTNKbFlYUmxTVzV6ZEdGdVkyVW9ZblYwZEc5dUtUdGNiaUFnWkdGMFlTNTBiMmRuYkdVb0tUdGNibjBwTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR3BSZFdWeWVWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQmhaR1FnTGtKMWRIUnZiaUIwYnlCcVVYVmxjbmtnYjI1c2VTQnBaaUJxVVhWbGNua2dhWE1nY0hKbGMyVnVkRnh1SUNvdlhHNWNibVJsWm1sdVpVcFJkV1Z5ZVZCc2RXZHBiaWhDZFhSMGIyNHBPMXh1WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJDYjI5MGMzUnlZWEFnS0hZMUxqRXVNeWs2SUdSdmJTOXRZVzVwY0hWc1lYUnZjaTVxYzF4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ1RVbFVJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEhkaWN5OWliMjkwYzNSeVlYQXZZbXh2WWk5dFlXbHVMMHhKUTBWT1UwVXBYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1bWRXNWpkR2x2YmlCdWIzSnRZV3hwZW1WRVlYUmhLSFpoYkNrZ2UxeHVJQ0JwWmlBb2RtRnNJRDA5UFNBbmRISjFaU2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2gyWVd3Z1BUMDlJQ2RtWVd4elpTY3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCcFppQW9kbUZzSUQwOVBTQk9kVzFpWlhJb2RtRnNLUzUwYjFOMGNtbHVaeWdwS1NCN1hHNGdJQ0FnY21WMGRYSnVJRTUxYldKbGNpaDJZV3dwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFpoYkNBOVBUMGdKeWNnZkh3Z2RtRnNJRDA5UFNBbmJuVnNiQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMllXdzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpVUmhkR0ZMWlhrb2EyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCclpYa3VjbVZ3YkdGalpTZ3ZXMEV0V2wwdlp5d2dZMmh5SUQwK0lHQXRKSHRqYUhJdWRHOU1iM2RsY2tOaGMyVW9LWDFnS1R0Y2JuMWNibHh1WTI5dWMzUWdUV0Z1YVhCMWJHRjBiM0lnUFNCN1hHNGdJSE5sZEVSaGRHRkJkSFJ5YVdKMWRHVW9aV3hsYldWdWRDd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQWdJR1ZzWlcxbGJuUXVjMlYwUVhSMGNtbGlkWFJsS0dCa1lYUmhMV0p6TFNSN2JtOXliV0ZzYVhwbFJHRjBZVXRsZVNoclpYa3BmV0FzSUhaaGJIVmxLVHRjYmlBZ2ZTeGNibHh1SUNCeVpXMXZkbVZFWVhSaFFYUjBjbWxpZFhSbEtHVnNaVzFsYm5Rc0lHdGxlU2tnZTF4dUlDQWdJR1ZzWlcxbGJuUXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtHQmtZWFJoTFdKekxTUjdibTl5YldGc2FYcGxSR0YwWVV0bGVTaHJaWGtwZldBcE8xeHVJQ0I5TEZ4dVhHNGdJR2RsZEVSaGRHRkJkSFJ5YVdKMWRHVnpLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQnBaaUFvSVdWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3ZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmhkSFJ5YVdKMWRHVnpJRDBnZTMwN1hHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1pXeGxiV1Z1ZEM1a1lYUmhjMlYwS1M1bWFXeDBaWElvYTJWNUlEMCtJR3RsZVM1emRHRnlkSE5YYVhSb0tDZGljeWNwS1M1bWIzSkZZV05vS0d0bGVTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2NIVnlaVXRsZVNBOUlHdGxlUzV5WlhCc1lXTmxLQzllWW5NdkxDQW5KeWs3WEc0Z0lDQWdJQ0J3ZFhKbFMyVjVJRDBnY0hWeVpVdGxlUzVqYUdGeVFYUW9NQ2t1ZEc5TWIzZGxja05oYzJVb0tTQXJJSEIxY21WTFpYa3VjMnhwWTJVb01Td2djSFZ5WlV0bGVTNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ1lYUjBjbWxpZFhSbGMxdHdkWEpsUzJWNVhTQTlJRzV2Y20xaGJHbDZaVVJoZEdFb1pXeGxiV1Z1ZEM1a1lYUmhjMlYwVzJ0bGVWMHBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCaGRIUnlhV0oxZEdWek8xeHVJQ0I5TEZ4dVhHNGdJR2RsZEVSaGRHRkJkSFJ5YVdKMWRHVW9aV3hsYldWdWRDd2dhMlY1S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzV2Y20xaGJHbDZaVVJoZEdFb1pXeGxiV1Z1ZEM1blpYUkJkSFJ5YVdKMWRHVW9ZR1JoZEdFdFluTXRKSHR1YjNKdFlXeHBlbVZFWVhSaFMyVjVLR3RsZVNsOVlDa3BPMXh1SUNCOUxGeHVYRzRnSUc5bVpuTmxkQ2hsYkdWdFpXNTBLU0I3WEc0Z0lDQWdZMjl1YzNRZ2NtVmpkQ0E5SUdWc1pXMWxiblF1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDazdYRzRnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUhSdmNEb2djbVZqZEM1MGIzQWdLeUIzYVc1a2IzY3VjR0ZuWlZsUFptWnpaWFFzWEc0Z0lDQWdJQ0JzWldaME9pQnlaV04wTG14bFpuUWdLeUIzYVc1a2IzY3VjR0ZuWlZoUFptWnpaWFJjYmlBZ0lDQjlPMXh1SUNCOUxGeHVYRzRnSUhCdmMybDBhVzl1S0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdkRzl3T2lCbGJHVnRaVzUwTG05bVpuTmxkRlJ2Y0N4Y2JpQWdJQ0FnSUd4bFpuUTZJR1ZzWlcxbGJuUXViMlptYzJWMFRHVm1kRnh1SUNBZ0lIMDdYRzRnSUgxY2JseHVmVHRjYmx4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUW05dmRITjBjbUZ3SUNoMk5TNHhMak1wT2lCa2IyMHZjMlZzWldOMGIzSXRaVzVuYVc1bExtcHpYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUJOU1ZRZ0tHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBkMkp6TDJKdmIzUnpkSEpoY0M5aWJHOWlMMjFoYVc0dlRFbERSVTVUUlNsY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibU52Ym5OMElFNVBSRVZmVkVWWVZDQTlJRE03WEc1amIyNXpkQ0JUWld4bFkzUnZja1Z1WjJsdVpTQTlJSHRjYmlBZ1ptbHVaQ2h6Wld4bFkzUnZjaXdnWld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQmJYUzVqYjI1allYUW9MaTR1Uld4bGJXVnVkQzV3Y205MGIzUjVjR1V1Y1hWbGNubFRaV3hsWTNSdmNrRnNiQzVqWVd4c0tHVnNaVzFsYm5Rc0lITmxiR1ZqZEc5eUtTazdYRzRnSUgwc1hHNWNiaUFnWm1sdVpFOXVaU2h6Wld4bFkzUnZjaXdnWld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQkZiR1Z0Wlc1MExuQnliM1J2ZEhsd1pTNXhkV1Z5ZVZObGJHVmpkRzl5TG1OaGJHd29aV3hsYldWdWRDd2djMlZzWldOMGIzSXBPMXh1SUNCOUxGeHVYRzRnSUdOb2FXeGtjbVZ1S0dWc1pXMWxiblFzSUhObGJHVmpkRzl5S1NCN1hHNGdJQ0FnY21WMGRYSnVJRnRkTG1OdmJtTmhkQ2d1TGk1bGJHVnRaVzUwTG1Ob2FXeGtjbVZ1S1M1bWFXeDBaWElvWTJocGJHUWdQVDRnWTJocGJHUXViV0YwWTJobGN5aHpaV3hsWTNSdmNpa3BPMXh1SUNCOUxGeHVYRzRnSUhCaGNtVnVkSE1vWld4bGJXVnVkQ3dnYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0JqYjI1emRDQndZWEpsYm5SeklEMGdXMTA3WEc0Z0lDQWdiR1YwSUdGdVkyVnpkRzl5SUQwZ1pXeGxiV1Z1ZEM1d1lYSmxiblJPYjJSbE8xeHVYRzRnSUNBZ2QyaHBiR1VnS0dGdVkyVnpkRzl5SUNZbUlHRnVZMlZ6ZEc5eUxtNXZaR1ZVZVhCbElEMDlQU0JPYjJSbExrVk1SVTFGVGxSZlRrOUVSU0FtSmlCaGJtTmxjM1J2Y2k1dWIyUmxWSGx3WlNBaFBUMGdUazlFUlY5VVJWaFVLU0I3WEc0Z0lDQWdJQ0JwWmlBb1lXNWpaWE4wYjNJdWJXRjBZMmhsY3loelpXeGxZM1J2Y2lrcElIdGNiaUFnSUNBZ0lDQWdjR0Z5Wlc1MGN5NXdkWE5vS0dGdVkyVnpkRzl5S1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1lXNWpaWE4wYjNJZ1BTQmhibU5sYzNSdmNpNXdZWEpsYm5ST2IyUmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCd1lYSmxiblJ6TzF4dUlDQjlMRnh1WEc0Z0lIQnlaWFlvWld4bGJXVnVkQ3dnYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0JzWlhRZ2NISmxkbWx2ZFhNZ1BTQmxiR1Z0Wlc1MExuQnlaWFpwYjNWelJXeGxiV1Z1ZEZOcFlteHBibWM3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9jSEpsZG1sdmRYTXBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtVjJhVzkxY3k1dFlYUmphR1Z6S0hObGJHVmpkRzl5S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1czQnlaWFpwYjNWelhUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjSEpsZG1sdmRYTWdQU0J3Y21WMmFXOTFjeTV3Y21WMmFXOTFjMFZzWlcxbGJuUlRhV0pzYVc1bk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJiWFR0Y2JpQWdmU3hjYmx4dUlDQnVaWGgwS0dWc1pXMWxiblFzSUhObGJHVmpkRzl5S1NCN1hHNGdJQ0FnYkdWMElHNWxlSFFnUFNCbGJHVnRaVzUwTG01bGVIUkZiR1Z0Wlc1MFUybGliR2x1Wnp0Y2JseHVJQ0FnSUhkb2FXeGxJQ2h1WlhoMEtTQjdYRzRnSUNBZ0lDQnBaaUFvYm1WNGRDNXRZWFJqYUdWektITmxiR1ZqZEc5eUtTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMjVsZUhSZE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnVaWGgwSUQwZ2JtVjRkQzV1WlhoMFJXeGxiV1Z1ZEZOcFlteHBibWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlGdGRPMXh1SUNCOUxGeHVYRzRnSUdadlkzVnpZV0pzWlVOb2FXeGtjbVZ1S0dWc1pXMWxiblFwSUh0Y2JpQWdJQ0JqYjI1emRDQm1iMk4xYzJGaWJHVnpJRDBnV3lkaEp5d2dKMkoxZEhSdmJpY3NJQ2RwYm5CMWRDY3NJQ2QwWlhoMFlYSmxZU2NzSUNkelpXeGxZM1FuTENBblpHVjBZV2xzY3ljc0lDZGJkR0ZpYVc1a1pYaGRKeXdnSjF0amIyNTBaVzUwWldScGRHRmliR1U5WENKMGNuVmxYQ0pkSjEwdWJXRndLSE5sYkdWamRHOXlJRDArSUdBa2UzTmxiR1ZqZEc5eWZUcHViM1FvVzNSaFltbHVaR1Y0WGoxY0lpMWNJbDBwWUNrdWFtOXBiaWduTENBbktUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1hVzVrS0dadlkzVnpZV0pzWlhNc0lHVnNaVzFsYm5RcExtWnBiSFJsY2lobGJDQTlQaUFoYVhORWFYTmhZbXhsWkNobGJDa2dKaVlnYVhOV2FYTnBZbXhsS0dWc0tTazdYRzRnSUgxY2JseHVmVHRjYmx4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUW05dmRITjBjbUZ3SUNoMk5TNHhMak1wT2lCallYSnZkWE5sYkM1cWMxeHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdUVWxVSUNob2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRIZGljeTlpYjI5MGMzUnlZWEF2WW14dllpOXRZV2x1TDB4SlEwVk9VMFVwWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5dWMzUmhiblJ6WEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNWpiMjV6ZENCT1FVMUZKR0lnUFNBblkyRnliM1Z6Wld3bk8xeHVZMjl1YzNRZ1JFRlVRVjlMUlZra1lTQTlJQ2RpY3k1allYSnZkWE5sYkNjN1hHNWpiMjV6ZENCRlZrVk9WRjlMUlZra1lTQTlJR0F1Skh0RVFWUkJYMHRGV1NSaGZXQTdYRzVqYjI1emRDQkVRVlJCWDBGUVNWOUxSVmtrTmlBOUlDY3VaR0YwWVMxaGNHa25PMXh1WTI5dWMzUWdRVkpTVDFkZlRFVkdWRjlMUlZrZ1BTQW5RWEp5YjNkTVpXWjBKenRjYm1OdmJuTjBJRUZTVWs5WFgxSkpSMGhVWDB0RldTQTlJQ2RCY25KdmQxSnBaMmgwSnp0Y2JtTnZibk4wSUZSUFZVTklSVlpGVGxSZlEwOU5VRUZVWDFkQlNWUWdQU0ExTURBN0lDOHZJRlJwYldVZ1ptOXlJRzF2ZFhObElHTnZiWEJoZENCbGRtVnVkSE1nZEc4Z1ptbHlaU0JoWm5SbGNpQjBiM1ZqYUZ4dVhHNWpiMjV6ZENCVFYwbFFSVjlVU0ZKRlUwaFBURVFnUFNBME1EdGNibU52Ym5OMElFUmxabUYxYkhRa1lTQTlJSHRjYmlBZ2FXNTBaWEoyWVd3NklEVXdNREFzWEc0Z0lHdGxlV0p2WVhKa09pQjBjblZsTEZ4dUlDQnpiR2xrWlRvZ1ptRnNjMlVzWEc0Z0lIQmhkWE5sT2lBbmFHOTJaWEluTEZ4dUlDQjNjbUZ3T2lCMGNuVmxMRnh1SUNCMGIzVmphRG9nZEhKMVpWeHVmVHRjYm1OdmJuTjBJRVJsWm1GMWJIUlVlWEJsSkdFZ1BTQjdYRzRnSUdsdWRHVnlkbUZzT2lBbktHNTFiV0psY254aWIyOXNaV0Z1S1Njc1hHNGdJR3RsZVdKdllYSmtPaUFuWW05dmJHVmhiaWNzWEc0Z0lITnNhV1JsT2lBbktHSnZiMnhsWVc1OGMzUnlhVzVuS1Njc1hHNGdJSEJoZFhObE9pQW5LSE4wY21sdVozeGliMjlzWldGdUtTY3NYRzRnSUhkeVlYQTZJQ2RpYjI5c1pXRnVKeXhjYmlBZ2RHOTFZMmc2SUNkaWIyOXNaV0Z1SjF4dWZUdGNibU52Ym5OMElFOVNSRVZTWDA1RldGUWdQU0FuYm1WNGRDYzdYRzVqYjI1emRDQlBVa1JGVWw5UVVrVldJRDBnSjNCeVpYWW5PMXh1WTI5dWMzUWdSRWxTUlVOVVNVOU9YMHhGUmxRZ1BTQW5iR1ZtZENjN1hHNWpiMjV6ZENCRVNWSkZRMVJKVDA1ZlVrbEhTRlFnUFNBbmNtbG5hSFFuTzF4dVkyOXVjM1FnUzBWWlgxUlBYMFJKVWtWRFZFbFBUaUE5SUh0Y2JpQWdXMEZTVWs5WFgweEZSbFJmUzBWWlhUb2dSRWxTUlVOVVNVOU9YMUpKUjBoVUxGeHVJQ0JiUVZKU1QxZGZVa2xIU0ZSZlMwVlpYVG9nUkVsU1JVTlVTVTlPWDB4RlJsUmNibjA3WEc1amIyNXpkQ0JGVmtWT1ZGOVRURWxFUlNBOUlHQnpiR2xrWlNSN1JWWkZUbFJmUzBWWkpHRjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgxTk1TVVFnUFNCZ2MyeHBaQ1I3UlZaRlRsUmZTMFZaSkdGOVlEdGNibU52Ym5OMElFVldSVTVVWDB0RldVUlBWMDRnUFNCZ2EyVjVaRzkzYmlSN1JWWkZUbFJmUzBWWkpHRjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgwMVBWVk5GUlU1VVJWSWdQU0JnYlc5MWMyVmxiblJsY2lSN1JWWkZUbFJmUzBWWkpHRjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgwMVBWVk5GVEVWQlZrVWdQU0JnYlc5MWMyVnNaV0YyWlNSN1JWWkZUbFJmUzBWWkpHRjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgxUlBWVU5JVTFSQlVsUWdQU0JnZEc5MVkyaHpkR0Z5ZENSN1JWWkZUbFJmUzBWWkpHRjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgxUlBWVU5JVFU5V1JTQTlJR0IwYjNWamFHMXZkbVVrZTBWV1JVNVVYMHRGV1NSaGZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5VVQxVkRTRVZPUkNBOUlHQjBiM1ZqYUdWdVpDUjdSVlpGVGxSZlMwVlpKR0Y5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMUJQU1U1VVJWSkVUMWRPSUQwZ1lIQnZhVzUwWlhKa2IzZHVKSHRGVmtWT1ZGOUxSVmtrWVgxZ08xeHVZMjl1YzNRZ1JWWkZUbFJmVUU5SlRsUkZVbFZRSUQwZ1lIQnZhVzUwWlhKMWNDUjdSVlpGVGxSZlMwVlpKR0Y5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMFJTUVVkZlUxUkJVbFFnUFNCZ1pISmhaM04wWVhKMEpIdEZWa1ZPVkY5TFJWa2tZWDFnTzF4dVkyOXVjM1FnUlZaRlRsUmZURTlCUkY5RVFWUkJYMEZRU1NReUlEMGdZR3h2WVdRa2UwVldSVTVVWDB0RldTUmhmU1I3UkVGVVFWOUJVRWxmUzBWWkpEWjlZRHRjYm1OdmJuTjBJRVZXUlU1VVgwTk1TVU5MWDBSQlZFRmZRVkJKSkRVZ1BTQmdZMnhwWTJza2UwVldSVTVVWDB0RldTUmhmU1I3UkVGVVFWOUJVRWxmUzBWWkpEWjlZRHRjYm1OdmJuTjBJRU5NUVZOVFgwNUJUVVZmUTBGU1QxVlRSVXdnUFNBblkyRnliM1Z6Wld3bk8xeHVZMjl1YzNRZ1EweEJVMU5mVGtGTlJWOUJRMVJKVmtVa01pQTlJQ2RoWTNScGRtVW5PMXh1WTI5dWMzUWdRMHhCVTFOZlRrRk5SVjlUVEVsRVJTQTlJQ2R6Ykdsa1pTYzdYRzVqYjI1emRDQkRURUZUVTE5T1FVMUZYMFZPUkNBOUlDZGpZWEp2ZFhObGJDMXBkR1Z0TFdWdVpDYzdYRzVqYjI1emRDQkRURUZUVTE5T1FVMUZYMU5VUVZKVUlEMGdKMk5oY205MWMyVnNMV2wwWlcwdGMzUmhjblFuTzF4dVkyOXVjM1FnUTB4QlUxTmZUa0ZOUlY5T1JWaFVJRDBnSjJOaGNtOTFjMlZzTFdsMFpXMHRibVY0ZENjN1hHNWpiMjV6ZENCRFRFRlRVMTlPUVUxRlgxQlNSVllnUFNBblkyRnliM1Z6Wld3dGFYUmxiUzF3Y21WMkp6dGNibU52Ym5OMElFTk1RVk5UWDA1QlRVVmZVRTlKVGxSRlVsOUZWa1ZPVkNBOUlDZHdiMmx1ZEdWeUxXVjJaVzUwSnp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDBGRFZFbFdSU1F4SUQwZ0p5NWhZM1JwZG1Vbk8xeHVZMjl1YzNRZ1UwVk1SVU5VVDFKZlFVTlVTVlpGWDBsVVJVMGdQU0FuTG1GamRHbDJaUzVqWVhKdmRYTmxiQzFwZEdWdEp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gwbFVSVTBnUFNBbkxtTmhjbTkxYzJWc0xXbDBaVzBuTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmU1ZSRlRWOUpUVWNnUFNBbkxtTmhjbTkxYzJWc0xXbDBaVzBnYVcxbkp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gwNUZXRlJmVUZKRlZpQTlJQ2N1WTJGeWIzVnpaV3d0YVhSbGJTMXVaWGgwTENBdVkyRnliM1Z6Wld3dGFYUmxiUzF3Y21WMkp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gwbE9SRWxEUVZSUFVsTWdQU0FuTG1OaGNtOTFjMlZzTFdsdVpHbGpZWFJ2Y25Nbk8xeHVZMjl1YzNRZ1UwVk1SVU5VVDFKZlNVNUVTVU5CVkU5U0lEMGdKMXRrWVhSaExXSnpMWFJoY21kbGRGMG5PMXh1WTI5dWMzUWdVMFZNUlVOVVQxSmZSRUZVUVY5VFRFbEVSU0E5SUNkYlpHRjBZUzFpY3kxemJHbGtaVjBzSUZ0a1lYUmhMV0p6TFhOc2FXUmxMWFJ2WFNjN1hHNWpiMjV6ZENCVFJVeEZRMVJQVWw5RVFWUkJYMUpKUkVVZ1BTQW5XMlJoZEdFdFluTXRjbWxrWlQxY0ltTmhjbTkxYzJWc1hDSmRKenRjYm1OdmJuTjBJRkJQU1U1VVJWSmZWRmxRUlY5VVQxVkRTQ0E5SUNkMGIzVmphQ2M3WEc1amIyNXpkQ0JRVDBsT1ZFVlNYMVJaVUVWZlVFVk9JRDBnSjNCbGJpYzdYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyeGhjM01nUkdWbWFXNXBkR2x2Ymx4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JseHVZMnhoYzNNZ1EyRnliM1Z6Wld3Z1pYaDBaVzVrY3lCQ1lYTmxRMjl0Y0c5dVpXNTBJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aV3hsYldWdWRDd2dZMjl1Wm1sbktTQjdYRzRnSUNBZ2MzVndaWElvWld4bGJXVnVkQ2s3WEc0Z0lDQWdkR2hwY3k1ZmFYUmxiWE1nUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDJsdWRHVnlkbUZzSUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TGw5aFkzUnBkbVZGYkdWdFpXNTBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlwYzFCaGRYTmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDJselUyeHBaR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJSFJvYVhNdWRHOTFZMmhVYVcxbGIzVjBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMblJ2ZFdOb1UzUmhjblJZSUQwZ01EdGNiaUFnSUNCMGFHbHpMblJ2ZFdOb1JHVnNkR0ZZSUQwZ01EdGNiaUFnSUNCMGFHbHpMbDlqYjI1bWFXY2dQU0IwYUdsekxsOW5aWFJEYjI1bWFXY29ZMjl1Wm1sbktUdGNiaUFnSUNCMGFHbHpMbDlwYm1ScFkyRjBiM0p6Uld4bGJXVnVkQ0E5SUZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1SUGJtVW9VMFZNUlVOVVQxSmZTVTVFU1VOQlZFOVNVeXdnZEdocGN5NWZaV3hsYldWdWRDazdYRzRnSUNBZ2RHaHBjeTVmZEc5MVkyaFRkWEJ3YjNKMFpXUWdQU0FuYjI1MGIzVmphSE4wWVhKMEp5QnBiaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUWdmSHdnYm1GMmFXZGhkRzl5TG0xaGVGUnZkV05vVUc5cGJuUnpJRDRnTUR0Y2JpQWdJQ0IwYUdsekxsOXdiMmx1ZEdWeVJYWmxiblFnUFNCQ2IyOXNaV0Z1S0hkcGJtUnZkeTVRYjJsdWRHVnlSWFpsYm5RcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWVdSa1JYWmxiblJNYVhOMFpXNWxjbk1vS1R0Y2JpQWdmU0F2THlCSFpYUjBaWEp6WEc1Y2JseHVJQ0J6ZEdGMGFXTWdaMlYwSUVSbFptRjFiSFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRVJsWm1GMWJIUWtZVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhRZ1RrRk5SU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUa0ZOUlNSaU8xeHVJQ0I5SUM4dklGQjFZbXhwWTF4dVhHNWNiaUFnYm1WNGRDZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5emJHbGtaU2hQVWtSRlVsOU9SVmhVS1R0Y2JpQWdmVnh1WEc0Z0lHNWxlSFJYYUdWdVZtbHphV0pzWlNncElIdGNiaUFnSUNBdkx5QkViMjRuZENCallXeHNJRzVsZUhRZ2QyaGxiaUIwYUdVZ2NHRm5aU0JwYzI0bmRDQjJhWE5wWW14bFhHNGdJQ0FnTHk4Z2IzSWdkR2hsSUdOaGNtOTFjMlZzSUc5eUlHbDBjeUJ3WVhKbGJuUWdhWE51SjNRZ2RtbHphV0pzWlZ4dUlDQWdJR2xtSUNnaFpHOWpkVzFsYm5RdWFHbGtaR1Z1SUNZbUlHbHpWbWx6YVdKc1pTaDBhR2x6TGw5bGJHVnRaVzUwS1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV1WlhoMEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjSEpsZGlncElIdGNiaUFnSUNCMGFHbHpMbDl6Ykdsa1pTaFBVa1JGVWw5UVVrVldLVHRjYmlBZ2ZWeHVYRzRnSUhCaGRYTmxLR1YyWlc1MEtTQjdYRzRnSUNBZ2FXWWdLQ0ZsZG1WdWRDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmFYTlFZWFZ6WldRZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoVFpXeGxZM1J2Y2tWdVoybHVaUzVtYVc1a1QyNWxLRk5GVEVWRFZFOVNYMDVGV0ZSZlVGSkZWaXdnZEdocGN5NWZaV3hsYldWdWRDa3BJSHRjYmlBZ0lDQWdJSFJ5YVdkblpYSlVjbUZ1YzJsMGFXOXVSVzVrS0hSb2FYTXVYMlZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdkR2hwY3k1amVXTnNaU2gwY25WbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamJHVmhja2x1ZEdWeWRtRnNLSFJvYVhNdVgybHVkR1Z5ZG1Gc0tUdGNiaUFnSUNCMGFHbHpMbDlwYm5SbGNuWmhiQ0E5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JqZVdOc1pTaGxkbVZ1ZENrZ2UxeHVJQ0FnSUdsbUlDZ2haWFpsYm5RcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJselVHRjFjMlZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx1ZEdWeWRtRnNLU0I3WEc0Z0lDQWdJQ0JqYkdWaGNrbHVkR1Z5ZG1Gc0tIUm9hWE11WDJsdWRHVnlkbUZzS1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx1ZEdWeWRtRnNJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZlkyOXVabWxuSUNZbUlIUm9hWE11WDJOdmJtWnBaeTVwYm5SbGNuWmhiQ0FtSmlBaGRHaHBjeTVmYVhOUVlYVnpaV1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpVbHVkR1Z5ZG1Gc0tDazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgybHVkR1Z5ZG1Gc0lEMGdjMlYwU1c1MFpYSjJZV3dvS0dSdlkzVnRaVzUwTG5acGMybGlhV3hwZEhsVGRHRjBaU0EvSUhSb2FYTXVibVY0ZEZkb1pXNVdhWE5wWW14bElEb2dkR2hwY3k1dVpYaDBLUzVpYVc1a0tIUm9hWE1wTENCMGFHbHpMbDlqYjI1bWFXY3VhVzUwWlhKMllXd3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFJ2S0dsdVpHVjRLU0I3WEc0Z0lDQWdkR2hwY3k1ZllXTjBhWFpsUld4bGJXVnVkQ0E5SUZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1SUGJtVW9VMFZNUlVOVVQxSmZRVU5VU1ZaRlgwbFVSVTBzSUhSb2FYTXVYMlZzWlcxbGJuUXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ1lXTjBhWFpsU1c1a1pYZ2dQU0IwYUdsekxsOW5aWFJKZEdWdFNXNWtaWGdvZEdocGN5NWZZV04wYVhabFJXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCcFppQW9hVzVrWlhnZ1BpQjBhR2x6TGw5cGRHVnRjeTVzWlc1bmRHZ2dMU0F4SUh4OElHbHVaR1Y0SUR3Z01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5cGMxTnNhV1JwYm1jcElIdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2Ym1Vb2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZVMHhKUkN3Z0tDa2dQVDRnZEdocGN5NTBieWhwYm1SbGVDa3BPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGhZM1JwZG1WSmJtUmxlQ0E5UFQwZ2FXNWtaWGdwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjR0YxYzJVb0tUdGNiaUFnSUNBZ0lIUm9hWE11WTNsamJHVW9LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J2Y21SbGNpQTlJR2x1WkdWNElENGdZV04wYVhabFNXNWtaWGdnUHlCUFVrUkZVbDlPUlZoVUlEb2dUMUpFUlZKZlVGSkZWanRjYmx4dUlDQWdJSFJvYVhNdVgzTnNhV1JsS0c5eVpHVnlMQ0IwYUdsekxsOXBkR1Z0YzF0cGJtUmxlRjBwTzF4dUlDQjlJQzh2SUZCeWFYWmhkR1ZjYmx4dVhHNGdJRjluWlhSRGIyNW1hV2NvWTI5dVptbG5LU0I3WEc0Z0lDQWdZMjl1Wm1sbklEMGdleUF1TGk1RVpXWmhkV3gwSkdFc1hHNGdJQ0FnSUNBdUxpNU5ZVzVwY0hWc1lYUnZjaTVuWlhSRVlYUmhRWFIwY21saWRYUmxjeWgwYUdsekxsOWxiR1Z0Wlc1MEtTeGNiaUFnSUNBZ0lDNHVMaWgwZVhCbGIyWWdZMjl1Wm1sbklEMDlQU0FuYjJKcVpXTjBKeUEvSUdOdmJtWnBaeUE2SUh0OUtWeHVJQ0FnSUgwN1hHNGdJQ0FnZEhsd1pVTm9aV05yUTI5dVptbG5LRTVCVFVVa1lpd2dZMjl1Wm1sbkxDQkVaV1poZFd4MFZIbHdaU1JoS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sbk8xeHVJQ0I5WEc1Y2JpQWdYMmhoYm1Sc1pWTjNhWEJsS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR0ZpYzBSbGJIUmhlQ0E5SUUxaGRHZ3VZV0p6S0hSb2FYTXVkRzkxWTJoRVpXeDBZVmdwTzF4dVhHNGdJQ0FnYVdZZ0tHRmljMFJsYkhSaGVDQThQU0JUVjBsUVJWOVVTRkpGVTBoUFRFUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JrYVhKbFkzUnBiMjRnUFNCaFluTkVaV3gwWVhnZ0x5QjBhR2x6TG5SdmRXTm9SR1ZzZEdGWU8xeHVJQ0FnSUhSb2FYTXVkRzkxWTJoRVpXeDBZVmdnUFNBd08xeHVYRzRnSUNBZ2FXWWdLQ0ZrYVhKbFkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5emJHbGtaU2hrYVhKbFkzUnBiMjRnUGlBd0lEOGdSRWxTUlVOVVNVOU9YMUpKUjBoVUlEb2dSRWxTUlVOVVNVOU9YMHhGUmxRcE8xeHVJQ0I5WEc1Y2JpQWdYMkZrWkVWMlpXNTBUR2x6ZEdWdVpYSnpLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlqYjI1bWFXY3VhMlY1WW05aGNtUXBJSHRjYmlBZ0lDQWdJRVYyWlc1MFNHRnVaR3hsY2k1dmJpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlMUlZsRVQxZE9MQ0JsZG1WdWRDQTlQaUIwYUdsekxsOXJaWGxrYjNkdUtHVjJaVzUwS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtWnBaeTV3WVhWelpTQTlQVDBnSjJodmRtVnlKeWtnZTF4dUlDQWdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOXVLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDAxUFZWTkZSVTVVUlZJc0lHVjJaVzUwSUQwK0lIUm9hWE11Y0dGMWMyVW9aWFpsYm5RcEtUdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2YmloMGFHbHpMbDlsYkdWdFpXNTBMQ0JGVmtWT1ZGOU5UMVZUUlV4RlFWWkZMQ0JsZG1WdWRDQTlQaUIwYUdsekxtTjVZMnhsS0dWMlpXNTBLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMk52Ym1acFp5NTBiM1ZqYUNBbUppQjBhR2x6TGw5MGIzVmphRk4xY0hCdmNuUmxaQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZZV1JrVkc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lGOWhaR1JVYjNWamFFVjJaVzUwVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR2hoYzFCdmFXNTBaWEpRWlc1VWIzVmphQ0E5SUdWMlpXNTBJRDArSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXdiMmx1ZEdWeVJYWmxiblFnSmlZZ0tHVjJaVzUwTG5CdmFXNTBaWEpVZVhCbElEMDlQU0JRVDBsT1ZFVlNYMVJaVUVWZlVFVk9JSHg4SUdWMlpXNTBMbkJ2YVc1MFpYSlVlWEJsSUQwOVBTQlFUMGxPVkVWU1gxUlpVRVZmVkU5VlEwZ3BPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCemRHRnlkQ0E5SUdWMlpXNTBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaG9ZWE5RYjJsdWRHVnlVR1Z1Vkc5MVkyZ29aWFpsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOTFZMmhUZEdGeWRGZ2dQU0JsZG1WdWRDNWpiR2xsYm5SWU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hkR2hwY3k1ZmNHOXBiblJsY2tWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzkxWTJoVGRHRnlkRmdnUFNCbGRtVnVkQzUwYjNWamFHVnpXekJkTG1Oc2FXVnVkRmc3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHMXZkbVVnUFNCbGRtVnVkQ0E5UGlCN1hHNGdJQ0FnSUNBdkx5Qmxibk4xY21VZ2MzZHBjR2x1WnlCM2FYUm9JRzl1WlNCMGIzVmphQ0JoYm1RZ2JtOTBJSEJwYm1Ob2FXNW5YRzRnSUNBZ0lDQjBhR2x6TG5SdmRXTm9SR1ZzZEdGWUlEMGdaWFpsYm5RdWRHOTFZMmhsY3lBbUppQmxkbVZ1ZEM1MGIzVmphR1Z6TG14bGJtZDBhQ0ErSURFZ1B5QXdJRG9nWlhabGJuUXVkRzkxWTJobGMxc3dYUzVqYkdsbGJuUllJQzBnZEdocGN5NTBiM1ZqYUZOMFlYSjBXRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pXNWtJRDBnWlhabGJuUWdQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHaGhjMUJ2YVc1MFpYSlFaVzVVYjNWamFDaGxkbVZ1ZENrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRVJsYkhSaFdDQTlJR1YyWlc1MExtTnNhV1Z1ZEZnZ0xTQjBhR2x6TG5SdmRXTm9VM1JoY25SWU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZUZDJsd1pTZ3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWTI5dVptbG5MbkJoZFhObElEMDlQU0FuYUc5MlpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUM4dklFbG1JR2wwSjNNZ1lTQjBiM1ZqYUMxbGJtRmliR1ZrSUdSbGRtbGpaU3dnYlc5MWMyVmxiblJsY2k5c1pXRjJaU0JoY21VZ1ptbHlaV1FnWVhOY2JpQWdJQ0FnSUNBZ0x5OGdjR0Z5ZENCdlppQjBhR1VnYlc5MWMyVWdZMjl0Y0dGMGFXSnBiR2wwZVNCbGRtVnVkSE1nYjI0Z1ptbHljM1FnZEdGd0lDMGdkR2hsSUdOaGNtOTFjMlZzWEc0Z0lDQWdJQ0FnSUM4dklIZHZkV3hrSUhOMGIzQWdZM2xqYkdsdVp5QjFiblJwYkNCMWMyVnlJSFJoY0hCbFpDQnZkWFFnYjJZZ2FYUTdYRzRnSUNBZ0lDQWdJQzh2SUdobGNtVXNJSGRsSUd4cGMzUmxiaUJtYjNJZ2RHOTFZMmhsYm1Rc0lHVjRjR3hwWTJsMGJIa2djR0YxYzJVZ2RHaGxJR05oY205MWMyVnNYRzRnSUNBZ0lDQWdJQzh2SUNoaGN5QnBaaUJwZENkeklIUm9aU0J6WldOdmJtUWdkR2x0WlNCM1pTQjBZWEFnYjI0Z2FYUXNJRzF2ZFhObFpXNTBaWElnWTI5dGNHRjBJR1YyWlc1MFhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUU1UFZDQm1hWEpsWkNrZ1lXNWtJR0ZtZEdWeUlHRWdkR2x0Wlc5MWRDQW9kRzhnWVd4c2IzY2dabTl5SUcxdmRYTmxJR052YlhCaGRHbGlhV3hwZEhsY2JpQWdJQ0FnSUNBZ0x5OGdaWFpsYm5SeklIUnZJR1pwY21VcElIZGxJR1Y0Y0d4cFkybDBiSGtnY21WemRHRnlkQ0JqZVdOc2FXNW5YRzRnSUNBZ0lDQWdJSFJvYVhNdWNHRjFjMlVvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBiM1ZqYUZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NTBiM1ZqYUZScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRlJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwS0dWMlpXNTBJRDArSUhSb2FYTXVZM2xqYkdVb1pYWmxiblFwTENCVVQxVkRTRVZXUlU1VVgwTlBUVkJCVkY5WFFVbFVJQ3NnZEdocGN5NWZZMjl1Wm1sbkxtbHVkR1Z5ZG1Gc0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpDaFRSVXhGUTFSUFVsOUpWRVZOWDBsTlJ5d2dkR2hwY3k1ZlpXeGxiV1Z1ZENrdVptOXlSV0ZqYUNocGRHVnRTVzFuSUQwK0lIdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2YmlocGRHVnRTVzFuTENCRlZrVk9WRjlFVWtGSFgxTlVRVkpVTENCbGRtVnVkQ0E5UGlCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbDl3YjJsdWRHVnlSWFpsYm5RcElIdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2YmloMGFHbHpMbDlsYkdWdFpXNTBMQ0JGVmtWT1ZGOVFUMGxPVkVWU1JFOVhUaXdnWlhabGJuUWdQVDRnYzNSaGNuUW9aWFpsYm5RcEtUdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2YmloMGFHbHpMbDlsYkdWdFpXNTBMQ0JGVmtWT1ZGOVFUMGxPVkVWU1ZWQXNJR1YyWlc1MElEMCtJR1Z1WkNobGRtVnVkQ2twTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1EweEJVMU5mVGtGTlJWOVFUMGxPVkVWU1gwVldSVTVVS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdSWFpsYm5SSVlXNWtiR1Z5TG05dUtIUm9hWE11WDJWc1pXMWxiblFzSUVWV1JVNVVYMVJQVlVOSVUxUkJVbFFzSUdWMlpXNTBJRDArSUhOMFlYSjBLR1YyWlc1MEtTazdYRzRnSUNBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1YjI0b2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZWRTlWUTBoTlQxWkZMQ0JsZG1WdWRDQTlQaUJ0YjNabEtHVjJaVzUwS1NrN1hHNGdJQ0FnSUNCRmRtVnVkRWhoYm1Sc1pYSXViMjRvZEdocGN5NWZaV3hsYldWdWRDd2dSVlpGVGxSZlZFOVZRMGhGVGtRc0lHVjJaVzUwSUQwK0lHVnVaQ2hsZG1WdWRDa3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjlyWlhsa2IzZHVLR1YyWlc1MEtTQjdYRzRnSUNBZ2FXWWdLQzlwYm5CMWRIeDBaWGgwWVhKbFlTOXBMblJsYzNRb1pYWmxiblF1ZEdGeVoyVjBMblJoWjA1aGJXVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWkdseVpXTjBhVzl1SUQwZ1MwVlpYMVJQWDBSSlVrVkRWRWxQVGx0bGRtVnVkQzVyWlhsZE8xeHVYRzRnSUNBZ2FXWWdLR1JwY21WamRHbHZiaWtnZTF4dUlDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZmMyeHBaR1VvWkdseVpXTjBhVzl1S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCZloyVjBTWFJsYlVsdVpHVjRLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQjBhR2x6TGw5cGRHVnRjeUE5SUdWc1pXMWxiblFnSmlZZ1pXeGxiV1Z1ZEM1d1lYSmxiblJPYjJSbElEOGdVMlZzWldOMGIzSkZibWRwYm1VdVptbHVaQ2hUUlV4RlExUlBVbDlKVkVWTkxDQmxiR1Z0Wlc1MExuQmhjbVZ1ZEU1dlpHVXBJRG9nVzEwN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybDBaVzF6TG1sdVpHVjRUMllvWld4bGJXVnVkQ2s3WEc0Z0lIMWNibHh1SUNCZloyVjBTWFJsYlVKNVQzSmtaWElvYjNKa1pYSXNJR0ZqZEdsMlpVVnNaVzFsYm5RcElIdGNiaUFnSUNCamIyNXpkQ0JwYzA1bGVIUWdQU0J2Y21SbGNpQTlQVDBnVDFKRVJWSmZUa1ZZVkR0Y2JpQWdJQ0J5WlhSMWNtNGdaMlYwVG1WNGRFRmpkR2wyWlVWc1pXMWxiblFvZEdocGN5NWZhWFJsYlhNc0lHRmpkR2wyWlVWc1pXMWxiblFzSUdselRtVjRkQ3dnZEdocGN5NWZZMjl1Wm1sbkxuZHlZWEFwTzF4dUlDQjlYRzVjYmlBZ1gzUnlhV2RuWlhKVGJHbGtaVVYyWlc1MEtISmxiR0YwWldSVVlYSm5aWFFzSUdWMlpXNTBSR2x5WldOMGFXOXVUbUZ0WlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFJoY21kbGRFbHVaR1Y0SUQwZ2RHaHBjeTVmWjJWMFNYUmxiVWx1WkdWNEtISmxiR0YwWldSVVlYSm5aWFFwTzF4dVhHNGdJQ0FnWTI5dWMzUWdabkp2YlVsdVpHVjRJRDBnZEdocGN5NWZaMlYwU1hSbGJVbHVaR1Y0S0ZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1SUGJtVW9VMFZNUlVOVVQxSmZRVU5VU1ZaRlgwbFVSVTBzSUhSb2FYTXVYMlZzWlcxbGJuUXBLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQkZWa1ZPVkY5VFRFbEVSU3dnZTF4dUlDQWdJQ0FnY21Wc1lYUmxaRlJoY21kbGRDeGNiaUFnSUNBZ0lHUnBjbVZqZEdsdmJqb2daWFpsYm5SRWFYSmxZM1JwYjI1T1lXMWxMRnh1SUNBZ0lDQWdabkp2YlRvZ1puSnZiVWx1WkdWNExGeHVJQ0FnSUNBZ2RHODZJSFJoY21kbGRFbHVaR1Y0WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmMyVjBRV04wYVhabFNXNWthV05oZEc5eVJXeGxiV1Z1ZENobGJHVnRaVzUwS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJsdVpHbGpZWFJ2Y25ORmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JoWTNScGRtVkpibVJwWTJGMGIzSWdQU0JUWld4bFkzUnZja1Z1WjJsdVpTNW1hVzVrVDI1bEtGTkZURVZEVkU5U1gwRkRWRWxXUlNReExDQjBhR2x6TGw5cGJtUnBZMkYwYjNKelJXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNCaFkzUnBkbVZKYm1ScFkyRjBiM0l1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hEVEVGVFUxOU9RVTFGWDBGRFZFbFdSU1F5S1R0Y2JpQWdJQ0FnSUdGamRHbDJaVWx1WkdsallYUnZjaTV5WlcxdmRtVkJkSFJ5YVdKMWRHVW9KMkZ5YVdFdFkzVnljbVZ1ZENjcE8xeHVJQ0FnSUNBZ1kyOXVjM1FnYVc1a2FXTmhkRzl5Y3lBOUlGTmxiR1ZqZEc5eVJXNW5hVzVsTG1acGJtUW9VMFZNUlVOVVQxSmZTVTVFU1VOQlZFOVNMQ0IwYUdsekxsOXBibVJwWTJGMGIzSnpSV3hsYldWdWRDazdYRzVjYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYVc1a2FXTmhkRzl5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1RuVnRZbVZ5TG5CaGNuTmxTVzUwS0dsdVpHbGpZWFJ2Y25OYmFWMHVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0p6TFhOc2FXUmxMWFJ2Snlrc0lERXdLU0E5UFQwZ2RHaHBjeTVmWjJWMFNYUmxiVWx1WkdWNEtHVnNaVzFsYm5RcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVc1a2FXTmhkRzl5YzF0cFhTNWpiR0Z6YzB4cGMzUXVZV1JrS0VOTVFWTlRYMDVCVFVWZlFVTlVTVlpGSkRJcE8xeHVJQ0FnSUNBZ0lDQWdJR2x1WkdsallYUnZjbk5iYVYwdWMyVjBRWFIwY21saWRYUmxLQ2RoY21saExXTjFjbkpsYm5RbkxDQW5kSEoxWlNjcE8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdYM1Z3WkdGMFpVbHVkR1Z5ZG1Gc0tDa2dlMXh1SUNBZ0lHTnZibk4wSUdWc1pXMWxiblFnUFNCMGFHbHpMbDloWTNScGRtVkZiR1Z0Wlc1MElIeDhJRk5sYkdWamRHOXlSVzVuYVc1bExtWnBibVJQYm1Vb1UwVk1SVU5VVDFKZlFVTlVTVlpGWDBsVVJVMHNJSFJvYVhNdVgyVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ2FXWWdLQ0ZsYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWld4bGJXVnVkRWx1ZEdWeWRtRnNJRDBnVG5WdFltVnlMbkJoY25ObFNXNTBLR1ZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0p6TFdsdWRHVnlkbUZzSnlrc0lERXdLVHRjYmx4dUlDQWdJR2xtSUNobGJHVnRaVzUwU1c1MFpYSjJZV3dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk52Ym1acFp5NWtaV1poZFd4MFNXNTBaWEoyWVd3Z1BTQjBhR2x6TGw5amIyNW1hV2N1WkdWbVlYVnNkRWx1ZEdWeWRtRnNJSHg4SUhSb2FYTXVYMk52Ym1acFp5NXBiblJsY25aaGJEdGNiaUFnSUNBZ0lIUm9hWE11WDJOdmJtWnBaeTVwYm5SbGNuWmhiQ0E5SUdWc1pXMWxiblJKYm5SbGNuWmhiRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWTI5dVptbG5MbWx1ZEdWeWRtRnNJRDBnZEdocGN5NWZZMjl1Wm1sbkxtUmxabUYxYkhSSmJuUmxjblpoYkNCOGZDQjBhR2x6TGw5amIyNW1hV2N1YVc1MFpYSjJZV3c3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDNOc2FXUmxLR1JwY21WamRHbHZiazl5VDNKa1pYSXNJR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQmpiMjV6ZENCdmNtUmxjaUE5SUhSb2FYTXVYMlJwY21WamRHbHZibFJ2VDNKa1pYSW9aR2x5WldOMGFXOXVUM0pQY21SbGNpazdYRzVjYmlBZ0lDQmpiMjV6ZENCaFkzUnBkbVZGYkdWdFpXNTBJRDBnVTJWc1pXTjBiM0pGYm1kcGJtVXVabWx1WkU5dVpTaFRSVXhGUTFSUFVsOUJRMVJKVmtWZlNWUkZUU3dnZEdocGN5NWZaV3hsYldWdWRDazdYRzVjYmlBZ0lDQmpiMjV6ZENCaFkzUnBkbVZGYkdWdFpXNTBTVzVrWlhnZ1BTQjBhR2x6TGw5blpYUkpkR1Z0U1c1a1pYZ29ZV04wYVhabFJXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCamIyNXpkQ0J1WlhoMFJXeGxiV1Z1ZENBOUlHVnNaVzFsYm5RZ2ZId2dkR2hwY3k1ZloyVjBTWFJsYlVKNVQzSmtaWElvYjNKa1pYSXNJR0ZqZEdsMlpVVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ1kyOXVjM1FnYm1WNGRFVnNaVzFsYm5SSmJtUmxlQ0E5SUhSb2FYTXVYMmRsZEVsMFpXMUpibVJsZUNodVpYaDBSV3hsYldWdWRDazdYRzVjYmlBZ0lDQmpiMjV6ZENCcGMwTjVZMnhwYm1jZ1BTQkNiMjlzWldGdUtIUm9hWE11WDJsdWRHVnlkbUZzS1R0Y2JpQWdJQ0JqYjI1emRDQnBjMDVsZUhRZ1BTQnZjbVJsY2lBOVBUMGdUMUpFUlZKZlRrVllWRHRjYmlBZ0lDQmpiMjV6ZENCa2FYSmxZM1JwYjI1aGJFTnNZWE56VG1GdFpTQTlJR2x6VG1WNGRDQS9JRU5NUVZOVFgwNUJUVVZmVTFSQlVsUWdPaUJEVEVGVFUxOU9RVTFGWDBWT1JEdGNiaUFnSUNCamIyNXpkQ0J2Y21SbGNrTnNZWE56VG1GdFpTQTlJR2x6VG1WNGRDQS9JRU5NUVZOVFgwNUJUVVZmVGtWWVZDQTZJRU5NUVZOVFgwNUJUVVZmVUZKRlZqdGNibHh1SUNBZ0lHTnZibk4wSUdWMlpXNTBSR2x5WldOMGFXOXVUbUZ0WlNBOUlIUm9hWE11WDI5eVpHVnlWRzlFYVhKbFkzUnBiMjRvYjNKa1pYSXBPMXh1WEc0Z0lDQWdhV1lnS0c1bGVIUkZiR1Z0Wlc1MElDWW1JRzVsZUhSRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loRFRFRlRVMTlPUVUxRlgwRkRWRWxXUlNReUtTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmFYTlRiR2xrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx6VTJ4cFpHbHVaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhOc2FXUmxSWFpsYm5RZ1BTQjBhR2x6TGw5MGNtbG5aMlZ5VTJ4cFpHVkZkbVZ1ZENodVpYaDBSV3hsYldWdWRDd2daWFpsYm5SRWFYSmxZM1JwYjI1T1lXMWxLVHRjYmx4dUlDQWdJR2xtSUNoemJHbGtaVVYyWlc1MExtUmxabUYxYkhSUWNtVjJaVzUwWldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lXRmpkR2wyWlVWc1pXMWxiblFnZkh3Z0lXNWxlSFJGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0F2THlCVGIyMWxJSGRsYVhKa2JtVnpjeUJwY3lCb1lYQndaVzVwYm1jc0lITnZJSGRsSUdKaGFXeGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOXBjMU5zYVdScGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ2FXWWdLR2x6UTNsamJHbHVaeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdZWFZ6WlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYM05sZEVGamRHbDJaVWx1WkdsallYUnZja1ZzWlcxbGJuUW9ibVY0ZEVWc1pXMWxiblFwTzF4dVhHNGdJQ0FnZEdocGN5NWZZV04wYVhabFJXeGxiV1Z1ZENBOUlHNWxlSFJGYkdWdFpXNTBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2RISnBaMmRsY2xOc2FXUkZkbVZ1ZENBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUVWMlpXNTBTR0Z1Wkd4bGNpNTBjbWxuWjJWeUtIUm9hWE11WDJWc1pXMWxiblFzSUVWV1JVNVVYMU5NU1VRc0lIdGNiaUFnSUNBZ0lDQWdjbVZzWVhSbFpGUmhjbWRsZERvZ2JtVjRkRVZzWlcxbGJuUXNYRzRnSUNBZ0lDQWdJR1JwY21WamRHbHZiam9nWlhabGJuUkVhWEpsWTNScGIyNU9ZVzFsTEZ4dUlDQWdJQ0FnSUNCbWNtOXRPaUJoWTNScGRtVkZiR1Z0Wlc1MFNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUhSdk9pQnVaWGgwUld4bGJXVnVkRWx1WkdWNFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektFTk1RVk5UWDA1QlRVVmZVMHhKUkVVcEtTQjdYRzRnSUNBZ0lDQnVaWGgwUld4bGJXVnVkQzVqYkdGemMweHBjM1F1WVdSa0tHOXlaR1Z5UTJ4aGMzTk9ZVzFsS1R0Y2JpQWdJQ0FnSUhKbFpteHZkeWh1WlhoMFJXeGxiV1Z1ZENrN1hHNGdJQ0FnSUNCaFkzUnBkbVZGYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1pHbHlaV04wYVc5dVlXeERiR0Z6YzA1aGJXVXBPMXh1SUNBZ0lDQWdibVY0ZEVWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDaGthWEpsWTNScGIyNWhiRU5zWVhOelRtRnRaU2s3WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJR052YlhCc1pYUmxRMkZzYkVKaFkyc2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRzVsZUhSRmJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvWkdseVpXTjBhVzl1WVd4RGJHRnpjMDVoYldVc0lHOXlaR1Z5UTJ4aGMzTk9ZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2JtVjRkRVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoRFRFRlRVMTlPUVUxRlgwRkRWRWxXUlNReUtUdGNiaUFnSUNBZ0lDQWdZV04wYVhabFJXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0VOTVFWTlRYMDVCVFVWZlFVTlVTVlpGSkRJc0lHOXlaR1Z5UTJ4aGMzTk9ZVzFsTENCa2FYSmxZM1JwYjI1aGJFTnNZWE56VG1GdFpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgybHpVMnhwWkdsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLSFJ5YVdkblpYSlRiR2xrUlhabGJuUXNJREFwTzF4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5aGpiMjF3YkdWMFpVTmhiR3hDWVdOckxDQmhZM1JwZG1WRmJHVnRaVzUwTENCMGNuVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lXTjBhWFpsUld4bGJXVnVkQzVqYkdGemMweHBjM1F1Y21WdGIzWmxLRU5NUVZOVFgwNUJUVVZmUVVOVVNWWkZKRElwTzF4dUlDQWdJQ0FnYm1WNGRFVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hEVEVGVFUxOU9RVTFGWDBGRFZFbFdSU1F5S1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx6VTJ4cFpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdkSEpwWjJkbGNsTnNhV1JGZG1WdWRDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hwYzBONVkyeHBibWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZM2xqYkdVb0tUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZaR2x5WldOMGFXOXVWRzlQY21SbGNpaGthWEpsWTNScGIyNHBJSHRjYmlBZ0lDQnBaaUFvSVZ0RVNWSkZRMVJKVDA1ZlVrbEhTRlFzSUVSSlVrVkRWRWxQVGw5TVJVWlVYUzVwYm1Oc2RXUmxjeWhrYVhKbFkzUnBiMjRwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkdseVpXTjBhVzl1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNocGMxSlVUQ2dwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWkdseVpXTjBhVzl1SUQwOVBTQkVTVkpGUTFSSlQwNWZURVZHVkNBL0lFOVNSRVZTWDFCU1JWWWdPaUJQVWtSRlVsOU9SVmhVTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmthWEpsWTNScGIyNGdQVDA5SUVSSlVrVkRWRWxQVGw5TVJVWlVJRDhnVDFKRVJWSmZUa1ZZVkNBNklFOVNSRVZTWDFCU1JWWTdYRzRnSUgxY2JseHVJQ0JmYjNKa1pYSlViMFJwY21WamRHbHZiaWh2Y21SbGNpa2dlMXh1SUNBZ0lHbG1JQ2doVzA5U1JFVlNYMDVGV0ZRc0lFOVNSRVZTWDFCU1JWWmRMbWx1WTJ4MVpHVnpLRzl5WkdWeUtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOXlaR1Z5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNocGMxSlVUQ2dwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjNKa1pYSWdQVDA5SUU5U1JFVlNYMUJTUlZZZ1B5QkVTVkpGUTFSSlQwNWZURVZHVkNBNklFUkpVa1ZEVkVsUFRsOVNTVWRJVkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiM0prWlhJZ1BUMDlJRTlTUkVWU1gxQlNSVllnUHlCRVNWSkZRMVJKVDA1ZlVrbEhTRlFnT2lCRVNWSkZRMVJKVDA1ZlRFVkdWRHRjYmlBZ2ZTQXZMeUJUZEdGMGFXTmNibHh1WEc0Z0lITjBZWFJwWXlCallYSnZkWE5sYkVsdWRHVnlabUZqWlNobGJHVnRaVzUwTENCamIyNW1hV2NwSUh0Y2JpQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ1EyRnliM1Z6Wld3dVoyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaGxiR1Z0Wlc1MExDQmpiMjVtYVdjcE8xeHVJQ0FnSUd4bGRDQjdYRzRnSUNBZ0lDQmZZMjl1Wm1sblhHNGdJQ0FnZlNBOUlHUmhkR0U3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJtWnBaeUE5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lGOWpiMjVtYVdjZ1BTQjdJQzR1TGw5amIyNW1hV2NzWEc0Z0lDQWdJQ0FnSUM0dUxtTnZibVpwWjF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmhZM1JwYjI0Z1BTQjBlWEJsYjJZZ1kyOXVabWxuSUQwOVBTQW5jM1J5YVc1bkp5QS9JR052Ym1acFp5QTZJRjlqYjI1bWFXY3VjMnhwWkdVN1hHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJR1JoZEdFdWRHOG9ZMjl1Wm1sbktUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCaFkzUnBiMjRnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdGYllXTjBhVzl1WFNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdUbThnYldWMGFHOWtJRzVoYldWa0lGd2lKSHRoWTNScGIyNTlYQ0pnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1pHRjBZVnRoWTNScGIyNWRLQ2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hmWTI5dVptbG5MbWx1ZEdWeWRtRnNJQ1ltSUY5amIyNW1hV2N1Y21sa1pTa2dlMXh1SUNBZ0lDQWdaR0YwWVM1d1lYVnpaU2dwTzF4dUlDQWdJQ0FnWkdGMFlTNWplV05zWlNncE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCcVVYVmxjbmxKYm5SbGNtWmhZMlVvWTI5dVptbG5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WldGamFDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0JEWVhKdmRYTmxiQzVqWVhKdmRYTmxiRWx1ZEdWeVptRmpaU2gwYUdsekxDQmpiMjVtYVdjcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHUmhkR0ZCY0dsRGJHbGphMGhoYm1Sc1pYSW9aWFpsYm5RcElIdGNiaUFnSUNCamIyNXpkQ0IwWVhKblpYUWdQU0JuWlhSRmJHVnRaVzUwUm5KdmJWTmxiR1ZqZEc5eUtIUm9hWE1wTzF4dVhHNGdJQ0FnYVdZZ0tDRjBZWEpuWlhRZ2ZId2dJWFJoY21kbGRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9RMHhCVTFOZlRrRk5SVjlEUVZKUFZWTkZUQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCamIyNW1hV2NnUFNCN0lDNHVMazFoYm1sd2RXeGhkRzl5TG1kbGRFUmhkR0ZCZEhSeWFXSjFkR1Z6S0hSaGNtZGxkQ2tzWEc0Z0lDQWdJQ0F1TGk1TllXNXBjSFZzWVhSdmNpNW5aWFJFWVhSaFFYUjBjbWxpZFhSbGN5aDBhR2x6S1Z4dUlDQWdJSDA3WEc0Z0lDQWdZMjl1YzNRZ2MyeHBaR1ZKYm1SbGVDQTlJSFJvYVhNdVoyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXSnpMWE5zYVdSbExYUnZKeWs3WEc1Y2JpQWdJQ0JwWmlBb2MyeHBaR1ZKYm1SbGVDa2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbkxtbHVkR1Z5ZG1Gc0lEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTJGeWIzVnpaV3d1WTJGeWIzVnpaV3hKYm5SbGNtWmhZMlVvZEdGeVoyVjBMQ0JqYjI1bWFXY3BPMXh1WEc0Z0lDQWdhV1lnS0hOc2FXUmxTVzVrWlhncElIdGNiaUFnSUNBZ0lFTmhjbTkxYzJWc0xtZGxkRWx1YzNSaGJtTmxLSFJoY21kbGRDa3VkRzhvYzJ4cFpHVkpibVJsZUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnZlZ4dVhHNTlYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1JHRjBZU0JCY0drZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JseHVSWFpsYm5SSVlXNWtiR1Z5TG05dUtHUnZZM1Z0Wlc1MExDQkZWa1ZPVkY5RFRFbERTMTlFUVZSQlgwRlFTU1ExTENCVFJVeEZRMVJQVWw5RVFWUkJYMU5NU1VSRkxDQkRZWEp2ZFhObGJDNWtZWFJoUVhCcFEyeHBZMnRJWVc1a2JHVnlLVHRjYmtWMlpXNTBTR0Z1Wkd4bGNpNXZiaWgzYVc1a2IzY3NJRVZXUlU1VVgweFBRVVJmUkVGVVFWOUJVRWtrTWl3Z0tDa2dQVDRnZTF4dUlDQmpiMjV6ZENCallYSnZkWE5sYkhNZ1BTQlRaV3hsWTNSdmNrVnVaMmx1WlM1bWFXNWtLRk5GVEVWRFZFOVNYMFJCVkVGZlVrbEVSU2s3WEc1Y2JpQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHeGxiaUE5SUdOaGNtOTFjMlZzY3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lFTmhjbTkxYzJWc0xtTmhjbTkxYzJWc1NXNTBaWEptWVdObEtHTmhjbTkxYzJWc2MxdHBYU3dnUTJGeWIzVnpaV3d1WjJWMFNXNXpkR0Z1WTJVb1kyRnliM1Z6Wld4elcybGRLU2s3WEc0Z0lIMWNibjBwTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR3BSZFdWeWVWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQmhaR1FnTGtOaGNtOTFjMlZzSUhSdklHcFJkV1Z5ZVNCdmJteDVJR2xtSUdwUmRXVnllU0JwY3lCd2NtVnpaVzUwWEc0Z0tpOWNibHh1WkdWbWFXNWxTbEYxWlhKNVVHeDFaMmx1S0VOaGNtOTFjMlZzS1R0Y2JseHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1FtOXZkSE4wY21Gd0lDaDJOUzR4TGpNcE9pQmpiMnhzWVhCelpTNXFjMXh1SUNvZ1RHbGpaVzV6WldRZ2RXNWtaWElnVFVsVUlDaG9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkSGRpY3k5aWIyOTBjM1J5WVhBdllteHZZaTl0WVdsdUwweEpRMFZPVTBVcFhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyOXVjM1JoYm5SelhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVYRzVqYjI1emRDQk9RVTFGSkdFZ1BTQW5ZMjlzYkdGd2MyVW5PMXh1WTI5dWMzUWdSRUZVUVY5TFJWa2tPU0E5SUNkaWN5NWpiMnhzWVhCelpTYzdYRzVqYjI1emRDQkZWa1ZPVkY5TFJWa2tPU0E5SUdBdUpIdEVRVlJCWDB0RldTUTVmV0E3WEc1amIyNXpkQ0JFUVZSQlgwRlFTVjlMUlZra05TQTlJQ2N1WkdGMFlTMWhjR2tuTzF4dVkyOXVjM1FnUkdWbVlYVnNkQ1E1SUQwZ2UxeHVJQ0IwYjJkbmJHVTZJSFJ5ZFdVc1hHNGdJSEJoY21WdWREb2diblZzYkZ4dWZUdGNibU52Ym5OMElFUmxabUYxYkhSVWVYQmxKRGtnUFNCN1hHNGdJSFJ2WjJkc1pUb2dKMkp2YjJ4bFlXNG5MRnh1SUNCd1lYSmxiblE2SUNjb2JuVnNiSHhsYkdWdFpXNTBLU2RjYm4wN1hHNWpiMjV6ZENCRlZrVk9WRjlUU0U5WEpEVWdQU0JnYzJodmR5UjdSVlpGVGxSZlMwVlpKRGw5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMU5JVDFkT0pEVWdQU0JnYzJodmQyNGtlMFZXUlU1VVgwdEZXU1E1ZldBN1hHNWpiMjV6ZENCRlZrVk9WRjlJU1VSRkpEVWdQU0JnYUdsa1pTUjdSVlpGVGxSZlMwVlpKRGw5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMGhKUkVSRlRpUTFJRDBnWUdocFpHUmxiaVI3UlZaRlRsUmZTMFZaSkRsOVlEdGNibU52Ym5OMElFVldSVTVVWDBOTVNVTkxYMFJCVkVGZlFWQkpKRFFnUFNCZ1kyeHBZMnNrZTBWV1JVNVVYMHRGV1NRNWZTUjdSRUZVUVY5QlVFbGZTMFZaSkRWOVlEdGNibU52Ym5OMElFTk1RVk5UWDA1QlRVVmZVMGhQVnlRM0lEMGdKM05vYjNjbk8xeHVZMjl1YzNRZ1EweEJVMU5mVGtGTlJWOURUMHhNUVZCVFJTQTlJQ2RqYjJ4c1lYQnpaU2M3WEc1amIyNXpkQ0JEVEVGVFUxOU9RVTFGWDBOUFRFeEJVRk5KVGtjZ1BTQW5ZMjlzYkdGd2MybHVaeWM3WEc1amIyNXpkQ0JEVEVGVFUxOU9RVTFGWDBOUFRFeEJVRk5GUkNBOUlDZGpiMnhzWVhCelpXUW5PMXh1WTI5dWMzUWdRMHhCVTFOZlRrRk5SVjlFUlVWUVJWSmZRMGhKVEVSU1JVNGdQU0JnT25OamIzQmxJQzRrZTBOTVFWTlRYMDVCVFVWZlEwOU1URUZRVTBWOUlDNGtlME5NUVZOVFgwNUJUVVZmUTA5TVRFRlFVMFY5WUR0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlNFOVNTVnBQVGxSQlRDQTlJQ2RqYjJ4c1lYQnpaUzFvYjNKcGVtOXVkR0ZzSnp0Y2JtTnZibk4wSUZkSlJGUklJRDBnSjNkcFpIUm9KenRjYm1OdmJuTjBJRWhGU1VkSVZDQTlJQ2RvWldsbmFIUW5PMXh1WTI5dWMzUWdVMFZNUlVOVVQxSmZRVU5VU1ZaRlV5QTlJQ2N1WTI5c2JHRndjMlV1YzJodmR5d2dMbU52Ykd4aGNITmxMbU52Ykd4aGNITnBibWNuTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmUkVGVVFWOVVUMGRIVEVVa05DQTlJQ2RiWkdGMFlTMWljeTEwYjJkbmJHVTlYQ0pqYjJ4c1lYQnpaVndpWFNjN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTJ4aGMzTWdSR1ZtYVc1cGRHbHZibHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYmx4dVkyeGhjM01nUTI5c2JHRndjMlVnWlhoMFpXNWtjeUJDWVhObFEyOXRjRzl1Wlc1MElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZEN3Z1kyOXVabWxuS1NCN1hHNGdJQ0FnYzNWd1pYSW9aV3hsYldWdWRDazdYRzRnSUNBZ2RHaHBjeTVmYVhOVWNtRnVjMmwwYVc5dWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmWTI5dVptbG5JRDBnZEdocGN5NWZaMlYwUTI5dVptbG5LR052Ym1acFp5azdYRzRnSUNBZ2RHaHBjeTVmZEhKcFoyZGxja0Z5Y21GNUlEMGdXMTA3WEc0Z0lDQWdZMjl1YzNRZ2RHOW5aMnhsVEdsemRDQTlJRk5sYkdWamRHOXlSVzVuYVc1bExtWnBibVFvVTBWTVJVTlVUMUpmUkVGVVFWOVVUMGRIVEVVa05DazdYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2JHVnVJRDBnZEc5bloyeGxUR2x6ZEM1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1pXeGxiU0E5SUhSdloyZHNaVXhwYzNSYmFWMDdYRzRnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1J2Y2lBOUlHZGxkRk5sYkdWamRHOXlSbkp2YlVWc1pXMWxiblFvWld4bGJTazdYRzRnSUNBZ0lDQmpiMjV6ZENCbWFXeDBaWEpGYkdWdFpXNTBJRDBnVTJWc1pXTjBiM0pGYm1kcGJtVXVabWx1WkNoelpXeGxZM1J2Y2lrdVptbHNkR1Z5S0dadmRXNWtSV3hsYlNBOVBpQm1iM1Z1WkVWc1pXMGdQVDA5SUhSb2FYTXVYMlZzWlcxbGJuUXBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MyVnNaV04wYjNJZ0lUMDlJRzUxYkd3Z0ppWWdabWxzZEdWeVJXeGxiV1Z1ZEM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWc1pXTjBiM0lnUFNCelpXeGxZM1J2Y2p0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGNtbG5aMlZ5UVhKeVlYa3VjSFZ6YUNobGJHVnRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5cGJtbDBhV0ZzYVhwbFEyaHBiR1J5Wlc0b0tUdGNibHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZZMjl1Wm1sbkxuQmhjbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmWVdSa1FYSnBZVUZ1WkVOdmJHeGhjSE5sWkVOc1lYTnpLSFJvYVhNdVgzUnlhV2RuWlhKQmNuSmhlU3dnZEdocGN5NWZhWE5UYUc5M2JpZ3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZZMjl1Wm1sbkxuUnZaMmRzWlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUwYjJkbmJHVW9LVHRjYmlBZ0lDQjlYRzRnSUgwZ0x5OGdSMlYwZEdWeWMxeHVYRzVjYmlBZ2MzUmhkR2xqSUdkbGRDQkVaV1poZFd4MEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCRVpXWmhkV3gwSkRrN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBJRTVCVFVVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUU1QlRVVWtZVHRjYmlBZ2ZTQXZMeUJRZFdKc2FXTmNibHh1WEc0Z0lIUnZaMmRzWlNncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmFYTlRhRzkzYmlncEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1ocFpHVW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV6YUc5M0tDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjMmh2ZHlncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmFYTlVjbUZ1YzJsMGFXOXVhVzVuSUh4OElIUm9hWE11WDJselUyaHZkMjRvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCaFkzUnBkbVZ6SUQwZ1cxMDdYRzRnSUNBZ2JHVjBJR0ZqZEdsMlpYTkVZWFJoTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtWnBaeTV3WVhKbGJuUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHTm9hV3hrY21WdUlEMGdVMlZzWldOMGIzSkZibWRwYm1VdVptbHVaQ2hEVEVGVFUxOU9RVTFGWDBSRlJWQkZVbDlEU0VsTVJGSkZUaXdnZEdocGN5NWZZMjl1Wm1sbkxuQmhjbVZ1ZENrN1hHNGdJQ0FnSUNCaFkzUnBkbVZ6SUQwZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpDaFRSVXhGUTFSUFVsOUJRMVJKVmtWVExDQjBhR2x6TGw5amIyNW1hV2N1Y0dGeVpXNTBLUzVtYVd4MFpYSW9aV3hsYlNBOVBpQWhZMmhwYkdSeVpXNHVhVzVqYkhWa1pYTW9aV3hsYlNrcE95QXZMeUJ5WlcxdmRtVWdZMmhwYkdSeVpXNGdhV1lnWjNKbFlYUmxjaUJrWlhCMGFGeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR052Ym5SaGFXNWxjaUE5SUZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1SUGJtVW9kR2hwY3k1ZmMyVnNaV04wYjNJcE8xeHVYRzRnSUNBZ2FXWWdLR0ZqZEdsMlpYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMFpXMXdRV04wYVhabFJHRjBZU0E5SUdGamRHbDJaWE11Wm1sdVpDaGxiR1Z0SUQwK0lHTnZiblJoYVc1bGNpQWhQVDBnWld4bGJTazdYRzRnSUNBZ0lDQmhZM1JwZG1WelJHRjBZU0E5SUhSbGJYQkJZM1JwZG1WRVlYUmhJRDhnUTI5c2JHRndjMlV1WjJWMFNXNXpkR0Z1WTJVb2RHVnRjRUZqZEdsMlpVUmhkR0VwSURvZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnYVdZZ0tHRmpkR2wyWlhORVlYUmhJQ1ltSUdGamRHbDJaWE5FWVhSaExsOXBjMVJ5WVc1emFYUnBiMjVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSE4wWVhKMFJYWmxiblFnUFNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlUU0U5WEpEVXBPMXh1WEc0Z0lDQWdhV1lnS0hOMFlYSjBSWFpsYm5RdVpHVm1ZWFZzZEZCeVpYWmxiblJsWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR0ZqZEdsMlpYTXVabTl5UldGamFDaGxiR1Z0UVdOMGFYWmxJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaGpiMjUwWVdsdVpYSWdJVDA5SUdWc1pXMUJZM1JwZG1VcElIdGNiaUFnSUNBZ0lDQWdRMjlzYkdGd2MyVXVaMlYwVDNKRGNtVmhkR1ZKYm5OMFlXNWpaU2hsYkdWdFFXTjBhWFpsTENCN1hHNGdJQ0FnSUNBZ0lDQWdkRzluWjJ4bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOUtTNW9hV1JsS0NrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2doWVdOMGFYWmxjMFJoZEdFcElIdGNiaUFnSUNBZ0lDQWdSR0YwWVM1elpYUW9aV3hsYlVGamRHbDJaU3dnUkVGVVFWOUxSVmtrT1N3Z2JuVnNiQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmthVzFsYm5OcGIyNGdQU0IwYUdsekxsOW5aWFJFYVcxbGJuTnBiMjRvS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaERURUZUVTE5T1FVMUZYME5QVEV4QlVGTkZLVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hEVEVGVFUxOU9RVTFGWDBOUFRFeEJVRk5KVGtjcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWld4bGJXVnVkQzV6ZEhsc1pWdGthVzFsYm5OcGIyNWRJRDBnTUR0Y2JseHVJQ0FnSUhSb2FYTXVYMkZrWkVGeWFXRkJibVJEYjJ4c1lYQnpaV1JEYkdGemN5aDBhR2x6TGw5MGNtbG5aMlZ5UVhKeVlYa3NJSFJ5ZFdVcE8xeHVYRzRnSUNBZ2RHaHBjeTVmYVhOVWNtRnVjMmwwYVc5dWFXNW5JRDBnZEhKMVpUdGNibHh1SUNBZ0lHTnZibk4wSUdOdmJYQnNaWFJsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NWZhWE5VY21GdWMybDBhVzl1YVc1bklEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hEVEVGVFUxOU9RVTFGWDBOUFRFeEJVRk5KVGtjcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlEVDB4TVFWQlRSU3dnUTB4QlUxTmZUa0ZOUlY5VFNFOVhKRGNwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk4wZVd4bFcyUnBiV1Z1YzJsdmJsMGdQU0FuSnp0Y2JpQWdJQ0FnSUVWMlpXNTBTR0Z1Wkd4bGNpNTBjbWxuWjJWeUtIUm9hWE11WDJWc1pXMWxiblFzSUVWV1JVNVVYMU5JVDFkT0pEVXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCallYQnBkR0ZzYVhwbFpFUnBiV1Z1YzJsdmJpQTlJR1JwYldWdWMybHZibHN3WFM1MGIxVndjR1Z5UTJGelpTZ3BJQ3NnWkdsdFpXNXphVzl1TG5Oc2FXTmxLREVwTzF4dUlDQWdJR052Ym5OMElITmpjbTlzYkZOcGVtVWdQU0JnYzJOeWIyeHNKSHRqWVhCcGRHRnNhWHBsWkVScGJXVnVjMmx2Ym4xZ08xeHVYRzRnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5aGpiMjF3YkdWMFpTd2dkR2hwY3k1ZlpXeGxiV1Z1ZEN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MExuTjBlV3hsVzJScGJXVnVjMmx2YmwwZ1BTQmdKSHQwYUdsekxsOWxiR1Z0Wlc1MFczTmpjbTlzYkZOcGVtVmRmWEI0WUR0Y2JpQWdmVnh1WEc0Z0lHaHBaR1VvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJselZISmhibk5wZEdsdmJtbHVaeUI4ZkNBaGRHaHBjeTVmYVhOVGFHOTNiaWdwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2MzUmhjblJGZG1WdWRDQTlJRVYyWlc1MFNHRnVaR3hsY2k1MGNtbG5aMlZ5S0hSb2FYTXVYMlZzWlcxbGJuUXNJRVZXUlU1VVgwaEpSRVVrTlNrN1hHNWNiaUFnSUNCcFppQW9jM1JoY25SRmRtVnVkQzVrWldaaGRXeDBVSEpsZG1WdWRHVmtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWkdsdFpXNXphVzl1SUQwZ2RHaHBjeTVmWjJWMFJHbHRaVzV6YVc5dUtDazdYRzVjYmlBZ0lDQjBhR2x6TGw5bGJHVnRaVzUwTG5OMGVXeGxXMlJwYldWdWMybHZibDBnUFNCZ0pIdDBhR2x6TGw5bGJHVnRaVzUwTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BXMlJwYldWdWMybHZibDE5Y0hoZ08xeHVJQ0FnSUhKbFpteHZkeWgwYUdsekxsOWxiR1Z0Wlc1MEtUdGNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDaERURUZUVTE5T1FVMUZYME5QVEV4QlVGTkpUa2NwTzF4dVhHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZRMDlNVEVGUVUwVXNJRU5NUVZOVFgwNUJUVVZmVTBoUFZ5UTNLVHRjYmx4dUlDQWdJR052Ym5OMElIUnlhV2RuWlhKQmNuSmhlVXhsYm1kMGFDQTlJSFJvYVhNdVgzUnlhV2RuWlhKQmNuSmhlUzVzWlc1bmRHZzdYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJ5YVdkblpYSkJjbkpoZVV4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMGNtbG5aMlZ5SUQwZ2RHaHBjeTVmZEhKcFoyZGxja0Z5Y21GNVcybGRPMXh1SUNBZ0lDQWdZMjl1YzNRZ1pXeGxiU0E5SUdkbGRFVnNaVzFsYm5SR2NtOXRVMlZzWldOMGIzSW9kSEpwWjJkbGNpazdYRzVjYmlBZ0lDQWdJR2xtSUNobGJHVnRJQ1ltSUNGMGFHbHpMbDlwYzFOb2IzZHVLR1ZzWlcwcEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmtaRUZ5YVdGQmJtUkRiMnhzWVhCelpXUkRiR0Z6Y3loYmRISnBaMmRsY2wwc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOXBjMVJ5WVc1emFYUnBiMjVwYm1jZ1BTQjBjblZsTzF4dVhHNGdJQ0FnWTI5dWMzUWdZMjl0Y0d4bGRHVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TGw5cGMxUnlZVzV6YVhScGIyNXBibWNnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZRMDlNVEVGUVUwbE9SeWs3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoRFRFRlRVMTlPUVUxRlgwTlBURXhCVUZORktUdGNibHh1SUNBZ0lDQWdSWFpsYm5SSVlXNWtiR1Z5TG5SeWFXZG5aWElvZEdocGN5NWZaV3hsYldWdWRDd2dSVlpGVGxSZlNFbEVSRVZPSkRVcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk4wZVd4bFcyUnBiV1Z1YzJsdmJsMGdQU0FuSnp0Y2JseHVJQ0FnSUhSb2FYTXVYM0YxWlhWbFEyRnNiR0poWTJzb1kyOXRjR3hsZEdVc0lIUm9hWE11WDJWc1pXMWxiblFzSUhSeWRXVXBPMXh1SUNCOVhHNWNiaUFnWDJselUyaHZkMjRvWld4bGJXVnVkQ0E5SUhSb2FYTXVYMlZzWlcxbGJuUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb1EweEJVMU5mVGtGTlJWOVRTRTlYSkRjcE8xeHVJQ0I5SUM4dklGQnlhWFpoZEdWY2JseHVYRzRnSUY5blpYUkRiMjVtYVdjb1kyOXVabWxuS1NCN1hHNGdJQ0FnWTI5dVptbG5JRDBnZXlBdUxpNUVaV1poZFd4MEpEa3NYRzRnSUNBZ0lDQXVMaTVOWVc1cGNIVnNZWFJ2Y2k1blpYUkVZWFJoUVhSMGNtbGlkWFJsY3loMGFHbHpMbDlsYkdWdFpXNTBLU3hjYmlBZ0lDQWdJQzR1TG1OdmJtWnBaMXh1SUNBZ0lIMDdYRzRnSUNBZ1kyOXVabWxuTG5SdloyZHNaU0E5SUVKdmIyeGxZVzRvWTI5dVptbG5MblJ2WjJkc1pTazdJQzh2SUVOdlpYSmpaU0J6ZEhKcGJtY2dkbUZzZFdWelhHNWNiaUFnSUNCamIyNW1hV2N1Y0dGeVpXNTBJRDBnWjJWMFJXeGxiV1Z1ZENoamIyNW1hV2N1Y0dGeVpXNTBLVHRjYmlBZ0lDQjBlWEJsUTJobFkydERiMjVtYVdjb1RrRk5SU1JoTENCamIyNW1hV2NzSUVSbFptRjFiSFJVZVhCbEpEa3BPMXh1SUNBZ0lISmxkSFZ5YmlCamIyNW1hV2M3WEc0Z0lIMWNibHh1SUNCZloyVjBSR2x0Wlc1emFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loRFRFRlRVMTlPUVUxRlgwaFBVa2xhVDA1VVFVd3BJRDhnVjBsRVZFZ2dPaUJJUlVsSFNGUTdYRzRnSUgxY2JseHVJQ0JmYVc1cGRHbGhiR2w2WlVOb2FXeGtjbVZ1S0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZlkyOXVabWxuTG5CaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdOb2FXeGtjbVZ1SUQwZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpDaERURUZUVTE5T1FVMUZYMFJGUlZCRlVsOURTRWxNUkZKRlRpd2dkR2hwY3k1ZlkyOXVabWxuTG5CaGNtVnVkQ2s3WEc0Z0lDQWdVMlZzWldOMGIzSkZibWRwYm1VdVptbHVaQ2hUUlV4RlExUlBVbDlFUVZSQlgxUlBSMGRNUlNRMExDQjBhR2x6TGw5amIyNW1hV2N1Y0dGeVpXNTBLUzVtYVd4MFpYSW9aV3hsYlNBOVBpQWhZMmhwYkdSeVpXNHVhVzVqYkhWa1pYTW9aV3hsYlNrcExtWnZja1ZoWTJnb1pXeGxiV1Z1ZENBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1JsWkNBOUlHZGxkRVZzWlcxbGJuUkdjbTl0VTJWc1pXTjBiM0lvWld4bGJXVnVkQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHpaV3hsWTNSbFpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaR1JCY21saFFXNWtRMjlzYkdGd2MyVmtRMnhoYzNNb1cyVnNaVzFsYm5SZExDQjBhR2x6TGw5cGMxTm9iM2R1S0hObGJHVmpkR1ZrS1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZZV1JrUVhKcFlVRnVaRU52Ykd4aGNITmxaRU5zWVhOektIUnlhV2RuWlhKQmNuSmhlU3dnYVhOUGNHVnVLU0I3WEc0Z0lDQWdhV1lnS0NGMGNtbG5aMlZ5UVhKeVlYa3ViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEhKcFoyZGxja0Z5Y21GNUxtWnZja1ZoWTJnb1pXeGxiU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9hWE5QY0dWdUtTQjdYRzRnSUNBZ0lDQWdJR1ZzWlcwdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoRFRFRlRVMTlPUVUxRlgwTlBURXhCVUZORlJDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmxiR1Z0TG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlEVDB4TVFWQlRSVVFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnbllYSnBZUzFsZUhCaGJtUmxaQ2NzSUdselQzQmxiaWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMGdMeThnVTNSaGRHbGpYRzVjYmx4dUlDQnpkR0YwYVdNZ2FsRjFaWEo1U1c1MFpYSm1ZV05sS0dOdmJtWnBaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdYMk52Ym1acFp5QTlJSHQ5TzF4dVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKM04wY21sdVp5Y2dKaVlnTDNOb2IzZDhhR2xrWlM4dWRHVnpkQ2hqYjI1bWFXY3BLU0I3WEc0Z0lDQWdJQ0FnSUY5amIyNW1hV2N1ZEc5bloyeGxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCRGIyeHNZWEJ6WlM1blpYUlBja055WldGMFpVbHVjM1JoYm1ObEtIUm9hWE1zSUY5amIyNW1hV2NwTzF4dVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhXMk52Ym1acFoxMGdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1RtOGdiV1YwYUc5a0lHNWhiV1ZrSUZ3aUpIdGpiMjVtYVdkOVhDSmdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiWTI5dVptbG5YU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYm4xY2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJFWVhSaElFRndhU0JwYlhCc1pXMWxiblJoZEdsdmJseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibHh1WEc1RmRtVnVkRWhoYm1Sc1pYSXViMjRvWkc5amRXMWxiblFzSUVWV1JVNVVYME5NU1VOTFgwUkJWRUZmUVZCSkpEUXNJRk5GVEVWRFZFOVNYMFJCVkVGZlZFOUhSMHhGSkRRc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0F2THlCd2NtVjJaVzUwUkdWbVlYVnNkQ0J2Ym14NUlHWnZjaUE4WVQ0Z1pXeGxiV1Z1ZEhNZ0tIZG9hV05vSUdOb1lXNW5aU0IwYUdVZ1ZWSk1LU0J1YjNRZ2FXNXphV1JsSUhSb1pTQmpiMnhzWVhCemFXSnNaU0JsYkdWdFpXNTBYRzRnSUdsbUlDaGxkbVZ1ZEM1MFlYSm5aWFF1ZEdGblRtRnRaU0E5UFQwZ0owRW5JSHg4SUdWMlpXNTBMbVJsYkdWbllYUmxWR0Z5WjJWMElDWW1JR1YyWlc1MExtUmxiR1ZuWVhSbFZHRnlaMlYwTG5SaFowNWhiV1VnUFQwOUlDZEJKeWtnZTF4dUlDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCelpXeGxZM1J2Y2lBOUlHZGxkRk5sYkdWamRHOXlSbkp2YlVWc1pXMWxiblFvZEdocGN5azdYRzRnSUdOdmJuTjBJSE5sYkdWamRHOXlSV3hsYldWdWRITWdQU0JUWld4bFkzUnZja1Z1WjJsdVpTNW1hVzVrS0hObGJHVmpkRzl5S1R0Y2JpQWdjMlZzWldOMGIzSkZiR1Z0Wlc1MGN5NW1iM0pGWVdOb0tHVnNaVzFsYm5RZ1BUNGdlMXh1SUNBZ0lFTnZiR3hoY0hObExtZGxkRTl5UTNKbFlYUmxTVzV6ZEdGdVkyVW9aV3hsYldWdWRDd2dlMXh1SUNBZ0lDQWdkRzluWjJ4bE9pQm1ZV3h6WlZ4dUlDQWdJSDBwTG5SdloyZHNaU2dwTzF4dUlDQjlLVHRjYm4wcE8xeHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUdwUmRXVnllVnh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJoWkdRZ0xrTnZiR3hoY0hObElIUnZJR3BSZFdWeWVTQnZibXg1SUdsbUlHcFJkV1Z5ZVNCcGN5QndjbVZ6Wlc1MFhHNGdLaTljYmx4dVpHVm1hVzVsU2xGMVpYSjVVR3gxWjJsdUtFTnZiR3hoY0hObEtUdGNibHh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRbTl2ZEhOMGNtRndJQ2gyTlM0eExqTXBPaUJrY205d1pHOTNiaTVxYzF4dUlDb2dUR2xqWlc1elpXUWdkVzVrWlhJZ1RVbFVJQ2hvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEhkaWN5OWliMjkwYzNSeVlYQXZZbXh2WWk5dFlXbHVMMHhKUTBWT1UwVXBYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dRMjl1YzNSaGJuUnpYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1WEc1amIyNXpkQ0JPUVUxRkpEa2dQU0FuWkhKdmNHUnZkMjRuTzF4dVkyOXVjM1FnUkVGVVFWOUxSVmtrT0NBOUlDZGljeTVrY205d1pHOTNiaWM3WEc1amIyNXpkQ0JGVmtWT1ZGOUxSVmtrT0NBOUlHQXVKSHRFUVZSQlgwdEZXU1E0ZldBN1hHNWpiMjV6ZENCRVFWUkJYMEZRU1Y5TFJWa2tOQ0E5SUNjdVpHRjBZUzFoY0drbk8xeHVZMjl1YzNRZ1JWTkRRVkJGWDB0RldTUXlJRDBnSjBWelkyRndaU2M3WEc1amIyNXpkQ0JUVUVGRFJWOUxSVmtnUFNBblUzQmhZMlVuTzF4dVkyOXVjM1FnVkVGQ1gwdEZXU1F4SUQwZ0oxUmhZaWM3WEc1amIyNXpkQ0JCVWxKUFYxOVZVRjlMUlZrZ1BTQW5RWEp5YjNkVmNDYzdYRzVqYjI1emRDQkJVbEpQVjE5RVQxZE9YMHRGV1NBOUlDZEJjbkp2ZDBSdmQyNG5PMXh1WTI5dWMzUWdVa2xIU0ZSZlRVOVZVMFZmUWxWVVZFOU9JRDBnTWpzZ0x5OGdUVzkxYzJWRmRtVnVkQzVpZFhSMGIyNGdkbUZzZFdVZ1ptOXlJSFJvWlNCelpXTnZibVJoY25rZ1luVjBkRzl1TENCMWMzVmhiR3g1SUhSb1pTQnlhV2RvZENCaWRYUjBiMjVjYmx4dVkyOXVjM1FnVWtWSFJWaFFYMHRGV1VSUFYwNGdQU0J1WlhjZ1VtVm5SWGh3S0dBa2UwRlNVazlYWDFWUVgwdEZXWDE4Skh0QlVsSlBWMTlFVDFkT1gwdEZXWDE4Skh0RlUwTkJVRVZmUzBWWkpESjlZQ2s3WEc1amIyNXpkQ0JGVmtWT1ZGOUlTVVJGSkRRZ1BTQmdhR2xrWlNSN1JWWkZUbFJmUzBWWkpEaDlZRHRjYm1OdmJuTjBJRVZXUlU1VVgwaEpSRVJGVGlRMElEMGdZR2hwWkdSbGJpUjdSVlpGVGxSZlMwVlpKRGg5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMU5JVDFja05DQTlJR0J6YUc5M0pIdEZWa1ZPVkY5TFJWa2tPSDFnTzF4dVkyOXVjM1FnUlZaRlRsUmZVMGhQVjA0a05DQTlJR0J6YUc5M2JpUjdSVlpGVGxSZlMwVlpKRGg5WUR0Y2JtTnZibk4wSUVWV1JVNVVYME5NU1VOTFgwUkJWRUZmUVZCSkpETWdQU0JnWTJ4cFkyc2tlMFZXUlU1VVgwdEZXU1E0ZlNSN1JFRlVRVjlCVUVsZlMwVlpKRFI5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMHRGV1VSUFYwNWZSRUZVUVY5QlVFa2dQU0JnYTJWNVpHOTNiaVI3UlZaRlRsUmZTMFZaSkRoOUpIdEVRVlJCWDBGUVNWOUxSVmtrTkgxZ08xeHVZMjl1YzNRZ1JWWkZUbFJmUzBWWlZWQmZSRUZVUVY5QlVFa2dQU0JnYTJWNWRYQWtlMFZXUlU1VVgwdEZXU1E0ZlNSN1JFRlVRVjlCVUVsZlMwVlpKRFI5WUR0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlUwaFBWeVEySUQwZ0ozTm9iM2NuTzF4dVkyOXVjM1FnUTB4QlUxTmZUa0ZOUlY5RVVrOVFWVkFnUFNBblpISnZjSFZ3Snp0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlJGSlBVRVZPUkNBOUlDZGtjbTl3Wlc1a0p6dGNibU52Ym5OMElFTk1RVk5UWDA1QlRVVmZSRkpQVUZOVVFWSlVJRDBnSjJSeWIzQnpkR0Z5ZENjN1hHNWpiMjV6ZENCRFRFRlRVMTlPUVUxRlgwNUJWa0pCVWlBOUlDZHVZWFppWVhJbk8xeHVZMjl1YzNRZ1UwVk1SVU5VVDFKZlJFRlVRVjlVVDBkSFRFVWtNeUE5SUNkYlpHRjBZUzFpY3kxMGIyZG5iR1U5WENKa2NtOXdaRzkzYmx3aVhTYzdYRzVqYjI1emRDQlRSVXhGUTFSUFVsOU5SVTVWSUQwZ0p5NWtjbTl3Wkc5M2JpMXRaVzUxSnp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDA1QlZrSkJVbDlPUVZZZ1BTQW5MbTVoZG1KaGNpMXVZWFluTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmVmtsVFNVSk1SVjlKVkVWTlV5QTlJQ2N1WkhKdmNHUnZkMjR0YldWdWRTQXVaSEp2Y0dSdmQyNHRhWFJsYlRwdWIzUW9MbVJwYzJGaWJHVmtLVHB1YjNRb09tUnBjMkZpYkdWa0tTYzdYRzVqYjI1emRDQlFURUZEUlUxRlRsUmZWRTlRSUQwZ2FYTlNWRXdvS1NBL0lDZDBiM0F0Wlc1a0p5QTZJQ2QwYjNBdGMzUmhjblFuTzF4dVkyOXVjM1FnVUV4QlEwVk5SVTVVWDFSUFVFVk9SQ0E5SUdselVsUk1LQ2tnUHlBbmRHOXdMWE4wWVhKMEp5QTZJQ2QwYjNBdFpXNWtKenRjYm1OdmJuTjBJRkJNUVVORlRVVk9WRjlDVDFSVVQwMGdQU0JwYzFKVVRDZ3BJRDhnSjJKdmRIUnZiUzFsYm1RbklEb2dKMkp2ZEhSdmJTMXpkR0Z5ZENjN1hHNWpiMjV6ZENCUVRFRkRSVTFGVGxSZlFrOVVWRTlOUlU1RUlEMGdhWE5TVkV3b0tTQS9JQ2RpYjNSMGIyMHRjM1JoY25RbklEb2dKMkp2ZEhSdmJTMWxibVFuTzF4dVkyOXVjM1FnVUV4QlEwVk5SVTVVWDFKSlIwaFVJRDBnYVhOU1ZFd29LU0EvSUNkc1pXWjBMWE4wWVhKMEp5QTZJQ2R5YVdkb2RDMXpkR0Z5ZENjN1hHNWpiMjV6ZENCUVRFRkRSVTFGVGxSZlRFVkdWQ0E5SUdselVsUk1LQ2tnUHlBbmNtbG5hSFF0YzNSaGNuUW5JRG9nSjJ4bFpuUXRjM1JoY25Rbk8xeHVZMjl1YzNRZ1JHVm1ZWFZzZENRNElEMGdlMXh1SUNCdlptWnpaWFE2SUZzd0xDQXlYU3hjYmlBZ1ltOTFibVJoY25rNklDZGpiR2x3Y0dsdVoxQmhjbVZ1ZEhNbkxGeHVJQ0J5WldabGNtVnVZMlU2SUNkMGIyZG5iR1VuTEZ4dUlDQmthWE53YkdGNU9pQW5aSGx1WVcxcFl5Y3NYRzRnSUhCdmNIQmxja052Ym1acFp6b2diblZzYkN4Y2JpQWdZWFYwYjBOc2IzTmxPaUIwY25WbFhHNTlPMXh1WTI5dWMzUWdSR1ZtWVhWc2RGUjVjR1VrT0NBOUlIdGNiaUFnYjJabWMyVjBPaUFuS0dGeWNtRjVmSE4wY21sdVozeG1kVzVqZEdsdmJpa25MRnh1SUNCaWIzVnVaR0Z5ZVRvZ0p5aHpkSEpwYm1kOFpXeGxiV1Z1ZENrbkxGeHVJQ0J5WldabGNtVnVZMlU2SUNjb2MzUnlhVzVuZkdWc1pXMWxiblI4YjJKcVpXTjBLU2NzWEc0Z0lHUnBjM0JzWVhrNklDZHpkSEpwYm1jbkxGeHVJQ0J3YjNCd1pYSkRiMjVtYVdjNklDY29iblZzYkh4dlltcGxZM1I4Wm5WdVkzUnBiMjRwSnl4Y2JpQWdZWFYwYjBOc2IzTmxPaUFuS0dKdmIyeGxZVzU4YzNSeWFXNW5LU2RjYm4wN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTJ4aGMzTWdSR1ZtYVc1cGRHbHZibHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYmx4dVkyeGhjM01nUkhKdmNHUnZkMjRnWlhoMFpXNWtjeUJDWVhObFEyOXRjRzl1Wlc1MElIdGNiaUFnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZEN3Z1kyOXVabWxuS1NCN1hHNGdJQ0FnYzNWd1pYSW9aV3hsYldWdWRDazdYRzRnSUNBZ2RHaHBjeTVmY0c5d2NHVnlJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDlqYjI1bWFXY2dQU0IwYUdsekxsOW5aWFJEYjI1bWFXY29ZMjl1Wm1sbktUdGNiaUFnSUNCMGFHbHpMbDl0Wlc1MUlEMGdkR2hwY3k1ZloyVjBUV1Z1ZFVWc1pXMWxiblFvS1R0Y2JpQWdJQ0IwYUdsekxsOXBiazVoZG1KaGNpQTlJSFJvYVhNdVgyUmxkR1ZqZEU1aGRtSmhjaWdwTzF4dUlDQjlJQzh2SUVkbGRIUmxjbk5jYmx4dVhHNGdJSE4wWVhScFl5Qm5aWFFnUkdWbVlYVnNkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdSR1ZtWVhWc2RDUTRPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR2RsZENCRVpXWmhkV3gwVkhsd1pTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1JHVm1ZWFZzZEZSNWNHVWtPRHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhRZ1RrRk5SU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUa0ZOUlNRNU8xeHVJQ0I5SUM4dklGQjFZbXhwWTF4dVhHNWNiaUFnZEc5bloyeGxLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGMxTm9iM2R1S0NrZ1B5QjBhR2x6TG1ocFpHVW9LU0E2SUhSb2FYTXVjMmh2ZHlncE8xeHVJQ0I5WEc1Y2JpQWdjMmh2ZHlncElIdGNiaUFnSUNCcFppQW9hWE5FYVhOaFlteGxaQ2gwYUdsekxsOWxiR1Z0Wlc1MEtTQjhmQ0IwYUdsekxsOXBjMU5vYjNkdUtIUm9hWE11WDIxbGJuVXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnY21Wc1lYUmxaRlJoY21kbGRDQTlJSHRjYmlBZ0lDQWdJSEpsYkdGMFpXUlVZWEpuWlhRNklIUm9hWE11WDJWc1pXMWxiblJjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wSUhOb2IzZEZkbVZ1ZENBOUlFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDFOSVQxY2tOQ3dnY21Wc1lYUmxaRlJoY21kbGRDazdYRzVjYmlBZ0lDQnBaaUFvYzJodmQwVjJaVzUwTG1SbFptRjFiSFJRY21WMlpXNTBaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCd1lYSmxiblFnUFNCRWNtOXdaRzkzYmk1blpYUlFZWEpsYm5SR2NtOXRSV3hsYldWdWRDaDBhR2x6TGw5bGJHVnRaVzUwS1RzZ0x5OGdWRzkwWVd4c2VTQmthWE5oWW14bElGQnZjSEJsY2lCbWIzSWdSSEp2Y0dSdmQyNXpJR2x1SUU1aGRtSmhjbHh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx1VG1GMlltRnlLU0I3WEc0Z0lDQWdJQ0JOWVc1cGNIVnNZWFJ2Y2k1elpYUkVZWFJoUVhSMGNtbGlkWFJsS0hSb2FYTXVYMjFsYm5Vc0lDZHdiM0J3WlhJbkxDQW5ibTl1WlNjcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWpjbVZoZEdWUWIzQndaWElvY0dGeVpXNTBLVHRjYmlBZ0lDQjlJQzh2SUVsbUlIUm9hWE1nYVhNZ1lTQjBiM1ZqYUMxbGJtRmliR1ZrSUdSbGRtbGpaU0IzWlNCaFpHUWdaWGgwY21GY2JpQWdJQ0F2THlCbGJYQjBlU0J0YjNWelpXOTJaWElnYkdsemRHVnVaWEp6SUhSdklIUm9aU0JpYjJSNUozTWdhVzF0WldScFlYUmxJR05vYVd4a2NtVnVPMXh1SUNBZ0lDOHZJRzl1YkhrZ2JtVmxaR1ZrSUdKbFkyRjFjMlVnYjJZZ1luSnZhMlZ1SUdWMlpXNTBJR1JsYkdWbllYUnBiMjRnYjI0Z2FVOVRYRzRnSUNBZ0x5OGdhSFIwY0hNNkx5OTNkM2N1Y1hWcGNtdHpiVzlrWlM1dmNtY3ZZbXh2Wnk5aGNtTm9hWFpsY3k4eU1ERTBMekF5TDIxdmRYTmxYMlYyWlc1MFgySjFZaTVvZEcxc1hHNWNibHh1SUNBZ0lHbG1JQ2duYjI1MGIzVmphSE4wWVhKMEp5QnBiaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUWdKaVlnSVhCaGNtVnVkQzVqYkc5elpYTjBLRk5GVEVWRFZFOVNYMDVCVmtKQlVsOU9RVllwS1NCN1hHNGdJQ0FnSUNCYlhTNWpiMjVqWVhRb0xpNHVaRzlqZFcxbGJuUXVZbTlrZVM1amFHbHNaSEpsYmlrdVptOXlSV0ZqYUNobGJHVnRJRDArSUVWMlpXNTBTR0Z1Wkd4bGNpNXZiaWhsYkdWdExDQW5iVzkxYzJWdmRtVnlKeXdnYm05dmNDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1Wm05amRYTW9LVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLQ2RoY21saExXVjRjR0Z1WkdWa0p5d2dkSEoxWlNrN1hHNWNiaUFnSUNCMGFHbHpMbDl0Wlc1MUxtTnNZWE56VEdsemRDNWhaR1FvUTB4QlUxTmZUa0ZOUlY5VFNFOVhKRFlwTzF4dVhHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0VOTVFWTlRYMDVCVFVWZlUwaFBWeVEyS1R0Y2JseHVJQ0FnSUVWMlpXNTBTR0Z1Wkd4bGNpNTBjbWxuWjJWeUtIUm9hWE11WDJWc1pXMWxiblFzSUVWV1JVNVVYMU5JVDFkT0pEUXNJSEpsYkdGMFpXUlVZWEpuWlhRcE8xeHVJQ0I5WEc1Y2JpQWdhR2xrWlNncElIdGNiaUFnSUNCcFppQW9hWE5FYVhOaFlteGxaQ2gwYUdsekxsOWxiR1Z0Wlc1MEtTQjhmQ0FoZEdocGN5NWZhWE5UYUc5M2JpaDBhR2x6TGw5dFpXNTFLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUhKbGJHRjBaV1JVWVhKblpYUWdQU0I3WEc0Z0lDQWdJQ0J5Wld4aGRHVmtWR0Z5WjJWME9pQjBhR2x6TGw5bGJHVnRaVzUwWEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdVgyTnZiWEJzWlhSbFNHbGtaU2h5Wld4aGRHVmtWR0Z5WjJWMEtUdGNiaUFnZlZ4dVhHNGdJR1JwYzNCdmMyVW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM0J2Y0hCbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmNHOXdjR1Z5TG1SbGMzUnliM2tvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZFhCbGNpNWthWE53YjNObEtDazdYRzRnSUgxY2JseHVJQ0IxY0dSaGRHVW9LU0I3WEc0Z0lDQWdkR2hwY3k1ZmFXNU9ZWFppWVhJZ1BTQjBhR2x6TGw5a1pYUmxZM1JPWVhaaVlYSW9LVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbDl3YjNCd1pYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzQnZjSEJsY2k1MWNHUmhkR1VvS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdMeThnVUhKcGRtRjBaVnh1WEc1Y2JpQWdYMk52YlhCc1pYUmxTR2xrWlNoeVpXeGhkR1ZrVkdGeVoyVjBLU0I3WEc0Z0lDQWdZMjl1YzNRZ2FHbGtaVVYyWlc1MElEMGdSWFpsYm5SSVlXNWtiR1Z5TG5SeWFXZG5aWElvZEdocGN5NWZaV3hsYldWdWRDd2dSVlpGVGxSZlNFbEVSU1EwTENCeVpXeGhkR1ZrVkdGeVoyVjBLVHRjYmx4dUlDQWdJR2xtSUNob2FXUmxSWFpsYm5RdVpHVm1ZWFZzZEZCeVpYWmxiblJsWkNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDBnTHk4Z1NXWWdkR2hwY3lCcGN5QmhJSFJ2ZFdOb0xXVnVZV0pzWldRZ1pHVjJhV05sSUhkbElISmxiVzkyWlNCMGFHVWdaWGgwY21GY2JpQWdJQ0F2THlCbGJYQjBlU0J0YjNWelpXOTJaWElnYkdsemRHVnVaWEp6SUhkbElHRmtaR1ZrSUdadmNpQnBUMU1nYzNWd2NHOXlkRnh1WEc1Y2JpQWdJQ0JwWmlBb0oyOXVkRzkxWTJoemRHRnlkQ2NnYVc0Z1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCYlhTNWpiMjVqWVhRb0xpNHVaRzlqZFcxbGJuUXVZbTlrZVM1amFHbHNaSEpsYmlrdVptOXlSV0ZqYUNobGJHVnRJRDArSUVWMlpXNTBTR0Z1Wkd4bGNpNXZabVlvWld4bGJTd2dKMjF2ZFhObGIzWmxjaWNzSUc1dmIzQXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZjRzl3Y0dWeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5d2IzQndaWEl1WkdWemRISnZlU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgyMWxiblV1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hEVEVGVFUxOU9RVTFGWDFOSVQxY2tOaWs3WEc1Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MExtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb1EweEJVMU5mVGtGTlJWOVRTRTlYSkRZcE8xeHVYRzRnSUNBZ2RHaHBjeTVmWld4bGJXVnVkQzV6WlhSQmRIUnlhV0oxZEdVb0oyRnlhV0V0Wlhod1lXNWtaV1FuTENBblptRnNjMlVuS1R0Y2JseHVJQ0FnSUUxaGJtbHdkV3hoZEc5eUxuSmxiVzkyWlVSaGRHRkJkSFJ5YVdKMWRHVW9kR2hwY3k1ZmJXVnVkU3dnSjNCdmNIQmxjaWNwTzF4dUlDQWdJRVYyWlc1MFNHRnVaR3hsY2k1MGNtbG5aMlZ5S0hSb2FYTXVYMlZzWlcxbGJuUXNJRVZXUlU1VVgwaEpSRVJGVGlRMExDQnlaV3hoZEdWa1ZHRnlaMlYwS1R0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJEYjI1bWFXY29ZMjl1Wm1sbktTQjdYRzRnSUNBZ1kyOXVabWxuSUQwZ2V5QXVMaTUwYUdsekxtTnZibk4wY25WamRHOXlMa1JsWm1GMWJIUXNYRzRnSUNBZ0lDQXVMaTVOWVc1cGNIVnNZWFJ2Y2k1blpYUkVZWFJoUVhSMGNtbGlkWFJsY3loMGFHbHpMbDlsYkdWdFpXNTBLU3hjYmlBZ0lDQWdJQzR1TG1OdmJtWnBaMXh1SUNBZ0lIMDdYRzRnSUNBZ2RIbHdaVU5vWldOclEyOXVabWxuS0U1QlRVVWtPU3dnWTI5dVptbG5MQ0IwYUdsekxtTnZibk4wY25WamRHOXlMa1JsWm1GMWJIUlVlWEJsS1R0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVabWxuTG5KbFptVnlaVzVqWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnSVdselJXeGxiV1Z1ZENoamIyNW1hV2N1Y21WbVpYSmxibU5sS1NBbUppQjBlWEJsYjJZZ1kyOXVabWxuTG5KbFptVnlaVzVqWlM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDOHZJRkJ2Y0hCbGNpQjJhWEowZFdGc0lHVnNaVzFsYm5SeklISmxjWFZwY21VZ1lTQm5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FnYldWMGFHOWtYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0FrZTA1QlRVVWtPUzUwYjFWd2NHVnlRMkZ6WlNncGZUb2dUM0IwYVc5dUlGd2ljbVZtWlhKbGJtTmxYQ0lnY0hKdmRtbGtaV1FnZEhsd1pTQmNJbTlpYW1WamRGd2lJSGRwZEdodmRYUWdZU0J5WlhGMWFYSmxaQ0JjSW1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRGd2lJRzFsZEdodlpDNWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1kyOXVabWxuTzF4dUlDQjlYRzVjYmlBZ1gyTnlaV0YwWlZCdmNIQmxjaWh3WVhKbGJuUXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRkJ2Y0hCbGNpQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMEp2YjNSemRISmhjRnhjSjNNZ1pISnZjR1J2ZDI1eklISmxjWFZwY21VZ1VHOXdjR1Z5SUNob2RIUndjem92TDNCdmNIQmxjaTVxY3k1dmNtY3BKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUhKbFptVnlaVzVqWlVWc1pXMWxiblFnUFNCMGFHbHpMbDlsYkdWdFpXNTBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMk52Ym1acFp5NXlaV1psY21WdVkyVWdQVDA5SUNkd1lYSmxiblFuS1NCN1hHNGdJQ0FnSUNCeVpXWmxjbVZ1WTJWRmJHVnRaVzUwSUQwZ2NHRnlaVzUwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhORmJHVnRaVzUwS0hSb2FYTXVYMk52Ym1acFp5NXlaV1psY21WdVkyVXBLU0I3WEc0Z0lDQWdJQ0J5WldabGNtVnVZMlZGYkdWdFpXNTBJRDBnWjJWMFJXeGxiV1Z1ZENoMGFHbHpMbDlqYjI1bWFXY3VjbVZtWlhKbGJtTmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQjBhR2x6TGw5amIyNW1hV2N1Y21WbVpYSmxibU5sSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdjbVZtWlhKbGJtTmxSV3hsYldWdWRDQTlJSFJvYVhNdVgyTnZibVpwWnk1eVpXWmxjbVZ1WTJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjRzl3Y0dWeVEyOXVabWxuSUQwZ2RHaHBjeTVmWjJWMFVHOXdjR1Z5UTI5dVptbG5LQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnBjMFJwYzNCc1lYbFRkR0YwYVdNZ1BTQndiM0J3WlhKRGIyNW1hV2N1Ylc5a2FXWnBaWEp6TG1acGJtUW9iVzlrYVdacFpYSWdQVDRnYlc5a2FXWnBaWEl1Ym1GdFpTQTlQVDBnSjJGd2NHeDVVM1I1YkdWekp5QW1KaUJ0YjJScFptbGxjaTVsYm1GaWJHVmtJRDA5UFNCbVlXeHpaU2s3WEc0Z0lDQWdkR2hwY3k1ZmNHOXdjR1Z5SUQwZ1VHOXdjR1Z5TG1OeVpXRjBaVkJ2Y0hCbGNpaHlaV1psY21WdVkyVkZiR1Z0Wlc1MExDQjBhR2x6TGw5dFpXNTFMQ0J3YjNCd1pYSkRiMjVtYVdjcE8xeHVYRzRnSUNBZ2FXWWdLR2x6UkdsemNHeGhlVk4wWVhScFl5a2dlMXh1SUNBZ0lDQWdUV0Z1YVhCMWJHRjBiM0l1YzJWMFJHRjBZVUYwZEhKcFluVjBaU2gwYUdsekxsOXRaVzUxTENBbmNHOXdjR1Z5Snl3Z0ozTjBZWFJwWXljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lGOXBjMU5vYjNkdUtHVnNaVzFsYm5RZ1BTQjBhR2x6TGw5bGJHVnRaVzUwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRU5NUVZOVFgwNUJUVVZmVTBoUFZ5UTJLVHRjYmlBZ2ZWeHVYRzRnSUY5blpYUk5aVzUxUld4bGJXVnVkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdVMlZzWldOMGIzSkZibWRwYm1VdWJtVjRkQ2gwYUdsekxsOWxiR1Z0Wlc1MExDQlRSVXhGUTFSUFVsOU5SVTVWS1Zzd1hUdGNiaUFnZlZ4dVhHNGdJRjluWlhSUWJHRmpaVzFsYm5Rb0tTQjdYRzRnSUNBZ1kyOXVjM1FnY0dGeVpXNTBSSEp2Y0dSdmQyNGdQU0IwYUdsekxsOWxiR1Z0Wlc1MExuQmhjbVZ1ZEU1dlpHVTdYRzVjYmlBZ0lDQnBaaUFvY0dGeVpXNTBSSEp2Y0dSdmQyNHVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRU5NUVZOVFgwNUJUVVZmUkZKUFVFVk9SQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRVEVGRFJVMUZUbFJmVWtsSFNGUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEJoY21WdWRFUnliM0JrYjNkdUxtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5aERURUZUVTE5T1FVMUZYMFJTVDFCVFZFRlNWQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJRVEVGRFJVMUZUbFJmVEVWR1ZEdGNiaUFnSUNCOUlDOHZJRmRsSUc1bFpXUWdkRzhnZEhKcGJTQjBhR1VnZG1Gc2RXVWdZbVZqWVhWelpTQmpkWE4wYjIwZ2NISnZjR1Z5ZEdsbGN5QmpZVzRnWVd4emJ5QnBibU5zZFdSbElITndZV05sYzF4dVhHNWNiaUFnSUNCamIyNXpkQ0JwYzBWdVpDQTlJR2RsZEVOdmJYQjFkR1ZrVTNSNWJHVW9kR2hwY3k1ZmJXVnVkU2t1WjJWMFVISnZjR1Z5ZEhsV1lXeDFaU2duTFMxaWN5MXdiM05wZEdsdmJpY3BMblJ5YVcwb0tTQTlQVDBnSjJWdVpDYzdYRzVjYmlBZ0lDQnBaaUFvY0dGeVpXNTBSSEp2Y0dSdmQyNHVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRU5NUVZOVFgwNUJUVVZmUkZKUFVGVlFLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR2x6Ulc1a0lEOGdVRXhCUTBWTlJVNVVYMVJQVUVWT1JDQTZJRkJNUVVORlRVVk9WRjlVVDFBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR2x6Ulc1a0lEOGdVRXhCUTBWTlJVNVVYMEpQVkZSUFRVVk9SQ0E2SUZCTVFVTkZUVVZPVkY5Q1QxUlVUMDA3WEc0Z0lIMWNibHh1SUNCZlpHVjBaV04wVG1GMlltRnlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bGJHVnRaVzUwTG1Oc2IzTmxjM1FvWUM0a2UwTk1RVk5UWDA1QlRVVmZUa0ZXUWtGU2ZXQXBJQ0U5UFNCdWRXeHNPMXh1SUNCOVhHNWNiaUFnWDJkbGRFOW1abk5sZENncElIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0J2Wm1aelpYUmNiaUFnSUNCOUlEMGdkR2hwY3k1ZlkyOXVabWxuTzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlptWnpaWFFnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2IyWm1jMlYwTG5Od2JHbDBLQ2NzSnlrdWJXRndLSFpoYkNBOVBpQk9kVzFpWlhJdWNHRnljMlZKYm5Rb2RtRnNMQ0F4TUNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IyWm1jMlYwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjRzl3Y0dWeVJHRjBZU0E5UGlCdlptWnpaWFFvY0c5d2NHVnlSR0YwWVN3Z2RHaHBjeTVmWld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHOW1abk5sZER0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJRYjNCd1pYSkRiMjVtYVdjb0tTQjdYRzRnSUNBZ1kyOXVjM1FnWkdWbVlYVnNkRUp6VUc5d2NHVnlRMjl1Wm1sbklEMGdlMXh1SUNBZ0lDQWdjR3hoWTJWdFpXNTBPaUIwYUdsekxsOW5aWFJRYkdGalpXMWxiblFvS1N4Y2JpQWdJQ0FnSUcxdlpHbG1hV1Z5Y3pvZ1czdGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ0ozQnlaWFpsYm5SUGRtVnlabXh2ZHljc1hHNGdJQ0FnSUNBZ0lHOXdkR2x2Ym5NNklIdGNiaUFnSUNBZ0lDQWdJQ0JpYjNWdVpHRnllVG9nZEdocGN5NWZZMjl1Wm1sbkxtSnZkVzVrWVhKNVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNJSHRjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dKMjltWm5ObGRDY3NYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSHRjYmlBZ0lDQWdJQ0FnSUNCdlptWnpaWFE2SUhSb2FYTXVYMmRsZEU5bVpuTmxkQ2dwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxZFhHNGdJQ0FnZlRzZ0x5OGdSR2x6WVdKc1pTQlFiM0J3WlhJZ2FXWWdkMlVnYUdGMlpTQmhJSE4wWVhScFl5QmthWE53YkdGNVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZlkyOXVabWxuTG1ScGMzQnNZWGtnUFQwOUlDZHpkR0YwYVdNbktTQjdYRzRnSUNBZ0lDQmtaV1poZFd4MFFuTlFiM0J3WlhKRGIyNW1hV2N1Ylc5a2FXWnBaWEp6SUQwZ1czdGNiaUFnSUNBZ0lDQWdibUZ0WlRvZ0oyRndjR3g1VTNSNWJHVnpKeXhjYmlBZ0lDQWdJQ0FnWlc1aFlteGxaRG9nWm1Gc2MyVmNiaUFnSUNBZ0lIMWRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCN0lDNHVMbVJsWm1GMWJIUkNjMUJ2Y0hCbGNrTnZibVpwWnl4Y2JpQWdJQ0FnSUM0dUxpaDBlWEJsYjJZZ2RHaHBjeTVmWTI5dVptbG5MbkJ2Y0hCbGNrTnZibVpwWnlBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUhSb2FYTXVYMk52Ym1acFp5NXdiM0J3WlhKRGIyNW1hV2NvWkdWbVlYVnNkRUp6VUc5d2NHVnlRMjl1Wm1sbktTQTZJSFJvYVhNdVgyTnZibVpwWnk1d2IzQndaWEpEYjI1bWFXY3BYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJRjl6Wld4bFkzUk5aVzUxU1hSbGJTaDdYRzRnSUNBZ2EyVjVMRnh1SUNBZ0lIUmhjbWRsZEZ4dUlDQjlLU0I3WEc0Z0lDQWdZMjl1YzNRZ2FYUmxiWE1nUFNCVFpXeGxZM1J2Y2tWdVoybHVaUzVtYVc1a0tGTkZURVZEVkU5U1gxWkpVMGxDVEVWZlNWUkZUVk1zSUhSb2FYTXVYMjFsYm5VcExtWnBiSFJsY2locGMxWnBjMmxpYkdVcE8xeHVYRzRnSUNBZ2FXWWdLQ0ZwZEdWdGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5SUM4dklHbG1JSFJoY21kbGRDQnBjMjRuZENCcGJtTnNkV1JsWkNCcGJpQnBkR1Z0Y3lBb1pTNW5MaUIzYUdWdUlHVjRjR0Z1WkdsdVp5QjBhR1VnWkhKdmNHUnZkMjRwWEc0Z0lDQWdMeThnWVd4c2IzY2dZM2xqYkdsdVp5QjBieUJuWlhRZ2RHaGxJR3hoYzNRZ2FYUmxiU0JwYmlCallYTmxJR3RsZVNCbGNYVmhiSE1nUVZKU1QxZGZWVkJmUzBWWlhHNWNibHh1SUNBZ0lHZGxkRTVsZUhSQlkzUnBkbVZGYkdWdFpXNTBLR2wwWlcxekxDQjBZWEpuWlhRc0lHdGxlU0E5UFQwZ1FWSlNUMWRmUkU5WFRsOUxSVmtzSUNGcGRHVnRjeTVwYm1Oc2RXUmxjeWgwWVhKblpYUXBLUzVtYjJOMWN5Z3BPMXh1SUNCOUlDOHZJRk4wWVhScFkxeHVYRzVjYmlBZ2MzUmhkR2xqSUdwUmRXVnllVWx1ZEdWeVptRmpaU2hqYjI1bWFXY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVsWVdOb0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCRWNtOXdaRzkzYmk1blpYUlBja055WldGMFpVbHVjM1JoYm1ObEtIUm9hWE1zSUdOdmJtWnBaeWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyOXVabWxuSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlWdGpiMjVtYVdkZElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JPYnlCdFpYUm9iMlFnYm1GdFpXUWdYQ0lrZTJOdmJtWnBaMzFjSW1BcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmtZWFJoVzJOdmJtWnBaMTBvS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCamJHVmhjazFsYm5WektHVjJaVzUwS1NCN1hHNGdJQ0FnYVdZZ0tHVjJaVzUwSUNZbUlDaGxkbVZ1ZEM1aWRYUjBiMjRnUFQwOUlGSkpSMGhVWDAxUFZWTkZYMEpWVkZSUFRpQjhmQ0JsZG1WdWRDNTBlWEJsSUQwOVBTQW5hMlY1ZFhBbklDWW1JR1YyWlc1MExtdGxlU0FoUFQwZ1ZFRkNYMHRGV1NReEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSFJ2WjJkc1pYTWdQU0JUWld4bFkzUnZja1Z1WjJsdVpTNW1hVzVrS0ZORlRFVkRWRTlTWDBSQlZFRmZWRTlIUjB4RkpETXBPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHeGxiaUE5SUhSdloyZHNaWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lHTnZibk4wSUdOdmJuUmxlSFFnUFNCRWNtOXdaRzkzYmk1blpYUkpibk4wWVc1alpTaDBiMmRuYkdWelcybGRLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tDRmpiMjUwWlhoMElIeDhJR052Ym5SbGVIUXVYMk52Ym1acFp5NWhkWFJ2UTJ4dmMyVWdQVDA5SUdaaGJITmxLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9JV052Ym5SbGVIUXVYMmx6VTJodmQyNG9LU2tnZTF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1kyOXVjM1FnY21Wc1lYUmxaRlJoY21kbGRDQTlJSHRjYmlBZ0lDQWdJQ0FnY21Wc1lYUmxaRlJoY21kbGREb2dZMjl1ZEdWNGRDNWZaV3hsYldWdWRGeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdhV1lnS0dWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052YlhCdmMyVmtVR0YwYUNBOUlHVjJaVzUwTG1OdmJYQnZjMlZrVUdGMGFDZ3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnBjMDFsYm5WVVlYSm5aWFFnUFNCamIyMXdiM05sWkZCaGRHZ3VhVzVqYkhWa1pYTW9ZMjl1ZEdWNGRDNWZiV1Z1ZFNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJYQnZjMlZrVUdGMGFDNXBibU5zZFdSbGN5aGpiMjUwWlhoMExsOWxiR1Z0Wlc1MEtTQjhmQ0JqYjI1MFpYaDBMbDlqYjI1bWFXY3VZWFYwYjBOc2IzTmxJRDA5UFNBbmFXNXphV1JsSnlBbUppQWhhWE5OWlc1MVZHRnlaMlYwSUh4OElHTnZiblJsZUhRdVgyTnZibVpwWnk1aGRYUnZRMnh2YzJVZ1BUMDlJQ2R2ZFhSemFXUmxKeUFtSmlCcGMwMWxiblZVWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQXZMeUJVWVdJZ2JtRjJhV2RoZEdsdmJpQjBhSEp2ZFdkb0lIUm9aU0JrY205d1pHOTNiaUJ0Wlc1MUlHOXlJR1YyWlc1MGN5Qm1jbTl0SUdOdmJuUmhhVzVsWkNCcGJuQjFkSE1nYzJodmRXeGtiaWQwSUdOc2IzTmxJSFJvWlNCdFpXNTFYRzVjYmx4dUlDQWdJQ0FnSUNCcFppQW9ZMjl1ZEdWNGRDNWZiV1Z1ZFM1amIyNTBZV2x1Y3lobGRtVnVkQzUwWVhKblpYUXBJQ1ltSUNobGRtVnVkQzUwZVhCbElEMDlQU0FuYTJWNWRYQW5JQ1ltSUdWMlpXNTBMbXRsZVNBOVBUMGdWRUZDWDB0RldTUXhJSHg4SUM5cGJuQjFkSHh6Wld4bFkzUjhiM0IwYVc5dWZIUmxlSFJoY21WaGZHWnZjbTB2YVM1MFpYTjBLR1YyWlc1MExuUmhjbWRsZEM1MFlXZE9ZVzFsS1NrcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRDNTBlWEJsSUQwOVBTQW5ZMnhwWTJzbktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21Wc1lYUmxaRlJoY21kbGRDNWpiR2xqYTBWMlpXNTBJRDBnWlhabGJuUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWTI5dWRHVjRkQzVmWTI5dGNHeGxkR1ZJYVdSbEtISmxiR0YwWldSVVlYSm5aWFFwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhSUVlYSmxiblJHY205dFJXeGxiV1Z1ZENobGJHVnRaVzUwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2RsZEVWc1pXMWxiblJHY205dFUyVnNaV04wYjNJb1pXeGxiV1Z1ZENrZ2ZId2daV3hsYldWdWRDNXdZWEpsYm5ST2IyUmxPMXh1SUNCOVhHNWNiaUFnYzNSaGRHbGpJR1JoZEdGQmNHbExaWGxrYjNkdVNHRnVaR3hsY2lobGRtVnVkQ2tnZTF4dUlDQWdJQzh2SUVsbUlHNXZkQ0JwYm5CMWRDOTBaWGgwWVhKbFlUcGNiaUFnSUNBdkx5QWdMU0JCYm1RZ2JtOTBJR0VnYTJWNUlHbHVJRkpGUjBWWVVGOUxSVmxFVDFkT0lEMCtJRzV2ZENCaElHUnliM0JrYjNkdUlHTnZiVzFoYm1SY2JpQWdJQ0F2THlCSlppQnBibkIxZEM5MFpYaDBZWEpsWVRwY2JpQWdJQ0F2THlBZ0xTQkpaaUJ6Y0dGalpTQnJaWGtnUFQ0Z2JtOTBJR0VnWkhKdmNHUnZkMjRnWTI5dGJXRnVaRnh1SUNBZ0lDOHZJQ0F0SUVsbUlHdGxlU0JwY3lCdmRHaGxjaUIwYUdGdUlHVnpZMkZ3WlZ4dUlDQWdJQzh2SUNBZ0lDMGdTV1lnYTJWNUlHbHpJRzV2ZENCMWNDQnZjaUJrYjNkdUlEMCtJRzV2ZENCaElHUnliM0JrYjNkdUlHTnZiVzFoYm1SY2JpQWdJQ0F2THlBZ0lDQXRJRWxtSUhSeWFXZG5aWElnYVc1emFXUmxJSFJvWlNCdFpXNTFJRDArSUc1dmRDQmhJR1J5YjNCa2IzZHVJR052YlcxaGJtUmNiaUFnSUNCcFppQW9MMmx1Y0hWMGZIUmxlSFJoY21WaEwya3VkR1Z6ZENobGRtVnVkQzUwWVhKblpYUXVkR0ZuVG1GdFpTa2dQeUJsZG1WdWRDNXJaWGtnUFQwOUlGTlFRVU5GWDB0RldTQjhmQ0JsZG1WdWRDNXJaWGtnSVQwOUlFVlRRMEZRUlY5TFJWa2tNaUFtSmlBb1pYWmxiblF1YTJWNUlDRTlQU0JCVWxKUFYxOUVUMWRPWDB0RldTQW1KaUJsZG1WdWRDNXJaWGtnSVQwOUlFRlNVazlYWDFWUVgwdEZXU0I4ZkNCbGRtVnVkQzUwWVhKblpYUXVZMnh2YzJWemRDaFRSVXhGUTFSUFVsOU5SVTVWS1NrZ09pQWhVa1ZIUlZoUVgwdEZXVVJQVjA0dWRHVnpkQ2hsZG1WdWRDNXJaWGtwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2FYTkJZM1JwZG1VZ1BTQjBhR2x6TG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loRFRFRlRVMTlPUVUxRlgxTklUMWNrTmlrN1hHNWNiaUFnSUNCcFppQW9JV2x6UVdOMGFYWmxJQ1ltSUdWMlpXNTBMbXRsZVNBOVBUMGdSVk5EUVZCRlgwdEZXU1F5S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0JsZG1WdWRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNibHh1SUNBZ0lHbG1JQ2hwYzBScGMyRmliR1ZrS0hSb2FYTXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnWjJWMFZHOW5aMnhsUW5WMGRHOXVJRDBnZEdocGN5NXRZWFJqYUdWektGTkZURVZEVkU5U1gwUkJWRUZmVkU5SFIweEZKRE1wSUQ4Z2RHaHBjeUE2SUZObGJHVmpkRzl5Ulc1bmFXNWxMbkJ5WlhZb2RHaHBjeXdnVTBWTVJVTlVUMUpmUkVGVVFWOVVUMGRIVEVVa015bGJNRjA3WEc0Z0lDQWdZMjl1YzNRZ2FXNXpkR0Z1WTJVZ1BTQkVjbTl3Wkc5M2JpNW5aWFJQY2tOeVpXRjBaVWx1YzNSaGJtTmxLR2RsZEZSdloyZHNaVUoxZEhSdmJpazdYRzVjYmlBZ0lDQnBaaUFvWlhabGJuUXVhMlY1SUQwOVBTQkZVME5CVUVWZlMwVlpKRElwSUh0Y2JpQWdJQ0FnSUdsdWMzUmhibU5sTG1ocFpHVW9LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aWFpsYm5RdWEyVjVJRDA5UFNCQlVsSlBWMTlWVUY5TFJWa2dmSHdnWlhabGJuUXVhMlY1SUQwOVBTQkJVbEpQVjE5RVQxZE9YMHRGV1NrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0ZwYzBGamRHbDJaU2tnZTF4dUlDQWdJQ0FnSUNCcGJuTjBZVzVqWlM1emFHOTNLQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsdWMzUmhibU5sTGw5elpXeGxZM1JOWlc1MVNYUmxiU2hsZG1WdWRDazdYRzVjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9JV2x6UVdOMGFYWmxJSHg4SUdWMlpXNTBMbXRsZVNBOVBUMGdVMUJCUTBWZlMwVlpLU0I3WEc0Z0lDQWdJQ0JFY205d1pHOTNiaTVqYkdWaGNrMWxiblZ6S0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJFWVhSaElFRndhU0JwYlhCc1pXMWxiblJoZEdsdmJseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibHh1WEc1RmRtVnVkRWhoYm1Sc1pYSXViMjRvWkc5amRXMWxiblFzSUVWV1JVNVVYMHRGV1VSUFYwNWZSRUZVUVY5QlVFa3NJRk5GVEVWRFZFOVNYMFJCVkVGZlZFOUhSMHhGSkRNc0lFUnliM0JrYjNkdUxtUmhkR0ZCY0dsTFpYbGtiM2R1U0dGdVpHeGxjaWs3WEc1RmRtVnVkRWhoYm1Sc1pYSXViMjRvWkc5amRXMWxiblFzSUVWV1JVNVVYMHRGV1VSUFYwNWZSRUZVUVY5QlVFa3NJRk5GVEVWRFZFOVNYMDFGVGxVc0lFUnliM0JrYjNkdUxtUmhkR0ZCY0dsTFpYbGtiM2R1U0dGdVpHeGxjaWs3WEc1RmRtVnVkRWhoYm1Sc1pYSXViMjRvWkc5amRXMWxiblFzSUVWV1JVNVVYME5NU1VOTFgwUkJWRUZmUVZCSkpETXNJRVJ5YjNCa2IzZHVMbU5zWldGeVRXVnVkWE1wTzF4dVJYWmxiblJJWVc1a2JHVnlMbTl1S0dSdlkzVnRaVzUwTENCRlZrVk9WRjlMUlZsVlVGOUVRVlJCWDBGUVNTd2dSSEp2Y0dSdmQyNHVZMnhsWVhKTlpXNTFjeWs3WEc1RmRtVnVkRWhoYm1Sc1pYSXViMjRvWkc5amRXMWxiblFzSUVWV1JVNVVYME5NU1VOTFgwUkJWRUZmUVZCSkpETXNJRk5GVEVWRFZFOVNYMFJCVkVGZlZFOUhSMHhGSkRNc0lHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0JFY205d1pHOTNiaTVuWlhSUGNrTnlaV0YwWlVsdWMzUmhibU5sS0hSb2FYTXBMblJ2WjJkc1pTZ3BPMXh1ZlNrN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nYWxGMVpYSjVYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR0ZrWkNBdVJISnZjR1J2ZDI0Z2RHOGdhbEYxWlhKNUlHOXViSGtnYVdZZ2FsRjFaWEo1SUdseklIQnlaWE5sYm5SY2JpQXFMMXh1WEc1a1pXWnBibVZLVVhWbGNubFFiSFZuYVc0b1JISnZjR1J2ZDI0cE8xeHVYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkNiMjkwYzNSeVlYQWdLSFkxTGpFdU15azZJSFYwYVd3dmMyTnliMnhzUW1GeUxtcHpYRzRnS2lCTWFXTmxibk5sWkNCMWJtUmxjaUJOU1ZRZ0tHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBkMkp6TDJKdmIzUnpkSEpoY0M5aWJHOWlMMjFoYVc0dlRFbERSVTVUUlNsY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibU52Ym5OMElGTkZURVZEVkU5U1gwWkpXRVZFWDBOUFRsUkZUbFFnUFNBbkxtWnBlR1ZrTFhSdmNDd2dMbVpwZUdWa0xXSnZkSFJ2YlN3Z0xtbHpMV1pwZUdWa0xDQXVjM1JwWTJ0NUxYUnZjQ2M3WEc1amIyNXpkQ0JUUlV4RlExUlBVbDlUVkVsRFMxbGZRMDlPVkVWT1ZDQTlJQ2N1YzNScFkydDVMWFJ2Y0NjN1hHNWNibU5zWVhOeklGTmpjbTlzYkVKaGNraGxiSEJsY2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVpYjJSNU8xeHVJQ0I5WEc1Y2JpQWdaMlYwVjJsa2RHZ29LU0I3WEc0Z0lDQWdMeThnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2UVZCSkwxZHBibVJ2ZHk5cGJtNWxjbGRwWkhSb0kzVnpZV2RsWDI1dmRHVnpYRzRnSUNBZ1kyOXVjM1FnWkc5amRXMWxiblJYYVdSMGFDQTlJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNWpiR2xsYm5SWGFXUjBhRHRjYmlBZ0lDQnlaWFIxY200Z1RXRjBhQzVoWW5Nb2QybHVaRzkzTG1sdWJtVnlWMmxrZEdnZ0xTQmtiMk4xYldWdWRGZHBaSFJvS1R0Y2JpQWdmVnh1WEc0Z0lHaHBaR1VvS1NCN1hHNGdJQ0FnWTI5dWMzUWdkMmxrZEdnZ1BTQjBhR2x6TG1kbGRGZHBaSFJvS0NrN1hHNWNiaUFnSUNCMGFHbHpMbDlrYVhOaFlteGxUM1psY2tac2IzY29LVHNnTHk4Z1oybDJaU0J3WVdSa2FXNW5JSFJ2SUdWc1pXMWxiblFnZEc4Z1ltRnNZVzVqWlNCMGFHVWdhR2xrWkdWdUlITmpjbTlzYkdKaGNpQjNhV1IwYUZ4dVhHNWNiaUFnSUNCMGFHbHpMbDl6WlhSRmJHVnRaVzUwUVhSMGNtbGlkWFJsY3loMGFHbHpMbDlsYkdWdFpXNTBMQ0FuY0dGa1pHbHVaMUpwWjJoMEp5d2dZMkZzWTNWc1lYUmxaRlpoYkhWbElEMCtJR05oYkdOMWJHRjBaV1JXWVd4MVpTQXJJSGRwWkhSb0tUc2dMeThnZEhKcFkyczZJRmRsSUdGa2FuVnpkQ0J3YjNOcGRHbDJaU0J3WVdSa2FXNW5VbWxuYUhRZ1lXNWtJRzVsWjJGMGFYWmxJRzFoY21kcGJsSnBaMmgwSUhSdklITjBhV05yZVMxMGIzQWdaV3hsYldWdWRITWdkRzhnYTJWbGNDQnphRzkzYVc1bklHWjFiR3gzYVdSMGFGeHVYRzVjYmlBZ0lDQjBhR2x6TGw5elpYUkZiR1Z0Wlc1MFFYUjBjbWxpZFhSbGN5aFRSVXhGUTFSUFVsOUdTVmhGUkY5RFQwNVVSVTVVTENBbmNHRmtaR2x1WjFKcFoyaDBKeXdnWTJGc1kzVnNZWFJsWkZaaGJIVmxJRDArSUdOaGJHTjFiR0YwWldSV1lXeDFaU0FySUhkcFpIUm9LVHRjYmx4dUlDQWdJSFJvYVhNdVgzTmxkRVZzWlcxbGJuUkJkSFJ5YVdKMWRHVnpLRk5GVEVWRFZFOVNYMU5VU1VOTFdWOURUMDVVUlU1VUxDQW5iV0Z5WjJsdVVtbG5hSFFuTENCallXeGpkV3hoZEdWa1ZtRnNkV1VnUFQ0Z1kyRnNZM1ZzWVhSbFpGWmhiSFZsSUMwZ2QybGtkR2dwTzF4dUlDQjlYRzVjYmlBZ1gyUnBjMkZpYkdWUGRtVnlSbXh2ZHlncElIdGNiaUFnSUNCMGFHbHpMbDl6WVhabFNXNXBkR2xoYkVGMGRISnBZblYwWlNoMGFHbHpMbDlsYkdWdFpXNTBMQ0FuYjNabGNtWnNiM2NuS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjM1I1YkdVdWIzWmxjbVpzYjNjZ1BTQW5hR2xrWkdWdUp6dGNiaUFnZlZ4dVhHNGdJRjl6WlhSRmJHVnRaVzUwUVhSMGNtbGlkWFJsY3loelpXeGxZM1J2Y2l3Z2MzUjViR1ZRY205d0xDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHTnZibk4wSUhOamNtOXNiR0poY2xkcFpIUm9JRDBnZEdocGN5NW5aWFJYYVdSMGFDZ3BPMXh1WEc0Z0lDQWdZMjl1YzNRZ2JXRnVhWEIxYkdGMGFXOXVRMkZzYkVKaFkyc2dQU0JsYkdWdFpXNTBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaGxiR1Z0Wlc1MElDRTlQU0IwYUdsekxsOWxiR1Z0Wlc1MElDWW1JSGRwYm1SdmR5NXBibTVsY2xkcFpIUm9JRDRnWld4bGJXVnVkQzVqYkdsbGJuUlhhV1IwYUNBcklITmpjbTlzYkdKaGNsZHBaSFJvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTVmYzJGMlpVbHVhWFJwWVd4QmRIUnlhV0oxZEdVb1pXeGxiV1Z1ZEN3Z2MzUjViR1ZRY205d0tUdGNibHh1SUNBZ0lDQWdZMjl1YzNRZ1kyRnNZM1ZzWVhSbFpGWmhiSFZsSUQwZ2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvWld4bGJXVnVkQ2xiYzNSNWJHVlFjbTl3WFR0Y2JpQWdJQ0FnSUdWc1pXMWxiblF1YzNSNWJHVmJjM1I1YkdWUWNtOXdYU0E5SUdBa2UyTmhiR3hpWVdOcktFNTFiV0psY2k1d1lYSnpaVVpzYjJGMEtHTmhiR04xYkdGMFpXUldZV3gxWlNrcGZYQjRZRHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdkR2hwY3k1ZllYQndiSGxOWVc1cGNIVnNZWFJwYjI1RFlXeHNZbUZqYXloelpXeGxZM1J2Y2l3Z2JXRnVhWEIxYkdGMGFXOXVRMkZzYkVKaFkyc3BPMXh1SUNCOVhHNWNiaUFnY21WelpYUW9LU0I3WEc0Z0lDQWdkR2hwY3k1ZmNtVnpaWFJGYkdWdFpXNTBRWFIwY21saWRYUmxjeWgwYUdsekxsOWxiR1Z0Wlc1MExDQW5iM1psY21ac2IzY25LVHRjYmx4dUlDQWdJSFJvYVhNdVgzSmxjMlYwUld4bGJXVnVkRUYwZEhKcFluVjBaWE1vZEdocGN5NWZaV3hsYldWdWRDd2dKM0JoWkdScGJtZFNhV2RvZENjcE8xeHVYRzRnSUNBZ2RHaHBjeTVmY21WelpYUkZiR1Z0Wlc1MFFYUjBjbWxpZFhSbGN5aFRSVXhGUTFSUFVsOUdTVmhGUkY5RFQwNVVSVTVVTENBbmNHRmtaR2x1WjFKcFoyaDBKeWs3WEc1Y2JpQWdJQ0IwYUdsekxsOXlaWE5sZEVWc1pXMWxiblJCZEhSeWFXSjFkR1Z6S0ZORlRFVkRWRTlTWDFOVVNVTkxXVjlEVDA1VVJVNVVMQ0FuYldGeVoybHVVbWxuYUhRbktUdGNiaUFnZlZ4dVhHNGdJRjl6WVhabFNXNXBkR2xoYkVGMGRISnBZblYwWlNobGJHVnRaVzUwTENCemRIbHNaVkJ5YjNBcElIdGNiaUFnSUNCamIyNXpkQ0JoWTNSMVlXeFdZV3gxWlNBOUlHVnNaVzFsYm5RdWMzUjViR1ZiYzNSNWJHVlFjbTl3WFR0Y2JseHVJQ0FnSUdsbUlDaGhZM1IxWVd4V1lXeDFaU2tnZTF4dUlDQWdJQ0FnVFdGdWFYQjFiR0YwYjNJdWMyVjBSR0YwWVVGMGRISnBZblYwWlNobGJHVnRaVzUwTENCemRIbHNaVkJ5YjNBc0lHRmpkSFZoYkZaaGJIVmxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmY21WelpYUkZiR1Z0Wlc1MFFYUjBjbWxpZFhSbGN5aHpaV3hsWTNSdmNpd2djM1I1YkdWUWNtOXdLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JXRnVhWEIxYkdGMGFXOXVRMkZzYkVKaFkyc2dQU0JsYkdWdFpXNTBJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbElEMGdUV0Z1YVhCMWJHRjBiM0l1WjJWMFJHRjBZVUYwZEhKcFluVjBaU2hsYkdWdFpXNTBMQ0J6ZEhsc1pWQnliM0FwTzF4dVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCbGJHVnRaVzUwTG5OMGVXeGxMbkpsYlc5MlpWQnliM0JsY25SNUtITjBlV3hsVUhKdmNDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQk5ZVzVwY0hWc1lYUnZjaTV5WlcxdmRtVkVZWFJoUVhSMGNtbGlkWFJsS0dWc1pXMWxiblFzSUhOMGVXeGxVSEp2Y0NrN1hHNGdJQ0FnSUNBZ0lHVnNaVzFsYm5RdWMzUjViR1ZiYzNSNWJHVlFjbTl3WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IwYUdsekxsOWhjSEJzZVUxaGJtbHdkV3hoZEdsdmJrTmhiR3hpWVdOcktITmxiR1ZqZEc5eUxDQnRZVzVwY0hWc1lYUnBiMjVEWVd4c1FtRmpheWs3WEc0Z0lIMWNibHh1SUNCZllYQndiSGxOWVc1cGNIVnNZWFJwYjI1RFlXeHNZbUZqYXloelpXeGxZM1J2Y2l3Z1kyRnNiRUpoWTJzcElIdGNiaUFnSUNCcFppQW9hWE5GYkdWdFpXNTBLSE5sYkdWamRHOXlLU2tnZTF4dUlDQWdJQ0FnWTJGc2JFSmhZMnNvYzJWc1pXTjBiM0lwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQlRaV3hsWTNSdmNrVnVaMmx1WlM1bWFXNWtLSE5sYkdWamRHOXlMQ0IwYUdsekxsOWxiR1Z0Wlc1MEtTNW1iM0pGWVdOb0tHTmhiR3hDWVdOcktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBjMDkyWlhKbWJHOTNhVzVuS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRmRwWkhSb0tDa2dQaUF3TzF4dUlDQjlYRzVjYm4xY2JseHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1FtOXZkSE4wY21Gd0lDaDJOUzR4TGpNcE9pQjFkR2xzTDJKaFkydGtjbTl3TG1welhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQk5TVlFnS0doMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGQySnpMMkp2YjNSemRISmhjQzlpYkc5aUwyMWhhVzR2VEVsRFJVNVRSU2xjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JtTnZibk4wSUVSbFptRjFiSFFrTnlBOUlIdGNiaUFnWTJ4aGMzTk9ZVzFsT2lBbmJXOWtZV3d0WW1GamEyUnliM0FuTEZ4dUlDQnBjMVpwYzJsaWJHVTZJSFJ5ZFdVc1hHNGdJQzh2SUdsbUlHWmhiSE5sTENCM1pTQjFjMlVnZEdobElHSmhZMnRrY205d0lHaGxiSEJsY2lCM2FYUm9iM1YwSUdGa1pHbHVaeUJoYm5rZ1pXeGxiV1Z1ZENCMGJ5QjBhR1VnWkc5dFhHNGdJR2x6UVc1cGJXRjBaV1E2SUdaaGJITmxMRnh1SUNCeWIyOTBSV3hsYldWdWREb2dKMkp2WkhrbkxGeHVJQ0F2THlCbmFYWmxJSFJvWlNCamFHOXBZMlVnZEc4Z2NHeGhZMlVnWW1GamEyUnliM0FnZFc1a1pYSWdaR2xtWm1WeVpXNTBJR1ZzWlcxbGJuUnpYRzRnSUdOc2FXTnJRMkZzYkdKaFkyczZJRzUxYkd4Y2JuMDdYRzVqYjI1emRDQkVaV1poZFd4MFZIbHdaU1EzSUQwZ2UxeHVJQ0JqYkdGemMwNWhiV1U2SUNkemRISnBibWNuTEZ4dUlDQnBjMVpwYzJsaWJHVTZJQ2RpYjI5c1pXRnVKeXhjYmlBZ2FYTkJibWx0WVhSbFpEb2dKMkp2YjJ4bFlXNG5MRnh1SUNCeWIyOTBSV3hsYldWdWREb2dKeWhsYkdWdFpXNTBmSE4wY21sdVp5a25MRnh1SUNCamJHbGphME5oYkd4aVlXTnJPaUFuS0daMWJtTjBhVzl1Zkc1MWJHd3BKMXh1ZlR0Y2JtTnZibk4wSUU1QlRVVWtPQ0E5SUNkaVlXTnJaSEp2Y0NjN1hHNWpiMjV6ZENCRFRFRlRVMTlPUVUxRlgwWkJSRVVrTkNBOUlDZG1ZV1JsSnp0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlUwaFBWeVExSUQwZ0ozTm9iM2NuTzF4dVkyOXVjM1FnUlZaRlRsUmZUVTlWVTBWRVQxZE9JRDBnWUcxdmRYTmxaRzkzYmk1aWN5NGtlMDVCVFVVa09IMWdPMXh1WEc1amJHRnpjeUJDWVdOclpISnZjQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLR052Ym1acFp5a2dlMXh1SUNBZ0lIUm9hWE11WDJOdmJtWnBaeUE5SUhSb2FYTXVYMmRsZEVOdmJtWnBaeWhqYjI1bWFXY3BPMXh1SUNBZ0lIUm9hWE11WDJselFYQndaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MElEMGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lITm9iM2NvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WDJOdmJtWnBaeTVwYzFacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUdWNFpXTjFkR1VvWTJGc2JHSmhZMnNwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11WDJGd2NHVnVaQ2dwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtWnBaeTVwYzBGdWFXMWhkR1ZrS1NCN1hHNGdJQ0FnSUNCeVpXWnNiM2NvZEdocGN5NWZaMlYwUld4bGJXVnVkQ2dwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOW5aWFJGYkdWdFpXNTBLQ2t1WTJ4aGMzTk1hWE4wTG1Ga1pDaERURUZUVTE5T1FVMUZYMU5JVDFja05TazdYRzVjYmlBZ0lDQjBhR2x6TGw5bGJYVnNZWFJsUVc1cGJXRjBhVzl1S0NncElEMCtJSHRjYmlBZ0lDQWdJR1Y0WldOMWRHVW9ZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnYUdsa1pTaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWZZMjl1Wm1sbkxtbHpWbWx6YVdKc1pTa2dlMXh1SUNBZ0lDQWdaWGhsWTNWMFpTaGpZV3hzWW1GamF5azdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZaMlYwUld4bGJXVnVkQ2dwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvUTB4QlUxTmZUa0ZOUlY5VFNFOVhKRFVwTzF4dVhHNGdJQ0FnZEdocGN5NWZaVzExYkdGMFpVRnVhVzFoZEdsdmJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbVJwYzNCdmMyVW9LVHRjYmlBZ0lDQWdJR1Y0WldOMWRHVW9ZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMHBPMXh1SUNCOUlDOHZJRkJ5YVhaaGRHVmNibHh1WEc0Z0lGOW5aWFJGYkdWdFpXNTBLQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVmWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdZbUZqYTJSeWIzQWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1R0Y2JpQWdJQ0FnSUdKaFkydGtjbTl3TG1Oc1lYTnpUbUZ0WlNBOUlIUm9hWE11WDJOdmJtWnBaeTVqYkdGemMwNWhiV1U3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNW1hV2N1YVhOQmJtbHRZWFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQmlZV05yWkhKdmNDNWpiR0Z6YzB4cGMzUXVZV1JrS0VOTVFWTlRYMDVCVFVWZlJrRkVSU1EwS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHaHBjeTVmWld4bGJXVnVkQ0E5SUdKaFkydGtjbTl3TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5bGJHVnRaVzUwTzF4dUlDQjlYRzVjYmlBZ1gyZGxkRU52Ym1acFp5aGpiMjVtYVdjcElIdGNiaUFnSUNCamIyNW1hV2NnUFNCN0lDNHVMa1JsWm1GMWJIUWtOeXhjYmlBZ0lDQWdJQzR1TGloMGVYQmxiMllnWTI5dVptbG5JRDA5UFNBbmIySnFaV04wSnlBL0lHTnZibVpwWnlBNklIdDlLVnh1SUNBZ0lIMDdJQzh2SUhWelpTQm5aWFJGYkdWdFpXNTBLQ2tnZDJsMGFDQjBhR1VnWkdWbVlYVnNkQ0JjSW1KdlpIbGNJaUIwYnlCblpYUWdZU0JtY21WemFDQkZiR1Z0Wlc1MElHOXVJR1ZoWTJnZ2FXNXpkR0Z1ZEdsaGRHbHZibHh1WEc0Z0lDQWdZMjl1Wm1sbkxuSnZiM1JGYkdWdFpXNTBJRDBnWjJWMFJXeGxiV1Z1ZENoamIyNW1hV2N1Y205dmRFVnNaVzFsYm5RcE8xeHVJQ0FnSUhSNWNHVkRhR1ZqYTBOdmJtWnBaeWhPUVUxRkpEZ3NJR052Ym1acFp5d2dSR1ZtWVhWc2RGUjVjR1VrTnlrN1hHNGdJQ0FnY21WMGRYSnVJR052Ym1acFp6dGNiaUFnZlZ4dVhHNGdJRjloY0hCbGJtUW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx6UVhCd1pXNWtaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5amIyNW1hV2N1Y205dmRFVnNaVzFsYm5RdVlYQndaVzVrS0hSb2FYTXVYMmRsZEVWc1pXMWxiblFvS1NrN1hHNWNiaUFnSUNCRmRtVnVkRWhoYm1Sc1pYSXViMjRvZEdocGN5NWZaMlYwUld4bGJXVnVkQ2dwTENCRlZrVk9WRjlOVDFWVFJVUlBWMDRzSUNncElEMCtJSHRjYmlBZ0lDQWdJR1Y0WldOMWRHVW9kR2hwY3k1ZlkyOXVabWxuTG1Oc2FXTnJRMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lIUm9hWE11WDJselFYQndaVzVrWldRZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ1pHbHpjRzl6WlNncElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdVgybHpRWEJ3Wlc1a1pXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCRmRtVnVkRWhoYm1Sc1pYSXViMlptS0hSb2FYTXVYMlZzWlcxbGJuUXNJRVZXUlU1VVgwMVBWVk5GUkU5WFRpazdYRzVjYmlBZ0lDQjBhR2x6TGw5bGJHVnRaVzUwTG5KbGJXOTJaU2dwTzF4dVhHNGdJQ0FnZEdocGN5NWZhWE5CY0hCbGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnWDJWdGRXeGhkR1ZCYm1sdFlYUnBiMjRvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JsZUdWamRYUmxRV1owWlhKVWNtRnVjMmwwYVc5dUtHTmhiR3hpWVdOckxDQjBhR2x6TGw5blpYUkZiR1Z0Wlc1MEtDa3NJSFJvYVhNdVgyTnZibVpwWnk1cGMwRnVhVzFoZEdWa0tUdGNiaUFnZlZ4dVhHNTlYRzVjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRUp2YjNSemRISmhjQ0FvZGpVdU1TNHpLVG9nZFhScGJDOW1iMk4xYzNSeVlYQXVhbk5jYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUUxSlZDQW9hSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1IzWW5NdlltOXZkSE4wY21Gd0wySnNiMkl2YldGcGJpOU1TVU5GVGxORktWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1WTI5dWMzUWdSR1ZtWVhWc2RDUTJJRDBnZTF4dUlDQjBjbUZ3Uld4bGJXVnVkRG9nYm5Wc2JDeGNiaUFnTHk4Z1ZHaGxJR1ZzWlcxbGJuUWdkRzhnZEhKaGNDQm1iMk4xY3lCcGJuTnBaR1VnYjJaY2JpQWdZWFYwYjJadlkzVnpPaUIwY25WbFhHNTlPMXh1WTI5dWMzUWdSR1ZtWVhWc2RGUjVjR1VrTmlBOUlIdGNiaUFnZEhKaGNFVnNaVzFsYm5RNklDZGxiR1Z0Wlc1MEp5eGNiaUFnWVhWMGIyWnZZM1Z6T2lBblltOXZiR1ZoYmlkY2JuMDdYRzVqYjI1emRDQk9RVTFGSkRjZ1BTQW5abTlqZFhOMGNtRndKenRjYm1OdmJuTjBJRVJCVkVGZlMwVlpKRGNnUFNBblluTXVabTlqZFhOMGNtRndKenRjYm1OdmJuTjBJRVZXUlU1VVgwdEZXU1EzSUQwZ1lDNGtlMFJCVkVGZlMwVlpKRGQ5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMFpQUTFWVFNVNGtNU0E5SUdCbWIyTjFjMmx1Skh0RlZrVk9WRjlMUlZra04zMWdPMXh1WTI5dWMzUWdSVlpGVGxSZlMwVlpSRTlYVGw5VVFVSWdQU0JnYTJWNVpHOTNiaTUwWVdJa2UwVldSVTVVWDB0RldTUTNmV0E3WEc1amIyNXpkQ0JVUVVKZlMwVlpJRDBnSjFSaFlpYzdYRzVqYjI1emRDQlVRVUpmVGtGV1gwWlBVbGRCVWtRZ1BTQW5abTl5ZDJGeVpDYzdYRzVqYjI1emRDQlVRVUpmVGtGV1gwSkJRMHRYUVZKRUlEMGdKMkpoWTJ0M1lYSmtKenRjYmx4dVkyeGhjM01nUm05amRYTlVjbUZ3SUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWTI5dVptbG5LU0I3WEc0Z0lDQWdkR2hwY3k1ZlkyOXVabWxuSUQwZ2RHaHBjeTVmWjJWMFEyOXVabWxuS0dOdmJtWnBaeWs3WEc0Z0lDQWdkR2hwY3k1ZmFYTkJZM1JwZG1VZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOXNZWE4wVkdGaVRtRjJSR2x5WldOMGFXOXVJRDBnYm5Wc2JEdGNiaUFnZlZ4dVhHNGdJR0ZqZEdsMllYUmxLQ2tnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lIUnlZWEJGYkdWdFpXNTBMRnh1SUNBZ0lDQWdZWFYwYjJadlkzVnpYRzRnSUNBZ2ZTQTlJSFJvYVhNdVgyTnZibVpwWnp0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5cGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoaGRYUnZabTlqZFhNcElIdGNiaUFnSUNBZ0lIUnlZWEJGYkdWdFpXNTBMbVp2WTNWektDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMbTltWmloa2IyTjFiV1Z1ZEN3Z1JWWkZUbFJmUzBWWkpEY3BPeUF2THlCbmRXRnlaQ0JoWjJGcGJuTjBJR2x1Wm1sdWFYUmxJR1p2WTNWeklHeHZiM0JjYmx4dUlDQWdJRVYyWlc1MFNHRnVaR3hsY2k1dmJpaGtiMk4xYldWdWRDd2dSVlpGVGxSZlJrOURWVk5KVGlReExDQmxkbVZ1ZENBOVBpQjBhR2x6TGw5b1lXNWtiR1ZHYjJOMWMybHVLR1YyWlc1MEtTazdYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMbTl1S0dSdlkzVnRaVzUwTENCRlZrVk9WRjlMUlZsRVQxZE9YMVJCUWl3Z1pYWmxiblFnUFQ0Z2RHaHBjeTVmYUdGdVpHeGxTMlY1Wkc5M2JpaGxkbVZ1ZENrcE8xeHVJQ0FnSUhSb2FYTXVYMmx6UVdOMGFYWmxJRDBnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJR1JsWVdOMGFYWmhkR1VvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGMwRmpkR2wyWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgybHpRV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOW1aaWhrYjJOMWJXVnVkQ3dnUlZaRlRsUmZTMFZaSkRjcE8xeHVJQ0I5SUM4dklGQnlhWFpoZEdWY2JseHVYRzRnSUY5b1lXNWtiR1ZHYjJOMWMybHVLR1YyWlc1MEtTQjdYRzRnSUNBZ1kyOXVjM1FnZTF4dUlDQWdJQ0FnZEdGeVoyVjBYRzRnSUNBZ2ZTQTlJR1YyWlc1ME8xeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJSFJ5WVhCRmJHVnRaVzUwWEc0Z0lDQWdmU0E5SUhSb2FYTXVYMk52Ym1acFp6dGNibHh1SUNBZ0lHbG1JQ2gwWVhKblpYUWdQVDA5SUdSdlkzVnRaVzUwSUh4OElIUmhjbWRsZENBOVBUMGdkSEpoY0VWc1pXMWxiblFnZkh3Z2RISmhjRVZzWlcxbGJuUXVZMjl1ZEdGcGJuTW9kR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR1ZzWlcxbGJuUnpJRDBnVTJWc1pXTjBiM0pGYm1kcGJtVXVabTlqZFhOaFlteGxRMmhwYkdSeVpXNG9kSEpoY0VWc1pXMWxiblFwTzF4dVhHNGdJQ0FnYVdZZ0tHVnNaVzFsYm5SekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnZEhKaGNFVnNaVzFsYm5RdVptOWpkWE1vS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVYMnhoYzNSVVlXSk9ZWFpFYVhKbFkzUnBiMjRnUFQwOUlGUkJRbDlPUVZaZlFrRkRTMWRCVWtRcElIdGNiaUFnSUNBZ0lHVnNaVzFsYm5SelcyVnNaVzFsYm5SekxteGxibWQwYUNBdElERmRMbVp2WTNWektDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWc1pXMWxiblJ6V3pCZExtWnZZM1Z6S0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1gyaGhibVJzWlV0bGVXUnZkMjRvWlhabGJuUXBJSHRjYmlBZ0lDQnBaaUFvWlhabGJuUXVhMlY1SUNFOVBTQlVRVUpmUzBWWktTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZiR0Z6ZEZSaFlrNWhka1JwY21WamRHbHZiaUE5SUdWMlpXNTBMbk5vYVdaMFMyVjVJRDhnVkVGQ1gwNUJWbDlDUVVOTFYwRlNSQ0E2SUZSQlFsOU9RVlpmUms5U1YwRlNSRHRjYmlBZ2ZWeHVYRzRnSUY5blpYUkRiMjVtYVdjb1kyOXVabWxuS1NCN1hHNGdJQ0FnWTI5dVptbG5JRDBnZXlBdUxpNUVaV1poZFd4MEpEWXNYRzRnSUNBZ0lDQXVMaTRvZEhsd1pXOW1JR052Ym1acFp5QTlQVDBnSjI5aWFtVmpkQ2NnUHlCamIyNW1hV2NnT2lCN2ZTbGNiaUFnSUNCOU8xeHVJQ0FnSUhSNWNHVkRhR1ZqYTBOdmJtWnBaeWhPUVUxRkpEY3NJR052Ym1acFp5d2dSR1ZtWVhWc2RGUjVjR1VrTmlrN1hHNGdJQ0FnY21WMGRYSnVJR052Ym1acFp6dGNiaUFnZlZ4dVhHNTlYRzVjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRUp2YjNSemRISmhjQ0FvZGpVdU1TNHpLVG9nYlc5a1lXd3Vhbk5jYmlBcUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUUxSlZDQW9hSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1IzWW5NdlltOXZkSE4wY21Gd0wySnNiMkl2YldGcGJpOU1TVU5GVGxORktWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFMMXh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlFTnZibk4wWVc1MGMxeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpOWNibHh1WTI5dWMzUWdUa0ZOUlNRMklEMGdKMjF2WkdGc0p6dGNibU52Ym5OMElFUkJWRUZmUzBWWkpEWWdQU0FuWW5NdWJXOWtZV3duTzF4dVkyOXVjM1FnUlZaRlRsUmZTMFZaSkRZZ1BTQmdMaVI3UkVGVVFWOUxSVmtrTm4xZ08xeHVZMjl1YzNRZ1JFRlVRVjlCVUVsZlMwVlpKRE1nUFNBbkxtUmhkR0V0WVhCcEp6dGNibU52Ym5OMElFVlRRMEZRUlY5TFJWa2tNU0E5SUNkRmMyTmhjR1VuTzF4dVkyOXVjM1FnUkdWbVlYVnNkQ1ExSUQwZ2UxeHVJQ0JpWVdOclpISnZjRG9nZEhKMVpTeGNiaUFnYTJWNVltOWhjbVE2SUhSeWRXVXNYRzRnSUdadlkzVnpPaUIwY25WbFhHNTlPMXh1WTI5dWMzUWdSR1ZtWVhWc2RGUjVjR1VrTlNBOUlIdGNiaUFnWW1GamEyUnliM0E2SUNjb1ltOXZiR1ZoYm54emRISnBibWNwSnl4Y2JpQWdhMlY1WW05aGNtUTZJQ2RpYjI5c1pXRnVKeXhjYmlBZ1ptOWpkWE02SUNkaWIyOXNaV0Z1SjF4dWZUdGNibU52Ym5OMElFVldSVTVVWDBoSlJFVWtNeUE5SUdCb2FXUmxKSHRGVmtWT1ZGOUxSVmtrTm4xZ08xeHVZMjl1YzNRZ1JWWkZUbFJmU0VsRVJWOVFVa1ZXUlU1VVJVUWdQU0JnYUdsa1pWQnlaWFpsYm5SbFpDUjdSVlpGVGxSZlMwVlpKRFo5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMGhKUkVSRlRpUXpJRDBnWUdocFpHUmxiaVI3UlZaRlRsUmZTMFZaSkRaOVlEdGNibU52Ym5OMElFVldSVTVVWDFOSVQxY2tNeUE5SUdCemFHOTNKSHRGVmtWT1ZGOUxSVmtrTm4xZ08xeHVZMjl1YzNRZ1JWWkZUbFJmVTBoUFYwNGtNeUE5SUdCemFHOTNiaVI3UlZaRlRsUmZTMFZaSkRaOVlEdGNibU52Ym5OMElFVldSVTVVWDFKRlUwbGFSU0E5SUdCeVpYTnBlbVVrZTBWV1JVNVVYMHRGV1NRMmZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5RFRFbERTMTlFU1ZOTlNWTlRJRDBnWUdOc2FXTnJMbVJwYzIxcGMzTWtlMFZXUlU1VVgwdEZXU1EyZldBN1hHNWpiMjV6ZENCRlZrVk9WRjlMUlZsRVQxZE9YMFJKVTAxSlUxTWtNU0E5SUdCclpYbGtiM2R1TG1ScGMyMXBjM01rZTBWV1JVNVVYMHRGV1NRMmZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5TlQxVlRSVlZRWDBSSlUwMUpVMU1nUFNCZ2JXOTFjMlYxY0M1a2FYTnRhWE56Skh0RlZrVk9WRjlMUlZra05uMWdPMXh1WTI5dWMzUWdSVlpGVGxSZlRVOVZVMFZFVDFkT1gwUkpVMDFKVTFNZ1BTQmdiVzkxYzJWa2IzZHVMbVJwYzIxcGMzTWtlMFZXUlU1VVgwdEZXU1EyZldBN1hHNWpiMjV6ZENCRlZrVk9WRjlEVEVsRFMxOUVRVlJCWDBGUVNTUXlJRDBnWUdOc2FXTnJKSHRGVmtWT1ZGOUxSVmtrTm4wa2UwUkJWRUZmUVZCSlgwdEZXU1F6ZldBN1hHNWpiMjV6ZENCRFRFRlRVMTlPUVUxRlgwOVFSVTRnUFNBbmJXOWtZV3d0YjNCbGJpYzdYRzVqYjI1emRDQkRURUZUVTE5T1FVMUZYMFpCUkVVa015QTlJQ2RtWVdSbEp6dGNibU52Ym5OMElFTk1RVk5UWDA1QlRVVmZVMGhQVnlRMElEMGdKM05vYjNjbk8xeHVZMjl1YzNRZ1EweEJVMU5mVGtGTlJWOVRWRUZVU1VNZ1BTQW5iVzlrWVd3dGMzUmhkR2xqSnp0Y2JtTnZibk4wSUU5UVJVNWZVMFZNUlVOVVQxSWtNU0E5SUNjdWJXOWtZV3d1YzJodmR5YzdYRzVqYjI1emRDQlRSVXhGUTFSUFVsOUVTVUZNVDBjZ1BTQW5MbTF2WkdGc0xXUnBZV3h2WnljN1hHNWpiMjV6ZENCVFJVeEZRMVJQVWw5TlQwUkJURjlDVDBSWklEMGdKeTV0YjJSaGJDMWliMlI1Snp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDBSQlZFRmZWRTlIUjB4RkpESWdQU0FuVzJSaGRHRXRZbk10ZEc5bloyeGxQVndpYlc5a1lXeGNJbDBuTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRU5zWVhOeklFUmxabWx1YVhScGIyNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYm1Oc1lYTnpJRTF2WkdGc0lHVjRkR1Z1WkhNZ1FtRnpaVU52YlhCdmJtVnVkQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLR1ZzWlcxbGJuUXNJR052Ym1acFp5a2dlMXh1SUNBZ0lITjFjR1Z5S0dWc1pXMWxiblFwTzF4dUlDQWdJSFJvYVhNdVgyTnZibVpwWnlBOUlIUm9hWE11WDJkbGRFTnZibVpwWnloamIyNW1hV2NwTzF4dUlDQWdJSFJvYVhNdVgyUnBZV3h2WnlBOUlGTmxiR1ZqZEc5eVJXNW5hVzVsTG1acGJtUlBibVVvVTBWTVJVTlVUMUpmUkVsQlRFOUhMQ0IwYUdsekxsOWxiR1Z0Wlc1MEtUdGNiaUFnSUNCMGFHbHpMbDlpWVdOclpISnZjQ0E5SUhSb2FYTXVYMmx1YVhScFlXeHBlbVZDWVdOclJISnZjQ2dwTzF4dUlDQWdJSFJvYVhNdVgyWnZZM1Z6ZEhKaGNDQTlJSFJvYVhNdVgybHVhWFJwWVd4cGVtVkdiMk4xYzFSeVlYQW9LVHRjYmlBZ0lDQjBhR2x6TGw5cGMxTm9iM2R1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1ZmFXZHViM0psUW1GamEyUnliM0JEYkdsamF5QTlJR1poYkhObE8xeHVJQ0FnSUhSb2FYTXVYMmx6VkhKaGJuTnBkR2x2Ym1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUhSb2FYTXVYM05qY205c2JFSmhjaUE5SUc1bGR5QlRZM0p2Ykd4Q1lYSklaV3h3WlhJb0tUdGNiaUFnZlNBdkx5QkhaWFIwWlhKelhHNWNibHh1SUNCemRHRjBhV01nWjJWMElFUmxabUYxYkhRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUVSbFptRjFiSFFrTlR0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUWdUa0ZOUlNncElIdGNiaUFnSUNCeVpYUjFjbTRnVGtGTlJTUTJPMXh1SUNCOUlDOHZJRkIxWW14cFkxeHVYRzVjYmlBZ2RHOW5aMnhsS0hKbGJHRjBaV1JVWVhKblpYUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVhOVGFHOTNiaUEvSUhSb2FYTXVhR2xrWlNncElEb2dkR2hwY3k1emFHOTNLSEpsYkdGMFpXUlVZWEpuWlhRcE8xeHVJQ0I5WEc1Y2JpQWdjMmh2ZHloeVpXeGhkR1ZrVkdGeVoyVjBLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx6VTJodmQyNGdmSHdnZEdocGN5NWZhWE5VY21GdWMybDBhVzl1YVc1bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTI5dWMzUWdjMmh2ZDBWMlpXNTBJRDBnUlhabGJuUklZVzVrYkdWeUxuUnlhV2RuWlhJb2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZVMGhQVnlRekxDQjdYRzRnSUNBZ0lDQnlaV3hoZEdWa1ZHRnlaMlYwWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JwWmlBb2MyaHZkMFYyWlc1MExtUmxabUYxYkhSUWNtVjJaVzUwWldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOXBjMU5vYjNkdUlEMGdkSEoxWlR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5cGMwRnVhVzFoZEdWa0tDa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgybHpWSEpoYm5OcGRHbHZibWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1ZmMyTnliMnhzUW1GeUxtaHBaR1VvS1R0Y2JseHVJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZMnhoYzNOTWFYTjBMbUZrWkNoRFRFRlRVMTlPUVUxRlgwOVFSVTRwTzF4dVhHNGdJQ0FnZEdocGN5NWZZV1JxZFhOMFJHbGhiRzluS0NrN1hHNWNiaUFnSUNCMGFHbHpMbDl6WlhSRmMyTmhjR1ZGZG1WdWRDZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZmMyVjBVbVZ6YVhwbFJYWmxiblFvS1R0Y2JseHVJQ0FnSUVWMlpXNTBTR0Z1Wkd4bGNpNXZiaWgwYUdsekxsOWthV0ZzYjJjc0lFVldSVTVVWDAxUFZWTkZSRTlYVGw5RVNWTk5TVk5UTENBb0tTQTlQaUI3WEc0Z0lDQWdJQ0JGZG1WdWRFaGhibVJzWlhJdWIyNWxLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDAxUFZWTkZWVkJmUkVsVFRVbFRVeXdnWlhabGJuUWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdWRHRnlaMlYwSUQwOVBTQjBhR2x6TGw5bGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFXZHViM0psUW1GamEyUnliM0JEYkdsamF5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdkR2hwY3k1ZmMyaHZkMEpoWTJ0a2NtOXdLQ2dwSUQwK0lIUm9hWE11WDNOb2IzZEZiR1Z0Wlc1MEtISmxiR0YwWldSVVlYSm5aWFFwS1R0Y2JpQWdmVnh1WEc0Z0lHaHBaR1VvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGMxTm9iM2R1SUh4OElIUm9hWE11WDJselZISmhibk5wZEdsdmJtbHVaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdocFpHVkZkbVZ1ZENBOUlFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDBoSlJFVWtNeWs3WEc1Y2JpQWdJQ0JwWmlBb2FHbGtaVVYyWlc1MExtUmxabUYxYkhSUWNtVjJaVzUwWldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOXBjMU5vYjNkdUlEMGdabUZzYzJVN1hHNWNiaUFnSUNCamIyNXpkQ0JwYzBGdWFXMWhkR1ZrSUQwZ2RHaHBjeTVmYVhOQmJtbHRZWFJsWkNncE8xeHVYRzRnSUNBZ2FXWWdLR2x6UVc1cGJXRjBaV1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMmx6VkhKaGJuTnBkR2x2Ym1sdVp5QTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZjMlYwUlhOallYQmxSWFpsYm5Rb0tUdGNibHh1SUNBZ0lIUm9hWE11WDNObGRGSmxjMmw2WlVWMlpXNTBLQ2s3WEc1Y2JpQWdJQ0IwYUdsekxsOW1iMk4xYzNSeVlYQXVaR1ZoWTNScGRtRjBaU2dwTzF4dVhHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZVMGhQVnlRMEtUdGNibHh1SUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2Wm1Zb2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZRMHhKUTB0ZlJFbFRUVWxUVXlrN1hHNGdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOW1aaWgwYUdsekxsOWthV0ZzYjJjc0lFVldSVTVVWDAxUFZWTkZSRTlYVGw5RVNWTk5TVk5US1R0Y2JseHVJQ0FnSUhSb2FYTXVYM0YxWlhWbFEyRnNiR0poWTJzb0tDa2dQVDRnZEdocGN5NWZhR2xrWlUxdlpHRnNLQ2tzSUhSb2FYTXVYMlZzWlcxbGJuUXNJR2x6UVc1cGJXRjBaV1FwTzF4dUlDQjlYRzVjYmlBZ1pHbHpjRzl6WlNncElIdGNiaUFnSUNCYmQybHVaRzkzTENCMGFHbHpMbDlrYVdGc2IyZGRMbVp2Y2tWaFkyZ29hSFJ0YkVWc1pXMWxiblFnUFQ0Z1JYWmxiblJJWVc1a2JHVnlMbTltWmlob2RHMXNSV3hsYldWdWRDd2dSVlpGVGxSZlMwVlpKRFlwS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMkpoWTJ0a2NtOXdMbVJwYzNCdmMyVW9LVHRjYmx4dUlDQWdJSFJvYVhNdVgyWnZZM1Z6ZEhKaGNDNWtaV0ZqZEdsMllYUmxLQ2s3WEc1Y2JpQWdJQ0J6ZFhCbGNpNWthWE53YjNObEtDazdYRzRnSUgxY2JseHVJQ0JvWVc1a2JHVlZjR1JoZEdVb0tTQjdYRzRnSUNBZ2RHaHBjeTVmWVdScWRYTjBSR2xoYkc5bktDazdYRzRnSUgwZ0x5OGdVSEpwZG1GMFpWeHVYRzVjYmlBZ1gybHVhWFJwWVd4cGVtVkNZV05yUkhKdmNDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRUpoWTJ0a2NtOXdLSHRjYmlBZ0lDQWdJR2x6Vm1semFXSnNaVG9nUW05dmJHVmhiaWgwYUdsekxsOWpiMjVtYVdjdVltRmphMlJ5YjNBcExGeHVJQ0FnSUNBZ0x5OGdKM04wWVhScFl5Y2diM0IwYVc5dUlIZHBiR3dnWW1VZ2RISmhibk5zWVhSbFpDQjBieUIwY25WbExDQmhibVFnWW05dmJHVmhibk1nZDJsc2JDQnJaV1Z3SUhSb1pXbHlJSFpoYkhWbFhHNGdJQ0FnSUNCcGMwRnVhVzFoZEdWa09pQjBhR2x6TGw5cGMwRnVhVzFoZEdWa0tDbGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjlwYm1sMGFXRnNhWHBsUm05amRYTlVjbUZ3S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1JtOWpkWE5VY21Gd0tIdGNiaUFnSUNBZ0lIUnlZWEJGYkdWdFpXNTBPaUIwYUdsekxsOWxiR1Z0Wlc1MFhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZaMlYwUTI5dVptbG5LR052Ym1acFp5a2dlMXh1SUNBZ0lHTnZibVpwWnlBOUlIc2dMaTR1UkdWbVlYVnNkQ1ExTEZ4dUlDQWdJQ0FnTGk0dVRXRnVhWEIxYkdGMGIzSXVaMlYwUkdGMFlVRjBkSEpwWW5WMFpYTW9kR2hwY3k1ZlpXeGxiV1Z1ZENrc1hHNGdJQ0FnSUNBdUxpNG9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKMjlpYW1WamRDY2dQeUJqYjI1bWFXY2dPaUI3ZlNsY2JpQWdJQ0I5TzF4dUlDQWdJSFI1Y0dWRGFHVmphME52Ym1acFp5aE9RVTFGSkRZc0lHTnZibVpwWnl3Z1JHVm1ZWFZzZEZSNWNHVWtOU2s3WEc0Z0lDQWdjbVYwZFhKdUlHTnZibVpwWnp0Y2JpQWdmVnh1WEc0Z0lGOXphRzkzUld4bGJXVnVkQ2h5Wld4aGRHVmtWR0Z5WjJWMEtTQjdYRzRnSUNBZ1kyOXVjM1FnYVhOQmJtbHRZWFJsWkNBOUlIUm9hWE11WDJselFXNXBiV0YwWldRb0tUdGNibHh1SUNBZ0lHTnZibk4wSUcxdlpHRnNRbTlrZVNBOUlGTmxiR1ZqZEc5eVJXNW5hVzVsTG1acGJtUlBibVVvVTBWTVJVTlVUMUpmVFU5RVFVeGZRazlFV1N3Z2RHaHBjeTVmWkdsaGJHOW5LVHRjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVmWld4bGJXVnVkQzV3WVhKbGJuUk9iMlJsSUh4OElIUm9hWE11WDJWc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlM1dWIyUmxWSGx3WlNBaFBUMGdUbTlrWlM1RlRFVk5SVTVVWDA1UFJFVXBJSHRjYmlBZ0lDQWdJQzh2SUVSdmJpZDBJRzF2ZG1VZ2JXOWtZV3duY3lCRVQwMGdjRzl6YVhScGIyNWNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVhCd1pXNWtLSFJvYVhNdVgyVnNaVzFsYm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZGliRzlqYXljN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25ZWEpwWVMxb2FXUmtaVzRuS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjMlYwUVhSMGNtbGlkWFJsS0NkaGNtbGhMVzF2WkdGc0p5d2dkSEoxWlNrN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk5sZEVGMGRISnBZblYwWlNnbmNtOXNaU2NzSUNka2FXRnNiMmNuS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjMk55YjJ4c1ZHOXdJRDBnTUR0Y2JseHVJQ0FnSUdsbUlDaHRiMlJoYkVKdlpIa3BJSHRjYmlBZ0lDQWdJRzF2WkdGc1FtOWtlUzV6WTNKdmJHeFViM0FnUFNBd08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHBjMEZ1YVcxaGRHVmtLU0I3WEc0Z0lDQWdJQ0J5Wldac2IzY29kR2hwY3k1ZlpXeGxiV1Z1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0VOTVFWTlRYMDVCVFVWZlUwaFBWeVEwS1R0Y2JseHVJQ0FnSUdOdmJuTjBJSFJ5WVc1emFYUnBiMjVEYjIxd2JHVjBaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqYjI1bWFXY3VabTlqZFhNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlptOWpkWE4wY21Gd0xtRmpkR2wyWVhSbEtDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdVgybHpWSEpoYm5OcGRHbHZibWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnUlhabGJuUklZVzVrYkdWeUxuUnlhV2RuWlhJb2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZVMGhQVjA0a015d2dlMXh1SUNBZ0lDQWdJQ0J5Wld4aGRHVmtWR0Z5WjJWMFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5aDBjbUZ1YzJsMGFXOXVRMjl0Y0d4bGRHVXNJSFJvYVhNdVgyUnBZV3h2Wnl3Z2FYTkJibWx0WVhSbFpDazdYRzRnSUgxY2JseHVJQ0JmYzJWMFJYTmpZWEJsUlhabGJuUW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx6VTJodmQyNHBJSHRjYmlBZ0lDQWdJRVYyWlc1MFNHRnVaR3hsY2k1dmJpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlMUlZsRVQxZE9YMFJKVTAxSlUxTWtNU3dnWlhabGJuUWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlkyOXVabWxuTG10bGVXSnZZWEprSUNZbUlHVjJaVzUwTG10bGVTQTlQVDBnUlZORFFWQkZYMHRGV1NReEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtaHBaR1VvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hkR2hwY3k1ZlkyOXVabWxuTG10bGVXSnZZWEprSUNZbUlHVjJaVzUwTG10bGVTQTlQVDBnUlZORFFWQkZYMHRGV1NReEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkSEpwWjJkbGNrSmhZMnRrY205d1ZISmhibk5wZEdsdmJpZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdSWFpsYm5SSVlXNWtiR1Z5TG05bVppaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlMUlZsRVQxZE9YMFJKVTAxSlUxTWtNU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDNObGRGSmxjMmw2WlVWMlpXNTBLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlwYzFOb2IzZHVLU0I3WEc0Z0lDQWdJQ0JGZG1WdWRFaGhibVJzWlhJdWIyNG9kMmx1Wkc5M0xDQkZWa1ZPVkY5U1JWTkpXa1VzSUNncElEMCtJSFJvYVhNdVgyRmthblZ6ZEVScFlXeHZaeWdwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdSWFpsYm5SSVlXNWtiR1Z5TG05bVppaDNhVzVrYjNjc0lFVldSVTVVWDFKRlUwbGFSU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDJocFpHVk5iMlJoYkNncElIdGNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk4wZVd4bExtUnBjM0JzWVhrZ1BTQW5ibTl1WlNjN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk5sZEVGMGRISnBZblYwWlNnbllYSnBZUzFvYVdSa1pXNG5MQ0IwY25WbEtUdGNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1Y21WdGIzWmxRWFIwY21saWRYUmxLQ2RoY21saExXMXZaR0ZzSnlrN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25jbTlzWlNjcE8xeHVYRzRnSUNBZ2RHaHBjeTVmYVhOVWNtRnVjMmwwYVc5dWFXNW5JRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQjBhR2x6TGw5aVlXTnJaSEp2Y0M1b2FXUmxLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hEVEVGVFUxOU9RVTFGWDA5UVJVNHBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXlaWE5sZEVGa2FuVnpkRzFsYm5SektDazdYRzVjYmlBZ0lDQWdJSFJvYVhNdVgzTmpjbTlzYkVKaGNpNXlaWE5sZENncE8xeHVYRzRnSUNBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQkZWa1ZPVkY5SVNVUkVSVTRrTXlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZjMmh2ZDBKaFkydGtjbTl3S0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOXVLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDBOTVNVTkxYMFJKVTAxSlUxTXNJR1YyWlc1MElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDlwWjI1dmNtVkNZV05yWkhKdmNFTnNhV05yS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsbmJtOXlaVUpoWTJ0a2NtOXdRMnhwWTJzZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9aWFpsYm5RdWRHRnlaMlYwSUNFOVBTQmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtWnBaeTVpWVdOclpISnZjQ0E5UFQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWhwWkdVb0tUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZlkyOXVabWxuTG1KaFkydGtjbTl3SUQwOVBTQW5jM1JoZEdsakp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBjbWxuWjJWeVFtRmphMlJ5YjNCVWNtRnVjMmwwYVc5dUtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQjBhR2x6TGw5aVlXTnJaSEp2Y0M1emFHOTNLR05oYkd4aVlXTnJLVHRjYmlBZ2ZWeHVYRzRnSUY5cGMwRnVhVzFoZEdWa0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVqYjI1MFlXbHVjeWhEVEVGVFUxOU9RVTFGWDBaQlJFVWtNeWs3WEc0Z0lIMWNibHh1SUNCZmRISnBaMmRsY2tKaFkydGtjbTl3VkhKaGJuTnBkR2x2YmlncElIdGNiaUFnSUNCamIyNXpkQ0JvYVdSbFJYWmxiblFnUFNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlJU1VSRlgxQlNSVlpGVGxSRlJDazdYRzVjYmlBZ0lDQnBaaUFvYUdsa1pVVjJaVzUwTG1SbFptRjFiSFJRY21WMlpXNTBaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCamJHRnpjMHhwYzNRc1hHNGdJQ0FnSUNCelkzSnZiR3hJWldsbmFIUXNYRzRnSUNBZ0lDQnpkSGxzWlZ4dUlDQWdJSDBnUFNCMGFHbHpMbDlsYkdWdFpXNTBPMXh1SUNBZ0lHTnZibk4wSUdselRXOWtZV3hQZG1WeVpteHZkMmx1WnlBOUlITmpjbTlzYkVobGFXZG9kQ0ErSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzVqYkdsbGJuUklaV2xuYUhRN0lDOHZJSEpsZEhWeWJpQnBaaUIwYUdVZ1ptOXNiRzkzYVc1bklHSmhZMnRuY205MWJtUWdkSEpoYm5OcGRHbHZiaUJvWVhOdUozUWdlV1YwSUdOdmJYQnNaWFJsWkZ4dVhHNGdJQ0FnYVdZZ0tDRnBjMDF2WkdGc1QzWmxjbVpzYjNkcGJtY2dKaVlnYzNSNWJHVXViM1psY21ac2IzZFpJRDA5UFNBbmFHbGtaR1Z1SnlCOGZDQmpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9RMHhCVTFOZlRrRk5SVjlUVkVGVVNVTXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLQ0ZwYzAxdlpHRnNUM1psY21ac2IzZHBibWNwSUh0Y2JpQWdJQ0FnSUhOMGVXeGxMbTkyWlhKbWJHOTNXU0E5SUNkb2FXUmtaVzRuTzF4dUlDQWdJSDFjYmx4dUlDQWdJR05zWVhOelRHbHpkQzVoWkdRb1EweEJVMU5mVGtGTlJWOVRWRUZVU1VNcE8xeHVYRzRnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5Z29LU0E5UGlCN1hHNGdJQ0FnSUNCamJHRnpjMHhwYzNRdWNtVnRiM1psS0VOTVFWTlRYMDVCVFVWZlUxUkJWRWxES1R0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzAxdlpHRnNUM1psY21ac2IzZHBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5Z29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdjM1I1YkdVdWIzWmxjbVpzYjNkWklEMGdKeWM3WEc0Z0lDQWdJQ0FnSUgwc0lIUm9hWE11WDJScFlXeHZaeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3dnZEdocGN5NWZaR2xoYkc5bktUdGNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1Wm05amRYTW9LVHRjYmlBZ2ZTQXZMeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnSUM4dklIUm9aU0JtYjJ4c2IzZHBibWNnYldWMGFHOWtjeUJoY21VZ2RYTmxaQ0IwYnlCb1lXNWtiR1VnYjNabGNtWnNiM2RwYm1jZ2JXOWtZV3h6WEc0Z0lDOHZJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNibHh1WEc0Z0lGOWhaR3AxYzNSRWFXRnNiMmNvS1NCN1hHNGdJQ0FnWTI5dWMzUWdhWE5OYjJSaGJFOTJaWEptYkc5M2FXNW5JRDBnZEdocGN5NWZaV3hsYldWdWRDNXpZM0p2Ykd4SVpXbG5hSFFnUGlCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoME8xeHVYRzRnSUNBZ1kyOXVjM1FnYzJOeWIyeHNZbUZ5VjJsa2RHZ2dQU0IwYUdsekxsOXpZM0p2Ykd4Q1lYSXVaMlYwVjJsa2RHZ29LVHRjYmx4dUlDQWdJR052Ym5OMElHbHpRbTlrZVU5MlpYSm1iRzkzYVc1bklEMGdjMk55YjJ4c1ltRnlWMmxrZEdnZ1BpQXdPMXh1WEc0Z0lDQWdhV1lnS0NGcGMwSnZaSGxQZG1WeVpteHZkMmx1WnlBbUppQnBjMDF2WkdGc1QzWmxjbVpzYjNkcGJtY2dKaVlnSVdselVsUk1LQ2tnZkh3Z2FYTkNiMlI1VDNabGNtWnNiM2RwYm1jZ0ppWWdJV2x6VFc5a1lXeFBkbVZ5Wm14dmQybHVaeUFtSmlCcGMxSlVUQ2dwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk4wZVd4bExuQmhaR1JwYm1kTVpXWjBJRDBnWUNSN2MyTnliMnhzWW1GeVYybGtkR2g5Y0hoZ08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHBjMEp2WkhsUGRtVnlabXh2ZDJsdVp5QW1KaUFoYVhOTmIyUmhiRTkyWlhKbWJHOTNhVzVuSUNZbUlDRnBjMUpVVENncElIeDhJQ0ZwYzBKdlpIbFBkbVZ5Wm14dmQybHVaeUFtSmlCcGMwMXZaR0ZzVDNabGNtWnNiM2RwYm1jZ0ppWWdhWE5TVkV3b0tTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEM1emRIbHNaUzV3WVdSa2FXNW5VbWxuYUhRZ1BTQmdKSHR6WTNKdmJHeGlZWEpYYVdSMGFIMXdlR0E3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDNKbGMyVjBRV1JxZFhOMGJXVnVkSE1vS1NCN1hHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNXpkSGxzWlM1d1lXUmthVzVuVEdWbWRDQTlJQ2NuTzF4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdWMzUjViR1V1Y0dGa1pHbHVaMUpwWjJoMElEMGdKeWM3WEc0Z0lIMGdMeThnVTNSaGRHbGpYRzVjYmx4dUlDQnpkR0YwYVdNZ2FsRjFaWEo1U1c1MFpYSm1ZV05sS0dOdmJtWnBaeXdnY21Wc1lYUmxaRlJoY21kbGRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUUxdlpHRnNMbWRsZEU5eVEzSmxZWFJsU1c1emRHRnVZMlVvZEdocGN5d2dZMjl1Wm1sbktUdGNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY2dJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoVzJOdmJtWnBaMTBnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1lFNXZJRzFsZEdodlpDQnVZVzFsWkNCY0lpUjdZMjl1Wm1sbmZWd2lZQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdSaGRHRmJZMjl1Wm1sblhTaHlaV3hoZEdWa1ZHRnlaMlYwS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc1OVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUkdGMFlTQkJjR2tnYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYmx4dVJYWmxiblJJWVc1a2JHVnlMbTl1S0dSdlkzVnRaVzUwTENCRlZrVk9WRjlEVEVsRFMxOUVRVlJCWDBGUVNTUXlMQ0JUUlV4RlExUlBVbDlFUVZSQlgxUlBSMGRNUlNReUxDQm1kVzVqZEdsdmJpQW9aWFpsYm5RcElIdGNiaUFnWTI5dWMzUWdkR0Z5WjJWMElEMGdaMlYwUld4bGJXVnVkRVp5YjIxVFpXeGxZM1J2Y2loMGFHbHpLVHRjYmx4dUlDQnBaaUFvV3lkQkp5d2dKMEZTUlVFblhTNXBibU5zZFdSbGN5aDBhR2x6TG5SaFowNWhiV1VwS1NCN1hHNGdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnZlZ4dVhHNGdJRVYyWlc1MFNHRnVaR3hsY2k1dmJtVW9kR0Z5WjJWMExDQkZWa1ZPVkY5VFNFOVhKRE1zSUhOb2IzZEZkbVZ1ZENBOVBpQjdYRzRnSUNBZ2FXWWdLSE5vYjNkRmRtVnVkQzVrWldaaGRXeDBVSEpsZG1WdWRHVmtLU0I3WEc0Z0lDQWdJQ0F2THlCdmJteDVJSEpsWjJsemRHVnlJR1p2WTNWeklISmxjM1J2Y21WeUlHbG1JRzF2WkdGc0lIZHBiR3dnWVdOMGRXRnNiSGtnWjJWMElITm9iM2R1WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMbTl1WlNoMFlYSm5aWFFzSUVWV1JVNVVYMGhKUkVSRlRpUXpMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvYVhOV2FYTnBZbXhsS0hSb2FYTXBLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabTlqZFhNb0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlNrN0lDOHZJR0YyYjJsa0lHTnZibVpzYVdOMElIZG9aVzRnWTJ4cFkydHBibWNnYlc5a1pHRnNJSFJ2WjJkc1pYSWdkMmhwYkdVZ1lXNXZkR2hsY2lCdmJtVWdhWE1nYjNCbGJseHVYRzRnSUdOdmJuTjBJR0ZzYkZKbFlXUjVUM0JsYmlBOUlGTmxiR1ZqZEc5eVJXNW5hVzVsTG1acGJtUlBibVVvVDFCRlRsOVRSVXhGUTFSUFVpUXhLVHRjYmx4dUlDQnBaaUFvWVd4c1VtVmhaSGxQY0dWdUtTQjdYRzRnSUNBZ1RXOWtZV3d1WjJWMFNXNXpkR0Z1WTJVb1lXeHNVbVZoWkhsUGNHVnVLUzVvYVdSbEtDazdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQmtZWFJoSUQwZ1RXOWtZV3d1WjJWMFQzSkRjbVZoZEdWSmJuTjBZVzVqWlNoMFlYSm5aWFFwTzF4dUlDQmtZWFJoTG5SdloyZHNaU2gwYUdsektUdGNibjBwTzF4dVpXNWhZbXhsUkdsemJXbHpjMVJ5YVdkblpYSW9UVzlrWVd3cE8xeHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUdwUmRXVnllVnh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJoWkdRZ0xrMXZaR0ZzSUhSdklHcFJkV1Z5ZVNCdmJteDVJR2xtSUdwUmRXVnllU0JwY3lCd2NtVnpaVzUwWEc0Z0tpOWNibHh1WkdWbWFXNWxTbEYxWlhKNVVHeDFaMmx1S0UxdlpHRnNLVHRjYmx4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUW05dmRITjBjbUZ3SUNoMk5TNHhMak1wT2lCdlptWmpZVzUyWVhNdWFuTmNiaUFxSUV4cFkyVnVjMlZrSUhWdVpHVnlJRTFKVkNBb2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUjNZbk12WW05dmRITjBjbUZ3TDJKc2IySXZiV0ZwYmk5TVNVTkZUbE5GS1Z4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVOdmJuTjBZVzUwYzF4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JseHVZMjl1YzNRZ1RrRk5SU1ExSUQwZ0oyOW1abU5oYm5aaGN5YzdYRzVqYjI1emRDQkVRVlJCWDB0RldTUTFJRDBnSjJKekxtOW1abU5oYm5aaGN5YzdYRzVqYjI1emRDQkZWa1ZPVkY5TFJWa2tOU0E5SUdBdUpIdEVRVlJCWDB0RldTUTFmV0E3WEc1amIyNXpkQ0JFUVZSQlgwRlFTVjlMUlZra01pQTlJQ2N1WkdGMFlTMWhjR2tuTzF4dVkyOXVjM1FnUlZaRlRsUmZURTlCUkY5RVFWUkJYMEZRU1NReElEMGdZR3h2WVdRa2UwVldSVTVVWDB0RldTUTFmU1I3UkVGVVFWOUJVRWxmUzBWWkpESjlZRHRjYm1OdmJuTjBJRVZUUTBGUVJWOUxSVmtnUFNBblJYTmpZWEJsSnp0Y2JtTnZibk4wSUVSbFptRjFiSFFrTkNBOUlIdGNiaUFnWW1GamEyUnliM0E2SUhSeWRXVXNYRzRnSUd0bGVXSnZZWEprT2lCMGNuVmxMRnh1SUNCelkzSnZiR3c2SUdaaGJITmxYRzU5TzF4dVkyOXVjM1FnUkdWbVlYVnNkRlI1Y0dVa05DQTlJSHRjYmlBZ1ltRmphMlJ5YjNBNklDZGliMjlzWldGdUp5eGNiaUFnYTJWNVltOWhjbVE2SUNkaWIyOXNaV0Z1Snl4Y2JpQWdjMk55YjJ4c09pQW5ZbTl2YkdWaGJpZGNibjA3WEc1amIyNXpkQ0JEVEVGVFUxOU9RVTFGWDFOSVQxY2tNeUE5SUNkemFHOTNKenRjYm1OdmJuTjBJRU5NUVZOVFgwNUJUVVZmUWtGRFMwUlNUMUFnUFNBbmIyWm1ZMkZ1ZG1GekxXSmhZMnRrY205d0p6dGNibU52Ym5OMElFOVFSVTVmVTBWTVJVTlVUMUlnUFNBbkxtOW1abU5oYm5aaGN5NXphRzkzSnp0Y2JtTnZibk4wSUVWV1JVNVVYMU5JVDFja01pQTlJR0J6YUc5M0pIdEZWa1ZPVkY5TFJWa2tOWDFnTzF4dVkyOXVjM1FnUlZaRlRsUmZVMGhQVjA0a01pQTlJR0J6YUc5M2JpUjdSVlpGVGxSZlMwVlpKRFY5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMGhKUkVVa01pQTlJR0JvYVdSbEpIdEZWa1ZPVkY5TFJWa2tOWDFnTzF4dVkyOXVjM1FnUlZaRlRsUmZTRWxFUkVWT0pESWdQU0JnYUdsa1pHVnVKSHRGVmtWT1ZGOUxSVmtrTlgxZ08xeHVZMjl1YzNRZ1JWWkZUbFJmUTB4SlEwdGZSRUZVUVY5QlVFa2tNU0E5SUdCamJHbGpheVI3UlZaRlRsUmZTMFZaSkRWOUpIdEVRVlJCWDBGUVNWOUxSVmtrTW4xZ08xeHVZMjl1YzNRZ1JWWkZUbFJmUzBWWlJFOVhUbDlFU1ZOTlNWTlRJRDBnWUd0bGVXUnZkMjR1WkdsemJXbHpjeVI3UlZaRlRsUmZTMFZaSkRWOVlEdGNibU52Ym5OMElGTkZURVZEVkU5U1gwUkJWRUZmVkU5SFIweEZKREVnUFNBblcyUmhkR0V0WW5NdGRHOW5aMnhsUFZ3aWIyWm1ZMkZ1ZG1GelhDSmRKenRjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkRiR0Z6Y3lCRVpXWnBibWwwYVc5dVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVYRzVqYkdGemN5QlBabVpqWVc1MllYTWdaWGgwWlc1a2N5QkNZWE5sUTI5dGNHOXVaVzUwSUh0Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWld4bGJXVnVkQ3dnWTI5dVptbG5LU0I3WEc0Z0lDQWdjM1Z3WlhJb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnZEdocGN5NWZZMjl1Wm1sbklEMGdkR2hwY3k1ZloyVjBRMjl1Wm1sbktHTnZibVpwWnlrN1hHNGdJQ0FnZEdocGN5NWZhWE5UYUc5M2JpQTlJR1poYkhObE8xeHVJQ0FnSUhSb2FYTXVYMkpoWTJ0a2NtOXdJRDBnZEdocGN5NWZhVzVwZEdsaGJHbDZaVUpoWTJ0RWNtOXdLQ2s3WEc0Z0lDQWdkR2hwY3k1ZlptOWpkWE4wY21Gd0lEMGdkR2hwY3k1ZmFXNXBkR2xoYkdsNlpVWnZZM1Z6VkhKaGNDZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZllXUmtSWFpsYm5STWFYTjBaVzVsY25Nb0tUdGNiaUFnZlNBdkx5QkhaWFIwWlhKelhHNWNibHh1SUNCemRHRjBhV01nWjJWMElFNUJUVVVvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRTVCVFVVa05UdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnUkdWbVlYVnNkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdSR1ZtWVhWc2RDUTBPMXh1SUNCOUlDOHZJRkIxWW14cFkxeHVYRzVjYmlBZ2RHOW5aMnhsS0hKbGJHRjBaV1JVWVhKblpYUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVhOVGFHOTNiaUEvSUhSb2FYTXVhR2xrWlNncElEb2dkR2hwY3k1emFHOTNLSEpsYkdGMFpXUlVZWEpuWlhRcE8xeHVJQ0I5WEc1Y2JpQWdjMmh2ZHloeVpXeGhkR1ZrVkdGeVoyVjBLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmx6VTJodmQyNHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6YUc5M1JYWmxiblFnUFNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlUU0U5WEpESXNJSHRjYmlBZ0lDQWdJSEpsYkdGMFpXUlVZWEpuWlhSY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUlDaHphRzkzUlhabGJuUXVaR1ZtWVhWc2RGQnlaWFpsYm5SbFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVYMmx6VTJodmQyNGdQU0IwY25WbE8xeHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjM1I1YkdVdWRtbHphV0pwYkdsMGVTQTlJQ2QyYVhOcFlteGxKenRjYmx4dUlDQWdJSFJvYVhNdVgySmhZMnRrY205d0xuTm9iM2NvS1R0Y2JseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZlkyOXVabWxuTG5OamNtOXNiQ2tnZTF4dUlDQWdJQ0FnYm1WM0lGTmpjbTlzYkVKaGNraGxiSEJsY2lncExtaHBaR1VvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MExuSmxiVzkyWlVGMGRISnBZblYwWlNnbllYSnBZUzFvYVdSa1pXNG5LVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLQ2RoY21saExXMXZaR0ZzSnl3Z2RISjFaU2s3WEc1Y2JpQWdJQ0IwYUdsekxsOWxiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2duY205c1pTY3NJQ2RrYVdGc2IyY25LVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hEVEVGVFUxOU9RVTFGWDFOSVQxY2tNeWs3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMjF3YkdWMFpVTmhiR3hDWVdOcklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOWpiMjVtYVdjdWMyTnliMnhzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJadlkzVnpkSEpoY0M1aFkzUnBkbUYwWlNncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQkZWa1ZPVkY5VFNFOVhUaVF5TENCN1hHNGdJQ0FnSUNBZ0lISmxiR0YwWldSVVlYSm5aWFJjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IwYUdsekxsOXhkV1YxWlVOaGJHeGlZV05yS0dOdmJYQnNaWFJsUTJGc2JFSmhZMnNzSUhSb2FYTXVYMlZzWlcxbGJuUXNJSFJ5ZFdVcE8xeHVJQ0I5WEc1Y2JpQWdhR2xrWlNncElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdVgybHpVMmh2ZDI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQm9hV1JsUlhabGJuUWdQU0JGZG1WdWRFaGhibVJzWlhJdWRISnBaMmRsY2loMGFHbHpMbDlsYkdWdFpXNTBMQ0JGVmtWT1ZGOUlTVVJGSkRJcE8xeHVYRzRnSUNBZ2FXWWdLR2hwWkdWRmRtVnVkQzVrWldaaGRXeDBVSEpsZG1WdWRHVmtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVmWm05amRYTjBjbUZ3TG1SbFlXTjBhWFpoZEdVb0tUdGNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1WW14MWNpZ3BPMXh1WEc0Z0lDQWdkR2hwY3k1ZmFYTlRhRzkzYmlBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZVMGhQVnlRektUdGNibHh1SUNBZ0lIUm9hWE11WDJKaFkydGtjbTl3TG1ocFpHVW9LVHRjYmx4dUlDQWdJR052Ym5OMElHTnZiWEJzWlhSbFEyRnNiR0poWTJzZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbk5sZEVGMGRISnBZblYwWlNnbllYSnBZUzFvYVdSa1pXNG5MQ0IwY25WbEtUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvSjJGeWFXRXRiVzlrWVd3bktUdGNibHh1SUNBZ0lDQWdkR2hwY3k1ZlpXeGxiV1Z1ZEM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvSjNKdmJHVW5LVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNXpkSGxzWlM1MmFYTnBZbWxzYVhSNUlEMGdKMmhwWkdSbGJpYzdYRzVjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmWTI5dVptbG5Mbk5qY205c2JDa2dlMXh1SUNBZ0lDQWdJQ0J1WlhjZ1UyTnliMnhzUW1GeVNHVnNjR1Z5S0NrdWNtVnpaWFFvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1JYWmxiblJJWVc1a2JHVnlMblJ5YVdkblpYSW9kR2hwY3k1ZlpXeGxiV1Z1ZEN3Z1JWWkZUbFJmU0VsRVJFVk9KRElwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IwYUdsekxsOXhkV1YxWlVOaGJHeGlZV05yS0dOdmJYQnNaWFJsUTJGc2JHSmhZMnNzSUhSb2FYTXVYMlZzWlcxbGJuUXNJSFJ5ZFdVcE8xeHVJQ0I5WEc1Y2JpQWdaR2x6Y0c5elpTZ3BJSHRjYmlBZ0lDQjBhR2x6TGw5aVlXTnJaSEp2Y0M1a2FYTndiM05sS0NrN1hHNWNiaUFnSUNCMGFHbHpMbDltYjJOMWMzUnlZWEF1WkdWaFkzUnBkbUYwWlNncE8xeHVYRzRnSUNBZ2MzVndaWEl1WkdsemNHOXpaU2dwTzF4dUlDQjlJQzh2SUZCeWFYWmhkR1ZjYmx4dVhHNGdJRjluWlhSRGIyNW1hV2NvWTI5dVptbG5LU0I3WEc0Z0lDQWdZMjl1Wm1sbklEMGdleUF1TGk1RVpXWmhkV3gwSkRRc1hHNGdJQ0FnSUNBdUxpNU5ZVzVwY0hWc1lYUnZjaTVuWlhSRVlYUmhRWFIwY21saWRYUmxjeWgwYUdsekxsOWxiR1Z0Wlc1MEtTeGNiaUFnSUNBZ0lDNHVMaWgwZVhCbGIyWWdZMjl1Wm1sbklEMDlQU0FuYjJKcVpXTjBKeUEvSUdOdmJtWnBaeUE2SUh0OUtWeHVJQ0FnSUgwN1hHNGdJQ0FnZEhsd1pVTm9aV05yUTI5dVptbG5LRTVCVFVVa05Td2dZMjl1Wm1sbkxDQkVaV1poZFd4MFZIbHdaU1EwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sbk8xeHVJQ0I5WEc1Y2JpQWdYMmx1YVhScFlXeHBlbVZDWVdOclJISnZjQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKaFkydGtjbTl3S0h0Y2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlRvZ1EweEJVMU5mVGtGTlJWOUNRVU5MUkZKUFVDeGNiaUFnSUNBZ0lHbHpWbWx6YVdKc1pUb2dkR2hwY3k1ZlkyOXVabWxuTG1KaFkydGtjbTl3TEZ4dUlDQWdJQ0FnYVhOQmJtbHRZWFJsWkRvZ2RISjFaU3hjYmlBZ0lDQWdJSEp2YjNSRmJHVnRaVzUwT2lCMGFHbHpMbDlsYkdWdFpXNTBMbkJoY21WdWRFNXZaR1VzWEc0Z0lDQWdJQ0JqYkdsamEwTmhiR3hpWVdOck9pQW9LU0E5UGlCMGFHbHpMbWhwWkdVb0tWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMmx1YVhScFlXeHBlbVZHYjJOMWMxUnlZWEFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCR2IyTjFjMVJ5WVhBb2UxeHVJQ0FnSUNBZ2RISmhjRVZzWlcxbGJuUTZJSFJvYVhNdVgyVnNaVzFsYm5SY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lGOWhaR1JGZG1WdWRFeHBjM1JsYm1WeWN5Z3BJSHRjYmlBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1YjI0b2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZTMFZaUkU5WFRsOUVTVk5OU1ZOVExDQmxkbVZ1ZENBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZZMjl1Wm1sbkxtdGxlV0p2WVhKa0lDWW1JR1YyWlc1MExtdGxlU0E5UFQwZ1JWTkRRVkJGWDB0RldTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtaHBaR1VvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmU0F2THlCVGRHRjBhV05jYmx4dVhHNGdJSE4wWVhScFl5QnFVWFZsY25sSmJuUmxjbVpoWTJVb1kyOXVabWxuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXRmphQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdUMlptWTJGdWRtRnpMbWRsZEU5eVEzSmxZWFJsU1c1emRHRnVZMlVvZEdocGN5d2dZMjl1Wm1sbktUdGNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY2dJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR1JoZEdGYlkyOXVabWxuWFNBOVBUMGdkVzVrWldacGJtVmtJSHg4SUdOdmJtWnBaeTV6ZEdGeWRITlhhWFJvS0NkZkp5a2dmSHdnWTI5dVptbG5JRDA5UFNBblkyOXVjM1J5ZFdOMGIzSW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1lFNXZJRzFsZEdodlpDQnVZVzFsWkNCY0lpUjdZMjl1Wm1sbmZWd2lZQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdSaGRHRmJZMjl1Wm1sblhTaDBhR2x6S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc1OVhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUkdGMFlTQkJjR2tnYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYmx4dVJYWmxiblJJWVc1a2JHVnlMbTl1S0dSdlkzVnRaVzUwTENCRlZrVk9WRjlEVEVsRFMxOUVRVlJCWDBGUVNTUXhMQ0JUUlV4RlExUlBVbDlFUVZSQlgxUlBSMGRNUlNReExDQm1kVzVqZEdsdmJpQW9aWFpsYm5RcElIdGNiaUFnWTI5dWMzUWdkR0Z5WjJWMElEMGdaMlYwUld4bGJXVnVkRVp5YjIxVFpXeGxZM1J2Y2loMGFHbHpLVHRjYmx4dUlDQnBaaUFvV3lkQkp5d2dKMEZTUlVFblhTNXBibU5zZFdSbGN5aDBhR2x6TG5SaFowNWhiV1VwS1NCN1hHNGdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnZlZ4dVhHNGdJR2xtSUNocGMwUnBjMkZpYkdWa0tIUm9hWE1wS1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNWNiaUFnUlhabGJuUklZVzVrYkdWeUxtOXVaU2gwWVhKblpYUXNJRVZXUlU1VVgwaEpSRVJGVGlReUxDQW9LU0E5UGlCN1hHNGdJQ0FnTHk4Z1ptOWpkWE1nYjI0Z2RISnBaMmRsY2lCM2FHVnVJR2wwSUdseklHTnNiM05sWkZ4dUlDQWdJR2xtSUNocGMxWnBjMmxpYkdVb2RHaHBjeWtwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVabTlqZFhNb0tUdGNiaUFnSUNCOVhHNGdJSDBwT3lBdkx5QmhkbTlwWkNCamIyNW1iR2xqZENCM2FHVnVJR05zYVdOcmFXNW5JR0VnZEc5bloyeGxjaUJ2WmlCaGJpQnZabVpqWVc1MllYTXNJSGRvYVd4bElHRnViM1JvWlhJZ2FYTWdiM0JsYmx4dVhHNGdJR052Ym5OMElHRnNiRkpsWVdSNVQzQmxiaUE5SUZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1SUGJtVW9UMUJGVGw5VFJVeEZRMVJQVWlrN1hHNWNiaUFnYVdZZ0tHRnNiRkpsWVdSNVQzQmxiaUFtSmlCaGJHeFNaV0ZrZVU5d1pXNGdJVDA5SUhSaGNtZGxkQ2tnZTF4dUlDQWdJRTltWm1OaGJuWmhjeTVuWlhSSmJuTjBZVzVqWlNoaGJHeFNaV0ZrZVU5d1pXNHBMbWhwWkdVb0tUdGNiaUFnZlZ4dVhHNGdJR052Ym5OMElHUmhkR0VnUFNCUFptWmpZVzUyWVhNdVoyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaDBZWEpuWlhRcE8xeHVJQ0JrWVhSaExuUnZaMmRzWlNoMGFHbHpLVHRjYm4wcE8xeHVSWFpsYm5SSVlXNWtiR1Z5TG05dUtIZHBibVJ2ZHl3Z1JWWkZUbFJmVEU5QlJGOUVRVlJCWDBGUVNTUXhMQ0FvS1NBOVBpQlRaV3hsWTNSdmNrVnVaMmx1WlM1bWFXNWtLRTlRUlU1ZlUwVk1SVU5VVDFJcExtWnZja1ZoWTJnb1pXd2dQVDRnVDJabVkyRnVkbUZ6TG1kbGRFOXlRM0psWVhSbFNXNXpkR0Z1WTJVb1pXd3BMbk5vYjNjb0tTa3BPMXh1Wlc1aFlteGxSR2x6YldsemMxUnlhV2RuWlhJb1QyWm1ZMkZ1ZG1GektUdGNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2lCcVVYVmxjbmxjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JtUmxabWx1WlVwUmRXVnllVkJzZFdkcGJpaFBabVpqWVc1MllYTXBPMXh1WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJDYjI5MGMzUnlZWEFnS0hZMUxqRXVNeWs2SUhWMGFXd3ZjMkZ1YVhScGVtVnlMbXB6WEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCTlNWUWdLR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwZDJKekwySnZiM1J6ZEhKaGNDOWliRzlpTDIxaGFXNHZURWxEUlU1VFJTbGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYm1OdmJuTjBJSFZ5YVVGMGRISnBZblYwWlhNZ1BTQnVaWGNnVTJWMEtGc25ZbUZqYTJkeWIzVnVaQ2NzSUNkamFYUmxKeXdnSjJoeVpXWW5MQ0FuYVhSbGJYUjVjR1VuTENBbmJHOXVaMlJsYzJNbkxDQW5jRzl6ZEdWeUp5d2dKM055WXljc0lDZDRiR2x1YXpwb2NtVm1KMTBwTzF4dVkyOXVjM1FnUVZKSlFWOUJWRlJTU1VKVlZFVmZVRUZVVkVWU1RpQTlJQzllWVhKcFlTMWJYRngzTFYwcUpDOXBPMXh1THlvcVhHNGdLaUJCSUhCaGRIUmxjbTRnZEdoaGRDQnlaV052WjI1cGVtVnpJR0VnWTI5dGJXOXViSGtnZFhObFpuVnNJSE4xWW5ObGRDQnZaaUJWVWt4eklIUm9ZWFFnWVhKbElITmhabVV1WEc0Z0tseHVJQ29nVTJodmRYUnZkWFFnZEc4Z1FXNW5kV3hoY2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdllXNW5kV3hoY2k5aGJtZDFiR0Z5TDJKc2IySXZNVEl1TWk1NEwzQmhZMnRoWjJWekwyTnZjbVV2YzNKakwzTmhibWwwYVhwaGRHbHZiaTkxY214ZmMyRnVhWFJwZW1WeUxuUnpYRzRnS2k5Y2JseHVZMjl1YzNRZ1UwRkdSVjlWVWt4ZlVFRlVWRVZTVGlBOUlDOWVLRDg2S0Q4NmFIUjBjSE0vZkcxaGFXeDBiM3htZEhCOGRHVnNmR1pwYkdWOGMyMXpLVHA4VzE0akppODZQMTBxS0Q4Nld5TXZQMTE4SkNrcEwyazdYRzR2S2lwY2JpQXFJRUVnY0dGMGRHVnliaUIwYUdGMElHMWhkR05vWlhNZ2MyRm1aU0JrWVhSaElGVlNUSE11SUU5dWJIa2diV0YwWTJobGN5QnBiV0ZuWlN3Z2RtbGtaVzhnWVc1a0lHRjFaR2x2SUhSNWNHVnpMbHh1SUNwY2JpQXFJRk5vYjNWMGIzVjBJSFJ2SUVGdVozVnNZWElnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJGdVozVnNZWEl2WVc1bmRXeGhjaTlpYkc5aUx6RXlMakl1ZUM5d1lXTnJZV2RsY3k5amIzSmxMM055WXk5ellXNXBkR2w2WVhScGIyNHZkWEpzWDNOaGJtbDBhWHBsY2k1MGMxeHVJQ292WEc1Y2JtTnZibk4wSUVSQlZFRmZWVkpNWDFCQlZGUkZVazRnUFNBdlhtUmhkR0U2S0Q4NmFXMWhaMlZjWEM4b1B6cGliWEI4WjJsbWZHcHdaV2Q4YW5CbmZIQnVaM3gwYVdabWZIZGxZbkFwZkhacFpHVnZYRnd2S0Q4NmJYQmxaM3h0Y0RSOGIyZG5mSGRsWW0wcGZHRjFaR2x2WEZ3dktEODZiWEF6Zkc5bllYeHZaMmQ4YjNCMWN5a3BPMkpoYzJVMk5DeGJYRnhrS3k5aExYcGRLejBxSkM5cE8xeHVYRzVqYjI1emRDQmhiR3h2ZDJWa1FYUjBjbWxpZFhSbElEMGdLR0YwZEhKcFluVjBaU3dnWVd4c2IzZGxaRUYwZEhKcFluVjBaVXhwYzNRcElEMCtJSHRjYmlBZ1kyOXVjM1FnWVhSMGNtbGlkWFJsVG1GdFpTQTlJR0YwZEhKcFluVjBaUzV1YjJSbFRtRnRaUzUwYjB4dmQyVnlRMkZ6WlNncE8xeHVYRzRnSUdsbUlDaGhiR3h2ZDJWa1FYUjBjbWxpZFhSbFRHbHpkQzVwYm1Oc2RXUmxjeWhoZEhSeWFXSjFkR1ZPWVcxbEtTa2dlMXh1SUNBZ0lHbG1JQ2gxY21sQmRIUnlhV0oxZEdWekxtaGhjeWhoZEhSeWFXSjFkR1ZPWVcxbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlFSnZiMnhsWVc0b1UwRkdSVjlWVWt4ZlVFRlVWRVZTVGk1MFpYTjBLR0YwZEhKcFluVjBaUzV1YjJSbFZtRnNkV1VwSUh4OElFUkJWRUZmVlZKTVgxQkJWRlJGVWs0dWRHVnpkQ2hoZEhSeWFXSjFkR1V1Ym05a1pWWmhiSFZsS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCeVpXZEZlSEFnUFNCaGJHeHZkMlZrUVhSMGNtbGlkWFJsVEdsemRDNW1hV3gwWlhJb1lYUjBjbWxpZFhSbFVtVm5aWGdnUFQ0Z1lYUjBjbWxpZFhSbFVtVm5aWGdnYVc1emRHRnVZMlZ2WmlCU1pXZEZlSEFwT3lBdkx5QkRhR1ZqYXlCcFppQmhJSEpsWjNWc1lYSWdaWGh3Y21WemMybHZiaUIyWVd4cFpHRjBaWE1nZEdobElHRjBkSEpwWW5WMFpTNWNibHh1SUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYkdWdUlEMGdjbVZuUlhod0xteGxibWQwYURzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0hKbFowVjRjRnRwWFM1MFpYTjBLR0YwZEhKcFluVjBaVTVoYldVcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlPMXh1WEc1amIyNXpkQ0JFWldaaGRXeDBRV3hzYjNkc2FYTjBJRDBnZTF4dUlDQXZMeUJIYkc5aVlXd2dZWFIwY21saWRYUmxjeUJoYkd4dmQyVmtJRzl1SUdGdWVTQnpkWEJ3YkdsbFpDQmxiR1Z0Wlc1MElHSmxiRzkzTGx4dUlDQW5LaWM2SUZzblkyeGhjM01uTENBblpHbHlKeXdnSjJsa0p5d2dKMnhoYm1jbkxDQW5jbTlzWlNjc0lFRlNTVUZmUVZSVVVrbENWVlJGWDFCQlZGUkZVazVkTEZ4dUlDQmhPaUJiSjNSaGNtZGxkQ2NzSUNkb2NtVm1KeXdnSjNScGRHeGxKeXdnSjNKbGJDZGRMRnh1SUNCaGNtVmhPaUJiWFN4Y2JpQWdZam9nVzEwc1hHNGdJR0p5T2lCYlhTeGNiaUFnWTI5c09pQmJYU3hjYmlBZ1kyOWtaVG9nVzEwc1hHNGdJR1JwZGpvZ1cxMHNYRzRnSUdWdE9pQmJYU3hjYmlBZ2FISTZJRnRkTEZ4dUlDQm9NVG9nVzEwc1hHNGdJR2d5T2lCYlhTeGNiaUFnYURNNklGdGRMRnh1SUNCb05Eb2dXMTBzWEc0Z0lHZzFPaUJiWFN4Y2JpQWdhRFk2SUZ0ZExGeHVJQ0JwT2lCYlhTeGNiaUFnYVcxbk9pQmJKM055WXljc0lDZHpjbU56WlhRbkxDQW5ZV3gwSnl3Z0ozUnBkR3hsSnl3Z0ozZHBaSFJvSnl3Z0oyaGxhV2RvZENkZExGeHVJQ0JzYVRvZ1cxMHNYRzRnSUc5c09pQmJYU3hjYmlBZ2NEb2dXMTBzWEc0Z0lIQnlaVG9nVzEwc1hHNGdJSE02SUZ0ZExGeHVJQ0J6YldGc2JEb2dXMTBzWEc0Z0lITndZVzQ2SUZ0ZExGeHVJQ0J6ZFdJNklGdGRMRnh1SUNCemRYQTZJRnRkTEZ4dUlDQnpkSEp2Ym1jNklGdGRMRnh1SUNCMU9pQmJYU3hjYmlBZ2RXdzZJRnRkWEc1OU8xeHVablZ1WTNScGIyNGdjMkZ1YVhScGVtVklkRzFzS0hWdWMyRm1aVWgwYld3c0lHRnNiRzkzVEdsemRDd2djMkZ1YVhScGVtVkdiaWtnZTF4dUlDQnBaaUFvSVhWdWMyRm1aVWgwYld3dWJHVnVaM1JvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFZ1YzJGbVpVaDBiV3c3WEc0Z0lIMWNibHh1SUNCcFppQW9jMkZ1YVhScGVtVkdiaUFtSmlCMGVYQmxiMllnYzJGdWFYUnBlbVZHYmlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnpZVzVwZEdsNlpVWnVLSFZ1YzJGbVpVaDBiV3dwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnWkc5dFVHRnljMlZ5SUQwZ2JtVjNJSGRwYm1SdmR5NUVUMDFRWVhKelpYSW9LVHRjYmlBZ1kyOXVjM1FnWTNKbFlYUmxaRVJ2WTNWdFpXNTBJRDBnWkc5dFVHRnljMlZ5TG5CaGNuTmxSbkp2YlZOMGNtbHVaeWgxYm5OaFptVklkRzFzTENBbmRHVjRkQzlvZEcxc0p5azdYRzRnSUdOdmJuTjBJR1ZzWlcxbGJuUnpJRDBnVzEwdVkyOXVZMkYwS0M0dUxtTnlaV0YwWldSRWIyTjFiV1Z1ZEM1aWIyUjVMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29KeW9uS1NrN1hHNWNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR3hsYmlBOUlHVnNaVzFsYm5SekxteGxibWQwYURzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdZMjl1YzNRZ1pXeGxiV1Z1ZENBOUlHVnNaVzFsYm5SelcybGRPMXh1SUNBZ0lHTnZibk4wSUdWc1pXMWxiblJPWVcxbElEMGdaV3hsYldWdWRDNXViMlJsVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dVhHNGdJQ0FnYVdZZ0tDRlBZbXBsWTNRdWEyVjVjeWhoYkd4dmQweHBjM1FwTG1sdVkyeDFaR1Z6S0dWc1pXMWxiblJPWVcxbEtTa2dlMXh1SUNBZ0lDQWdaV3hsYldWdWRDNXlaVzF2ZG1Vb0tUdGNiaUFnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJR0YwZEhKcFluVjBaVXhwYzNRZ1BTQmJYUzVqYjI1allYUW9MaTR1Wld4bGJXVnVkQzVoZEhSeWFXSjFkR1Z6S1R0Y2JpQWdJQ0JqYjI1emRDQmhiR3h2ZDJWa1FYUjBjbWxpZFhSbGN5QTlJRnRkTG1OdmJtTmhkQ2hoYkd4dmQweHBjM1JiSnlvblhTQjhmQ0JiWFN3Z1lXeHNiM2RNYVhOMFcyVnNaVzFsYm5ST1lXMWxYU0I4ZkNCYlhTazdYRzRnSUNBZ1lYUjBjbWxpZFhSbFRHbHpkQzVtYjNKRllXTm9LR0YwZEhKcFluVjBaU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9JV0ZzYkc5M1pXUkJkSFJ5YVdKMWRHVW9ZWFIwY21saWRYUmxMQ0JoYkd4dmQyVmtRWFIwY21saWRYUmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1eVpXMXZkbVZCZEhSeWFXSjFkR1VvWVhSMGNtbGlkWFJsTG01dlpHVk9ZVzFsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZrUkc5amRXMWxiblF1WW05a2VTNXBibTVsY2toVVRVdzdYRzU5WEc1Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVKdmIzUnpkSEpoY0NBb2RqVXVNUzR6S1RvZ2RHOXZiSFJwY0M1cWMxeHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdUVWxVSUNob2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRIZGljeTlpYjI5MGMzUnlZWEF2WW14dllpOXRZV2x1TDB4SlEwVk9VMFVwWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5dWMzUmhiblJ6WEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNWpiMjV6ZENCT1FVMUZKRFFnUFNBbmRHOXZiSFJwY0NjN1hHNWpiMjV6ZENCRVFWUkJYMHRGV1NRMElEMGdKMkp6TG5SdmIyeDBhWEFuTzF4dVkyOXVjM1FnUlZaRlRsUmZTMFZaSkRRZ1BTQmdMaVI3UkVGVVFWOUxSVmtrTkgxZ08xeHVZMjl1YzNRZ1EweEJVMU5mVUZKRlJrbFlKREVnUFNBblluTXRkRzl2YkhScGNDYzdYRzVqYjI1emRDQkVTVk5CVEV4UFYwVkVYMEZVVkZKSlFsVlVSVk1nUFNCdVpYY2dVMlYwS0ZzbmMyRnVhWFJwZW1VbkxDQW5ZV3hzYjNkTWFYTjBKeXdnSjNOaGJtbDBhWHBsUm00blhTazdYRzVqYjI1emRDQkVaV1poZFd4MFZIbHdaU1F6SUQwZ2UxeHVJQ0JoYm1sdFlYUnBiMjQ2SUNkaWIyOXNaV0Z1Snl4Y2JpQWdkR1Z0Y0d4aGRHVTZJQ2R6ZEhKcGJtY25MRnh1SUNCMGFYUnNaVG9nSnloemRISnBibWQ4Wld4bGJXVnVkSHhtZFc1amRHbHZiaWtuTEZ4dUlDQjBjbWxuWjJWeU9pQW5jM1J5YVc1bkp5eGNiaUFnWkdWc1lYazZJQ2NvYm5WdFltVnlmRzlpYW1WamRDa25MRnh1SUNCb2RHMXNPaUFuWW05dmJHVmhiaWNzWEc0Z0lITmxiR1ZqZEc5eU9pQW5LSE4wY21sdVozeGliMjlzWldGdUtTY3NYRzRnSUhCc1lXTmxiV1Z1ZERvZ0p5aHpkSEpwYm1kOFpuVnVZM1JwYjI0cEp5eGNiaUFnYjJabWMyVjBPaUFuS0dGeWNtRjVmSE4wY21sdVozeG1kVzVqZEdsdmJpa25MRnh1SUNCamIyNTBZV2x1WlhJNklDY29jM1J5YVc1bmZHVnNaVzFsYm5SOFltOXZiR1ZoYmlrbkxGeHVJQ0JtWVd4c1ltRmphMUJzWVdObGJXVnVkSE02SUNkaGNuSmhlU2NzWEc0Z0lHSnZkVzVrWVhKNU9pQW5LSE4wY21sdVozeGxiR1Z0Wlc1MEtTY3NYRzRnSUdOMWMzUnZiVU5zWVhOek9pQW5LSE4wY21sdVozeG1kVzVqZEdsdmJpa25MRnh1SUNCellXNXBkR2w2WlRvZ0oySnZiMnhsWVc0bkxGeHVJQ0J6WVc1cGRHbDZaVVp1T2lBbktHNTFiR3g4Wm5WdVkzUnBiMjRwSnl4Y2JpQWdZV3hzYjNkTWFYTjBPaUFuYjJKcVpXTjBKeXhjYmlBZ2NHOXdjR1Z5UTI5dVptbG5PaUFuS0c1MWJHeDhiMkpxWldOMGZHWjFibU4wYVc5dUtTZGNibjA3WEc1amIyNXpkQ0JCZEhSaFkyaHRaVzUwVFdGd0lEMGdlMXh1SUNCQlZWUlBPaUFuWVhWMGJ5Y3NYRzRnSUZSUFVEb2dKM1J2Y0Njc1hHNGdJRkpKUjBoVU9pQnBjMUpVVENncElEOGdKMnhsWm5RbklEb2dKM0pwWjJoMEp5eGNiaUFnUWs5VVZFOU5PaUFuWW05MGRHOXRKeXhjYmlBZ1RFVkdWRG9nYVhOU1ZFd29LU0EvSUNkeWFXZG9kQ2NnT2lBbmJHVm1kQ2RjYm4wN1hHNWpiMjV6ZENCRVpXWmhkV3gwSkRNZ1BTQjdYRzRnSUdGdWFXMWhkR2x2YmpvZ2RISjFaU3hjYmlBZ2RHVnRjR3hoZEdVNklDYzhaR2wySUdOc1lYTnpQVndpZEc5dmJIUnBjRndpSUhKdmJHVTlYQ0owYjI5c2RHbHdYQ0krSnlBcklDYzhaR2wySUdOc1lYTnpQVndpZEc5dmJIUnBjQzFoY25KdmQxd2lQand2WkdsMlBpY2dLeUFuUEdScGRpQmpiR0Z6Y3oxY0luUnZiMngwYVhBdGFXNXVaWEpjSWo0OEwyUnBkajRuSUNzZ0p6d3ZaR2wyUGljc1hHNGdJSFJ5YVdkblpYSTZJQ2RvYjNabGNpQm1iMk4xY3ljc1hHNGdJSFJwZEd4bE9pQW5KeXhjYmlBZ1pHVnNZWGs2SURBc1hHNGdJR2gwYld3NklHWmhiSE5sTEZ4dUlDQnpaV3hsWTNSdmNqb2dabUZzYzJVc1hHNGdJSEJzWVdObGJXVnVkRG9nSjNSdmNDY3NYRzRnSUc5bVpuTmxkRG9nV3pBc0lEQmRMRnh1SUNCamIyNTBZV2x1WlhJNklHWmhiSE5sTEZ4dUlDQm1ZV3hzWW1GamExQnNZV05sYldWdWRITTZJRnNuZEc5d0p5d2dKM0pwWjJoMEp5d2dKMkp2ZEhSdmJTY3NJQ2RzWldaMEoxMHNYRzRnSUdKdmRXNWtZWEo1T2lBblkyeHBjSEJwYm1kUVlYSmxiblJ6Snl4Y2JpQWdZM1Z6ZEc5dFEyeGhjM002SUNjbkxGeHVJQ0J6WVc1cGRHbDZaVG9nZEhKMVpTeGNiaUFnYzJGdWFYUnBlbVZHYmpvZ2JuVnNiQ3hjYmlBZ1lXeHNiM2RNYVhOME9pQkVaV1poZFd4MFFXeHNiM2RzYVhOMExGeHVJQ0J3YjNCd1pYSkRiMjVtYVdjNklHNTFiR3hjYm4wN1hHNWpiMjV6ZENCRmRtVnVkQ1F5SUQwZ2UxeHVJQ0JJU1VSRk9pQmdhR2xrWlNSN1JWWkZUbFJmUzBWWkpEUjlZQ3hjYmlBZ1NFbEVSRVZPT2lCZ2FHbGtaR1Z1Skh0RlZrVk9WRjlMUlZra05IMWdMRnh1SUNCVFNFOVhPaUJnYzJodmR5UjdSVlpGVGxSZlMwVlpKRFI5WUN4Y2JpQWdVMGhQVjA0NklHQnphRzkzYmlSN1JWWkZUbFJmUzBWWkpEUjlZQ3hjYmlBZ1NVNVRSVkpVUlVRNklHQnBibk5sY25SbFpDUjdSVlpGVGxSZlMwVlpKRFI5WUN4Y2JpQWdRMHhKUTBzNklHQmpiR2xqYXlSN1JWWkZUbFJmUzBWWkpEUjlZQ3hjYmlBZ1JrOURWVk5KVGpvZ1lHWnZZM1Z6YVc0a2UwVldSVTVVWDB0RldTUTBmV0FzWEc0Z0lFWlBRMVZUVDFWVU9pQmdabTlqZFhOdmRYUWtlMFZXUlU1VVgwdEZXU1EwZldBc1hHNGdJRTFQVlZORlJVNVVSVkk2SUdCdGIzVnpaV1Z1ZEdWeUpIdEZWa1ZPVkY5TFJWa2tOSDFnTEZ4dUlDQk5UMVZUUlV4RlFWWkZPaUJnYlc5MWMyVnNaV0YyWlNSN1JWWkZUbFJmUzBWWkpEUjlZRnh1ZlR0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlJrRkVSU1F5SUQwZ0oyWmhaR1VuTzF4dVkyOXVjM1FnUTB4QlUxTmZUa0ZOUlY5TlQwUkJUQ0E5SUNkdGIyUmhiQ2M3WEc1amIyNXpkQ0JEVEVGVFUxOU9RVTFGWDFOSVQxY2tNaUE5SUNkemFHOTNKenRjYm1OdmJuTjBJRWhQVmtWU1gxTlVRVlJGWDFOSVQxY2dQU0FuYzJodmR5YzdYRzVqYjI1emRDQklUMVpGVWw5VFZFRlVSVjlQVlZRZ1BTQW5iM1YwSnp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDFSUFQweFVTVkJmU1U1T1JWSWdQU0FuTG5SdmIyeDBhWEF0YVc1dVpYSW5PMXh1WTI5dWMzUWdVMFZNUlVOVVQxSmZUVTlFUVV3Z1BTQmdMaVI3UTB4QlUxTmZUa0ZOUlY5TlQwUkJUSDFnTzF4dVkyOXVjM1FnUlZaRlRsUmZUVTlFUVV4ZlNFbEVSU0E5SUNkb2FXUmxMbUp6TG0xdlpHRnNKenRjYm1OdmJuTjBJRlJTU1VkSFJWSmZTRTlXUlZJZ1BTQW5hRzkyWlhJbk8xeHVZMjl1YzNRZ1ZGSkpSMGRGVWw5R1QwTlZVeUE5SUNkbWIyTjFjeWM3WEc1amIyNXpkQ0JVVWtsSFIwVlNYME5NU1VOTElEMGdKMk5zYVdOckp6dGNibU52Ym5OMElGUlNTVWRIUlZKZlRVRk9WVUZNSUQwZ0oyMWhiblZoYkNjN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTJ4aGMzTWdSR1ZtYVc1cGRHbHZibHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYmx4dVkyeGhjM01nVkc5dmJIUnBjQ0JsZUhSbGJtUnpJRUpoYzJWRGIyMXdiMjVsYm5RZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lobGJHVnRaVzUwTENCamIyNW1hV2NwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUZCdmNIQmxjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBKdmIzUnpkSEpoY0Z4Y0ozTWdkRzl2YkhScGNITWdjbVZ4ZFdseVpTQlFiM0J3WlhJZ0tHaDBkSEJ6T2k4dmNHOXdjR1Z5TG1wekxtOXlaeWtuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZFhCbGNpaGxiR1Z0Wlc1MEtUc2dMeThnY0hKcGRtRjBaVnh1WEc0Z0lDQWdkR2hwY3k1ZmFYTkZibUZpYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0IwYUdsekxsOTBhVzFsYjNWMElEMGdNRHRjYmlBZ0lDQjBhR2x6TGw5b2IzWmxjbE4wWVhSbElEMGdKeWM3WEc0Z0lDQWdkR2hwY3k1ZllXTjBhWFpsVkhKcFoyZGxjaUE5SUh0OU8xeHVJQ0FnSUhSb2FYTXVYM0J2Y0hCbGNpQTlJRzUxYkd3N0lDOHZJRkJ5YjNSbFkzUmxaRnh1WEc0Z0lDQWdkR2hwY3k1ZlkyOXVabWxuSUQwZ2RHaHBjeTVmWjJWMFEyOXVabWxuS0dOdmJtWnBaeWs3WEc0Z0lDQWdkR2hwY3k1MGFYQWdQU0J1ZFd4c08xeHVYRzRnSUNBZ2RHaHBjeTVmYzJWMFRHbHpkR1Z1WlhKektDazdYRzRnSUgwZ0x5OGdSMlYwZEdWeWMxeHVYRzVjYmlBZ2MzUmhkR2xqSUdkbGRDQkVaV1poZFd4MEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCRVpXWmhkV3gwSkRNN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBJRTVCVFVVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUU1QlRVVWtORHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhRZ1JYWmxiblFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRVYyWlc1MEpESTdYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdaMlYwSUVSbFptRjFiSFJVZVhCbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCRVpXWmhkV3gwVkhsd1pTUXpPMXh1SUNCOUlDOHZJRkIxWW14cFkxeHVYRzVjYmlBZ1pXNWhZbXhsS0NrZ2UxeHVJQ0FnSUhSb2FYTXVYMmx6Ulc1aFlteGxaQ0E5SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0JrYVhOaFlteGxLQ2tnZTF4dUlDQWdJSFJvYVhNdVgybHpSVzVoWW14bFpDQTlJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdkRzluWjJ4bFJXNWhZbXhsWkNncElIdGNiaUFnSUNCMGFHbHpMbDlwYzBWdVlXSnNaV1FnUFNBaGRHaHBjeTVmYVhORmJtRmliR1ZrTzF4dUlDQjlYRzVjYmlBZ2RHOW5aMnhsS0dWMlpXNTBLU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDlwYzBWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElHTnZiblJsZUhRZ1BTQjBhR2x6TGw5cGJtbDBhV0ZzYVhwbFQyNUVaV3hsWjJGMFpXUlVZWEpuWlhRb1pYWmxiblFwTzF4dVhHNGdJQ0FnSUNCamIyNTBaWGgwTGw5aFkzUnBkbVZVY21sbloyVnlMbU5zYVdOcklEMGdJV052Ym5SbGVIUXVYMkZqZEdsMlpWUnlhV2RuWlhJdVkyeHBZMnM3WEc1Y2JpQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMExsOXBjMWRwZEdoQlkzUnBkbVZVY21sbloyVnlLQ2twSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1ZlpXNTBaWElvYm5Wc2JDd2dZMjl1ZEdWNGRDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMExsOXNaV0YyWlNodWRXeHNMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVoyVjBWR2x3Uld4bGJXVnVkQ2dwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loRFRFRlRVMTlPUVUxRlgxTklUMWNrTWlrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHVmhkbVVvYm5Wc2JDd2dkR2hwY3lrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TGw5bGJuUmxjaWh1ZFd4c0xDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCa2FYTndiM05sS0NrZ2UxeHVJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhR2x6TGw5MGFXMWxiM1YwS1R0Y2JpQWdJQ0JGZG1WdWRFaGhibVJzWlhJdWIyWm1LSFJvYVhNdVgyVnNaVzFsYm5RdVkyeHZjMlZ6ZENoVFJVeEZRMVJQVWw5TlQwUkJUQ2tzSUVWV1JVNVVYMDFQUkVGTVgwaEpSRVVzSUhSb2FYTXVYMmhwWkdWTmIyUmhiRWhoYm1Sc1pYSXBPMXh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVkR2x3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMblJwY0M1eVpXMXZkbVVvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOWthWE53YjNObFVHOXdjR1Z5S0NrN1hHNWNiaUFnSUNCemRYQmxjaTVrYVhOd2IzTmxLQ2s3WEc0Z0lIMWNibHh1SUNCemFHOTNLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDlsYkdWdFpXNTBMbk4wZVd4bExtUnBjM0JzWVhrZ1BUMDlJQ2R1YjI1bEp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFFiR1ZoYzJVZ2RYTmxJSE5vYjNjZ2IyNGdkbWx6YVdKc1pTQmxiR1Z0Wlc1MGN5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2doS0hSb2FYTXVhWE5YYVhSb1EyOXVkR1Z1ZENncElDWW1JSFJvYVhNdVgybHpSVzVoWW14bFpDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J6YUc5M1JYWmxiblFnUFNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWMlpXNTBMbE5JVDFjcE8xeHVJQ0FnSUdOdmJuTjBJSE5vWVdSdmQxSnZiM1FnUFNCbWFXNWtVMmhoWkc5M1VtOXZkQ2gwYUdsekxsOWxiR1Z0Wlc1MEtUdGNiaUFnSUNCamIyNXpkQ0JwYzBsdVZHaGxSRzl0SUQwZ2MyaGhaRzkzVW05dmRDQTlQVDBnYm5Wc2JDQS9JSFJvYVhNdVgyVnNaVzFsYm5RdWIzZHVaWEpFYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUXVZMjl1ZEdGcGJuTW9kR2hwY3k1ZlpXeGxiV1Z1ZENrZ09pQnphR0ZrYjNkU2IyOTBMbU52Ym5SaGFXNXpLSFJvYVhNdVgyVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ2FXWWdLSE5vYjNkRmRtVnVkQzVrWldaaGRXeDBVSEpsZG1WdWRHVmtJSHg4SUNGcGMwbHVWR2hsUkc5dEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlNBdkx5QkJJSFJ5YVdOcklIUnZJSEpsWTNKbFlYUmxJR0VnZEc5dmJIUnBjQ0JwYmlCallYTmxJR0VnYm1WM0lIUnBkR3hsSUdseklHZHBkbVZ1SUdKNUlIVnphVzVuSUhSb1pTQk9UMVFnWkc5amRXMWxiblJsWkNCZ1pHRjBZUzFpY3kxdmNtbG5hVzVoYkMxMGFYUnNaV0JjYmlBZ0lDQXZMeUJVYUdseklIZHBiR3dnWW1VZ2NtVnRiM1psWkNCc1lYUmxjaUJwYmlCbVlYWnZjaUJ2WmlCaElHQnpaWFJEYjI1MFpXNTBZQ0J0WlhSb2IyUmNibHh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVZMjl1YzNSeWRXTjBiM0l1VGtGTlJTQTlQVDBnSjNSdmIyeDBhWEFuSUNZbUlIUm9hWE11ZEdsd0lDWW1JSFJvYVhNdVoyVjBWR2wwYkdVb0tTQWhQVDBnZEdocGN5NTBhWEF1Y1hWbGNubFRaV3hsWTNSdmNpaFRSVXhGUTFSUFVsOVVUMDlNVkVsUVgwbE9Ua1ZTS1M1cGJtNWxja2hVVFV3cElIdGNiaUFnSUNBZ0lIUm9hWE11WDJScGMzQnZjMlZRYjNCd1pYSW9LVHRjYmx4dUlDQWdJQ0FnZEdocGN5NTBhWEF1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdJQ0IwYUdsekxuUnBjQ0E5SUc1MWJHdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnZEdsd0lEMGdkR2hwY3k1blpYUlVhWEJGYkdWdFpXNTBLQ2s3WEc0Z0lDQWdZMjl1YzNRZ2RHbHdTV1FnUFNCblpYUlZTVVFvZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVPUVUxRktUdGNiaUFnSUNCMGFYQXVjMlYwUVhSMGNtbGlkWFJsS0NkcFpDY3NJSFJwY0Vsa0tUdGNibHh1SUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtDZGhjbWxoTFdSbGMyTnlhV0psWkdKNUp5d2dkR2x3U1dRcE8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyTnZibVpwWnk1aGJtbHRZWFJwYjI0cElIdGNiaUFnSUNBZ0lIUnBjQzVqYkdGemMweHBjM1F1WVdSa0tFTk1RVk5UWDA1QlRVVmZSa0ZFUlNReUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J3YkdGalpXMWxiblFnUFNCMGVYQmxiMllnZEdocGN5NWZZMjl1Wm1sbkxuQnNZV05sYldWdWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlBL0lIUm9hWE11WDJOdmJtWnBaeTV3YkdGalpXMWxiblF1WTJGc2JDaDBhR2x6TENCMGFYQXNJSFJvYVhNdVgyVnNaVzFsYm5RcElEb2dkR2hwY3k1ZlkyOXVabWxuTG5Cc1lXTmxiV1Z1ZER0Y2JseHVJQ0FnSUdOdmJuTjBJR0YwZEdGamFHMWxiblFnUFNCMGFHbHpMbDluWlhSQmRIUmhZMmh0Wlc1MEtIQnNZV05sYldWdWRDazdYRzVjYmlBZ0lDQjBhR2x6TGw5aFpHUkJkSFJoWTJodFpXNTBRMnhoYzNNb1lYUjBZV05vYldWdWRDazdYRzVjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhKY2JpQWdJQ0I5SUQwZ2RHaHBjeTVmWTI5dVptbG5PMXh1SUNBZ0lFUmhkR0V1YzJWMEtIUnBjQ3dnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVFUVZSQlgwdEZXU3dnZEdocGN5azdYRzVjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYMlZzWlcxbGJuUXViM2R1WlhKRWIyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1WTI5dWRHRnBibk1vZEdocGN5NTBhWEFwS1NCN1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJdVlYQndaVzVrS0hScGNDazdYRzRnSUNBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVjJaVzUwTGtsT1UwVlNWRVZFS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmY0c5d2NHVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXdiM0J3WlhJdWRYQmtZWFJsS0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzQnZjSEJsY2lBOUlGQnZjSEJsY2k1amNtVmhkR1ZRYjNCd1pYSW9kR2hwY3k1ZlpXeGxiV1Z1ZEN3Z2RHbHdMQ0IwYUdsekxsOW5aWFJRYjNCd1pYSkRiMjVtYVdjb1lYUjBZV05vYldWdWRDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUnBjQzVqYkdGemMweHBjM1F1WVdSa0tFTk1RVk5UWDA1QlRVVmZVMGhQVnlReUtUdGNibHh1SUNBZ0lHTnZibk4wSUdOMWMzUnZiVU5zWVhOeklEMGdkR2hwY3k1ZmNtVnpiMngyWlZCdmMzTnBZbXhsUm5WdVkzUnBiMjRvZEdocGN5NWZZMjl1Wm1sbkxtTjFjM1J2YlVOc1lYTnpLVHRjYmx4dUlDQWdJR2xtSUNoamRYTjBiMjFEYkdGemN5a2dlMXh1SUNBZ0lDQWdkR2x3TG1Oc1lYTnpUR2x6ZEM1aFpHUW9MaTR1WTNWemRHOXRRMnhoYzNNdWMzQnNhWFFvSnlBbktTazdYRzRnSUNBZ2ZTQXZMeUJKWmlCMGFHbHpJR2x6SUdFZ2RHOTFZMmd0Wlc1aFlteGxaQ0JrWlhacFkyVWdkMlVnWVdSa0lHVjRkSEpoWEc0Z0lDQWdMeThnWlcxd2RIa2diVzkxYzJWdmRtVnlJR3hwYzNSbGJtVnljeUIwYnlCMGFHVWdZbTlrZVNkeklHbHRiV1ZrYVdGMFpTQmphR2xzWkhKbGJqdGNiaUFnSUNBdkx5QnZibXg1SUc1bFpXUmxaQ0JpWldOaGRYTmxJRzltSUdKeWIydGxiaUJsZG1WdWRDQmtaV3hsWjJGMGFXOXVJRzl1SUdsUFUxeHVJQ0FnSUM4dklHaDBkSEJ6T2k4dmQzZDNMbkYxYVhKcmMyMXZaR1V1YjNKbkwySnNiMmN2WVhKamFHbDJaWE12TWpBeE5DOHdNaTl0YjNWelpWOWxkbVZ1ZEY5aWRXSXVhSFJ0YkZ4dVhHNWNiaUFnSUNCcFppQW9KMjl1ZEc5MVkyaHpkR0Z5ZENjZ2FXNGdaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQmJYUzVqYjI1allYUW9MaTR1Wkc5amRXMWxiblF1WW05a2VTNWphR2xzWkhKbGJpa3VabTl5UldGamFDaGxiR1Z0Wlc1MElEMCtJSHRjYmlBZ0lDQWdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOXVLR1ZzWlcxbGJuUXNJQ2R0YjNWelpXOTJaWEluTENCdWIyOXdLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHTnZiWEJzWlhSbElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRraHZkbVZ5VTNSaGRHVWdQU0IwYUdsekxsOW9iM1psY2xOMFlYUmxPMXh1SUNBZ0lDQWdkR2hwY3k1ZmFHOTJaWEpUZEdGMFpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCRmRtVnVkRWhoYm1Sc1pYSXVkSEpwWjJkbGNpaDBhR2x6TGw5bGJHVnRaVzUwTENCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtWMlpXNTBMbE5JVDFkT0tUdGNibHh1SUNBZ0lDQWdhV1lnS0hCeVpYWkliM1psY2xOMFlYUmxJRDA5UFNCSVQxWkZVbDlUVkVGVVJWOVBWVlFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkdWaGRtVW9iblZzYkN3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OMElHbHpRVzVwYldGMFpXUWdQU0IwYUdsekxuUnBjQzVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vUTB4QlUxTmZUa0ZOUlY5R1FVUkZKRElwTzF4dVhHNGdJQ0FnZEdocGN5NWZjWFZsZFdWRFlXeHNZbUZqYXloamIyMXdiR1YwWlN3Z2RHaHBjeTUwYVhBc0lHbHpRVzVwYldGMFpXUXBPMXh1SUNCOVhHNWNiaUFnYUdsa1pTZ3BJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYM0J2Y0hCbGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdOdmJuTjBJSFJwY0NBOUlIUm9hWE11WjJWMFZHbHdSV3hsYldWdWRDZ3BPMXh1WEc0Z0lDQWdZMjl1YzNRZ1kyOXRjR3hsZEdVZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZmFYTlhhWFJvUVdOMGFYWmxWSEpwWjJkbGNpZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDJodmRtVnlVM1JoZEdVZ0lUMDlJRWhQVmtWU1gxTlVRVlJGWDFOSVQxY3BJSHRjYmlBZ0lDQWdJQ0FnZEdsd0xuSmxiVzkyWlNncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TGw5amJHVmhibFJwY0VOc1lYTnpLQ2s3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVjbVZ0YjNabFFYUjBjbWxpZFhSbEtDZGhjbWxoTFdSbGMyTnlhV0psWkdKNUp5azdYRzVjYmlBZ0lDQWdJRVYyWlc1MFNHRnVaR3hsY2k1MGNtbG5aMlZ5S0hSb2FYTXVYMlZzWlcxbGJuUXNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVSWFpsYm5RdVNFbEVSRVZPS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmWkdsemNHOXpaVkJ2Y0hCbGNpZ3BPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCb2FXUmxSWFpsYm5RZ1BTQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVjJaVzUwTGtoSlJFVXBPMXh1WEc0Z0lDQWdhV1lnS0docFpHVkZkbVZ1ZEM1a1pXWmhkV3gwVUhKbGRtVnVkR1ZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2x3TG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvUTB4QlUxTmZUa0ZOUlY5VFNFOVhKRElwT3lBdkx5QkpaaUIwYUdseklHbHpJR0VnZEc5MVkyZ3RaVzVoWW14bFpDQmtaWFpwWTJVZ2QyVWdjbVZ0YjNabElIUm9aU0JsZUhSeVlWeHVJQ0FnSUM4dklHVnRjSFI1SUcxdmRYTmxiM1psY2lCc2FYTjBaVzVsY25NZ2QyVWdZV1JrWldRZ1ptOXlJR2xQVXlCemRYQndiM0owWEc1Y2JpQWdJQ0JwWmlBb0oyOXVkRzkxWTJoemRHRnlkQ2NnYVc0Z1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNCYlhTNWpiMjVqWVhRb0xpNHVaRzlqZFcxbGJuUXVZbTlrZVM1amFHbHNaSEpsYmlrdVptOXlSV0ZqYUNobGJHVnRaVzUwSUQwK0lFVjJaVzUwU0dGdVpHeGxjaTV2Wm1Zb1pXeGxiV1Z1ZEN3Z0oyMXZkWE5sYjNabGNpY3NJRzV2YjNBcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDloWTNScGRtVlVjbWxuWjJWeVcxUlNTVWRIUlZKZlEweEpRMHRkSUQwZ1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1ZllXTjBhWFpsVkhKcFoyZGxjbHRVVWtsSFIwVlNYMFpQUTFWVFhTQTlJR1poYkhObE8xeHVJQ0FnSUhSb2FYTXVYMkZqZEdsMlpWUnlhV2RuWlhKYlZGSkpSMGRGVWw5SVQxWkZVbDBnUFNCbVlXeHpaVHRjYmlBZ0lDQmpiMjV6ZENCcGMwRnVhVzFoZEdWa0lEMGdkR2hwY3k1MGFYQXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRU5NUVZOVFgwNUJUVVZmUmtGRVJTUXlLVHRjYmx4dUlDQWdJSFJvYVhNdVgzRjFaWFZsUTJGc2JHSmhZMnNvWTI5dGNHeGxkR1VzSUhSb2FYTXVkR2x3TENCcGMwRnVhVzFoZEdWa0tUdGNibHh1SUNBZ0lIUm9hWE11WDJodmRtVnlVM1JoZEdVZ1BTQW5KenRjYmlBZ2ZWeHVYRzRnSUhWd1pHRjBaU2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmY0c5d2NHVnlJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXdiM0J3WlhJdWRYQmtZWFJsS0NrN1hHNGdJQ0FnZlZ4dUlDQjlJQzh2SUZCeWIzUmxZM1JsWkZ4dVhHNWNiaUFnYVhOWGFYUm9RMjl1ZEdWdWRDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1FtOXZiR1ZoYmloMGFHbHpMbWRsZEZScGRHeGxLQ2twTzF4dUlDQjlYRzVjYmlBZ1oyVjBWR2x3Uld4bGJXVnVkQ2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUwYVhBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJwY0R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQmxiR1Z0Wlc1MElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEc0Z0lDQWdaV3hsYldWdWRDNXBibTVsY2toVVRVd2dQU0IwYUdsekxsOWpiMjVtYVdjdWRHVnRjR3hoZEdVN1hHNGdJQ0FnWTI5dWMzUWdkR2x3SUQwZ1pXeGxiV1Z1ZEM1amFHbHNaSEpsYmxzd1hUdGNiaUFnSUNCMGFHbHpMbk5sZEVOdmJuUmxiblFvZEdsd0tUdGNiaUFnSUNCMGFYQXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaERURUZUVTE5T1FVMUZYMFpCUkVVa01pd2dRMHhCVTFOZlRrRk5SVjlUU0U5WEpESXBPMXh1SUNBZ0lIUm9hWE11ZEdsd0lEMGdkR2x3TzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5ScGNEdGNiaUFnZlZ4dVhHNGdJSE5sZEVOdmJuUmxiblFvZEdsd0tTQjdYRzRnSUNBZ2RHaHBjeTVmYzJGdWFYUnBlbVZCYm1SVFpYUkRiMjUwWlc1MEtIUnBjQ3dnZEdocGN5NW5aWFJVYVhSc1pTZ3BMQ0JUUlV4RlExUlBVbDlVVDA5TVZFbFFYMGxPVGtWU0tUdGNiaUFnZlZ4dVhHNGdJRjl6WVc1cGRHbDZaVUZ1WkZObGRFTnZiblJsYm5Rb2RHVnRjR3hoZEdVc0lHTnZiblJsYm5Rc0lITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ1kyOXVjM1FnZEdWdGNHeGhkR1ZGYkdWdFpXNTBJRDBnVTJWc1pXTjBiM0pGYm1kcGJtVXVabWx1WkU5dVpTaHpaV3hsWTNSdmNpd2dkR1Z0Y0d4aGRHVXBPMXh1WEc0Z0lDQWdhV1lnS0NGamIyNTBaVzUwSUNZbUlIUmxiWEJzWVhSbFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ2RHVnRjR3hoZEdWRmJHVnRaVzUwTG5KbGJXOTJaU2dwTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMGdMeThnZDJVZ2RYTmxJR0Z3Y0dWdVpDQm1iM0lnYUhSdGJDQnZZbXBsWTNSeklIUnZJRzFoYVc1MFlXbHVJR3B6SUdWMlpXNTBjMXh1WEc1Y2JpQWdJQ0IwYUdsekxuTmxkRVZzWlcxbGJuUkRiMjUwWlc1MEtIUmxiWEJzWVhSbFJXeGxiV1Z1ZEN3Z1kyOXVkR1Z1ZENrN1hHNGdJSDFjYmx4dUlDQnpaWFJGYkdWdFpXNTBRMjl1ZEdWdWRDaGxiR1Z0Wlc1MExDQmpiMjUwWlc1MEtTQjdYRzRnSUNBZ2FXWWdLR1ZzWlcxbGJuUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hWE5GYkdWdFpXNTBLR052Ym5SbGJuUXBLU0I3WEc0Z0lDQWdJQ0JqYjI1MFpXNTBJRDBnWjJWMFJXeGxiV1Z1ZENoamIyNTBaVzUwS1RzZ0x5OGdZMjl1ZEdWdWRDQnBjeUJoSUVSUFRTQnViMlJsSUc5eUlHRWdhbEYxWlhKNVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOWpiMjVtYVdjdWFIUnRiQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZMjl1ZEdWdWRDNXdZWEpsYm5ST2IyUmxJQ0U5UFNCbGJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaV3hsYldWdWRDNXBibTVsY2toVVRVd2dQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtRndjR1Z1WkNoamIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1MFpYaDBRMjl1ZEdWdWRDQTlJR052Ym5SbGJuUXVkR1Y0ZEVOdmJuUmxiblE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWZZMjl1Wm1sbkxtaDBiV3dwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNW1hV2N1YzJGdWFYUnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR1Z1ZENBOUlITmhibWwwYVhwbFNIUnRiQ2hqYjI1MFpXNTBMQ0IwYUdsekxsOWpiMjVtYVdjdVlXeHNiM2RNYVhOMExDQjBhR2x6TGw5amIyNW1hV2N1YzJGdWFYUnBlbVZHYmlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHVnNaVzFsYm5RdWFXNXVaWEpJVkUxTUlEMGdZMjl1ZEdWdWREdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWld4bGJXVnVkQzUwWlhoMFEyOXVkR1Z1ZENBOUlHTnZiblJsYm5RN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1oyVjBWR2wwYkdVb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZEdsMGJHVWdQU0IwYUdsekxsOWxiR1Z0Wlc1MExtZGxkRUYwZEhKcFluVjBaU2duWkdGMFlTMWljeTF2Y21sbmFXNWhiQzEwYVhSc1pTY3BJSHg4SUhSb2FYTXVYMk52Ym1acFp5NTBhWFJzWlR0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaWE52YkhabFVHOXpjMmxpYkdWR2RXNWpkR2x2YmloMGFYUnNaU2s3WEc0Z0lIMWNibHh1SUNCMWNHUmhkR1ZCZEhSaFkyaHRaVzUwS0dGMGRHRmphRzFsYm5RcElIdGNiaUFnSUNCcFppQW9ZWFIwWVdOb2JXVnVkQ0E5UFQwZ0ozSnBaMmgwSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNkbGJtUW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hoZEhSaFkyaHRaVzUwSUQwOVBTQW5iR1ZtZENjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmMzUmhjblFuTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQmhkSFJoWTJodFpXNTBPMXh1SUNCOUlDOHZJRkJ5YVhaaGRHVmNibHh1WEc0Z0lGOXBibWwwYVdGc2FYcGxUMjVFWld4bFoyRjBaV1JVWVhKblpYUW9aWFpsYm5Rc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCeVpYUjFjbTRnWTI5dWRHVjRkQ0I4ZkNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG1kbGRFOXlRM0psWVhSbFNXNXpkR0Z1WTJVb1pYWmxiblF1WkdWc1pXZGhkR1ZVWVhKblpYUXNJSFJvYVhNdVgyZGxkRVJsYkdWbllYUmxRMjl1Wm1sbktDa3BPMXh1SUNCOVhHNWNiaUFnWDJkbGRFOW1abk5sZENncElIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0J2Wm1aelpYUmNiaUFnSUNCOUlEMGdkR2hwY3k1ZlkyOXVabWxuTzF4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlptWnpaWFFnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2IyWm1jMlYwTG5Od2JHbDBLQ2NzSnlrdWJXRndLSFpoYkNBOVBpQk9kVzFpWlhJdWNHRnljMlZKYm5Rb2RtRnNMQ0F4TUNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IyWm1jMlYwSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjRzl3Y0dWeVJHRjBZU0E5UGlCdlptWnpaWFFvY0c5d2NHVnlSR0YwWVN3Z2RHaHBjeTVmWld4bGJXVnVkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHOW1abk5sZER0Y2JpQWdmVnh1WEc0Z0lGOXlaWE52YkhabFVHOXpjMmxpYkdWR2RXNWpkR2x2YmloamIyNTBaVzUwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQmpiMjUwWlc1MElEMDlQU0FuWm5WdVkzUnBiMjRuSUQ4Z1kyOXVkR1Z1ZEM1allXeHNLSFJvYVhNdVgyVnNaVzFsYm5RcElEb2dZMjl1ZEdWdWREdGNiaUFnZlZ4dVhHNGdJRjluWlhSUWIzQndaWEpEYjI1bWFXY29ZWFIwWVdOb2JXVnVkQ2tnZTF4dUlDQWdJR052Ym5OMElHUmxabUYxYkhSQ2MxQnZjSEJsY2tOdmJtWnBaeUE5SUh0Y2JpQWdJQ0FnSUhCc1lXTmxiV1Z1ZERvZ1lYUjBZV05vYldWdWRDeGNiaUFnSUNBZ0lHMXZaR2xtYVdWeWN6b2dXM3RjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dKMlpzYVhBbkxGeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQjdYRzRnSUNBZ0lDQWdJQ0FnWm1Gc2JHSmhZMnRRYkdGalpXMWxiblJ6T2lCMGFHbHpMbDlqYjI1bWFXY3VabUZzYkdKaFkydFFiR0ZqWlcxbGJuUnpYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzSUh0Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nSjI5bVpuTmxkQ2NzWEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQnZabVp6WlhRNklIUm9hWE11WDJkbGRFOW1abk5sZENncFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNJSHRjYmlBZ0lDQWdJQ0FnYm1GdFpUb2dKM0J5WlhabGJuUlBkbVZ5Wm14dmR5Y3NYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSHRjYmlBZ0lDQWdJQ0FnSUNCaWIzVnVaR0Z5ZVRvZ2RHaHBjeTVmWTI5dVptbG5MbUp2ZFc1a1lYSjVYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzSUh0Y2JpQWdJQ0FnSUNBZ2JtRnRaVG9nSjJGeWNtOTNKeXhjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjem9nZTF4dUlDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RNklHQXVKSHQwYUdsekxtTnZibk4wY25WamRHOXlMazVCVFVWOUxXRnljbTkzWUZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUxDQjdYRzRnSUNBZ0lDQWdJRzVoYldVNklDZHZia05vWVc1blpTY3NYRzRnSUNBZ0lDQWdJR1Z1WVdKc1pXUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIQm9ZWE5sT2lBbllXWjBaWEpYY21sMFpTY3NYRzRnSUNBZ0lDQWdJR1p1T2lCa1lYUmhJRDArSUhSb2FYTXVYMmhoYm1Sc1pWQnZjSEJsY2xCc1lXTmxiV1Z1ZEVOb1lXNW5aU2hrWVhSaEtWeHVJQ0FnSUNBZ2ZWMHNYRzRnSUNBZ0lDQnZia1pwY25OMFZYQmtZWFJsT2lCa1lYUmhJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWIzQjBhVzl1Y3k1d2JHRmpaVzFsYm5RZ0lUMDlJR1JoZEdFdWNHeGhZMlZ0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bFVHOXdjR1Z5VUd4aFkyVnRaVzUwUTJoaGJtZGxLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCeVpYUjFjbTRnZXlBdUxpNWtaV1poZFd4MFFuTlFiM0J3WlhKRGIyNW1hV2NzWEc0Z0lDQWdJQ0F1TGk0b2RIbHdaVzltSUhSb2FYTXVYMk52Ym1acFp5NXdiM0J3WlhKRGIyNW1hV2NnUFQwOUlDZG1kVzVqZEdsdmJpY2dQeUIwYUdsekxsOWpiMjVtYVdjdWNHOXdjR1Z5UTI5dVptbG5LR1JsWm1GMWJIUkNjMUJ2Y0hCbGNrTnZibVpwWnlrZ09pQjBhR2x6TGw5amIyNW1hV2N1Y0c5d2NHVnlRMjl1Wm1sbktWeHVJQ0FnSUgwN1hHNGdJSDFjYmx4dUlDQmZZV1JrUVhSMFlXTm9iV1Z1ZEVOc1lYTnpLR0YwZEdGamFHMWxiblFwSUh0Y2JpQWdJQ0IwYUdsekxtZGxkRlJwY0VWc1pXMWxiblFvS1M1amJHRnpjMHhwYzNRdVlXUmtLR0FrZTNSb2FYTXVYMmRsZEVKaGMybGpRMnhoYzNOUWNtVm1hWGdvS1gwdEpIdDBhR2x6TG5Wd1pHRjBaVUYwZEdGamFHMWxiblFvWVhSMFlXTm9iV1Z1ZENsOVlDazdYRzRnSUgxY2JseHVJQ0JmWjJWMFFYUjBZV05vYldWdWRDaHdiR0ZqWlcxbGJuUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1FYUjBZV05vYldWdWRFMWhjRnR3YkdGalpXMWxiblF1ZEc5VmNIQmxja05oYzJVb0tWMDdYRzRnSUgxY2JseHVJQ0JmYzJWMFRHbHpkR1Z1WlhKektDa2dlMXh1SUNBZ0lHTnZibk4wSUhSeWFXZG5aWEp6SUQwZ2RHaHBjeTVmWTI5dVptbG5MblJ5YVdkblpYSXVjM0JzYVhRb0p5QW5LVHRjYmx4dUlDQWdJSFJ5YVdkblpYSnpMbVp2Y2tWaFkyZ29kSEpwWjJkbGNpQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RISnBaMmRsY2lBOVBUMGdKMk5zYVdOckp5a2dlMXh1SUNBZ0lDQWdJQ0JGZG1WdWRFaGhibVJzWlhJdWIyNG9kR2hwY3k1ZlpXeGxiV1Z1ZEN3Z2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RmRtVnVkQzVEVEVsRFN5d2dkR2hwY3k1ZlkyOXVabWxuTG5ObGJHVmpkRzl5TENCbGRtVnVkQ0E5UGlCMGFHbHpMblJ2WjJkc1pTaGxkbVZ1ZENrcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBjbWxuWjJWeUlDRTlQU0JVVWtsSFIwVlNYMDFCVGxWQlRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxkbVZ1ZEVsdUlEMGdkSEpwWjJkbGNpQTlQVDBnVkZKSlIwZEZVbDlJVDFaRlVpQS9JSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVSWFpsYm5RdVRVOVZVMFZGVGxSRlVpQTZJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVSWFpsYm5RdVJrOURWVk5KVGp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlhabGJuUlBkWFFnUFNCMGNtbG5aMlZ5SUQwOVBTQlVVa2xIUjBWU1gwaFBWa1ZTSUQ4Z2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RmRtVnVkQzVOVDFWVFJVeEZRVlpGSURvZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1RmRtVnVkQzVHVDBOVlUwOVZWRHRjYmlBZ0lDQWdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOXVLSFJvYVhNdVgyVnNaVzFsYm5Rc0lHVjJaVzUwU1c0c0lIUm9hWE11WDJOdmJtWnBaeTV6Wld4bFkzUnZjaXdnWlhabGJuUWdQVDRnZEdocGN5NWZaVzUwWlhJb1pYWmxiblFwS1R0Y2JpQWdJQ0FnSUNBZ1JYWmxiblJJWVc1a2JHVnlMbTl1S0hSb2FYTXVYMlZzWlcxbGJuUXNJR1YyWlc1MFQzVjBMQ0IwYUdsekxsOWpiMjVtYVdjdWMyVnNaV04wYjNJc0lHVjJaVzUwSUQwK0lIUm9hWE11WDJ4bFlYWmxLR1YyWlc1MEtTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQjBhR2x6TGw5b2FXUmxUVzlrWVd4SVlXNWtiR1Z5SUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDJWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVvYVdSbEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTV2YmloMGFHbHpMbDlsYkdWdFpXNTBMbU5zYjNObGMzUW9VMFZNUlVOVVQxSmZUVTlFUVV3cExDQkZWa1ZPVkY5TlQwUkJURjlJU1VSRkxDQjBhR2x6TGw5b2FXUmxUVzlrWVd4SVlXNWtiR1Z5S1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNW1hV2N1YzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMk52Ym1acFp5QTlJSHNnTGk0dWRHaHBjeTVmWTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0IwY21sbloyVnlPaUFuYldGdWRXRnNKeXhjYmlBZ0lDQWdJQ0FnYzJWc1pXTjBiM0k2SUNjblhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOW1hWGhVYVhSc1pTZ3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjltYVhoVWFYUnNaU2dwSUh0Y2JpQWdJQ0JqYjI1emRDQjBhWFJzWlNBOUlIUm9hWE11WDJWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtDZDBhWFJzWlNjcE8xeHVYRzRnSUNBZ1kyOXVjM1FnYjNKcFoybHVZV3hVYVhSc1pWUjVjR1VnUFNCMGVYQmxiMllnZEdocGN5NWZaV3hsYldWdWRDNW5aWFJCZEhSeWFXSjFkR1VvSjJSaGRHRXRZbk10YjNKcFoybHVZV3d0ZEdsMGJHVW5LVHRjYmx4dUlDQWdJR2xtSUNoMGFYUnNaU0I4ZkNCdmNtbG5hVzVoYkZScGRHeGxWSGx3WlNBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdWMyVjBRWFIwY21saWRYUmxLQ2RrWVhSaExXSnpMVzl5YVdkcGJtRnNMWFJwZEd4bEp5d2dkR2wwYkdVZ2ZId2dKeWNwTzF4dVhHNGdJQ0FnSUNCcFppQW9kR2wwYkdVZ0ppWWdJWFJvYVhNdVgyVnNaVzFsYm5RdVoyVjBRWFIwY21saWRYUmxLQ2RoY21saExXeGhZbVZzSnlrZ0ppWWdJWFJvYVhNdVgyVnNaVzFsYm5RdWRHVjRkRU52Ym5SbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNXpaWFJCZEhSeWFXSjFkR1VvSjJGeWFXRXRiR0ZpWld3bkxDQjBhWFJzWlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11WDJWc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtDZDBhWFJzWlNjc0lDY25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmWlc1MFpYSW9aWFpsYm5Rc0lHTnZiblJsZUhRcElIdGNiaUFnSUNCamIyNTBaWGgwSUQwZ2RHaHBjeTVmYVc1cGRHbGhiR2w2WlU5dVJHVnNaV2RoZEdWa1ZHRnlaMlYwS0dWMlpXNTBMQ0JqYjI1MFpYaDBLVHRjYmx4dUlDQWdJR2xtSUNobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnWTI5dWRHVjRkQzVmWVdOMGFYWmxWSEpwWjJkbGNsdGxkbVZ1ZEM1MGVYQmxJRDA5UFNBblptOWpkWE5wYmljZ1B5QlVVa2xIUjBWU1gwWlBRMVZUSURvZ1ZGSkpSMGRGVWw5SVQxWkZVbDBnUFNCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hqYjI1MFpYaDBMbWRsZEZScGNFVnNaVzFsYm5Rb0tTNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9RMHhCVTFOZlRrRk5SVjlUU0U5WEpESXBJSHg4SUdOdmJuUmxlSFF1WDJodmRtVnlVM1JoZEdVZ1BUMDlJRWhQVmtWU1gxTlVRVlJGWDFOSVQxY3BJSHRjYmlBZ0lDQWdJR052Ym5SbGVIUXVYMmh2ZG1WeVUzUmhkR1VnUFNCSVQxWkZVbDlUVkVGVVJWOVRTRTlYTzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2hqYjI1MFpYaDBMbDkwYVcxbGIzVjBLVHRjYmlBZ0lDQmpiMjUwWlhoMExsOW9iM1psY2xOMFlYUmxJRDBnU0U5V1JWSmZVMVJCVkVWZlUwaFBWenRjYmx4dUlDQWdJR2xtSUNnaFkyOXVkR1Y0ZEM1ZlkyOXVabWxuTG1SbGJHRjVJSHg4SUNGamIyNTBaWGgwTGw5amIyNW1hV2N1WkdWc1lYa3VjMmh2ZHlrZ2UxeHVJQ0FnSUNBZ1kyOXVkR1Y0ZEM1emFHOTNLQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVkR1Y0ZEM1ZmRHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUXVYMmh2ZG1WeVUzUmhkR1VnUFQwOUlFaFBWa1ZTWDFOVVFWUkZYMU5JVDFjcElIdGNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRDNXphRzkzS0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN3Z1kyOXVkR1Y0ZEM1ZlkyOXVabWxuTG1SbGJHRjVMbk5vYjNjcE8xeHVJQ0I5WEc1Y2JpQWdYMnhsWVhabEtHVjJaVzUwTENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnWTI5dWRHVjRkQ0E5SUhSb2FYTXVYMmx1YVhScFlXeHBlbVZQYmtSbGJHVm5ZWFJsWkZSaGNtZGxkQ2hsZG1WdWRDd2dZMjl1ZEdWNGRDazdYRzVjYmlBZ0lDQnBaaUFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJR052Ym5SbGVIUXVYMkZqZEdsMlpWUnlhV2RuWlhKYlpYWmxiblF1ZEhsd1pTQTlQVDBnSjJadlkzVnpiM1YwSnlBL0lGUlNTVWRIUlZKZlJrOURWVk1nT2lCVVVrbEhSMFZTWDBoUFZrVlNYU0E5SUdOdmJuUmxlSFF1WDJWc1pXMWxiblF1WTI5dWRHRnBibk1vWlhabGJuUXVjbVZzWVhSbFpGUmhjbWRsZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHTnZiblJsZUhRdVgybHpWMmwwYUVGamRHbDJaVlJ5YVdkblpYSW9LU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2hqYjI1MFpYaDBMbDkwYVcxbGIzVjBLVHRjYmlBZ0lDQmpiMjUwWlhoMExsOW9iM1psY2xOMFlYUmxJRDBnU0U5V1JWSmZVMVJCVkVWZlQxVlVPMXh1WEc0Z0lDQWdhV1lnS0NGamIyNTBaWGgwTGw5amIyNW1hV2N1WkdWc1lYa2dmSHdnSVdOdmJuUmxlSFF1WDJOdmJtWnBaeTVrWld4aGVTNW9hV1JsS1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwTG1ocFpHVW9LVHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNTBaWGgwTGw5MGFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9ZMjl1ZEdWNGRDNWZhRzkyWlhKVGRHRjBaU0E5UFQwZ1NFOVdSVkpmVTFSQlZFVmZUMVZVS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdWFHbGtaU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzSUdOdmJuUmxlSFF1WDJOdmJtWnBaeTVrWld4aGVTNW9hV1JsS1R0Y2JpQWdmVnh1WEc0Z0lGOXBjMWRwZEdoQlkzUnBkbVZVY21sbloyVnlLQ2tnZTF4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnZEhKcFoyZGxjaUJwYmlCMGFHbHpMbDloWTNScGRtVlVjbWxuWjJWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZZV04wYVhabFZISnBaMmRsY2x0MGNtbG5aMlZ5WFNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCZloyVjBRMjl1Wm1sbktHTnZibVpwWnlrZ2UxeHVJQ0FnSUdOdmJuTjBJR1JoZEdGQmRIUnlhV0oxZEdWeklEMGdUV0Z1YVhCMWJHRjBiM0l1WjJWMFJHRjBZVUYwZEhKcFluVjBaWE1vZEdocGN5NWZaV3hsYldWdWRDazdYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9aR0YwWVVGMGRISnBZblYwWlhNcExtWnZja1ZoWTJnb1pHRjBZVUYwZEhJZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0VSSlUwRk1URTlYUlVSZlFWUlVVa2xDVlZSRlV5NW9ZWE1vWkdGMFlVRjBkSElwS1NCN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCa1lYUmhRWFIwY21saWRYUmxjMXRrWVhSaFFYUjBjbDA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdZMjl1Wm1sbklEMGdleUF1TGk1MGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtSbFptRjFiSFFzWEc0Z0lDQWdJQ0F1TGk1a1lYUmhRWFIwY21saWRYUmxjeXhjYmlBZ0lDQWdJQzR1TGloMGVYQmxiMllnWTI5dVptbG5JRDA5UFNBbmIySnFaV04wSnlBbUppQmpiMjVtYVdjZ1B5QmpiMjVtYVdjZ09pQjdmU2xjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibVpwWnk1amIyNTBZV2x1WlhJZ1BTQmpiMjVtYVdjdVkyOXVkR0ZwYm1WeUlEMDlQU0JtWVd4elpTQS9JR1J2WTNWdFpXNTBMbUp2WkhrZ09pQm5aWFJGYkdWdFpXNTBLR052Ym1acFp5NWpiMjUwWVdsdVpYSXBPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1bWFXY3VaR1ZzWVhrZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0JqYjI1bWFXY3VaR1ZzWVhrZ1BTQjdYRzRnSUNBZ0lDQWdJSE5vYjNjNklHTnZibVpwWnk1a1pXeGhlU3hjYmlBZ0lDQWdJQ0FnYUdsa1pUb2dZMjl1Wm1sbkxtUmxiR0Y1WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnWTI5dVptbG5MblJwZEd4bElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnWTI5dVptbG5MblJwZEd4bElEMGdZMjl1Wm1sbkxuUnBkR3hsTG5SdlUzUnlhVzVuS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2N1WTI5dWRHVnVkQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lHTnZibVpwWnk1amIyNTBaVzUwSUQwZ1kyOXVabWxuTG1OdmJuUmxiblF1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwZVhCbFEyaGxZMnREYjI1bWFXY29Ua0ZOUlNRMExDQmpiMjVtYVdjc0lIUm9hWE11WTI5dWMzUnlkV04wYjNJdVJHVm1ZWFZzZEZSNWNHVXBPMXh1WEc0Z0lDQWdhV1lnS0dOdmJtWnBaeTV6WVc1cGRHbDZaU2tnZTF4dUlDQWdJQ0FnWTI5dVptbG5MblJsYlhCc1lYUmxJRDBnYzJGdWFYUnBlbVZJZEcxc0tHTnZibVpwWnk1MFpXMXdiR0YwWlN3Z1kyOXVabWxuTG1Gc2JHOTNUR2x6ZEN3Z1kyOXVabWxuTG5OaGJtbDBhWHBsUm00cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJqYjI1bWFXYzdYRzRnSUgxY2JseHVJQ0JmWjJWMFJHVnNaV2RoZEdWRGIyNW1hV2NvS1NCN1hHNGdJQ0FnWTI5dWMzUWdZMjl1Wm1sbklEMGdlMzA3WEc1Y2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUIwYUdsekxsOWpiMjVtYVdjcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibk4wY25WamRHOXlMa1JsWm1GMWJIUmJhMlY1WFNBaFBUMGdkR2hwY3k1ZlkyOXVabWxuVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnWTI5dVptbG5XMnRsZVYwZ1BTQjBhR2x6TGw5amIyNW1hV2RiYTJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlDOHZJRWx1SUhSb1pTQm1kWFIxY21VZ1kyRnVJR0psSUhKbGNHeGhZMlZrSUhkcGRHZzZYRzRnSUNBZ0x5OGdZMjl1YzNRZ2EyVjVjMWRwZEdoRWFXWm1aWEpsYm5SV1lXeDFaWE1nUFNCUFltcGxZM1F1Wlc1MGNtbGxjeWgwYUdsekxsOWpiMjVtYVdjcExtWnBiSFJsY2lobGJuUnllU0E5UGlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtSbFptRjFiSFJiWlc1MGNubGJNRjFkSUNFOVBTQjBhR2x6TGw5amIyNW1hV2RiWlc1MGNubGJNRjFkS1Z4dUlDQWdJQzh2SUdCUFltcGxZM1F1Wm5KdmJVVnVkSEpwWlhNb2EyVjVjMWRwZEdoRWFXWm1aWEpsYm5SV1lXeDFaWE1wWUZ4dVhHNWNiaUFnSUNCeVpYUjFjbTRnWTI5dVptbG5PMXh1SUNCOVhHNWNiaUFnWDJOc1pXRnVWR2x3UTJ4aGMzTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2RHbHdJRDBnZEdocGN5NW5aWFJVYVhCRmJHVnRaVzUwS0NrN1hHNGdJQ0FnWTI5dWMzUWdZbUZ6YVdORGJHRnpjMUJ5WldacGVGSmxaMlY0SUQwZ2JtVjNJRkpsWjBWNGNDaGdLRjU4WEZ4Y1hITXBKSHQwYUdsekxsOW5aWFJDWVhOcFkwTnNZWE56VUhKbFptbDRLQ2w5WEZ4Y1hGTXJZQ3dnSjJjbktUdGNiaUFnSUNCamIyNXpkQ0IwWVdKRGJHRnpjeUE5SUhScGNDNW5aWFJCZEhSeWFXSjFkR1VvSjJOc1lYTnpKeWt1YldGMFkyZ29ZbUZ6YVdORGJHRnpjMUJ5WldacGVGSmxaMlY0S1R0Y2JseHVJQ0FnSUdsbUlDaDBZV0pEYkdGemN5QWhQVDBnYm5Wc2JDQW1KaUIwWVdKRGJHRnpjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCMFlXSkRiR0Z6Y3k1dFlYQW9kRzlyWlc0Z1BUNGdkRzlyWlc0dWRISnBiU2dwS1M1bWIzSkZZV05vS0hSRGJHRnpjeUE5UGlCMGFYQXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaDBRMnhoYzNNcEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZaMlYwUW1GemFXTkRiR0Z6YzFCeVpXWnBlQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdRMHhCVTFOZlVGSkZSa2xZSkRFN1hHNGdJSDFjYmx4dUlDQmZhR0Z1Wkd4bFVHOXdjR1Z5VUd4aFkyVnRaVzUwUTJoaGJtZGxLSEJ2Y0hCbGNrUmhkR0VwSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQnpkR0YwWlZ4dUlDQWdJSDBnUFNCd2IzQndaWEpFWVhSaE8xeHVYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVkR2x3SUQwZ2MzUmhkR1V1Wld4bGJXVnVkSE11Y0c5d2NHVnlPMXh1WEc0Z0lDQWdkR2hwY3k1ZlkyeGxZVzVVYVhCRGJHRnpjeWdwTzF4dVhHNGdJQ0FnZEdocGN5NWZZV1JrUVhSMFlXTm9iV1Z1ZEVOc1lYTnpLSFJvYVhNdVgyZGxkRUYwZEdGamFHMWxiblFvYzNSaGRHVXVjR3hoWTJWdFpXNTBLU2s3WEc0Z0lIMWNibHh1SUNCZlpHbHpjRzl6WlZCdmNIQmxjaWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmY0c5d2NHVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXdiM0J3WlhJdVpHVnpkSEp2ZVNncE8xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5d2IzQndaWElnUFNCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnZlNBdkx5QlRkR0YwYVdOY2JseHVYRzRnSUhOMFlYUnBZeUJxVVhWbGNubEpiblJsY21aaFkyVW9ZMjl1Wm1sbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV0ZqYUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCa1lYUmhJRDBnVkc5dmJIUnBjQzVuWlhSUGNrTnlaV0YwWlVsdWMzUmhibU5sS0hSb2FYTXNJR052Ym1acFp5azdYRzVjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTI5dVptbG5JRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdGYlkyOXVabWxuWFNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JPYnlCdFpYUm9iMlFnYm1GdFpXUWdYQ0lrZTJOdmJtWnBaMzFjSW1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWkdGMFlWdGpiMjVtYVdkZEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVmVnh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlHcFJkV1Z5ZVZ4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2lCaFpHUWdMbFJ2YjJ4MGFYQWdkRzhnYWxGMVpYSjVJRzl1YkhrZ2FXWWdhbEYxWlhKNUlHbHpJSEJ5WlhObGJuUmNiaUFxTDF4dVhHNWNibVJsWm1sdVpVcFJkV1Z5ZVZCc2RXZHBiaWhVYjI5c2RHbHdLVHRjYmx4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUW05dmRITjBjbUZ3SUNoMk5TNHhMak1wT2lCd2IzQnZkbVZ5TG1welhHNGdLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQk5TVlFnS0doMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGQySnpMMkp2YjNSemRISmhjQzlpYkc5aUwyMWhhVzR2VEVsRFJVNVRSU2xjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJEYjI1emRHRnVkSE5jYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JtTnZibk4wSUU1QlRVVWtNeUE5SUNkd2IzQnZkbVZ5Snp0Y2JtTnZibk4wSUVSQlZFRmZTMFZaSkRNZ1BTQW5Zbk11Y0c5d2IzWmxjaWM3WEc1amIyNXpkQ0JGVmtWT1ZGOUxSVmtrTXlBOUlHQXVKSHRFUVZSQlgwdEZXU1F6ZldBN1hHNWpiMjV6ZENCRFRFRlRVMTlRVWtWR1NWZ2dQU0FuWW5NdGNHOXdiM1psY2ljN1hHNWpiMjV6ZENCRVpXWmhkV3gwSkRJZ1BTQjdJQzR1TGxSdmIyeDBhWEF1UkdWbVlYVnNkQ3hjYmlBZ2NHeGhZMlZ0Wlc1ME9pQW5jbWxuYUhRbkxGeHVJQ0J2Wm1aelpYUTZJRnN3TENBNFhTeGNiaUFnZEhKcFoyZGxjam9nSjJOc2FXTnJKeXhjYmlBZ1kyOXVkR1Z1ZERvZ0p5Y3NYRzRnSUhSbGJYQnNZWFJsT2lBblBHUnBkaUJqYkdGemN6MWNJbkJ2Y0c5MlpYSmNJaUJ5YjJ4bFBWd2lkRzl2YkhScGNGd2lQaWNnS3lBblBHUnBkaUJqYkdGemN6MWNJbkJ2Y0c5MlpYSXRZWEp5YjNkY0lqNDhMMlJwZGo0bklDc2dKenhvTXlCamJHRnpjejFjSW5CdmNHOTJaWEl0YUdWaFpHVnlYQ0krUEM5b016NG5JQ3NnSnp4a2FYWWdZMnhoYzNNOVhDSndiM0J2ZG1WeUxXSnZaSGxjSWo0OEwyUnBkajRuSUNzZ0p6d3ZaR2wyUGlkY2JuMDdYRzVqYjI1emRDQkVaV1poZFd4MFZIbHdaU1F5SUQwZ2V5QXVMaTVVYjI5c2RHbHdMa1JsWm1GMWJIUlVlWEJsTEZ4dUlDQmpiMjUwWlc1ME9pQW5LSE4wY21sdVozeGxiR1Z0Wlc1MGZHWjFibU4wYVc5dUtTZGNibjA3WEc1amIyNXpkQ0JGZG1WdWRDUXhJRDBnZTF4dUlDQklTVVJGT2lCZ2FHbGtaU1I3UlZaRlRsUmZTMFZaSkROOVlDeGNiaUFnU0VsRVJFVk9PaUJnYUdsa1pHVnVKSHRGVmtWT1ZGOUxSVmtrTTMxZ0xGeHVJQ0JUU0U5WE9pQmdjMmh2ZHlSN1JWWkZUbFJmUzBWWkpETjlZQ3hjYmlBZ1UwaFBWMDQ2SUdCemFHOTNiaVI3UlZaRlRsUmZTMFZaSkROOVlDeGNiaUFnU1U1VFJWSlVSVVE2SUdCcGJuTmxjblJsWkNSN1JWWkZUbFJmUzBWWkpETjlZQ3hjYmlBZ1EweEpRMHM2SUdCamJHbGpheVI3UlZaRlRsUmZTMFZaSkROOVlDeGNiaUFnUms5RFZWTkpUam9nWUdadlkzVnphVzRrZTBWV1JVNVVYMHRGV1NRemZXQXNYRzRnSUVaUFExVlRUMVZVT2lCZ1ptOWpkWE52ZFhRa2UwVldSVTVVWDB0RldTUXpmV0FzWEc0Z0lFMVBWVk5GUlU1VVJWSTZJR0J0YjNWelpXVnVkR1Z5Skh0RlZrVk9WRjlMUlZra00zMWdMRnh1SUNCTlQxVlRSVXhGUVZaRk9pQmdiVzkxYzJWc1pXRjJaU1I3UlZaRlRsUmZTMFZaSkROOVlGeHVmVHRjYm1OdmJuTjBJRk5GVEVWRFZFOVNYMVJKVkV4RklEMGdKeTV3YjNCdmRtVnlMV2hsWVdSbGNpYzdYRzVqYjI1emRDQlRSVXhGUTFSUFVsOURUMDVVUlU1VUlEMGdKeTV3YjNCdmRtVnlMV0p2Wkhrbk8xeHVMeW9xWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxSUVOc1lYTnpJRVJsWm1sdWFYUnBiMjVjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ292WEc1Y2JtTnNZWE56SUZCdmNHOTJaWElnWlhoMFpXNWtjeUJVYjI5c2RHbHdJSHRjYmlBZ0x5OGdSMlYwZEdWeWMxeHVJQ0J6ZEdGMGFXTWdaMlYwSUVSbFptRjFiSFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRVJsWm1GMWJIUWtNanRjYmlBZ2ZWeHVYRzRnSUhOMFlYUnBZeUJuWlhRZ1RrRk5SU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdUa0ZOUlNRek8xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkQ0JGZG1WdWRDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1JYWmxiblFrTVR0Y2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCblpYUWdSR1ZtWVhWc2RGUjVjR1VvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRVJsWm1GMWJIUlVlWEJsSkRJN1hHNGdJSDBnTHk4Z1QzWmxjbkpwWkdWelhHNWNibHh1SUNCcGMxZHBkR2hEYjI1MFpXNTBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGUnBkR3hsS0NrZ2ZId2dkR2hwY3k1ZloyVjBRMjl1ZEdWdWRDZ3BPMXh1SUNCOVhHNWNiaUFnYzJWMFEyOXVkR1Z1ZENoMGFYQXBJSHRjYmlBZ0lDQjBhR2x6TGw5ellXNXBkR2w2WlVGdVpGTmxkRU52Ym5SbGJuUW9kR2x3TENCMGFHbHpMbWRsZEZScGRHeGxLQ2tzSUZORlRFVkRWRTlTWDFSSlZFeEZLVHRjYmx4dUlDQWdJSFJvYVhNdVgzTmhibWwwYVhwbFFXNWtVMlYwUTI5dWRHVnVkQ2gwYVhBc0lIUm9hWE11WDJkbGRFTnZiblJsYm5Rb0tTd2dVMFZNUlVOVVQxSmZRMDlPVkVWT1ZDazdYRzRnSUgwZ0x5OGdVSEpwZG1GMFpWeHVYRzVjYmlBZ1gyZGxkRU52Ym5SbGJuUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGMyOXNkbVZRYjNOemFXSnNaVVoxYm1OMGFXOXVLSFJvYVhNdVgyTnZibVpwWnk1amIyNTBaVzUwS1R0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJDWVhOcFkwTnNZWE56VUhKbFptbDRLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQkRURUZUVTE5UVVrVkdTVmc3WEc0Z0lIMGdMeThnVTNSaGRHbGpYRzVjYmx4dUlDQnpkR0YwYVdNZ2FsRjFaWEo1U1c1MFpYSm1ZV05sS0dOdmJtWnBaeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1WaFkyZ29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlGQnZjRzkyWlhJdVoyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaDBhR2x6TENCamIyNW1hV2NwTzF4dVhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhXMk52Ym1acFoxMGdQVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1RtOGdiV1YwYUc5a0lHNWhiV1ZrSUZ3aUpIdGpiMjVtYVdkOVhDSmdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiWTI5dVptbG5YU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYm4xY2JpOHFLbHh1SUNvZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJxVVhWbGNubGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dZV1JrSUM1UWIzQnZkbVZ5SUhSdklHcFJkV1Z5ZVNCdmJteDVJR2xtSUdwUmRXVnllU0JwY3lCd2NtVnpaVzUwWEc0Z0tpOWNibHh1WEc1a1pXWnBibVZLVVhWbGNubFFiSFZuYVc0b1VHOXdiM1psY2lrN1hHNWNiaThxS2x4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlFSnZiM1J6ZEhKaGNDQW9kalV1TVM0ektUb2djMk55YjJ4c2MzQjVMbXB6WEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCTlNWUWdLR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwZDJKekwySnZiM1J6ZEhKaGNDOWliRzlpTDIxaGFXNHZURWxEUlU1VFJTbGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkRiMjV6ZEdGdWRITmNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYm1OdmJuTjBJRTVCVFVVa01pQTlJQ2R6WTNKdmJHeHpjSGtuTzF4dVkyOXVjM1FnUkVGVVFWOUxSVmtrTWlBOUlDZGljeTV6WTNKdmJHeHpjSGtuTzF4dVkyOXVjM1FnUlZaRlRsUmZTMFZaSkRJZ1BTQmdMaVI3UkVGVVFWOUxSVmtrTW4xZ08xeHVZMjl1YzNRZ1JFRlVRVjlCVUVsZlMwVlpKREVnUFNBbkxtUmhkR0V0WVhCcEp6dGNibU52Ym5OMElFUmxabUYxYkhRa01TQTlJSHRjYmlBZ2IyWm1jMlYwT2lBeE1DeGNiaUFnYldWMGFHOWtPaUFuWVhWMGJ5Y3NYRzRnSUhSaGNtZGxkRG9nSnlkY2JuMDdYRzVqYjI1emRDQkVaV1poZFd4MFZIbHdaU1F4SUQwZ2UxeHVJQ0J2Wm1aelpYUTZJQ2R1ZFcxaVpYSW5MRnh1SUNCdFpYUm9iMlE2SUNkemRISnBibWNuTEZ4dUlDQjBZWEpuWlhRNklDY29jM1J5YVc1bmZHVnNaVzFsYm5RcEoxeHVmVHRjYm1OdmJuTjBJRVZXUlU1VVgwRkRWRWxXUVZSRklEMGdZR0ZqZEdsMllYUmxKSHRGVmtWT1ZGOUxSVmtrTW4xZ08xeHVZMjl1YzNRZ1JWWkZUbFJmVTBOU1QweE1JRDBnWUhOamNtOXNiQ1I3UlZaRlRsUmZTMFZaSkRKOVlEdGNibU52Ym5OMElFVldSVTVVWDB4UFFVUmZSRUZVUVY5QlVFa2dQU0JnYkc5aFpDUjdSVlpGVGxSZlMwVlpKREo5Skh0RVFWUkJYMEZRU1Y5TFJWa2tNWDFnTzF4dVkyOXVjM1FnUTB4QlUxTmZUa0ZOUlY5RVVrOVFSRTlYVGw5SlZFVk5JRDBnSjJSeWIzQmtiM2R1TFdsMFpXMG5PMXh1WTI5dWMzUWdRMHhCVTFOZlRrRk5SVjlCUTFSSlZrVWtNU0E5SUNkaFkzUnBkbVVuTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmUkVGVVFWOVRVRmtnUFNBblcyUmhkR0V0WW5NdGMzQjVQVndpYzJOeWIyeHNYQ0pkSnp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDA1QlZsOU1TVk5VWDBkU1QxVlFKREVnUFNBbkxtNWhkaXdnTG14cGMzUXRaM0p2ZFhBbk8xeHVZMjl1YzNRZ1UwVk1SVU5VVDFKZlRrRldYMHhKVGt0VElEMGdKeTV1WVhZdGJHbHVheWM3WEc1amIyNXpkQ0JUUlV4RlExUlBVbDlPUVZaZlNWUkZUVk1nUFNBbkxtNWhkaTFwZEdWdEp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gweEpVMVJmU1ZSRlRWTWdQU0FuTG14cGMzUXRaM0p2ZFhBdGFYUmxiU2M3WEc1amIyNXpkQ0JUUlV4RlExUlBVbDlNU1U1TFgwbFVSVTFUSUQwZ1lDUjdVMFZNUlVOVVQxSmZUa0ZXWDB4SlRrdFRmU3dnSkh0VFJVeEZRMVJQVWw5TVNWTlVYMGxVUlUxVGZTd2dMaVI3UTB4QlUxTmZUa0ZOUlY5RVVrOVFSRTlYVGw5SlZFVk5mV0E3WEc1amIyNXpkQ0JUUlV4RlExUlBVbDlFVWs5UVJFOVhUaVF4SUQwZ0p5NWtjbTl3Wkc5M2JpYzdYRzVqYjI1emRDQlRSVXhGUTFSUFVsOUVVazlRUkU5WFRsOVVUMGRIVEVVa01TQTlJQ2N1WkhKdmNHUnZkMjR0ZEc5bloyeGxKenRjYm1OdmJuTjBJRTFGVkVoUFJGOVBSa1pUUlZRZ1BTQW5iMlptYzJWMEp6dGNibU52Ym5OMElFMUZWRWhQUkY5UVQxTkpWRWxQVGlBOUlDZHdiM05wZEdsdmJpYzdYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvZ1EyeGhjM01nUkdWbWFXNXBkR2x2Ymx4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2k5Y2JseHVZMnhoYzNNZ1UyTnliMnhzVTNCNUlHVjRkR1Z1WkhNZ1FtRnpaVU52YlhCdmJtVnVkQ0I3WEc0Z0lHTnZibk4wY25WamRHOXlLR1ZzWlcxbGJuUXNJR052Ym1acFp5a2dlMXh1SUNBZ0lITjFjR1Z5S0dWc1pXMWxiblFwTzF4dUlDQWdJSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblFnUFNCMGFHbHpMbDlsYkdWdFpXNTBMblJoWjA1aGJXVWdQVDA5SUNkQ1QwUlpKeUEvSUhkcGJtUnZkeUE2SUhSb2FYTXVYMlZzWlcxbGJuUTdYRzRnSUNBZ2RHaHBjeTVmWTI5dVptbG5JRDBnZEdocGN5NWZaMlYwUTI5dVptbG5LR052Ym1acFp5azdYRzRnSUNBZ2RHaHBjeTVmYjJabWMyVjBjeUE5SUZ0ZE8xeHVJQ0FnSUhSb2FYTXVYM1JoY21kbGRITWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxsOWhZM1JwZG1WVVlYSm5aWFFnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDNOamNtOXNiRWhsYVdkb2RDQTlJREE3WEc0Z0lDQWdSWFpsYm5SSVlXNWtiR1Z5TG05dUtIUm9hWE11WDNOamNtOXNiRVZzWlcxbGJuUXNJRVZXUlU1VVgxTkRVazlNVEN3Z0tDa2dQVDRnZEdocGN5NWZjSEp2WTJWemN5Z3BLVHRjYmlBZ0lDQjBhR2x6TG5KbFpuSmxjMmdvS1R0Y2JseHVJQ0FnSUhSb2FYTXVYM0J5YjJObGMzTW9LVHRjYmlBZ2ZTQXZMeUJIWlhSMFpYSnpYRzVjYmx4dUlDQnpkR0YwYVdNZ1oyVjBJRVJsWm1GMWJIUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlFUmxabUYxYkhRa01UdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnVGtGTlJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1RrRk5SU1F5TzF4dUlDQjlJQzh2SUZCMVlteHBZMXh1WEc1Y2JpQWdjbVZtY21WemFDZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCaGRYUnZUV1YwYUc5a0lEMGdkR2hwY3k1ZmMyTnliMnhzUld4bGJXVnVkQ0E5UFQwZ2RHaHBjeTVmYzJOeWIyeHNSV3hsYldWdWRDNTNhVzVrYjNjZ1B5Qk5SVlJJVDBSZlQwWkdVMFZVSURvZ1RVVlVTRTlFWDFCUFUwbFVTVTlPTzF4dUlDQWdJR052Ym5OMElHOW1abk5sZEUxbGRHaHZaQ0E5SUhSb2FYTXVYMk52Ym1acFp5NXRaWFJvYjJRZ1BUMDlJQ2RoZFhSdkp5QS9JR0YxZEc5TlpYUm9iMlFnT2lCMGFHbHpMbDlqYjI1bWFXY3ViV1YwYUc5a08xeHVJQ0FnSUdOdmJuTjBJRzltWm5ObGRFSmhjMlVnUFNCdlptWnpaWFJOWlhSb2IyUWdQVDA5SUUxRlZFaFBSRjlRVDFOSlZFbFBUaUEvSUhSb2FYTXVYMmRsZEZOamNtOXNiRlJ2Y0NncElEb2dNRHRjYmlBZ0lDQjBhR2x6TGw5dlptWnpaWFJ6SUQwZ1cxMDdYRzRnSUNBZ2RHaHBjeTVmZEdGeVoyVjBjeUE5SUZ0ZE8xeHVJQ0FnSUhSb2FYTXVYM05qY205c2JFaGxhV2RvZENBOUlIUm9hWE11WDJkbGRGTmpjbTlzYkVobGFXZG9kQ2dwTzF4dUlDQWdJR052Ym5OMElIUmhjbWRsZEhNZ1BTQlRaV3hsWTNSdmNrVnVaMmx1WlM1bWFXNWtLRk5GVEVWRFZFOVNYMHhKVGt0ZlNWUkZUVk1zSUhSb2FYTXVYMk52Ym1acFp5NTBZWEpuWlhRcE8xeHVJQ0FnSUhSaGNtZGxkSE11YldGd0tHVnNaVzFsYm5RZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RHRnlaMlYwVTJWc1pXTjBiM0lnUFNCblpYUlRaV3hsWTNSdmNrWnliMjFGYkdWdFpXNTBLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2RHRnlaMlYwSUQwZ2RHRnlaMlYwVTJWc1pXTjBiM0lnUHlCVFpXeGxZM1J2Y2tWdVoybHVaUzVtYVc1a1QyNWxLSFJoY21kbGRGTmxiR1ZqZEc5eUtTQTZJRzUxYkd3N1hHNWNiaUFnSUNBZ0lHbG1JQ2gwWVhKblpYUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR0Z5WjJWMFFrTlNJRDBnZEdGeVoyVjBMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFJDUTFJdWQybGtkR2dnZkh3Z2RHRnlaMlYwUWtOU0xtaGxhV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJUV0Z1YVhCMWJHRjBiM0piYjJabWMyVjBUV1YwYUc5a1hTaDBZWEpuWlhRcExuUnZjQ0FySUc5bVpuTmxkRUpoYzJVc0lIUmhjbWRsZEZObGJHVmpkRzl5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlLUzVtYVd4MFpYSW9hWFJsYlNBOVBpQnBkR1Z0S1M1emIzSjBLQ2hoTENCaUtTQTlQaUJoV3pCZElDMGdZbHN3WFNrdVptOXlSV0ZqYUNocGRHVnRJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMjltWm5ObGRITXVjSFZ6YUNocGRHVnRXekJkS1R0Y2JseHVJQ0FnSUNBZ2RHaHBjeTVmZEdGeVoyVjBjeTV3ZFhOb0tHbDBaVzFiTVYwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdaR2x6Y0c5elpTZ3BJSHRjYmlBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1YjJabUtIUm9hWE11WDNOamNtOXNiRVZzWlcxbGJuUXNJRVZXUlU1VVgwdEZXU1F5S1R0Y2JpQWdJQ0J6ZFhCbGNpNWthWE53YjNObEtDazdYRzRnSUgwZ0x5OGdVSEpwZG1GMFpWeHVYRzVjYmlBZ1gyZGxkRU52Ym1acFp5aGpiMjVtYVdjcElIdGNiaUFnSUNCamIyNW1hV2NnUFNCN0lDNHVMa1JsWm1GMWJIUWtNU3hjYmlBZ0lDQWdJQzR1TGsxaGJtbHdkV3hoZEc5eUxtZGxkRVJoZEdGQmRIUnlhV0oxZEdWektIUm9hWE11WDJWc1pXMWxiblFwTEZ4dUlDQWdJQ0FnTGk0dUtIUjVjR1Z2WmlCamIyNW1hV2NnUFQwOUlDZHZZbXBsWTNRbklDWW1JR052Ym1acFp5QS9JR052Ym1acFp5QTZJSHQ5S1Z4dUlDQWdJSDA3WEc0Z0lDQWdZMjl1Wm1sbkxuUmhjbWRsZENBOUlHZGxkRVZzWlcxbGJuUW9ZMjl1Wm1sbkxuUmhjbWRsZENrZ2ZId2daRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1ME8xeHVJQ0FnSUhSNWNHVkRhR1ZqYTBOdmJtWnBaeWhPUVUxRkpESXNJR052Ym1acFp5d2dSR1ZtWVhWc2RGUjVjR1VrTVNrN1hHNGdJQ0FnY21WMGRYSnVJR052Ym1acFp6dGNiaUFnZlZ4dVhHNGdJRjluWlhSVFkzSnZiR3hVYjNBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05qY205c2JFVnNaVzFsYm5RZ1BUMDlJSGRwYm1SdmR5QS9JSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblF1Y0dGblpWbFBabVp6WlhRZ09pQjBhR2x6TGw5elkzSnZiR3hGYkdWdFpXNTBMbk5qY205c2JGUnZjRHRjYmlBZ2ZWeHVYRzRnSUY5blpYUlRZM0p2Ykd4SVpXbG5hSFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTmpjbTlzYkVWc1pXMWxiblF1YzJOeWIyeHNTR1ZwWjJoMElIeDhJRTFoZEdndWJXRjRLR1J2WTNWdFpXNTBMbUp2WkhrdWMyTnliMnhzU0dWcFoyaDBMQ0JrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUXVjMk55YjJ4c1NHVnBaMmgwS1R0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJQWm1aelpYUklaV2xuYUhRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM05qY205c2JFVnNaVzFsYm5RZ1BUMDlJSGRwYm1SdmR5QS9JSGRwYm1SdmR5NXBibTVsY2tobGFXZG9kQ0E2SUhSb2FYTXVYM05qY205c2JFVnNaVzFsYm5RdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1YUdWcFoyaDBPMXh1SUNCOVhHNWNiaUFnWDNCeWIyTmxjM01vS1NCN1hHNGdJQ0FnWTI5dWMzUWdjMk55YjJ4c1ZHOXdJRDBnZEdocGN5NWZaMlYwVTJOeWIyeHNWRzl3S0NrZ0t5QjBhR2x6TGw5amIyNW1hV2N1YjJabWMyVjBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2MyTnliMnhzU0dWcFoyaDBJRDBnZEdocGN5NWZaMlYwVTJOeWIyeHNTR1ZwWjJoMEtDazdYRzVjYmlBZ0lDQmpiMjV6ZENCdFlYaFRZM0p2Ykd3Z1BTQjBhR2x6TGw5amIyNW1hV2N1YjJabWMyVjBJQ3NnYzJOeWIyeHNTR1ZwWjJoMElDMGdkR2hwY3k1ZloyVjBUMlptYzJWMFNHVnBaMmgwS0NrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZmMyTnliMnhzU0dWcFoyaDBJQ0U5UFNCelkzSnZiR3hJWldsbmFIUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNtVm1jbVZ6YUNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpZM0p2Ykd4VWIzQWdQajBnYldGNFUyTnliMnhzS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IwWVhKblpYUWdQU0IwYUdsekxsOTBZWEpuWlhSelczUm9hWE11WDNSaGNtZGxkSE11YkdWdVozUm9JQzBnTVYwN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOWhZM1JwZG1WVVlYSm5aWFFnSVQwOUlIUmhjbWRsZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbUYwWlNoMFlYSm5aWFFwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMkZqZEdsMlpWUmhjbWRsZENBbUppQnpZM0p2Ykd4VWIzQWdQQ0IwYUdsekxsOXZabVp6WlhSeld6QmRJQ1ltSUhSb2FYTXVYMjltWm5ObGRITmJNRjBnUGlBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5aFkzUnBkbVZVWVhKblpYUWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQjBhR2x6TGw5amJHVmhjaWdwTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SUhSb2FYTXVYMjltWm5ObGRITXViR1Z1WjNSb095QnBMUzA3S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JwYzBGamRHbDJaVlJoY21kbGRDQTlJSFJvYVhNdVgyRmpkR2wyWlZSaGNtZGxkQ0FoUFQwZ2RHaHBjeTVmZEdGeVoyVjBjMXRwWFNBbUppQnpZM0p2Ykd4VWIzQWdQajBnZEdocGN5NWZiMlptYzJWMGMxdHBYU0FtSmlBb2RIbHdaVzltSUhSb2FYTXVYMjltWm5ObGRITmJhU0FySURGZElEMDlQU0FuZFc1a1pXWnBibVZrSnlCOGZDQnpZM0p2Ykd4VWIzQWdQQ0IwYUdsekxsOXZabVp6WlhSelcya2dLeUF4WFNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hwYzBGamRHbDJaVlJoY21kbGRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhZM1JwZG1GMFpTaDBhR2x6TGw5MFlYSm5aWFJ6VzJsZEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZZV04wYVhaaGRHVW9kR0Z5WjJWMEtTQjdYRzRnSUNBZ2RHaHBjeTVmWVdOMGFYWmxWR0Z5WjJWMElEMGdkR0Z5WjJWME8xeHVYRzRnSUNBZ2RHaHBjeTVmWTJ4bFlYSW9LVHRjYmx4dUlDQWdJR052Ym5OMElIRjFaWEpwWlhNZ1BTQlRSVXhGUTFSUFVsOU1TVTVMWDBsVVJVMVRMbk53YkdsMEtDY3NKeWt1YldGd0tITmxiR1ZqZEc5eUlEMCtJR0FrZTNObGJHVmpkRzl5ZlZ0a1lYUmhMV0p6TFhSaGNtZGxkRDFjSWlSN2RHRnlaMlYwZlZ3aVhTd2tlM05sYkdWamRHOXlmVnRvY21WbVBWd2lKSHQwWVhKblpYUjlYQ0pkWUNrN1hHNGdJQ0FnWTI5dWMzUWdiR2x1YXlBOUlGTmxiR1ZqZEc5eVJXNW5hVzVsTG1acGJtUlBibVVvY1hWbGNtbGxjeTVxYjJsdUtDY3NKeWtzSUhSb2FYTXVYMk52Ym1acFp5NTBZWEpuWlhRcE8xeHVJQ0FnSUd4cGJtc3VZMnhoYzNOTWFYTjBMbUZrWkNoRFRFRlRVMTlPUVUxRlgwRkRWRWxXUlNReEtUdGNibHh1SUNBZ0lHbG1JQ2hzYVc1ckxtTnNZWE56VEdsemRDNWpiMjUwWVdsdWN5aERURUZUVTE5T1FVMUZYMFJTVDFCRVQxZE9YMGxVUlUwcEtTQjdYRzRnSUNBZ0lDQlRaV3hsWTNSdmNrVnVaMmx1WlM1bWFXNWtUMjVsS0ZORlRFVkRWRTlTWDBSU1QxQkVUMWRPWDFSUFIwZE1SU1F4TENCc2FXNXJMbU5zYjNObGMzUW9VMFZNUlVOVVQxSmZSRkpQVUVSUFYwNGtNU2twTG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlCUTFSSlZrVWtNU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lGTmxiR1ZqZEc5eVJXNW5hVzVsTG5CaGNtVnVkSE1vYkdsdWF5d2dVMFZNUlVOVVQxSmZUa0ZXWDB4SlUxUmZSMUpQVlZBa01Ta3VabTl5UldGamFDaHNhWE4wUjNKdmRYQWdQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnZEhKcFoyZGxjbVZrSUd4cGJtdHpJSEJoY21WdWRITWdZWE1nWVdOMGFYWmxYRzRnSUNBZ0lDQWdJQzh2SUZkcGRHZ2dZbTkwYUNBOGRXdytJR0Z1WkNBOGJtRjJQaUJ0WVhKcmRYQWdZU0J3WVhKbGJuUWdhWE1nZEdobElIQnlaWFpwYjNWeklITnBZbXhwYm1jZ2IyWWdZVzU1SUc1aGRpQmhibU5sYzNSdmNseHVJQ0FnSUNBZ0lDQlRaV3hsWTNSdmNrVnVaMmx1WlM1d2NtVjJLR3hwYzNSSGNtOTFjQ3dnWUNSN1UwVk1SVU5VVDFKZlRrRldYMHhKVGt0VGZTd2dKSHRUUlV4RlExUlBVbDlNU1ZOVVgwbFVSVTFUZldBcExtWnZja1ZoWTJnb2FYUmxiU0E5UGlCcGRHVnRMbU5zWVhOelRHbHpkQzVoWkdRb1EweEJVMU5mVGtGTlJWOUJRMVJKVmtVa01Ta3BPeUF2THlCSVlXNWtiR1VnYzNCbFkybGhiQ0JqWVhObElIZG9aVzRnTG01aGRpMXNhVzVySUdseklHbHVjMmxrWlNBdWJtRjJMV2wwWlcxY2JseHVJQ0FnSUNBZ0lDQlRaV3hsWTNSdmNrVnVaMmx1WlM1d2NtVjJLR3hwYzNSSGNtOTFjQ3dnVTBWTVJVTlVUMUpmVGtGV1gwbFVSVTFUS1M1bWIzSkZZV05vS0c1aGRrbDBaVzBnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJRk5sYkdWamRHOXlSVzVuYVc1bExtTm9hV3hrY21WdUtHNWhka2wwWlcwc0lGTkZURVZEVkU5U1gwNUJWbDlNU1U1TFV5a3VabTl5UldGamFDaHBkR1Z0SUQwK0lHbDBaVzB1WTJ4aGMzTk1hWE4wTG1Ga1pDaERURUZUVTE5T1FVMUZYMEZEVkVsV1JTUXhLU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMblJ5YVdkblpYSW9kR2hwY3k1ZmMyTnliMnhzUld4bGJXVnVkQ3dnUlZaRlRsUmZRVU5VU1ZaQlZFVXNJSHRjYmlBZ0lDQWdJSEpsYkdGMFpXUlVZWEpuWlhRNklIUmhjbWRsZEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyTnNaV0Z5S0NrZ2UxeHVJQ0FnSUZObGJHVmpkRzl5Ulc1bmFXNWxMbVpwYm1Rb1UwVk1SVU5VVDFKZlRFbE9TMTlKVkVWTlV5d2dkR2hwY3k1ZlkyOXVabWxuTG5SaGNtZGxkQ2t1Wm1sc2RHVnlLRzV2WkdVZ1BUNGdibTlrWlM1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb1EweEJVMU5mVGtGTlJWOUJRMVJKVmtVa01Ta3BMbVp2Y2tWaFkyZ29ibTlrWlNBOVBpQnViMlJsTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvUTB4QlUxTmZUa0ZOUlY5QlExUkpWa1VrTVNrcE8xeHVJQ0I5SUM4dklGTjBZWFJwWTF4dVhHNWNiaUFnYzNSaGRHbGpJR3BSZFdWeWVVbHVkR1Z5Wm1GalpTaGpiMjVtYVdjcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWxZV05vS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0JUWTNKdmJHeFRjSGt1WjJWMFQzSkRjbVZoZEdWSmJuTjBZVzVqWlNoMGFHbHpMQ0JqYjI1bWFXY3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJtWnBaeUFoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdGYlkyOXVabWxuWFNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdUbThnYldWMGFHOWtJRzVoYldWa0lGd2lKSHRqYjI1bWFXZDlYQ0pnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1pHRjBZVnRqYjI1bWFXZGRLQ2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1ZlZ4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJRVJoZEdFZ1FYQnBJR2x0Y0d4bGJXVnVkR0YwYVc5dVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVYRzVjYmtWMlpXNTBTR0Z1Wkd4bGNpNXZiaWgzYVc1a2IzY3NJRVZXUlU1VVgweFBRVVJmUkVGVVFWOUJVRWtzSUNncElEMCtJSHRjYmlBZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpDaFRSVXhGUTFSUFVsOUVRVlJCWDFOUVdTa3VabTl5UldGamFDaHpjSGtnUFQ0Z2JtVjNJRk5qY205c2JGTndlU2h6Y0hrcEtUdGNibjBwTzF4dUx5b3FYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR3BSZFdWeWVWeHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQmhaR1FnTGxOamNtOXNiRk53ZVNCMGJ5QnFVWFZsY25rZ2IyNXNlU0JwWmlCcVVYVmxjbmtnYVhNZ2NISmxjMlZ1ZEZ4dUlDb3ZYRzVjYm1SbFptbHVaVXBSZFdWeWVWQnNkV2RwYmloVFkzSnZiR3hUY0hrcE8xeHVYRzR2S2lwY2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkNiMjkwYzNSeVlYQWdLSFkxTGpFdU15azZJSFJoWWk1cWMxeHVJQ29nVEdsalpXNXpaV1FnZFc1a1pYSWdUVWxVSUNob2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmRIZGljeTlpYjI5MGMzUnlZWEF2WW14dllpOXRZV2x1TDB4SlEwVk9VMFVwWEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nUTI5dWMzUmhiblJ6WEc0Z0tpQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNiaUFxTDF4dVhHNWpiMjV6ZENCT1FVMUZKREVnUFNBbmRHRmlKenRjYm1OdmJuTjBJRVJCVkVGZlMwVlpKREVnUFNBblluTXVkR0ZpSnp0Y2JtTnZibk4wSUVWV1JVNVVYMHRGV1NReElEMGdZQzRrZTBSQlZFRmZTMFZaSkRGOVlEdGNibU52Ym5OMElFUkJWRUZmUVZCSlgwdEZXU0E5SUNjdVpHRjBZUzFoY0drbk8xeHVZMjl1YzNRZ1JWWkZUbFJmU0VsRVJTUXhJRDBnWUdocFpHVWtlMFZXUlU1VVgwdEZXU1F4ZldBN1hHNWpiMjV6ZENCRlZrVk9WRjlJU1VSRVJVNGtNU0E5SUdCb2FXUmtaVzRrZTBWV1JVNVVYMHRGV1NReGZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5VFNFOVhKREVnUFNCZ2MyaHZkeVI3UlZaRlRsUmZTMFZaSkRGOVlEdGNibU52Ym5OMElFVldSVTVVWDFOSVQxZE9KREVnUFNCZ2MyaHZkMjRrZTBWV1JVNVVYMHRGV1NReGZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5RFRFbERTMTlFUVZSQlgwRlFTU0E5SUdCamJHbGpheVI3UlZaRlRsUmZTMFZaSkRGOUpIdEVRVlJCWDBGUVNWOUxSVmw5WUR0Y2JtTnZibk4wSUVOTVFWTlRYMDVCVFVWZlJGSlBVRVJQVjA1ZlRVVk9WU0E5SUNka2NtOXdaRzkzYmkxdFpXNTFKenRjYm1OdmJuTjBJRU5NUVZOVFgwNUJUVVZmUVVOVVNWWkZJRDBnSjJGamRHbDJaU2M3WEc1amIyNXpkQ0JEVEVGVFUxOU9RVTFGWDBaQlJFVWtNU0E5SUNkbVlXUmxKenRjYm1OdmJuTjBJRU5NUVZOVFgwNUJUVVZmVTBoUFZ5UXhJRDBnSjNOb2IzY25PMXh1WTI5dWMzUWdVMFZNUlVOVVQxSmZSRkpQVUVSUFYwNGdQU0FuTG1SeWIzQmtiM2R1Snp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDA1QlZsOU1TVk5VWDBkU1QxVlFJRDBnSnk1dVlYWXNJQzVzYVhOMExXZHliM1Z3Snp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDBGRFZFbFdSU0E5SUNjdVlXTjBhWFpsSnp0Y2JtTnZibk4wSUZORlRFVkRWRTlTWDBGRFZFbFdSVjlWVENBOUlDYzZjMk52Y0dVZ1BpQnNhU0ErSUM1aFkzUnBkbVVuTzF4dVkyOXVjM1FnVTBWTVJVTlVUMUpmUkVGVVFWOVVUMGRIVEVVZ1BTQW5XMlJoZEdFdFluTXRkRzluWjJ4bFBWd2lkR0ZpWENKZExDQmJaR0YwWVMxaWN5MTBiMmRuYkdVOVhDSndhV3hzWENKZExDQmJaR0YwWVMxaWN5MTBiMmRuYkdVOVhDSnNhWE4wWENKZEp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gwUlNUMUJFVDFkT1gxUlBSMGRNUlNBOUlDY3VaSEp2Y0dSdmQyNHRkRzluWjJ4bEp6dGNibU52Ym5OMElGTkZURVZEVkU5U1gwUlNUMUJFVDFkT1gwRkRWRWxXUlY5RFNFbE1SQ0E5SUNjNmMyTnZjR1VnUGlBdVpISnZjR1J2ZDI0dGJXVnVkU0F1WVdOMGFYWmxKenRjYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkRiR0Z6Y3lCRVpXWnBibWwwYVc5dVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUwxeHVYRzVqYkdGemN5QlVZV0lnWlhoMFpXNWtjeUJDWVhObFEyOXRjRzl1Wlc1MElIdGNiaUFnTHk4Z1IyVjBkR1Z5YzF4dUlDQnpkR0YwYVdNZ1oyVjBJRTVCVFVVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUU1QlRVVWtNVHRjYmlBZ2ZTQXZMeUJRZFdKc2FXTmNibHh1WEc0Z0lITm9iM2NvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDJWc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlNBbUppQjBhR2x6TGw5bGJHVnRaVzUwTG5CaGNtVnVkRTV2WkdVdWJtOWtaVlI1Y0dVZ1BUMDlJRTV2WkdVdVJVeEZUVVZPVkY5T1QwUkZJQ1ltSUhSb2FYTXVYMlZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbU52Ym5SaGFXNXpLRU5NUVZOVFgwNUJUVVZmUVVOVVNWWkZLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0J3Y21WMmFXOTFjenRjYmlBZ0lDQmpiMjV6ZENCMFlYSm5aWFFnUFNCblpYUkZiR1Z0Wlc1MFJuSnZiVk5sYkdWamRHOXlLSFJvYVhNdVgyVnNaVzFsYm5RcE8xeHVYRzRnSUNBZ1kyOXVjM1FnYkdsemRFVnNaVzFsYm5RZ1BTQjBhR2x6TGw5bGJHVnRaVzUwTG1Oc2IzTmxjM1FvVTBWTVJVTlVUMUpmVGtGV1gweEpVMVJmUjFKUFZWQXBPMXh1WEc0Z0lDQWdhV1lnS0d4cGMzUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCcGRHVnRVMlZzWldOMGIzSWdQU0JzYVhOMFJXeGxiV1Z1ZEM1dWIyUmxUbUZ0WlNBOVBUMGdKMVZNSnlCOGZDQnNhWE4wUld4bGJXVnVkQzV1YjJSbFRtRnRaU0E5UFQwZ0owOU1KeUEvSUZORlRFVkRWRTlTWDBGRFZFbFdSVjlWVENBNklGTkZURVZEVkU5U1gwRkRWRWxXUlR0Y2JpQWdJQ0FnSUhCeVpYWnBiM1Z6SUQwZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpDaHBkR1Z0VTJWc1pXTjBiM0lzSUd4cGMzUkZiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lIQnlaWFpwYjNWeklEMGdjSEpsZG1sdmRYTmJjSEpsZG1sdmRYTXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2FHbGtaVVYyWlc1MElEMGdjSEpsZG1sdmRYTWdQeUJGZG1WdWRFaGhibVJzWlhJdWRISnBaMmRsY2lod2NtVjJhVzkxY3l3Z1JWWkZUbFJmU0VsRVJTUXhMQ0I3WEc0Z0lDQWdJQ0J5Wld4aGRHVmtWR0Z5WjJWME9pQjBhR2x6TGw5bGJHVnRaVzUwWEc0Z0lDQWdmU2tnT2lCdWRXeHNPMXh1SUNBZ0lHTnZibk4wSUhOb2IzZEZkbVZ1ZENBOUlFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDFOSVQxY2tNU3dnZTF4dUlDQWdJQ0FnY21Wc1lYUmxaRlJoY21kbGREb2djSEpsZG1sdmRYTmNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHbG1JQ2h6YUc5M1JYWmxiblF1WkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0I4ZkNCb2FXUmxSWFpsYm5RZ0lUMDlJRzUxYkd3Z0ppWWdhR2xrWlVWMlpXNTBMbVJsWm1GMWJIUlFjbVYyWlc1MFpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDloWTNScGRtRjBaU2gwYUdsekxsOWxiR1Z0Wlc1MExDQnNhWE4wUld4bGJXVnVkQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQmpiMjF3YkdWMFpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSEJ5WlhacGIzVnpMQ0JGVmtWT1ZGOUlTVVJFUlU0a01Td2dlMXh1SUNBZ0lDQWdJQ0J5Wld4aGRHVmtWR0Z5WjJWME9pQjBhR2x6TGw5bGJHVnRaVzUwWEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUVWMlpXNTBTR0Z1Wkd4bGNpNTBjbWxuWjJWeUtIUm9hWE11WDJWc1pXMWxiblFzSUVWV1JVNVVYMU5JVDFkT0pERXNJSHRjYmlBZ0lDQWdJQ0FnY21Wc1lYUmxaRlJoY21kbGREb2djSEpsZG1sdmRYTmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnBaaUFvZEdGeVoyVjBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWhZM1JwZG1GMFpTaDBZWEpuWlhRc0lIUmhjbWRsZEM1d1lYSmxiblJPYjJSbExDQmpiMjF3YkdWMFpTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJYQnNaWFJsS0NrN1hHNGdJQ0FnZlZ4dUlDQjlJQzh2SUZCeWFYWmhkR1ZjYmx4dVhHNGdJRjloWTNScGRtRjBaU2hsYkdWdFpXNTBMQ0JqYjI1MFlXbHVaWElzSUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnWTI5dWMzUWdZV04wYVhabFJXeGxiV1Z1ZEhNZ1BTQmpiMjUwWVdsdVpYSWdKaVlnS0dOdmJuUmhhVzVsY2k1dWIyUmxUbUZ0WlNBOVBUMGdKMVZNSnlCOGZDQmpiMjUwWVdsdVpYSXVibTlrWlU1aGJXVWdQVDA5SUNkUFRDY3BJRDhnVTJWc1pXTjBiM0pGYm1kcGJtVXVabWx1WkNoVFJVeEZRMVJQVWw5QlExUkpWa1ZmVlV3c0lHTnZiblJoYVc1bGNpa2dPaUJUWld4bFkzUnZja1Z1WjJsdVpTNWphR2xzWkhKbGJpaGpiMjUwWVdsdVpYSXNJRk5GVEVWRFZFOVNYMEZEVkVsV1JTazdYRzRnSUNBZ1kyOXVjM1FnWVdOMGFYWmxJRDBnWVdOMGFYWmxSV3hsYldWdWRITmJNRjA3WEc0Z0lDQWdZMjl1YzNRZ2FYTlVjbUZ1YzJsMGFXOXVhVzVuSUQwZ1kyRnNiR0poWTJzZ0ppWWdZV04wYVhabElDWW1JR0ZqZEdsMlpTNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9RMHhCVTFOZlRrRk5SVjlHUVVSRkpERXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ1kyOXRjR3hsZEdVZ1BTQW9LU0E5UGlCMGFHbHpMbDkwY21GdWMybDBhVzl1UTI5dGNHeGxkR1VvWld4bGJXVnVkQ3dnWVdOMGFYWmxMQ0JqWVd4c1ltRmpheWs3WEc1Y2JpQWdJQ0JwWmlBb1lXTjBhWFpsSUNZbUlHbHpWSEpoYm5OcGRHbHZibWx1WnlrZ2UxeHVJQ0FnSUNBZ1lXTjBhWFpsTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvUTB4QlUxTmZUa0ZOUlY5VFNFOVhKREVwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbDl4ZFdWMVpVTmhiR3hpWVdOcktHTnZiWEJzWlhSbExDQmxiR1Z0Wlc1MExDQjBjblZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZMjl0Y0d4bGRHVW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JmZEhKaGJuTnBkR2x2YmtOdmJYQnNaWFJsS0dWc1pXMWxiblFzSUdGamRHbDJaU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JwWmlBb1lXTjBhWFpsS1NCN1hHNGdJQ0FnSUNCaFkzUnBkbVV1WTJ4aGMzTk1hWE4wTG5KbGJXOTJaU2hEVEVGVFUxOU9RVTFGWDBGRFZFbFdSU2s3WEc0Z0lDQWdJQ0JqYjI1emRDQmtjbTl3Wkc5M2JrTm9hV3hrSUQwZ1UyVnNaV04wYjNKRmJtZHBibVV1Wm1sdVpFOXVaU2hUUlV4RlExUlBVbDlFVWs5UVJFOVhUbDlCUTFSSlZrVmZRMGhKVEVRc0lHRmpkR2wyWlM1d1lYSmxiblJPYjJSbEtUdGNibHh1SUNBZ0lDQWdhV1lnS0dSeWIzQmtiM2R1UTJocGJHUXBJSHRjYmlBZ0lDQWdJQ0FnWkhKdmNHUnZkMjVEYUdsc1pDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZRVU5VU1ZaRktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dGamRHbDJaUzVuWlhSQmRIUnlhV0oxZEdVb0ozSnZiR1VuS1NBOVBUMGdKM1JoWWljcElIdGNiaUFnSUNBZ0lDQWdZV04wYVhabExuTmxkRUYwZEhKcFluVjBaU2duWVhKcFlTMXpaV3hsWTNSbFpDY3NJR1poYkhObEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCbGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlCUTFSSlZrVXBPMXh1WEc0Z0lDQWdhV1lnS0dWc1pXMWxiblF1WjJWMFFYUjBjbWxpZFhSbEtDZHliMnhsSnlrZ1BUMDlJQ2QwWVdJbktTQjdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MExuTmxkRUYwZEhKcFluVjBaU2duWVhKcFlTMXpaV3hsWTNSbFpDY3NJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbFpteHZkeWhsYkdWdFpXNTBLVHRjYmx4dUlDQWdJR2xtSUNobGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3loRFRFRlRVMTlPUVUxRlgwWkJSRVVrTVNrcElIdGNiaUFnSUNBZ0lHVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hEVEVGVFUxOU9RVTFGWDFOSVQxY2tNU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUhCaGNtVnVkQ0E5SUdWc1pXMWxiblF1Y0dGeVpXNTBUbTlrWlR0Y2JseHVJQ0FnSUdsbUlDaHdZWEpsYm5RZ0ppWWdjR0Z5Wlc1MExtNXZaR1ZPWVcxbElEMDlQU0FuVEVrbktTQjdYRzRnSUNBZ0lDQndZWEpsYm5RZ1BTQndZWEpsYm5RdWNHRnlaVzUwVG05a1pUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jR0Z5Wlc1MElDWW1JSEJoY21WdWRDNWpiR0Z6YzB4cGMzUXVZMjl1ZEdGcGJuTW9RMHhCVTFOZlRrRk5SVjlFVWs5UVJFOVhUbDlOUlU1VktTa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1pISnZjR1J2ZDI1RmJHVnRaVzUwSUQwZ1pXeGxiV1Z1ZEM1amJHOXpaWE4wS0ZORlRFVkRWRTlTWDBSU1QxQkVUMWRPS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLR1J5YjNCa2IzZHVSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0JUWld4bFkzUnZja1Z1WjJsdVpTNW1hVzVrS0ZORlRFVkRWRTlTWDBSU1QxQkVUMWRPWDFSUFIwZE1SU3dnWkhKdmNHUnZkMjVGYkdWdFpXNTBLUzVtYjNKRllXTm9LR1J5YjNCa2IzZHVJRDArSUdSeWIzQmtiM2R1TG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlCUTFSSlZrVXBLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWld4bGJXVnVkQzV6WlhSQmRIUnlhV0oxZEdVb0oyRnlhV0V0Wlhod1lXNWtaV1FuTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUdOaGJHeGlZV05yS0NrN1hHNGdJQ0FnZlZ4dUlDQjlJQzh2SUZOMFlYUnBZMXh1WEc1Y2JpQWdjM1JoZEdsaklHcFJkV1Z5ZVVsdWRHVnlabUZqWlNoamIyNW1hV2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR1JoZEdFZ1BTQlVZV0l1WjJWMFQzSkRjbVZoZEdWSmJuTjBZVzVqWlNoMGFHbHpLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2NnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlWdGpiMjVtYVdkZElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUU1dklHMWxkR2h2WkNCdVlXMWxaQ0JjSWlSN1kyOXVabWxuZlZ3aVlDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCa1lYUmhXMk52Ym1acFoxMG9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzU5WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb2dSR0YwWVNCQmNHa2dhVzF3YkdWdFpXNTBZWFJwYjI1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNWNibHh1UlhabGJuUklZVzVrYkdWeUxtOXVLR1J2WTNWdFpXNTBMQ0JGVmtWT1ZGOURURWxEUzE5RVFWUkJYMEZRU1N3Z1UwVk1SVU5VVDFKZlJFRlVRVjlVVDBkSFRFVXNJR1oxYm1OMGFXOXVJQ2hsZG1WdWRDa2dlMXh1SUNCcFppQW9XeWRCSnl3Z0owRlNSVUVuWFM1cGJtTnNkV1JsY3loMGFHbHpMblJoWjA1aGJXVXBLU0I3WEc0Z0lDQWdaWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hwYzBScGMyRmliR1ZrS0hSb2FYTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdU8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ1pHRjBZU0E5SUZSaFlpNW5aWFJQY2tOeVpXRjBaVWx1YzNSaGJtTmxLSFJvYVhNcE8xeHVJQ0JrWVhSaExuTm9iM2NvS1R0Y2JuMHBPMXh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlHcFJkV1Z5ZVZ4dUlDb2dMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRzRnS2lCaFpHUWdMbFJoWWlCMGJ5QnFVWFZsY25rZ2IyNXNlU0JwWmlCcVVYVmxjbmtnYVhNZ2NISmxjMlZ1ZEZ4dUlDb3ZYRzVjYm1SbFptbHVaVXBSZFdWeWVWQnNkV2RwYmloVVlXSXBPMXh1WEc0dktpcGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaUJDYjI5MGMzUnlZWEFnS0hZMUxqRXVNeWs2SUhSdllYTjBMbXB6WEc0Z0tpQk1hV05sYm5ObFpDQjFibVJsY2lCTlNWUWdLR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwZDJKekwySnZiM1J6ZEhKaGNDOWliRzlpTDIxaGFXNHZURWxEUlU1VFJTbGNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhHNGdLaTljYmk4cUtseHVJQ29nTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEc0Z0tpQkRiMjV6ZEdGdWRITmNiaUFxSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4dUlDb3ZYRzVjYm1OdmJuTjBJRTVCVFVVZ1BTQW5kRzloYzNRbk8xeHVZMjl1YzNRZ1JFRlVRVjlMUlZrZ1BTQW5Zbk11ZEc5aGMzUW5PMXh1WTI5dWMzUWdSVlpGVGxSZlMwVlpJRDBnWUM0a2UwUkJWRUZmUzBWWmZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5TlQxVlRSVTlXUlZJZ1BTQmdiVzkxYzJWdmRtVnlKSHRGVmtWT1ZGOUxSVmw5WUR0Y2JtTnZibk4wSUVWV1JVNVVYMDFQVlZORlQxVlVJRDBnWUcxdmRYTmxiM1YwSkh0RlZrVk9WRjlMUlZsOVlEdGNibU52Ym5OMElFVldSVTVVWDBaUFExVlRTVTRnUFNCZ1ptOWpkWE5wYmlSN1JWWkZUbFJmUzBWWmZXQTdYRzVqYjI1emRDQkZWa1ZPVkY5R1QwTlZVMDlWVkNBOUlHQm1iMk4xYzI5MWRDUjdSVlpGVGxSZlMwVlpmV0E3WEc1amIyNXpkQ0JGVmtWT1ZGOUlTVVJGSUQwZ1lHaHBaR1VrZTBWV1JVNVVYMHRGV1gxZ08xeHVZMjl1YzNRZ1JWWkZUbFJmU0VsRVJFVk9JRDBnWUdocFpHUmxiaVI3UlZaRlRsUmZTMFZaZldBN1hHNWpiMjV6ZENCRlZrVk9WRjlUU0U5WElEMGdZSE5vYjNja2UwVldSVTVVWDB0RldYMWdPMXh1WTI5dWMzUWdSVlpGVGxSZlUwaFBWMDRnUFNCZ2MyaHZkMjRrZTBWV1JVNVVYMHRGV1gxZ08xeHVZMjl1YzNRZ1EweEJVMU5mVGtGTlJWOUdRVVJGSUQwZ0oyWmhaR1VuTzF4dVkyOXVjM1FnUTB4QlUxTmZUa0ZOUlY5SVNVUkZJRDBnSjJocFpHVW5PeUF2THlCQVpHVndjbVZqWVhSbFpDQXRJR3RsY0hRZ2FHVnlaU0J2Ym14NUlHWnZjaUJpWVdOcmQyRnlaSE1nWTI5dGNHRjBhV0pwYkdsMGVWeHVYRzVqYjI1emRDQkRURUZUVTE5T1FVMUZYMU5JVDFjZ1BTQW5jMmh2ZHljN1hHNWpiMjV6ZENCRFRFRlRVMTlPUVUxRlgxTklUMWRKVGtjZ1BTQW5jMmh2ZDJsdVp5YzdYRzVqYjI1emRDQkVaV1poZFd4MFZIbHdaU0E5SUh0Y2JpQWdZVzVwYldGMGFXOXVPaUFuWW05dmJHVmhiaWNzWEc0Z0lHRjFkRzlvYVdSbE9pQW5ZbTl2YkdWaGJpY3NYRzRnSUdSbGJHRjVPaUFuYm5WdFltVnlKMXh1ZlR0Y2JtTnZibk4wSUVSbFptRjFiSFFnUFNCN1hHNGdJR0Z1YVcxaGRHbHZiam9nZEhKMVpTeGNiaUFnWVhWMGIyaHBaR1U2SUhSeWRXVXNYRzRnSUdSbGJHRjVPaUExTURBd1hHNTlPMXh1THlvcVhHNGdLaUF0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjYmlBcUlFTnNZWE56SUVSbFptbHVhWFJwYjI1Y2JpQXFJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1SUNvdlhHNWNibU5zWVhOeklGUnZZWE4wSUdWNGRHVnVaSE1nUW1GelpVTnZiWEJ2Ym1WdWRDQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHVnNaVzFsYm5Rc0lHTnZibVpwWnlrZ2UxeHVJQ0FnSUhOMWNHVnlLR1ZzWlcxbGJuUXBPMXh1SUNBZ0lIUm9hWE11WDJOdmJtWnBaeUE5SUhSb2FYTXVYMmRsZEVOdmJtWnBaeWhqYjI1bWFXY3BPMXh1SUNBZ0lIUm9hWE11WDNScGJXVnZkWFFnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11WDJoaGMwMXZkWE5sU1c1MFpYSmhZM1JwYjI0Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOW9ZWE5MWlhsaWIyRnlaRWx1ZEdWeVlXTjBhVzl1SUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0IwYUdsekxsOXpaWFJNYVhOMFpXNWxjbk1vS1R0Y2JpQWdmU0F2THlCSFpYUjBaWEp6WEc1Y2JseHVJQ0J6ZEdGMGFXTWdaMlYwSUVSbFptRjFiSFJVZVhCbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCRVpXWmhkV3gwVkhsd1pUdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnUkdWbVlYVnNkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdSR1ZtWVhWc2REdGNiaUFnZlZ4dVhHNGdJSE4wWVhScFl5Qm5aWFFnVGtGTlJTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1RrRk5SVHRjYmlBZ2ZTQXZMeUJRZFdKc2FXTmNibHh1WEc0Z0lITm9iM2NvS1NCN1hHNGdJQ0FnWTI5dWMzUWdjMmh2ZDBWMlpXNTBJRDBnUlhabGJuUklZVzVrYkdWeUxuUnlhV2RuWlhJb2RHaHBjeTVmWld4bGJXVnVkQ3dnUlZaRlRsUmZVMGhQVnlrN1hHNWNiaUFnSUNCcFppQW9jMmh2ZDBWMlpXNTBMbVJsWm1GMWJIUlFjbVYyWlc1MFpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbDlqYkdWaGNsUnBiV1Z2ZFhRb0tUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOWpiMjVtYVdjdVlXNXBiV0YwYVc5dUtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9RMHhCVTFOZlRrRk5SVjlHUVVSRktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JqYjIxd2JHVjBaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoRFRFRlRVMTlPUVUxRlgxTklUMWRKVGtjcE8xeHVYRzRnSUNBZ0lDQkZkbVZ1ZEVoaGJtUnNaWEl1ZEhKcFoyZGxjaWgwYUdsekxsOWxiR1Z0Wlc1MExDQkZWa1ZPVkY5VFNFOVhUaWs3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMjFoZVdKbFUyTm9aV1IxYkdWSWFXUmxLQ2s3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExuSmxiVzkyWlNoRFRFRlRVMTlPUVUxRlgwaEpSRVVwT3lBdkx5QkFaR1Z3Y21WallYUmxaRnh1WEc1Y2JpQWdJQ0J5Wldac2IzY29kR2hwY3k1ZlpXeGxiV1Z1ZENrN1hHNWNiaUFnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1EweEJVMU5mVGtGTlJWOVRTRTlYS1R0Y2JseHVJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNoRFRFRlRVMTlPUVUxRlgxTklUMWRKVGtjcE8xeHVYRzRnSUNBZ2RHaHBjeTVmY1hWbGRXVkRZV3hzWW1GamF5aGpiMjF3YkdWMFpTd2dkR2hwY3k1ZlpXeGxiV1Z1ZEN3Z2RHaHBjeTVmWTI5dVptbG5MbUZ1YVcxaGRHbHZiaWs3WEc0Z0lIMWNibHh1SUNCb2FXUmxLQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVmWld4bGJXVnVkQzVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vUTB4QlUxTmZUa0ZOUlY5VFNFOVhLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUdocFpHVkZkbVZ1ZENBOUlFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDBoSlJFVXBPMXh1WEc0Z0lDQWdhV1lnS0docFpHVkZkbVZ1ZEM1a1pXWmhkV3gwVUhKbGRtVnVkR1ZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ1kyOXRjR3hsZEdVZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1EweEJVMU5mVGtGTlJWOUlTVVJGS1RzZ0x5OGdRR1JsY0hKbFkyRjBaV1JjYmx4dVhHNGdJQ0FnSUNCMGFHbHpMbDlsYkdWdFpXNTBMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9RMHhCVTFOZlRrRk5SVjlUU0U5WFNVNUhLVHRjYmx4dUlDQWdJQ0FnZEdocGN5NWZaV3hsYldWdWRDNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtFTk1RVk5UWDA1QlRVVmZVMGhQVnlrN1hHNWNiaUFnSUNBZ0lFVjJaVzUwU0dGdVpHeGxjaTUwY21sbloyVnlLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDBoSlJFUkZUaWs3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdVgyVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2hEVEVGVFUxOU9RVTFGWDFOSVQxZEpUa2NwTzF4dVhHNGdJQ0FnZEdocGN5NWZjWFZsZFdWRFlXeHNZbUZqYXloamIyMXdiR1YwWlN3Z2RHaHBjeTVmWld4bGJXVnVkQ3dnZEdocGN5NWZZMjl1Wm1sbkxtRnVhVzFoZEdsdmJpazdYRzRnSUgxY2JseHVJQ0JrYVhOd2IzTmxLQ2tnZTF4dUlDQWdJSFJvYVhNdVgyTnNaV0Z5VkdsdFpXOTFkQ2dwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJWc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1OdmJuUmhhVzV6S0VOTVFWTlRYMDVCVFVWZlUwaFBWeWtwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMlZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbkpsYlc5MlpTaERURUZUVTE5T1FVMUZYMU5JVDFjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMWNHVnlMbVJwYzNCdmMyVW9LVHRjYmlBZ2ZTQXZMeUJRY21sMllYUmxYRzVjYmx4dUlDQmZaMlYwUTI5dVptbG5LR052Ym1acFp5a2dlMXh1SUNBZ0lHTnZibVpwWnlBOUlIc2dMaTR1UkdWbVlYVnNkQ3hjYmlBZ0lDQWdJQzR1TGsxaGJtbHdkV3hoZEc5eUxtZGxkRVJoZEdGQmRIUnlhV0oxZEdWektIUm9hWE11WDJWc1pXMWxiblFwTEZ4dUlDQWdJQ0FnTGk0dUtIUjVjR1Z2WmlCamIyNW1hV2NnUFQwOUlDZHZZbXBsWTNRbklDWW1JR052Ym1acFp5QS9JR052Ym1acFp5QTZJSHQ5S1Z4dUlDQWdJSDA3WEc0Z0lDQWdkSGx3WlVOb1pXTnJRMjl1Wm1sbktFNUJUVVVzSUdOdmJtWnBaeXdnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVFWldaaGRXeDBWSGx3WlNrN1hHNGdJQ0FnY21WMGRYSnVJR052Ym1acFp6dGNiaUFnZlZ4dVhHNGdJRjl0WVhsaVpWTmphR1ZrZFd4bFNHbGtaU2dwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WDJOdmJtWnBaeTVoZFhSdmFHbGtaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxsOW9ZWE5OYjNWelpVbHVkR1Z5WVdOMGFXOXVJSHg4SUhSb2FYTXVYMmhoYzB0bGVXSnZZWEprU1c1MFpYSmhZM1JwYjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxsOTBhVzFsYjNWMElEMGdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG1ocFpHVW9LVHRjYmlBZ0lDQjlMQ0IwYUdsekxsOWpiMjVtYVdjdVpHVnNZWGtwTzF4dUlDQjlYRzVjYmlBZ1gyOXVTVzUwWlhKaFkzUnBiMjRvWlhabGJuUXNJR2x6U1c1MFpYSmhZM1JwYm1jcElIdGNiaUFnSUNCemQybDBZMmdnS0dWMlpXNTBMblI1Y0dVcElIdGNiaUFnSUNBZ0lHTmhjMlVnSjIxdmRYTmxiM1psY2ljNlhHNGdJQ0FnSUNCallYTmxJQ2R0YjNWelpXOTFkQ2M2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYzAxdmRYTmxTVzUwWlhKaFkzUnBiMjRnUFNCcGMwbHVkR1Z5WVdOMGFXNW5PMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdZMkZ6WlNBblptOWpkWE5wYmljNlhHNGdJQ0FnSUNCallYTmxJQ2RtYjJOMWMyOTFkQ2M2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmhoYzB0bGVXSnZZWEprU1c1MFpYSmhZM1JwYjI0Z1BTQnBjMGx1ZEdWeVlXTjBhVzVuTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYVhOSmJuUmxjbUZqZEdsdVp5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlkyeGxZWEpVYVcxbGIzVjBLQ2s3WEc1Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCdVpYaDBSV3hsYldWdWRDQTlJR1YyWlc1MExuSmxiR0YwWldSVVlYSm5aWFE3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmWld4bGJXVnVkQ0E5UFQwZ2JtVjRkRVZzWlcxbGJuUWdmSHdnZEdocGN5NWZaV3hsYldWdWRDNWpiMjUwWVdsdWN5aHVaWGgwUld4bGJXVnVkQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TGw5dFlYbGlaVk5qYUdWa2RXeGxTR2xrWlNncE8xeHVJQ0I5WEc1Y2JpQWdYM05sZEV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNCRmRtVnVkRWhoYm1Sc1pYSXViMjRvZEdocGN5NWZaV3hsYldWdWRDd2dSVlpGVGxSZlRVOVZVMFZQVmtWU0xDQmxkbVZ1ZENBOVBpQjBhR2x6TGw5dmJrbHVkR1Z5WVdOMGFXOXVLR1YyWlc1MExDQjBjblZsS1NrN1hHNGdJQ0FnUlhabGJuUklZVzVrYkdWeUxtOXVLSFJvYVhNdVgyVnNaVzFsYm5Rc0lFVldSVTVVWDAxUFZWTkZUMVZVTENCbGRtVnVkQ0E5UGlCMGFHbHpMbDl2YmtsdWRHVnlZV04wYVc5dUtHVjJaVzUwTENCbVlXeHpaU2twTzF4dUlDQWdJRVYyWlc1MFNHRnVaR3hsY2k1dmJpaDBhR2x6TGw5bGJHVnRaVzUwTENCRlZrVk9WRjlHVDBOVlUwbE9MQ0JsZG1WdWRDQTlQaUIwYUdsekxsOXZia2x1ZEdWeVlXTjBhVzl1S0dWMlpXNTBMQ0IwY25WbEtTazdYRzRnSUNBZ1JYWmxiblJJWVc1a2JHVnlMbTl1S0hSb2FYTXVYMlZzWlcxbGJuUXNJRVZXUlU1VVgwWlBRMVZUVDFWVUxDQmxkbVZ1ZENBOVBpQjBhR2x6TGw5dmJrbHVkR1Z5WVdOMGFXOXVLR1YyWlc1MExDQm1ZV3h6WlNrcE8xeHVJQ0I5WEc1Y2JpQWdYMk5zWldGeVZHbHRaVzkxZENncElIdGNiaUFnSUNCamJHVmhjbFJwYldWdmRYUW9kR2hwY3k1ZmRHbHRaVzkxZENrN1hHNGdJQ0FnZEdocGN5NWZkR2x0Wlc5MWRDQTlJRzUxYkd3N1hHNGdJSDBnTHk4Z1UzUmhkR2xqWEc1Y2JseHVJQ0J6ZEdGMGFXTWdhbEYxWlhKNVNXNTBaWEptWVdObEtHTnZibVpwWnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtVmhZMmdvWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJRlJ2WVhOMExtZGxkRTl5UTNKbFlYUmxTVzV6ZEdGdVkyVW9kR2hwY3l3Z1kyOXVabWxuS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiMjVtYVdjZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZVnRqYjI1bWFXZGRJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1lFNXZJRzFsZEdodlpDQnVZVzFsWkNCY0lpUjdZMjl1Wm1sbmZWd2lZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmtZWFJoVzJOdmJtWnBaMTBvZEdocGN5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVmVnh1WEc1bGJtRmliR1ZFYVhOdGFYTnpWSEpwWjJkbGNpaFViMkZ6ZENrN1hHNHZLaXBjYmlBcUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeHVJQ29nYWxGMVpYSjVYRzRnS2lBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY2JpQXFJR0ZrWkNBdVZHOWhjM1FnZEc4Z2FsRjFaWEo1SUc5dWJIa2dhV1lnYWxGMVpYSjVJR2x6SUhCeVpYTmxiblJjYmlBcUwxeHVYRzVrWldacGJtVktVWFZsY25sUWJIVm5hVzRvVkc5aGMzUXBPMXh1WEc1bGVIQnZjblFnZXlCQmJHVnlkQ3dnUW5WMGRHOXVMQ0JEWVhKdmRYTmxiQ3dnUTI5c2JHRndjMlVzSUVSeWIzQmtiM2R1TENCTmIyUmhiQ3dnVDJabVkyRnVkbUZ6TENCUWIzQnZkbVZ5TENCVFkzSnZiR3hUY0hrc0lGUmhZaXdnVkc5aGMzUXNJRlJ2YjJ4MGFYQWdmVHRjYmk4dkl5QnpiM1Z5WTJWTllYQndhVzVuVlZKTVBXSnZiM1J6ZEhKaGNDNWxjMjB1YW5NdWJXRndYRzRpTENKY2NseHVMeW9xWEhKY2JpQXFJSE5wYlhCc1pTQjFkR2xzYVhSNUlIUnZJR0ZrWkM5eVpXMXZkbVVnWTI5dmEybGxjeUJpWVhObFpDQnZiaUJGVXpkY2NseHVJQ29nWTNKbFpHbDBPaUJvZEhSd2N6b3ZMM04wWVdOcmIzWmxjbVpzYjNjdVkyOXRMMkV2TkRnM01EWTROVEpjY2x4dUlDb3ZYSEpjYm1Oc1lYTnpJRU52YjJ0cFpTQjdYSEpjYmlBZ0lDQm5aWFFvYm1GdFpUb2djM1J5YVc1bktTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHTWdQU0JrYjJOMWJXVnVkQzVqYjI5cmFXVXViV0YwWTJnb1lDZy9PaWcvT2w1OExpbzdJQ29wSkh0dVlXMWxmU0FxUFNBcUtGdGVPMTBxS1M0cUpDbDhYaTRxSkdBcFd6RmRYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHTXBJSEpsZEhWeWJpQmtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9ZeWxjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCelpYUW9ibUZ0WlRvZ2MzUnlhVzVuTENCMllXeDFaVG9nWVc1NUxDQnZjSFJ6T2lCaGJua2dQU0I3ZlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQzhxU1dZZ2IzQjBhVzl1Y3lCamIyNTBZV2x1Y3lCa1lYbHpJSFJvWlc0Z2QyVW5jbVVnWTI5dVptbG5kWEpwYm1jZ2JXRjRMV0ZuWlNvdlhISmNiaUFnSUNBZ0lDQWdhV1lnS0c5d2RITXVaR0Y1Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNIUnpXeWR0WVhndFlXZGxKMTBnUFNCdmNIUnpMbVJoZVhNZ0tpQTJNQ0FxSURZd0lDb2dNalE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdktrUmxiR1YwYVc1bklHUmhlWE1nWm5KdmJTQnZjSFJwYjI1eklIUnZJSEJoYzNNZ2NtVnRZV2x1YVc1bklHOXdkSE1nZEc4Z1kyOXZhMmxsSUhObGRIUnBibWR6S2k5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRzl3ZEhNdVpHRjVjMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHlwRGIyNW1hV2QxY21sdVp5QnZjSFJwYjI1eklIUnZJR052YjJ0cFpTQnpkR0Z1WkdGeVpDQmllU0J5WldSMVkybHVaeUJsWVdOb0lIQnliM0JsY25SNUtpOWNjbHh1SUNBZ0lDQWdJQ0J2Y0hSeklEMGdUMkpxWldOMExtVnVkSEpwWlhNb2IzQjBjeWt1Y21Wa2RXTmxLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW9ZV05qZFcxMWJHRjBaV1JUZEhJc0lGdHJMQ0IyWFNrZ1BUNGdZQ1I3WVdOamRXMTFiR0YwWldSVGRISjlPeUFrZTJ0OVBTUjdkbjFnTENBbkoxeHlYRzRnSUNBZ0lDQWdJQ2xjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeXBHYVc1aGJHeDVMQ0JqY21WaGRHbHVaeUIwYUdVZ2EyVjVLaTljY2x4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1amIyOXJhV1VnUFNCdVlXMWxJQ3NnSnowbklDc2daVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLSFpoYkhWbEtTQXJJRzl3ZEhOY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmtaV3hsZEdVb2JtRnRaVG9nYzNSeWFXNW5MQ0J2Y0hSelB6b2dZVzU1S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUW9ibUZ0WlN3Z0p5Y3NJSHNnSjIxaGVDMWhaMlVuT2lBdE1Td2dMaTR1YjNCMGN5QjlLVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dklIQmhkR2dnSmlCa2IyMWhhVzRnYlhWemRDQnRZWFJqYUNCamIyOXJhV1VnWW1WcGJtY2daR1ZzWlhSbFpDQmNjbHh1SUNBZ0lHZGxkRXBUVDA0b2JtRnRaVG9nYzNSeWFXNW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSFJvYVhNdVoyVjBLRzVoYldVcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGNtVnpkV3gwS1NCeVpYUjFjbTRnSnljN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9jbVZ6ZFd4MEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J6WlhSS1UwOU9LRzVoYldVNklITjBjbWx1Wnl3Z2RtRnNkV1U2SUdGdWVTd2diM0IwY3pvZ1lXNTVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhRb2JtRnRaU3dnU2xOUFRpNXpkSEpwYm1kcFpua29kbUZzZFdVcExDQnZjSFJ6S1Z4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyOXVjM1FnUTI5dmEybGxTR1ZzY0dWeUlEMGdibVYzSUVOdmIydHBaU2dwT3lJc0lseHlYRzR2TDF4eVhHNHZMeUJoWTNScGIyNGdkSGx3WlhOY2NseHVMeTljY2x4dVkyeGhjM01nWVhCd1FXTjBhVzl1Y3lCN1hISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JEVDB4ZlUwOVNWRWxPUnlBOUlDZERUMHhmVTA5U1ZFbE9SeWM3WEhKY2JpQWdJSE4wWVhScFl5QnlaV0ZrYjI1c2VTQkRUMHhmVWtWVFNWcEZSQ0E5SUNkRFQweGZVa1ZUU1ZwRlJDYzdYSEpjYmlBZ0lITjBZWFJwWXlCeVpXRmtiMjVzZVNCRFQweGZVMGhQVjE5SVNVUkZJRDBnSjBOUFRGOVRTRTlYWDBoSlJFVW5PMXh5WEc0Z0lDQnpkR0YwYVdNZ2NtVmhaRzl1YkhrZ1EwOU1YMUpGVDFKRVJWSWdQU0FuUTA5TVgxSkZUMUpFUlZJblhISmNibjFjY2x4dVhISmNiaTh2WEhKY2JpOHZJR1YyWlc1MElIUjVjR1Z6WEhKY2JpOHZYSEpjYm1Oc1lYTnpJR0Z3Y0VSaGRHRkZkbVZ1ZEhNZ2UxeHlYRzVjY2x4dUlDQWdjM1JoZEdsaklISmxZV1J2Ym14NUlFZFNTVVJmUkVGVVFTQTlJRndpUjFKSlJGOUVRVlJCWENJN1hISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JQVGw5T1JWaFVYMUpGUTA5U1JDQTlJRndpVDA1ZlRrVllWRjlTUlVOUFVrUmNJanRjY2x4dUlDQWdjM1JoZEdsaklISmxZV1J2Ym14NUlFOU9YMUJTUlZaZlVrVkRUMUpFSUQwZ1hDSlBUbDlRVWtWV1gxSkZRMDlTUkZ3aU8xeHlYRzRnSUNCemRHRjBhV01nY21WaFpHOXViSGtnVDA1ZlUwRldSVjlTUlVOUFVrUWdQU0JjSWs5T1gxTkJWa1ZmVWtWRFQxSkVYQ0k3WEhKY2JpQWdJSE4wWVhScFl5QnlaV0ZrYjI1c2VTQlBUbDlFUlV4RlZFVmZVa1ZEVDFKRUlEMGdYQ0pQVGw5RVJVeEZWRVZmVWtWRFQxSkVYQ0k3WEhKY2JpQWdJSE4wWVhScFl5QnlaV0ZrYjI1c2VTQlBUbDlNUVZOVVgxSkZRMDlTUkNBOUlGd2lUMDVmVEVGVFZGOVNSVU5QVWtSY0lqdGNjbHh1SUNBZ2MzUmhkR2xqSUhKbFlXUnZibXg1SUU5T1gwWkpVbE5VWDFKRlEwOVNSQ0E5SUZ3aVQwNWZSa2xTVTFSZlVrVkRUMUpFWENJN1hISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JQVGw5QlJFUmZVa1ZEVDFKRUlEMGdYQ0pQVGw5QlJFUmZVa1ZEVDFKRVhDSTdYSEpjYmlBZ0lITjBZWFJwWXlCeVpXRmtiMjVzZVNCUFRsOUdSVlJEU0Y5U1JVTlBVa1FnUFNCY0lrOU9YMFpGVkVOSVgxSkZRMDlTUkZ3aU8xeHlYRzRnSUNCemRHRjBhV01nY21WaFpHOXViSGtnVDA1ZlJrVlVRMGhmVWtWRFQxSkVYMFZTVWs5U0lEMGdYQ0pQVGw5R1JWUkRTRjlTUlVOUFVrUmZSVkpTVDFKY0lqdGNjbHh1SUNBZ2MzUmhkR2xqSUhKbFlXUnZibXg1SUU5T1gwWkZWRU5JWDBkU1NVUmZVa1ZEVDFKRUlEMGdYQ0pQVGw5R1JWUkRTRjlIVWtsRVgxSkZRMDlTUkZ3aU8xeHlYRzRnSUNCemRHRjBhV01nY21WaFpHOXViSGtnVDA1ZlJrVlVRMGhmUjFKSlJGOVNSVU5QVWtSZlJWSlNUMUlnUFNCY0lrOU9YMFpGVkVOSVgwZFNTVVJmVWtWRFQxSkVYMFZTVWs5U1hDSTdYSEpjYmlBZ0lITjBZWFJwWXlCeVpXRmtiMjVzZVNCUFRsOU9RVlpKUjBGVVNVNUhYMUpGUTA5U1JDQTlJRndpVDA1ZlRrRldTVWRCVkVsT1IxOVNSVU5QVWtSY0lqc2dMeThnY21GcGMyVmtJSGRvWlc0Z2RHaGxJRzFoYVc0Z2NtVmpiM0prSUdseklHRmliM1YwSUhSdklHNWhkbWxuWVhSbFhISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JQVGw5SFVrbEVYMVZRUkVGVVJVUWdQU0JjSWs5T1gwZFNTVVJmVlZCRVFWUkZSRndpTzF4eVhHNGdJQ0J6ZEdGMGFXTWdjbVZoWkc5dWJIa2dUMDVmVTBGV1JWOUZVbEpQVWlBOUlGd2lUMDVmVTBGV1JWOUZVbEpQVWx3aU8xeHlYRzRnSUNCemRHRjBhV01nY21WaFpHOXViSGtnVDA1ZlUwOVNWRWxPUjE5U1JWRlZSVk5VUlVRZ1BTQmNJazlPWDFOUFVsUkpUa2RmVWtWUlZVVlRWRVZFWENJN1hISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JQVGw5RFQweFRYMUpGVDFKRVJWSkZSQ0E5SUZ3aVQwNWZRMDlNVTE5U1JVOVNSRVZTUlVSY0lqdGNjbHh1SUNBZ2MzUmhkR2xqSUhKbFlXUnZibXg1SUU5T1gwZFNTVVJmUkVGVVFWOUNUMVZPUkNBOUlGd2lUMDVmUjFKSlJGOUVRVlJCWDBKUFZVNUVYQ0k3WEhKY2JpQWdJSE4wWVhScFl5QnlaV0ZrYjI1c2VTQlBUbDlIVWtsRVgwTlBUa1pKUjE5VlVFUkJWRVZFSUQwZ1hDSlBUbDlIVWtsRVgwTlBUa1pKUjE5VlVFUkJWRVZFWENJN1hISmNiaUFnSUhOMFlYUnBZeUJ5WldGa2IyNXNlU0JQVGw5UVFVZEZYMUpGUVVSWklEMGdYQ0pQVGw5UVFVZEZYMUpGUVVSWlhDSTdYSEpjYmlBZ0lITjBZWFJwWXlCeVpXRmtiMjVzZVNCUFRsOVNUMWRmVlZCRVFWUkZSQ0E5SUZ3aVQwNWZVazlYWDFWUVJFRlVSVVJjSWp0Y2NseHVJQ0FnYzNSaGRHbGpJSEpsWVdSdmJteDVJRTlPWDBaSlJVeEVYMVZRUkVGVVJVUWdQU0JjSWs5T1gwWkpSVXhFWDFWUVJFRlVSVVJjSWp0Y2NseHVJQ0FnYzNSaGRHbGpJSEpsWVdSdmJteDVJRTlPWDFKUFYxOUVUMVZDVEVWZlEweEpRMHRGUkNBOUlGd2lUMDVmVWs5WFgwUlBWVUpNUlY5RFRFbERTMFZFWENKY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElIc2dZWEJ3UVdOMGFXOXVjeXdnWVhCd1JHRjBZVVYyWlc1MGN5QjlYSEpjYmlJc0lseHlYRzVwYlhCdmNuUWdleUJDVTBWMlpXNTBVM1ZpYzJOeWFXSmxjazF2WkdWc0xDQkNVMWRwYmxCdmNFVjJaVzUwTENCQ1UwVjJaVzUwSUgwZ1puSnZiU0JjSWk0dUwyTnZiVzF2YmxSNWNHVnpMMk52YlcxdmJpMTBlWEJsYzF3aU8xeHlYRzVwYlhCdmNuUWdleUJoY0hCRVlYUmhSWFpsYm5SeklIMGdabkp2YlNCY0lpNHZaR0YwWVMxbGRtVnVkSE5jSWp0Y2NseHVYSEpjYm1Oc1lYTnpJRVJoZEdGRmRtVnVkSE5UWlhKMmFXTmxJSHRjY2x4dUlDQWdJR05oYkd4aVlXTnJjem9nUWxORmRtVnVkRk4xWW5OamNtbGlaWEpOYjJSbGJGdGRPMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTNNZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsWjJsemRHVnlWMmx1VUc5d1UzUmhkR1VvS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmx4eVhHNGdJQ0FnY21WbmFYTjBaWEpYYVc1UWIzQlRkR0YwWlNncElIdGNjbHh1SUNBZ0lDQWdJQ0IzYVc1a2IzY3ViMjV3YjNCemRHRjBaU0E5SUNobE9pQlFiM0JUZEdGMFpVVjJaVzUwS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsTG5OMFlYUmxJQ1ltSUdVdWMzUmhkR1V1WlhabGJuUkVZWFJoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhsTG5OMFlYUmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxkam9nUWxOWGFXNVFiM0JGZG1WdWRDQTlJSHNnUlhabGJuUkVZWFJoT2lCbExuTjBZWFJsTG1WMlpXNTBSR0YwWVN3Z1UydHBjRkIxYzJnNklIUnlkV1VzSUVSaGRHRlRiM1Z5WTJWT1lXMWxPaUJjSWx3aUlIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrVnRhWFFvWVhCd1JHRjBZVVYyWlc1MGN5NVBUbDlHUlZSRFNGOVNSVU5QVWtRc0lIZHBibVJ2ZHl3Z1pYWXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdSVzFwZENobGRtVnVkRTVoYldVNklITjBjbWx1Wnl3Z2MyOTFjbU5sT2lCaGJua3NJR1YyWlc1MFFYSm5jem9nUWxORmRtVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWlhabGJuUk9ZVzFsS1NCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXeHNZbUZqYTNNdVptOXlSV0ZqYUNnb1kySXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWWk1RmRtVnVkRTVoYldVZ0lUMDlJR1YyWlc1MFRtRnRaU0I4ZkNBb1kySXVSR0YwWVZOdmRYSmpaVTVoYldVZ0lUMDlJR1YyWlc1MFFYSm5jeTVFWVhSaFUyOTFjbU5sVG1GdFpTQW1KaUJqWWk1V1pYSnBabmxFWVhSaFUyOTFjbU5sVG1GdFpTQTlQVDBnZEhKMVpTa3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kySXVRMkZzYkdKaFkyc29jMjkxY21ObExDQmxkbVZ1ZEVGeVozTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhsY25KdmNpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQlZibk4xWW5OamNtbGlaU2h0YjJSbGJEb2dRbE5GZG1WdWRGTjFZbk5qY21saVpYSk5iMlJsYkNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdabWxzZEdWeVpXUWdQU0IwYUdsekxtTmhiR3hpWVdOcmMxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdVptbHNkR1Z5S0Noallpa2dQVDRnS0dOaUxrdGxlU0E5UFQwZ2JXOWtaV3d1UzJWNVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW1KaUJqWWk1RmRtVnVkRTVoYldVZ1BUMDlJRzF2WkdWc0xrVjJaVzUwVG1GdFpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnWTJJdVJHRjBZVk52ZFhKalpVNWhiV1VnUFQwOUlHMXZaR1ZzTGtSaGRHRlRiM1Z5WTJWT1lXMWxLU0E5UFQwZ1ptRnNjMlVwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTmhiR3hpWVdOcmN5QTlJR1pwYkhSbGNtVmtPMXh5WEc1Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQlRkV0p6WTNKcFltVW9iVzlrWld3NklFSlRSWFpsYm5SVGRXSnpZM0pwWW1WeVRXOWtaV3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklFNXZJRzVsWldRZ2RHOGdaRzhnWVNCc2IyOXJkWEFnYVdZZ2FHRnVaR3hsY2lCbGVHbHpkQ0JtY205dElHSmxabTl5WlZ4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnRiMlJsYkM1RmRtVnVkRTVoYldVcElISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OaGJHeGlZV05yY3k1d2RYTm9LRzF2WkdWc0tUdGNjbHh1SUNBZ0lIMDdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JqYjI1emRDQmtZWFJoUlhabGJuUnpVMlZ5ZG1salpTQTlJRzVsZHlCRVlYUmhSWFpsYm5SelUyVnlkbWxqWlNncE95SXNJbU5zWVhOeklGTmxjM05wYjI1VGRHOXlZV2RsVTJWeWRtbGpaU0I3WEhKY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUyVnpjMmx2YmlCemRHOXlZV2RsSUdseklHbHVhWFJwWVd4cGVtVmtKeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1lXUmtTWFJsYlNoclpYa3NJSFpoYkhWbExDQmxlSEJwY25rcElIdGNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lDOHZJRWhsY21VZ2QyVWdZWEpsSUhWemFXNW5JSE5sYzNOcGIyNVRkRzl5WVdkbElHbHVjM1JsWVdRZ2IyWWdiRzlqWVd4VGRHOXlZV2RsTGx4eVhHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCc1lYUmxjaUJwY3lCdWIzUWdZMnhsWVhKbFpDQmxkbVZ1SUdsbUlIUm9aU0IxYzJWeUlHTnNiM05sY3lCMGFHVWdZbkp2ZDNObGNpRmNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2VDQTlJSHNnZG1Gc2RXVTZJSFpoYkhWbExDQjBlWEJsT2lBbmNISmxiU2NzSUdWNGNHbHllVG9nWlhod2FYSjVMbWRsZEZScGJXVW9LU0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlBbUppQjJZV3gxWlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSGd1ZEhsd1pTQTlJQ2R2WW1wbFkzUW5PMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYzJWemMybHZibE4wYjNKaFoyVXVjMlYwU1hSbGJTaHJaWGtzSUVwVFQwNHVjM1J5YVc1bmFXWjVLSGdwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmhjSEJsYm1SSmRHVnRLR3RsZVN3Z1lYQndaVzVrUm1GamRHOXllU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGRHVnRJRDBnZEdocGN5NW5aWFJKZEdWdFVtRjNLR3RsZVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBkR1Z0S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYm1WM1ZtRnNkV1VnUFNCaGNIQmxibVJHWVdOMGIzSjVLR2wwWlcwdWRtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSSmRHVnRLR3RsZVN3Z2JtVjNWbUZzZFdVc0lHNWxkeUJFWVhSbEtHbDBaVzB1Wlhod2FYSjVLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljbTl5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTNKbFlYUmxSWGh3YVhKNVMyVjVLR3RsZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnJaWGtnS3lBbkxXVjRjR2x5ZVNjN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdaMlYwU1hSbGJWSmhkeWhyWlhrcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCelpYTnphVzl1VTNSdmNtRm5aUzVuWlhSSmRHVnRLR3RsZVNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dWdWRISjVLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdlQ0E5SUVwVFQwNHVjR0Z5YzJVb1pXNTBjbmtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Y0Y0dseWVTQTlJSGd1Wlhod2FYSjVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUkdGMFpTNXViM2NvS1NBK0lIQmhjbk5sU1c1MEtHVjRjR2x5ZVNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnRiM1psU1hSbGJTaHJaWGtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlZ1ZEhKNUlHVjRjR2x5WldRc0lIZHBiR3dnWW1VZ2NtVnRiM1psWkNjc0lIZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSGc3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkRWwwWlcwb2EyVjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdjMlZ6YzJsdmJsTjBiM0poWjJVdVoyVjBTWFJsYlNoclpYa3BPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhnZ1BTQktVMDlPTG5CaGNuTmxLR1Z1ZEhKNUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbGVIQnBjbmtnUFNCNExtVjRjR2x5ZVR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFUmhkR1V1Ym05M0tDa2dQaUJ3WVhKelpVbHVkQ2hsZUhCcGNua3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVbDBaVzBvYTJWNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjRMblpoYkhWbE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J5WlcxdmRtVkpkR1Z0S0d0bGVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVUZEc5eVlXZGxMbkpsYlc5MlpVbDBaVzBvYTJWNUtWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1VtVnRiM1psY3lCaGJHd2dkR2hsSUdsMFpXMXpJSE4wWVhKMGFXNW5JSGRwZEdnZ2RHaGxJR2RwZG1WdUlIQnlaV1pwZUNCbWNtOXRJSE5sYzNOcGIyNGdjM1J2Y21GblpTQmNjbHh1SUNBZ0lDQXFJRTV2ZEdVZ2RHaGhkQ0JwWmlCdWJ5QndjbVZtYVhnZ2FYTWdjSEp2ZG1sa1pXUXNJR2wwSUhkcGJHd2djbVZ0YjNabElHRnNiQ0IwYUdVZ2EyVjVjeTVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5QMzBnY0hKbFptbDRJRzl3ZEdsdmJtRnNYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY21WdGIzWmxRV3hzS0hCeVpXWnBlQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYQnlaV1pwZUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYTnphVzl1VTNSdmNtRm5aUzV5WlcxdmRtVkJiR3dvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJzWlc1bmRHZ2dQU0J6WlhOemFXOXVVM1J2Y21GblpTNXNaVzVuZEdnN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0d4bGJtZDBhQ0E4UFNBd0tTQnlaWFIxY200N1hISmNibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYTJWNWN6b2djM1J5YVc1blcxMGdQU0JiWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVc1a1pYZ2dQU0F3T3lCcGJtUmxlQ0E4SUd4bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYzJWemMybHZibE4wYjNKaFoyVXVhMlY1S0dsdVpHVjRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGclpYa3VjM1JoY25SelYybDBhQ2h3Y21WbWFYZ3BLU0JqYjI1MGFXNTFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVc1a1pYZ2dQU0F3T3lCcGJtUmxlQ0E4SUd0bGVYTXViR1Z1WjNSb095QnBibVJsZUNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6VzJsdVpHVjRYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZ6YzJsdmJsTjBiM0poWjJVdWNtVnRiM1psU1hSbGJTaHJaWGtwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSHRUWlhOemFXOXVVM1J2Y21GblpWTmxjblpwWTJWOUlpd2lhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZDWVhObElIMGdabkp2YlNCY0lpNHVMMk52YlhCdmJtVnVkSE5jSWp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCVFpYSjJhV05sSUhWelpXUWdkRzhnWkdselkyOTJaWElnWkdGMFlTMTBZV0pzWlhNZ1lua2dhWFJ6SUdsa1pXNTBhV1o1WEhKY2JpQXFJRlJvYVhNZ1kyRnVJR0psSUhWelpXWjFiQ0IzYUdWdUlIZGxJR2hoZG1VZ2JXRnVlU0IwWVdKc1pYTWdhVzRnZEdobElIQmhaMlVnWVc1a0lIRjFaWEo1SUhSb1pXMGdabTl5SUhSb1pXbHlJR1JoZEdGY2NseHVJQ29nZEc4Z1ltVWdjMlZ1ZENCaVlXTnJJSFJ2SUhObGNuWmxjaUIzYUdWdUlIUm9aU0IxYzJWeUlIQnlaWE56WlhNZ2RHaGxJSE5oZG1VdmNHVnljMmx6ZENCaWRYUjBiMjVjY2x4dUlDb3ZYSEpjYm1Oc1lYTnpJRUpUUkdGMFlWUmhZbXhsUkdselkyOTJaWEo1VTJWeWRtbGpaU0I3WEhKY2JseHlYRzRnSUNBZ1JHRjBZVlJoWW14bGN6b2dRbE5FWVhSaFZHRmliR1ZDWVhObFcxMGdQU0JiWFR0Y2NseHVYSEpjYmlBZ0lDQkJaR1FvWkdGMFlYUmhZbXhsT2lCQ1UwUmhkR0ZVWVdKc1pVSmhjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGtSaGRHRlVZV0pzWlhNdWNIVnphQ2hrWVhSaGRHRmliR1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lFZGxkRUZzYkNncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwT2lCQ1UwZHlhV1JFWVhSaFRXOWtaV3hiWFNBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR0YwWVZSaFlteGxjeTVtYjNKRllXTm9LQ2hrZENrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWkhRdWFYTlNaV0ZrVDI1c2VTa2djbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUcxdlpHVnNPaUJDVTBkeWFXUkVZWFJoVFc5a1pXd2dQU0I3SUVSaGRHRlRiM1Z5WTJWT1lXMWxPaUJrZEM1a1lYUmhVMjkxY21ObFRtRnRaU3dnUkdGMFlUb2daSFF1WkdseWRIbFNaV052Y21SeklIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LRzF2WkdWc0tUdGNjbHh1SUNBZ0lDQWdJQ0I5S1Z4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1hISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pITk9ZVzFsSUVSaGRHRlRiM1Z5WTJVZ1RtRnRaVnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JIWlhSQ2VVUlRUbUZ0WlNoa2MwNWhiV1U2SUhOMGNtbHVaeWs2SUVKVFIzSnBaRVJoZEdGTmIyUmxiQ0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1pwYm1RZ1BTQjBhR2x6TGtSaGRHRlVZV0pzWlhNdVptbHVaQ2dvWkhRcElEMCtJR1IwTG1SaGRHRlRiM1Z5WTJWT1lXMWxJRDA5UFNCa2MwNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2htYVc1a0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZXlCRVlYUmhVMjkxY21ObFRtRnRaVG9nWm1sdVpDNWtZWFJoVTI5MWNtTmxUbUZ0WlN3Z1JHRjBZVG9nWm1sdVpDNWthWEowZVZKbFkyOXlaSE1nZlZ4eVhHNWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JuMWNjbHh1WEhKY2JtbHVkR1Z5Wm1GalpTQkNVMGR5YVdSRVlYUmhUVzlrWld3Z2UxeHlYRzRnSUNBZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUhOMGNtbHVaenRjY2x4dUlDQWdJRVJoZEdFNklHOWlhbVZqZEZ0ZFhISmNibjFjY2x4dVhISmNibU52Ym5OMElHSnpSR0YwWVZSaFlteGxSR2x6WTI5MlpYSjVVMlZ5ZG1salpTQTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pVUnBjMk52ZG1WeWVWTmxjblpwWTJVb0tUdGNjbHh1WEhKY2JtVjRjRzl5ZENCN0lHSnpSR0YwWVZSaFlteGxSR2x6WTI5MlpYSjVVMlZ5ZG1salpTQjlJaXdpTHk4Z2FXMXdiM0owSUNvZ1lYTWdKQ0JtY205dElGd2lhbkYxWlhKNVhDSmNjbHh1YVcxd2IzSjBJSHNnUTI5dmEybGxTR1ZzY0dWeUxDQmtZWFJoUlhabGJuUnpVMlZ5ZG1salpTd2dZWEJ3UVdOMGFXOXVjeXdnWVhCd1JHRjBZVVYyWlc1MGN5QjlJR1p5YjIwZ1hDSXVMaTl6WlhKMmFXTmxjMXdpTzF4eVhHNXBiWEJ2Y25RZ2V5QkNVME52YkhWdGJsTmxkSFJwYm1kekxDQkNVMFYyWlc1MElIMGdabkp2YlNCY0lpNHVMMk52YlcxdmJsUjVjR1Z6TDJOdmJXMXZiaTEwZVhCbGMxd2lPMXh5WEc1Y2NseHVYSEpjYm1Oc1lYTnpJRUpUUkdGMFlWUmhZbXhsUW1GelpTQjdYSEpjYmx4eVhHNGdJQ0FnWld4bGJXVnVkRG9nU0ZSTlRFVnNaVzFsYm5RN1hISmNiaUFnSUNCamFHbHNaSEpsYmpvZ1FsTkVZWFJoVkdGaWJHVkNZWE5sVzEwN1hISmNiaUFnSUNBdkx5QnFjWFZsY25rNklFcFJkV1Z5ZVZOMFlYUnBZenRjY2x4dUlDQWdJR0Z3Y0VSaGRHRkZkbVZ1ZEhNNklIUjVjR1Z2WmlCaGNIQkVZWFJoUlhabGJuUnpPMXh5WEc0Z0lDQWdZWEJ3UVdOMGFXOXVjem9nZEhsd1pXOW1JR0Z3Y0VGamRHbHZibk03WEhKY2JseHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdsc1pISmxiaUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYQndSR0YwWVVWMlpXNTBjeUE5SUdGd2NFUmhkR0ZGZG1WdWRITTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWhjSEJCWTNScGIyNXpJRDBnWVhCd1FXTjBhVzl1Y3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnViM1JwWm5sTWFYTjBaVzVsY25Nb1pYWmxiblJVZVhCbE9pQnpkSEpwYm1jc0lIQmhlV3h2WVdRNklFSlRSWFpsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0JrWVhSaFJYWmxiblJ6VTJWeWRtbGpaUzVGYldsMEtHVjJaVzUwVkhsd1pTd2dkR2hwY3l3Z2NHRjViRzloWkNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQlpHUWdhR0Z1Wkd4bGNpQjBieUIwYUdVZ1pYWmxiblJ6SUhKaGFYTmxaQ0JpZVNCMGFHVWdSRTlOWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdGa1pFVjJaVzUwU0dGdVpHeGxjaWhsZG1WdWRFNWhiV1U2SUhOMGNtbHVaeXdnYUdGdVpHeGxjam9nUlhabGJuUk1hWE4wWlc1bGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklIUm9hWE11Wld4bGJXVnVkQzV2YmlnblkyeHBZMnNuTENCb1lXNWtiR1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklHMXZkbWx1WnlCaGQyRjVJR1p5YjIwZ2FuRjFaWEo1WEhKY2JpQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHaGhibVJzWlhJcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2RsZEVkeWFXUlRaWFIwYVc1bmN5aG5jbWxrU1dRcE9pQjdJRnQ0T2lCemRISnBibWRkT2lCQ1UwTnZiSFZ0YmxObGRIUnBibWR6T3lCOUlIdGNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtaV0oxWjJkbGNqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2R5YVdSVFpYUjBhVzVuY3lBOUlFTnZiMnRwWlVobGJIQmxjaTVuWlhSS1UwOU9LR2R5YVdSSlpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjBkeWFXUlRaWFIwYVc1bmN5QkRiMjlyYVdVNklDY3NJR2R5YVdSVFpYUjBhVzVuY3lBL0lDZHpaWFIwYVc1bmN5Qm1iM1Z1WkNjZ09pQW5ibThnYzJWMGRHbHVaM01nWm05MWJtUWhKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjNKcFpGTmxkSFJwYm1kek8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQmZaR0YwWVZOdmRYSmpaVTVoYldVNklITjBjbWx1Wnp0Y2NseHVYSEpjYmlBZ0lDQm5aWFFnWkdGMFlWTnZkWEpqWlU1aGJXVW9LVG9nYzNSeWFXNW5JSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZaR0YwWVZOdmRYSmpaVTVoYldVN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjMlYwSUdSaGRHRlRiM1Z5WTJWT1lXMWxLSFk2SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJSaGRHRlRiM1Z5WTJWT1lXMWxJRDBnZGp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmZhWE5TWldGa1QyNXNlVG9nWW05dmJHVmhianRjY2x4dUlDQWdJR2RsZENCcGMxSmxZV1JQYm14NUtDazZJR0p2YjJ4bFlXNGdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBjMUpsWVdSUGJteDVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhObGRDQnBjMUpsWVdSUGJteDVLSFk2SUdKdmIyeGxZVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGMxSmxZV1JQYm14NUlEMGdkanRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUWdaR2x5ZEhsU1pXTnZjbVJ6S0NrNklHOWlhbVZqZEZ0ZElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMTA3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1oyVjBJSGRwWkhSb0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RdWMzUjViR1V1ZDJsa2RHZzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnpaWFFnZDJsa2RHZ29kMmxrZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdWMzUjViR1V1ZDJsa2RHZ2dQU0IzYVdSMGFEdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JuWlhRZ2RtbHphV0pzWlNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGJHVnRaVzUwTG1ocFpHUmxiaUE5UFQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J6WlhRZ2RtbHphV0pzWlNoMllXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVhR2xrWkdWdUlEMGdkbUZzSUQwOVBTQm1ZV3h6WlR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJEYzNNb2REb2djM1J5YVc1bktTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXeGxiV1Z1ZEM1emRIbHNaVnQwWFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpaWFJEYzNNb2F6b2djM1J5YVc1bkxDQjJPaUJoYm5rcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbk4wZVd4bFcydGRJRDBnZGp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnpaWFFnWTNOektHTnpjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZM056SUQwOVBTQW5iMkpxWldOMEp5QW1KaUJqYzNNZ0lUMDlJRzUxYkd3Z0ppWWdkR2hwY3k1cGMwVnRjSFI1VDJKcUtHTnpjeWtnUFQwOUlHWmhiSE5sS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnJaWGx6SUQwZ1QySnFaV04wTG10bGVYTW9ZM056S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNWN5NW1iM0pGWVdOb0tDaHJLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1YzNSNWJHVmJhMTBnUFNCamMzTmJhMTA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSYlhYMGdjSEp2Y0hNZ1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQnliM0J6S0hCeWIzQnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUNBZ0lDQndjbTl3Y3k1bWIzSkZZV05vS0Nod0tTQTlQaUJmZEdocGN5NXdjbTl3S0hBdWEyVjVMQ0J3TG5aaGJIVmxLU2xjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRk5sZEhNZ2RHaGxJSFpoYkhWbElHOW1JR0Z1SUdGMGRISnBZblYwWlZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd0bGVTQmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlNCY2NseHVJQ0FnSUNBcUlFQnlaWFIxY201eklGeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQndjbTl3S0d0bGVUb2djM1J5YVc1bkxDQjJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RdVlYUjBjaWhyWlhrc0lIWmhiSFZsS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1YzJWMFFYUjBjbWxpZFhSbEtHdGxlU3dnZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdaMlYwVUhKdmNDaHJaWGs2SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUXVaMlYwUVhSMGNtbGlkWFJsS0d0bGVTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1ptbHVaQ2h6Wld4bFkzUnZjam9nYzNSeWFXNW5LU0I3WEhKY2JpQWdJQ0F2THlBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wld4bGJXVnVkQzV4ZFdWeWVWTmxiR1ZqZEc5eVFXeHNLSE5sYkdWamRHOXlLVHRjY2x4dUlDQWdJQzh2SUgxY2NseHVYSEpjYmlBZ0lDQm1hVzVrUld4bGJXVnVkSE1vYzJWc1pXTjBiM0k2SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZzWlcxbGJuUXVjWFZsY25sVFpXeGxZM1J2Y2tGc2JDaHpaV3hsWTNSdmNpazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWm1sdVpFSjVTV1FvYVdRNklITjBjbWx1WnlrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNocFpDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WdGIzWmxSV3hsYldWdWRDaGxiRG9nUld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0JsYkM1d1lYSmxiblJGYkdWdFpXNTBPMXh5WEc0Z0lDQWdJQ0FnSUhCaGNtVnVkQzV5WlcxdmRtVkRhR2xzWkNobGJDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWVdSa1EyeGhjM01vWTNOelEyeGhjM002SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0d4cGRDQTlJR056YzBOc1lYTnpMbk53YkdsMEtDY2dKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLQzR1TG5Od2JHbDBLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J5WlcxdmRtVkRiR0Z6Y3loamMzTkRiR0Z6Y3pvZ2MzUnlhVzVuS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1eVpXMXZkbVVvWTNOelEyeGhjM01wTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdoaGMwTnNZWE56S0dOemMwTnNZWE56S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wld4bGJXVnVkQzVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vWTNOelEyeGhjM01wTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lITmxkRlJsZUhRb2RIaDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbWx1Ym1WeVZHVjRkQ0E5SUhSNGREdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJVWlhoMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RdWFXNXVaWEpVWlhoME8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1hISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwSlRSR0YwWVZSaFlteGxRbUZ6WlgwZ1pXeGxiU0JjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWVhCd1pXNWtLR1ZzWlcwNklFSlRSR0YwWVZSaFlteGxRbUZ6WlN3Z2NIVnphRlJ2UVhKeVlYa2dQU0IwY25WbEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3ZFhOb1ZHOUJjbkpoZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5vYVd4a2NtVnVMbkIxYzJnb1pXeGxiU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVZWEJ3Wlc1a1EyaHBiR1FvWld4bGJTNWxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1iMk4xY3lncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdVptOWpkWE1vS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnBjMFZ0Y0hSNVQySnFLRzlpYWlrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWh2WW1vcExteGxibWQwYUNBOVBUMGdNRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUWdhV1FvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFVISnZjQ2duYVdRbktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J6WlhRZ2FXUW9kaWtnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNDZ25hV1FuTENCMktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JqYkc5dVpTZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkwyUmxZblZuWjJWeU8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCaklEMGdibVYzSUVKVFJHRjBZVlJoWW14bFFtRnpaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDOHZJR011Wld4bGJXVnVkQ0E5SUhSb2FYTXVaV3hsYldWdWRDNWpiRzl1WlNncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCNElEMGdkR2hwY3k1bGJHVnRaVzUwTG1Oc2IyNWxUbTlrWlNncE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoNElHbHVjM1JoYm1ObGIyWWdTRlJOVEVWc1pXMWxiblFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWXk1bGJHVnRaVzUwSUQwZ2VEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJzYVhOMElEMGdkR2hwY3k1amFHbHNaSEpsYmk1dFlYQW9LSFlwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCall5QTlJSFl1WTJ4dmJtVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNdVpXeGxiV1Z1ZEM1aGNIQmxibVFvWTJNdVpXeGxiV1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyTTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpMbU5vYVd4a2NtVnVJRDBnYkdsemREdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dZU0J6YUdGc2JHOTNJR05zYjI1bFhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ2IySnFJRnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhOb1EyeHZibVVvYjJKcUtTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnZZbW9wSUhKbGRIVnliaUJ2WW1vN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1aGMzTnBaMjRvVDJKcVpXTjBMbU55WldGMFpTaFBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvYjJKcUtTa3NJRzlpYWlrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMmhwYkdSeVpXNU9iMlJsY3lncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bGJHVnRaVzUwTG1Ob2FXeGtjbVZ1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHRndjR1Z1WkVOb2FXeGtLRzV2WkdVNklFNXZaR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb2JtOWtaU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2QzSmhjQ2gzY21Gd2NHVnlPaUJGYkdWdFpXNTBMQ0J1YjJSbGN6b2dTRlJOVEVOdmJHeGxZM1JwYjI0Z2ZDQkZiR1Z0Wlc1MEtTQjdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1kyeHZibVVnUFNCM2NtRndjR1Z5TG1Oc2IyNWxUbTlrWlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9ibTlrWlhNZ2FXNXpkR0Z1WTJWdlppQkZiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3WVhKbGJuUWdQU0J1YjJSbGN5NXdZWEpsYm5SRmJHVnRaVzUwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkc5dVpTNWhjSEJsYm1SRGFHbHNaQ2h1YjJSbGN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEM1aGNIQmxibVJEYUdsc1pDaGpiRzl1WlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYm05a1pYTXViR1Z1WjNSb0lEdzlJREFwSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaGNtVnVkQ0E5SUc1dlpHVnpXekJkTG5CaGNtVnVkRVZzWlcxbGJuUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQTlJREE3SUdsdVpHVjRJRHdnYm05a1pYTXViR1Z1WjNSb095QnBibVJsZUNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmxiR1Z0Wlc1MElEMGdibTlrWlhOYmFXNWtaWGhkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHZibVV1WVhCd1pXNWtRMmhwYkdRb1pXeGxiV1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbVZ1ZEM1aGNIQmxibVJEYUdsc1pDaGpiRzl1WlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdGa1pFUnlZV2RJWVc1a2JHVnljeWh1YjJSbE9pQkZiR1Z0Wlc1MExDQmtjbUZuU0dGdVpHeGxjbk02SUh0Y2NseHVJQ0FnSUNBZ0lDQmtjbUZuVTNSaGNuUTZJQ2hsZGpvZ1JISmhaMFYyWlc1MEtTQTlQaUJoYm5rN1hISmNiaUFnSUNBZ0lDQWdaSEpoWjB4bFlYWmxPaUFvWlhZNklFUnlZV2RGZG1WdWRDa2dQVDRnWVc1NU8xeHlYRzRnSUNBZ0lDQWdJR1J5WVdkRmJuUmxjam9nS0dWMk9pQkVjbUZuUlhabGJuUXBJRDArSUdGdWVUdGNjbHh1SUNBZ0lDQWdJQ0JrY21GblQzWmxjam9nS0dWMk9pQkVjbUZuUlhabGJuUXBJRDArSUdGdWVUdGNjbHh1SUNBZ0lDQWdJQ0JrY21GblJXNWtPaUFvWlhZNklFUnlZV2RGZG1WdWRDa2dQVDRnWVc1NU8xeHlYRzRnSUNBZ0lDQWdJR1J5YjNBNklDaGxkam9nUkhKaFowVjJaVzUwS1NBOVBpQmhibms3WEhKY2JseHlYRzRnSUNBZ2ZTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haSEpoWjBoaGJtUnNaWEp6SUh4OElIUm9hWE11YVhORmJYQjBlVTlpYWloa2NtRm5TR0Z1Wkd4bGNuTXBLU0J5WlhSMWNtNDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrY21GblNHRnVaR3hsY25NdVpISmhaMU4wWVhKMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1V1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWkhKaFozTjBZWEowSnl3Z1pISmhaMGhoYm1Sc1pYSnpMbVJ5WVdkVGRHRnlkQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9aSEpoWjBoaGJtUnNaWEp6TG1SeVlXZE1aV0YyWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIyUmxMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMlJ5WVdkc1pXRjJaU2NzSUdSeVlXZElZVzVrYkdWeWN5NWtjbUZuVEdWaGRtVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHUnlZV2RJWVc1a2JHVnljeTVrY21GblJXNTBaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGtjbUZuWlc1MFpYSW5MQ0JrY21GblNHRnVaR3hsY25NdVpISmhaMFZ1ZEdWeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoa2NtRm5TR0Z1Wkd4bGNuTXVaSEpoWjA5MlpYSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibTlrWlM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nka2NtRm5iM1psY2ljc0lHUnlZV2RJWVc1a2JHVnljeTVrY21GblQzWmxjaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9aSEpoWjBoaGJtUnNaWEp6TG1SeVlXZEZibVFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGtjbUZuWlc1a0p5d2daSEpoWjBoaGJtUnNaWEp6TG1SeVlXZEZibVFwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1J5WVdkSVlXNWtiR1Z5Y3k1a2NtOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblpISnZjQ2NzSUdSeVlXZElZVzVrYkdWeWN5NWtjbTl3S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHMWhkR05vWlhNb1pXeGxiVG9nUld4bGJXVnVkQ3dnWm1sc2RHVnlPaUJ6ZEhKcGJtY3BJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aV3hsYlNBbUppQmxiR1Z0TG01dlpHVlVlWEJsSUQwOVBTQXhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWFXeDBaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJHVnRMbTFoZEdOb1pYTW9abWxzZEdWeUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhOcFlteHBibWR6S0hObGJHVmpkRzl5T2lCemRISnBibWNwT2lCRmJHVnRaVzUwVzEwZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCc2FYTjBJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbVZzWlcxbGJuUXVjR0Z5Wlc1MFRtOWtaU2tnY21WMGRYSnVJR3hwYzNRN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG5CaGNtVnVkRTV2WkdVdVkyaHBiR1JPYjJSbGN5NW1iM0pGWVdOb0tDaHVaQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ibVFnUFQwOUlIUm9hWE11Wld4bGJXVnVkQ2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YldGMFkyaGxjeWh1WkNCaGN5QklWRTFNUld4bGJXVnVkQ3dnYzJWc1pXTjBiM0lwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wTG5CMWMyZ29ibVFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc2FYTjBPMXh5WEc1Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmx4eVhHNWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWQ1lYTmxJSDBpTENKY2NseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkNVMFYyWlc1MFNHRnVaR3hsY2lCN0lDaHpaVzVrWlhJNklHOWlhbVZqZEN3Z1pYWmxiblJQWW1wbFkzUTZJRUpUUlhabGJuUXBPaUIyYjJsa0lIMWNjbHh1WEhKY2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1FsTkZkbVZ1ZENCN1hISmNiaUFnSUNCRmRtVnVkRVJoZEdFL09pQjdJRVYyWlc1MFB6b2dZVzU1SUgwN1hISmNiaUFnSUNCRVlYUmhVMjkxY21ObFRtRnRaVG9nYzNSeWFXNW5PMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUVKVFUyOXlkR2x1WjFKbGNYVmxjM1JGZG1WdWRDQmxlSFJsYm1SeklFSlRSWFpsYm5RZ2UxeHlYRzRnSUNBZ1JYWmxiblJFWVhSaFB6b2dlMXh5WEc0Z0lDQWdJQ0FnSUVWMlpXNTBQem9nWVc1NUxGeHlYRzRnSUNBZ0lDQWdJRkJ5YjNCT1lXMWxQem9nYzNSeWFXNW5MRnh5WEc0Z0lDQWdJQ0FnSUVGell6ODZJR0p2YjJ4bFlXNWNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JDVTBOdmJITlNaVzl5WkdWeVpXUkZkbVZ1ZENCbGVIUmxibVJ6SUVKVFJYWmxiblFnZTF4eVhHNGdJQ0FnUlhabGJuUkVZWFJoUHpvZ2UxeHlYRzRnSUNBZ0lDQWdJRVYyWlc1MFB6b2dZVzU1TEZ4eVhHNGdJQ0FnSUNBZ0lFTjFjbkpsYm5SRGIydy9PaUJ2WW1wbFkzUXNYSEpjYmlBZ0lDQWdJQ0FnUVhOalB6b2dZbTl2YkdWaGJseHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRUpUUTI5dVptbG5WWEJrWVhSbFpFVjJaVzUwSUdWNGRHVnVaSE1nUWxORmRtVnVkQ0I3WEhKY2JpQWdJQ0JGZG1WdWRFUmhkR0UvT2lCN1hISmNiaUFnSUNBZ0lDQWdSWFpsYm5RL09pQmhibmtzWEhKY2JpQWdJQ0FnSUNBZ1FXTjBhVzl1UHpvZ2MzUnlhVzVuTEZ4eVhHNGdJQ0FnSUNBZ0lFTjFjbkpsYm5SRGIydy9PaUJ2WW1wbFkzUXNYSEpjYmlBZ0lDQWdJQ0FnUVhOalB6b2dZbTl2YkdWaGJseHlYRzRnSUNBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRUpUUm1WMFkyaFNaV052Y21SRmNuSnZja1YyWlc1MElHVjRkR1Z1WkhNZ1FsTkZkbVZ1ZENCN1hISmNiaUFnSUNCRmRtVnVkRVJoZEdFL09pQjdYSEpjYmlBZ0lDQWdJQ0FnUlhabGJuUS9PaUJoYm5rc1hISmNiaUFnSUNBZ0lDQWdVbVZqYjNKa1NXUS9PaUJ6ZEhKcGJtZGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR2x1ZEdWeVptRmpaU0JDVTBabGRHTm9VbVZqYjNKa1JYWmxiblFnWlhoMFpXNWtjeUJDVTBWMlpXNTBJSHRjY2x4dUlDQWdJRVYyWlc1MFJHRjBZVDg2SUh0Y2NseHVJQ0FnSUNBZ0lDQkVZWFJoUHpvZ1lXNTVMRnh5WEc0Z0lDQWdJQ0FnSUUxbGRHRkVZWFJoUHpvZ1FsTkVZWFJoVkdGaWJHVlFZV2RwYm1kTlpYUmhSR0YwWVZ4eVhHNGdJQ0FnSUNBZ0lFVjJaVzUwUHpvZ1lXNTVYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUWxOSGNtbGtWWEJrWVhSbFpFVjJaVzUwSUdWNGRHVnVaSE1nUWxORmRtVnVkQ0I3WEhKY2JpQWdJQ0JGZG1WdWRFUmhkR0UvT2lCN1hISmNiaUFnSUNBZ0lDQWdSM0pwWkQ4NklHOWlhbVZqZEN4Y2NseHVJQ0FnSUNBZ0lDQkZkbVZ1ZEQ4NklHRnVlVnh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUVKVFVtOTNWWEJrWVhSbFpFVjJaVzUwSUdWNGRHVnVaSE1nUWxORmRtVnVkQ0I3WEhKY2JpQWdJQ0JGZG1WdWRFUmhkR0UvT2lCN1hISmNiaUFnSUNBZ0lDQWdVbTkzUHpvZ1lXNTVMRnh5WEc0Z0lDQWdJQ0FnSUVWMlpXNTBQem9nWVc1NVhISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdRbE5HYVdWc1pGVndaR0YwWldSRmRtVnVkQ0JsZUhSbGJtUnpJRUpUUlhabGJuUWdlMXh5WEc0Z0lDQWdSWFpsYm5SRVlYUmhQem9nZTF4eVhHNGdJQ0FnSUNBZ0lGSnZkejg2SUdGdWVTeGNjbHh1SUNBZ0lDQWdJQ0JGZG1WdWREODZJR0Z1ZVN4Y2NseHVJQ0FnSUNBZ0lDQkdhV1ZzWkQ4NklHOWlhbVZqZEZ4eVhHNGdJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElFSlRWMmx1VUc5d1JYWmxiblFnWlhoMFpXNWtjeUJDVTBWMlpXNTBJSHRjY2x4dUlDQWdJRk5yYVhCUWRYTm9PaUJpYjI5c1pXRnVYSEpjYm4xY2NseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkNVMFYyWlc1MFUzVmljMk55YVdKbGNrMXZaR1ZzSUh0Y2NseHVJQ0FnSUV0bGVUb2djM1J5YVc1bkxGeHlYRzRnSUNBZ1JYWmxiblJPWVcxbE9pQnpkSEpwYm1jc1hISmNiaUFnSUNCRFlXeHNZbUZqYXo4NklFSlRSWFpsYm5SSVlXNWtiR1Z5TEZ4eVhHNGdJQ0FnUkdGMFlWTnZkWEpqWlU1aGJXVTZJSE4wY21sdVp5eGNjbHh1SUNBZ0lGWmxjbWxtZVVSaGRHRlRiM1Z5WTJWT1lXMWxQem9nWW05dmJHVmhibHh5WEc1OVhISmNibHh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRlZ5YkNCRFFpQjBlWEJsWEhKY2JpQXFJRUJqWVd4c1ltRmpheUJuWlhSVmNteERZV3hzWW1GamExeHlYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnY0dGblpVbHVaR1Y0WEhKY2JpQXFJRUJ5WlhSMWNtNXpJSHR6ZEhKcGJtZDlJSFZ5YkNCMGJ5QmhZMk5sYzNNZ2JtVjRkQ0J3WVdkbFhISmNiaUFxTDF4eVhHNWxlSEJ2Y25RZ2FXNTBaWEptWVdObElHZGxkRlZ5YkVOaGJHeGlZV05ySUhzZ0tIQmhaMlZKYm1SbGVEb2diblZ0WW1WeUtUb2djM1J5YVc1bklIMDdYSEpjYmx4eVhHNHZMeUJVVDBSUE9pQkdhWGdnZEdobElHOXdkR2x2Ym5NZ1ptOXlJSFJvWlNCaVlYTmxJR05zWVhOeklFSlRSR0YwWVZSaFlteGxTVzV3ZFhRZ1lXNWtJR0ZzYkNCcGRITWdZMmhwYkdSelhISmNibHh5WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUVKVFNXNXdkWFJQY0hScGIyNXpJSHRjY2x4dUlDQWdJRVJoZEdGVGIzVnlZMlZPWVcxbE9pQnpkSEpwYm1jN1hISmNiaUFnSUNCSmJuQjFkRlI1Y0dVL09pQnpkSEpwYm1jN1hISmNiaUFnSUNCRmJHVnRaVzUwU1dRL09pQnpkSEpwYm1jN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdRbE5UWld4bFkzUlBjSFJwYjI1eklHVjRkR1Z1WkhNZ1FsTkpibkIxZEU5d2RHbHZibk5jY2x4dWV5QWdJQ0JjY2x4dUlDQWdJRk5sYkdWamRFOXdkR2x2Ym5NNklFSlRSR0YwWVZSaFlteGxVMlZzWldOMFRHbHpkRWwwWlcxYlhWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdhVzUwWlhKbVlXTmxJRUpUUW5WMGRHOXVUM0IwYVc5dWN5QmxlSFJsYm1SeklFSlRTVzV3ZFhSUGNIUnBiMjV6SUh0Y2NseHVJQ0FnSUVsamIyNC9PaUJ6ZEhKcGJtYzdYSEpjYmlBZ0lDQklZVzVrYkdWeVB6b2dLR0Z5WnpBNklFMXZkWE5sUlhabGJuUXBJRDArSUhadmFXUTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUWxOVFpXeGxZM1J2Y2s5d2RHbHZibk1nWlhoMFpXNWtjeUJDVTBsdWNIVjBUM0IwYVc5dWN5QjdYSEpjYmlBZ0lDQlFjbTl3VG1GdFpUb2djM1J5YVc1bkxGeHlYRzRnSUNBZ1EzTnpRMnhoYzNNNklITjBjbWx1Wnl4Y2NseHVJQ0FnSUZCc1lXTmxTRzlzWkdWeU9pQnpkSEpwYm1jc1hISmNiaUFnSUNCQ2RHNUpaRG9nYzNSeWFXNW5MRnh5WEc0Z0lDQWdSV3hsYldWdWRFbGtPaUJ6ZEhKcGJtY3NYSEpjYmlBZ0lDQkNkRzVEYkdsamF6b2dLSE5sYm1SbGNqb2diMkpxWldOMExDQmxPaUJoYm5rcElEMCtJSFp2YVdSY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUVKVFJHRjBZVlJoWW14bFUyVnNaV04wVEdsemRFbDBaVzBnZTF4eVhHNGdJQ0FnZEdWNGREb2djM1J5YVc1bk8xeHlYRzRnSUNBZ2RtRnNkV1U2SUhOMGNtbHVaenRjY2x4dUlDQWdJR2x6VTJWc1pXTjBaV1E2SUdKdmIyeGxZVzQ3WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdkR1Y0ZEZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUhaaGJIVmxYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJR2x6VTJWc1pXTjBaV1JjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2RHVjRkRG9nYzNSeWFXNW5MQ0IyWVd4MVpUb2djM1J5YVc1bkxDQnBjMU5sYkdWamRHVmtPaUJpYjI5c1pXRnVJRDBnWm1Gc2MyVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMblJsZUhRZ1BTQjBaWGgwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2RXVWdQU0IyWVd4MVpUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpVMlZzWldOMFpXUWdQU0JwYzFObGJHVmpkR1ZrTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFSlRSR0YwWVZSaFlteGxRMjlzUkdWbWFXNXBkR2x2YmlCN1hISmNiaUFnSUNCT1lXMWxPaUJ6ZEhKcGJtYzdYSEpjYmlBZ0lDQkVZWFJoVkhsd1pUb2djM1J5YVc1bk8xeHlYRzRnSUNBZ1YybGtkR2c2SUhOMGNtbHVaenRjY2x4dUlDQWdJRkJ5YjNCT1lXMWxPaUJ6ZEhKcGJtYzdYSEpjYmlBZ0lDQkpjMHRsZVRvZ1ltOXZiR1ZoYmp0Y2NseHVJQ0FnSUVSaGRHRlRiM1Z5WTJVNklFSlRSR0YwWVZSaFlteGxVMlZzWldOMFRHbHpkRWwwWlcxYlhUdGNjbHh1SUNBZ0lFTnZiRk53WVc0NklHNTFiV0psY2p0Y2NseHVJQ0FnSUZKdmQxTndZVzQ2SUc1MWJXSmxjanRjY2x4dUlDQWdJRk5sYkdWamRHOXlSR0YwWVVOQ09pQm5aWFJWY214RFlXeHNZbUZqYXp0Y2NseHVJQ0FnSUZObGJHVmpkRzl5UTI5c2N6b2dRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dVcxMDdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1cyNWhiV1ZkWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJSaGRHRlVlWEJsWFZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUZ0M2FXUjBhRjFjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0JiY0hKdmNFNWhiV1ZkWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUZ0cGMwdGxlVjFjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UWxORVlYUmhWR0ZpYkdWVFpXeGxZM1JNYVhOMFNYUmxiVnRkZlNCYlpHRjBZVk52ZFhKalpWMWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJZMjlzVTNCaGJsMWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmJjbTkzVTNCaGJsMWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdaMlYwVlhKc1EyRnNiR0poWTJ0OUlGdHpaV3hsWTNSdmNrUmhkR0ZEUWwwZ0xTQmhJR05pSUhSdklISmxkSFZ5YmlCMGFHVWdjR0ZuWlNCMWNteGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dVcxMTlJRnR6Wld4bFkzUnZja052YkhOZElDMGdZMjlzY3lCa1pXWWdabTl5SUhObGJHVmpkRzl5WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHNWhiV1UvT2lCemRISnBibWNzSUdSaGRHRlVlWEJsUHpvZ2MzUnlhVzVuTENCM2FXUjBhRDg2SUhOMGNtbHVaeXdnY0hKdmNFNWhiV1UvT2lCemRISnBibWNzSUdselMyVjVQem9nWW05dmJHVmhiaXhjY2x4dUlDQWdJQ0FnSUNCa1lYUmhVMjkxY21ObFB6b2dRbE5FWVhSaFZHRmliR1ZUWld4bFkzUk1hWE4wU1hSbGJWdGRMQ0JqYjJ4VGNHRnVQem9nYm5WdFltVnlMQ0J5YjNkVGNHRnVQem9nYm5WdFltVnlMRnh5WEc0Z0lDQWdJQ0FnSUhObGJHVmpkRzl5UkdGMFlVTkNQem9nWjJWMFZYSnNRMkZzYkdKaFkyc3NJSE5sYkdWamRHOXlRMjlzY3o4NklFSlRSR0YwWVZSaFlteGxRMjlzUkdWbWFXNXBkR2x2Ymx0ZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NU9ZVzFsSUQwZ2JtRnRaVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMa1JoZEdGVWVYQmxJRDBnWkdGMFlWUjVjR1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVYYVdSMGFDQTlJSGRwWkhSb08xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVVISnZjRTVoYldVZ1BTQndjbTl3VG1GdFpUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxrbHpTMlY1SUQwZ2FYTkxaWGs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVFWVhSaFUyOTFjbU5sSUQwZ1pHRjBZVk52ZFhKalpUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZiRk53WVc0Z1BTQmpiMnhUY0dGdU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtOTNVM0JoYmlBOUlISnZkMU53WVc0N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1VFpXeGxZM1J2Y2tSaGRHRkRRaUE5SUhObGJHVmpkRzl5UkdGMFlVTkNPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVMlZzWldOMGIzSkRiMnh6SUQwZ2MyVnNaV04wYjNKRGIyeHpPMXh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUVnWTJGc2JHSmhZMnNnZEhsd1pTQjBieUJuWlhRZ2RHaGxJRzVsZUhRZ2NHRm5aU0JwYmlCMGFHVWdiMlptYkdsdVpTQnRiMlJsWEhKY2JpQXFJRUJqWVd4c1ltRmpheUJuWlhST1pYaDBVR0ZuWlU5bVpteHBibVZjY2x4dUlDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlIQmhaMlZKYm1SbGVGeHlYRzRnS2lCQWNHRnlZVzBnZTI5aWFtVmpkRnRkZlNCa1lYUmhJQzBnWkdGMFlYTmxkRnh5WEc0Z0tpQkFjR0Z5WVcwZ2UwSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdGOUlHMWxkR0ZrWVhSaElDMGdaR0YwWVhObGRHRWdiV1YwWVdSaGRHRmNjbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UyOWlhbVZqZEZ0ZGZTQnlaWFIxY201eklIUm9aU0JrWVhSaElHMXZaR1ZzSUdadmNpQjBhR1VnY21WeGRXVnpkQ0J3WVdkbFhISmNiaUFxTDF4eVhHNWNjbHh1YVc1MFpYSm1ZV05sSUdkbGRFNWxlSFJRWVdkbFQyWm1iR2x1WlNCN0lDaHdZV2RsU1c1a1pYZzZJRzUxYldKbGNpd2daR0YwWVRvZ2IySnFaV04wVzEwc0lHMWxkR0ZFWVhSaE9pQkNVMFJoZEdGVVlXSnNaVkJoWjJsdVowMWxkR0ZFWVhSaEtUb2diMkpxWldOMFcxMGdmVHRjY2x4dVhISmNibHh5WEc1Y2NseHVYSEpjYm1WNGNHOXlkQ0JqYkdGemN5QkNVMFJoZEdGVVlXSnNaVVJoZEdGVGIzVnlZMlVnZTF4eVhHNGdJQ0FnYm1GdFpUb2dZVzU1TzF4eVhHNGdJQ0FnWkdGMFlUb2dZVzU1TzF4eVhHNGdJQ0FnYVhOU1pXMXZkR1U2SUdGdWVUdGNjbHh1SUNBZ0lIVnliRG9nS0hCaFoyVTZJR0Z1ZVNrZ1BUNGdZVzU1TzF4eVhHNGdJQ0FnWjJWMFVHRm5aVTltWm14cGJtVkRRam9nWVc1NU8xeHlYRzVjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnVZVzFsWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTN0cGJtbDBSR0YwWVRvZ2IySnFaV04wVzEwN2JXVjBZVVJoZEdFNklFSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdFN2ZYMGdhVzVwZEVSaGRHRmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdZbTl2YkdWaGJuMGdhWE5TWlcxdmRHVmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdaMlYwVlhKc1EyRnNiR0poWTJ0OUlIVnliQ0F0SUVFZ1kySWdkR2hoZENCM2FXeHNJR0ZqWTJWd2RDQmhJSEJoWjJVZ2JuVnRZbVZ5SUdGdVpDQnlaWFIxY201eklIUm9aU0IxY213Z2RHOGdkR2hsSUc1bGVIUWdjR0ZuWlZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0blpYUk9aWGgwVUdGblpVOW1abXhwYm1WOUlHZGxkRkJoWjJWUFptWnNhVzVsSUMwZ1FTQmpZV3hzWW1GamF5QjBlWEJsSUhSdklHZGxkQ0IwYUdVZ2JtVjRkQ0J3WVdkbElHbHVJSFJvWlNCdlptWnNhVzVsSUcxdlpHVmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYm1GdFpUb2djM1J5YVc1bkxDQnBibWwwUkdGMFlUb2dleUJwYm1sMFJHRjBZVG9nYjJKcVpXTjBXMTA3SUcxbGRHRkVZWFJoT2lCQ1UwUmhkR0ZVWVdKc1pWQmhaMmx1WjAxbGRHRkVZWFJoT3lCOUxGeHlYRzRnSUNBZ0lDQWdJR2x6VW1WdGIzUmxPaUJpYjI5c1pXRnVMQ0IxY213NklHZGxkRlZ5YkVOaGJHeGlZV05ySUQwZ0tIQmhaMlVwSUQwK0lIVnVaR1ZtYVc1bFpDd2daMlYwVUdGblpVOW1abXhwYm1VNklHZGxkRTVsZUhSUVlXZGxUMlptYkdsdVpTQTlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJRzVoYldVN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhJRDBnYVc1cGRFUmhkR0U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzFKbGJXOTBaU0E5SUdselVtVnRiM1JsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhKc0lEMGdkWEpzTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WjJWMFVHRm5aVTltWm14cGJtVkRRaUE5SUdkbGRGQmhaMlZQWm1ac2FXNWxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUVKVFJHRjBZVlJoWW14bFQzQjBhVzl1Y3lCN1hISmNiaUFnSUNCbmNtbGtTV1E2SUhOMGNtbHVaenRjY2x4dUlDQWdJR052Ym5SaGFXNWxja2xrT2lCemRISnBibWM3WEhKY2JpQWdJQ0JqYjJ4RVpXWnBibWwwYVc5dU9pQkNVMFJoZEdGVVlXSnNaVU52YkVSbFptbHVhWFJwYjI1YlhUdGNjbHh1SUNBZ0lHUmhkR0ZUYjNWeVkyVTZJRUpUUkdGMFlWUmhZbXhsUkdGMFlWTnZkWEpqWlR0Y2NseHVJQ0FnSUdselVtVmhaRzl1YkhrNklHSnZiMnhsWVc0N1hISmNiaUFnSUNCbGJtRmliR1ZKYm1acGJtbDBaVk5qY205c2JEb2dZbTl2YkdWaGJqdGNjbHh1SUNBZ0lHTmhZMmhsVW1WemNHOXVjMlZ6T2lCaWIyOXNaV0Z1TzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnWjNKcFpFbGtJRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR052Ym5SaGFXNWxja2xrWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKVFJHRjBZVlJoWW14bFEyOXNSR1ZtYVc1cGRHbHZibHRkZlNCamIyeEVaV1pwYm1sMGFXOXVJRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDVTBSaGRHRlVZV0pzWlVSaGRHRlRiM1Z5WTJWOUlHUmhkR0ZUYjNWeVkyVWdYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMkp2YjJ4bFlXNTlJR2x6VW1WaFpHOXViSGxjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1ozSnBaRWxrT2lCemRISnBibWNzSUdOdmJuUmhhVzVsY2tsa09pQnpkSEpwYm1jc1hISmNiaUFnSUNBZ0lDQWdZMjlzUkdWbWFXNXBkR2x2YmpvZ1FsTkVZWFJoVkdGaWJHVkRiMnhFWldacGJtbDBhVzl1VzEwc0lHUmhkR0ZUYjNWeVkyVTZJRUpUUkdGMFlWUmhZbXhsUkdGMFlWTnZkWEpqWlN3Z2FYTlNaV0ZrYjI1c2VUb2dZbTl2YkdWaGJpQTlJR1poYkhObEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW5jbWxrU1dRZ1BTQm5jbWxrU1dRN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBZV2x1WlhKSlpDQTlJR052Ym5SaGFXNWxja2xrTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5c1JHVm1hVzVwZEdsdmJpQTlJR052YkVSbFptbHVhWFJwYjI0N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhVMjkxY21ObElEMGdaR0YwWVZOdmRYSmpaVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWx6VW1WaFpHOXViSGtnUFNCcGMxSmxZV1J2Ym14NU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWhZbXhsU1c1bWFXNXBkR1ZUWTNKdmJHd2dQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyRmphR1ZTWlhOd2IyNXpaWE1nUFNCbVlXeHpaVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdOc1lYTnpJRUpUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRWdlMXh5WEc0Z0lDQWdjR0ZuWlVsdVpHVjRPaUJ1ZFcxaVpYSTdYSEpjYmlBZ0lDQndZV2RsVTJsNlpUb2diblZ0WW1WeU8xeHlYRzRnSUNBZ2RHOTBZV3hTWldOdmNtUnpPaUJ1ZFcxaVpYSTdYSEpjYmlBZ0lDQjBiM1JoYkZCaFoyVnpPaUJ1ZFcxaVpYSTdYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J3WVdkbFNXNWtaWGhjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J3WVdkbFUybDZaVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSFJ2ZEdGc1VtVmpiM0prYzF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdZV2RsU1c1a1pYZzZJRzUxYldKbGNpQTlJREVzSUhCaFoyVlRhWHBsT2lCdWRXMWlaWElnUFNBeE1Dd2dkRzkwWVd4U1pXTnZjbVJ6T2lCdWRXMWlaWElnUFNBeE1Da2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0ZuWlVsdVpHVjRJRDBnY0dGblpVbHVaR1Y0TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGblpWTnBlbVVnUFNBaGNHRm5aVk5wZW1VZ2ZId2djR0ZuWlZOcGVtVWdQRDBnTUNBL0lERXdJRG9nY0dGblpWTnBlbVU3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNSaGJGSmxZMjl5WkhNZ1BTQjBiM1JoYkZKbFkyOXlaSE03WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNSaGJGQmhaMlZ6SUQwZ1RXRjBhQzVqWldsc0tIUm9hWE11ZEc5MFlXeFNaV052Y21SeklDOGdkR2hwY3k1d1lXZGxVMmw2WlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdRbE5FWVhSaFZHRmliR1ZRWVdkcGJtRjBhVzl1VDNCMGFXOXVjeUI3WEhKY2JpQWdJQ0JrYzA1aGJXVTZJR0Z1ZVR0Y2NseHVJQ0FnSUhCaFoybHVaMDFsZEdGRVlYUmhPaUJoYm5rN1hISmNiaUFnSUNCdVpYaDBVR0ZuWlVOaGJHeGlZV05yT2lBb2NHRm5aVG9nWVc1NUtTQTlQaUIyYjJsa08xeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdSelRtRnRaVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDVTBSaGRHRlVZV0pzWlZCaFoybHVaMDFsZEdGRVlYUmhmU0J3WVdkcGJtZE5aWFJoUkdGMFlWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhrYzA1aGJXVTZJSE4wY21sdVp5d2djR0ZuYVc1blRXVjBZVVJoZEdFNklFSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdFc0lHNWxlSFJRWVdkbFEyRnNiR0poWTJzZ1BTQW9jR0ZuWlRvZ2JuVnRZbVZ5S1NBOVBpQjdJSDBwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1SelRtRnRaU0E5SUdSelRtRnRaVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoWjJsdVowMWxkR0ZFWVhSaElEMGdjR0ZuYVc1blRXVjBZVVJoZEdFN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dVpYaDBVR0ZuWlVOaGJHeGlZV05ySUQwZ2JtVjRkRkJoWjJWRFlXeHNZbUZqYXp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVYSEpjYm1WNGNHOXlkQ0JqYkdGemN5QkNVMFJoZEdGVVlXSnNaVWgwZEhCRGJHbGxiblJQY0hScGIyNXpJSHRjY2x4dUlDQWdJSFZ5YkRvZ1lXNTVPMXh5WEc0Z0lDQWdiV1YwYUc5a09pQmhibms3WEhKY2JpQWdJQ0JvWldGa1pYSnpPaUJoYm5rN1hISmNiaUFnSUNCeVpXTnZjbVJKWkRvZ1lXNTVPMXh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIVnliRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJRzFsZEdodlpGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSYlhYMGdhR1ZoWkdWeWMxeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlISmxZMjl5WkVsa1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSFZ5YkRvZ2MzUnlhVzVuTENCdFpYUm9iMlE2SUhOMGNtbHVaeXdnYUdWaFpHVnljem9nYjJKcVpXTjBXMTBnUFNCMWJtUmxabWx1WldRc0lISmxZMjl5WkVsa09pQnpkSEpwYm1jZ1BTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMblZ5YkNBOUlIVnliRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbTFsZEdodlpDQTlJRzFsZEdodlpEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtaGxZV1JsY25NZ1BTQm9aV0ZrWlhKek8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVmpiM0prU1dRZ1BTQnlaV052Y21SSlpEdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1WEhKY2JpOHZJR1Y0Y0c5eWRDQmpiR0Z6Y3lCQ1UwUmhkR0ZVWVdKc1pVTnZiRk5sZEhScGJtZHpJSHRjY2x4dUx5OGdJQ0FnSUhkcFpIUm9PaUJ6ZEhKcGJtYzdYSEpjYmk4dklDQWdJQ0IyYVhOcFlteGxPaUJpYjI5c1pXRnVPMXh5WEc0dkx5QWdJQ0FnYzI5eWREb2djM1J5YVc1bk8xeHlYRzR2THlBZ0lDQWdjRzl6YVhScGIyNDZJRzUxYldKbGNqdGNjbHh1THk4Z0lDQWdJQzhxS2x4eVhHNHZMeUFnSUNBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIZHBaSFJvWEhKY2JpOHZJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlIWnBjMmxpYkdWY2NseHVMeThnSUNBZ0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnpiM0owSUdGelkzeGtaWE5qWEhKY2JpOHZJQ0FnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2NHOXphWFJwYjI1Y2NseHVMeThnSUNBZ0lDQXFMMXh5WEc0dkx5QWdJQ0FnWTI5dWMzUnlkV04wYjNJb2QybGtkR2c2SUhOMGNtbHVaeXdnZG1semFXSnNaVG9nWW05dmJHVmhiaXdnYzI5eWREb2djM1J5YVc1bkxDQndiM05wZEdsdmJqb2diblZ0WW1WeUtTQjdYSEpjYmk4dklDQWdJQ0FnSUNBZ2RHaHBjeTUzYVdSMGFDQTlJSGRwWkhSb08xeHlYRzR2THlBZ0lDQWdJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFpwYzJsaWJHVTdYSEpjYmk4dklDQWdJQ0FnSUNBZ2RHaHBjeTV6YjNKMElEMGdjMjl5ZER0Y2NseHVMeThnSUNBZ0lDQWdJQ0IwYUdsekxuQnZjMmwwYVc5dUlEMGdjRzl6YVhScGIyNDdYSEpjYmk4dklDQWdJQ0I5WEhKY2JpOHZJSDFjY2x4dVhISmNibVY0Y0c5eWRDQnBiblJsY21aaFkyVWdRbE5EYjJ4MWJXNVRaWFIwYVc1bmN5QjdYSEpjYmlBZ0lDQlhhV1IwYURvZ2MzUnlhVzVuWEhKY2JpQWdJQ0JXYVhOcFlteGxPaUJpYjI5c1pXRnVYSEpjYmlBZ0lDQkJjMk5sYm1ScGJtYzZJR0p2YjJ4bFlXNWNjbHh1SUNBZ0lGQnZjMmwwYVc5dU9pQnVkVzFpWlhKY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQkNVMUp2ZDA5d2RHbHZibk1nZTF4eVhHNGdJQ0FnWkdGMFlWTnZkWEpqWlU1aGJXVTZJSE4wY21sdVp6dGNjbHh1SUNBZ0lHZHlhV1JKWkRvZ2MzUnlhVzVuTzF4eVhHNGdJQ0FnWjNKcFpFaGxZV1JsY2o4NklHSnZiMnhsWVc0N1hISmNiaUFnSUNCcGMxUmxiWEJzWVhSbFVtOTNQem9nWW05dmJHVmhianRjY2x4dUlDQWdJR052Ym5SaGFXNWxja2xrUHpvZ2MzUnlhVzVuWEhKY2JuMWNjbHh1WEhKY2JseHlYRzRpTENKcGJYQnZjblFnZXlCQ1UwUmhkR0ZVWVdKc1pVSmhjMlVnZlNCbWNtOXRJRndpTGk5Q1UwUmhkR0ZVWVdKc1pVSmhjMlZjSWp0Y2NseHVhVzF3YjNKMElIc2dRbE5KYm5CMWRFOXdkR2x2Ym5NZ2ZTQm1jbTl0SUZ3aUxpNHZZMjl0Ylc5dVZIbHdaWE12WTI5dGJXOXVMWFI1Y0dWelhDSTdYSEpjYmk4dklHbHRjRzl5ZENCN0lFVjJaVzUwSUgwZ1puSnZiU0JjSW1weGRXVnllVndpTzF4eVhHNWNjbHh1WTJ4aGMzTWdRbE5FWVhSaFZHRmliR1ZKYm5CMWRDQmxlSFJsYm1SeklFSlRSR0YwWVZSaFlteGxRbUZ6WlNCN1hISmNiaUFnSUNCdmNIUnBiMjV6T2lCQ1UwbHVjSFYwVDNCMGFXOXVjMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHOXdkR2x2Ym5NNklFSlRTVzV3ZFhSUGNIUnBiMjV6S1NCN1hISmNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEpsYm1SbGNpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TGtsdWNIVjBWSGx3WlNBOVBUMGdKM05sYkdWamRDY3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM05sYkdWamRDY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaDBhR2x6TG05d2RHbHZibk11U1c1d2RYUlVlWEJsSUQwOVBTQW5ZblYwZEc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RpZFhSMGIyNG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMkowYmljc0lDZGlkRzR0YjNWMGJHbHVaUzF3Y21sdFlYSjVKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHBibkIxZENjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUmJKM1I1Y0dVblhTQTlJSFJvYVhNdWIzQjBhVzl1Y3k1SmJuQjFkRlI1Y0dVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGRDQjJZV3dvS1RvZ1ltOXZiR1ZoYmlCOElITjBjbWx1WnlCOElHNTFiV0psY2lCOElITjBjbWx1WjF0ZElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtVnNaVzFsYm5RcElISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1Wc1pXMWxiblFnYVc1emRHRnVZMlZ2WmlCSVZFMU1TVzV3ZFhSRmJHVnRaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11U1c1d2RYUlVlWEJsSUQwOVBTQW5ZMmhsWTJ0aWIzZ25LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpXeGxiV1Z1ZEM1amFHVmphMlZrTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVNXNXdkWFJVZVhCbElEMDlQU0FuYm5WdFltVnlKeWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtVnNaVzFsYm5RdWRtRnNkV1ZCYzA1MWJXSmxjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCeVpYUjFjbTRnZEdocGN5NWxiR1Z0Wlc1MExuWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3hsYldWdWRGc25kbUZzZFdVblhUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J6WlhRZ2RtRnNLSFk2SUdKdmIyeGxZVzRnZkNCemRISnBibWNnZkNCdWRXMWlaWElnZkNCemRISnBibWRiWFNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVpXeGxiV1Z1ZENrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMa2x1Y0hWMFZIbHdaU0E5UFQwZ0oyTm9aV05yWW05NEp5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBXeWRqYUdWamEyVmtKMTBnUFNCMk8xeHlYRzRnSUNBZ0lDQWdJR1ZzYzJWY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MFd5ZDJZV3gxWlNkZElEMGdkanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnYVc1MmIydGxJR05vWVc1blpTQmxkbVZ1ZENCcFppQnBkSE1nWVNCelpXeGxZM1FnYVc1d2RYUmNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMa2x1Y0hWMFZIbHdaU0E5UFQwZ0ozTmxiR1ZqZENjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYUdGdVoyVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCVWFHbHpJRzFsZEdodlpDQnphRzkxYkdRZ1ltVWdkWE5sWkNCM2FYUm9JR1J5YjNCa2IzZHVjeUIzYUdWeVpTQnFkWE4wSUhObGRIUnBibWNnZEdobElIWmhiQ0J2WmlCbGJHVnRaVzUwSUdseklHNXZkQ0JsYm05MVoyaGNjbHh1SUNBZ0lDQXFJSFJvYVhNZ2JXVjBhRzlrSUdWdWMzVnlaU0IwYUdGMElDZGphR0Z1WjJVbklHbHpJR05oYkd4bFpDQmhablJsY2lBbmRtRnNKeUJ6YnlCMGFHRjBJSFpoYkhWbElHOW1JSFJvWlNCelpXeGxZM1J2Y2lCcGN5QnpaWFFnY0hKdmNHVnliSGxjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0IySUMwZ2RtRnNkV1ZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJWMElIWmhiRVY0ZENoMk9pQnpkSEpwYm1jZ2ZDQnVkVzFpWlhJZ2ZDQnpkSEpwYm1kYlhTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbUZzSUQwZ2RqdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTm9ZVzVuWlNncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2RsZENCdGIyUmxiRTVoYldVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVSEp2Y0NnblpHRjBZUzF3Y205d2JtRnRaU2NwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lITmxkQ0J0YjJSbGJFNWhiV1VvZGlrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISnZjQ2duWkdGMFlTMXdjbTl3Ym1GdFpTY3NJSFlwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkQ0J5WldGa2IyNXNlU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxiR1Z0Wlc1MElHbHVjM1JoYm1ObGIyWWdTRlJOVEVsdWNIVjBSV3hsYldWdWRDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV3hsYldWdWRDNXlaV0ZrVDI1c2VUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhObGRDQnlaV0ZrYjI1c2VTaDJLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVpXeGxiV1Z1ZENCcGJuTjBZVzVqWlc5bUlFaFVUVXhKYm5CMWRFVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbkpsWVdSUGJteDVJRDBnZGp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkQ0JrYVhOaFlteGxaQ2dwT2lCaWIyOXNaV0Z1SUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxiR1Z0Wlc1MElHbHVjM1JoYm1ObGIyWWdTRlJOVEVsdWNIVjBSV3hsYldWdWRDQjhmQ0IwYUdsekxtVnNaVzFsYm5RZ2FXNXpkR0Z1WTJWdlppQklWRTFNVTJWc1pXTjBSV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVsYkdWdFpXNTBMbVJwYzJGaWJHVmtPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiQ0E5SUhSb2FYTXVaMlYwVUhKdmNDZ25aR2x6WVdKc1pXUW5LU0E5UFQwZ0ozUnlkV1VuSUQ4Z2RISjFaU0E2SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd3N1hISmNibHh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhObGRDQmthWE5oWW14bFpDaDJPaUJpYjI5c1pXRnVLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVZzWlcxbGJuUWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVNXNXdkWFJGYkdWdFpXNTBJSHg4SUhSb2FYTXVaV3hsYldWdWRDQnBibk4wWVc1alpXOW1JRWhVVFV4VFpXeGxZM1JGYkdWdFpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1a2FYTmhZbXhsWkNBOUlIWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIyWVd3Z1BTQjJJRDA5UFNCMGNuVmxJRDhnWENKMGNuVmxYQ0lnT2lCY0ltWmhiSE5sWENJN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d2NtOXdLQ2RrYVhOaFlteGxaQ2NzSUhaaGJDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWjJWMElHbHpTMlY1S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRGQnliM0FvSjJSaGRHRXRhMlY1WTI5c2RXMXVKeWtnUFQwOUlDZDBjblZsSnp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmx4eVhHNGdJQ0FnYzJWMElHbHpTMlY1S0hZcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0FvSjJSaGRHRXRhMlY1WTI5c2RXMXVKeXdnZGlrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMnh2Ym1Vb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnNiMjVsS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZV1JrUkc5MVlteGxRMnhwWTJ0RmRtVnVkQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduWkdKc1kyeHBZMnNuTENBb1pTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXZkR2xtZVV4cGMzUmxibVZ5Y3loMGFHbHpMbUZ3Y0VSaGRHRkZkbVZ1ZEhNdVQwNWZVazlYWDBSUFZVSk1SVjlEVEVsRFMwVkVMQ0I3SUVWMlpXNTBSR0YwWVRvZ2V5QkZkbVZ1ZERvZ1pTQjlMQ0JFWVhSaFUyOTFjbU5sVG1GdFpUb2dkR2hwY3k1dmNIUnBiMjV6TGtSaGRHRlRiM1Z5WTJWT1lXMWxJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTJoaGJtZGxLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJGZG1WdWRDZ25ZMmhoYm1kbEp5a3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZKYm5CMWRDQjlJaXdpYVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWSmJuQjFkQ0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFNXNXdkWFJjSWp0Y2NseHVhVzF3YjNKMElIc2dRbE5KYm5CMWRFOXdkR2x2Ym5NZ2ZTQm1jbTl0SUZ3aUxpNHZZMjl0Ylc5dVZIbHdaWE12WTI5dGJXOXVMWFI1Y0dWelhDSTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUWxORVlYUmhWR0ZpYkdWRGFHVmphMEp2ZUNCbGVIUmxibVJ6SUVKVFJHRjBZVlJoWW14bFNXNXdkWFFnZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVk52ZFhKalpVNWhiV1U2SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J2Y0hScGIyNXpPaUJDVTBsdWNIVjBUM0IwYVc5dWN5QTlJSHNnUkdGMFlWTnZkWEpqWlU1aGJXVTZJR1JoZEdGVGIzVnlZMlZPWVcxbExDQkpibkIxZEZSNWNHVTZJRndpWTJobFkydGliM2hjSWlCOU8xeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUtHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMnh2Ym1Vb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITmpJRDBnYzNWd1pYSXVZMnh2Ym1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1l5QTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pVTm9aV05yUW05NEtIUm9hWE11YzJoRGJHOXVaU2gwYUdsekxtOXdkR2x2Ym5NcEtUdGNjbHh1SUNBZ0lDQWdJQ0JqTG1Wc1pXMWxiblFnUFNCell5NWxiR1Z0Wlc1ME8xeHlYRzRnSUNBZ0lDQWdJR011WTJocGJHUnlaVzRnUFNCell5NWphR2xzWkhKbGJqdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRmtaRVJ2ZFdKc1pVTnNhV05yUlhabGJuUW9LVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWXp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVU52YkVSbFptbHVhWFJwYjI0Z2ZTQm1jbTl0SUZ3aUxpNHZZMjl0Ylc5dVZIbHdaWE12WTI5dGJXOXVMWFI1Y0dWelhDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFFtRnpaU0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFFtRnpaVndpTzF4eVhHNXBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVU5vWldOclFtOTRJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWRGFHVmphMEp2ZUZ3aU8xeHlYRzVwYlhCdmNuUWdleUJDVTBSaGRHRlVZV0pzWlVsdWNIVjBJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWSmJuQjFkRndpTzF4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFSlRSR0YwWVZSaFlteGxRMlZzYkNCbGVIUmxibVJ6SUVKVFJHRjBZVlJoWW14bFFtRnpaU0I3WEhKY2JseHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTJKdmIyeGxZVzU5WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdselNHVmhaR1Z5T2lCaWIyOXNaV0Z1TzF4eVhHNGdJQ0FnYjNCMGFXOXVjem9nUWxORVlYUmhWR0ZpYkdWRGIyeEVaV1pwYm1sMGFXOXVPMXh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKVFJHRjBZVlJoWW14bFEyOXNSR1ZtYVc1cGRHbHZibjBnVzI5d2RHbHZibk5kWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHOXdkR2x2Ym5NNklFSlRSR0YwWVZSaFlteGxRMjlzUkdWbWFXNXBkR2x2Yml3Z2FYTklaV0ZrWlhJZ1BTQm1ZV3h6WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0J1WlhjZ1FsTkVZWFJoVkdGaWJHVkRiMnhFWldacGJtbDBhVzl1S0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMwaGxZV1JsY2lBOUlHbHpTR1ZoWkdWeU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnliM2RUY0dGdUlEMGdkR2hwY3k1dmNIUnBiMjV6SUQ4Z2RHaHBjeTV2Y0hScGIyNXpMbEp2ZDFOd1lXNGdPaUIxYm1SbFptbHVaV1E3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052YkZOd1lXNGdQU0IwYUdsekxtOXdkR2x2Ym5NZ1B5QjBhR2x6TG05d2RHbHZibk11UTI5c1UzQmhiaUE2SUhWdVpHVm1hVzVsWkR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MElEMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYzBobFlXUmxjaUE5UFQwZ2RISjFaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QwYUNjcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmtKeWxjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5JWldGa1pYSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM052Y25ScGJtY25MQ0FuWkhNdFkyOXNKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHliM2RUY0dGdUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNBb0ozSnZkMU53WVc0bkxDQnliM2RUY0dGdUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR052YkZOd1lXNHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0hKdmNDZ25ZMjlzVTNCaGJpY3NJR052YkZOd1lXNHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGRFTmxiR3hVWlhoMEtDazZJSE4wY21sdVp5QjhJRzUxYldKbGNpQjhJR0p2YjJ4bFlXNGdmQ0J6ZEhKcGJtZGJYU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR05vYVd4a0lEMGdkR2hwY3k1amFHbHNaSEpsYmxzd1hUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXTm9hV3hrS1NCeVpYUjFjbTRnWENKY0lqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR05vYVd4a0xtVnNaVzFsYm5RZ2FXNXpkR0Z1WTJWdlppQklWRTFNU1c1d2RYUkZiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYUdsc1pDQnBibk4wWVc1alpXOW1JRUpUUkdGMFlWUmhZbXhsUTJobFkydENiM2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamFHbHNaQzVsYkdWdFpXNTBMbU5vWldOclpXUWdLeUJjSWx3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0dOb2FXeGtJR2x1YzNSaGJtTmxiMllnUWxORVlYUmhWR0ZpYkdWSmJuQjFkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOb2FXeGtMblpoYkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOb2FXeGtMbWRsZEZSbGVIUW9LVHRjY2x4dVhISmNibHh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdOc2IyNWxLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJR1JsWW5WbloyVnlPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpZeUE5SUhOMWNHVnlMbU5zYjI1bEtDazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHTWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVkRaV3hzS0hSb2FYTXVjMmhEYkc5dVpTaDBhR2x6TG05d2RHbHZibk1wTENCMGFHbHpMbWx6U0dWaFpHVnlLVHRjY2x4dUlDQWdJQ0FnSUNCakxtTm9hV3hrY21WdUlEMGdjMk11WTJocGJHUnlaVzQ3WEhKY2JpQWdJQ0FnSUNBZ1l5NWxiR1Z0Wlc1MElEMGdjMk11Wld4bGJXVnVkRHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWXp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVUpoYzJVZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVUpoYzJWY0lqdGNjbHh1YVcxd2IzSjBJSHNnVTJWemMybHZibE4wYjNKaFoyVlRaWEoyYVdObExDQmhjSEJFWVhSaFJYWmxiblJ6SUgwZ1puSnZiU0JjSWk0dUwzTmxjblpwWTJWelhDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJtVjBZMmhTWldOdmNtUkZjbkp2Y2tWMlpXNTBMQ0JDVTBSaGRHRlVZV0pzWlVoMGRIQkRiR2xsYm5SUGNIUnBiMjV6TENCQ1UwWmxkR05vVW1WamIzSmtSWFpsYm5Rc0lFSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdFZ2ZTQm1jbTl0SUZ3aUxpNHZZMjl0Ylc5dVZIbHdaWE12WTI5dGJXOXVMWFI1Y0dWelhDSTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUWxORVlYUmhWR0ZpYkdWSWRIUndRMnhwWlc1MElHVjRkR1Z1WkhNZ1FsTkVZWFJoVkdGaWJHVkNZWE5sSUh0Y2NseHVJQ0FnSUhObGMzTnBiMjVUZEc5eVlXZGxPaUJUWlhOemFXOXVVM1J2Y21GblpWTmxjblpwWTJVN1hISmNiaUFnSUNCallXTm9aVkpsYzNCdmJuTmxjem9nWW05dmJHVmhianRjY2x4dVhISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHpaWE56YVc5dVUzUnZjbUZuWlRvZ1UyVnpjMmx2YmxOMGIzSmhaMlZUWlhKMmFXTmxMQ0JrWVhSaFUyOTFjbU5sVG1GdFpUb2djM1J5YVc1bktTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZ3Y0VSaGRHRkZkbVZ1ZEhNZ1BTQmhjSEJFWVhSaFJYWmxiblJ6TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWemMybHZibE4wYjNKaFoyVWdQU0J6WlhOemFXOXVVM1J2Y21GblpUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZUYjNWeVkyVk9ZVzFsSUQwZ1pHRjBZVk52ZFhKalpVNWhiV1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVdOb1pWSmxjM0J2Ym5ObGN5QTlJR1poYkhObE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbE5FWVhSaFZHRmliR1ZJZEhSd1EyeHBaVzUwVDNCMGFXOXVjMzBnYjNCMGFXOXVjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhRb2IzQjBhVzl1Y3pvZ1FsTkVZWFJoVkdGaWJHVklkSFJ3UTJ4cFpXNTBUM0IwYVc5dWN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklHUmxZblZuWjJWeU8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHTmhZMmhsSUQwZ1gzUm9hWE11WTJGamFHVlNaWE53YjI1elpYTTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHTmhZMmhsSUQwOVBTQjBjblZsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2h2Y0hScGIyNXpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnZEdocGN5NXpaWE56YVc5dVUzUnZjbUZuWlM1blpYUkpkR1Z0S0d0bGVTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVibTkwYVdaNVVtVnpjRzl1YzJVb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjbVZ4ZFdWemRDQTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a09pQW5SMFZVSnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWaFpHVnljem9nYjNCMGFXOXVjeTVvWldGa1pYSnpJRDhnYjNCMGFXOXVjeTVvWldGa1pYSnpJRG9nZTMxY2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1aWFJqYUNodmNIUnBiMjV6TG5WeWJDd2djbVZ4ZFdWemRDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xuUm9aVzRvY21WemNHOXVjMlVnUFQ0Z2NtVnpjRzl1YzJVdWFuTnZiaWdwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaGtZWFJoSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoallXTm9aU0E5UFQwZ2RISjFaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTmxjM05wYjI1VGRHOXlZV2RsTG1Ga1pFbDBaVzBvYTJWNUxDQmtZWFJoTENCdVpYY2dSR0YwWlNoRVlYUmxMbTV2ZHlncElDc2dLREV3SUNvZ05qQWdLaUF4TURBd0tTa3BPeUF2THlCbGVIQnBjbVZ6SUdsdUlERXdJRzFwYm5WMFpYTmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbTV2ZEdsbWVWSmxjM0J2Ym5ObEtHUmhkR0VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WTJGMFkyZ29aWEp5YjNJZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVibTltYVdaNVJYSnliM0lvWlhKeWIzSXNJRzl3ZEdsdmJuTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVnh5WEc1Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdibTkwYVdaNVVtVnpjRzl1YzJVb2NtVnpjRzl1YzJVNklHRnVlU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabVYwWTJoU1pXTnZjbVJGZG1WdWREb2dRbE5HWlhSamFGSmxZMjl5WkVWMlpXNTBJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUhSb2FYTXVaR0YwWVZOdmRYSmpaVTVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkZkbVZ1ZEVSaGRHRTZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVZWFJoT2lCeVpYTndiMjV6WlM1cGRHVnRjeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5aWFJoUkdGMFlUb2dibVYzSUVKVFJHRjBZVlJoWW14bFVHRm5hVzVuVFdWMFlVUmhkR0VvY21WemNHOXVjMlV1YldWMFlVUmhkR0V1Y0dGblpVbHVaR1Y0TENCeVpYTndiMjV6WlM1dFpYUmhSR0YwWVM1d1lXZGxVMmw2WlN3Z2NtVnpjRzl1YzJVdWJXVjBZVVJoZEdFdWRHOTBZV3hTWldOdmNtUnpLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHBiblpoYkdsa0lISmxjM0J2Ym5ObExpQk5ZV3RsSUhOMWNtVWdjbVZ6Y0c5dWMyVWdhR0YyWlNCbWFXVnNaSE02SUdsMFpXMXplMkZ5Y21GNVcyOWlhbVZqZEYxOUxDQnRaWFJoUkdGMFlTQjdjR0ZuWlVsdVpHVjRMQ0J3WVdkbFUybDZaU3dnZEc5MFlXeFNaV052Y21SemZTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG01dmRHbG1lVXhwYzNSbGJtVnljeWgwYUdsekxtRndjRVJoZEdGRmRtVnVkSE11VDA1ZlJrVlVRMGhmUjFKSlJGOVNSVU5QVWtRc0lHWmxkR05vVW1WamIzSmtSWFpsYm5RcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJRzV2Wm1sbWVVVnljbTl5S0dWeWNtOXlPaUJLVVhWbGNua3VhbkZZU0ZJOFlXNTVQaXdnYjNCMGFXOXVjem9nUWxORVlYUmhWR0ZpYkdWSWRIUndRMnhwWlc1MFQzQjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCbGNuSkZkbVZ1ZERvZ1FsTkdaWFJqYUZKbFkyOXlaRVZ5Y205eVJYWmxiblFnUFNCN0lFUmhkR0ZUYjNWeVkyVk9ZVzFsT2lCMGFHbHpMbVJoZEdGVGIzVnlZMlZPWVcxbExDQkZkbVZ1ZEVSaGRHRTZJSHNnUlhabGJuUTZJR1Z5Y205eUxDQlNaV052Y21SSlpEb2diM0IwYVc5dWN5NXlaV052Y21SSlpDQjlJSDA3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV1YjNScFpubE1hWE4wWlc1bGNuTW9kR2hwY3k1aGNIQkVZWFJoUlhabGJuUnpMazlPWDBaRlZFTklYMGRTU1VSZlVrVkRUMUpFWDBWU1VrOVNMQ0JsY25KRmRtVnVkQ2s3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVkNZWE5sSUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVkNZWE5sWENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsVUdGbmFXNWhkR2x2Yms5d2RHbHZibk1nZlNCbWNtOXRJRndpTGk0dlkyOXRiVzl1Vkhsd1pYTXZZMjl0Ylc5dUxYUjVjR1Z6WENJN1hISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdRbE5FWVhSaFZHRmliR1ZRWVdkcGJtRjBhVzl1SUdWNGRHVnVaSE1nUWxORVlYUmhWR0ZpYkdWQ1lYTmxJSHRjY2x4dUlDQWdJRzl3ZEdsdmJuTTZJRUpUUkdGMFlWUmhZbXhsVUdGbmFXNWhkR2x2Yms5d2RHbHZibk03WEhKY2JpQWdJQ0JzYVhOMFNXUTZJSE4wY21sdVp6dGNjbHh1SUNBZ0lHTnZiblJoYVc1bGNrbGtPaUJ6ZEhKcGJtYzdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwSlRSR0YwWVZSaFlteGxVR0ZuYVc1aGRHbHZiazl3ZEdsdmJuTjlJRzl3ZEdsdmJuTmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjem9nUWxORVlYUmhWR0ZpYkdWUVlXZHBibUYwYVc5dVQzQjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdiM0IwYVc5dWN6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxteHBjM1JKWkNBOUlHQndaMTlzYVhOMFh5UjdkR2hwY3k1dmNIUnBiMjV6TG1SelRtRnRaWDFnTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRHRnBibVZ5U1dRZ1BTQmdjR2RmWTI5dWRHRnBibVZ5WHlSN2RHaHBjeTV2Y0hScGIyNXpMbVJ6VG1GdFpYMWdPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxiR1Z0Wlc1MEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVjbVZ0YjNabEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJSFJvYVhNdVpXeGxiV1Z1ZENBOVhISmNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lIUm9hWE11YW5GMVpYSjVLRnh5WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ1lEeGthWFlnWTJ4aGMzTTlYQ0ppY3kxd1lXZHBibUYwYVc5dVhDSWdhV1E5WENJa2UzUm9hWE11WTI5dWRHRnBibVZ5U1dSOVhDSStYSEpjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4dVlYWWdZWEpwWVMxc1lXSmxiRDFjSWxCaFoyVWdibUYyYVdkaGRHbHZibHdpUGx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5dVlYWStYSEpjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1lDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1cFpDQTlJSFJvYVhNdVkyOXVkR0ZwYm1WeVNXUTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaR1JEYkdGemN5Z25Zbk10Y0dGbmFXNWhkR2x2YmljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR0ZuWlhJZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkdVlYWW5LVHRjY2x4dUlDQWdJQ0FnSUNCd1lXZGxjaTV6WlhSQmRIUnlhV0oxZEdVb0oyRnlhV0V0YkdGaVlXeGxKeXdnWENKUVlXZGxJRzVoZG1sbllYUnBiMjVjSWlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDNWhjSEJsYm1SRGFHbHNaQ2h3WVdkbGNpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJSFpoY2lCd1lXZGxUR2x6ZENBOUlIUm9hWE11YW5GMVpYSjVLR0E4ZFd3Z1kyeGhjM005WENKd1lXZHBibUYwYVc5dUlHcDFjM1JwWm5rdFkyOXVkR1Z1ZEMxbGJtUmNJaUJwWkQxY0lpUjdkR2hwY3k1c2FYTjBTV1I5WENJK1BDOTFiRDVnS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY0dGblpVeHBjM1FnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2QxYkNjcE8xeHlYRzRnSUNBZ0lDQWdJSEJoWjJWTWFYTjBMbWxrSUQwZ2RHaHBjeTVzYVhOMFNXUTdYSEpjYmlBZ0lDQWdJQ0FnY0dGblpVeHBjM1F1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25jR0ZuYVc1aGRHbHZiaWNzSUNkcWRYTjBhV1o1TFdOdmJuUmxiblF0Wlc1a0p5azdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQTlJREU3SUdsdVpHVjRJRHc5SUhSb2FYTXViM0IwYVc5dWN5NXdZV2RwYm1kTlpYUmhSR0YwWVM1MGIzUmhiRkJoWjJWeklDWW1JR2x1WkdWNElEdzlJRFU3SUdsdVpHVjRLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RtRnlJR3hwSUQwZ2RHaHBjeTVxY1hWbGNua29KenhzYVNCamJHRnpjejFjSW5CaFoyVXRhWFJsYlZ3aVBqd3ZiR2srSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnNhU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMnhwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4cExtTnNZWE56VEdsemRDNWhaR1FvSjNCaFoyVXRhWFJsYlNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZG1GeUlHeHBibXNnUFNCMGFHbHpMbXB4ZFdWeWVTaGdQR0VnWTJ4aGMzTTlYQ0p3WVdkbExXeHBibXRjSWlCb2NtVm1QVndpSTF3aUlHUmhkR0V0Y0MxcGJtUmxlRDFjSWlSN2FXNWtaWGg5WENJK0pIdHBibVJsZUgwOEwyRStZQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2FXNXJJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25ZU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzYVc1ckxtTnNZWE56VEdsemRDNWhaR1FvSjNCaFoyVXRiR2x1YXljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc2FXNXJMbWh5WldZZ1BTQW5JeWM3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hwYm1zdVkyeGhjM05NYVhOMExtRmtaQ2duWkdGMFlTMXdMV2x1WkdWNEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHBibXN1YVc1dVpYSlVaWGgwSUQwZ1lDUjdhVzVrWlhoOVlEdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hwTG1Gd2NHVnVaRU5vYVd4a0tHeHBibXNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3WVdkbFRHbHpkQzVoY0hCbGJtUkRhR2xzWkNoc2FTazdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHbHVheTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJQ2hsS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aUzUwWVhKblpYUWdhVzV6ZEdGdVkyVnZaaUJJVkUxTVJXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBibVJsZUNBOUlHVXVkR0Z5WjJWMExtZGxkRUYwZEhKcFluVjBaU2duWkdGMFlTMXdMV2x1WkdWNEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVibVY0ZEZCaFoyVkRZV3hzWW1GamF5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TG01bGVIUlFZV2RsUTJGc2JHSmhZMnNvY0dGeWMyVkpiblFvYVc1a1pYZ3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhCaFoyVnlMbUZ3Y0dWdVpFTm9hV3hrS0hCaFoyVk1hWE4wS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmpiR1ZoY2lncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JHbHpkQ0E5SUhSb2FYTXVaV3hsYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0Njakp5QXJJSFJvYVhNdWJHbHpkRWxrS1R0Y2NseHVJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0F2THlCeVpXMXZkbVVnWVd4c0lIUm9aU0JqYUdsc1pISmxiaUJ2WmlCMGFHVWdiR2x6ZEZ4eVhHNGdJQ0FnSUNBZ0lDOHZJSEpsWmpvZ2FIUjBjSE02THk5emRHRmphMjkyWlhKbWJHOTNMbU52YlM5eGRXVnpkR2x2Ym5Ndk16azFOVEl5T1M5eVpXMXZkbVV0WVd4c0xXTm9hV3hrTFdWc1pXMWxiblJ6TFc5bUxXRXRaRzl0TFc1dlpHVXRhVzR0YW1GMllYTmpjbWx3ZEZ4eVhHNGdJQ0FnSUNBZ0lHeHBjM1F1Y21Wd2JHRmpaVU5vYVd4a2NtVnVLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVkNZWE5sSUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVkNZWE5sWENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRWdmU0JtY205dElGd2lMaTR2WTI5dGJXOXVWSGx3WlhNdlkyOXRiVzl1TFhSNWNHVnpYQ0k3WEhKY2JtbHRjRzl5ZENCN0lFSlRSR0YwWVZSaFlteGxTSFIwY0VOc2FXVnVkQ0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFNIUjBjRU5zYVdWdWRGd2lPMXh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUVKVFJHRjBZVlJoWW14bFNXNW1hVzVwZEdWVFkzSnZiR3dnWlhoMFpXNWtjeUJDVTBSaGRHRlVZV0pzWlVKaGMyVWdlMXh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdGOUlHMWxkR0ZrWVhSaFhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHbHVhWFJOWlhSaFJHRjBZVG9nUWxORVlYUmhWR0ZpYkdWUVlXZHBibWROWlhSaFJHRjBZVHRjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUIwZVhCbElIdHVkVzFpWlhKOVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHTjFjbkpsYm5SUVlXZGxPaUJ1ZFcxaVpYSTdYSEpjYmx4eVhHNGdJQ0FnYVc1cGRFUmhkR0U2SUc5aWFtVmpkRnRkTzF4eVhHNGdJQ0FnWjNKcFpFVnNaVzFsYm5RNklFVnNaVzFsYm5RN1hISmNiaUFnSUNCb2RIUndRMnhwWlc1ME9pQkNVMFJoZEdGVVlXSnNaVWgwZEhCRGJHbGxiblE3WEhKY2JpQWdJQ0J6WDJGeVpXRTZJSE4wY21sdVp6dGNjbHh1SUNBZ0lHOWljMlZ5ZG1WeU9pQkpiblJsY25ObFkzUnBiMjVQWW5ObGNuWmxjanRjY2x4dUlDQWdJSFJoY21kbGREb2dTRlJOVEVWc1pXMWxiblE3WEhKY2JpQWdJQ0J1WlhoMFVHRm5aVU5oYkd4aVlXTnJPaUFvY0dGblpUb2diblZ0WW1WeUtTQTlQaUIyYjJsa08xeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0N0lHZHlhV1JGYkdWdFpXNTBPaUJoYm5rN0lHaDBkSEJEYkdsbGJuUTZJRUpUUkdGMFlWUmhZbXhsU0hSMGNFTnNhV1Z1ZENCOWZTQnZjSFJwYjI1elhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTTZJSHNnWjNKcFpFVnNaVzFsYm5RNklFVnNaVzFsYm5RN0lHaDBkSEJEYkdsbGJuUTZJRUpUUkdGMFlWUmhZbXhsU0hSMGNFTnNhV1Z1ZERzZ2ZTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVuY21sa1JXeGxiV1Z1ZENBOUlHOXdkR2x2Ym5NdVozSnBaRVZzWlcxbGJuUTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW9kSFJ3UTJ4cFpXNTBJRDBnYjNCMGFXOXVjeTVvZEhSd1EyeHBaVzUwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmZZWEpsWVNBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2WW5ObGNuWmxjaUE5SUc1MWJHdzdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQnVkV3hzTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCMGFHbHpMblJ2ZEdGc1VHRm5aWE1nUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGQmhaMlVnUFNBeE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNXBkRVJoZEdFZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YVc1cGRFMWxkR0ZFWVhSaElEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG01bGVIUlFZV2RsUTJGc2JHSmhZMnNnUFNCdWRXeHNPMXh5WEc1Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3U1c1MFpYSnpaV04wYVc5dVQySnpaWEoyWlhKRmJuUnllVnRkZlNCbGJuUnlhV1Z6WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBsdWRHVnljMlZqZEdsdmJrOWljMlZ5ZG1WeWZTQnpaVzVrWlhKY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2IySnpaWEoyWlhKRFFpaGxiblJ5YVdWek9pQkpiblJsY25ObFkzUnBiMjVQWW5ObGNuWmxja1Z1ZEhKNVcxMHNJSE5sYm1SbGNqb2dTVzUwWlhKelpXTjBhVzl1VDJKelpYSjJaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0JsYm5SeWFXVnpXekJkTzF4eVhHNGdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0dWdWRISjVLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aVzUwY25rdWFYTkpiblJsY25ObFkzUnBibWNnUFQwOUlIUnlkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29KMDlpYzJWeWRtVnlJR2x6SUdsdWRtOXJaV1F1SUVWdWRISjVPaUFuTENCbGJuUnllU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktDZHBibWwwWkdGMFlUb2dKeXdnZEdocGN5NXBibWwwUkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkdFpYUmhaR0YwWVRvZ0p5d2dkR2hwY3k1cGJtbDBUV1YwWVVSaGRHRXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJtWlhSamFDQnVaWGgwSUhCaFoyVWdhV1lnZDJVZ2MzUnBiR3dnYUdGMlpTQnRiM0psSUhCaFoyVnpJSFJ2SUhKbFlXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkzVnljbVZ1ZEZCaFoyVWdQQ0IwYUdsekxtbHVhWFJOWlhSaFJHRjBZUzUwYjNSaGJGQmhaMlZ6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduU1c1bWFXNXBkR1VnYzJOeWIyeHNPaUJtWlhSamFHbHVaeUJ1WlhoMElIQmhaMlVqT2lBbkxDQjBhR2x6TG1OMWNuSmxiblJRWVdkbElDc2dNU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUlFZV2RsS3lzN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01bGVIUlFZV2RsUTJGc2JHSmhZMnNvZEdocGN5NWpkWEp5Wlc1MFVHRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiMkp6WlhKMlpTaGxiRG9nU0ZSTlRFVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZENBOUlHVnNPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMkp6WlhKMlpYSXViMkp6WlhKMlpTaGxiQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RXNXZZbk5sY25abEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMkp6WlhKMlpYSXVkVzV2WW5ObGNuWmxLSFJvYVhNdWRHRnlaMlYwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmxibUZpYkdVb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpYMkZ5WldFZ1BTQW5jMk55YjJ4c1gyRnlaV0ZmSnlBcklIUm9hWE11WjNKcFpFVnNaVzFsYm5RdWFXUTdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RtRnlJSE5qY205c2JFRnlaV0VnUFNCMGFHbHpMbXB4ZFdWeWVTaGdQR1JwZGlCamJHRnpjejFjSW5KdmR5QmljeTF6WTNKdmJHeGNJaUJwWkQxY0lpUjdkR2hwY3k1elgyRnlaV0Y5WENJZ2MzUjViR1U5WENKdFlYZ3RhR1ZwWjJoME9pQXlNREJ3ZURzZ2IzWmxjbVpzYjNjdGVUb2dZWFYwYjF3aVBqd3ZaR2wyUG1BcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMk55YjJ4c1FYSmxZU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHlYRzRnSUNBZ0lDQWdJSE5qY205c2JFRnlaV0V1YVdRZ1BTQjBhR2x6TG5OZllYSmxZVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjMk55YjJ4c1FYSmxZUzVqYkdGemMweHBjM1F1WVdSa0tDZHliM2NuTENBblluTXRjMk55YjJ4c0p5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZDNKaGNDaHpZM0p2Ykd4QmNtVmhMQ0IwYUdsekxtZHlhV1JGYkdWdFpXNTBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnZG1GeUlISnZiM1FnUFNCMGFHbHpMbXB4ZFdWeWVTNW1hVzVrS0dBakpIdDBhR2x6TG5OZllYSmxZWDFnS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY205dmRDQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tIUm9hWE11YzE5aGNtVmhLVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdiM0IwYVc5dWN5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbTl2ZERvZ2NtOXZkQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbTl2ZEUxaGNtZHBiam9nSnpCd2VDY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbVZ6YUc5c1pEb2dNQzR6TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY21GamExWnBjMmxpYVd4cGRIazZJR1poYkhObFhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dlluTmxjblpsY2lBOUlHNWxkeUJKYm5SbGNuTmxZM1JwYjI1UFluTmxjblpsY2lnb1pXNTBjbWxsY3l3Z2MyVnVaR1Z5S1NBOVBpQjBhR2x6TG05aWMyVnlkbVZ5UTBJb1pXNTBjbWxsY3l3Z2MyVnVaR1Z5S1N3Z2IzQjBhVzl1Y3lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnliM2R6SUQwZ2RHaHBjeTVuY21sa1JXeGxiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkMGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnNZWE4wVW05M0lEMGdjbTkzYzF0eWIzZHpMbXhsYm1kMGFDQXRJREZkTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUWdQU0JzWVhOMFVtOTNPMXh5WEc0Z0lDQWdJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LSFJoY21kbGRDd2djbTl2ZENrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dlluTmxjblpsS0hSaGNtZGxkQ2s3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVkNZWE5sSUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVkNZWE5sWENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBiM0pYYVc1a2IzY2dmU0JtY205dElGd2lMaTlDVTBSaGRHRlVZV0pzWlZObGJHVmpkRzl5VjJsdVpHOTNYQ0k3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1FsTkVZWFJoVkdGaWJHVlRaV3hsWTNSdmNsZHBibVJ2ZDBOdmJHeGxZM1JwYjI0Z1pYaDBaVzVrY3lCQ1UwUmhkR0ZVWVdKc1pVSmhjMlVnZTF4eVhHNWNjbHh1SUNBZ0lDOHFLa0IwZVhCbElFSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSlhhVzVrYjNkYlhTQXFMMXh5WEc0Z0lDQWdhWFJsYlhNNklFSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSlhhVzVrYjNkYlhUdGNjbHh1WEhKY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhWFJsYlhNZ1BTQmJYVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbE5FWVhSaFZHRmliR1ZUWld4bFkzUnZjbGRwYm1SdmQzMGdhWFJsYlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCaFpHUW9hWFJsYlRvZ1FsTkVZWFJoVkdGaWJHVlRaV3hsWTNSdmNsZHBibVJ2ZHlrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVtYVc1a1NYUmxiU2hwZEdWdExtOXdkR2x2Ym5NdWNISnZjRTVoYldVcEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWwwWlcxekxuQjFjMmdvYVhSbGJTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2NISnZjRTVoYldWY2NseHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdENVMFJoZEdGVVlXSnNaVk5sYkdWamRHOXlWMmx1Wkc5M2ZTQkpkR1Z0SUhSb1lYUWdiV0YwWVdOb1pYTWdkR2hsSUhCeWIzQk9ZVzFsWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdacGJtUkpkR1Z0S0hCeWIzQk9ZVzFsT2lCemRISnBibWNwT2lCQ1UwUmhkR0ZVWVdKc1pWTmxiR1ZqZEc5eVYybHVaRzkzSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwZEdWdGN5NW1hVzVrS0NocGRHVnRLU0E5UGlCcGRHVnRMbTl3ZEdsdmJuTXVjSEp2Y0U1aGJXVWdQVDA5SUhCeWIzQk9ZVzFsS1R0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVUpoYzJVZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVUpoYzJWY0lqdGNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJDVTBSaGRHRlVZV0pzWlUxaGNtdGxjaUJsZUhSbGJtUnpJRUpUUkdGMFlWUmhZbXhsUW1GelpTQjdYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oya25LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVZMnhoYzNOTWFYTjBMbUZrWkNnbllta25MQ0FuWW1rdFkyRnlaWFF0Y21sbmFIUW5MQ0FuY205M0xXMWhjbXRsY2ljcFhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMnh2Ym1Vb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xY0dWeUxtTnNiMjVsS0NrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dUlpd2lhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZDWVhObElIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZDWVhObFhDSTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUWxORVlYUmhWR0ZpYkdWQlkzUnBiMjV6SUdWNGRHVnVaSE1nUWxORVlYUmhWR0ZpYkdWQ1lYTmxJSHRjY2x4dVhISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCemRYQmxjaWdwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVnVaR1Z5S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2ZEdocGN5NWxiR1Z0Wlc1MElEMGdkR2hwY3k1cWNYVmxjbmtvSnp4a2FYWWdZMnhoYzNNOVhDSnliM2NnWVdOMGFXOXVjeTFqYjI1MFlXbHVaWEpjSWo0OEwyUnBkajRuS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdVkyeGhjM05NYVhOMExtRmtaQ2duY205M0p5d2dKMkZqZEdsdmJuTXRZMjl1ZEdGcGJtVnlKeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1lXUmtRV04wYVc5dUtHbGtPaUJ6ZEhKcGJtY3NJSFI1Y0dVNklITjBjbWx1Wnl3Z2FXTnZiam9nYzNSeWFXNW5MQ0JqWVd4c1ltRmphem9nS0dVNklFMXZkWE5sUlhabGJuUXBJRDArSUdGdWVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmlkRzRnUFNCMGFHbHpMbWRsZEVKMWRIUnZiaWhwWkN3Z2RIbHdaU3dnYVdOdmJpazdYSEpjYmlBZ0lDQWdJQ0FnWW5SdUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1kyRnNiR0poWTJzcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1aGNIQmxibVJEYUdsc1pDaGlkRzRwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIc29ZWEpuTURvZ2IySnFaV04wS1NBOVBpQmhibmw5SUZ0allXeHNZbUZqYTExY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1lXUmtSR1ZzWlhSbFFXTjBhVzl1S0dOaGJHeGlZV05yT2lBb1lYSm5NRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNGdZVzU1S1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnZG1GeUlHSjBiaUE5SUhSb2FYTXVhbkYxWlhKNUtHQThZblYwZEc5dUlIUjVjR1U5WENKaWRYUjBiMjVjSWlCamJHRnpjejFjSW1KMGJpQmlkRzR0YzIwZ1luUnVMVzkxZEd4cGJtVXRaR0Z1WjJWeUlHZHlhV1F0ZEc5dmJHSmhjaTFoWTNScGIyNWNJbHh5WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRDFjSW1KMGJrUmxiR1YwWlZKdmQxOGtlM1JvYVhNdVpHRjBZVk52ZFhKalpVNWhiV1Y5WENJK1BHa2dZMnhoYzNNOVhDSmlhU0JpYVMxMGNtRnphRndpUGp3dmFUNWNjbHh1SUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJKMWRIUnZiajVnS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVlXUmtRV04wYVc5dUtDZGlkRzVFWld4bGRHVlNiM2NuTENBblpHRnVaMlZ5Snl3Z0ozUnlZWE5vSnl3Z1kyRnNiR0poWTJzcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhzb1lYSm5NRG9nYjJKcVpXTjBLU0E5UGlCaGJubDlJRnRqWVd4c1ltRmphMTFjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWVdSa1RtVjNVbVZqYjNKa1FXTjBhVzl1S0dOaGJHeGlZV05yT2lBb1lYSm5NRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNGdZVzU1S1NCN1hISmNiaUFnSUNBZ0lDQWdMeThnZG1GeUlHSjBiaUE5SUhSb2FYTXVhbkYxWlhKNUtHQThZblYwZEc5dUlIUjVjR1U5WENKaWRYUjBiMjVjSWlCamJHRnpjejFjSW1KMGJpQmlkRzR0YzIwZ1luUnVMVzkxZEd4cGJtVXRjSEpwYldGeWVTQm5jbWxrTFhSdmIyeGlZWEl0WVdOMGFXOXVYQ0lnWEhKY2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrUFZ3aVluUnVRV1JrVW05M1h5UjdkR2hwY3k1a1lYUmhVMjkxY21ObFRtRnRaWDFjSWo0OGFTQmpiR0Z6Y3oxY0ltSnBJR0pwTFhCc2RYTXRZMmx5WTJ4bFhDSStQQzlwUGx4eVhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZZblYwZEc5dVBpZGdLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVdSa1FXTjBhVzl1S0NkaWRHNUJaR1JTYjNjbkxDQW5jSEpwYldGeWVTY3NJQ2R3YkhWekxXTnBjbU5zWlNjc0lHTmhiR3hpWVdOcktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JoWkdSSGNtbGtVMlYwZEdsdVozTkJZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RtRnlJR0owYmlBOUlIUm9hWE11YW5GMVpYSjVLR0E4WW5WMGRHOXVJSFI1Y0dVOVhDSmlkWFIwYjI1Y0lpQmpiR0Z6Y3oxY0ltSjBiaUJpZEc0dGMyMGdZblJ1TFc5MWRHeHBibVV0Y0hKcGJXRnllU0JuY21sa0xYUnZiMnhpWVhJdFlXTjBhVzl1WENJZ1hISmNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXRZbk10ZEc5bloyeGxQVndpYlc5a1lXeGNJaUJrWVhSaExXSnpMWFJoY21kbGREMWNJaU56ZEdGMGFXTkNZV05yWkhKdmNGOGtlM1JvYVhNdVpHRjBZVk52ZFhKalpVNWhiV1Y5WENJZ1hISmNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa1BWd2lZblJ1VTJWMGRHbHVaM05mSkh0MGFHbHpMbVJoZEdGVGIzVnlZMlZPWVcxbGZWd2lQanhwSUdOc1lYTnpQVndpWW1rZ1lta3RaMlZoY2x3aVBqd3ZhVDVjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwySjFkSFJ2Ymo1Z0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR0owYmlBOUlIUm9hWE11WjJWMFFuVjBkRzl1S0NkaWRHNVRaWFIwYVc1bmN5Y3NJQ2R3Y21sdFlYSjVKeXdnSjJkbFlYSW5LVHRjY2x4dUlDQWdJQ0FnSUNCaWRHNHVjMlYwUVhSMGNtbGlkWFJsS0Nka1lYUmhMV0p6TFhSdloyZHNaU2NzSUNkdGIyUmhiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lHSjBiaTV6WlhSQmRIUnlhV0oxZEdVb0oyUmhkR0V0WW5NdGRHRnlaMlYwSnl3Z1lDTnpkR0YwYVdOQ1lXTnJaSEp2Y0Y4a2UzUm9hWE11WkdGMFlWTnZkWEpqWlU1aGJXVjlZQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbUZ3Y0dWdVpDaGlkRzRwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdkbGRFSjFkSFJ2YmlocFpEb2djM1J5YVc1bkxDQjBlWEJsT2lCemRISnBibWNzSUdsamIyNDZJSE4wY21sdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmlkRzRnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RpZFhSMGIyNG5LVHRjY2x4dUlDQWdJQ0FnSUNCaWRHNHVkSGx3WlNBOUlGd2lZblYwZEc5dVhDSTdYSEpjYmlBZ0lDQWdJQ0FnWW5SdUxtTnNZWE56VEdsemRDNWhaR1FvSjJKMGJpY3NJQ2RpZEc0dGMyMG5MQ0JnWW5SdUxXOTFkR3hwYm1VdEpIdDBlWEJsZldBc0lDZG5jbWxrTFhSdmIyeGlZWEl0WVdOMGFXOXVKeWs3WEhKY2JpQWdJQ0FnSUNBZ1luUnVMbWxrSUQwZ1lDUjdhV1I5WHlSN2RHaHBjeTVrWVhSaFUyOTFjbU5sVG1GdFpYMWdPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Gd2NHVnVaRWxqYjI0b1luUnVMQ0JwWTI5dUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZblJ1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkRWxqYjI0b2FXTnZibFI1Y0dVNklITjBjbWx1WnlrNklFaFVUVXhGYkdWdFpXNTBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhV052YmlBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJrbktUdGNjbHh1SUNBZ0lDQWdJQ0JwWTI5dUxtTnNZWE56VEdsemRDNWhaR1FvSjJKcEp5d2dZR0pwTFNSN2FXTnZibFI1Y0dWOVlDazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2xqYjI0N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZWEJ3Wlc1a1NXTnZiaWhsYkdWdE9pQklWRTFNUld4bGJXVnVkQ3dnYVdOdmJsUjVjR1U2SUhOMGNtbHVaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwWTI5dUlEMGdkR2hwY3k1blpYUkpZMjl1S0dsamIyNVVlWEJsS1R0Y2NseHVJQ0FnSUNBZ0lDQmxiR1Z0TG1Gd2NHVnVaQ2hwWTI5dUtUdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNGlMQ0pwYlhCdmNuUWdleUJDVTBSaGRHRlVZV0pzWlVsdWNIVjBJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWSmJuQjFkRndpTzF4eVhHNXBiWEJ2Y25RZ2V5QkNVMGx1Y0hWMFQzQjBhVzl1Y3lCOUlHWnliMjBnWENJdUxpOWpiMjF0YjI1VWVYQmxjeTlqYjIxdGIyNHRkSGx3WlhOY0lqdGNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJDVTBSaGRHRlVZV0pzWlZSbGVIUkpibkIxZENCbGVIUmxibVJ6SUVKVFJHRjBZVlJoWW14bFNXNXdkWFFnZTF4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVk52ZFhKalpVNWhiV1U2SUhOMGNtbHVaeXdnYVc1d2RYUlVlWEJsT2lCemRISnBibWNnUFNCY0luUmxlSFJjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCdmNIUnBiMjV6T2lCQ1UwbHVjSFYwVDNCMGFXOXVjeUE5SUhzZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUdSaGRHRlRiM1Z5WTJWT1lXMWxMQ0JKYm5CMWRGUjVjR1U2SUdsdWNIVjBWSGx3WlNCOU8xeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUtHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdZMnh2Ym1Vb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITmpJRDBnYzNWd1pYSXVZMnh2Ym1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1l5QTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pWUmxlSFJKYm5CMWRDaDBhR2x6TG5Ob1EyeHZibVVvZEdocGN5NXZjSFJwYjI1ektTazdYSEpjYmlBZ0lDQWdJQ0FnWXk1bGJHVnRaVzUwSUQwZ2MyTXVaV3hsYldWdWREdGNjbHh1SUNBZ0lDQWdJQ0JqTG1Ob2FXeGtjbVZ1SUQwZ2MyTXVZMmhwYkdSeVpXNDdYSEpjYmlBZ0lDQWdJQ0FnWXk1aFpHUkViM1ZpYkdWRGJHbGphMFYyWlc1MEtDazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR003WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1SWl3aWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVkNZWE5sSUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVkNZWE5sWENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBUR2x6ZEVsMFpXMGdmU0JtY205dElGd2lMaTR2WTI5dGJXOXVWSGx3WlhNdlkyOXRiVzl1TFhSNWNHVnpYQ0k3WEhKY2JseHlYRzVsZUhCdmNuUWdZMnhoYzNNZ1FsTkVZWFJoVkdGaWJHVlRaV3hsWTNSUGNIUnBiMjRnWlhoMFpXNWtjeUJDVTBSaGRHRlVZV0pzWlVKaGMyVWdlMXh5WEc0Z0lDQWdiM0IwYVc5dWN6b2dRbE5FWVhSaFZHRmliR1ZUWld4bFkzUk1hWE4wU1hSbGJUdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwSlRSR0YwWVZSaFlteGxVMlZzWldOMFRHbHpkRWwwWlcxOUlHOXdkR2x2Ym5OY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iM0IwYVc5dWN6b2dRbE5FWVhSaFZHRmliR1ZUWld4bFkzUk1hWE4wU1hSbGJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsYm1SbGNpZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYjNCMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmIzQjBhVzl1SnlrN1hISmNiaUFnSUNBZ0lDQWdiM0IwTG5aaGJIVmxJRDBnZEdocGN5NXZjSFJwYjI1ekxuWmhiSFZsTzF4eVhHNGdJQ0FnSUNBZ0lHOXdkQzUwWlhoMElEMGdkR2hwY3k1dmNIUnBiMjV6TG5SbGVIUTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTVwYzFObGJHVmpkR1ZrS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hRdWMyVnNaV04wWldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZENBOUlHOXdkRHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCamJHOXVaU2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWTJ4dmJtVWdQU0J6ZFhCbGNpNWpiRzl1WlNncE8xeHlYRzRnSUNBZ0lDQWdJR05zYjI1bExuTmxkRlJsZUhRb2RHaHBjeTV2Y0hScGIyNXpMblJsZUhRcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiRzl1WlR0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVWx1Y0hWMElIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZKYm5CMWRGd2lPMXh5WEc1cGJYQnZjblFnZXlCQ1UwUmhkR0ZVWVdKc1pWTmxiR1ZqZEV4cGMzUkpkR1Z0TENCQ1UxTmxiR1ZqZEU5d2RHbHZibk1nZlNCbWNtOXRJRndpTGk0dlkyOXRiVzl1Vkhsd1pYTXZZMjl0Ylc5dUxYUjVjR1Z6WENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBUM0IwYVc5dUlIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZUWld4bFkzUlBjSFJwYjI1Y0lqdGNjbHh1WEhKY2JtVjRjRzl5ZENCamJHRnpjeUJDVTBSaGRHRlVZV0pzWlZObGJHVmpkQ0JsZUhSbGJtUnpJRUpUUkdGMFlWUmhZbXhsU1c1d2RYUWdlMXh5WEc1Y2NseHVJQ0FnSUZObGJHVmpkRTl3ZEdsdmJuTTZJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBUR2x6ZEVsMFpXMWJYVHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0c5d2RHbHZibk02SUVKVFUyVnNaV04wVDNCMGFXOXVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lITjFjR1Z5S0hzZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUc5d2RHbHZibk11UkdGMFlWTnZkWEpqWlU1aGJXVXNJRWx1Y0hWMFZIbHdaVG9nSjNObGJHVmpkQ2NnZlNrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1VFpXeGxZM1JQY0hScGIyNXpJRDBnYjNCMGFXOXVjeTVUWld4bFkzUlBjSFJwYjI1ek8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDazZJSFp2YVdRZ2UxeHlYRzRnSUNBZ0lDQWdJSE4xY0dWeUxuSmxibVJsY2lncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVUyVnNaV04wVDNCMGFXOXVjeTVtYjNKRllXTm9LQ2h2Y0hRcElEMCtJSFJvYVhNdVlYQndaVzVrS0c1bGR5QkNVMFJoZEdGVVlXSnNaVk5sYkdWamRFOXdkR2x2YmlodmNIUXBLU2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSRGJHRnpjeWduWm05eWJTMXpaV3hsWTNRZ1ptOXliUzF6Wld4bFkzUXRjMjBuS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmpiRzl1WlNncElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MyTWdQU0J6ZFhCbGNpNWpiRzl1WlNncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdmNIUkRiRzl1WlRwQ1UxTmxiR1ZqZEU5d2RHbHZibk1nUFNCMGFHbHpMbk5vUTJ4dmJtVW9kR2hwY3k1dmNIUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ0lDQnZjSFJEYkc5dVpTNVRaV3hsWTNSUGNIUnBiMjV6SUQwZ2RHaHBjeTV6YUVOc2IyNWxLSFJvYVhNdVUyVnNaV04wVDNCMGFXOXVjeWs3WEhKY2JpQWdJQ0FnSUNBZ1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdNZ1BTQnVaWGNnUWxORVlYUmhWR0ZpYkdWVFpXeGxZM1FvYjNCMFEyeHZibVVwTzF4eVhHNGdJQ0FnSUNBZ0lHTXVaV3hsYldWdWRDQTlJSE5qTG1Wc1pXMWxiblE3WEhKY2JpQWdJQ0FnSUNBZ1l5NWphR2xzWkhKbGJpQTlJSE5qTG1Ob2FXeGtjbVZ1TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WVdSa1JHOTFZbXhsUTJ4cFkydEZkbVZ1ZENncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWXp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVWx1Y0hWMElIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZKYm5CMWRGd2lPMXh5WEc1cGJYQnZjblFnZXlCQ1UwSjFkSFJ2Yms5d2RHbHZibk1nZlNCbWNtOXRJRndpTGk0dlkyOXRiVzl1Vkhsd1pYTXZZMjl0Ylc5dUxYUjVjR1Z6WENJN1hISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdRbE5FWVhSaFZHRmliR1ZDZFhSMGIyNGdaWGgwWlc1a2N5QkNVMFJoZEdGVVlXSnNaVWx1Y0hWMElIdGNjbHh1WEhKY2JpQWdJQ0J2Y0hScGIyNXpPaUJDVTBKMWRIUnZiazl3ZEdsdmJuTTdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2IzQjBhVzl1Y3pvZ1FsTkNkWFIwYjI1UGNIUnBiMjV6S1NCN1hISmNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3p0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJtUmxjaWdwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxibVJsY2lncElIdGNjbHh1SUNBZ0lDQWdJQ0J6ZFhCbGNpNXlaVzVrWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0F2TDNaaGNpQnBZMjl1SUQwZ2RHaHBjeTV2Y0hScGIyNXpMa2xqYjI0Z1B5QmdQR2tnWTJ4aGMzTTlYQ0ppYVNCaWFTMGtlM1JvYVhNdWIzQjBhVzl1Y3k1SlkyOXVmVndpUGp3dmFUNWdJRG9nSnljN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NUpZMjl1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBZMjl1SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duYVNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFkyOXVMbU5zWVhOelRHbHpkQzVoWkdRb0oySnBKeXdnWUdKcExTUjdkR2hwY3k1dmNIUnBiMjV6TGtsamIyNTlZQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1aGNIQmxibVJEYUdsc1pDaHBZMjl1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1SVlXNWtiR1Z5S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRmtaRU5zYVdOclNHRnVaR3hsY2lncE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR0ZrWkVOc2FXTnJTR0Z1Wkd4bGNpZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQW9aU2tnUFQ0Z2RHaHBjeTV2Y0hScGIyNXpMa2hoYm1Sc1pYSW9aU2twTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnNiMjVsS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCell5QTlJSE4xY0dWeUxtTnNiMjVsS0NrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdKMGJpQTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pVSjFkSFJ2YmloMGFHbHpMbk5vUTJ4dmJtVW9kR2hwY3k1dmNIUnBiMjV6S1NrN1hISmNiaUFnSUNBZ0lDQWdZblJ1TG1Ob2FXeGtjbVZ1SUQwZ2MyTXVZMmhwYkdSeVpXNDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaWRHNDdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVJaXdpYVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWSmJuQjFkQ0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFNXNXdkWFJjSWp0Y2NseHVhVzF3YjNKMElIc2dRbE5UWld4bFkzUnZjazl3ZEdsdmJuTWdmU0JtY205dElGd2lMaTR2WTI5dGJXOXVWSGx3WlhNdlkyOXRiVzl1TFhSNWNHVnpYQ0k3WEhKY2JtbHRjRzl5ZENCN0lFSlRSR0YwWVZSaFlteGxWR1Y0ZEVsdWNIVjBJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWVVpYaDBTVzV3ZFhSY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWQ2RYUjBiMjRnZlNCbWNtOXRJRndpTGk5Q1UwUmhkR0ZVWVdKc1pVSjFkSFJ2Ymx3aU8xeHlYRzVwYlhCdmNuUWdleUJDVTBSaGRHRlVZV0pzWlZObGJHVmpkRzl5VjJsdVpHOTNJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWVFpXeGxZM1J2Y2xkcGJtUnZkMXdpTzF4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSWdaWGgwWlc1a2N5QkNVMFJoZEdGVVlXSnNaVWx1Y0hWMElIdGNjbHh1WEhKY2JpQWdJQ0J2Y0hScGIyNXpPaUJDVTFObGJHVmpkRzl5VDNCMGFXOXVjenRjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTBKVFJHRjBZVlJoWW14bFFuVjBkRzl1ZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCaWRHNUZiR1Z0Wlc1ME9pQkNVMFJoZEdGVVlXSnNaVUoxZEhSdmJqdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlFQjBlWEJsSUh0Q1UwUmhkR0ZVWVdKc1pWUmxlSFJKYm5CMWRIMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdkSGgwUld4bGJXVnVkRG9nUWxORVlYUmhWR0ZpYkdWVVpYaDBTVzV3ZFhRN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjem9nUWxOVFpXeGxZM1J2Y2s5d2RHbHZibk1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2lodmNIUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEpUUkdGMFlWUmhZbXhsVTJWc1pXTjBiM0pYYVc1a2IzZDlJSE5sYm1SbGNseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdGhibmw5SUdWY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2IyNUpkR1Z0VTJWc1pXTjBaV1FvYzJWdVpHVnlPaUJDVTBSaGRHRlVZV0pzWlZObGJHVmpkRzl5VjJsdVpHOTNMQ0JsT2lCaGJua3BJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNKdmR5QnpaV3hsWTNSbFpDY3NJSE5sYm1SbGNpNW5jbWxrTG1KdlpIa3VaMlYwVTJWc1pXTjBaV1JTYjNjb0tTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjNjZ1BTQnpaVzVrWlhJdVozSnBaQzVpYjJSNUxtZGxkRk5sYkdWamRHVmtVbTkzS0NrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJHVmpkR1ZrU1c1d2RYUWdQU0J5YjNjdVoyVjBTVzV3ZFhSektDa3VabWx1WkNnb2FXNXdkWFFwSUQwK0lHbHVjSFYwTG1selMyVjVLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jMlZzWldOMFpXUkpibkIxZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWduVTJWc1pXTjBaV1FnZG1Gc2RXVTZJQ2NzSUhObGJHVmpkR1ZrU1c1d2RYUXVkbUZzS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29KM05sYkdWamRHOXlPaUFuTENCMGFHbHpMblI0ZEVWc1pXMWxiblF1ZG1Gc0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwZUhSRmJHVnRaVzUwTG5aaGJDQTlJSE5sYkdWamRHVmtTVzV3ZFhRdWRtRnNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SNGRFVnNaVzFsYm5RdVkyaGhibWRsS0NrN0lDOHZJR05oYkd3Z1kyaGhibWRsSUhSdklHWnBjbVVnZEdobElHTm9ZVzVuWlNCbGRtVnVkRnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnpaVzVrWlhJdWMyVnNaV04wYjNKTmIyUmhiQzVvYVdSbEtDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WdVpHVnlLQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUjRkRVZzWlcxbGJuUWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVlVaWGgwU1c1d2RYUW9kR2hwY3k1dmNIUnBiMjV6TGtSaGRHRlRiM1Z5WTJWT1lXMWxLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMblI0ZEVWc1pXMWxiblJjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMbUZrWkVOc1lYTnpLSFJvYVhNdWIzQjBhVzl1Y3k1RGMzTkRiR0Z6Y3lsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG5CeWIzQnpLRnQ3SUd0bGVUb2dYQ0pwWkZ3aUxDQjJZV3gxWlRvZ2RHaHBjeTV2Y0hScGIyNXpMa1ZzWlcxbGJuUkpaQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I3SUd0bGVUb2dYQ0p3YkdGalpVaHZiR1JsY2x3aUxDQjJZV3gxWlRvZ2RHaHBjeTV2Y0hScGIyNXpMbEJzWVdObFNHOXNaR1Z5SUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhzZ2EyVjVPaUJjSW1SaGRHRXRjSEp2Y0c1aGJXVmNJaXdnZG1Gc2RXVTZJSFJvYVhNdWIzQjBhVzl1Y3k1UWNtOXdUbUZ0WlNCOVhTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WW5SdVJXeGxiV1Z1ZENBOUlHNWxkeUJDVTBSaGRHRlVZV0pzWlVKMWRIUnZiaWg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRWx1Y0hWMFZIbHdaVG9nSjJKMWRIUnZiaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRVJoZEdGVGIzVnlZMlZPWVcxbE9pQjBhR2x6TG05d2RHbHZibk11UkdGMFlWTnZkWEpqWlU1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFbGpiMjQ2SUNkelpXRnlZMmduTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JJWVc1a2JHVnlPaUFvWlNrZ1BUNGdkR2hwY3k1dmNIUnBiMjV6TGtKMGJrTnNhV05yS0hSb2FYTXNJR1VwWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJSFpoY2lCM2NtRndjR1Z5SUQwZ2RHaHBjeTVxY1hWbGNua29KenhrYVhZZ1kyeGhjM005WENKcGJuQjFkQzFuY205MWNDQnBibkIxZEMxbmNtOTFjQzF6YlZ3aVBqd3ZaR2wyUGljcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCM2NtRndjR1Z5SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5azdYSEpjYmlBZ0lDQWdJQ0FnZDNKaGNIQmxjaTVqYkdGemMweHBjM1F1WVdSa0tDZHBibkIxZEMxbmNtOTFjQ2NzSUNkcGJuQjFkQzFuY205MWNDMXpiU2NwTzF4eVhHNGdJQ0FnSUNBZ0lIZHlZWEJ3WlhJdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1MGVIUkZiR1Z0Wlc1MExtVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJSGR5WVhCd1pYSXVZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NWlkRzVGYkdWdFpXNTBMbVZzWlcxbGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCM2NtRndjR1Z5TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHTnNiMjVsS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUdSbFluVm5aMlZ5TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6WXlBOUlITjFjR1Z5TG1Oc2IyNWxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR01nUFNCdVpYY2dRbE5FWVhSaFZHRmliR1ZUWld4bFkzUnZjaWgwYUdsekxuTm9RMnh2Ym1Vb2RHaHBjeTV2Y0hScGIyNXpLU2s3WEhKY2JpQWdJQ0FnSUNBZ1l5NWphR2xzWkhKbGJpQTlJSE5qTG1Ob2FXeGtjbVZ1TzF4eVhHNGdJQ0FnSUNBZ0lDOHZJR011WVdSa1JHOTFZbXhsUTJ4cFkydEZkbVZ1ZENncE95QXZMeUJVVDBSUE9pQjNhSGtnYVhRZ2FHRnpJSFJ2SUdKbElHbHVJSFJvWlNCamJHOXVaU0J0WlhSb2IyUS9JQ0JjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWXp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5Qk5iMlJoYkNCOUlHWnliMjBnWENKaWIyOTBjM1J5WVhCY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWQ1lYTmxJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWQ1lYTmxYQ0k3WEhKY2JtbHRjRzl5ZENCN0lFSlRSR0YwWVZSaFlteGxRMjlzUkdWbWFXNXBkR2x2Yml3Z1oyVjBWWEpzUTJGc2JHSmhZMnNzSUVKVFJHRjBZVlJoWW14bFJHRjBZVk52ZFhKalpTd2dRbE5FWVhSaFZHRmliR1ZQY0hScGIyNXpJSDBnWm5KdmJTQmNJaTR1TDJOdmJXMXZibFI1Y0dWekwyTnZiVzF2YmkxMGVYQmxjMXdpTzF4eVhHNXBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaU0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFhDSTdYSEpjYmx4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSlhhVzVrYjNjZ1pYaDBaVzVrY3lCQ1UwUmhkR0ZVWVdKc1pVSmhjMlVnZTF4eVhHNWNjbHh1SUNBZ0lITmxiR1ZqZEc5eVRXOWtZV3c2SUUxdlpHRnNPMXh5WEc0Z0lDQWdaM0pwWkRvZ1FsTkVZWFJoVkdGaWJHVTdYSEpjYmlBZ0lDQnZjSFJwYjI1ek9pQjdJSEJ5YjNCT1lXMWxPaUJ6ZEhKcGJtYzdJR052Ym5SaGFXNWxja2xrT2lCemRISnBibWM3SUhWeWJFTmlPaUJuWlhSVmNteERZV3hzWW1GamF6c2daM0pwWkVOdmJITS9PaUJDVTBSaGRHRlVZV0pzWlVOdmJFUmxabWx1YVhScGIyNWJYVHNnZlR0Y2NseHVJQ0FnSUhCaGNtVnVkRU52Ym5SaGFXNWxja2xrT2lCemRISnBibWM3WEhKY2JpQWdJQ0J0YjJSaGJFbGtPaUJ6ZEhKcGJtYzdYSEpjYmlBZ0lDQnRiMlJoYkZScGRHeGxTV1E2SUhOMGNtbHVaenRjY2x4dUlDQWdJR052Ym5SaGFXNWxja2xrT2lCemRISnBibWM3WEhKY2JpQWdJQ0JuY21sa1NXUTZJSE4wY21sdVp6dGNjbHh1SUNBZ0lHOXVTWFJsYlZObGJHVmpkR1ZrT2lBb2MyVnVaR1Z5T2lCaGJua3NJR1U2SUdGdWVTa2dQVDRnZG05cFpEdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2V5QndjbTl3VG1GdFpUb2djM1J5YVc1bk95QmpiMjUwWVdsdVpYSkpaRG9nYzNSeWFXNW5PeUIxY214RFlqb2daMlYwVlhKc1EyRnNiR0poWTJzN0lHZHlhV1JEYjJ4ek9pQkNVMFJoZEdGVVlXSnNaVU52YkVSbFptbHVhWFJwYjI1YlhYMTlJRzl3ZEdsdmJuTmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjNCMGFXOXVjem9nZXlCd2NtOXdUbUZ0WlRvZ2MzUnlhVzVuT3lCamIyNTBZV2x1WlhKSlpEb2djM1J5YVc1bk95QjFjbXhEWWpvZ1oyVjBWWEpzUTJGc2JHSmhZMnM3SUdkeWFXUkRiMnh6T2lCQ1UwUmhkR0ZVWVdKc1pVTnZiRVJsWm1sdWFYUnBiMjViWFRzZ2ZTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnYjNCMGFXOXVjenRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoY21WdWRFTnZiblJoYVc1bGNrbGtJRDBnZEdocGN5NXZjSFJwYjI1ekxtTnZiblJoYVc1bGNrbGtPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzlrWVd4SlpDQTlJR0FrZTNSb2FYTXVjR0Z5Wlc1MFEyOXVkR0ZwYm1WeVNXUjlYMkp6WHlSN2RHaHBjeTV2Y0hScGIyNXpMbkJ5YjNCT1lXMWxmV0E3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjJSaGJGUnBkR3hsU1dRZ1BTQmdKSHQwYUdsekxuQmhjbVZ1ZEVOdmJuUmhhVzVsY2tsa2ZWOXNZbk5mSkh0MGFHbHpMbTl3ZEdsdmJuTXVjSEp2Y0U1aGJXVjlZRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SaGFXNWxja2xrSUQwZ1lDUjdkR2hwY3k1d1lYSmxiblJEYjI1MFlXbHVaWEpKWkgxZlkySnpYeVI3ZEdocGN5NXZjSFJwYjI1ekxuQnliM0JPWVcxbGZXQTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW5jbWxrU1dRZ1BTQmdKSHQwYUdsekxuQmhjbVZ1ZEVOdmJuUmhhVzVsY2tsa2ZWOW5YeVI3ZEdocGN5NXZjSFJwYjI1ekxuQnliM0JPWVcxbGZXQTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaVzVrWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtZHlhV1FnUFNCMGFHbHpMbkpsYm1SbGNrZHlhV1FvS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVNYUmxiVk5sYkdWamRHVmtJRDBnS0M4cUtpQkFkSGx3WlNCN1FsTkVZWFJoVkdGaWJHVjlJQ292SUhObGJtUmxjam9nUWxORVlYUmhWR0ZpYkdVc0lDOHFLaUJBZEhsd1pTQjdZVzU1ZlNBcUx5QmxPaUJoYm5rcElEMCtJSHNnWTI5dWMyOXNaUzVzYjJjb0tUc2dmVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMM1poY2lCbWFXNWtJRDBnZEdocGN5NXFjWFZsY25rb0p5TW5JQ3NnZEdocGN5NXdZWEpsYm5SRGIyNTBZV2x1WlhKSlpDa3VabWx1WkNnbkl5Y2dLeUIwYUdsekxtMXZaR0ZzU1dRcE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdGIyUmhiQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLSFJvYVhNdWJXOWtZV3hKWkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHRiMlJoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUWdQU0J0YjJSaGJEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wld4bFkzUnZjazF2WkdGc0lEMGdUVzlrWVd3dVoyVjBUM0pEY21WaGRHVkpibk4wWVc1alpTaHRiMlJoYkNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbWxrSUQwZ2RHaHBjeTV0YjJSaGJFbGtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25iVzlrWVd3bktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1cGJtNWxja2hVVFV3Z1BTQmdQR1JwZGlCamJHRnpjejFjSW0xdlpHRnNMV1JwWVd4dlp5QnRiMlJoYkMxa2FXRnNiMmN0YzJOeWIyeHNZV0pzWlZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56UFZ3aWJXOWtZV3d0WTI5dWRHVnVkRndpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMXZaR0ZzTFdobFlXUmxjbHdpUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeG9OU0JqYkdGemN6MWNJbTF2WkdGc0xYUnBkR3hsWENJZ2FXUTlYQ0lrZTNSb2FYTXViVzlrWVd4VWFYUnNaVWxrZlZ3aVBsTmxiR1ZqZENCaElIWmhiSFZsUEM5b05UNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WW5WMGRHOXVJSFI1Y0dVOVhDSmlkWFIwYjI1Y0lpQmpiR0Z6Y3oxY0ltSjBiaTFqYkc5elpWd2lJR1JoZEdFdFluTXRaR2x6YldsemN6MWNJbTF2WkdGc1hDSWdZWEpwWVMxc1lXSmxiRDFjSWtOc2IzTmxYQ0krUEM5aWRYUjBiMjQrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTTlYQ0p0YjJSaGJDMWliMlI1WENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCcFpEMWNJaVI3ZEdocGN5NWpiMjUwWVdsdVpYSkpaSDFjSWo1Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnRiMlJoYkMxbWIyOTBaWEpjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZblYwZEc5dUlIUjVjR1U5WENKaWRYUjBiMjVjSWlCamJHRnpjejFjSW1KMGJpQmlkRzR0Y0hKcGJXRnllVndpSUdSaGRHRXRZbk10WkdsemJXbHpjejFjSW0xdlpHRnNYQ0krVDJzOEwySjFkSFJ2Ymo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWdPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQmhjbVZ1ZEVOdmJuUmhhVzVsY2lBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0hSb2FYTXVjR0Z5Wlc1MFEyOXVkR0ZwYm1WeVNXUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGeVpXNTBRMjl1ZEdGcGJtVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYSmxiblJEYjI1MFlXbHVaWEl1WVhCd1pXNWtRMmhwYkdRb2RHaHBjeTVsYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaV3hsWTNSdmNrMXZaR0ZzSUQwZ2JtVjNJRTF2WkdGc0tIUm9hWE11Wld4bGJXVnVkQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jMmh2ZDI0dVluTXViVzlrWVd3bkxDQW9aU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmNtbGtMbU5zWldGeVIzSnBaQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuY21sa0xtbHVabWx1YVhSbFUyTnliMnhzWlhJdVkzVnljbVZ1ZEZCaFoyVWdQU0F4TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuY21sa0xtWmxkR05vUjNKcFpGQmhaMlVvTVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCemFHOTNLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWc1pXTjBiM0pOYjJSaGJDNXphRzkzS0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeVIzSnBaQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklHZHlhV1FnYzJodmQyNGdhVzRnZEdobElITmxiR1ZqZEc5eUlIZHBibVJ2ZDF4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0ZUYjNWeVkyVWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVkVZWFJoVTI5MWNtTmxLQ2RpYzFObGJHVmpkRzl5Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkRVJoZEdFNklGdGRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWMFlVUmhkR0U2SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25WbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl3ZEdsdmJuTXVkWEpzUTJKY2NseHVJQ0FnSUNBZ0lDQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWW5NZ1BTQnVaWGNnUWxORVlYUmhWR0ZpYkdWUGNIUnBiMjV6S0hSb2FYTXVaM0pwWkVsa0xDQjBhR2x6TG1OdmJuUmhhVzVsY2tsa0xDQjBhR2x6TG05d2RHbHZibk11WjNKcFpFTnZiSE1zSUdSaGRHRlRiM1Z5WTJVc0lIUnlkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDOHZJR0p6TG1WdVlXSnNaVWx1Wm1sdWFYUmxVMk55YjJ4c0lEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdkeWFXUWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVW9Zbk1wTzF4eVhHNGdJQ0FnSUNBZ0lHZHlhV1F1Y21WbmFYTjBaWEpEWVd4c1ltRmphM01vS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1ozSnBaQzVoWkdSSVlXNWtiR1Z5S0dkeWFXUXVZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOVNUMWRmUkU5VlFreEZYME5NU1VOTFJVUXNJSFJvYVhNdWIyNUpkR1Z0VTJWc1pXTjBaV1FwTzF4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1ptOXNiRzkzYVc1bklHVjJaVzUwY3lCaGNtVWdiR2x1YTJWa0lIUnZJSEJoY21WdWRDQW9jSEpwYldGeWVTQjJhV1YzTDJadmNtMHBJR0Z1WkNCaGNtVWdibTkwSUc1bFpXUmxaQ0JtYjNJZ2MyVnNaV04wYjNKY2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUdkeWFXUXVjbVZ0YjNabFNHRnVaR3hsY2loMGFHbHpMbUZ3Y0VSaGRHRkZkbVZ1ZEhNdVIxSkpSRjlFUVZSQktUdGNjbHh1SUNBZ0lDQWdJQ0JuY21sa0xuSmxiVzkyWlVoaGJtUnNaWElvZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gwRkVSRjlTUlVOUFVrUXBPMXh5WEc0Z0lDQWdJQ0FnSUdkeWFXUXVjbVZ0YjNabFNHRnVaR3hsY2loMGFHbHpMbUZ3Y0VSaGRHRkZkbVZ1ZEhNdVQwNWZSa1ZVUTBoZlVrVkRUMUpFS1R0Y2NseHVJQ0FnSUNBZ0lDQm5jbWxrTG5KbGJXOTJaVWhoYm1Sc1pYSW9kR2hwY3k1aGNIQkVZWFJoUlhabGJuUnpMazlPWDFOQlZrVmZVa1ZEVDFKRUtUdGNjbHh1SUNBZ0lDQWdJQ0JuY21sa0xuSmxiVzkyWlVoaGJtUnNaWElvZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gxTkJWa1ZmUlZKU1QxSXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm5jbWxrTG5KbGJtUmxjaWdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCb2FXUmxJR0ZqZEdsdmJuTmNjbHh1SUNBZ0lDQWdJQ0JuY21sa0xtZHlhV1JCWTNScGIyNXpMblpwYzJsaWJHVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaM0pwWkR0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVUpoYzJVZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVUpoYzJWY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWSmJuQjFkQ0I5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFNXNXdkWFJjSWp0Y2NseHVhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZEWld4c0lIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZEWld4c1hDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFEyOXNSR1ZtYVc1cGRHbHZiaXdnUWxOU2IzZFBjSFJwYjI1eklIMGdabkp2YlNCY0lpNHVMMk52YlcxdmJsUjVjR1Z6TDJOdmJXMXZiaTEwZVhCbGMxd2lPMXh5WEc1cGJYQnZjblFnZXlCQ1UwUmhkR0ZVWVdKc1pWUmxlSFJKYm5CMWRDQjlJR1p5YjIwZ1hDSXVMMEpUUkdGMFlWUmhZbXhsVkdWNGRFbHVjSFYwWENJN1hISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsUTJobFkydENiM2dnZlNCbWNtOXRJRndpTGk5Q1UwUmhkR0ZVWVdKc1pVTm9aV05yUW05NFhDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFUyVnNaV04wSUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVlRaV3hsWTNSY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWVFpXeGxZM1J2Y2lCOUlHWnliMjBnWENJdUwwSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSmNJanRjY2x4dWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVlRaV3hsWTNSdmNsZHBibVJ2ZHlCOUlHWnliMjBnWENJdUwwSlRSR0YwWVZSaFlteGxVMlZzWldOMGIzSlhhVzVrYjNkY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdVZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVndpTzF4eVhHNWNjbHh1Wlhod2IzSjBJR05zWVhOeklFSlRSR0YwWVZSaFlteGxVbTkzSUdWNGRHVnVaSE1nUWxORVlYUmhWR0ZpYkdWQ1lYTmxJSHRjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUIwZVhCbElFSlRSR0YwWVZSaFlteGxRMlZzYkZ0ZFhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHTmxiR3h6T2lCQ1UwUmhkR0ZVWVdKc1pVTmxiR3hiWFNBOUlGdGRPMXh5WEc0Z0lDQWdiM0IwYVc5dWN6b2dRbE5TYjNkUGNIUnBiMjV6TzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHQ3SUdSaGRHRlRiM1Z5WTJWT1lXMWxPaUJ6ZEhKcGJtYzdJR2R5YVdSSlpEb2djM1J5YVc1bk95Qm5jbWxrU0dWaFpHVnlQem9nWW05dmJHVmhianNnYVhOVVpXMXdiR0YwWlZKdmR6ODZJR0p2YjJ4bFlXNDdJR052Ym5SaGFXNWxja2xrUHpwemRISnBibWQ5ZlNCdmNIUnBiMjV6WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHOXdkR2x2Ym5NNklFSlRVbTkzVDNCMGFXOXVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3p0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJtUmxjaWdwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkQ0J5YjNkRFlYUmxaMjl5ZVNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUlFjbTl3S0Nka1lYUmhMWEp2ZDJOaGRHVm5iM0o1SnlrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjMlYwSUhKdmQwTmhkR1ZuYjNKNUtIWXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNBb0oyUmhkR0V0Y205M1kyRjBaV2R2Y25rbkxDQjJLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDcGNjbHh1SUNBZ0lDb2dRSEJoY21GdElIdENVMFJoZEdGVVlXSnNaVU5sYkd4OUlHTmxiR3hjY2x4dUlDQWdJQ292WEhKY2JpQWdJQ0JoWkdSRFpXeHNLR05sYkd3NklFSlRSR0YwWVZSaFlteGxRMlZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1aGNIQmxibVFvWTJWc2JDNWxiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTmxiR3h6TG5CMWMyZ29ZMlZzYkNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKVFJHRjBZVlJoWW14bFEyVnNiRnRkZlNCalpXeHNjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JoWkdSRFpXeHNjeWhqWld4c2N6b2dZVzU1VzEwcElIdGNjbHh1SUNBZ0lDQWdJQ0JqWld4c2N5NW1iM0pGWVdOb0tDaGpaV3hzS1NBOVBpQjBhR2x6TG1Ga1pFTmxiR3dvWTJWc2JDa3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGJtUmxjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVaV3hsYldWdWRDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25kSEluS1Z4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ3BjY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUh0Q1UwUmhkR0ZVWVdKc1pWSnZkMzFjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTJ4dmJtVW9LVG9nUWxORVlYUmhWR0ZpYkdWU2IzY2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dmRtRnlJR05zYjI1bElEMGdkR2hwY3k1bGJHVnRaVzUwTG1Oc2IyNWxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0x5OXlaWFIxY200Z2JtVjNJRUpUUkdGMFlWUmhZbXhsVW05M0tIc2daV3hsYldWdWREb2dZMnh2Ym1Vc0lHUmhkR0ZUYjNWeVkyVk9ZVzFsT2lCMGFHbHpMbVJoZEdGVGIzVnlZMlZPWVcxbElIMHBPMXh5WEc0Z0lDQWdJQ0FnSUM4dmJHVjBJR05zYjI1bElEMGdUMkpxWldOMExtRnpjMmxuYmloUFltcGxZM1F1WTNKbFlYUmxLRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloMGFHbHpLU2tzSUhSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUM4dmNtVjBkWEp1SUdOc2IyNWxPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5SRGJHOXVaU0E5SUhOMWNHVnlMbU5zYjI1bEtDazdYSEpjYmlBZ0lDQWdJQ0FnTHk5a1pXSjFaMmRsY2p0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYjNCMFEyeHZibVU2SUVKVFVtOTNUM0IwYVc5dWN5QTlJSFJvYVhNdWMyaERiRzl1WlNoMGFHbHpMbTl3ZEdsdmJuTXBPMXh5WEc0Z0lDQWdJQ0FnSUc5d2RFTnNiMjVsTG1selZHVnRjR3hoZEdWU2IzY2dQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1kyeHZibVZTYjNjZ1BTQnVaWGNnUWxORVlYUmhWR0ZpYkdWU2IzY29iM0IwUTJ4dmJtVXBPMXh5WEc0Z0lDQWdJQ0FnSUdOc2IyNWxVbTkzTG1Wc1pXMWxiblFnUFNCd1lYSmxiblJEYkc5dVpTNWxiR1Z0Wlc1ME8xeHlYRzRnSUNBZ0lDQWdJR05zYjI1bFVtOTNMbU5vYVd4a2NtVnVJRDBnY0dGeVpXNTBRMnh2Ym1VdVkyaHBiR1J5Wlc0N1hISmNiaUFnSUNBZ0lDQWdZMnh2Ym1WU2IzY3VZMlZzYkhNZ1BTQjBhR2x6TG1ObGJHeHpMbTFoY0Nnb2Rpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyeHZibVZEWld4c0lEMGdkaTVqYkc5dVpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiRzl1WlZKdmR5NWxiR1Z0Wlc1MExtRndjR1Z1WkNoamJHOXVaVU5sYkd3dVpXeGxiV1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYkc5dVpVTmxiR3c3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHOXVaVkp2ZHp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm1iMk4xYzFKdmR5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkpsYlc5MlpVTnNZWE56S0NkMFlXSnNaUzFoWTNScGRtVW5LUzVoWkdSRGJHRnpjeWduZEdGaWJHVXRZV04wYVhabEp5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWjJWMFNXNXdkWFJ6S0NrNklFSlRSR0YwWVZSaFlteGxTVzV3ZFhSYlhTQjdYSEpjYmlBZ0lDQWdJQ0FnTHlvcVhISmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdRbE5FWVhSaFZHRmliR1ZKYm5CMWRGdGRYSEpjYmlBZ0lDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdWNIVjBjem9nUWxORVlYUmhWR0ZpYkdWSmJuQjFkRnRkSUQwZ1cxMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR1JsWW5WbloyVnlPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMlZzYkhNdVptOXlSV0ZqYUNnb1kyVnNiQ3dnYVdSNEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamFHbHNaSEpsYmlBOUlHTmxiR3d1WTJocGJHUnlaVzQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamFHbHNaSEpsYmk1c1pXNW5kR2dnUGlBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiaTVtYjNKRllXTm9LQ2gyTENCcEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hZZ2FXNXpkR0Z1WTJWdlppQkNVMFJoZEdGVVlXSnNaVk5sYkdWamRHOXlLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRITXVjSFZ6YUNoMkxuUjRkRVZzWlcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIWWdhVzV6ZEdGdVkyVnZaaUJDVTBSaGRHRlVZV0pzWlVsdWNIVjBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRITXVjSFZ6YUNoMktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUFvZGlCcGJuTjBZVzVqWlc5bUlFSlRSR0YwWVZSaFlteGxTVzV3ZFhRcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z0lDQWdJR2x1Y0hWMGN5NXdkWE5vS0hZcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzV3ZFhSek8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dWZTQnRiMlJsYkZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q1UwUmhkR0ZVWVdKc1pYMGdaM0pwWkNCcGJuTjBZVzVqWlZ4eVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UwSlRSR0YwWVZSaFlteGxRMlZzYkgwZ2NtVjBkWEp1Y3lCMGFHVWdaM0pwWkNCalpXeHNJR052Ym5SaGFXNXBibWNnZEdobElHbHVjSFYwWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdOeVpXRjBaVWx1Y0hWMFJtOXlLRzF2WkdWc09pQkNVMFJoZEdGVVlXSnNaVU52YkVSbFptbHVhWFJwYjI0c0lHZHlhV1E2SUVKVFJHRjBZVlJoWW14bEtUb2dRbE5FWVhSaFZHRmliR1ZEWld4c0lIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pITWdQU0IwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpVNWhiV1U3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2RwWkNBOUlIUm9hWE11YjNCMGFXOXVjeTVuY21sa1NXUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwYm5CMWRDQTlJRzUxYkd3N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlpHVmlkV2RuWlhJN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0cxdlpHVnNMa1JoZEdGVWVYQmxJRDA5UFNBbmMyVnNaV04wSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQ0E5SUc1bGR5QkNVMFJoZEdGVVlXSnNaVk5sYkdWamRDaDdSR0YwWVZOdmRYSmpaVTVoYldVNklHUnpMQ0JUWld4bFkzUlBjSFJwYjI1ek9pQnRiMlJsYkM1RVlYUmhVMjkxY21ObGZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHMXZaR1ZzTGtSaGRHRlVlWEJsSUQwOVBTQW5ZMmhsWTJ0aWIzZ25LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMElEMGdibVYzSUVKVFJHRjBZVlJoWW14bFEyaGxZMnRDYjNnb1pITXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaHRiMlJsYkM1RVlYUmhWSGx3WlNBOVBUMGdKM05sYkdWamRHOXlKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVQwUlBPaUJHYVhnZ2RIZHZJSFI1Y0dWeklHOW1JSE5sZEhScGJtZHpJU0VoWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCelYybHVaRzkzSUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBiM0pYYVc1a2IzY29lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNFNWhiV1U2SUcxdlpHVnNMbEJ5YjNCT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5U1dRNklIUm9hWE11YjNCMGFXOXVjeTVqYjI1MFlXbHVaWEpKWkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnliRU5pT2lCdGIyUmxiQzVUWld4bFkzUnZja1JoZEdGRFFpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5YVdSRGIyeHpPaUJ0YjJSbGJDNVRaV3hsWTNSdmNrTnZiSE5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtbGtMbk5sYkdWamRHOXljeTVoWkdRb2MxZHBibVJ2ZHlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZENBOUlHNWxkeUJDVTBSaGRHRlVZV0pzWlZObGJHVmpkRzl5S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFUmhkR0ZUYjNWeVkyVk9ZVzFsT2lCa2N5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJ5YjNCT1lXMWxPaUJ0YjJSbGJDNVFjbTl3VG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRUowYmtsa09pQmNJbUowYmw5Y0lpQXJJR2RwWkNBcklGd2lYM1JsYlhCc1lYUmxYM0p2ZDE5Y0lpQXJJRzF2WkdWc0xsQnliM0JPWVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRM056UTJ4aGMzTTZJRndpWm05eWJTMWpiMjUwY205c0lHWnZjbTB0WTI5dWRISnZiQzF6YlZ3aUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSV3hsYldWdWRFbGtPaUJuYVdRZ0t5QmNJbDkwWlcxd2JHRjBaVjl5YjNkZlhDSWdLeUJ0YjJSbGJDNVFjbTl3VG1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRWx1Y0hWMFZIbHdaVG9nWENKMFpYaDBYQ0lzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUWJHRmpaVWh2YkdSbGNqb2diVzlrWld3dVRtRnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVKMGJrTnNhV05yT2lBb2MyVnVaR1Z5T2lCQ1UwUmhkR0ZVWVdKc1pWTmxiR1ZqZEc5eUxDQmxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzFkcGJtUnZkeTVuY21sa0xuSmxiVzkyWlVoaGJtUnNaWElvZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gxSlBWMTlFVDFWQ1RFVmZRMHhKUTB0RlJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MxZHBibVJ2ZHk1bmNtbGtMbUZrWkVoaGJtUnNaWElvZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gxSlBWMTlFVDFWQ1RFVmZRMHhKUTB0RlJDd2dLSE1zSUdWMktTQTlQaUJ6Wlc1a1pYSXViMjVKZEdWdFUyVnNaV04wWldRb2MxZHBibVJ2ZHl3Z1pYWXBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpWMmx1Wkc5M0xuTm9iM2NvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFFnUFNCdVpYY2dRbE5FWVhSaFZHRmliR1ZVWlhoMFNXNXdkWFFvWkhNc0lHMXZaR1ZzTGtSaGRHRlVlWEJsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVZV1JrUTJ4aGMzTW9KMlp2Y20wdFkyOXVkSEp2YkNjc0lDZG1iM0p0TFdOdmJuUnliMnd0YzIwbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1JtbDRJSFIzYnlCMGVYQmxjeUJ2WmlCelpYUjBhVzVuY3lFaElWeHlYRzRnSUNBZ0lDQWdJR2xtSUNodGIyUmxiQzVFWVhSaFZIbHdaU0FoUFQwZ0ozTmxiR1ZqZEc5eUp5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFF1Y0hKdmNITW9XMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCclpYazZJQ2RrWVhSaExYQnliM0J1WVcxbEp5d2dkbUZzZFdVNklHMXZaR1ZzTGxCeWIzQk9ZVzFsSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJR3RsZVRvZ0ozUnBkR3hsSnl3Z2RtRnNkV1U2SUcxdlpHVnNMazVoYldVZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnYTJWNU9pQW5hV1FuTENCMllXeDFaVG9nWjJsa0lDc2dYQ0pmZEdWdGNHeGhkR1ZmY205M1gxd2lJQ3NnYlc5a1pXd3VVSEp2Y0U1aGJXVWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhzZ2EyVjVPaUFuY0d4aFkyVm9iMnhrWlhJbkxDQjJZV3gxWlRvZ2JXOWtaV3d1VG1GdFpTQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYlc5a1pXd3VTWE5MWlhrZ1BUMDlJSFJ5ZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFF1Y21WaFpHOXViSGtnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1cGMwdGxlU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1ozSnBaQzV2Y0hScGIyNXpMbWx6VW1WaFpHOXViSGtnUFQwOUlIUnlkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1d2RYUXVjbVZoWkc5dWJIa2dQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzV6WlhSRGMzTW9KMk4xY25OdmNpY3NJQ2R3YjJsdWRHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMExuTmxkRU56Y3lnbmRYTmxjaTF6Wld4bFkzUW5MQ0FuYm05dVpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUmtJRDBnYm1WM0lFSlRSR0YwWVZSaFlteGxRMlZzYkNodVpYY2dRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dUtDa3BPMXh5WEc0Z0lDQWdJQ0FnSUhSa0xtRndjR1Z1WkNocGJuQjFkQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSa08xeHlYRzVjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dWZTQnRiMlJsYkZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCamNtVmhkR1ZJWldGa1pYSkdiM0lvYlc5a1pXdzZJRUpUUkdGMFlWUmhZbXhsUTI5c1JHVm1hVzVwZEdsdmJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjBhQ0E5SUc1bGR5QkNVMFJoZEdGVVlXSnNaVU5sYkd3b2JXOWtaV3dzSUhSeWRXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb0xtRmtaRU5zWVhOektDZHpiM0owYVc1bkp5a3VZV1JrUTJ4aGMzTW9KMlJ6TFdOdmJDY3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb0xuTmxkRlJsZUhRb2JXOWtaV3d1VG1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnZEdndWNISnZjQ2duWkdGMFlTMTBhQzF3Y205d2JtRnRaU2NzSUcxdlpHVnNMbEJ5YjNCT1lXMWxLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdnN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdaMlYwVm1semFXSnNaVWx1Y0hWMGN5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhVzV3ZFhSeklEMGdkR2hwY3k1blpYUkpibkIxZEhNb0tUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhVzV3ZFhSekxtWnBiSFJsY2lnb2FXNXdkWFFwSUQwK0lHbHVjSFYwTG5acGMybGliR1VnUFQwOUlIUnlkV1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nVkdocGN5Qm1kVzVqZEdsdmJpQnlaWFIxY201eklIUm9aU0J5YjNjZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnWVdOMGRXRnNJR2x1Y0hWMGMxeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdRU0J5YjNjZ2NtVmpiM0prSUdOdmJuUmhhVzVwYm1jZ1lXTjBkV0ZzSUdsdWNIVjBjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhSU2IzZEVZWFJoUlhoMEtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnliM2RKYm5CMWRITWdQU0IwYUdsekxtZGxkRWx1Y0hWMGN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQjdmVHRjY2x4dUlDQWdJQ0FnSUNCeWIzZEpibkIxZEhNdVptOXlSV0ZqYUNnb2NtOTNTVzV3ZFhRc0lHa3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTmxiR3hRY205d1RtRnRaU0E5SUhKdmQwbHVjSFYwTG0xdlpHVnNUbUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WamIzSmtXMk5sYkd4UWNtOXdUbUZ0WlYwZ1BTQnliM2RKYm5CMWREdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVmpiM0prTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkRkp2ZDBsdVpHVjRLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjNkSmJtUmxlQ0E5SUhSb2FYTXVaMlYwVUhKdmNDZ25aR0YwWVMxeWIzZHBibVJsZUNjcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWEp6WlVsdWRDaHliM2RKYm1SbGVDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQlVhR2x6SUdaMWJtTjBhVzl1SUhKbGRIVnlibk1nWVc0Z2IySnFaV04wSUhkb2FXTm9JR052Ym5SaGFXNXpJSFJvWlNCMllXeDFaWE1nYjJZZ2RHaGxJR0ZzYkNCMGFHVWdhVzV3ZFhSeklHbHVJSFJvWlNCeWIzZGNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJRkpsZEhWdWN5QmhiaUJ2WW1wbFkzUWdkMmhwWTJnZ1kyOXVkR0ZwYm5NZ2RHaGxJSFpoYkhWbGN5QnZaaUIwYUdVZ2FXNXdkWFJ6WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdkbGRGSnZkMFJoZEdFb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkMGx1Y0hWMGN5QTlJSFJvYVhNdVoyVjBTVzV3ZFhSektDazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkMGx1WkdWNElEMGdkR2hwY3k1blpYUlNiM2RKYm1SbGVDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQjdmVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjbTkzUTJGMElEMGdkR2hwY3k1eWIzZERZWFJsWjI5eWVUdGNjbHh1SUNBZ0lDQWdJQ0J5WldOdmNtUmJKM0p2ZDBOaGRHVm5iM0o1SjEwZ1BTQnliM2REWVhRN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKdmQwbHVjSFYwY3k1bWIzSkZZV05vS0NoeWIzZEpibkIxZEN3Z2FTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyVnNiRkJ5YjNCT1lXMWxJRDBnY205M1NXNXdkWFF1Ylc5a1pXeE9ZVzFsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldOdmNtUmJZMlZzYkZCeWIzQk9ZVzFsWFNBOUlISnZkMGx1Y0hWMExuWmhiRHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WldOdmNtUmJYQ0pqYkdsbGJuUlNiM2RPZFcxaVpYSmNJbDBnUFNCeWIzZEpibVJsZUR0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnlnblIyVjBVbTkzUkdGMFlUb2dKeXdnY21WamIzSmtLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WamIzSmtPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdselVtOTNSR2x5ZEhrb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBVSEp2Y0NnblpHRjBZUzFwYzJScGNuUjVKeWtnUFQwOUlDZDBjblZsSnp0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVUpoYzJVZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVUpoYzJWY0lqdGNjbHh1YVcxd2IzSjBJSHNnUWxORVlYUmhWR0ZpYkdWU2IzY2dmU0JtY205dElGd2lMaTlDVTBSaGRHRlVZV0pzWlZKdmQxd2lPMXh5WEc1Y2NseHVaWGh3YjNKMElHTnNZWE56SUVKVFJHRjBZVlJoWW14bFVtOTNRMjlzYkdWamRHbHZiaUJsZUhSbGJtUnpJRUpUUkdGMFlWUmhZbXhsUW1GelpTQjdYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCMGVYQmxJRUpUUkdGMFlWUmhZbXhsVW05M1cxMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjbTkzY3pvZ1FsTkVZWFJoVkdGaWJHVlNiM2RiWFNBOUlGdGRPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDVTBSaGRHRlVZV0pzWlZKdmQzMGdjbTkzWEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdGa1pGSnZkeWh5YjNjNklFSlRSR0YwWVZSaFlteGxVbTkzS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG1Gd2NHVnVaQ2h5YjNjdVpXeGxiV1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnZEdocGN5NW5aWFJPWlhoMFVtOTNTVzVrWlhnb0tUdGNjbHh1SUNBZ0lDQWdJQ0J5YjNjdWNISnZjQ2duWkdGMFlTMXliM2RwYm1SbGVDY3NJR2x1WkdWNEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpVZVhCbElEMGdjbTkzTG05d2RHbHZibk11WjNKcFpFaGxZV1JsY2lBOVBUMGdkSEoxWlNBL0lDZG9aV0ZrSnlBNklDZGtZWFJoSnp0Y2NseHVJQ0FnSUNBZ0lDQnliM2N1Y0hKdmNDZ25hV1FuTENCZ0pIdHliM2N1YjNCMGFXOXVjeTVuY21sa1NXUjlYeVI3Y2xSNWNHVjlYeVI3YVc1a1pYaDlZQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjNkekxuQjFjMmdvY205M0tUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJXYVhOcFlteGxVbTkzY3lncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eWIzZHpMbVpwYkhSbGNpZ29jbTkzS1NBOVBpQnliM2N1ZG1semFXSnNaU0E5UFQwZ2RISjFaU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1oyVjBUbVY0ZEZKdmQwbHVaR1Y0S0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KdmQzTXViR1Z1WjNSb0lDc2dNVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNBdkx5Qm5aWFJCWTNScGIyNXpVbTkzS0NrZ2UxeHlYRzRnSUNBZ0x5OGdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSnZkM011Wm1sdVpDZ29jbTkzS1NBOVBpQnliM2N1YjNCMGFXOXVjeTVwYzBGamRHbHZibk5TYjNjZ1BUMDlJSFJ5ZFdVcE8xeHlYRzRnSUNBZ0x5OGdmVnh5WEc0Z0lDQWdaMlYwUjNKcFpGUnBkR3hsYzFKdmR5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliM2R6TG1acGJtUW9LSEp2ZHlrZ1BUNGdjbTkzTG05d2RHbHZibk11WjNKcFpFaGxZV1JsY2lBOVBUMGdkSEoxWlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dUlpd2lhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZTYjNkRGIyeHNaV04wYVc5dUlIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZTYjNkRGIyeHNaV04wYVc5dVhDSTdYSEpjYmx4eVhHNWxlSEJ2Y25RZ1kyeGhjM01nUWxORVlYUmhWR0ZpYkdWSVpXRmtaWElnWlhoMFpXNWtjeUJDVTBSaGRHRlVZV0pzWlZKdmQwTnZiR3hsWTNScGIyNGdlMXh5WEc1Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUm9aV0ZrSnlrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUkRiR0Z6Y3lnbmRHRmliR1V0YkdsbmFIUW5LVnh5WEc0Z0lDQWdmVnh5WEc1OVhISmNiaUlzSW1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFVtOTNJSDBnWm5KdmJTQmNJaTR2UWxORVlYUmhWR0ZpYkdWU2IzZGNJanRjY2x4dWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVlNiM2REYjJ4c1pXTjBhVzl1SUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVlNiM2REYjJ4c1pXTjBhVzl1WENJN1hISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdRbE5FWVhSaFZHRmliR1ZDYjJSNUlHVjRkR1Z1WkhNZ1FsTkVZWFJoVkdGaWJHVlNiM2REYjJ4c1pXTjBhVzl1SUh0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozUmliMlI1SnlrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FxSUVCd1lYSmhiU0I3UWxORVlYUmhWR0ZpYkdWU2IzZDlJSEp2ZDF4eVhHNGdJQ0FnS2k5Y2NseHVJQ0FnSUhKdmQxTnBZbXhwYm1kektISnZkem9nUWxORVlYUmhWR0ZpYkdWU2IzY3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXliM2R6TG1acGJIUmxjaWdvZGl3Z2FTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RpQWhQVDBnY205M0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIWTdJQzh2SUhKbGRIVnliaUJoYkd3Z1pYaGpaWEIwSUhSb1pTQmpkWEp5Wlc1MElISnZkMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q1UwUmhkR0ZVWVdKc1pWSnZkMzBnY205M1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHWnZZM1Z6VW05M0tISnZkem9nUWxORVlYUmhWR0ZpYkdWU2IzY3BJSHRjY2x4dUlDQWdJQ0FnSUNCeWIzY3VjbVZ0YjNabFEyeGhjM01vSjNSaFlteGxMV0ZqZEdsMlpTY3BMbUZrWkVOc1lYTnpLQ2QwWVdKc1pTMWhZM1JwZG1VbktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MybGliR2x1WjNNZ1BTQjBhR2x6TG5KdmQxTnBZbXhwYm1kektISnZkeWs3WEhKY2JpQWdJQ0FnSUNBZ2MybGliR2x1WjNNdVptOXlSV0ZqYUNnb2Rpd2dhU2tnUFQ0Z2RpNXlaVzF2ZG1WRGJHRnpjeWduZEdGaWJHVXRZV04wYVhabEp5a3BPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNibHh5WEc1Y2NseHVJQ0FnSUdkbGRGUmxiWEJzWVhSbFVtOTNLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0IwYUdsekxuSnZkM011Wm1sc2RHVnlLR1oxYm1OMGFXOXVJQ2gyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJMbTl3ZEdsdmJuTXVhWE5VWlcxd2JHRjBaVkp2ZHlBOVBUMGdkSEoxWlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMk8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUNZbUlISmxjM1ZzZEM1c1pXNW5kR2dnUGlBd0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBXekJkTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHZGxkRVJwY25SNVVtOTNjeWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY205M2N5QTlJSFJvYVhNdWNtOTNjeTVtYVd4MFpYSW9LSFlzSUdrcElEMCtJSFl1YVhOU2IzZEVhWEowZVNncEtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbTkzY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJFYVhKMGVWSmxZMjl5WkhNb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHUnBjblI1VW05M2N5QTlJSFJvYVhNdVoyVjBSR2x5ZEhsU2IzZHpLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoa2FYSjBlVkp2ZDNNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJYVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaSE1nUFNCYlhUdGNjbHh1SUNBZ0lDQWdJQ0JrYVhKMGVWSnZkM011Wm05eVJXRmphQ2dvY205M0xDQnBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkyOXlaSE11Y0hWemFDaHliM2N1WjJWMFVtOTNSR0YwWVNncEtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsWTI5eVpITTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWjJWMFFXeHNVbVZqYjNKa2N5Z3BJSHRjY2x4dUlDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQzh2SUdGc2JDQnliM2R6SUdWNFkyVndkQ0IwYUdVZ2RHVnRjR3hoZEdVZ2NtOTNYSEpjYmlBZ0lDQWdJQ0FnTHk5Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkM01nUFNCMGFHbHpMbkp2ZDNNdVptbHNkR1Z5S0NoeWIzY3BJRDArSUhKdmR5NXZjSFJwYjI1ekxtbHpWR1Z0Y0d4aGRHVlNiM2NnUFQwOUlHWmhiSE5sS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY21WamIzSmtjeUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSEp2ZDNNdVptOXlSV0ZqYUNnb2NtOTNLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFkyOXlaSE11Y0hWemFDaHliM2N1WjJWMFVtOTNSR0YwWVNncEtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsWTI5eVpITTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWjJWMFUyVnNaV04wWldSU2IzY29LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbTkzY3k1bWFXNWtLQ2gyTENCcEtTQTlQaUIyTG1oaGMwTnNZWE56S0NkMFlXSnNaUzFoWTNScGRtVW5LU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzVjY2x4dUlDQWdJRzFoY210RVpXeGxkR1ZrS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeWIzY2dQU0IwYUdsekxtZGxkRk5sYkdWamRHVmtVbTkzS0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGeWIzY3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITnBZbXhwYm1keklEMGdkR2hwY3k1eWIzZFRhV0pzYVc1bmN5aHliM2NwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJzWVhOMFUybGliR2x1WnlBOUlITnBZbXhwYm1kelczTnBZbXhwYm1kekxteGxibWQwYUNBdElERmRPMXh5WEc0Z0lDQWdJQ0FnSUhKdmR5NXlaVzF2ZG1WRGJHRnpjeWduZEdGaWJHVXRZV04wYVhabEp5azdYSEpjYmlBZ0lDQWdJQ0FnY205M0xuQnliM0FvSjJSaGRHRXRhWE5rYVhKMGVTY3NJQ2QwY25WbEp5azdYSEpjYmlBZ0lDQWdJQ0FnY205M0xtTnpjeUE5SUhzZ0oyUnBjM0JzWVhrbk9pQW5ibTl1WlNjZ2ZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEp2ZDBOaGRDQTlJSEp2ZHk1eWIzZERZWFJsWjI5eWVUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2NtOTNRMkYwSUQwOVBTQW5RVVJFUlVRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkeTV5YjNkRFlYUmxaMjl5ZVNBOUlDZEJSRVJGUkY5RVJVeEZWRVZFSnp0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkeTV5YjNkRFlYUmxaMjl5ZVNBOUlDZEVSVXhGVkVWRUp6dGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOTBhV1o1VEdsemRHVnVaWEp6S0hSb2FYTXVZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOUhVa2xFWDFWUVJFRlVSVVFzSUhzZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUhKdmR5NXZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVk9ZVzFsTENCRmRtVnVkRVJoZEdFNklIc2dSWFpsYm5RNklISnZkeUI5SUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVp2WTNWelVtOTNLR3hoYzNSVGFXSnNhVzVuS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUZKbGJXOTJaWE1nZEdobElISnZkeUJtY205dElISnZkM01nWTI5c2JHVmpkR2x2Ymx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q1UwUmhkR0ZVWVdKc1pWSnZkMzBnY205M1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lISmxiVzkyWlZKdmR5aHliM2M2SUVKVFJHRjBZVlJoWW14bFVtOTNLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUhSb2FYTXVabWx1WkNoZ2RISmJaR0YwWVMxeWIzZGpZWFJsWjI5eWVUMG5KSHR5YjNjdWNtOTNRMkYwWldkdmNubDlKMTFnS1M1eVpXMXZkbVVvS1R0Y2NseHVJQ0FnSUNBZ0lDQnliM2N1Wld4bGJXVnVkQzV5WlcxdmRtVW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnZEdocGN5NXliM2R6TG1sdVpHVjRUMllvY205M0tUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnUGlBdE1TbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjNkekxuTndiR2xqWlNocGJtUmxlQ3dnTVNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dUlpd2lYSEpjYm1sdGNHOXlkQ0I3SUZSdmIyeDBhWEFnZlNCbWNtOXRJRndpWW05dmRITjBjbUZ3WENKY2NseHVhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZDWVhObElIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZDWVhObFhDSTdYSEpjYm1sdGNHOXlkQ0FuTGk0dmMyVnlkbWxqWlhNdmMzUnlhVzVuTG1WNGRHVnVjMmx2Ym5NblhISmNibWx0Y0c5eWRDQjdYSEpjYmlBZ0lDQlRaWE56YVc5dVUzUnZjbUZuWlZObGNuWnBZMlVzSUdKelJHRjBZVlJoWW14bFJHbHpZMjkyWlhKNVUyVnlkbWxqWlN3Z1EyOXZhMmxsU0dWc2NHVnlYSEpjYmlBZ0lDQXNJR1JoZEdGRmRtVnVkSE5UWlhKMmFXTmxMQ0JoY0hCRVlYUmhSWFpsYm5SekxDQmhjSEJCWTNScGIyNXpYSEpjYm4wZ1puSnZiU0JjSWk0dUwzTmxjblpwWTJWelhDSTdYSEpjYmx4eVhHNXBiWEJ2Y25RZ2V5QkNVMFJoZEdGVVlXSnNaVU5sYkd3Z2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVU5sYkd4Y0lqdGNjbHh1YVcxd2IzSjBJSHRjY2x4dUlDQWdJRUpUUkdGMFlWUmhZbXhsUTI5c1JHVm1hVzVwZEdsdmJpd2dRbE5GZG1WdWRFaGhibVJzWlhKY2NseHVJQ0FnSUN3Z1FsTkZkbVZ1ZEZOMVluTmpjbWxpWlhKTmIyUmxiQ3dnUWxOVGIzSjBhVzVuVW1WeGRXVnpkRVYyWlc1MExDQkNVME52Ym1acFoxVndaR0YwWldSRmRtVnVkRnh5WEc0Z0lDQWdMQ0JDVTBOdmJITlNaVzl5WkdWeVpXUkZkbVZ1ZEZ4eVhHNGdJQ0FnTENCQ1UwWmxkR05vVW1WamIzSmtSWFpsYm5Rc0lFSlRSM0pwWkZWd1pHRjBaV1JGZG1WdWRDd2dRbE5TYjNkVmNHUmhkR1ZrUlhabGJuUmNjbHh1SUNBZ0lDd2dRbE5HYVdWc1pGVndaR0YwWldSRmRtVnVkQ3dnUWxORVlYUmhWR0ZpYkdWUVlXZHBibWROWlhSaFJHRjBZU3dnUWxORVlYUmhWR0ZpYkdWUVlXZHBibUYwYVc5dVQzQjBhVzl1YzF4eVhHNGdJQ0FnTENCQ1UwUmhkR0ZVWVdKc1pVOXdkR2x2Ym5Nc0lFSlRSR0YwWVZSaFlteGxTSFIwY0VOc2FXVnVkRTl3ZEdsdmJuTXNJRUpUUlhabGJuUXNYSEpjYmlBZ0lDQkNVMFpsZEdOb1VtVmpiM0prUlhKeWIzSkZkbVZ1ZEN3Z1FsTkRiMngxYlc1VFpYUjBhVzVuYzF4eVhHNTlJR1p5YjIwZ1hDSXVMaTlqYjIxdGIyNVVlWEJsY3k5amIyMXRiMjR0ZEhsd1pYTmNJanRjY2x4dVhISmNibWx0Y0c5eWRDQjdJRUpUUkdGMFlWUmhZbXhsUTJobFkydENiM2dnZlNCbWNtOXRJRndpTGk5Q1UwUmhkR0ZVWVdKc1pVTm9aV05yUW05NFhDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFNIUjBjRU5zYVdWdWRDQjlJR1p5YjIwZ1hDSXVMMEpUUkdGMFlWUmhZbXhsU0hSMGNFTnNhV1Z1ZEZ3aU8xeHlYRzVwYlhCdmNuUWdleUJDVTBSaGRHRlVZV0pzWlZCaFoybHVZWFJwYjI0Z2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVkJoWjJsdVlYUnBiMjVjSWp0Y2NseHVhVzF3YjNKMElIc2dRbE5FWVhSaFZHRmliR1ZKYm1acGJtbDBaVk5qY205c2JDQjlJR1p5YjIwZ1hDSXVMMEpUUkdGMFlWUmhZbXhsU1c1bWFXNXBkR1ZUWTNKdmJHeGNJanRjY2x4dWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVlRaV3hsWTNSdmNsZHBibVJ2ZDBOdmJHeGxZM1JwYjI0Z2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVk5sYkdWamRHOXlWMmx1Wkc5M1EyOXNiR1ZqZEdsdmJsd2lPMXh5WEc1cGJYQnZjblFnZXlCQ1UwUmhkR0ZVWVdKc1pVMWhjbXRsY2lCOUlHWnliMjBnWENJdUwwSlRSR0YwWVZSaFlteGxUV0Z5YTJWeVhDSTdYSEpjYm1sdGNHOXlkQ0I3SUVKVFJHRjBZVlJoWW14bFFXTjBhVzl1Y3lCOUlHWnliMjBnWENJdUwwSlRSR0YwWVZSaFlteGxRV04wYVc5dWMxd2lPMXh5WEc1cGJYQnZjblFnZXlCQ1UwUmhkR0ZVWVdKc1pWSnZkeUI5SUdaeWIyMGdYQ0l1TDBKVFJHRjBZVlJoWW14bFVtOTNYQ0k3WEhKY2JtbHRjRzl5ZENCN0lFSlRSR0YwWVZSaFlteGxTR1ZoWkdWeUlIMGdabkp2YlNCY0lpNHZRbE5FWVhSaFZHRmliR1ZJWldGa1pYSmNJanRjY2x4dWFXMXdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVkNiMlI1SUgwZ1puSnZiU0JjSWk0dlFsTkVZWFJoVkdGaWJHVkNiMlI1WENJN1hISmNibHh5WEc1bGVIQnZjblFnWTJ4aGMzTWdRbE5FWVhSaFZHRmliR1VnWlhoMFpXNWtjeUJDVTBSaGRHRlVZV0pzWlVKaGMyVWdlMXh5WEc1Y2NseHVJQ0FnSUc5d2RHbHZibk02SUVKVFJHRjBZVlJoWW14bFQzQjBhVzl1Y3p0Y2NseHVJQ0FnSUdobFlXUTZJRUpUUkdGMFlWUmhZbXhsU0dWaFpHVnlPMXh5WEc0Z0lDQWdZbTlrZVRvZ1FsTkVZWFJoVkdGaWJHVkNiMlI1TzF4eVhHNGdJQ0FnYzJWc1pXTjBiM0p6T2lCQ1UwUmhkR0ZVWVdKc1pWTmxiR1ZqZEc5eVYybHVaRzkzUTI5c2JHVmpkR2x2Ymp0Y2NseHVJQ0FnSUhCaFoybHVZWFJ2Y2pvZ1FsTkVZWFJoVkdGaWJHVlFZV2RwYm1GMGFXOXVPMXh5WEc0Z0lDQWdhSFIwY0VOc2FXVnVkRG9nUWxORVlYUmhWR0ZpYkdWSWRIUndRMnhwWlc1ME8xeHlYRzRnSUNBZ2MyVnpjMmx2YmtOaFkyaGxPaUJUWlhOemFXOXVVM1J2Y21GblpWTmxjblpwWTJVN1hISmNiaUFnSUNCcGJtWnBibWwwWlZOamNtOXNiR1Z5T2lCQ1UwUmhkR0ZVWVdKc1pVbHVabWx1YVhSbFUyTnliMnhzTzF4eVhHNGdJQ0FnWjNKcFpFRmpkR2x2Ym5NNklFSlRSR0YwWVZSaFlteGxRV04wYVc5dWN6dGNjbHh1SUNBZ0lHUnBjMk52ZG1WeVlXSnNaVG9nWW05dmJHVmhianRjY2x4dUlDQWdJR052Ym5SaGFXNWxja1ZzWlcxbGJuUTZJRWhVVFV4RmJHVnRaVzUwTzF4eVhHNWNjbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzl3ZEdsdmJuTTZJRUpUUkdGMFlWUmhZbXhsVDNCMGFXOXVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrSUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsU0dWaFpHVnlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVpYjJSNUlEMGdibVYzSUVKVFJHRjBZVlJoWW14bFFtOWtlU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWc1pXTjBiM0p6SUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsVTJWc1pXTjBiM0pYYVc1a2IzZERiMnhzWldOMGFXOXVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVdkcGJtRjBiM0lnUFNCdVpYY2dRbE5FWVhSaFZHRmliR1ZRWVdkcGJtRjBhVzl1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1FsTkVZWFJoVkdGaWJHVlFZV2RwYm1GMGFXOXVUM0IwYVc5dWN5aDBhR2x6TG05d2RHbHZibk11WkdGMFlWTnZkWEpqWlM1dVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFSlRSR0YwWVZSaFlteGxVR0ZuYVc1blRXVjBZVVJoZEdFb0tTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h3WVdkbEtTQTlQaUIwYUdsekxuQmhaMmx1WVhSdmNrTmhiR3hpWVdOcktIQmhaMlVwS1NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ6YzJsdmJrTmhZMmhsSUQwZ2JtVjNJRk5sYzNOcGIyNVRkRzl5WVdkbFUyVnlkbWxqWlNncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFIUjBjRU5zYVdWdWRDQTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pVaDBkSEJEYkdsbGJuUW9kR2hwY3k1elpYTnphVzl1UTJGamFHVXNJSFJvYVhNdWIzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YUhSMGNFTnNhV1Z1ZEM1allXTm9aVkpsYzNCdmJuTmxjeUE5SUhSb2FYTXViM0IwYVc5dWN5NWpZV05vWlZKbGMzQnZibk5sY3p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXBibVpwYm1sMFpWTmpjbTlzYkdWeUlEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1keWFXUkJZM1JwYjI1eklEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ScGMyTnZkbVZ5WVdKc1pTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBZV2x1WlhKRmJHVnRaVzUwSUQwZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvZEdocGN5NXZjSFJwYjI1ekxtTnZiblJoYVc1bGNrbGtLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCelpYUkVhWE5qYjNabGNtRmliR1VvS1NCN1hISmNiaUFnSUNBZ0lDQWdZbk5FWVhSaFZHRmliR1ZFYVhOamIzWmxjbmxUWlhKMmFXTmxMa0ZrWkNoMGFHbHpLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUWdaR0YwWVZOdmRYSmpaVTVoYldVb0tUb2djM1J5YVc1bklIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmNIUnBiMjV6TG1SaGRHRlRiM1Z5WTJVdWJtRnRaVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUWdhWE5TWldGa1QyNXNlU2dwT2lCaWIyOXNaV0Z1SUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0hScGIyNXpMbWx6VW1WaFpHOXViSGs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1oyVjBJR1JwY25SNVVtVmpiM0prY3lncE9pQnZZbXBsWTNSYlhTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVltOWtlUzVuWlhSRWFYSjBlVkpsWTI5eVpITW9LVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCblpYUWdZV3hzVW1WamIzSmtjeWdwT2lCdlltcGxZM1JiWFh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVpYjJSNUxtZGxkRUZzYkZKbFkyOXlaSE1vS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J3WVdkbFhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQmhaMmx1WVhSdmNrTmhiR3hpWVdOcktIQmhaMlU2SUc1MWJXSmxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0dCUVlXZGxMazVpY2pvZ0pIdHdZV2RsZlNCcGN5QnlaWEYxWlhOMFpXUmdLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVpsZEdOb1IzSnBaRkJoWjJVb2NHRm5aU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1lXUmtTR1ZoWkdWeUtDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaV3hsYldWdWRDNWhjSEJsYm1Rb2RHaHBjeTVvWldGa0xtVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR0ZrWkVKdlpIa29LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBMbUZ3Y0dWdVpDaDBhR2x6TG1KdlpIa3VaV3hsYldWdWRDazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WdVpHVnlLQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2TDNSb2FYTXVaV3hsYldWdWRDQTlJSFJvYVhNdWFuRjFaWEo1S0NjOGRHRmliR1VnWTJ4aGMzTTlYQ0owWVdKc1pTQjBZV0pzWlMxaWIzSmtaWEpsWkNCMFlXSnNaUzFvYjNabGNpQjBZV0pzWlMxemJTQnlaWE5wZW1GaWJHVWdibUYyVkdGaWJHVWdibTkzY21Gd0lHSnpMWFJoWW14bFhDSStQQzkwWVdKc1pUNG5LVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZDBZV0pzWlNjcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXeGxiV1Z1ZEM1amJHRnpjMHhwYzNRdVlXUmtLQ2QwWVdKc1pTY3NJQ2QwWVdKc1pTMWliM0prWlhKbFpDY3NJQ2QwWVdKc1pTMW9iM1psY2ljc0lDZDBZV0pzWlMxemJTY3NJQ2R5WlhOcGVtRmliR1VuTENBbmJtRjJWR0ZpYkdVbkxDQW5ibTkzY21Gd0p5d2dKMkp6TFhSaFlteGxKeWs3WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbWxrSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbWR5YVdSSlpEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuQnliM0FvSjJSaGRHRXRaR0YwWVhOdmRYSmpaU2NzSUhSb2FYTXViM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxMbTVoYldVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMlYwZEdsdVozTWdQU0IwYUdsekxtZGxkRWR5YVdSVFpYUjBhVzVuY3loMGFHbHpMbTl3ZEdsdmJuTXVaM0pwWkVsa0tTQjhmQ0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OemN5QTlJSHNnSjNkcFpIUm9Kem9nSjJsdWFHVnlhWFFuSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQm5jbWxrU0dWaFpHVnlVbTkzSUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsVW05M0tIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVk52ZFhKalpVNWhiV1U2SUhSb2FYTXViM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxMbTVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdkeWFXUkpaRG9nZEdocGN5NXZjSFJwYjI1ekxtZHlhV1JKWkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWjNKcFpFaGxZV1JsY2pvZ2RISjFaVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJR2R5YVdSSVpXRmtaWEpTYjNjdVlXUmtRMnhoYzNNb0oyUnlZV2RuWVdKc1pTY3BMbUZrWkVOc1lYTnpLQ2RuY21sa0xXTnZiSE1uS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHZHlhV1JDYjJSNVVtOTNJRDBnYm1WM0lFSlRSR0YwWVZSaFlteGxVbTkzS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOVVpXMXdiR0YwWlZKdmR6b2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWTnZkWEpqWlU1aGJXVTZJSFJvYVhNdWIzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2R5YVdSSlpEb2dkR2hwY3k1dmNIUnBiMjV6TG1keWFXUkpaQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdGcGJtVnlTV1E2SUhSb2FYTXViM0IwYVc5dWN5NWpiMjUwWVdsdVpYSkpaRnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJR2R5YVdSQ2IyUjVVbTkzTG1Ga1pFTnNZWE56S0NkbmNtbGtMWEp2ZDNNbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1ozSnBaRUp2WkhsU2IzY3VZM056SUQwZ2V5QW5aR2x6Y0d4aGVTYzZJQ2R1YjI1bEp5QjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWjNKcFpFTnZiSFZ0Ym5NZ1BTQjBhR2x6TG1Gd2NHeDVRMjlzVDNKa1pYSnBibWNvYzJWMGRHbHVaM01wTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lDOHZJR0ZrWkNCeWIzY2diV0Z5YTJWeWN5QXRJSFJvYVhNZ2FHVnNjSE1nZEc4Z2FXMXdjbTkyWlNCMGFHVWdkbWx6ZFdGc0lHRndjR1ZoY21GdVkyVWdiMllnYzJWc1pXTjBaV1FnY205M1hISmNiaUFnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNCMllYSWdiV2dnUFNCdVpYY2dRbE5FWVhSaFZHRmliR1ZEWld4c0tHNWxkeUJDVTBSaGRHRlVZV0pzWlVOdmJFUmxabWx1YVhScGIyNG9LU3dnZEhKMVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhKclpYSWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVk5ZWEpyWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2JXSWdQU0J1WlhjZ1FsTkVZWFJoVkdGaWJHVkRaV3hzS0c1bGR5QkNVMFJoZEdGVVlXSnNaVU52YkVSbFptbHVhWFJwYjI0b0tTazdYSEpjYmlBZ0lDQWdJQ0FnYldJdVlYQndaVzVrS0cxaGNtdGxjaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2R5YVdSSVpXRmtaWEpTYjNjdVlXUmtRMlZzYkNodGFDazdYSEpjYmlBZ0lDQWdJQ0FnWjNKcFpFSnZaSGxTYjNjdVlXUmtRMlZzYkNodFlpazdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JuY21sa1EyOXNkVzF1Y3k1bWIzSkZZV05vS0Nobll5a2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hsSUdkeWFXUWdjM1J2Y21WeklHRWdZMjl2YTJsbElIZG9hV05vSUdOdmJuUmhhVzV6SUdsdVptOGdZV0p2ZFhRZ2RHaGxJSFpwYzJsaWJHbDBlU0JoYm1RZ2MybDZaU0J2WmlCMGFHVWdZMjlzZFcxdVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIZGxJSGRwYkd3Z2RYTmxJSFJvYVhNZ2FXNW1ieUIwYnlCemFYcGxJR0Z1WkNCMmFYTjFZV3hwZW1VZ2RHaGxJR2R5YVdRZ1pHRjBZVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRm5ZeTVRY205d1RtRnRaU2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZiRk5sZEhScGJtZHpJRDBnYzJWMGRHbHVaM05iWjJNdVVISnZjRTVoYldWZE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSb0lEMGdaM0pwWkVobFlXUmxjbEp2ZHk1amNtVmhkR1ZJWldGa1pYSkdiM0lvWjJNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR1FnUFNCbmNtbGtRbTlrZVZKdmR5NWpjbVZoZEdWSmJuQjFkRVp2Y2lobll5d2dkR2hwY3lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6YjNKMGFXNW5JRzltSUhSb1pTQmtZWFJoSUhkb1pXNGdkR2hsSUdobFlXUmxjaUJqWld4c0lHbHpJR05zYVdOclpXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSVGIzSjBhVzVuS0hSb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCc2VVTnZiRk5sZEhScGJtZHpLSFJvTENCamIyeFRaWFIwYVc1bmN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVhCd2JIbERiMnhUWlhSMGFXNW5jeWgwWkN3Z1kyOXNVMlYwZEdsdVozTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5jbWxrU0dWaFpHVnlVbTkzTG1Ga1pFTmxiR3dvZEdncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbmNtbGtRbTlrZVZKdmR5NWhaR1JEWld4c0tIUmtLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa0xtRmtaRkp2ZHlobmNtbGtTR1ZoWkdWeVVtOTNLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUp2WkhrdVlXUmtVbTkzS0dkeWFXUkNiMlI1VW05M0tWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQzh2SUdGa1pDQm5jbWxrSUdGamRHbHZibk1nZEc5dmJHSmhjbHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUkJZM1JwYjI1ektDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1lXUmtJR2hsWVdSbGNpQmhibVFnWW05a2VTQjBieUIwYUdVZ1ozSnBaRnh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUklaV0ZrWlhJb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRmtaRUp2Wkhrb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0F2THlCaFpHUWdZV04wYVc5dWN5Qm1iM0lnZEdobElHZHlhV1FnZEc4Z2RHaGxJR052Ym5SaGFXNWxjbHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBZV2x1WlhKRmJHVnRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11WjNKcFpFRmpkR2x2Ym5NdVpXeGxiV1Z1ZENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdMeThnWVdSa0lHZHlhV1FnZEc4Z2RHaGxJSEJ5YjNacFpHVmtJR052Ym5SaGFXNWxjbHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBZV2x1WlhKRmJHVnRaVzUwTG1Gd2NHVnVaRU5vYVd4a0tIUm9hWE11Wld4bGJXVnVkQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2WEhKY2JpQWdJQ0FnSUNBZ0x5OGdaVzVoWW14bElHbHVabWx1YVhSbElITmpjbTlzYkZ4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaR1JKYm1acGJtbDBaVk5qY205c2JDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklHRmtaQ0JrWVhSaElIUnZJSFJvWlNCbmNtbGtYSEpjYmlBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJSFJvYVhNdWIzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtUmhkR0V1YVc1cGRFUmhkR0U3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzFrWVhSaElEMGdkR2hwY3k1dmNIUnBiMjV6TG1SaGRHRlRiM1Z5WTJVdVpHRjBZUzV0WlhSaFJHRjBZVHRjY2x4dVhISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQm1aWFJqYUVSaGRHRkZkbVZ1ZERvZ1FsTkdaWFJqYUZKbFkyOXlaRVYyWlc1MElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQkVZWFJoVTI5MWNtTmxUbUZ0WlRvZ2RHaHBjeTV2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Ym1GdFpTd2dSWFpsYm5SRVlYUmhPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRVlYUmhPaUJrWVhSaExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUV1YwWVVSaGRHRTZJRzFrWVhSaFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTkwYVdaNVRHbHpkR1Z1WlhKektIUm9hWE11WVhCd1JHRjBZVVYyWlc1MGN5NVBUbDlHUlZSRFNGOUhVa2xFWDFKRlEwOVNSQ3dnWm1WMFkyaEVZWFJoUlhabGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklHNXZkR2xtZVNCMGFHRjBJR2R5YVdRZ2FYTWdaR0YwWVMxaWIzVnVaRnh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIzUnBabmxNYVhOMFpXNWxjbk1vZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gwZFNTVVJmUkVGVVFWOUNUMVZPUkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JHRjBZVk52ZFhKalpVNWhiV1U2SUhSb2FYTXViM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxMbTVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkZkbVZ1ZEVSaGRHRTZJSHQ5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVrYVhOamIzWmxjbUZpYkdVZ1BUMDlJSFJ5ZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSRWFYTmpiM1psY21GaWJHVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJR0ZrWkVsdVptbHVhWFJsVTJOeWIyeHNLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVpXNWhZbXhsU1c1bWFXNXBkR1ZUWTNKdmJHd2dQVDA5SUhSeWRXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJtWnBibWwwWlZOamNtOXNiR1Z5SUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsU1c1bWFXNXBkR1ZUWTNKdmJHd29leUJuY21sa1JXeGxiV1Z1ZERvZ2RHaHBjeTVsYkdWdFpXNTBMQ0JvZEhSd1EyeHBaVzUwT2lCMGFHbHpMbWgwZEhCRGJHbGxiblFnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVtYVc1cGRHVlRZM0p2Ykd4bGNpNXVaWGgwVUdGblpVTmhiR3hpWVdOcklEMGdLSEJoWjJVcElEMCtJSFJvYVhNdWNHRm5hVzVoZEc5eVEyRnNiR0poWTJzb2NHRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNW1hVzVwZEdWVFkzSnZiR3hsY2k1bGJtRmliR1VvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWVdSa1FXTjBhVzl1Y3lncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtZHlhV1JCWTNScGIyNXpJRDBnYm1WM0lFSlRSR0YwWVZSaFlteGxRV04wYVc5dWN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaM0pwWkVGamRHbHZibk11WkdGMFlWTnZkWEpqWlU1aGJXVWdQU0IwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNXVZVzFsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WjNKcFpFRmpkR2x2Ym5NdVlXUmtUbVYzVW1WamIzSmtRV04wYVc5dUtDaGxLU0E5UGlCMGFHbHpMbUZrWkVWdGNIUjVVbTkzS0NrcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1aFpHUkVaV3hsZEdWQlkzUnBiMjRvS0dVcElEMCtJSFJvYVhNdVltOWtlUzV0WVhKclJHVnNaWFJsWkNncEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdVlXUmtSM0pwWkZObGRIUnBibWR6UVdOMGFXOXVLQ2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEpUUkdGMFlWUmhZbXhsUTJWc2JIMGdkR2hjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWVdSa1UyOXlkR2x1WnloMGFEb2dRbE5FWVhSaFZHRmliR1ZEWld4c0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQXZMeUJ6YjNKMGFXNW5JRzltSUhSb1pTQmtZWFJoSUhkb1pXNGdkR2hsSUdobFlXUmxjaUJqWld4c0lHbHpJR05zYVdOclpXUmNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNBZ0lDQWdkR2d1WVdSa1JYWmxiblJJWVc1a2JHVnlLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhOaklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9MbWhoYzBOc1lYTnpLQ2R6YjNKMGFXNW5YMkZ6WXljcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUM1eVpXMXZkbVZEYkdGemN5Z25jMjl5ZEdsdVoxOWhjMk1uS1M1aFpHUkRiR0Z6Y3lnbmMyOXlkR2x1WjE5a1pYTmpKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGMyTWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb0xuSmxiVzkyWlVOc1lYTnpLQ2R6YjNKMGFXNW5YMlJsYzJNbktTNWhaR1JEYkdGemN5Z25jMjl5ZEdsdVoxOWhjMk1uS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM1Z3Y0c5eWRITWdjMjl5ZEdsdVp5QnZiaUJ2Ym14NUlHOXVaU0JqYjJ4MWJXNHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9Mbk5wWW14cGJtZHpLQ2QwYUNjcExtWnZja1ZoWTJnb0tIZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ3VZMnhoYzNOTWFYTjBMbkpsYlc5MlpTZ25jMjl5ZEdsdVoxOWhjMk1uTENBbmMyOXlkR2x1WjE5a1pYTmpKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibTkwYVdaNUlIUm9ZWFFnZDJVZ2JtVmxaQ0J6YjNKMGFXNW5JRzltSUhSb1pTQmpiMngxYlc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnliM0FnUFNCMGFDNXZjSFJwYjI1ekxsQnliM0JPWVcxbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR6b2dabWw0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbGRtVnVkRG9nUWxOVGIzSjBhVzVuVW1WeGRXVnpkRVYyWlc1MElEMGdleUJGZG1WdWRFUmhkR0U2SUhzZ1JYWmxiblE2SUdVc0lGQnliM0JPWVcxbE9pQndjbTl3TENCQmMyTTZJR0Z6WXlCOUxDQkVZWFJoVTI5MWNtTmxUbUZ0WlRvZ1gzUm9hWE11YjNCMGFXOXVjeTVrWVhSaFUyOTFjbU5sTG01aGJXVWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb0xtNXZkR2xtZVV4cGMzUmxibVZ5Y3loMGFDNWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gxTlBVbFJKVGtkZlVrVlJWVVZUVkVWRUxDQmxkbVZ1ZENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR05zWldGeVIzSnBaQ2dwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkM01nUFNCMGFHbHpMbVpwYm1SRmJHVnRaVzUwY3lnbkxtZHlhV1F0Y205M0p5azdYSEpjYmlBZ0lDQWdJQ0FnY205M2N5NW1iM0pGWVdOb0tDaHliM2NwSUQwK0lIUm9hWE11Y21WdGIzWmxSV3hsYldWdWRDaHliM2NwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2NtVnRiM1psSUdGc2JDQmxlR05sY0hRZ2RHaGxJSFJsYlhCc1lYUmxJSEp2ZDF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWlcxd2JHRjBaVkp2ZHlBOUlIUm9hWE11WW05a2VTNW5aWFJVWlcxd2JHRjBaVkp2ZHlncE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVltOWtlUzV5YjNkeklEMGdXM1JsYlhCc1lYUmxVbTkzWFR0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQmNIQnNlU0IyYVhOcFltbHNhWFI1SUdGdVpDQnphWHBsSUhObGRIUnBibWR6SUdaeWIyMGdjM1J2Y21VZ1kyOXZhMmxsTGx4eVhHNGdJQ0FnSUNvZ1ZHaHBjeUJvWld4d2N5QjBhR1VnZFhObGNpQnViM1FnZEc4Z2NtVXRZWEp5WVc1blpTQmpiMnh6SUdKaGMyVmtJRzl1SUhSb1pXbHlJRzVsWldSeklHRnNiQ0IwYUdVZ2RHbHRaU0IwYUdWNUlHOXdaVzRnZEdobElITmpjbVZsYmx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q1UwUmhkR0ZVWVdKc1pVTmxiR3g5SUdOdmJGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdGhibmw5SUhObGRIUnBibWR6WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdGd2NHeDVRMjlzVTJWMGRHbHVaM01vWTI5c09pQkNVMFJoZEdGVVlXSnNaVU5sYkd3c0lITmxkSFJwYm1kek9pQkNVME52YkhWdGJsTmxkSFJwYm1kektTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYzJWMGRHbHVaM01nZkh3Z2RHaHBjeTVwYzBWdGNIUjVUMkpxS0hObGRIUnBibWR6S1NrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2MyVjBkR2x1WjNNdVZtbHphV0pzWlNBOVBUMGdabUZzYzJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXNMblpwYzJsaWJHVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoelpYUjBhVzVuY3k1WGFXUjBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJ3dVkzTnpJRDBnZXlBbmNHOXphWFJwYjI0bk9pQW5jbVZzWVhScGRtVW5MQ0FuZDJsa2RHZ25PaUJ6WlhSMGFXNW5jeTVYYVdSMGFDQjlPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQmNIQnNlU0JqYjJ4MWJXNGdjbVV0YjNKa1pYSnBibWNnWW1GelpXUWdiMjRnZEdobElITjBiM0psWkNCamIyOXJhV1ZjY2x4dUlDQWdJQ0FxSUZSb2FYTWdhR1ZzY0hNZ2RHaGxJSFZ6WlhJZ2RHOGdibTkwSUhKbExXOXlaR1Z5SUhSb1pTQmpiMngxYlc1eklHVjJaWEo1ZEdsdFpTQjBhR1Y1SUc5d1pXNGdkR2hsSUhOamNtVmxiaTVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3S24wZ2MyVjBkR2x1WjNNZ1hISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QjdRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dVcxMTlYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR0Z3Y0d4NVEyOXNUM0prWlhKcGJtY29jMlYwZEdsdVozTTZJSHNnVzNnNklITjBjbWx1WjEwNklFSlRRMjlzZFcxdVUyVjBkR2x1WjNNN0lIMHBPaUJDVTBSaGRHRlVZV0pzWlVOdmJFUmxabWx1YVhScGIyNWJYU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGMyVjBkR2x1WjNNZ2ZId2dkR2hwY3k1cGMwVnRjSFI1VDJKcUtITmxkSFJwYm1kektTa2djbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjeTVqYjJ4RVpXWnBibWwwYVc5dU8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdmNtUmxjbVZrUTI5c2N5QTlJRnRkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdVkyOXNSR1ZtYVc1cGRHbHZiaTVtYjNKRllXTm9LQ2hqYjJ4RVpXWXNJR2twSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR052YkZObGRIUnBibWM2SUVKVFEyOXNkVzF1VTJWMGRHbHVaM01nUFNCelpYUjBhVzVuYzF0amIyeEVaV1l1VUhKdmNFNWhiV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTnZiRk5sZEhScGJtY3BJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzSmtaWEpsWkVOdmJITmJZMjlzVTJWMGRHbHVaeTVRYjNOcGRHbHZibDBnUFNCamIyeEVaV1k3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR2x1SUdOaGMyVWdkR2hsSUdOdmJDQnpaWFIwYVc1bmN5QnpkRzl5WldRZ2FXNGdZMjl2YTJsbElHRnlaU0J1YjNRZ2JXRjBZMmhwYm1jc0lIZGxJSEpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0JqYjJ3Z1pHVm1hVzVwZEdsdmJseHlYRzRnSUNBZ0lDQWdJR2xtSUNodmNtUmxjbVZrUTI5c2N5NXNaVzVuZEdnZ0lUMDlJSFJvYVhNdWIzQjBhVzl1Y3k1amIyeEVaV1pwYm1sMGFXOXVMbXhsYm1kMGFDa2djbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjeTVqYjJ4RVpXWnBibWwwYVc5dU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjNKa1pYSmxaRU52YkhNN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkRnRkZlNCa1lYUmhYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEpUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRjlJRnR0WlhSaFJHRjBZVjFjY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdKcGJtUkVZWFJoVTI5MWNtTmxLR1JoZEdFNklHOWlhbVZqZEZ0ZExDQnRaWFJoUkdGMFlUb2dRbE5FWVhSaFZHRmliR1ZRWVdkcGJtZE5aWFJoUkdGMFlTa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJrWldKMVoyZGxjanRjY2x4dUlDQWdJQ0FnSUNCcFppQW9JV1JoZEdFZ2ZId2daR0YwWVM1c1pXNW5kR2dnUEQwZ01Da2djbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR0ZuWldSRVlYUmhJRDBnWkdGMFlUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1YVhOU1pXMXZkR1VnUFQwOUlHWmhiSE5sS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhCaFoyVmtSR0YwWVNBOUlIUm9hWE11YjNCMGFXOXVjeTVrWVhSaFUyOTFjbU5sTG1kbGRGQmhaMlZQWm1ac2FXNWxRMElvYldWMFlVUmhkR0V1Y0dGblpVbHVaR1Y0TENCMGFHbHpMbTl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVrWVhSaExtbHVhWFJFWVhSaExDQnRaWFJoUkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDQWdLaUJBZEhsd1pTQjdRbE5FWVhSaFZHRmliR1ZTYjNkOVhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR3hoYzNSU2IzYzZJRUpUUkdGMFlWUmhZbXhsVW05M0lEMGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQndZV2RsWkVSaGRHRXVabTl5UldGamFDZ29kaXdnYVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY205M0lEMGdkR2hwY3k1aFpHUk9aWGRTYjNjb2Rpd2dkSEoxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKdmR5NXliM2REWVhSbFoyOXllU0E5SUNkUVVrVlRWRWxPUlNjN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGMzUlNiM2NnUFNCeWIzYzdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdMeThnZFhCa1lYUmxJSFJvWlNCd1lXZHBibUYwYVc5dUlHTnZiWEJ2Ym1WdWRGeHlYRzRnSUNBZ0lDQWdJQzh2WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1bGJtRmliR1ZKYm1acGJtbDBaVk5qY205c2JDQTlQU0JtWVd4elpTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpYVc1a1VHRm5hVzVoZEc5eUtHMWxkR0ZFWVhSaEtUdGNjbHh1SUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1acGJtbDBaVk5qY205c2JHVnlMbWx1YVhSTlpYUmhSR0YwWVNBOUlHMWxkR0ZFWVhSaE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1Wm1sdWFYUmxVMk55YjJ4c1pYSXVhVzVwZEVSaGRHRWdQU0J3WVdkbFpFUmhkR0U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1lYTjBVbTkzS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibVpwYm1sMFpWTmpjbTlzYkdWeUxuVnViMkp6WlhKMlpTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibVpwYm1sMFpWTmpjbTlzYkdWeUxtOWljMlZ5ZG1Vb2JHRnpkRkp2ZHk1bGJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEpUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRjlJRnR3WVdkcGJtRjBhVzl1VFc5a1pXeGRYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR0pwYm1SUVlXZHBibUYwYjNJb2NHRm5hVzVoZEdsdmJrMXZaR1ZzT2lCQ1UwUmhkR0ZVWVdKc1pWQmhaMmx1WjAxbGRHRkVZWFJoSUQwZ2JtVjNJRUpUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRW9LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGbmFXNWhkRzl5TG05d2RHbHZibk11Y0dGbmFXNW5UV1YwWVVSaGRHRWdQU0J3WVdkcGJtRjBhVzl1VFc5a1pXdzdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZV2RwYm1GMGIzSXVjbVZ1WkdWeUtDazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHTnZiblJoYVc1bGNpQTlJR1J2WTNWdFpXNTBMbWRsZEVWc1pXMWxiblJDZVVsa0tDY2pKeUFySUhSb2FYTXViM0IwYVc5dWN5NWpiMjUwWVdsdVpYSkpaQ2s3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdWNHRm5hVzVoZEc5eUxtVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUhKdmQwUmhkR0ZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnYVhORmVHbHpkR2x1WjFKbFkyOXlaRnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JoWkdST1pYZFNiM2NvY205M1JHRjBZVG9nYjJKcVpXTjBMQ0JwYzBWNGFYTjBhVzVuVW1WamIzSmtPaUJpYjI5c1pXRnVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEp2ZDA1MWJXSmxjaUE5SUhSb2FYTXVZbTlrZVM1blpYUk9aWGgwVW05M1NXNWtaWGdvS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY205M0lEMGdkR2hwY3k1aWIyUjVMbWRsZEZSbGJYQnNZWFJsVW05M0tDa3VZMnh2Ym1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0J5YjNjdWIzQjBhVzl1Y3k1cGMxUmxiWEJzWVhSbFVtOTNJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISnZkeTVoWkdSRGJHRnpjeWduWjNKcFpDMXliM2NuS1R0Y2NseHVJQ0FnSUNBZ0lDQnliM2N1WTNOeklEMGdleUFuWkdsemNHeGhlU2M2SUNkMFlXSnNaUzF5YjNjbklIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibkIxZEhNZ1BTQnliM2N1WjJWMFNXNXdkWFJ6S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklHUmxZblZuWjJWeU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcGJuQjFkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvZGl3Z2FTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1d2RYUWdQU0IyTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzlzWkVsa0lEMGdhVzV3ZFhRdWFXUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwTG1sa0lEMGdiMnhrU1dRZ0t5QmNJbDljSWlBcklISnZkMDUxYldKbGNqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCalpXeHNVSEp2Y0U1aGJXVWdQU0JwYm5CMWRDNXRiMlJsYkU1aGJXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkalpXeHNMWEJ5Ynljc0lHTmxiR3hRY205d1RtRnRaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMlZzYkZaaGJDQTlJSEp2ZDBSaGRHRmJZMlZzYkZCeWIzQk9ZVzFsWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm5CMWRDNXZjSFJwYjI1ekxrbHVjSFYwVkhsd1pTQTlQVDBnSjJSaGRHVW5JQ1ltSUdObGJHeFdZV3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJrWVhSbElEMGdibVYzSUVSaGRHVW9ZMlZzYkZaaGJDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFF1ZG1Gc0lEMGdYM1JvYVhNdWRHOUVZWFJsUkdsemNHeGhlVVp2Y20xaGRDaGtZWFJsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hwYm5CMWRDQnBibk4wWVc1alpXOW1JRUpUUkdGMFlWUmhZbXhsUTJobFkydENiM2hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNZbUlDaGpaV3hzVm1Gc0lEMDlQU0FuZEhKMVpTY2dmSHdnWTJWc2JGWmhiQ0E5UFQwZ0oxUnlkV1VuSUh4OElHTmxiR3hXWVd3Z1BUMDlJSFJ5ZFdVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRDNXdjbTl3S0NkamFHVmphMlZrSnl3Z0oyTm9aV05yWldRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJR2xtSUNoalpXeHNWbUZzSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBMblpoYkNBOUlHTmxiR3hXWVd3N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1JsWW5WbloyVnlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhORmVHbHpkR2x1WjFKbFkyOXlaQ0E5UFQwZ1ptRnNjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwTG1ScGMyRmliR1ZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQzV5WldGa2IyNXNlU0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRDNWxiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTm9ZVzVuWlNjc0lDaGxLU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205M0xuQnliM0FvSjJSaGRHRXRhWE5rYVhKMGVTY3NJSFJ5ZFdVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnliM2REWVhRZ1BTQnliM2N1Y205M1EyRjBaV2R2Y25rN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY205M1EyRjBJQ0U5UFNBblFVUkVSVVFuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205M0xuSnZkME5oZEdWbmIzSjVJRDBnSjFWUVJFRlVSVVFuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklISmxiVzkyWlNCaGJua2djSEpsZG1sdmRYTWdaWEp5YjNKelhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1eVpXMXZkbVZEYkdGemN5Z25hWE10YVc1MllXeHBaQ2NwTG5CeWIzQW9KM1JwZEd4bEp5d2dKeWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGIyOXNkR2x3SUQwZ1ZHOXZiSFJwY0M1blpYUkpibk4wWVc1alpTaGxMblJoY21kbGRDQmhjeUJGYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiMjlzZEdsd0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmIyeDBhWEF1WkdsemNHOXpaU2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWIzZEVZWFJoSUQwZ2NtOTNMbWRsZEZKdmQwUmhkR0ZGZUhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa2N5QTlJRjkwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNXVZVzFsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbmNtbGtWWEJrWVhSbFJYWmxiblE2SUVKVFIzSnBaRlZ3WkdGMFpXUkZkbVZ1ZENBOUlIc2dSWFpsYm5SRVlYUmhPaUI3SUVWMlpXNTBPaUJsTENCSGNtbGtPaUJmZEdocGN5QjlMQ0JFWVhSaFUyOTFjbU5sVG1GdFpUb2daSE1nZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5YjNkVmNHUmhkR1ZrUlhabGJuUTZJRUpUVW05M1ZYQmtZWFJsWkVWMlpXNTBJRDBnZXlCRmRtVnVkRVJoZEdFNklIc2dSWFpsYm5RNklHVXNJRkp2ZHpvZ2NtOTNSR0YwWVNCOUxDQkVZWFJoVTI5MWNtTmxUbUZ0WlRvZ1pITWdmVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1hV1ZzWkZWd1pHRmxaRVYyWlc1ME9pQkNVMFpwWld4a1ZYQmtZWFJsWkVWMlpXNTBJRDBnZXlCRmRtVnVkRVJoZEdFNklIc2dSWFpsYm5RNklHVXNJRkp2ZHpvZ2NtOTNSR0YwWVN3Z1JtbGxiR1E2SUdsdWNIVjBJSDBzSUVSaGRHRlRiM1Z5WTJWT1lXMWxPaUJrY3lCOU8xeHlYRzVjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnliM2N1Ym05MGFXWjVUR2x6ZEdWdVpYSnpLRjkwYUdsekxtRndjRVJoZEdGRmRtVnVkSE11VDA1ZlIxSkpSRjlWVUVSQlZFVkVMQ0JuY21sa1ZYQmtZWFJsUlhabGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205M0xtNXZkR2xtZVV4cGMzUmxibVZ5Y3loZmRHaHBjeTVoY0hCRVlYUmhSWFpsYm5SekxrOU9YMFpKUlV4RVgxVlFSRUZVUlVRc0lHWnBaV3hrVlhCa1lXVmtSWFpsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTkzTG01dmRHbG1lVXhwYzNSbGJtVnljeWhmZEdocGN5NWhjSEJFWVhSaFJYWmxiblJ6TGs5T1gxSlBWMTlWVUVSQlZFVkVMQ0J5YjNkVmNHUmhkR1ZrUlhabGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEM1bGJHVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJadlkzVnpKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtSnZaSGt1Wm05amRYTlNiM2NvY205M0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKdmR5NWxiR1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNhV05ySnl3Z1puVnVZM1JwYjI0Z0tHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVltOWtlUzVtYjJOMWMxSnZkeWh5YjNjcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtSnZaSGt1WVdSa1VtOTNLSEp2ZHlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjJhWE5wWW14bFNXNXdkWFJ6SUQwZ2NtOTNMbWRsZEZacGMybGliR1ZKYm5CMWRITW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hacGMybGliR1ZKYm5CMWRITXViR1Z1WjNSb0lENGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnpkRWx1Y0hWMElEMGdkbWx6YVdKc1pVbHVjSFYwYzF0MmFYTnBZbXhsU1c1d2RYUnpMbXhsYm1kMGFDQXRJREZkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRWx1Y0hWMExtVnNaVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmEyVjVaRzkzYmljc0lDaGxLU0E5UGlCMGFHbHpMbTl1U1c1d2RYUkxaWGxFYjNkdUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnliM2M3WEhKY2JseHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0IwYjBSaGRHVkVhWE53YkdGNVJtOXliV0YwS0dSaGRHVTZJRVJoZEdVcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZVNBOUlHUmhkR1V1WjJWMFJHRjBaU2dwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjI1MGFDQTlJR1JoZEdVdVoyVjBUVzl1ZEdnb0tTQXJJREVzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSGxsWVhJZ1BTQmtZWFJsTG1kbGRFWjFiR3haWldGeUtDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J0YjI1MGFGTjBjaUE5SUNodGIyNTBhQ0E4SURFd0lEOGdYQ0l3WENJZ09pQmNJbHdpS1NBcklHMXZiblJvTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhsVGRISWdQU0FvWkdGNUlEd2dNVEFnUHlCY0lqQmNJaUE2SUZ3aVhDSXBJQ3NnWkdGNU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZVdWaGNpQXJJRndpTFZ3aUlDc2diVzl1ZEdoVGRISWdLeUJjSWkxY0lpQXJJR1JoZVZOMGNqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IwYjFScGJXVkVhWE53YkdGNVJtOXliV0YwS0dSaGRHVTZJRVJoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FHOTFjaUE5SUdSaGRHVXVaMlYwU0c5MWNuTW9LU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiV2x1SUQwZ1pHRjBaUzVuWlhSTmFXNTFkR1Z6S0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQm9iM1Z5VTNSeUlEMGdLR2h2ZFhJZ1BDQXhNQ0EvSUZ3aU1Gd2lJRG9nWENKY0lpa2dLeUJvYjNWeU8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCdGFXNVRkSElnUFNBb2JXbHVJRHdnTVRBZ1B5QmNJakJjSWlBNklGd2lYQ0lwSUNzZ2JXbHVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHOTFjbE4wY2lBcklGd2lPbHdpSUNzZ2JXbHVVM1J5TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKVFJHRjBZVlJoWW14bFVtOTNmU0J5YjNjZ1hISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJR1VnWEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2IyNUpibkIxZEV0bGVVUnZkMjRvWlRvZ1MyVjVZbTloY21SRmRtVnVkQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lDOHZJR2x1YzJWeWRDQmhJRzVsZHlCeWIzY2dhV1lnYVhSeklIUm9aU0JzWVhOMElHbHVjSFYwSUdsdUlIUm9aU0J5YjNkY2NseHVJQ0FnSUNBZ0lDQXZMeUFnSUZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pTNTNhR2xqYUNBaFBUMGdPU0I4ZkNCbExuTm9hV1owUzJWNUlEMDlQU0IwY25WbEtTQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdMeThnWkdWaWRXZG5aWEk3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFpwYzJsaWJHVlNiM2R6SUQwZ2RHaHBjeTVpYjJSNUxtZGxkRlpwYzJsaWJHVlNiM2R6S0NrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hacGMybGliR1ZTYjNkekxteGxibWQwYUNBOFBTQXdLU0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHeGhjM1JTYjNkSmJtUmxlQ0E5SUhacGMybGliR1ZTYjNkelczWnBjMmxpYkdWU2IzZHpMbXhsYm1kMGFDQXRJREZkTG1kbGRGSnZkMGx1WkdWNEtDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjNjZ1BTQW9aUzUwWVhKblpYUWdZWE1nUld4bGJXVnVkQ2t1WTJ4dmMyVnpkQ2duZEhJbktUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYSnZkeWtnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY0dGeVpXNTBTVzVrWlhnZ1BTQndZWEp6WlVsdWRDaHliM2N1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFhKdmQybHVaR1Y0SnlrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWhuY21sa1VtOTNjeXdnWTNWeWNtVnVkRkp2ZDBsdVpHVjRLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9iR0Z6ZEZKdmQwbHVaR1Y0SUQwOVBTQndZWEpsYm5SSmJtUmxlQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pWSnZkeUE5SUhSb2FYTXVZV1JrUlcxd2RIbFNiM2NvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUdGa1pFVnRjSFI1VW05M0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dmRtRnlJSEp2ZDBOdmRXNTBJRDBnZEdocGN5NXFjWFZsY25rb0p5TW5JQ3NnZEdocGN5NXZjSFJwYjI1ekxtZHlhV1JKWkNrdVptbHVaQ2duZEdKdlpIaytkSEluS1M1c1pXNW5kR2c3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1Z0Y0hSNVVtOTNJRDBnZEdocGN5NWhaR1JPWlhkU2IzY29kR2hwY3k1amNtVmhkR1ZGYlhCMGVWSnZkMFJoZEdFb0tTd2dabUZzYzJVcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdhVzV3ZFhSeklEMGdaVzF3ZEhsU2IzY3VaMlYwVm1semFXSnNaVWx1Y0hWMGN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibkIxZEhNdWJHVnVaM1JvSUQ0Z01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEhOYk1GMHVabTlqZFhNb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1Z0Y0hSNVVtOTNMbkp2ZDBOaGRHVm5iM0o1SUQwZ0owRkVSRVZFSjF4eVhHNGdJQ0FnSUNBZ0lHVnRjSFI1VW05M0xuQnliM0FvSjJSaGRHRXRhWE5rYVhKMGVTY3NJQ2QwY25WbEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JuY21sa1ZYQmtZWFJsUlhabGJuUTZJRUpUUjNKcFpGVndaR0YwWldSRmRtVnVkQ0E5SUhzZ1JYWmxiblJFWVhSaE9pQjdJRWR5YVdRNklIUm9hWE1zSUVWMlpXNTBPaUJsYlhCMGVWSnZkeUI5TENCRVlYUmhVMjkxY21ObFRtRnRaVG9nZEdocGN5NXZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVibUZ0WlNCOU8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOTBhV1o1VEdsemRHVnVaWEp6S0hSb2FYTXVZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOUhVa2xFWDFWUVJFRlVSVVFzSUdkeWFXUlZjR1JoZEdWRmRtVnVkQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWFXNW1hVzVwZEdWVFkzSnZiR3hsY2k1MWJtOWljMlZ5ZG1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVabWx1YVhSbFUyTnliMnhzWlhJdWIySnpaWEoyWlNobGJYQjBlVkp2ZHk1bGJHVnRaVzUwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z0Y0hSNVVtOTNPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCamNtVmhkR1ZGYlhCMGVWSnZkMFJoZEdFb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISmxZMjl5WkNBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NWpiMnhFWldacGJtbDBhVzl1TG1admNrVmhZMmdvS0hZc0lHa3BJRDArSUhzZ2NtVmpiM0prVzNZdVVISnZjRTVoYldWZElEMGdkVzVrWldacGJtVmtJSDBwWEhKY2JpQWdJQ0FnSUNBZ0x5OWtaV0oxWjJkbGNqdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZqYjNKa08xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0J2YmtobFlXUmxjazVsZUhRb1pYWmxiblJCY21kek9pQkNVMFYyWlc1MExDQm1aWFJqYUVkeWFXUTZJR0p2YjJ4bFlXNHBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGbGRtVnVkRUZ5WjNNZ2ZId2dJV1YyWlc1MFFYSm5jeTVGZG1WdWRFUmhkR0VwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnWTI5dWMyOXNaUzVzYjJjb1pYWmxiblJCY21kektUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjMlYwVTI5eWRHbHVaeWdwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTJ4bFlYSkhjbWxrS0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lXZHBibUYwYjNJdVkyeGxZWElvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHWmxkR05vUjNKcFpDQTlQVDBnWm1Gc2MyVXBJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lDOHZJR1psZEdOb0lHZHlhV1FnWkdGMFlWeHlYRzRnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVpsZEdOb1IzSnBaRkJoWjJVb01TazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtOXdkR2x2Ym5NdVpXNWhZbXhsU1c1bWFXNXBkR1ZUWTNKdmJHd2dQVDA5SUhSeWRXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJtWnBibWwwWlZOamNtOXNiR1Z5TG1OMWNuSmxiblJRWVdkbElEMGdNVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhCaFoyVkpibVJsZUZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCbVpYUmphRWR5YVdSUVlXZGxLSEJoWjJWSmJtUmxlRG9nYm5WdFltVnlLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVwYzFKbGJXOTBaU0E5UFQwZ2RISjFaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RYSnNJRDBnZEdocGN5NXZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVkWEpzS0hCaFoyVkpibVJsZUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkWEpzS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiM0IwYVc5dWN5QTlJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pVaDBkSEJEYkdsbGJuUlBjSFJwYjI1ektIVnliQ3dnWENKSFJWUmNJaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWgwZEhCRGJHbGxiblF1WjJWMEtHOXdkR2x2Ym5NcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0IwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNWtZWFJoTG1sdWFYUkVZWFJoTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXUmhkR0VnUFNCMGFHbHpMbTl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzVrWVhSaExtMWxkR0ZFWVhSaE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwzWmhjaUJqWWlBOUlIUm9hWE11YjNCMGFXOXVjeTVrWVhSaFUyOTFjbU5sTG1kbGRGQmhaMlZQWm1ac2FXNWxRMEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2ZG1GeUlIQmhaMlZFWVhSaElEMGdZMklvY0dGblpVbHVaR1Y0TENCa1lYUmhMQ0J0WkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJtWlhSamFGSmxZMjl5WkVWMlpXNTBPaUJDVTBabGRHTm9VbVZqYjNKa1JYWmxiblFnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkVZWFJoVTI5MWNtTmxUbUZ0WlRvZ2RHaHBjeTV2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Ym1GdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVYyWlc1MFJHRjBZVG9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVJoZEdFNklHUmhkR0VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUV1YwWVVSaGRHRTZJRzVsZHlCQ1UwUmhkR0ZVWVdKc1pWQmhaMmx1WjAxbGRHRkVZWFJoS0hCaFoyVkpibVJsZUN3Z2JXUmhkR0V1Y0dGblpWTnBlbVVzSUcxa1lYUmhMblJ2ZEdGc1VtVmpiM0prY3lsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjNScFpubE1hWE4wWlc1bGNuTW9kR2hwY3k1aGNIQkVZWFJoUlhabGJuUnpMazlPWDBaRlZFTklYMGRTU1VSZlVrVkRUMUpFTENCbVpYUmphRkpsWTI5eVpFVjJaVzUwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J2YmxOaGRtVlNaV052Y21Rb1pYWmxiblJCY21kek9pQkNVMFYyWlc1MEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2NtVnRiM1psSUhKdmQzTWdabkp2YlNCMGFHVWdaM0pwWkNCMGFHRjBJR2hoY3lCaVpXVnVJR1JsYkdWMFpXUmNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCMGFHbHpMbUp2WkhrdVptbHVaQ2hjSW5SeVcyUmhkR0V0Y205M1kyRjBaV2R2Y25rOUowUkZURVZVUlVRblhWd2lLUzV5WlcxdmRtVW9LVHRjY2x4dUlDQWdJQ0FnSUNBdkx5QjBhR2x6TG1KdlpIa3VabWx1WkNoY0luUnlXMlJoZEdFdGNtOTNZMkYwWldkdmNuazlKMEZFUkVWRVgwUkZURVZVUlVRblhWd2lLUzV5WlcxdmRtVW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNBdkx5QnlaVzF2ZG1VZ1pXeGxiV1Z1ZEhNZ1puSnZiU0IwYUdVZ2NtVmhiQ0JoYm1RZ2RtbHlkSFZoYkNCRVQwMWNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WW05a2VTNXliM2R6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzVtYVd4MFpYSW9LSFlwSUQwK0lIWXVjbTkzUTJGMFpXZHZjbmtnUFQwOUlDZEVSVXhGVkVWRUp5QjhmQ0IyTG5KdmQwTmhkR1ZuYjNKNUlEMDlQU0FuUVVSRVJVUmZSRVZNUlZSRlJDY3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNW1iM0pGWVdOb0tDaDJLU0E5UGlCMGFHbHpMbUp2WkhrdWNtVnRiM1psVW05M0tIWXBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNBdkx5QjNhR1Z1SUcxaGFXNGdjbVZqYjNKa0lHbHpJSE5oZG1Wa0xDQmthWE5oWW14bElIUm9aU0JyWlhrZ1kyOXNkVzF1Y3lCdlppQjBhR1VnWjNKcFpDeGNjbHh1SUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVpYjJSNUxuSnZkM011Wm05eVJXRmphQ2dvZGlrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXRnlheUJoYkd3Z2NtOTNjeUJ3Y21WemRHbHVaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJMbkp2ZDBOaGRHVm5iM0o1SUQwZ0oxQlNSVk5VU1U1Rkp6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUcxaGEyVWdhV1FnYVc1d2RYUnpJR1JwYzJGaWJHVmtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWXVaMlYwU1c1d2RYUnpLQ2t1Wm1sc2RHVnlLQ2g0S1NBOVBpQjRMbWx6UzJWNUtTNW1iM0pGWVdOb0tDaDJlQ2tnUFQ0Z2V5QjJlQzVrYVhOaFlteGxaQ0E5SUhSeWRXVTdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCdmJsTmhkbVZGY25KdmNpaGxkbVZ1ZEVGeVozTTZJRUpUUlhabGJuUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeXBjY2x4dUlDQWdJQ0FnSUNBdkx5QkpkSE1nWVhOemRXMWxaQ0IwYUdGMElIUm9aU0F1Ym1WMElHMTJZeUJoY0drZ2QybHNiQ0JqYjI1MlpYSjBJSFJvWlNCdGIyUmxiQ0J6ZEdGMFpTQmxjbkp2Y25NZ2FXNTBieUIwYUdVZ1ptOXNiRzkzYVc1bklHWnZjbTFoZEZ4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2UxeHlYRzRnSUNBZ0lDQWdJQzh2SUNBZ0lDQmNJbUZrWkhKbGMzTmxjeTViTUYxY0lqb2dXMXdpTVZ3aVhTd2dMeThnWTJ4cFpXNTBJSEp2ZHlCcGJtUmxlRnh5WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0JjSW1Ga1pISmxjM05sY3k1Yk1WMWNJam9nVzF3aU1sd2lYU3hjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWENKaFpHUnlaWE56WlhNdVd6SmRYQ0k2SUZ0Y0lqTmNJbDBzWEhKY2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUZ3aVlXUmtjbVZ6YzJWeld6RmRMa05wZEhsY0lqb2dXMXdpVkdobElFTnBkSGs2SUdacFpXeGtJR2x6SUhKbGNYVnBjbVZrTGx3aUxDQmNJbFJvWlNCRGFYUjVPaUJ0ZFhOMElHSmxJR0YwSUd4bFlYTjBJRE1nWVc1a0lHRjBJRzFoZUNBeE1qZ2dZMmhoY21GamRHVnljeUJzYjI1bkxsd2lYU3hjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWENKaFpHUnlaWE56WlhOYk1WMHVRMjkxYm5SeWVWd2lPaUJiWENKVWFHVWdRMjkxYm5SeWVUb2dabWxsYkdRZ2FYTWdjbVZ4ZFdseVpXUXVYQ0lzSUZ3aVZHaGxJRU52ZFc1MGNuazZJRzExYzNRZ1ltVWdZWFFnYkdWaGMzUWdNaUJoYm1RZ1lYUWdiV0Y0SURFeU9DQmphR0Z5WVdOMFpYSnpJR3h2Ym1jdVhDSmRMRnh5WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0JjSW1Ga1pISmxjM05sYzFzeFhTNVFiM04wWVd4RGIyUmxYQ0k2SUZ0Y0lsUm9aU0JRYjNOMFlXd2dZMjlrWlRvZ1ptbGxiR1FnYVhNZ2NtVnhkV2x5WldRdVhDSXNJRndpVkdobElGQnZjM1JoYkNCamIyUmxPaUJ0ZFhOMElHSmxJR0YwSUd4bFlYTjBJRE1nWVc1a0lHRjBJRzFoZUNBeE1qZ2dZMmhoY21GamRHVnljeUJzYjI1bkxsd2lYU3hjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWENKaFpHUnlaWE56WlhOYk1WMHVVM1J5WldWMFFXUmtjbVZ6YzF3aU9pQmJYQ0pVYUdVZ1UzUnlaV1YwSUdGa1pISmxjM002SUdacFpXeGtJR2x6SUhKbGNYVnBjbVZrTGx3aUxDQmNJbFJvWlNCVGRISmxaWFFnWVdSa2NtVnpjem9nYlhWemRDQmlaU0JoZENCc1pXRnpkQ0F6SUdGdVpDQmhkQ0J0WVhnZ01USTRJR05vWVhKaFkzUmxjbk1nYkc5dVp5NWNJbDBzWEhKY2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUZ3aVlXUmtjbVZ6YzJWeld6SmRMa05wZEhsY0lqb2dXMXdpVkdobElFTnBkSGs2SUdacFpXeGtJR2x6SUhKbGNYVnBjbVZrTGx3aUxDQmNJbFJvWlNCRGFYUjVPaUJ0ZFhOMElHSmxJR0YwSUd4bFlYTjBJRE1nWVc1a0lHRjBJRzFoZUNBeE1qZ2dZMmhoY21GamRHVnljeUJzYjI1bkxsd2lYU3hjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWENKaFpHUnlaWE56WlhOYk1sMHVRMjkxYm5SeWVWd2lPaUJiWENKVWFHVWdRMjkxYm5SeWVUb2dabWxsYkdRZ2FYTWdjbVZ4ZFdseVpXUXVYQ0lzSUZ3aVZHaGxJRU52ZFc1MGNuazZJRzExYzNRZ1ltVWdZWFFnYkdWaGMzUWdNaUJoYm1RZ1lYUWdiV0Y0SURFeU9DQmphR0Z5WVdOMFpYSnpJR3h2Ym1jdVhDSmRMRnh5WEc0Z0lDQWdJQ0FnSUM4dklDQWdJQ0JjSW1Ga1pISmxjM05sYzFzeVhTNVFiM04wWVd4RGIyUmxYQ0k2SUZ0Y0lsUm9aU0JRYjNOMFlXd2dZMjlrWlRvZ1ptbGxiR1FnYVhNZ2NtVnhkV2x5WldRdVhDSXNJRndpVkdobElGQnZjM1JoYkNCamIyUmxPaUJ0ZFhOMElHSmxJR0YwSUd4bFlYTjBJRE1nWVc1a0lHRjBJRzFoZUNBeE1qZ2dZMmhoY21GamRHVnljeUJzYjI1bkxsd2lYU3hjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWENKaFpHUnlaWE56WlhOYk1sMHVVM1J5WldWMFFXUmtjbVZ6YzF3aU9pQmJYQ0pVYUdVZ1UzUnlaV1YwSUdGa1pISmxjM002SUcxMWMzUWdZbVVnWVhRZ2JHVmhjM1FnTXlCaGJtUWdZWFFnYldGNElERXlPQ0JqYUdGeVlXTjBaWEp6SUd4dmJtY3VYQ0pkWEhKY2JpQWdJQ0FnSUNBZ0x5QjlYSEpjYmlBZ0lDQWdJQ0FnS2k5Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmxkbVZ1ZEVGeVozTWdmSHdnSVdWMlpXNTBRWEpuY3k1RmRtVnVkRVJoZEdFZ2ZId2dJV1YyWlc1MFFYSm5jeTVGZG1WdWRFUmhkR0V1UlhabGJuUXVjbVZ6Y0c5dWMyVktVMDlPS1NCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eWN5QTlJR1YyWlc1MFFYSm5jeTVGZG1WdWRFUmhkR0V1UlhabGJuUXVjbVZ6Y0c5dWMyVktVMDlPTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJrYzA1aGJXVWdQU0IwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNXVZVzFsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pHbHlkSGxTYjNkeklEMGdkR2hwY3k1aWIyUjVMbWRsZEVScGNuUjVVbTkzY3lncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHUnBjblI1VW05M2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJSbFluVm5aMlZ5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0pRY205d0lEMGdaSE5PWVcxbElDc2dKMXNuSUNzZ2FTQXJJQ2RkSnp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbHRJRDBnWlhKeWIzSnpXMlZ5Y205eVVISnZjRjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJTQW1KaUJwYlM1c1pXNW5kR2dnUGlBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyeHBaVzUwU1c1a1pYZ2dQU0JwYlZzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCelpYSjJaWEpKYm1SbGVDQTlJR2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlVbTkzSUQwZ2RHaHBjeTVuWlhSU2IzZENlVWx1WkdWNEtIQmhjbk5sU1c1MEtHTnNhV1Z1ZEVsdVpHVjRLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z5Y205eVVtOTNLU0JqYjI1MGFXNTFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk11WTI5c1JHVm1hVzVwZEdsdmJpNW1iM0pGWVdOb0tDaGpiMndzSUdrcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnliM0JPWVcxbElEMGdZMjlzTGxCeWIzQk9ZVzFsTG5SdlVHRnpZMkZzUTJGelpVcHpiMjRvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNXdkWFJGY25KdmNpQTlJR1Z5Y205eWMxdGtjMDVoYldVZ0t5QW5XeWNnS3lCelpYSjJaWEpKYm1SbGVDQXJJQ2RkTGljZ0t5QndjbTl3VG1GdFpWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2x1Y0hWMFJYSnliM0lnSmlZZ2FXNXdkWFJGY25KdmNpNXNaVzVuZEdnZ1BpQXdLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYVc1d2RYUWdQU0JsY25KdmNsSnZkeTVuWlhSSmJuQjFkSE1vS1M1bWFXNWtLQ2hwYm5BcElEMCtJR2x1Y0M1dGIyUmxiRTVoYldVZ1BUMDlJR052YkM1UWNtOXdUbUZ0WlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXNXdkWFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMExtRmtaRU5zWVhOektDZHBjeTFwYm5aaGJHbGtKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0dsdWNIVjBSWEp5YjNJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRnNiRVZ5Y205eWN5QTlJQ2NuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRWEp5WVhrdVpuSnZiU2hwYm5CMWRFVnljbTl5S1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNobGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZzYkVWeWNtOXljeUFyUFNCbGNpQXJJQ2NnSnp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhRdWNISnZjQ2duZEdsMGJHVW5MQ0JoYkd4RmNuSnZjbk1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhSdmIyeDBhWEFnUFNCdVpYY2dWRzl2YkhScGNDaHBibkIxZEZzd1hTd2dleUJqZFhOMGIyMURiR0Z6Y3pvZ0ozUnZiMngwYVhBdFpYSnliM0luSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFJTYjNkQ2VVbHVaR1Y0S0dsdVpHVjRPaUJ1ZFcxaVpYSXBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWliMlI1TG5KdmQzTXVabWx1WkNnb2Rpd2dhU2tnUFQ0Z2RpNW5aWFJTYjNkSmJtUmxlQ2dwSUQwOVBTQnBibVJsZUNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKVFJHRjBZVlJoWW14bFEyVnNiSDBnZEdoY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1lYTmpXRnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0J6YjNKMFZHRmliR1VvZEdnNklFSlRSR0YwWVZSaFlteGxRMlZzYkN3Z1lYTmpXRG9nWW05dmJHVmhiaWtnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlBZ1kyOXVjMjlzWlM1c2IyY29KM052Y25ScGJtY25MQ0JoYzJOWUtUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQm5aWFJEWld4c1ZtRnNkV1VnUFNBb2RISTZJRUpUUkdGMFlWUmhZbXhsVW05M0xDQnBaSGc2SUc1MWJXSmxjaWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMmhwYkdRZ1BTQjBjaTVqWld4c2MxdHBaSGhkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5Z25hV1I0T2lBbkxDQnBaSGdzSUNCamFHbHNaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmphR2xzWkM1blpYUkRaV3hzVkdWNGRDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJTWlhSMWNtNXpJR0VnWm5WdVkzUnBiMjRnY21WemNHOXVjMmxpYkdVZ1ptOXlJSE52Y25ScGJtY2dZU0J6Y0dWamFXWnBZeUJqYjJ4MWJXNGdhVzVrWlhnZ1hISmNiaUFnSUNBZ0lDQWdMeThnS0dsa2VDQTlJR052YkhWdGJrbHVaR1Y0TENCaGMyTWdQU0JoYzJObGJtUnBibWNnYjNKa1pYSS9LUzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdZMjl0Y0dGeVpYSWdQU0JtZFc1amRHbHZiaUFvYVdSNE9pQnVkVzFpWlhJc0lHRnpZem9nWW05dmJHVmhiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZHBaSGc2SUNjc0lHbGtlQ3dnSjJGell6b2dKeXdnWVhOaktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCcGN5QjFjMlZrSUdKNUlIUm9aU0JoY25KaGVTNXpiM0owS0NrZ1puVnVZM1JwYjI0dUxpNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoaE9pQkNVMFJoZEdGVVlXSnNaVkp2ZHl3Z1lqb2dRbE5FWVhSaFZHRmliR1ZTYjNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyRTZJQ2NzSUdFc0lDZGlPaUFuTENCaUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVhR2x6SUdseklHRWdkSEpoYm5OcFpXNTBJR1oxYm1OMGFXOXVMQ0IwYUdGMElHbHpJR05oYkd4bFpDQnpkSEpoYVdkb2RDQmhkMkY1TGlCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWwwSUdGc2JHOTNjeUJ3WVhOemFXNW5JR2x1SUdScFptWmxjbVZ1ZENCdmNtUmxjaUJ2WmlCaGNtZHpMQ0JpWVhObFpDQnZiaUJjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0JoYzJObGJtUnBibWN2WkdWelkyVnVaR2x1WnlCdmNtUmxjaTVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvZGpFc0lIWXlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnSUdOdmJuTnZiR1V1Ykc5bktDZDJNVG9nSnl3Z2RqRXNJQ2QyTWpvZ0p5d2dkaklwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhOdmNuUWdZbUZ6WldRZ2IyNGdZU0J1ZFcxbGNtbGpJRzl5SUd4dlkyRnNaVU52YlhCaGNtVXNJR0poYzJWa0lHOXVJSFI1Y0dVdUxpNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnlaWFIxY200Z0tIWXhJQ0U5UFNBbkp5QW1KaUIyTWlBaFBUMGdKeWNnSmlZZ0lXbHpUbUZPS0hZeEtTQW1KaUFoYVhOT1lVNG9kaklwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQS9JSFl4SUMwZ2RqSmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnT2lCMk1TNTBiMU4wY21sdVp5Z3BMbXh2WTJGc1pVTnZiWEJoY21Vb2RqSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMk1TNTBiMU4wY21sdVp5Z3BMbXh2WTJGc1pVTnZiWEJoY21Vb2RqSXVkRzlUZEhKcGJtY29LU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwb1oyVjBRMlZzYkZaaGJIVmxLR0Z6WXlBL0lHRWdPaUJpTENCcFpIZ3BMQ0JuWlhSRFpXeHNWbUZzZFdVb1lYTmpJRDhnWWlBNklHRXNJR2xrZUNrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnWkc4Z2RHaGxJSGR2Y21zdUxpNWNjbHh1SUNBZ0lDQWdJQ0F2THlCamIyNXpkQ0IwWVdKc1pTQTlJSFJvTG1Oc2IzTmxjM1FvSjNSaFlteGxKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2WkdWaWRXZG5aWEk3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1J6SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbVJoZEdGVGIzVnlZMlV1Ym1GdFpUdGNjbHh1SUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aHliM2R6S1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYkdsemRDQTlJSFJvYVhNdVltOWtlUzV5YjNkekxuTnZjblFvWTI5dGNHRnlaWElvZEdocGN5NW9aV0ZrTG1kbGRFZHlhV1JVYVhSc1pYTlNiM2NvS1M1alpXeHNjeTVwYm1SbGVFOW1LSFJvS1N3Z1lYTmpXQ0E5SUNGaGMyTllLU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hwYzNRdVptOXlSV0ZqYUNoMGNpQTlQaUIwYUdsekxtSnZaSGt1WVhCd1pXNWtLSFJ5TENCbVlXeHpaU2twTzF4eVhHNWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR052Ym1aRmRtVnVkRG9nUWxORGIyNW1hV2RWY0dSaGRHVmtSWFpsYm5RZ1BTQjdJRVYyWlc1MFJHRjBZVG9nZXlCRGRYSnlaVzUwUTI5c09pQjBhQ3dnUVdOMGFXOXVPaUJoY0hCQlkzUnBiMjV6TGtOUFRGOVRUMUpVU1U1SElIMHNJRVJoZEdGVGIzVnlZMlZPWVcxbE9pQmtjeUI5TzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JqYjJ4U1pXOXlaR1Z5UlhabGJuUTZJRUpUUTI5c2MxSmxiM0prWlhKbFpFVjJaVzUwSUQwZ2V5QkZkbVZ1ZEVSaGRHRTZJSHNnUTNWeWNtVnVkRU52YkRvZ2RHZ3NJRUZ6WXpvZ1lYTmpXQ0I5TENCRVlYUmhVMjkxY21ObFRtRnRaVG9nWkhNZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtNXZkR2xtZVV4cGMzUmxibVZ5Y3loaGNIQkVZWFJoUlhabGJuUnpMazlPWDBOUFRGTmZVa1ZQVWtSRlVrVkVMQ0JqYjJ4U1pXOXlaR1Z5UlhabGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG01dmRHbG1lVXhwYzNSbGJtVnljeWgwYUdsekxtRndjRVJoZEdGRmRtVnVkSE11VDA1ZlIxSkpSRjlEVDA1R1NVZGZWVkJFUVZSRlJDd2dZMjl1WmtWMlpXNTBLVHRjY2x4dVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJRzl1VTI5eWRHbHVaMUpsY1hWbGMzUW9aWFpsYm5SQmNtZHpPaUJDVTFOdmNuUnBibWRTWlhGMVpYTjBSWFpsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aGxkbVZ1ZEVGeVozTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdGeVoyVjBJRDBnWlhabGJuUkJjbWR6TGtWMlpXNTBSR0YwWVM1RmRtVnVkQzUwWVhKblpYUWdZWE1nUld4bGJXVnVkRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdselZHZ2dQU0IwWVhKblpYUXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQW5kR2duTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXbHpWR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUm9JRDBnZEdGeVoyVjBMbU5zYjNObGMzUW9KM1JvSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2dwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQ0E5SUhSb08xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR2g0SUQwZ2RHaHBjeTVvWldGa0xtZGxkRWR5YVdSVWFYUnNaWE5TYjNjb0tTNWpaV3hzY3k1bWFXNWtLQ2gyTENCcEtTQTlQaUIyTG1Wc1pXMWxiblFnUFQwOUlIUmhjbWRsZENrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFIZ3BJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdaR1ZpZFdkblpYSTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpiM0owVkdGaWJHVW9kR2g0TENCbGRtVnVkRUZ5WjNNdVJYWmxiblJFWVhSaExrRnpZeWs3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lISmxjMlYwVTI5eWRHbHVaeWdwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrTG5KdmQzTXVabTl5UldGamFDZ29kaXdnYVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZGk1b1lYTkRiR0Z6Y3lnbmMyOXlkR2x1WjE5a1pYTmpKeUI4ZkNCMkxtaGhjME5zWVhOektDZHpiM0owYVc1blgyRnpZeWNwS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkaTV5WlcxdmRtVkRiR0Z6Y3lnbmMyOXlkR2x1WjE5aGMyTW5LUzV5WlcxdmRtVkRiR0Z6Y3lnbmMyOXlkR2x1WjE5a1pYTmpKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnYjI1RGIyeHpVbVZ2Y21SbGNtVmtLR1YyWlc1MFFYSm5jem9nUWxORGIyeHpVbVZ2Y21SbGNtVmtSWFpsYm5RcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0F2THlCdGIyUnBabmtnSjJ0bGVXUnZkMjRuSUdWMlpXNTBjeUJ2YmlCMGFHVWdjbTkzSUdsdWNIVjBjMXh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdkeWFXUWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktHVjJaVzUwUVhKbmN5azdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JuY21sa0xtSnZaSGt1Y205M2N5NW1iM0pGWVdOb0tDaHliM2NzSUdrcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBibkIxZEhNZ1BTQnliM2N1WjJWMFNXNXdkWFJ6S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBjeTVtYjNKRllXTm9LQ2hwYm5BcElEMCtJSHNnYVc1d0xtVnNaVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25hMlY1Wkc5M2JpY3NJSFJvYVhNdWIyNUpibkIxZEV0bGVVUnZkMjRwSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbWx6YVdKc1pVbHVjSFYwY3lBOUlISnZkeTVuWlhSV2FYTnBZbXhsU1c1d2RYUnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMmFYTnBZbXhsU1c1d2RYUnpMbXhsYm1kMGFDQThQU0F3S1NCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc1lYTjBTVzV3ZFhRZ1BTQjJhWE5wWW14bFNXNXdkWFJ6VzNacGMybGliR1ZKYm5CMWRITXViR1Z1WjNSb0lDMGdNVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSSmJuQjFkQzVsYkdWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMnRsZVdSdmQyNG5MQ0IwYUdsekxtOXVTVzV3ZFhSTFpYbEViM2R1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCQlpHUWdhR0Z1Wkd4bGNpQjBieUIwYUdVZ1pYWmxiblJ6SUhKaGFYTmxaQ0JpZVNCMGFHVWdaR0YwWVNCMFlXSnNaVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1YyWlc1MFRtRnRaU0JjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JqWVd4c1ltRmpheUJjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWlhKcFpubEVVMDVoYldVZ1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHRmtaRWhoYm1Sc1pYSW9aWFpsYm5ST1lXMWxPaUJ6ZEhKcGJtY3NJR05oYkd4aVlXTnJPaUJDVTBWMlpXNTBTR0Z1Wkd4bGNpd2dkbVZ5YVdaNVJGTk9ZVzFsSUQwZ1ptRnNjMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYlc5a1pXdzZJRUpUUlhabGJuUlRkV0p6WTNKcFltVnlUVzlrWld3Z1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFdGxlVG9nZEdocGN5NXZjSFJwYjI1ekxtZHlhV1JKWkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUlhabGJuUk9ZVzFsT2lCbGRtVnVkRTVoYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUVOaGJHeGlZV05yT2lCallXeHNZbUZqYXl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUkdGMFlWTnZkWEpqWlU1aGJXVTZJSFJvYVhNdWIzQjBhVzl1Y3k1a1lYUmhVMjkxY21ObExtNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRlpsY21sbWVVUmhkR0ZUYjNWeVkyVk9ZVzFsT2lCMlpYSnBabmxFVTA1aGJXVmNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lHUmhkR0ZGZG1WdWRITlRaWEoyYVdObExsTjFZbk5qY21saVpTaHRiMlJsYkNrN1hISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEpsYlc5MlpVaGhibVJzWlhJb1pYWmxiblJPWVcxbE9pQnpkSEpwYm1jcElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JXOWtaV3c2SUVKVFJYWmxiblJUZFdKelkzSnBZbVZ5VFc5a1pXd2dQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRXRsZVRvZ2RHaHBjeTV2Y0hScGIyNXpMbWR5YVdSSlpDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1JYWmxiblJPWVcxbE9pQmxkbVZ1ZEU1aGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lFUmhkR0ZUYjNWeVkyVk9ZVzFsT2lCMGFHbHpMbTl3ZEdsdmJuTXVaR0YwWVZOdmRYSmpaUzV1WVcxbExGeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ1pHRjBZVVYyWlc1MGMxTmxjblpwWTJVdVZXNXpkV0p6WTNKcFltVW9iVzlrWld3cE8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0J2YmtabGRHTm9SR0YwWVNobGRtVnVkRUZ5WjNNNklFSlRSbVYwWTJoU1pXTnZjbVJGZG1WdWRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnlnbmIyNUdaWFJqYUVSaGRHRTZKeXdnWlhabGJuUkJjbWR6S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQXZMeUJ3YjNCMWJHRjBaU0IwYUdVZ1ozSnBaQ0IzYVhSb0lIUm9aU0JtWlhSamFHVmtJR1JoZEdGY2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11Wlc1aFlteGxTVzVtYVc1cGRHVlRZM0p2Ykd3Z1BUMDlJR1poYkhObEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5zWldGeVIzSnBaQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ0WkNBOUlHVjJaVzUwUVhKbmN5NUZkbVZ1ZEVSaGRHRXVUV1YwWVVSaGRHRTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnRaQ2tnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZbWx1WkVSaGRHRlRiM1Z5WTJVb1pYWmxiblJCY21kekxrVjJaVzUwUkdGMFlTNUVZWFJoTENCdVpYY2dRbE5FWVhSaFZHRmliR1ZRWVdkcGJtZE5aWFJoUkdGMFlTaHRaQzV3WVdkbFNXNWtaWGdzSUcxa0xuQmhaMlZUYVhwbExDQnRaQzUwYjNSaGJGSmxZMjl5WkhNcEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J2YmtabGRHTm9SR0YwWVVWeWNtOXlLR1YyWlc1MFFYSm5jem9nUWxOR1pYUmphRkpsWTI5eVpFVnljbTl5UlhabGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExtVnljbTl5S0NkdmJrWmxkR05vUkdGMFlVVnljbTl5T2lBbkxDQmxkbVZ1ZEVGeVozTXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbFoybHpkR1Z5UTJGc2JHSmhZMnR6S0habGNtbG1lVVJUVG1GdFpTQTlJSFJ5ZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCa1pXSjFaMmRsY2p0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYVdRZ1BTQjBhR2x6TG05d2RHbHZibk11WjNKcFpFbGtPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmtjeUE5SUhSb2FYTXViM0IwYVc5dWN5NWtZWFJoVTI5MWNtTmxMbTVoYldVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdMeThnYzNWaWMyTnlhV0psSUhSdklHMWhhVzRnZG1sbGR5OW1iM0p0SUdWMlpXNTBjMXh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUklZVzVrYkdWeUtHRndjRVJoZEdGRmRtVnVkSE11UjFKSlJGOUVRVlJCTENBb2MyVnVaR1Z5TENCbGRpa2dQVDRnZEdocGN5NWliMlI1TG1kbGRFUnBjblI1VW1WamIzSmtjeWdwS1RzZ0x5OGdWRTlFVHpvZ2IySnpiMnhsZEdVZ0xUNGdjbVZ3YkdGalpXUWdkMmwwYUNCa2FYTmpiM1psY25rZ2MyVnlkbWxqWlZ4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WVdSa1NHRnVaR3hsY2loaGNIQkVZWFJoUlhabGJuUnpMazlPWDBGRVJGOVNSVU5QVWtRc0lDaHpaVzVrWlhJc0lHVjJLU0E5UGlCMGFHbHpMbTl1U0dWaFpHVnlUbVY0ZENobGRpd2dabUZzYzJVcEtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRmtaRWhoYm1Sc1pYSW9ZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOUdSVlJEU0Y5U1JVTlBVa1FzSUNoelpXNWtaWElzSUdWMktTQTlQaUIwYUdsekxtOXVTR1ZoWkdWeVRtVjRkQ2hsZGl3Z2RISjFaU2twTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WVdSa1NHRnVaR3hsY2loaGNIQkVZWFJoUlhabGJuUnpMazlPWDFOQlZrVmZVa1ZEVDFKRUxDQW9jMlZ1WkdWeUxDQmxkaWtnUFQ0Z2RHaHBjeTV2YmxOaGRtVlNaV052Y21Rb1pYWXBLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZrWkVoaGJtUnNaWElvWVhCd1JHRjBZVVYyWlc1MGN5NVBUbDlUUVZaRlgwVlNVazlTTENBb2MyVnVaR1Z5TENCbGRpa2dQVDRnZEdocGN5NXZibE5oZG1WRmNuSnZjaWhsZGlrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQzh2SUhOMVluTmpjbWxpWlNCMGJ5Qm5jbWxrSUdWMlpXNTBjMXh5WEc0Z0lDQWdJQ0FnSUM4dlhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1aFpHUklZVzVrYkdWeUtHRndjRVJoZEdGRmRtVnVkSE11VDA1ZlUwOVNWRWxPUjE5U1JWRlZSVk5VUlVRc0lDaHpaVzVrWlhJc0lHVjJLU0E5UGlCMGFHbHpMbTl1VTI5eWRHbHVaMUpsY1hWbGMzUW9aWFlwTENCMlpYSnBabmxFVTA1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV1JrU0dGdVpHeGxjaWhoY0hCRVlYUmhSWFpsYm5SekxrOU9YME5QVEZOZlVrVlBVa1JGVWtWRUxDQW9jMlZ1WkdWeUxDQmxkaWtnUFQ0Z2RHaHBjeTV2YmtOdmJITlNaVzl5WkdWeVpXUW9aWFlwTENCMlpYSnBabmxFVTA1aGJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV1JrU0dGdVpHeGxjaWhoY0hCRVlYUmhSWFpsYm5SekxrOU9YMGRTU1VSZlEwOU9Sa2xIWDFWUVJFRlVSVVFzSUNoelpXNWtaWElzSUdWMktTQTlQaUIwYUdsekxtOXVSM0pwWkVOdmJtWnBaM1Z5WVhScGIyNURhR0Z1WjJWa0tHVjJLU3dnZG1WeWFXWjVSRk5PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRmtaRWhoYm1Sc1pYSW9ZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOUhVa2xFWDBSQlZFRmZRazlWVGtRc0lDaHpaVzVrWlhJc0lHVjJLU0E5UGlCMGFHbHpMbTl1UjNKcFpFUmhkR0ZDYjNWdVpDaGxkaWtzSUhabGNtbG1lVVJUVG1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWhaR1JJWVc1a2JHVnlLR0Z3Y0VSaGRHRkZkbVZ1ZEhNdVQwNWZSa1ZVUTBoZlIxSkpSRjlTUlVOUFVrUXNJQ2h6Wlc1a1pYSXNJR1YyS1NBOVBpQjBhR2x6TG05dVJtVjBZMmhFWVhSaEtHVjJLU3dnZG1WeWFXWjVSRk5PWVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRmtaRWhoYm1Sc1pYSW9ZWEJ3UkdGMFlVVjJaVzUwY3k1UFRsOUdSVlJEU0Y5SFVrbEVYMUpGUTA5U1JGOUZVbEpQVWl3Z0tITmxibVJsY2l3Z1pYWXBJRDArSUhSb2FYTXViMjVHWlhSamFFUmhkR0ZGY25KdmNpaGxkaWtzSUhabGNtbG1lVVJUVG1GdFpTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWTI5dVptbG5kWEpoWW14bFIzSnBaQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJqYjI1emIyeGxMbXh2WnlnblkyOXVabWxuZFhKaFlteGxSM0pwWkNCcGN5QnlaV0ZqYUdWa0p5d2dkR2hwY3lrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdobFlXUmxjbk1nUFNCMGFHbHpMbWhsWVdRdVoyVjBSM0pwWkZScGRHeGxjMUp2ZHlncExtTmxiR3h6TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJrY3lBOUlIUm9hWE11YjNCMGFXOXVjeTVrWVhSaFUyOTFjbU5sTG01aGJXVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1FTQnRiMlJoYkNCbWIzSWdZMjl1Wm1sbmRYSnBibWNnWjNKcFpDQmpiMngxYlc1ekxseHlYRzRnSUNBZ0lDQWdJQzh2SUZSb1pTQnRiMlJoYkNCaGFITWdZVzRnUEhWc1BpQmxiR1Z0Wlc1MElIZG9hV05vSUhkcGJHd2dZbVVnY0c5d2RXeGhkR1ZrSUdKbGJHOTNJSGRwZEdnZ1ozSnBaQ0JqYjJ4MWJXNXpJR05vWldOckxXeHBjM1F1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUdOb1pXTnJjeUJqWVc0Z1ltVWdkWE5sWkNCMGJ5QnphRzkzTDJocFpHVWdZU0J3WVhKMGFXTjFiR0Z5SUdkeWFXUWdZMjlzZFcxdVhISmNiaUFnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNCMllYSWdiVzlrWld4VVpXMXdiR0YwWlNBOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMXZaR0ZzSUdaaFpHVmNJaUJwWkQxY0luTjBZWFJwWTBKaFkydGtjbTl3WHlSN1pITjlYQ0lnWkdGMFlTMWljeTFpWVdOclpISnZjRDFjSW5OMFlYUnBZMXdpSUdSaGRHRXRZbk10YTJWNVltOWhjbVE5WENKbVlXeHpaVndpSUhSaFltbHVaR1Y0UFZ3aUxURmNJbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWxoTFd4aFltVnNiR1ZrWW5rOVhDSnpkR0YwYVdOQ1lXTnJaSEp2Y0V4aFltVnNYQ0lnWVhKcFlTMW9hV1JrWlc0OVhDSjBjblZsWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpYlc5a1lXd3RaR2xoYkc5bklHMXZaR0ZzTFdScFlXeHZaeTF6WTNKdmJHeGhZbXhsWENJK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdScGRpQmpiR0Z6Y3oxY0ltMXZaR0ZzTFdOdmJuUmxiblJjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemN6MWNJbTF2WkdGc0xXaGxZV1JsY2x3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdnMUlHTnNZWE56UFZ3aWJXOWtZV3d0ZEdsMGJHVmNJaUJwWkQxY0luTjBZWFJwWTBKaFkydGtjbTl3VEdGaVpXeGZKSHRrYzMxY0lqNURiMjVtYVdkMWNtVWdZMjlzZFcxdWN6d3ZhRFUrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThZblYwZEc5dUlIUjVjR1U5WENKaWRYUjBiMjVjSWlCamJHRnpjejFjSW1KMGJpMWpiRzl6WlZ3aUlHUmhkR0V0WW5NdFpHbHpiV2x6Y3oxY0ltMXZaR0ZzWENJZ1lYSnBZUzFzWVdKbGJEMWNJa05zYjNObFhDSStQQzlpZFhSMGIyNCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpQVndpYlc5a1lXd3RZbTlrZVZ3aVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhWc0lHTnNZWE56UFZ3aWJHbHpkQzFuY205MWNDQm5jbWxrTFdOdmJtWnBaeTFqYjJ4elhDSStYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzkxYkQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOWthWFkrWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNNOVhDSnRiMlJoYkMxbWIyOTBaWEpjSWo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhpZFhSMGIyNGdkSGx3WlQxY0ltSjFkSFJ2Ymx3aUlHTnNZWE56UFZ3aVluUnVJR0owYmkxd2NtbHRZWEo1WENJZ1pHRjBZUzFpY3kxa2FYTnRhWE56UFZ3aWJXOWtZV3hjSWo1UGF6d3ZZblYwZEc5dVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwyUnBkajVnTzF4eVhHNGdJQ0FnSUNBZ0lDOHZJSFpoY2lCdGIyUmhiRVZzWlcwZ1BTQjBhR2x6TG1weGRXVnllU2h0YjJSbGJGUmxiWEJzWVhSbEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzF2WkdGc1JXeGxiU0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcE8xeHlYRzRnSUNBZ0lDQWdJRzF2WkdGc1JXeGxiUzVqYkdGemMweHBjM1F1WVdSa0tDZHpaWFIwYVc1bmN5MXRaVzUxSnl3Z0oyZHlhV1F0WTI5dVptbG5MWFJsYlhCc1lYUmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ2JXOWtZV3hGYkdWdExtbHVibVZ5U0ZSTlRDQTlJRzF2WkdWc1ZHVnRjR3hoZEdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMjUwWVdsdVpYSWdQU0IwYUdsekxtWnBibVJDZVVsa0tIUm9hWE11YjNCMGFXOXVjeTVqYjI1MFlXbHVaWEpKWkNrN0lDOHZJRlJQUkU4NklGTjBiM0psSUhKbFptVnlaVzVqWlNCMGJ5QmpiMjUwWVdsdVpYSWdabTl5SUdaaGMzUmxjaUIxY0dSaGRHVnpYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MFlXbHVaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHRnBibVZ5TG1Gd2NHVnVaQ2h0YjJSaGJFVnNaVzBwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUhSb2FYTXVhbkYxWlhKNUtDY2pKeUFySUhSb2FYTXViM0IwYVc5dWN5NWpiMjUwWVdsdVpYSkpaQ2t1WVhCd1pXNWtLRzF2WkdGc1JXeGxiU2s3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkR2hwY3k1aGNIQmxibVFvYlc5a1lXeEZiR1Z0TENCbVlXeHpaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCamIyeHpUR2x6ZENBOUlHMXZaR0ZzUld4bGJTNXhkV1Z5ZVZObGJHVmpkRzl5S0NjdVozSnBaQzFqYjI1bWFXY3RZMjlzY3ljcE8xeHlYRzRnSUNBZ0lDQWdJR2hsWVdSbGNuTXVabTl5UldGamFDZ29hR1ZoWkdWeUxDQnBibVJsZUNrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnliM0JPWVcxbElEMGdhR1ZoWkdWeUxtOXdkR2x2Ym5NdVVISnZjRTVoYldVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjSEp2Y0U1aGJXVXBJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2ZG1GeUlHTnZiSE5NYVhOMFNYUmxiU0E5SUhSb2FYTXVhbkYxWlhKNUtDYzhiR2tnWTJ4aGMzTTlYQ0pzYVhOMExXZHliM1Z3TFdsMFpXMWNJajQ4TDJ4cFBpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5c2MweHBjM1JKZEdWdElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmJHa25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlzYzB4cGMzUkpkR1Z0TG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMnhwYzNRdFozSnZkWEF0YVhSbGJTY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5MllYSWdZMmhySUQwZ2RHaHBjeTVxY1hWbGNua29KenhwYm5CMWRDQjBlWEJsUFZ3aVkyaGxZMnRpYjNoY0lpQjJZV3gxWlQxY0lsd2lJR05zWVhOelBWd2labTl5YlMxamFHVmpheTFwYm5CMWRDQnRaUzB4WENJZ0x6NG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOb2F5QTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oybHVjSFYwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2F5NTBlWEJsSUQwZ0oyTm9aV05yWW05NEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaHJMblpoYkhWbElEMGdKeWM3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05vYXk1amJHRnpjMHhwYzNRdVlXUmtLQ2RtYjNKdExXTm9aV05yTFdsdWNIVjBKeXdnSjIxbExURW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmphR3RKWkNBOUlDZGpiMnhmWTI5dVptbG5YMk5vYTE4bklDc2djSEp2Y0U1aGJXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9heTV6WlhSQmRIUnlhV0oxZEdVb0oybGtKeXdnWTJoclNXUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR3N1YzJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdOdmJtWnBaeTF3Y205d2JtRnRaU2NzSUhCeWIzQk9ZVzFsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGxZV1JsY2k1MmFYTnBZbXhsSUQwOVBTQjBjblZsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR3N1WTJobFkydGxaQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2ZG1GeUlHTm9hMHhpYkNBOUlIUm9hWE11YW5GMVpYSjVLQ2M4YkdGaVpXd2dabTl5UFZ3aUp5QXJJR05vYTBsa0lDc2dKMXdpUGp3dmJHRmlaV3crSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmphR3RNWW13Z1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nkc1lXSmxiQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUd0TVltd3VjMlYwUVhSMGNtbGlkWFJsS0NkbWIzSW5MQ0JqYUd0SlpDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa1pXSjFaMmRsY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoclRHSnNMblJsZUhSRGIyNTBaVzUwSUQwZ2FHVmhaR1Z5TG1kbGRGUmxlSFFvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiSE5NYVhOMFNYUmxiUzVoY0hCbGJtUkRhR2xzWkNoamFHc3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh6VEdsemRFbDBaVzB1WVhCd1pXNWtRMmhwYkdRb1kyaHJUR0pzS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2MweHBjM1F1WVhCd1pXNWtRMmhwYkdRb1kyOXNjMHhwYzNSSmRHVnRLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb2F5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lDaGxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTJoclJXeGxiV1Z1ZENBOUlHVXVkR0Z5WjJWMElHRnpJRWhVVFV4SmJuQjFkRVZzWlcxbGJuUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjNBZ1BTQmphR3RGYkdWdFpXNTBMbWRsZEVGMGRISnBZblYwWlNnblpHRjBZUzFqYjI1bWFXY3RjSEp2Y0c1aGJXVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjSEp2Y0NrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCb1pXRmtaWEpTYjNjZ1BTQjBhR2x6TG1obFlXUXVaMlYwUjNKcFpGUnBkR3hsYzFKdmR5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHTnZiQ0E5SUdobFlXUmxjbEp2ZHk1alpXeHNjeTVtYVc1a0tDaGpaV3hzS1NBOVBpQmpaV3hzTG05d2RHbHZibk11VUhKdmNFNWhiV1VnUFQwOUlIQnliM0FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYjJ3cElISmxkSFZ5Ymp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ltOWtlVkp2ZDNNZ1BTQjBhR2x6TG1KdlpIa3VjbTkzY3p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtOTNjeUE5SUZzdUxpNWliMlI1VW05M2N5d2dhR1ZoWkdWeVVtOTNYVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMM1poY2lCeWIzZHpJRDBnZEdocGN5NW1hVzVrS0NjdVozSnBaQzFqYjJ4ekxDQXVaM0pwWkMxeWIzZHpKeWs3WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmRtRnlJR2x1WkdWNElEMGdRWEp5WVhrdVpuSnZiU2hqYjJ3dWNHRnlaVzUwS0NkMGNpY3BMbU5vYVd4a2NtVnVLQ2twTG1sdVpHVjRUMllvWTI5c1d6QmRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBibVJsZUNBOUlHaGxZV1JsY2xKdmR5NWpaV3hzY3k1cGJtUmxlRTltS0dOdmJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnUENBd0tTQnlaWFIxY200N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205M2N5NW1iM0pGWVdOb0tDaHliM2NwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdObGJHd2dQU0J5YjNjdVkyVnNiSE5iYVc1a1pYaGRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTmxiR3dwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9hMFZzWlcxbGJuUXVZMmhsWTJ0bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBa0tHTmxiR3dwTG5Ob2IzY29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWc2JDNTJhWE5wWW14bElEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ1FvWTJWc2JDa3VhR2xrWlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaV3hzTG5acGMybGliR1VnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXZkR2xtZVV4cGMzUmxibVZ5Y3loaGNIQkVZWFJoUlhabGJuUnpMazlPWDBOUFRGTmZVa1ZQVWtSRlVrVkVMQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSR0YwWVZOdmRYSmpaVTVoYldVNklHUnpMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFVjJaVzUwUkdGMFlUb2dleUJGZG1WdWREb2daU0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMjl1WmtWMlpXNTBPaUJDVTBOdmJtWnBaMVZ3WkdGMFpXUkZkbVZ1ZENBOUlIc2dSWFpsYm5SRVlYUmhPaUI3SUVWMlpXNTBPaUJsTENCQlkzUnBiMjQ2SUdGd2NFRmpkR2x2Ym5NdVEwOU1YMU5JVDFkZlNFbEVSU0I5TENCRVlYUmhVMjkxY21ObFRtRnRaVG9nWkhNZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJtOTBhV1o1VEdsemRHVnVaWEp6S0dGd2NFUmhkR0ZGZG1WdWRITXVUMDVmUjFKSlJGOURUMDVHU1VkZlZWQkVRVlJGUkN3Z1kyOXVaa1YyWlc1MEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGMybDZZV0pzWlVkeWFXUW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvSjNKbGMybDZZV0pzWlVkeWFXUWdhWE1nY21WaFkyaGxaQ2NzSUhSb2FYTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlWTnZkWEpqWlU1aGJXVWdQU0IwYUdsekxtOXdkR2x2Ym5NdVpHRjBZVk52ZFhKalpTNXVZVzFsTzF4eVhHNGdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0hSaFlteGxLVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZMjlzY3lBOUlIUm9hWE11YUdWaFpDNW5aWFJIY21sa1ZHbDBiR1Z6VW05M0tDa3VZMlZzYkhNN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1amMzTWdQU0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJEYzNNb0oyOTJaWEptYkc5M0p5d2dKMmhwWkdSbGJpY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdGaWJHVklaV2xuYUhRZ1BTQjBhR2x6TG1Wc1pXMWxiblF1YjJabWMyVjBTR1ZwWjJoME8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHTnZiSE11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JwZGlBOUlHTnlaV0YwWlVScGRpaDBZV0pzWlVobGFXZG9kQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052YkhOYmFWMHVaV3hsYldWdWRDNWhjSEJsYm1Rb1pHbDJLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlzYzF0cFhTNXpaWFJEYzNNb0ozQnZjMmwwYVc5dUp5d2dKM0psYkdGMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEV4cGMzUmxibVZ5Y3loa2FYWXNJR052YkhOYmFWMHNJSFJvYVhNcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeW9xWEhKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJoY21GdElIdElWRTFNUkdsMlJXeGxiV1Z1ZEgwZ1pHbDJYSEpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q1UwUmhkR0ZVWVdKc1pVTmxiR3g5SUdOdmJDQWdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FxSUVCd1lYSmhiU0I3UWxORVlYUmhWR0ZpYkdWOUlIUmhZbXhsWEhKY2JpQWdJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnYzJWMFRHbHpkR1Z1WlhKektHUnBkam9nU0ZSTlRFUnBka1ZzWlcxbGJuUXNJR052YkRvZ1FsTkVZWFJoVkdGaWJHVkRaV3hzTENCMFlXSnNaVG9nUWxORVlYUmhWR0ZpYkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoWjJWWU9pQnVkVzFpWlhKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDd2dZM1Z5UTI5c09pQklWRTFNVkdGaWJHVkRaV3hzUld4bGJXVnVkRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTENCamRYSkRiMnhYYVdSMGFEb2diblZ0WW1WeVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXNJRzU0ZEVOdmJGZHBaSFJvT2lCdWRXMWlaWEpjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUN3Z2RHRmliR1ZYYVdSMGFEb2diblZ0WW1WeU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR2wyTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxaRzkzYmljc0lHWjFibU4wYVc5dUlDaGxLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0ZpYkdWWGFXUjBhQ0E5SUhSaFlteGxMbVZzWlcxbGJuUXViMlptYzJWMFYybGtkR2c3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z5UTI5c0lEMGdZMjlzTG1Wc1pXMWxiblFnWVhNZ1NGUk5URlJoWW14bFEyVnNiRVZzWlcxbGJuUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdkbFdDQTlJR1V1Y0dGblpWZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoWkdScGJtY2dQU0J3WVdSa2FXNW5SR2xtWmloamRYSkRiMndwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY2tOdmJGZHBaSFJvSUQwZ1kzVnlRMjlzTG05bVpuTmxkRmRwWkhSb0lDMGdjR0ZrWkdsdVp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhZdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZ2ZG1WeUp5d2dablZ1WTNScGIyNGdLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSNWJHVXVZbTl5WkdWeVVtbG5hSFFnUFNBbk1uQjRJSE52Ykdsa0lDTXdNREF3Wm1Zbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR2wyTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxdmRYTmxiM1YwSnl3Z1puVnVZM1JwYjI0Z0tHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1I1YkdVdVltOXlaR1Z5VW1sbmFIUWdQU0FuSnp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sYlc5MlpTY3NJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeVEyOXNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdScFptWllJRDBnWlM1d1lXZGxXQ0F0SUhCaFoyVllPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKRGIyd3VjM1I1YkdVdWQybGtkR2dnUFNBb1kzVnlRMjlzVjJsa2RHZ2dLeUJrYVdabVdDa2dLeUFuY0hnbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaFlteGxMbVZzWlcxbGJuUXVjM1I1YkdVdWQybGtkR2dnUFNCMFlXSnNaVmRwWkhSb0lDc2daR2xtWmxnZ0t5QmNJbkI0WENJN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sZFhBbkxDQm1kVzVqZEdsdmJpQW9aU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSkRiMndwSUh0Y2NseHVYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamIyNW1SWFpsYm5RNklFSlRRMjl1Wm1sblZYQmtZWFJsWkVWMlpXNTBJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRmRtVnVkRVJoZEdFNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVWMlpXNTBPaUJsTENCRGRYSnlaVzUwUTI5c09pQmpkWEpEYjJ4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ3dnUVdOMGFXOXVPaUJoY0hCQlkzUnBiMjV6TGtOUFRGOVNSVk5KV2tWRVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJRVJoZEdGVGIzVnlZMlZPWVcxbE9pQmtZWFJoVTI5MWNtTmxUbUZ0WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0ZpYkdVdWJtOTBhV1o1VEdsemRHVnVaWEp6S0dGd2NFUmhkR0ZGZG1WdWRITXVUMDVmUjFKSlJGOURUMDVHU1VkZlZWQkVRVlJGUkN3Z1kyOXVaa1YyWlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEpEYjJ3Z1BTQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVdkbFdDQTlJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1NGRFTnZiRmRwWkhSb0lEMGdkVzVrWldacGJtVmtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeVEyOXNWMmxrZEdnZ1BTQjFibVJsWm1sdVpXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhR1ZwWjJoMFhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z1kzSmxZWFJsUkdsMktHaGxhV2RvZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR2wySUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBkaTV6ZEhsc1pTNTBiM0FnUFNCY0lqQmNJanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR2wyTG5OMGVXeGxMbkpwWjJoMElEMGdYQ0l3WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdScGRpNXpkSGxzWlM1M2FXUjBhQ0E5SUNjMWNIZ25PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWFl1YzNSNWJHVXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhZdWMzUjViR1V1WTNWeWMyOXlJRDBnSjJOdmJDMXlaWE5wZW1Vbk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYWXVjM1I1YkdVdWRYTmxjbE5sYkdWamRDQTlJQ2R1YjI1bEp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbDJMbk4wZVd4bExtaGxhV2RvZENBOUlHaGxhV2RvZENBcklDZHdlQ2M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmthWFk3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWRXNWpkR2x2YmlCd1lXUmthVzVuUkdsbVppaGpiMndwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2huWlhSVGRIbHNaVlpoYkNoamIyd3NJQ2RpYjNndGMybDZhVzVuSnlrZ1BUMGdKMkp2Y21SbGNpMWliM2duS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaFpFeGxablFnUFNCblpYUlRkSGxzWlZaaGJDaGpiMndzSUNkd1lXUmthVzVuTFd4bFpuUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaFpGSnBaMmgwSUQwZ1oyVjBVM1I1YkdWV1lXd29ZMjlzTENBbmNHRmtaR2x1WnkxeWFXZG9kQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSEJoY25ObFNXNTBLSEJoWkV4bFpuUXBJQ3NnY0dGeWMyVkpiblFvY0dGa1VtbG5hSFFwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJuWlhSVGRIbHNaVlpoYkNobGJHMHNJR056Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0hkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR1ZzYlN3Z2JuVnNiQ2t1WjJWMFVISnZjR1Z5ZEhsV1lXeDFaU2hqYzNNcEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR1Z1WVdKc1pVTnZiSFZ0YmxKbGIzSmtaWEpwYm1jb0tTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkbGJtRmliR1ZEYjJ4MWJXNVNaVzl5WkdWeWFXNW5JR2x6SUhKbFlXTm9aV1FuTENCMGFHbHpLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRlRiM1Z5WTJWT1lXMWxJRDBnZEdocGN5NXZjSFJwYjI1ekxtUmhkR0ZUYjNWeVkyVXVibUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJQzh2ZG1GeUlHZHlhV1JKWkNBOUlDUjBZV0pzWlM1aGRIUnlLQ2RwWkNjcE8xeHlYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyUmhkR0Z6YjNWeVkyVXRibUZ0WlNjc0lHUmhkR0ZUYjNWeVkyVk9ZVzFsS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVdSa1YyRnBkRTFoY210bGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RtRnlJR1IzSUQwZ2FuRW9KenhrYVhZK1BDOWthWFkrSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHUjNMbUZrWkVOc1lYTnpLQ2QzWVdsMExYSmxiM0prWlhJbktTNW9hV1JsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklIWmhjaUJqZENBOUlHcHhLQ2M4WkdsMklHTnNZWE56UFZ3aVpDMW1iR1Y0SUdwMWMzUnBabmt0WTI5dWRHVnVkQzFqWlc1MFpYSmNJajQ4TDJScGRqNG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZG1GeUlHUnpJRDBnYW5Fb0p6eGthWFkrUEM5a2FYWStKeWt1WVdSa1EyeGhjM01vSjNOd2FXNXVaWEl0WW05eVpHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdSekxtRndjR1Z1WkNnblBITndZVzRnWTJ4aGMzTTlYQ0oyYVhOMVlXeHNlUzFvYVdSa1pXNWNJajVYWVdsMExpNHVQQzl6Y0dGdVBpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqZEM1aGNIQmxibVFvWkhNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmtkeTVoY0hCbGJtUW9ZM1FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCZmRHaHBjeTVoWkdSRGJHRnpjeWduWTJGd2RHbHZiaTEwYjNBbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkbUZ5SUdOaGNIUnBiMjRnUFNCcWNTZ25QR05oY0hScGIyNCtQQzlqWVhCMGFXOXVQaWNwTG1Gd2NHVnVaQ2hrZHlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGOTBhR2x6TG1Wc1pXMWxiblF1WVhCd1pXNWtLR05oY0hScGIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjNjbUZ3Y0dWeUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWs3WEhKY2JpQWdJQ0FnSUNBZ2QzSmhjSEJsY2k1a2NtRm5aMkZpYkdVZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIZHlZWEJ3WlhJdVkyeGhjM05NYVhOMExtRmtaQ2duWjNKcFpDMW9aV0ZrWlhJbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2hsWVdSbGNsSnZkeUE5SUY5MGFHbHpMbWhsWVdRdVoyVjBSM0pwWkZScGRHeGxjMUp2ZHlncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCalpXeHNjeUE5SUdobFlXUmxjbEp2ZHk1alpXeHNjenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMlZzYkhNdVptOXlSV0ZqYUNnb1kyVnNiQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMmhwYkdSeklEMGdZMlZzYkM1amFHbHNaSEpsYms1dlpHVnpLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhwYkdSekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFI0ZENBOUlHTmxiR3d1WjJWMFZHVjRkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyVnNiQzV6WlhSVVpYaDBLQ2NuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pXd2dQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNMblJsZUhSRGIyNTBaVzUwSUQwZ2RIaDBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJWc2JDNWhjSEJsYm1SRGFHbHNaQ2hsYkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNjbUZ3S0hkeVlYQndaWElzSUdWc0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkM0poY0NoM2NtRndjR1Z5TENCamFHbHNaSE1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCaFpHUlhZV2wwVFdGeWEyVnlLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCemNtTkZiR1Z0Wlc1ME9pQklWRTFNUld4bGJXVnVkRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeTlxVVhWbGNua3VaWFpsYm5RdWNISnZjSE11Y0hWemFDZ25aR0YwWVZSeVlXNXpabVZ5SnlrN1hISmNiaUFnSUNBZ0lDQWdMeThnWDNSb2FYTXVabWx1WkNnbkxtZHlhV1F0YUdWaFpHVnlKeWt1YjI0b0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYVc1a1JXeGxiV1Z1ZEhNb0p5NW5jbWxrTFdobFlXUmxjaWNwTG1admNrVmhZMmdvS0dWc0tTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhkSFJoWTJnZ1pISmhaeUJvWVc1a2JHVnljeUIwYnlCMGFHVWdaV3hsYldWdWRGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkVSeVlXZElZVzVrYkdWeWN5aGxiQ3dnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISmhaMU4wWVhKME9pQm1kVzVqZEdsdmJpQW9aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vSjJkeWFXUXRhR1ZoWkdWeUp5a3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNKalJXeGxiV1Z1ZENBOUlIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnlZMFZzWlcxbGJuUWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1I1YkdVdWIzQmhZMmwwZVNBOUlDY3dMalVuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J5WVdkTVpXRjJaVG9nWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpjbU5GYkdWdFpXNTBLU0J5WlhSMWNtNDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vSjJkeWFXUXRhR1ZoWkdWeUp5a3BJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMjkyWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2NtRm5SVzUwWlhJNklHWjFibU4wYVc5dUlDaGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYzNKalJXeGxiV1Z1ZENrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVkyeGhjM05NYVhOMExtTnZiblJoYVc1ektDZG5jbWxrTFdobFlXUmxjaWNwS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMnhoYzNOTWFYTjBMbUZrWkNnbmIzWmxjaWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrY21GblQzWmxjam9nWm5WdVkzUnBiMjRnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpjbU5GYkdWdFpXNTBLU0J5WlhSMWNtNDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVqYkdGemMweHBjM1F1WTI5dWRHRnBibk1vSjJkeWFXUXRhR1ZoWkdWeUp5a3BJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU5zWVhOelRHbHpkQzVoWkdRb0oyOTJaWEluS1R0Y2NseHVYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J5WVdkRmJtUTZJR1oxYm1OMGFXOXVJQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1d2NtVjJaVzUwUkdWbVlYVnNkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMzSmpSV3hsYldWdWRDa2djbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1I1YkdVdWIzQmhZMmwwZVNBOUlDY3hKenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtjbTl3T2lCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE55WTBWc1pXMWxiblFwSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIyWVhJZ0pIUm9hWE1nUFNCcWNTaDBhR2x6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNZWE56VEdsemRDNXlaVzF2ZG1Vb0oyOTJaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHVnpkRVZzWlcxbGJuUWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amJHRnpjMHhwYzNRdVkyOXVkR0ZwYm5Nb0oyZHlhV1F0YUdWaFpHVnlKeWtwSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzNKalJXeGxiV1Z1ZENBOVBUMGdaR1Z6ZEVWc1pXMWxiblFwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5MllYSWdZMjlzY3lBOUlGOTBhR2x6TG1obFlXUXVjbTkzYzFzd1hTNWpaV3hzY3p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaR1Z6ZEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1Z6ZEZCaGNtVnVkQ0E5SUhSb2FYTXVZMnh2YzJWemRDZ25kR2duS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXUmxjM1JRWVhKbGJuUXBJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYkc5dmEzVndJR2x1SUdObGJHeHpYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsYzFCaGNtVnVkRU5sYkd3Z1BTQmpaV3hzY3k1bWFXNWtLQ2hsYkNrZ1BUNGdaV3d1Wld4bGJXVnVkQ0E5UFQwZ1pHVnpkRkJoY21WdWRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZrWlhOUVlYSmxiblJEWld4c0tTQnlaWFIxY200N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwYjBsdVpHVjRJRDBnWTJWc2JITXVhVzVrWlhoUFppaGtaWE5RWVhKbGJuUkRaV3hzS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM0pqWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOeVkxQmhjbVZ1ZENBOUlITnlZMFZzWlcxbGJuUXVZMnh2YzJWemRDZ25kR2duS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYTnlZMUJoY21WdWRDa2djbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJzYjI5cmRYQWdhVzRnWTJWc2JITmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM0pqVUdGeVpXNTBRMlZzYkNBOUlHTmxiR3h6TG1acGJtUW9LR1ZzS1NBOVBpQmxiQzVsYkdWdFpXNTBJRDA5UFNCemNtTlFZWEpsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2haR1Z6VUdGeVpXNTBRMlZzYkNrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabkp2YlVsdVpHVjRJRDBnWTJWc2JITXVhVzVrWlhoUFppaHpjbU5RWVhKbGJuUkRaV3hzS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWgwYjBsdVpHVjRMQ0JtY205dFNXNWtaWGdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kRzlKYm1SbGVDQTlQU0JtY205dFNXNWtaWGdwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGNIQnNlU0J1WlhjZ2IzSmtaWElnZEc4Z2RHaGxJR2hsWVdSbGNuTmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFQzSmtaWElvYUdWaFpHVnlVbTkzTENCalpXeHNjeXdnWm5KdmJVbHVaR1Y0TENCMGIwbHVaR1Y0S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEp2ZDNNZ1BTQmZkR2hwY3k1aWIyUjVMbkp2ZDNNN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FuRW9KeTUzWVdsMExYSmxiM0prWlhJbktTNWpjM01vZXlBblkzVnljMjl5SnpvZ0ozQnliMmR5WlhOekp5QjlLUzV6YUc5M0tDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVhCd2JIa2dibVYzSUc5eVpHVnlJSFJ2SUdGc2JDQjBhR1VnY205M2N5QnBiaUIwYUdVZ1ozSnBaRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjFKbGIzSmtaWEpwYm1jZ2MzUmhjblJsWkN3Z0p5d2dibVYzSUVSaGRHVW9LU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCeWIzZHpMbXhsYm1kMGFEc2dhVzVrWlhnckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaR1ZpZFdkblpYSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbTkzSUQwZ2NtOTNjMXRwYm1SbGVGMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZMlZzYkhNZ1BTQnliM2N1WTJWc2JITmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBiMGx1WkdWNElEMDlJR1p5YjIxSmJtUmxlQ2tnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVlBjbVJsY2loeWIzY3NJR05sYkd4ekxDQm1jbTl0U1c1a1pYZ3NJSFJ2U1c1a1pYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkU1pXOXlaR1Z5YVc1bklHTnZiWEJzWlhSbFpDd2dKeXdnYm1WM0lFUmhkR1VvS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1dmRHbG1lU0JoWW05MWRDQmpiMngxYlc0Z2NtVXRiM0prWlhKcGJtZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTljY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVibTkwYVdaNVRHbHpkR1Z1WlhKektHRndjRVJoZEdGRmRtVnVkSE11VDA1ZlEwOU1VMTlTUlU5U1JFVlNSVVFzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJRVJoZEdGVGIzVnlZMlZPWVcxbE9pQmtZWFJoVTI5MWNtTmxUbUZ0WlN3Z1JYWmxiblJFWVhSaE9pQjdJRVYyWlc1ME9pQmxJSDBnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyOXVaa1YyWlc1ME9pQkNVME52Ym1acFoxVndaR0YwWldSRmRtVnVkQ0E5SUhzZ1JYWmxiblJFWVhSaE9pQjdJRVYyWlc1ME9pQmxMQ0JCWTNScGIyNDZJR0Z3Y0VGamRHbHZibk11UTA5TVgxSkZUMUpFUlZJZ2ZTd2dSR0YwWVZOdmRYSmpaVTVoYldVNklHUmhkR0ZUYjNWeVkyVk9ZVzFsSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG01dmRHbG1lVXhwYzNSbGJtVnljeWhoY0hCRVlYUmhSWFpsYm5SekxrOU9YMGRTU1VSZlEwOU9Sa2xIWDFWUVJFRlVSVVFzSUdOdmJtWkZkbVZ1ZENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcWNTZ25MbmRoYVhRdGNtVnZjbVJsY2ljcExtTnpjeWg3SUNkamRYSnpiM0luT2lBbkp5QjlLUzVvYVdSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dOVEF3S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JseHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVlBjbVJsY2lBOUlHWjFibU4wYVc5dUlDZ3ZLaW9nUUhSNWNHVWdlMEpUUkdGMFlWUmhZbXhsVW05M2ZTQXFMeUJ5YjNjNklFSlRSR0YwWVZSaFlteGxVbTkzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ3dnTHlvcUlFQjBlWEJsSUh0Q1UwUmhkR0ZVWVdKc1pVTmxiR3hiWFgwZ0tpOGdZMlZzYkhNNklFSlRSR0YwWVZSaFlteGxRMlZzYkZ0ZFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUN3Z0x5b3FJRUIwZVhCbElIdHVkVzFpWlhKOUlDb3ZJR1p5YjIxSmJtUmxlRG9nYm5WdFltVnlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDd2dMeW9xSUVCMGVYQmxJSHR1ZFcxaVpYSjlJQ292SUhSdlNXNWtaWGc2SUc1MWJXSmxjaWtnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdaR1ZpZFdkblpYSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htY205dFNXNWtaWGdnUFQwZ2RHOUpibVJsZUNrZ2NtVjBkWEp1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JwY2lBOUlHUnBjbVZqZEdsdmJuTXViSFJ5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1p5YjIxSmJtUmxlQ0ErSUhSdlNXNWtaWGdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjaUE5SUdScGNtVmpkR2x2Ym5NdWNuUnNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHbHlJRDA5UFNCa2FYSmxZM1JwYjI1ekxuSjBiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzZGhjRkowYkNoalpXeHNjeXdnWm5KdmJVbHVaR1Y0TENCMGIwbHVaR1Y0S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2RoY0V4MGNpaGpaV3hzY3l3Z1puSnZiVWx1WkdWNExDQjBiMGx1WkdWNEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWkdWaWRXZG5aWEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEp2ZHk1alpXeHNjeUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIzY3VZV1JrUTJWc2JITW9ZMlZzYkhNcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlxY1NoeWIzY3BMbUZ3Y0dWdVpDaGpaV3hzY3lrN1hISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhOM1lYQlNkR3dnUFNCbWRXNWpkR2x2YmlBb0x5b3FJRUIwZVhCbElIdENVMFJoZEdGVVlXSnNaVU5sYkd4YlhYMGdLaThnWTJWc2JITTZJRUpUUkdGMFlWUmhZbXhsUTJWc2JGdGRYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDd2dMeW9xSUVCMGVYQmxJSHR1ZFcxaVpYSjlJQ292SUdaeWIyMUpibVJsZURvZ2JuVnRZbVZ5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ3dnTHlvcUlFQjBlWEJsSUh0dWRXMWlaWEo5SUNvdklIUnZTVzVrWlhnNklHNTFiV0psY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdabkp2YlVsdVpHVjRPeUJwSUQ0Z2RHOUpibVJsZURzZ2FTMHRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemQyRndLR05sYkd4ekxDQnBMQ0JwSUMwZ01TazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2MzZGhjRXgwY2lBOUlHWjFibU4wYVc5dUlDZ3ZLaW9nUUhSNWNHVWdlMEpUUkdGMFlWUmhZbXhsUTJWc2JGdGRmU0FxTHlCalpXeHNjem9nUWxORVlYUmhWR0ZpYkdWRFpXeHNXMTFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMQ0F2S2lvZ1FIUjVjR1VnZTI1MWJXSmxjbjBnS2k4Z1puSnZiVWx1WkdWNE9pQnVkVzFpWlhKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTENBdktpb2dRSFI1Y0dVZ2UyNTFiV0psY24wZ0tpOGdkRzlKYm1SbGVEb2diblZ0WW1WeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0JtY205dFNXNWtaWGc3SUdrZ1BDQjBiMGx1WkdWNE95QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjNZWEFvWTJWc2JITXNJR2tzSUdrZ0t5QXhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkMkZ3SUQwZ1puVnVZM1JwYjI0Z0tDOHFLaUJBZEhsd1pTQjdRbE5FWVhSaFZHRmliR1ZEWld4c1cxMTlJQ292SUdGeWNqb2dRbE5FWVhSaFZHRmliR1ZEWld4c1cxMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xDQXZLaW9nUUhSNWNHVWdlMjUxYldKbGNuMGdLaThnYVdFNklHNTFiV0psY2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FzSUM4cUtpQkFkSGx3WlNCN2JuVnRZbVZ5ZlNBcUx5QnBZam9nYm5WdFltVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMFpXMXdJRDBnWVhKeVcybGhYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWEp5VzJsaFhTQTlJR0Z5Y2x0cFlsMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnljbHRwWWwwZ1BTQjBaVzF3TzF4eVhHNGdJQ0FnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJrYVhKbFkzUnBiMjV6SUQwZ2V5QnlkR3c2SUNkU1NVZElWQzFVVHkxTVJVWlVKeXdnYkhSeU9pQW5URVZHVkMxVVR5MVNTVWRJVkNjZ2ZUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0J2YmtkeWFXUkRiMjVtYVdkMWNtRjBhVzl1UTJoaGJtZGxaQ2hsZG1WdWRFRnlaM002SUVKVFEyOXVabWxuVlhCa1lYUmxaRVYyWlc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1kyOXVjMjlzWlM1c2IyY29KMmR5YVdRZ1kyOXVabWxuZFhKaGRHbHZiaUIxY0dSaGRHVmtKeXdnWlhabGJuUkJjbWR6S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1pHVmlkV2RuWlhJN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmhZM1JwYjI0Z1BTQmxkbVZ1ZEVGeVozTXVSWFpsYm5SRVlYUmhMa0ZqZEdsdmJqdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1ozSnBaRWxrSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbWR5YVdSSlpEdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR052YkhNZ1BTQjBhR2x6TG1obFlXUXVaMlYwUjNKcFpGUnBkR3hsYzFKdmR5Z3BMbU5sYkd4ek8xeHlYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktHTnZiSE1wTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJqYjJ4elQySnFJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdZMjlzY3k1bWIzSkZZV05vS0NoamIyd3NJR2x1WkdWNEtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjSEp2Y0NBOUlHTnZiQzV2Y0hScGIyNXpMbEJ5YjNCT1lXMWxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhCeWIzQXBJSEpsZEhWeWJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaGMyTWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMjlzTG1oaGMwTnNZWE56S0NkemIzSjBhVzVuWDJSbGMyTW5LU2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGell5QTlJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJFRjBkSEk2SUVKVFEyOXNkVzF1VTJWMGRHbHVaM01nUFNCN0lGZHBaSFJvT2lCamIyd3VaMlYwUTNOektDZDNhV1IwYUNjcExDQldhWE5wWW14bE9pQmpiMnd1ZG1semFXSnNaU3dnUVhOalpXNWthVzVuT2lCaGMyTXNJRkJ2YzJsMGFXOXVPaUJwYm1SbGVDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4elQySnFXM0J5YjNCZElEMGdZMjlzUVhSMGNqdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmx4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JEYjI5cmFXVklaV3h3WlhJdVpHVnNaWFJsS0dkeWFXUkpaQ2s3WEhKY2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LQ2REYjJ4emIySnFaV04wT2lBbkxDQmpiMnh6VDJKcUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXZhMmxsU0dWc2NHVnlMbk5sZEVwVFQwNG9aM0pwWkVsa0xDQmpiMnh6VDJKcUxDQjdJR1JoZVhNNklETXdMQ0J6WldOMWNtVTZJSFJ5ZFdVc0lGTmhiV1ZUYVhSbE9pQW5jM1J5YVdOMEp5QjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUxDQTFNREFwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHOXVSM0pwWkVSaGRHRkNiM1Z1WkNobGRtVnVkRUZ5WjNNNklFSlRSWFpsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aGxkbVZ1ZEVGeVozTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUIyWVhJZ1ozSnBaQ0E5SUdWMlpXNTBRWEpuY3k1emIzVnlZMlU3WEhKY2JpQWdJQ0FnSUNBZ0x5OWNjbHh1SUNBZ0lDQWdJQ0F2THlCbGJtRmliR1Z6SUhSb1pTQmpiMjVtYVdkMWNtRjBhVzl1SUc5bUlHTnZiSFZ0Ym5OY2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbmRYSmhZbXhsUjNKcFpDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklHVnVZV0pzWlhNZ2RHOGdjbVV0YjNKa1pYSWdkR2hsSUdOdmJIVnRibk5jY2x4dUlDQWdJQ0FnSUNBdkwxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVpXNWhZbXhsUTI5c2RXMXVVbVZ2Y21SbGNtbHVaeWdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2TDF4eVhHNGdJQ0FnSUNBZ0lDOHZJRzFoYTJVZ2RHaGxJR2R5YVdRZ2NtVnphWGhsWVdKc1pWeHlYRzRnSUNBZ0lDQWdJQzh2WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOcGVtRmliR1ZIY21sa0tDazdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVJaXdpYVcxd2IzSjBJSHNnUWxOSmJuQjFkRTl3ZEdsdmJuTWdmU0JtY205dElGd2lMaTR2WTI5dGJXOXVWSGx3WlhNdlkyOXRiVzl1TFhSNWNHVnpYQ0k3WEhKY2JtbHRjRzl5ZENCN0lFSlRSR0YwWVZSaFlteGxTVzV3ZFhRZ2ZTQm1jbTl0SUZ3aUxpOUNVMFJoZEdGVVlXSnNaVWx1Y0hWMFhDSTdYSEpjYmx4eVhHNWpiR0Z6Y3lCQ1UwUmhkR0ZVWVdKc1pWUmxlSFJKYm5CMWRFVjRkQ0JsZUhSbGJtUnpJRUpUUkdGMFlWUmhZbXhsU1c1d2RYUWdlMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHOXdkR2x2Ym5NNklFSlRTVzV3ZFhSUGNIUnBiMjV6S1NCN1hISmNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2IzQjBhVzl1Y3lrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ2IzQjBhVzl1Y3p0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJtUmxjaWdwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxibVJsY2lncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNoMGFHbHpMbTl3ZEdsdmJuTXVSV3hsYldWdWRFbGtLVHRjY2x4dUlDQWdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUhzZ1FsTkVZWFJoVkdGaWJHVlVaWGgwU1c1d2RYUkZlSFFnZlZ4eVhHNGlYU3dpYm1GdFpYTWlPbHNpY205dmRDSXNJbVpoWTNSdmNua2lMQ0psZUhCdmNuUnpJaXdpYlc5a2RXeGxJaXdpWkdWbWFXNWxJaXdpWVcxa0lpd2ljMlZzWmlJc0lsTjBjbWx1WnlJc0luQnliM1J2ZEhsd1pTSXNJblJ2UTJGdFlXeERZWE5sSWl3aWRHaHBjeUlzSW5KbGNHeGhZMlVpTENKM2IzSmtJaXdpYVc1a1pYZ2lMQ0owYjB4dmQyVnlRMkZ6WlNJc0luUnZWWEJ3WlhKRFlYTmxJaXdpZEc5UVlYTmpZV3hEWVhObElpd2lkRzlRWVhOallXeERZWE5sU25OdmJpSXNJbVp2Y20xaGRDSXNJbUZ5WjNNaUxDSmhjbWQxYldWdWRITWlMQ0p0WVhSamFDSXNJbTUxYldKbGNpSXNJbDlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlh5SXNJbDlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThpTENKdGIyUjFiR1ZKWkNJc0ltTmhZMmhsWkUxdlpIVnNaU0lzSW5WdVpHVm1hVzVsWkNJc0lsOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOGlMQ0prSWl3aVpHVm1hVzVwZEdsdmJpSXNJbXRsZVNJc0ltOGlMQ0pQWW1wbFkzUWlMQ0prWldacGJtVlFjbTl3WlhKMGVTSXNJbVZ1ZFcxbGNtRmliR1VpTENKblpYUWlMQ0p2WW1vaUxDSndjbTl3SWl3aWFHRnpUM2R1VUhKdmNHVnlkSGtpTENKallXeHNJaXdpY2lJc0lsTjViV0p2YkNJc0luUnZVM1J5YVc1blZHRm5JaXdpZG1Gc2RXVWlMQ0ppYjNSMGIyMGlMQ0p5YVdkb2RDSXNJbXhsWm5RaUxDSmhkWFJ2SWl3aVltRnpaVkJzWVdObGJXVnVkSE1pTENKemRHRnlkQ0lzSW1WdVpDSXNJbU5zYVhCd2FXNW5VR0Z5Wlc1MGN5SXNJblpwWlhkd2IzSjBJaXdpY0c5d2NHVnlJaXdpY21WbVpYSmxibU5sSWl3aWRtRnlhV0YwYVc5dVVHeGhZMlZ0Wlc1MGN5SXNJbkpsWkhWalpTSXNJbUZqWXlJc0luQnNZV05sYldWdWRDSXNJbU52Ym1OaGRDSXNJbUpsWm05eVpWSmxZV1FpTENKeVpXRmtJaXdpWVdaMFpYSlNaV0ZrSWl3aVltVm1iM0psVFdGcGJpSXNJbTFoYVc0aUxDSmhablJsY2sxaGFXNGlMQ0ppWldadmNtVlhjbWwwWlNJc0luZHlhWFJsSWl3aVlXWjBaWEpYY21sMFpTSXNJbTF2WkdsbWFXVnlVR2hoYzJWeklpd2laMlYwVG05a1pVNWhiV1VpTENKbGJHVnRaVzUwSWl3aWJtOWtaVTVoYldVaUxDSm5aWFJYYVc1a2IzY2lMQ0p1YjJSbElpd2lkMmx1Wkc5M0lpd2lkRzlUZEhKcGJtY2lMQ0p2ZDI1bGNrUnZZM1Z0Wlc1MElpd2laR1ZtWVhWc2RGWnBaWGNpTENKcGMwVnNaVzFsYm5RaUxDSkZiR1Z0Wlc1MElpd2lhWE5JVkUxTVJXeGxiV1Z1ZENJc0lraFVUVXhGYkdWdFpXNTBJaXdpYVhOVGFHRmtiM2RTYjI5MElpd2lVMmhoWkc5M1VtOXZkQ0lzSW01aGJXVWlMQ0psYm1GaWJHVmtJaXdpY0doaGMyVWlMQ0ptYmlJc0lsOXlaV1lpTENKemRHRjBaU0lzSW10bGVYTWlMQ0psYkdWdFpXNTBjeUlzSW1admNrVmhZMmdpTENKemRIbHNaU0lzSW5OMGVXeGxjeUlzSW1GMGRISnBZblYwWlhNaUxDSmhjM05wWjI0aUxDSnlaVzF2ZG1WQmRIUnlhV0oxZEdVaUxDSnpaWFJCZEhSeWFXSjFkR1VpTENKbFptWmxZM1FpTENKZmNtVm1NaUlzSW1sdWFYUnBZV3hUZEhsc1pYTWlMQ0p3YjNOcGRHbHZiaUlzSW05d2RHbHZibk1pTENKemRISmhkR1ZuZVNJc0luUnZjQ0lzSW0xaGNtZHBiaUlzSW1GeWNtOTNJaXdpY0hKdmNHVnlkSGtpTENKaGRIUnlhV0oxZEdVaUxDSnlaWEYxYVhKbGN5SXNJbWRsZEVKaGMyVlFiR0ZqWlcxbGJuUWlMQ0p6Y0d4cGRDSXNJazFoZEdnaUxDSnRZWGdpTENKdGFXNGlMQ0p5YjNWdVpDSXNJbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENJc0ltbHVZMngxWkdWVFkyRnNaU0lzSW5KbFkzUWlMQ0p6WTJGc1pWZ2lMQ0p6WTJGc1pWa2lMQ0p2Wm1aelpYUklaV2xuYUhRaUxDSnZabVp6WlhSWGFXUjBhQ0lzSW5kcFpIUm9JaXdpYUdWcFoyaDBJaXdpZUNJc0lua2lMQ0puWlhSTVlYbHZkWFJTWldOMElpd2lZMnhwWlc1MFVtVmpkQ0lzSW1GaWN5SXNJbTltWm5ObGRFeGxablFpTENKdlptWnpaWFJVYjNBaUxDSmpiMjUwWVdsdWN5SXNJbkJoY21WdWRDSXNJbU5vYVd4a0lpd2ljbTl2ZEU1dlpHVWlMQ0puWlhSU2IyOTBUbTlrWlNJc0ltNWxlSFFpTENKcGMxTmhiV1ZPYjJSbElpd2ljR0Z5Wlc1MFRtOWtaU0lzSW1odmMzUWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpYVhOVVlXSnNaVVZzWlcxbGJuUWlMQ0pwYm1SbGVFOW1JaXdpWjJWMFJHOWpkVzFsYm5SRmJHVnRaVzUwSWl3aVpHOWpkVzFsYm5RaUxDSmtiMk4xYldWdWRFVnNaVzFsYm5RaUxDSm5aWFJRWVhKbGJuUk9iMlJsSWl3aVlYTnphV2R1WldSVGJHOTBJaXdpWjJWMFZISjFaVTltWm5ObGRGQmhjbVZ1ZENJc0ltOW1abk5sZEZCaGNtVnVkQ0lzSW1kbGRFOW1abk5sZEZCaGNtVnVkQ0lzSW1selJtbHlaV1p2ZUNJc0ltNWhkbWxuWVhSdmNpSXNJblZ6WlhKQloyVnVkQ0lzSW1OMWNuSmxiblJPYjJSbElpd2lZM056SWl3aWRISmhibk5tYjNKdElpd2ljR1Z5YzNCbFkzUnBkbVVpTENKamIyNTBZV2x1SWl3aWQybHNiRU5vWVc1blpTSXNJbVpwYkhSbGNpSXNJbWRsZEVOdmJuUmhhVzVwYm1kQ2JHOWpheUlzSW1kbGRFMWhhVzVCZUdselJuSnZiVkJzWVdObGJXVnVkQ0lzSW5kcGRHaHBiaUlzSW0xbGNtZGxVR0ZrWkdsdVowOWlhbVZqZENJc0luQmhaR1JwYm1kUFltcGxZM1FpTENKbGVIQmhibVJVYjBoaGMyaE5ZWEFpTENKb1lYTm9UV0Z3SWl3aVgzTjBZWFJsSkcxdlpHbG1hV1Z5YzBSaGRHRWtJaXdpWVhKeWIzZEZiR1Z0Wlc1MElpd2ljRzl3Y0dWeVQyWm1jMlYwY3lJc0ltMXZaR2xtYVdWeWMwUmhkR0VpTENKaVlYTmxVR3hoWTJWdFpXNTBJaXdpWVhocGN5SXNJbXhsYmlJc0luQmhaR1JwYm1jaUxDSnlaV04wY3lJc0luUnZVR0ZrWkdsdVowOWlhbVZqZENJc0ltRnljbTkzVW1WamRDSXNJbTFwYmxCeWIzQWlMQ0p0WVhoUWNtOXdJaXdpWlc1a1JHbG1aaUlzSW5OMFlYSjBSR2xtWmlJc0ltRnljbTkzVDJabWMyVjBVR0Z5Wlc1MElpd2lZMnhwWlc1MFUybDZaU0lzSW1Oc2FXVnVkRWhsYVdkb2RDSXNJbU5zYVdWdWRGZHBaSFJvSWl3aVkyVnVkR1Z5Vkc5U1pXWmxjbVZ1WTJVaUxDSmpaVzUwWlhJaUxDSnZabVp6WlhRaUxDSmhlR2x6VUhKdmNDSXNJbU5sYm5SbGNrOW1abk5sZENJc0lsOXZjSFJwYjI1ekpHVnNaVzFsYm5RaUxDSnhkV1Z5ZVZObGJHVmpkRzl5SWl3aWNtVnhkV2x5WlhOSlprVjRhWE4wY3lJc0ltZGxkRlpoY21saGRHbHZiaUlzSW5WdWMyVjBVMmxrWlhNaUxDSnRZWEJVYjFOMGVXeGxjeUlzSWw5UFltcGxZM1FrWVhOemFXZHVNaUlzSW5CdmNIQmxjbEpsWTNRaUxDSjJZWEpwWVhScGIyNGlMQ0p2Wm1aelpYUnpJaXdpWjNCMVFXTmpaV3hsY21GMGFXOXVJaXdpWVdSaGNIUnBkbVVpTENKeWIzVnVaRTltWm5ObGRITWlMQ0pwYzBacGVHVmtJaXdpWDI5bVpuTmxkSE1rZUNJc0lsOXZabVp6WlhSekpIa2lMQ0pmY21WbU15SXNJbWhoYzFnaUxDSm9ZWE5aSWl3aWMybGtaVmdpTENKemFXUmxXU0lzSW5kcGJpSXNJbWhsYVdkb2RGQnliM0FpTENKM2FXUjBhRkJ5YjNBaUxDSjJhWE4xWVd4V2FXVjNjRzl5ZENJc0lsOVBZbXBsWTNRa1lYTnphV2R1SWl3aVkyOXRiVzl1VTNSNWJHVnpJaXdpWDNKbFpqUWlMQ0prY0hJaUxDSmtaWFpwWTJWUWFYaGxiRkpoZEdsdklpd2ljbTkxYm1SUFptWnpaWFJ6UW5sRVVGSWlMQ0pmY21WbU5TSXNJbDl2Y0hScGIyNXpKR2R3ZFVGalkyVnNaWEpoZENJc0lsOXZjSFJwYjI1ekpHRmtZWEIwYVhabElpd2lYMjl3ZEdsdmJuTWtjbTkxYm1SUFptWnpaWFJ6SWl3aVpHRjBZU0lzSW5CaGMzTnBkbVVpTENKcGJuTjBZVzVqWlNJc0lsOXZjSFJwYjI1ekpITmpjbTlzYkNJc0luTmpjbTlzYkNJc0lsOXZjSFJwYjI1ekpISmxjMmw2WlNJc0luSmxjMmw2WlNJc0luTmpjbTlzYkZCaGNtVnVkSE1pTENKelkzSnZiR3hRWVhKbGJuUWlMQ0poWkdSRmRtVnVkRXhwYzNSbGJtVnlJaXdpZFhCa1lYUmxJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lJc0ltaGhjMmdpTENKblpYUlBjSEJ2YzJsMFpWQnNZV05sYldWdWRDSXNJbTFoZEdOb1pXUWlMQ0puWlhSUGNIQnZjMmwwWlZaaGNtbGhkR2x2YmxCc1lXTmxiV1Z1ZENJc0ltZGxkRmRwYm1SdmQxTmpjbTlzYkNJc0luTmpjbTlzYkV4bFpuUWlMQ0p3WVdkbFdFOW1abk5sZENJc0luTmpjbTlzYkZSdmNDSXNJbkJoWjJWWlQyWm1jMlYwSWl3aVoyVjBWMmx1Wkc5M1UyTnliMnhzUW1GeVdDSXNJbWx6VTJOeWIyeHNVR0Z5Wlc1MElpd2lYMmRsZEVOdmJYQjFkR1ZrVTNSNWJHVWlMQ0p2ZG1WeVpteHZkeUlzSW05MlpYSm1iRzkzV0NJc0ltOTJaWEptYkc5M1dTSXNJblJsYzNRaUxDSm5aWFJUWTNKdmJHeFFZWEpsYm5RaUxDSmliMlI1SWl3aWJHbHpkRk5qY205c2JGQmhjbVZ1ZEhNaUxDSnNhWE4wSWl3aVgyVnNaVzFsYm5Ra2IzZHVaWEpFYjJOMWJXVnVJaXdpYVhOQ2IyUjVJaXdpZEdGeVoyVjBJaXdpZFhCa1lYUmxaRXhwYzNRaUxDSnlaV04wVkc5RGJHbGxiblJTWldOMElpd2laMlYwUTJ4cFpXNTBVbVZqZEVaeWIyMU5hWGhsWkZSNWNHVWlMQ0pqYkdsd2NHbHVaMUJoY21WdWRDSXNJbWgwYld3aUxDSm5aWFJXYVdWM2NHOXlkRkpsWTNRaUxDSmpiR2xsYm5SVWIzQWlMQ0pqYkdsbGJuUk1aV1owSWl3aVoyVjBTVzV1WlhKQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRaUxDSjNhVzVUWTNKdmJHd2lMQ0p6WTNKdmJHeFhhV1IwYUNJc0luTmpjbTlzYkVobGFXZG9kQ0lzSW1ScGNtVmpkR2x2YmlJc0ltZGxkRVJ2WTNWdFpXNTBVbVZqZENJc0ltTnZiWEIxZEdWUFptWnpaWFJ6SWl3aVkyOXRiVzl1V0NJc0ltTnZiVzF2YmxraUxDSnRZV2x1UVhocGN5SXNJbVJsZEdWamRFOTJaWEptYkc5M0lpd2lYMjl3ZEdsdmJuTWlMQ0pmYjNCMGFXOXVjeVJ3YkdGalpXMWxiblFpTENKZmIzQjBhVzl1Y3lSaWIzVnVaR0Z5ZVNJc0ltSnZkVzVrWVhKNUlpd2lYMjl3ZEdsdmJuTWtjbTl2ZEVKdmRXNWtZWEo1SWl3aWNtOXZkRUp2ZFc1a1lYSjVJaXdpWDI5d2RHbHZibk1rWld4bGJXVnVkRU52Ym5SbElpd2laV3hsYldWdWRFTnZiblJsZUhRaUxDSmZiM0IwYVc5dWN5UmhiSFJDYjNWdVpHRnllU0lzSW1Gc2RFSnZkVzVrWVhKNUlpd2lYMjl3ZEdsdmJuTWtjR0ZrWkdsdVp5SXNJbUZzZEVOdmJuUmxlSFFpTENKamJHbHdjR2x1WjBOc2FXVnVkRkpsWTNRaUxDSnRZV2x1UTJ4cGNIQnBibWRRWVhKbGJuUnpJaXdpWTJ4cGNIQmxja1ZzWlcxbGJuUWlMQ0puWlhSRGJHbHdjR2x1WjFCaGNtVnVkSE1pTENKbWFYSnpkRU5zYVhCd2FXNW5VR0Z5Wlc1MElpd2lZMnhwY0hCcGJtZFNaV04wSWl3aVlXTmpVbVZqZENJc0ltZGxkRU5zYVhCd2FXNW5VbVZqZENJc0ltTnZiblJsZUhSRmJHVnRaVzUwSWl3aWNtVm1aWEpsYm1ObFEyeHBaVzUwVW1WamRDSXNJbkJ2Y0hCbGNrTnNhV1Z1ZEZKbFkzUWlMQ0psYkdWdFpXNTBRMnhwWlc1MFVtVmpkQ0lzSW05MlpYSm1iRzkzVDJabWMyVjBjeUlzSW05bVpuTmxkRVJoZEdFaUxDSnRkV3gwYVhCc2VTSXNJbDl6YTJsd0lpd2lYMjl3ZEdsdmJuTWtiV0ZwYmtGNGFYTWlMQ0pqYUdWamEwMWhhVzVCZUdseklpd2lYMjl3ZEdsdmJuTWtZV3gwUVhocGN5SXNJbUZzZEVGNGFYTWlMQ0pqYUdWamEwRnNkRUY0YVhNaUxDSnpjR1ZqYVdacFpXUkdZV3hzWW1GamExQnNZV05sYldWdWRITWlMQ0ptWVd4c1ltRmphMUJzWVdObGJXVnVkSE1pTENKZmIzQjBhVzl1Y3lSbWJHbHdWbUZ5YVdGMGFXOGlMQ0ptYkdsd1ZtRnlhV0YwYVc5dWN5SXNJbUZzYkc5M1pXUkJkWFJ2VUd4aFkyVnRaVzUwY3lJc0luQnlaV1psY25KbFpGQnNZV05sYldWdWRDSXNJbTl3Y0c5emFYUmxVR3hoWTJWdFpXNTBJaXdpWjJWMFJYaHdZVzVrWldSR1lXeHNZbUZqYTFCc1lXTmxiV1Z1ZEhNaUxDSndiR0ZqWlcxbGJuUnpJaXdpWDI5d2RHbHZibk1rWVd4c2IzZGxaRUYxZEc5UUlpd2lZV3hzYjNkbFpGQnNZV05sYldWdWRITWlMQ0pzWlc1bmRHZ2lMQ0p2ZG1WeVpteHZkM01pTENKemIzSjBJaXdpWVNJc0ltSWlMQ0pqYjIxd2RYUmxRWFYwYjFCc1lXTmxiV1Z1ZENJc0luSmxabVZ5Wlc1alpWSmxZM1FpTENKamFHVmphM05OWVhBaUxDSk5ZWEFpTENKdFlXdGxSbUZzYkdKaFkydERhR1ZqYTNNaUxDSm1hWEp6ZEVacGRIUnBibWRRYkdGalpXMWxiblFpTENKcElpd2lYMkpoYzJWUWJHRmpaVzFsYm5RaUxDSnBjMU4wWVhKMFZtRnlhV0YwYVc5dUlpd2lhWE5XWlhKMGFXTmhiQ0lzSW0xaGFXNVdZWEpwWVhScGIyNVRhV1JsSWl3aVlXeDBWbUZ5YVdGMGFXOXVVMmxrWlNJc0ltTm9aV05yY3lJc0luQjFjMmdpTENKbGRtVnllU0lzSW1Ob1pXTnJJaXdpYzJWMElpd2lYMnh2YjNBaUxDSmZhU0lzSW1acGRIUnBibWRRYkdGalpXMWxiblFpTENKbWFXNWtJaXdpYzJ4cFkyVWlMQ0p5WlhObGRDSXNJbWRsZEZOcFpHVlBabVp6WlhSeklpd2ljSEpsZG1WdWRHVmtUMlptYzJWMGN5SXNJbWx6UVc1NVUybGtaVVoxYkd4NVEyeHBjSEJsWkNJc0luTnZiV1VpTENKemFXUmxJaXdpY0hKbGRtVnVkRTkyWlhKbWJHOTNJaXdpY21WbVpYSmxibU5sVDNabGNtWnNiM2NpTENKd2IzQndaWEpCYkhSUGRtVnlabXh2ZHlJc0luSmxabVZ5Wlc1alpVTnNhWEJ3YVc1blQyWm1jMlYwY3lJc0luQnZjSEJsY2tWelkyRndaVTltWm5ObGRITWlMQ0pwYzFKbFptVnlaVzVqWlVocFpHUmxiaUlzSW1oaGMxQnZjSEJsY2tWelkyRndaV1FpTENKZmIzQjBhVzl1Y3lSdlptWnpaWFFpTENKcGJuWmxjblJFYVhOMFlXNWpaU0lzSW5OcmFXUmthVzVuSWl3aVpHbHpkR0Z1WTJVaUxDSmthWE4wWVc1alpVRnVaRk5yYVdSa2FXNW5WRzlZV1NJc0lsOWtZWFJoSkhOMFlYUmxKSEJzWVdObGJXVnVkQ0lzSWw5dmNIUnBiMjV6SkhSbGRHaGxjaUlzSW5SbGRHaGxjaUlzSWw5dmNIUnBiMjV6SkhSbGRHaGxjazltWm5ObGRDSXNJblJsZEdobGNrOW1abk5sZENJc0ltbHpRbUZ6WlZCc1lXTmxiV1Z1ZENJc0luUmxkR2hsY2s5bVpuTmxkRlpoYkhWbElpd2libTl5YldGc2FYcGxaRlJsZEdobGNrOW1abk5sZEZaaGJIVmxJaXdpYjJabWMyVjBUVzlrYVdacFpYSlRkR0YwWlNJc0lsOXZabVp6WlhSTmIyUnBabWxsY2xOMFlYUmxKQ0lzSW0xaGFXNVRhV1JsSWl3aVlXeDBVMmxrWlNJc0ltRmtaR2wwYVhabElpd2liV2x1VEdWdUlpd2liV0Y0VEdWdUlpd2lZWEp5YjNkUVlXUmthVzVuVDJKcVpXTjBJaXdpWVhKeWIzZFFZV1JrYVc1blRXbHVJaXdpWVhKeWIzZFFZV1JrYVc1blRXRjRJaXdpWVhKeWIzZE1aVzRpTENKdGFXNVBabVp6WlhRaUxDSnRZWGhQWm1aelpYUWlMQ0pqYkdsbGJuUlBabVp6WlhRaUxDSnZabVp6WlhSTmIyUnBabWxsY2xaaGJIVmxJaXdpZEdWMGFHVnlUV0Y0SWl3aWNISmxkbVZ1ZEdWa1QyWm1jMlYwSWl3aVgyOW1abk5sZEUxdlpHbG1hV1Z5VTNSaGRHVWtNaUlzSWw5dFlXbHVVMmxrWlNJc0lsOWhiSFJUYVdSbElpd2lYMjltWm5ObGRDSXNJbDlzWlc0aUxDSmZiV2x1SWl3aVgyMWhlQ0lzSW1selQzSnBaMmx1VTJsa1pTSXNJbDl2Wm1aelpYUk5iMlJwWm1sbGNsWmhiSFZsSWl3aVgzUmxkR2hsY2sxcGJpSXNJbDkwWlhSb1pYSk5ZWGdpTENKZmNISmxkbVZ1ZEdWa1QyWm1jMlYwSWl3aWRpSXNJbmRwZEdocGJrMWhlRU5zWVcxd0lpd2laMlYwUTI5dGNHOXphWFJsVW1WamRDSXNJbVZzWlcxbGJuUlBjbFpwY25SMVlXeEZiR1Z0Wlc1MElpd2lhWE5QWm1aelpYUlFZWEpsYm5SQmJrVnNaVzFsYm5RaUxDSnZabVp6WlhSUVlYSmxiblJKYzFOallXeGxaQ0lzSW1selJXeGxiV1Z1ZEZOallXeGxaQ0lzSW05eVpHVnlJaXdpYlc5a2FXWnBaWEp6SWl3aWJXRndJaXdpZG1semFYUmxaQ0lzSWxObGRDSXNJbkpsYzNWc2RDSXNJbTF2WkdsbWFXVnlJaXdpWVdSa0lpd2laR1Z3SWl3aWFHRnpJaXdpWkdWd1RXOWthV1pwWlhJaUxDSkVSVVpCVlV4VVgwOVFWRWxQVGxNaUxDSmhjbVZXWVd4cFpFVnNaVzFsYm5Seklpd2lRWEp5WVhraUxDSmZhMlY1SWl3aWNHOXdjR1Z5UjJWdVpYSmhkRzl5SWl3aVoyVnVaWEpoZEc5eVQzQjBhVzl1Y3lJc0lsOW5aVzVsY21GMGIzSlBjSFJwYjI1eklpd2lYMmRsYm1WeVlYUnZjazl3ZEdsdmJuTWtaR1ZtSWl3aVpHVm1ZWFZzZEUxdlpHbG1hV1Z5Y3lJc0lsOW5aVzVsY21GMGIzSlBjSFJwYjI1ekpHUmxaaklpTENKa1pXWmhkV3gwVDNCMGFXOXVjeUlzSW5CbGJtUnBibWNpTENKdmNtUmxjbVZrVFc5a2FXWnBaWEp6SWl3aVpXWm1aV04wUTJ4bFlXNTFjRVp1Y3lJc0ltbHpSR1Z6ZEhKdmVXVmtJaXdpYzJWMFQzQjBhVzl1Y3lJc0luTmxkRTl3ZEdsdmJuTkJZM1JwYjI0aUxDSmpiR1ZoYm5Wd1RXOWthV1pwWlhKRlptWmxZM1J6SWl3aWJXVnlaMlZrSWl3aWIzSmtaWEpOYjJScFptbGxjbk1pTENKamRYSnlaVzUwSWl3aVpYaHBjM1JwYm1jaUxDSnRJaXdpWDNKbFpqTWtiM0IwYVc5dWN5SXNJbU5zWldGdWRYQkdiaUlzSW1admNtTmxWWEJrWVhSbElpd2lYM04wWVhSbEpHVnNaVzFsYm5Seklpd2lYM04wWVhSbEpHOXlaR1Z5WldSTmIyUnBabWxsSWl3aVgzTjBZWFJsSkc5eVpHVnlaV1JOYjJScFptbGxNaUlzSWxCeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWRHaGxiaUlzSW1SbGMzUnliM2tpTENKdmJrWnBjbk4wVlhCa1lYUmxJaXdpWTNKbFlYUmxVRzl3Y0dWeUlpd2laWFpsYm5STWFYTjBaVzVsY25NaUxDSlVVa0ZPVTBsVVNVOU9YMFZPUkNJc0ltZGxkRk5sYkdWamRHOXlJaXdpYzJWc1pXTjBiM0lpTENKblpYUkJkSFJ5YVdKMWRHVWlMQ0pvY21WbVFYUjBjaUlzSW1sdVkyeDFaR1Z6SWl3aWMzUmhjblJ6VjJsMGFDSXNJblJ5YVcwaUxDSm5aWFJUWld4bFkzUnZja1p5YjIxRmJHVnRaVzUwSWl3aVoyVjBSV3hsYldWdWRFWnliMjFUWld4bFkzUnZjaUlzSW5SeWFXZG5aWEpVY21GdWMybDBhVzl1Ulc1a0lpd2laR2x6Y0dGMFkyaEZkbVZ1ZENJc0lrVjJaVzUwSWl3aWFuRjFaWEo1SWl3aWJtOWtaVlI1Y0dVaUxDSm5aWFJGYkdWdFpXNTBJaXdpZEhsd1pVTm9aV05yUTI5dVptbG5JaXdpWTI5dGNHOXVaVzUwVG1GdFpTSXNJbU52Ym1acFp5SXNJbU52Ym1acFoxUjVjR1Z6SWl3aVpYaHdaV04wWldSVWVYQmxjeUlzSW5aaGJIVmxWSGx3WlNJc0lsSmxaMFY0Y0NJc0lsUjVjR1ZGY25KdmNpSXNJbWx6Vm1semFXSnNaU0lzSW1kbGRFTnNhV1Z1ZEZKbFkzUnpJaXdpWjJWMFVISnZjR1Z5ZEhsV1lXeDFaU0lzSW1selJHbHpZV0pzWldRaUxDSk9iMlJsSWl3aVJVeEZUVVZPVkY5T1QwUkZJaXdpWTJ4aGMzTk1hWE4wSWl3aVpHbHpZV0pzWldRaUxDSm9ZWE5CZEhSeWFXSjFkR1VpTENKbWFXNWtVMmhoWkc5M1VtOXZkQ0lzSW1GMGRHRmphRk5vWVdSdmR5SXNJbTV2YjNBaUxDSnlaV1pzYjNjaUxDSm5aWFJxVVhWbGNua2lMQ0pxVVhWbGNua2lMQ0pFVDAxRGIyNTBaVzUwVEc5aFpHVmtRMkZzYkdKaFkydHpJaXdpYVhOU1ZFd2lMQ0prYVhJaUxDSmtaV1pwYm1WS1VYVmxjbmxRYkhWbmFXNGlMQ0p3YkhWbmFXNGlMQ0pqWVd4c1ltRmpheUlzSWlRaUxDSk9RVTFGSWl3aVNsRlZSVkpaWDA1UFgwTlBUa1pNU1VOVUlpd2lhbEYxWlhKNVNXNTBaWEptWVdObElpd2lRMjl1YzNSeWRXTjBiM0lpTENKdWIwTnZibVpzYVdOMElpd2ljbVZoWkhsVGRHRjBaU0lzSW1WNFpXTjFkR1VpTENKbGVHVmpkWFJsUVdaMFpYSlVjbUZ1YzJsMGFXOXVJaXdpZEhKaGJuTnBkR2x2YmtWc1pXMWxiblFpTENKM1lXbDBSbTl5VkhKaGJuTnBkR2x2YmlJc0ltVnRkV3hoZEdWa1JIVnlZWFJwYjI0aUxDSjBjbUZ1YzJsMGFXOXVSSFZ5WVhScGIyNGlMQ0owY21GdWMybDBhVzl1UkdWc1lYa2lMQ0ptYkc5aGRGUnlZVzV6YVhScGIyNUVkWEpoZEdsdmJpSXNJazUxYldKbGNpSXNJbkJoY25ObFJteHZZWFFpTENKbWJHOWhkRlJ5WVc1emFYUnBiMjVFWld4aGVTSXNJbWRsZEZSeVlXNXphWFJwYjI1RWRYSmhkR2x2YmtaeWIyMUZiR1Z0Wlc1MElpd2lZMkZzYkdWa0lpd2lhR0Z1Wkd4bGNpSXNJbk5sZEZScGJXVnZkWFFpTENKblpYUk9aWGgwUVdOMGFYWmxSV3hsYldWdWRDSXNJbUZqZEdsMlpVVnNaVzFsYm5RaUxDSnphRzkxYkdSSFpYUk9aWGgwSWl3aWFYTkRlV05zWlVGc2JHOTNaV1FpTENKc2FYTjBUR1Z1WjNSb0lpd2libUZ0WlhOd1lXTmxVbVZuWlhnaUxDSnpkSEpwY0U1aGJXVlNaV2RsZUNJc0luTjBjbWx3Vldsa1VtVm5aWGdpTENKbGRtVnVkRkpsWjJsemRISjVJaXdpZFdsa1JYWmxiblFpTENKamRYTjBiMjFGZG1WdWRITWlMQ0p0YjNWelpXVnVkR1Z5SWl3aWJXOTFjMlZzWldGMlpTSXNJbU4xYzNSdmJVVjJaVzUwYzFKbFoyVjRJaXdpYm1GMGFYWmxSWFpsYm5Seklpd2laMlYwVldsa1JYWmxiblFpTENKMWFXUWlMQ0puWlhSRmRtVnVkQ0lzSW1acGJtUklZVzVrYkdWeUlpd2laWFpsYm5Seklpd2laR1ZzWldkaGRHbHZibE5sYkdWamRHOXlJaXdpZFdsa1JYWmxiblJNYVhOMElpd2laWFpsYm5RaUxDSnZjbWxuYVc1aGJFaGhibVJzWlhJaUxDSnViM0p0WVd4cGVtVlFZWEpoYlhNaUxDSnZjbWxuYVc1aGJGUjVjR1ZGZG1WdWRDSXNJbVJsYkdWbllYUnBiMjVHYmlJc0ltUmxiR1ZuWVhScGIyNGlMQ0owZVhCbFJYWmxiblFpTENKblpYUlVlWEJsUlhabGJuUWlMQ0poWkdSSVlXNWtiR1Z5SWl3aWIyNWxUMlptSWl3aWQzSmhjRVp1SWl3aWNtVnNZWFJsWkZSaGNtZGxkQ0lzSW1SbGJHVm5ZWFJsVkdGeVoyVjBJaXdpYUdGdVpHeGxjbk1pTENKd2NtVjJhVzkxYzBadUlpd2laRzl0Uld4bGJXVnVkSE1pTENKeGRXVnllVk5sYkdWamRHOXlRV3hzSWl3aVJYWmxiblJJWVc1a2JHVnlJaXdpYjJabUlpd2lkSGx3WlNJc0ltRndjR3g1SWl3aVltOXZkSE4wY21Gd1JHVnNaV2RoZEdsdmJraGhibVJzWlhJaUxDSmliMjkwYzNSeVlYQklZVzVrYkdWeUlpd2ljbVZ0YjNabFNHRnVaR3hsY2lJc0lrSnZiMnhsWVc0aUxDSnZiaUlzSW05dVpTSXNJbWx1VG1GdFpYTndZV05sSWl3aWFYTk9ZVzFsYzNCaFkyVWlMQ0psYkdWdFpXNTBSWFpsYm5RaUxDSnVZVzFsYzNCaFkyVWlMQ0p6ZEc5eVpVVnNaVzFsYm5SRmRtVnVkQ0lzSW1oaGJtUnNaWEpMWlhraUxDSnlaVzF2ZG1WT1lXMWxjM0JoWTJWa1NHRnVaR3hsY25NaUxDSnJaWGxJWVc1a2JHVnljeUlzSW5SeWFXZG5aWElpTENKcGMwNWhkR2wyWlNJc0ltcFJkV1Z5ZVVWMlpXNTBJaXdpWW5WaVlteGxjeUlzSW01aGRHbDJaVVJwYzNCaGRHTm9JaXdpWkdWbVlYVnNkRkJ5WlhabGJuUmxaQ0lzSW1WMmRDSXNJbWx6VUhKdmNHRm5ZWFJwYjI1VGRHOXdjR1ZrSWl3aWFYTkpiVzFsWkdsaGRHVlFjbTl3WVdkaGRHbHZibE4wYjNCd1pXUWlMQ0pwYzBSbFptRjFiSFJRY21WMlpXNTBaV1FpTENKamNtVmhkR1ZGZG1WdWRDSXNJbWx1YVhSRmRtVnVkQ0lzSWtOMWMzUnZiVVYyWlc1MElpd2lZMkZ1WTJWc1lXSnNaU0lzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpWld4bGJXVnVkRTFoY0NJc0lrUmhkR0VpTENKcGJuTjBZVzVqWlUxaGNDSXNJbk5wZW1VaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSm1jbTl0SWl3aWNtVnRiM1psSWl3aVpHVnNaWFJsSWl3aVFtRnpaVU52YlhCdmJtVnVkQ0lzSW1OdmJuTjBjblZqZEc5eUlpd2lYMlZzWlcxbGJuUWlMQ0pFUVZSQlgwdEZXU0lzSW1ScGMzQnZjMlVpTENKRlZrVk9WRjlMUlZraUxDSm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpJaXdpY0hKdmNHVnlkSGxPWVcxbElpd2lYM0YxWlhWbFEyRnNiR0poWTJzaUxDSnBjMEZ1YVcxaGRHVmtJaXdpYzNSaGRHbGpJaXdpWjJWMFNXNXpkR0Z1WTJVaUxDSldSVkpUU1U5T0lpd2lSWEp5YjNJaUxDSmxibUZpYkdWRWFYTnRhWE56VkhKcFoyZGxjaUlzSW1OdmJYQnZibVZ1ZENJc0ltMWxkR2h2WkNJc0ltTnNhV05yUlhabGJuUWlMQ0owWVdkT1lXMWxJaXdpWTJ4dmMyVnpkQ0lzSW1kbGRFOXlRM0psWVhSbFNXNXpkR0Z1WTJVaUxDSkJiR1Z5ZENJc0ltTnNiM05sSWl3aVgyUmxjM1J5YjNsRmJHVnRaVzUwSWl3aVpXRmphQ0lzSWxORlRFVkRWRTlTWDBSQlZFRmZWRTlIUjB4RkpEVWlMQ0pDZFhSMGIyNGlMQ0owYjJkbmJHVWlMQ0p1YjNKdFlXeHBlbVZFWVhSaElpd2lkbUZzSWl3aWJtOXliV0ZzYVhwbFJHRjBZVXRsZVNJc0ltTm9jaUlzSW1KMWRIUnZiaUlzSWsxaGJtbHdkV3hoZEc5eUlpd2ljMlYwUkdGMFlVRjBkSEpwWW5WMFpTSXNJbkpsYlc5MlpVUmhkR0ZCZEhSeWFXSjFkR1VpTENKblpYUkVZWFJoUVhSMGNtbGlkWFJsY3lJc0ltUmhkR0Z6WlhRaUxDSndkWEpsUzJWNUlpd2lZMmhoY2tGMElpd2laMlYwUkdGMFlVRjBkSEpwWW5WMFpTSXNJbE5sYkdWamRHOXlSVzVuYVc1bElpd2labWx1WkU5dVpTSXNJbU5vYVd4a2NtVnVJaXdpYldGMFkyaGxjeUlzSW5CaGNtVnVkSE1pTENKaGJtTmxjM1J2Y2lJc0luQnlaWFlpTENKd2NtVjJhVzkxY3lJc0luQnlaWFpwYjNWelJXeGxiV1Z1ZEZOcFlteHBibWNpTENKdVpYaDBSV3hsYldWdWRGTnBZbXhwYm1jaUxDSm1iMk4xYzJGaWJHVkRhR2xzWkhKbGJpSXNJbVp2WTNWellXSnNaWE1pTENKcWIybHVJaXdpWld3aUxDSk9RVTFGSkdJaUxDSkVaV1poZFd4MEpHRWlMQ0pwYm5SbGNuWmhiQ0lzSW10bGVXSnZZWEprSWl3aWMyeHBaR1VpTENKd1lYVnpaU0lzSW5keVlYQWlMQ0owYjNWamFDSXNJa1JsWm1GMWJIUlVlWEJsSkdFaUxDSlBVa1JGVWw5T1JWaFVJaXdpVDFKRVJWSmZVRkpGVmlJc0lrUkpVa1ZEVkVsUFRsOU1SVVpVSWl3aVJFbFNSVU5VU1U5T1gxSkpSMGhVSWl3aVMwVlpYMVJQWDBSSlVrVkRWRWxQVGlJc0lrVldSVTVVWDFOTVNVUWlMQ0pEVEVGVFUxOU9RVTFGWDBGRFZFbFdSU1F5SWl3aVUwVk1SVU5VVDFKZlFVTlVTVlpGWDBsVVJVMGlMQ0pEWVhKdmRYTmxiQ0lzSW5OMWNHVnlJaXdpWDJsMFpXMXpJaXdpWDJsdWRHVnlkbUZzSWl3aVgyRmpkR2wyWlVWc1pXMWxiblFpTENKZmFYTlFZWFZ6WldRaUxDSmZhWE5UYkdsa2FXNW5JaXdpZEc5MVkyaFVhVzFsYjNWMElpd2lkRzkxWTJoVGRHRnlkRmdpTENKMGIzVmphRVJsYkhSaFdDSXNJbDlqYjI1bWFXY2lMQ0pmWjJWMFEyOXVabWxuSWl3aVgybHVaR2xqWVhSdmNuTkZiR1Z0Wlc1MElpd2lYM1J2ZFdOb1UzVndjRzl5ZEdWa0lpd2liV0Y0Vkc5MVkyaFFiMmx1ZEhNaUxDSmZjRzlwYm5SbGNrVjJaVzUwSWl3aVVHOXBiblJsY2tWMlpXNTBJaXdpWDJGa1pFVjJaVzUwVEdsemRHVnVaWEp6SWl3aVJHVm1ZWFZzZENJc0lsOXpiR2xrWlNJc0ltNWxlSFJYYUdWdVZtbHphV0pzWlNJc0ltaHBaR1JsYmlJc0ltTjVZMnhsSWl3aVkyeGxZWEpKYm5SbGNuWmhiQ0lzSWw5MWNHUmhkR1ZKYm5SbGNuWmhiQ0lzSW5ObGRFbHVkR1Z5ZG1Gc0lpd2lkbWx6YVdKcGJHbDBlVk4wWVhSbElpd2lZbWx1WkNJc0luUnZJaXdpWVdOMGFYWmxTVzVrWlhnaUxDSmZaMlYwU1hSbGJVbHVaR1Y0SWl3aVgyaGhibVJzWlZOM2FYQmxJaXdpWVdKelJHVnNkR0Y0SWl3aVgydGxlV1J2ZDI0aUxDSmZZV1JrVkc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5Y3lJc0ltaGhjMUJ2YVc1MFpYSlFaVzVVYjNWamFDSXNJbkJ2YVc1MFpYSlVlWEJsSWl3aVkyeHBaVzUwV0NJc0luUnZkV05vWlhNaUxDSnRiM1psSWl3aVkyeGxZWEpVYVcxbGIzVjBJaXdpYVhSbGJVbHRaeUlzSWw5blpYUkpkR1Z0UW5sUGNtUmxjaUlzSW1selRtVjRkQ0lzSWw5MGNtbG5aMlZ5VTJ4cFpHVkZkbVZ1ZENJc0ltVjJaVzUwUkdseVpXTjBhVzl1VG1GdFpTSXNJblJoY21kbGRFbHVaR1Y0SWl3aVpuSnZiVWx1WkdWNElpd2lYM05sZEVGamRHbDJaVWx1WkdsallYUnZja1ZzWlcxbGJuUWlMQ0poWTNScGRtVkpibVJwWTJGMGIzSWlMQ0pwYm1ScFkyRjBiM0p6SWl3aWNHRnljMlZKYm5RaUxDSmxiR1Z0Wlc1MFNXNTBaWEoyWVd3aUxDSmtaV1poZFd4MFNXNTBaWEoyWVd3aUxDSmthWEpsWTNScGIyNVBjazl5WkdWeUlpd2lYMlJwY21WamRHbHZibFJ2VDNKa1pYSWlMQ0poWTNScGRtVkZiR1Z0Wlc1MFNXNWtaWGdpTENKdVpYaDBSV3hsYldWdWRDSXNJbTVsZUhSRmJHVnRaVzUwU1c1a1pYZ2lMQ0pwYzBONVkyeHBibWNpTENKa2FYSmxZM1JwYjI1aGJFTnNZWE56VG1GdFpTSXNJbTl5WkdWeVEyeGhjM05PWVcxbElpd2lYMjl5WkdWeVZHOUVhWEpsWTNScGIyNGlMQ0owY21sbloyVnlVMnhwWkVWMlpXNTBJaXdpWTI5dGNHeGxkR1ZEWVd4c1FtRmpheUlzSW1GamRHbHZiaUlzSW5KcFpHVWlMQ0pqWVhKdmRYTmxiRWx1ZEdWeVptRmpaU0lzSW5Oc2FXUmxTVzVrWlhnaUxDSmtZWFJoUVhCcFEyeHBZMnRJWVc1a2JHVnlJaXdpWTJGeWIzVnpaV3h6SWl3aVRrRk5SU1JoSWl3aVJHVm1ZWFZzZENRNUlpd2lSR1ZtWVhWc2RGUjVjR1VrT1NJc0lrTk1RVk5UWDA1QlRVVmZVMGhQVnlRM0lpd2lRMHhCVTFOZlRrRk5SVjlEVDB4TVFWQlRSU0lzSWtOTVFWTlRYMDVCVFVWZlEwOU1URUZRVTBsT1J5SXNJa05NUVZOVFgwNUJUVVZmUTA5TVRFRlFVMFZFSWl3aVEweEJVMU5mVGtGTlJWOUVSVVZRUlZKZlEwaEpURVJTUlU0aUxDSlRSVXhGUTFSUFVsOUVRVlJCWDFSUFIwZE1SU1EwSWl3aVEyOXNiR0Z3YzJVaUxDSmZhWE5VY21GdWMybDBhVzl1YVc1bklpd2lYM1J5YVdkblpYSkJjbkpoZVNJc0luUnZaMmRzWlV4cGMzUWlMQ0psYkdWdElpd2labWxzZEdWeVJXeGxiV1Z1ZENJc0ltWnZkVzVrUld4bGJTSXNJbDl6Wld4bFkzUnZjaUlzSWw5cGJtbDBhV0ZzYVhwbFEyaHBiR1J5Wlc0aUxDSmZZV1JrUVhKcFlVRnVaRU52Ykd4aGNITmxaRU5zWVhOeklpd2lYMmx6VTJodmQyNGlMQ0pvYVdSbElpd2ljMmh2ZHlJc0ltRmpkR2wyWlhORVlYUmhJaXdpWVdOMGFYWmxjeUlzSW1OdmJuUmhhVzVsY2lJc0luUmxiWEJCWTNScGRtVkVZWFJoSWl3aVpXeGxiVUZqZEdsMlpTSXNJbVJwYldWdWMybHZiaUlzSWw5blpYUkVhVzFsYm5OcGIyNGlMQ0p6WTNKdmJHeFRhWHBsSWl3aWRISnBaMmRsY2tGeWNtRjVUR1Z1WjNSb0lpd2ljMlZzWldOMFpXUWlMQ0owY21sbloyVnlRWEp5WVhraUxDSnBjMDl3Wlc0aUxDSk9RVTFGSkRraUxDSkZVME5CVUVWZlMwVlpKRElpTENKVFVFRkRSVjlMUlZraUxDSkJVbEpQVjE5VlVGOUxSVmtpTENKQlVsSlBWMTlFVDFkT1gwdEZXU0lzSWxKRlIwVllVRjlMUlZsRVQxZE9JaXdpUlZaRlRsUmZRMHhKUTB0ZlJFRlVRVjlCVUVra015SXNJa1ZXUlU1VVgwdEZXVVJQVjA1ZlJFRlVRVjlCVUVraUxDSkRURUZUVTE5T1FVMUZYMU5JVDFja05pSXNJbE5GVEVWRFZFOVNYMFJCVkVGZlZFOUhSMHhGSkRNaUxDSlRSVXhGUTFSUFVsOU5SVTVWSWl3aVVFeEJRMFZOUlU1VVgxUlBVQ0lzSWxCTVFVTkZUVVZPVkY5VVQxQkZUa1FpTENKUVRFRkRSVTFGVGxSZlFrOVVWRTlOSWl3aVVFeEJRMFZOUlU1VVgwSlBWRlJQVFVWT1JDSXNJbEJNUVVORlRVVk9WRjlTU1VkSVZDSXNJbEJNUVVORlRVVk9WRjlNUlVaVUlpd2lSR1ZtWVhWc2RDUTRJaXdpWkdsemNHeGhlU0lzSW5CdmNIQmxja052Ym1acFp5SXNJbUYxZEc5RGJHOXpaU0lzSWtSbFptRjFiSFJVZVhCbEpEZ2lMQ0pFY205d1pHOTNiaUlzSWw5d2IzQndaWElpTENKZmJXVnVkU0lzSWw5blpYUk5aVzUxUld4bGJXVnVkQ0lzSWw5cGJrNWhkbUpoY2lJc0lsOWtaWFJsWTNST1lYWmlZWElpTENKRVpXWmhkV3gwVkhsd1pTSXNJbWRsZEZCaGNtVnVkRVp5YjIxRmJHVnRaVzUwSWl3aVgyTnlaV0YwWlZCdmNIQmxjaUlzSW1adlkzVnpJaXdpWDJOdmJYQnNaWFJsU0dsa1pTSXNJbkpsWm1WeVpXNWpaVVZzWlcxbGJuUWlMQ0pmWjJWMFVHOXdjR1Z5UTI5dVptbG5JaXdpYVhORWFYTndiR0Y1VTNSaGRHbGpJaXdpWDJkbGRGQnNZV05sYldWdWRDSXNJbkJoY21WdWRFUnliM0JrYjNkdUlpd2lhWE5GYm1RaUxDSmZaMlYwVDJabWMyVjBJaXdpY0c5d2NHVnlSR0YwWVNJc0ltUmxabUYxYkhSQ2MxQnZjSEJsY2tOdmJtWnBaeUlzSWw5elpXeGxZM1JOWlc1MVNYUmxiU0lzSW1sMFpXMXpJaXdpZEc5bloyeGxjeUlzSW1OdmJuUmxlSFFpTENKamIyMXdiM05sWkZCaGRHZ2lMQ0pwYzAxbGJuVlVZWEpuWlhRaUxDSnBjMEZqZEdsMlpTSXNJbk4wYjNCUWNtOXdZV2RoZEdsdmJpSXNJbWRsZEZSdloyZHNaVUoxZEhSdmJpSXNJbU5zWldGeVRXVnVkWE1pTENKa1lYUmhRWEJwUzJWNVpHOTNia2hoYm1Sc1pYSWlMQ0pUUlV4RlExUlBVbDlHU1ZoRlJGOURUMDVVUlU1VUlpd2lVMFZNUlVOVVQxSmZVMVJKUTB0WlgwTlBUbFJGVGxRaUxDSlRZM0p2Ykd4Q1lYSklaV3h3WlhJaUxDSm5aWFJYYVdSMGFDSXNJbVJ2WTNWdFpXNTBWMmxrZEdnaUxDSnBibTVsY2xkcFpIUm9JaXdpWDJScGMyRmliR1ZQZG1WeVJteHZkeUlzSWw5elpYUkZiR1Z0Wlc1MFFYUjBjbWxpZFhSbGN5SXNJbU5oYkdOMWJHRjBaV1JXWVd4MVpTSXNJbDl6WVhabFNXNXBkR2xoYkVGMGRISnBZblYwWlNJc0luTjBlV3hsVUhKdmNDSXNJbk5qY205c2JHSmhjbGRwWkhSb0lpd2lYMkZ3Y0d4NVRXRnVhWEIxYkdGMGFXOXVRMkZzYkdKaFkyc2lMQ0pmY21WelpYUkZiR1Z0Wlc1MFFYUjBjbWxpZFhSbGN5SXNJbUZqZEhWaGJGWmhiSFZsSWl3aWNtVnRiM1psVUhKdmNHVnlkSGtpTENKallXeHNRbUZqYXlJc0ltbHpUM1psY21ac2IzZHBibWNpTENKRVpXWmhkV3gwSkRjaUxDSmpiR0Z6YzA1aGJXVWlMQ0p5YjI5MFJXeGxiV1Z1ZENJc0ltTnNhV05yUTJGc2JHSmhZMnNpTENKRVpXWmhkV3gwVkhsd1pTUTNJaXdpUTB4QlUxTmZUa0ZOUlY5VFNFOVhKRFVpTENKRlZrVk9WRjlOVDFWVFJVUlBWMDRpTENKQ1lXTnJaSEp2Y0NJc0lsOXBjMEZ3Y0dWdVpHVmtJaXdpWDJGd2NHVnVaQ0lzSWw5blpYUkZiR1Z0Wlc1MElpd2lYMlZ0ZFd4aGRHVkJibWx0WVhScGIyNGlMQ0ppWVdOclpISnZjQ0lzSW1OeVpXRjBaVVZzWlcxbGJuUWlMQ0poY0hCbGJtUWlMQ0pFWldaaGRXeDBKRFlpTENKMGNtRndSV3hsYldWdWRDSXNJbUYxZEc5bWIyTjFjeUlzSWtSbFptRjFiSFJVZVhCbEpEWWlMQ0pGVmtWT1ZGOUxSVmtrTnlJc0lsUkJRbDlPUVZaZlFrRkRTMWRCVWtRaUxDSkdiMk4xYzFSeVlYQWlMQ0pmYVhOQlkzUnBkbVVpTENKZmJHRnpkRlJoWWs1aGRrUnBjbVZqZEdsdmJpSXNJbUZqZEdsMllYUmxJaXdpWDJoaGJtUnNaVVp2WTNWemFXNGlMQ0pmYUdGdVpHeGxTMlY1Wkc5M2JpSXNJbVJsWVdOMGFYWmhkR1VpTENKemFHbG1kRXRsZVNJc0lrNUJUVVVrTmlJc0lrVlRRMEZRUlY5TFJWa2tNU0lzSWtSbFptRjFiSFFrTlNJc0lrUmxabUYxYkhSVWVYQmxKRFVpTENKRlZrVk9WRjlJU1VSRVJVNGtNeUlzSWtWV1JVNVVYMU5JVDFja015SXNJa1ZXUlU1VVgxSkZVMGxhUlNJc0lrVldSVTVVWDBOTVNVTkxYMFJKVTAxSlUxTWlMQ0pGVmtWT1ZGOUxSVmxFVDFkT1gwUkpVMDFKVTFNa01TSXNJa1ZXUlU1VVgwMVBWVk5GUkU5WFRsOUVTVk5OU1ZOVElpd2lRMHhCVTFOZlRrRk5SVjlQVUVWT0lpd2lRMHhCVTFOZlRrRk5SVjlUU0U5WEpEUWlMQ0pEVEVGVFUxOU9RVTFGWDFOVVFWUkpReUlzSWsxdlpHRnNJaXdpWDJScFlXeHZaeUlzSWw5aVlXTnJaSEp2Y0NJc0lsOXBibWwwYVdGc2FYcGxRbUZqYTBSeWIzQWlMQ0pmWm05amRYTjBjbUZ3SWl3aVgybHVhWFJwWVd4cGVtVkdiMk4xYzFSeVlYQWlMQ0pmYVdkdWIzSmxRbUZqYTJSeWIzQkRiR2xqYXlJc0lsOXpZM0p2Ykd4Q1lYSWlMQ0pmYVhOQmJtbHRZWFJsWkNJc0lsOWhaR3AxYzNSRWFXRnNiMmNpTENKZmMyVjBSWE5qWVhCbFJYWmxiblFpTENKZmMyVjBVbVZ6YVhwbFJYWmxiblFpTENKZmMyaHZkMEpoWTJ0a2NtOXdJaXdpWDNOb2IzZEZiR1Z0Wlc1MElpd2lYMmhwWkdWTmIyUmhiQ0lzSW1oMGJXeEZiR1Z0Wlc1MElpd2lhR0Z1Wkd4bFZYQmtZWFJsSWl3aWJXOWtZV3hDYjJSNUlpd2lYM1J5YVdkblpYSkNZV05yWkhKdmNGUnlZVzV6YVhScGIyNGlMQ0pmY21WelpYUkJaR3AxYzNSdFpXNTBjeUlzSW1OMWNuSmxiblJVWVhKblpYUWlMQ0pwYzAxdlpHRnNUM1psY21ac2IzZHBibWNpTENKcGMwSnZaSGxQZG1WeVpteHZkMmx1WnlJc0luQmhaR1JwYm1kTVpXWjBJaXdpY0dGa1pHbHVaMUpwWjJoMElpd2ljMmh2ZDBWMlpXNTBJaXdpWVd4c1VtVmhaSGxQY0dWdUlpd2lUa0ZOUlNRMUlpd2lSR1ZtWVhWc2RDUTBJaXdpUkdWbVlYVnNkRlI1Y0dVa05DSXNJa05NUVZOVFgwNUJUVVZmVTBoUFZ5UXpJaXdpVDFCRlRsOVRSVXhGUTFSUFVpSXNJa1ZXUlU1VVgwaEpSRVJGVGlReUlpd2lUMlptWTJGdWRtRnpJaXdpZG1semFXSnBiR2wwZVNJc0ltSnNkWElpTENKMWNtbEJkSFJ5YVdKMWRHVnpJaXdpVTBGR1JWOVZVa3hmVUVGVVZFVlNUaUlzSWtSQlZFRmZWVkpNWDFCQlZGUkZVazRpTENKaGJHeHZkMlZrUVhSMGNtbGlkWFJsSWl3aVlXeHNiM2RsWkVGMGRISnBZblYwWlV4cGMzUWlMQ0poZEhSeWFXSjFkR1ZPWVcxbElpd2libTlrWlZaaGJIVmxJaXdpY21WblJYaHdJaXdpWVhSMGNtbGlkWFJsVW1WblpYZ2lMQ0p6WVc1cGRHbDZaVWgwYld3aUxDSjFibk5oWm1WSWRHMXNJaXdpWVd4c2IzZE1hWE4wSWl3aWMyRnVhWFJwZW1WR2JpSXNJbU55WldGMFpXUkViMk4xYldWdWRDSXNJa1JQVFZCaGNuTmxjaUlzSW5CaGNuTmxSbkp2YlZOMGNtbHVaeUlzSW1Wc1pXMWxiblJPWVcxbElpd2lZWFIwY21saWRYUmxUR2x6ZENJc0ltRnNiRzkzWldSQmRIUnlhV0oxZEdWeklpd2lhVzV1WlhKSVZFMU1JaXdpVGtGTlJTUTBJaXdpUkVsVFFVeE1UMWRGUkY5QlZGUlNTVUpWVkVWVElpd2lSR1ZtWVhWc2RGUjVjR1VrTXlJc0ltRnVhVzFoZEdsdmJpSXNJblJsYlhCc1lYUmxJaXdpZEdsMGJHVWlMQ0prWld4aGVTSXNJbU4xYzNSdmJVTnNZWE56SWl3aWMyRnVhWFJwZW1VaUxDSkJkSFJoWTJodFpXNTBUV0Z3SWl3aVFWVlVUeUlzSWxSUFVDSXNJbEpKUjBoVUlpd2lRazlVVkU5Tklpd2lURVZHVkNJc0lrUmxabUYxYkhRa015SXNJbUZ5WldFaUxDSmljaUlzSW1OdmJDSXNJbU52WkdVaUxDSmthWFlpTENKbGJTSXNJbWh5SWl3aWFERWlMQ0pvTWlJc0ltZ3pJaXdpYURRaUxDSm9OU0lzSW1nMklpd2lhVzFuSWl3aWJHa2lMQ0p2YkNJc0luQWlMQ0p3Y21VaUxDSnpJaXdpYzIxaGJHd2lMQ0p6Y0dGdUlpd2ljM1ZpSWl3aWMzVndJaXdpYzNSeWIyNW5JaXdpZFNJc0luVnNJaXdpUlhabGJuUWtNaUlzSWtoSlJFVWlMQ0pJU1VSRVJVNGlMQ0pUU0U5WElpd2lVMGhQVjA0aUxDSkpUbE5GVWxSRlJDSXNJa05NU1VOTElpd2lSazlEVlZOSlRpSXNJa1pQUTFWVFQxVlVJaXdpVFU5VlUwVkZUbFJGVWlJc0lrMVBWVk5GVEVWQlZrVWlMQ0pEVEVGVFUxOU9RVTFGWDBaQlJFVWtNaUlzSWtOTVFWTlRYMDVCVFVWZlUwaFBWeVF5SWl3aVNFOVdSVkpmVTFSQlZFVmZVMGhQVnlJc0lraFBWa1ZTWDFOVVFWUkZYMDlWVkNJc0lsTkZURVZEVkU5U1gxUlBUMHhVU1ZCZlNVNU9SVklpTENKVFJVeEZRMVJQVWw5TlQwUkJUQ0lzSWtWV1JVNVVYMDFQUkVGTVgwaEpSRVVpTENKVVVrbEhSMFZTWDBoUFZrVlNJaXdpVkZKSlIwZEZVbDlHVDBOVlV5SXNJbFJ2YjJ4MGFYQWlMQ0pmYVhORmJtRmliR1ZrSWl3aVgzUnBiV1Z2ZFhRaUxDSmZhRzkyWlhKVGRHRjBaU0lzSWw5aFkzUnBkbVZVY21sbloyVnlJaXdpZEdsd0lpd2lYM05sZEV4cGMzUmxibVZ5Y3lJc0ltVnVZV0pzWlNJc0ltUnBjMkZpYkdVaUxDSjBiMmRuYkdWRmJtRmliR1ZrSWl3aVgybHVhWFJwWVd4cGVtVlBia1JsYkdWbllYUmxaRlJoY21kbGRDSXNJbU5zYVdOcklpd2lYMmx6VjJsMGFFRmpkR2wyWlZSeWFXZG5aWElpTENKZlpXNTBaWElpTENKZmJHVmhkbVVpTENKblpYUlVhWEJGYkdWdFpXNTBJaXdpWDJocFpHVk5iMlJoYkVoaGJtUnNaWElpTENKZlpHbHpjRzl6WlZCdmNIQmxjaUlzSW1selYybDBhRU52Ym5SbGJuUWlMQ0p6YUdGa2IzZFNiMjkwSWl3aWFYTkpibFJvWlVSdmJTSXNJbWRsZEZScGRHeGxJaXdpZEdsd1NXUWlMQ0p3Y21WbWFYZ2lMQ0ptYkc5dmNpSXNJbkpoYm1SdmJTSXNJbWRsZEVWc1pXMWxiblJDZVVsa0lpd2laMlYwVlVsRUlpd2lZWFIwWVdOb2JXVnVkQ0lzSWw5blpYUkJkSFJoWTJodFpXNTBJaXdpWDJGa1pFRjBkR0ZqYUcxbGJuUkRiR0Z6Y3lJc0lsOXlaWE52YkhabFVHOXpjMmxpYkdWR2RXNWpkR2x2YmlJc0luQnlaWFpJYjNabGNsTjBZWFJsSWl3aVgyTnNaV0Z1Vkdsd1EyeGhjM01pTENKelpYUkRiMjUwWlc1MElpd2lYM05oYm1sMGFYcGxRVzVrVTJWMFEyOXVkR1Z1ZENJc0ltTnZiblJsYm5RaUxDSjBaVzF3YkdGMFpVVnNaVzFsYm5RaUxDSnpaWFJGYkdWdFpXNTBRMjl1ZEdWdWRDSXNJblJsZUhSRGIyNTBaVzUwSWl3aWRYQmtZWFJsUVhSMFlXTm9iV1Z1ZENJc0lsOW5aWFJFWld4bFoyRjBaVU52Ym1acFp5SXNJbDlvWVc1a2JHVlFiM0J3WlhKUWJHRmpaVzFsYm5SRGFHRnVaMlVpTENKZloyVjBRbUZ6YVdORGJHRnpjMUJ5WldacGVDSXNJbVYyWlc1MFNXNGlMQ0psZG1WdWRFOTFkQ0lzSWw5bWFYaFVhWFJzWlNJc0ltOXlhV2RwYm1Gc1ZHbDBiR1ZVZVhCbElpd2laR0YwWVVGMGRISnBZblYwWlhNaUxDSmtZWFJoUVhSMGNpSXNJbUpoYzJsalEyeGhjM05RY21WbWFYaFNaV2RsZUNJc0luUmhZa05zWVhOeklpd2lkRzlyWlc0aUxDSjBRMnhoYzNNaUxDSkVaV1poZFd4MEpESWlMQ0pFWldaaGRXeDBWSGx3WlNReUlpd2lSWFpsYm5Ra01TSXNJbEJ2Y0c5MlpYSWlMQ0pmWjJWMFEyOXVkR1Z1ZENJc0lrNUJUVVVrTWlJc0lrUmxabUYxYkhRa01TSXNJa1JsWm1GMWJIUlVlWEJsSkRFaUxDSkRURUZUVTE5T1FVMUZYMEZEVkVsV1JTUXhJaXdpVTBWTVJVTlVUMUpmVEVsT1MxOUpWRVZOVXlJc0lrMUZWRWhQUkY5UVQxTkpWRWxQVGlJc0lsTmpjbTlzYkZOd2VTSXNJbDl6WTNKdmJHeEZiR1Z0Wlc1MElpd2lYMjltWm5ObGRITWlMQ0pmZEdGeVoyVjBjeUlzSWw5aFkzUnBkbVZVWVhKblpYUWlMQ0pmYzJOeWIyeHNTR1ZwWjJoMElpd2lYM0J5YjJObGMzTWlMQ0p5WldaeVpYTm9JaXdpWVhWMGIwMWxkR2h2WkNJc0ltOW1abk5sZEUxbGRHaHZaQ0lzSW05bVpuTmxkRUpoYzJVaUxDSmZaMlYwVTJOeWIyeHNWRzl3SWl3aVgyZGxkRk5qY205c2JFaGxhV2RvZENJc0luUmhjbWRsZEZObGJHVmpkRzl5SWl3aWRHRnlaMlYwUWtOU0lpd2lhWFJsYlNJc0lsOW5aWFJQWm1aelpYUklaV2xuYUhRaUxDSnBibTVsY2tobGFXZG9kQ0lzSW0xaGVGTmpjbTlzYkNJc0lsOWhZM1JwZG1GMFpTSXNJbDlqYkdWaGNpSXNJbkYxWlhKcFpYTWlMQ0pzYVc1cklpd2liR2x6ZEVkeWIzVndJaXdpYm1GMlNYUmxiU0lzSW5Od2VTSXNJa05NUVZOVFgwNUJUVVZmUVVOVVNWWkZJaXdpUTB4QlUxTmZUa0ZOUlY5R1FVUkZKREVpTENKRFRFRlRVMTlPUVUxRlgxTklUMWNrTVNJc0lsTkZURVZEVkU5U1gwRkRWRWxXUlNJc0lsTkZURVZEVkU5U1gwRkRWRWxXUlY5VlRDSXNJbFJoWWlJc0lteHBjM1JGYkdWdFpXNTBJaXdpYVhSbGJWTmxiR1ZqZEc5eUlpd2lhR2xrWlVWMlpXNTBJaXdpWTI5dGNHeGxkR1VpTENKaFkzUnBkbVVpTENKcGMxUnlZVzV6YVhScGIyNXBibWNpTENKZmRISmhibk5wZEdsdmJrTnZiWEJzWlhSbElpd2laSEp2Y0dSdmQyNURhR2xzWkNJc0ltUnliM0JrYjNkdVJXeGxiV1Z1ZENJc0ltUnliM0JrYjNkdUlpd2lRMHhCVTFOZlRrRk5SVjlJU1VSRklpd2lRMHhCVTFOZlRrRk5SVjlUU0U5WElpd2lRMHhCVTFOZlRrRk5SVjlUU0U5WFNVNUhJaXdpWVhWMGIyaHBaR1VpTENKVWIyRnpkQ0lzSWw5b1lYTk5iM1Z6WlVsdWRHVnlZV04wYVc5dUlpd2lYMmhoYzB0bGVXSnZZWEprU1c1MFpYSmhZM1JwYjI0aUxDSmZZMnhsWVhKVWFXMWxiM1YwSWl3aVgyMWhlV0psVTJOb1pXUjFiR1ZJYVdSbElpd2lYMjl1U1c1MFpYSmhZM1JwYjI0aUxDSnBjMGx1ZEdWeVlXTjBhVzVuSWl3aVEyOXZhMmxsU0dWc2NHVnlJaXdpWXlJc0ltTnZiMnRwWlNJc0ltUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDSXNJbTl3ZEhNaUxDSmtZWGx6SWl3aVpXNTBjbWxsY3lJc0ltRmpZM1Z0ZFd4aGRHVmtVM1J5SWl3aWF5SXNJbVZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ0lzSW1kbGRFcFRUMDRpTENKS1UwOU9JaXdpY0dGeWMyVWlMQ0p6WlhSS1UwOU9JaXdpYzNSeWFXNW5hV1o1SWl3aVEwOU1YMU5QVWxSSlRrY2lMQ0pEVDB4ZlVrVlRTVnBGUkNJc0lrTlBURjlUU0U5WFgwaEpSRVVpTENKRFQweGZVa1ZQVWtSRlVpSXNJa2RTU1VSZlJFRlVRU0lzSWs5T1gwNUZXRlJmVWtWRFQxSkVJaXdpVDA1ZlVGSkZWbDlTUlVOUFVrUWlMQ0pQVGw5VFFWWkZYMUpGUTA5U1JDSXNJazlPWDBSRlRFVlVSVjlTUlVOUFVrUWlMQ0pQVGw5TVFWTlVYMUpGUTA5U1JDSXNJazlPWDBaSlVsTlVYMUpGUTA5U1JDSXNJazlPWDBGRVJGOVNSVU5QVWtRaUxDSlBUbDlHUlZSRFNGOVNSVU5QVWtRaUxDSlBUbDlHUlZSRFNGOVNSVU5QVWtSZlJWSlNUMUlpTENKUFRsOUdSVlJEU0Y5SFVrbEVYMUpGUTA5U1JDSXNJazlPWDBaRlZFTklYMGRTU1VSZlVrVkRUMUpFWDBWU1VrOVNJaXdpVDA1ZlRrRldTVWRCVkVsT1IxOVNSVU5QVWtRaUxDSlBUbDlIVWtsRVgxVlFSRUZVUlVRaUxDSlBUbDlUUVZaRlgwVlNVazlTSWl3aVQwNWZVMDlTVkVsT1IxOVNSVkZWUlZOVVJVUWlMQ0pQVGw5RFQweFRYMUpGVDFKRVJWSkZSQ0lzSWs5T1gwZFNTVVJmUkVGVVFWOUNUMVZPUkNJc0lrOU9YMGRTU1VSZlEwOU9Sa2xIWDFWUVJFRlVSVVFpTENKUFRsOVFRVWRGWDFKRlFVUlpJaXdpVDA1ZlVrOVhYMVZRUkVGVVJVUWlMQ0pQVGw5R1NVVk1SRjlWVUVSQlZFVkVJaXdpVDA1ZlVrOVhYMFJQVlVKTVJWOURURWxEUzBWRUlpd2laR0YwWVVWMlpXNTBjMU5sY25acFkyVWlMQ0pqWVd4c1ltRmphM01pTENKeVpXZHBjM1JsY2xkcGJsQnZjRk4wWVhSbElpd2liMjV3YjNCemRHRjBaU0lzSW1VaUxDSmxkbVZ1ZEVSaGRHRWlMQ0pzYjJjaUxDSmxkaUlzSWtWMlpXNTBSR0YwWVNJc0lsTnJhWEJRZFhOb0lpd2lSR0YwWVZOdmRYSmpaVTVoYldVaUxDSkZiV2wwSWl3aVlYQndSR0YwWVVWMlpXNTBjeUlzSW1WMlpXNTBUbUZ0WlNJc0luTnZkWEpqWlNJc0ltVjJaVzUwUVhKbmN5SXNJbU5pSWl3aVJYWmxiblJPWVcxbElpd2lWbVZ5YVdaNVJHRjBZVk52ZFhKalpVNWhiV1VpTENKRFlXeHNZbUZqYXlJc0lsVnVjM1ZpYzJOeWFXSmxJaXdpYlc5a1pXd2lMQ0ptYVd4MFpYSmxaQ0lzSWt0bGVTSXNJbE4xWW5OamNtbGlaU0lzSW1Ga1pFbDBaVzBpTENKbGVIQnBjbmtpTENKblpYUlVhVzFsSWl3aWMyVnpjMmx2YmxOMGIzSmhaMlVpTENKelpYUkpkR1Z0SWl3aVlYQndaVzVrU1hSbGJTSXNJbUZ3Y0dWdVpFWmhZM1J2Y25raUxDSm5aWFJKZEdWdFVtRjNJaXdpYm1WM1ZtRnNkV1VpTENKRVlYUmxJaXdpWTNKbFlYUmxSWGh3YVhKNVMyVjVJaXdpWlc1MGNua2lMQ0puWlhSSmRHVnRJaXdpYm05M0lpd2ljbVZ0YjNabFNYUmxiU0lzSW5KbGJXOTJaVUZzYkNJc0ltSnpSR0YwWVZSaFlteGxSR2x6WTI5MlpYSjVVMlZ5ZG1salpTSXNJa1JoZEdGVVlXSnNaWE1pTENKQlpHUWlMQ0prWVhSaGRHRmliR1VpTENKSFpYUkJiR3dpTENKa2RDSXNJbWx6VW1WaFpFOXViSGtpTENKa1lYUmhVMjkxY21ObFRtRnRaU0lzSW1ScGNuUjVVbVZqYjNKa2N5SXNJa2RsZEVKNVJGTk9ZVzFsSWl3aVpITk9ZVzFsSWl3aVlYQndRV04wYVc5dWN5SXNJbTV2ZEdsbWVVeHBjM1JsYm1WeWN5SXNJbVYyWlc1MFZIbHdaU0lzSW5CaGVXeHZZV1FpTENKaFpHUkZkbVZ1ZEVoaGJtUnNaWElpTENKblpYUkhjbWxrVTJWMGRHbHVaM01pTENKbmNtbGtTV1FpTENKZlpHRjBZVk52ZFhKalpVNWhiV1VpTENKZmFYTlNaV0ZrVDI1c2VTSXNJbWRsZEVOemN5SXNJblFpTENKelpYUkRjM01pTENKcGMwVnRjSFI1VDJKcUlpd2ljSEp2Y0hNaUxDSmZkR2hwY3lJc0ltZGxkRkJ5YjNBaUxDSm1hVzVrUld4bGJXVnVkSE1pTENKbWFXNWtRbmxKWkNJc0ltbGtJaXdpY21WdGIzWmxSV3hsYldWdWRDSXNJbkJoY21WdWRFVnNaVzFsYm5RaUxDSnlaVzF2ZG1WRGFHbHNaQ0lzSW1Ga1pFTnNZWE56SWl3aVkzTnpRMnhoYzNNaUxDSnlaVzF2ZG1WRGJHRnpjeUlzSW1oaGMwTnNZWE56SWl3aWMyVjBWR1Y0ZENJc0luUjRkQ0lzSW1sdWJtVnlWR1Y0ZENJc0ltZGxkRlJsZUhRaUxDSndkWE5vVkc5QmNuSmhlU0lzSW1Gd2NHVnVaRU5vYVd4a0lpd2lZMnh2Ym1VaUxDSkNVMFJoZEdGVVlXSnNaVUpoYzJVaUxDSmpiRzl1WlU1dlpHVWlMQ0pqWXlJc0luTm9RMnh2Ym1VaUxDSmpjbVZoZEdVaUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0ltTm9hV3hrY21WdVRtOWtaWE1pTENKM2NtRndjR1Z5SWl3aWJtOWtaWE1pTENKaFpHUkVjbUZuU0dGdVpHeGxjbk1pTENKa2NtRm5TR0Z1Wkd4bGNuTWlMQ0prY21GblUzUmhjblFpTENKa2NtRm5UR1ZoZG1VaUxDSmtjbUZuUlc1MFpYSWlMQ0prY21GblQzWmxjaUlzSW1SeVlXZEZibVFpTENKa2NtOXdJaXdpYzJsaWJHbHVaM01pTENKamFHbHNaRTV2WkdWeklpd2libVFpTENKMFpYaDBJaXdpYVhOVFpXeGxZM1JsWkNJc0ltUmhkR0ZVZVhCbElpd2ljSEp2Y0U1aGJXVWlMQ0pwYzB0bGVTSXNJbVJoZEdGVGIzVnlZMlVpTENKamIyeFRjR0Z1SWl3aWNtOTNVM0JoYmlJc0luTmxiR1ZqZEc5eVJHRjBZVU5DSWl3aWMyVnNaV04wYjNKRGIyeHpJaXdpVG1GdFpTSXNJa1JoZEdGVWVYQmxJaXdpVjJsa2RHZ2lMQ0pRY205d1RtRnRaU0lzSWtselMyVjVJaXdpUkdGMFlWTnZkWEpqWlNJc0lrTnZiRk53WVc0aUxDSlNiM2RUY0dGdUlpd2lVMlZzWldOMGIzSkVZWFJoUTBJaUxDSlRaV3hsWTNSdmNrTnZiSE1pTENKcGJtbDBSR0YwWVNJc0ltbHpVbVZ0YjNSbElpd2lkWEpzSWl3aVoyVjBVR0ZuWlU5bVpteHBibVVpTENKd1lXZGxJaXdpWjJWMFVHRm5aVTltWm14cGJtVkRRaUlzSW1OdmJuUmhhVzVsY2tsa0lpd2lZMjlzUkdWbWFXNXBkR2x2YmlJc0ltbHpVbVZoWkc5dWJIa2lMQ0psYm1GaWJHVkpibVpwYm1sMFpWTmpjbTlzYkNJc0ltTmhZMmhsVW1WemNHOXVjMlZ6SWl3aWNHRm5aVWx1WkdWNElpd2ljR0ZuWlZOcGVtVWlMQ0owYjNSaGJGSmxZMjl5WkhNaUxDSjBiM1JoYkZCaFoyVnpJaXdpWTJWcGJDSXNJbkJoWjJsdVowMWxkR0ZFWVhSaElpd2libVY0ZEZCaFoyVkRZV3hzWW1GamF5SXNJbWhsWVdSbGNuTWlMQ0p5WldOdmNtUkpaQ0lzSW5KbGJtUmxjaUlzSWtsdWNIVjBWSGx3WlNJc0lraFVUVXhKYm5CMWRFVnNaVzFsYm5RaUxDSmphR1ZqYTJWa0lpd2lkbUZzZFdWQmMwNTFiV0psY2lJc0ltTm9ZVzVuWlNJc0luSmxZV1JQYm14NUlpd2lTRlJOVEZObGJHVmpkRVZzWlcxbGJuUWlMQ0poWkdSRWIzVmliR1ZEYkdsamEwVjJaVzUwSWl3aWMyTWlMQ0pDVTBSaGRHRlVZV0pzWlVOb1pXTnJRbTk0SWl3aVFsTkVZWFJoVkdGaWJHVkpibkIxZENJc0ltbHpTR1ZoWkdWeUlpd2lRbE5FWVhSaFZHRmliR1ZEYjJ4RVpXWnBibWwwYVc5dUlpd2laMlYwUTJWc2JGUmxlSFFpTENKQ1UwUmhkR0ZVWVdKc1pVTmxiR3dpTENKallXTm9aU0lzSW01dmRHbG1lVkpsYzNCdmJuTmxJaXdpY21WeGRXVnpkQ0lzSW1abGRHTm9JaXdpY21WemNHOXVjMlVpTENKcWMyOXVJaXdpWTJGMFkyZ2lMQ0p1YjJacFpubEZjbkp2Y2lJc0ltWmxkR05vVW1WamIzSmtSWFpsYm5RaUxDSk5aWFJoUkdGMFlTSXNJa0pUUkdGMFlWUmhZbXhsVUdGbmFXNW5UV1YwWVVSaGRHRWlMQ0p0WlhSaFJHRjBZU0lzSW1WeWNrVjJaVzUwSWl3aVVtVmpiM0prU1dRaUxDSnNhWE4wU1dRaUxDSndZV2RsY2lJc0luQmhaMlZNYVhOMElpd2lhSEpsWmlJc0ltTnNaV0Z5SWl3aWNtVndiR0ZqWlVOb2FXeGtjbVZ1SWl3aVozSnBaRVZzWlcxbGJuUWlMQ0pvZEhSd1EyeHBaVzUwSWl3aWMxOWhjbVZoSWl3aWIySnpaWEoyWlhJaUxDSmpkWEp5Wlc1MFVHRm5aU0lzSW1sdWFYUk5aWFJoUkdGMFlTSXNJbTlpYzJWeWRtVnlRMElpTENKelpXNWtaWElpTENKcGMwbHVkR1Z5YzJWamRHbHVaeUlzSW05aWMyVnlkbVVpTENKMWJtOWljMlZ5ZG1VaUxDSnpZM0p2Ykd4QmNtVmhJaXdpY205dmRFMWhjbWRwYmlJc0luUm9jbVZ6YUc5c1pDSXNJblJ5WVdOclZtbHphV0pwYkdsMGVTSXNJa2x1ZEdWeWMyVmpkR2x2Yms5aWMyVnlkbVZ5SWl3aWNtOTNjeUlzSW1acGJtUkpkR1Z0SWl3aVlXUmtRV04wYVc5dUlpd2lhV052YmlJc0ltSjBiaUlzSW1kbGRFSjFkSFJ2YmlJc0ltRmtaRVJsYkdWMFpVRmpkR2x2YmlJc0ltRmtaRTVsZDFKbFkyOXlaRUZqZEdsdmJpSXNJbUZrWkVkeWFXUlRaWFIwYVc1bmMwRmpkR2x2YmlJc0ltRndjR1Z1WkVsamIyNGlMQ0puWlhSSlkyOXVJaXdpYVdOdmJsUjVjR1VpTENKcGJuQjFkRlI1Y0dVaUxDSkNVMFJoZEdGVVlXSnNaVlJsZUhSSmJuQjFkQ0lzSW05d2RDSXNJbE5sYkdWamRFOXdkR2x2Ym5NaUxDSkNVMFJoZEdGVVlXSnNaVk5sYkdWamRFOXdkR2x2YmlJc0ltOXdkRU5zYjI1bElpd2lRbE5FWVhSaFZHRmliR1ZUWld4bFkzUWlMQ0pKWTI5dUlpd2lTR0Z1Wkd4bGNpSXNJbUZrWkVOc2FXTnJTR0Z1Wkd4bGNpSXNJa0pUUkdGMFlWUmhZbXhsUW5WMGRHOXVJaXdpYjI1SmRHVnRVMlZzWldOMFpXUWlMQ0puY21sa0lpd2laMlYwVTJWc1pXTjBaV1JTYjNjaUxDSnpaV3hsWTNSbFpFbHVjSFYwSWl3aVoyVjBTVzV3ZFhSeklpd2lhVzV3ZFhRaUxDSjBlSFJGYkdWdFpXNTBJaXdpYzJWc1pXTjBiM0pOYjJSaGJDSXNJa056YzBOc1lYTnpJaXdpUld4bGJXVnVkRWxrSWl3aVVHeGhZMlZJYjJ4a1pYSWlMQ0ppZEc1RmJHVnRaVzUwSWl3aVFuUnVRMnhwWTJzaUxDSkNVMFJoZEdGVVlXSnNaVk5sYkdWamRHOXlJaXdpY0dGeVpXNTBRMjl1ZEdGcGJtVnlTV1FpTENKdGIyUmhiRWxrSWl3aWJXOWtZV3hVYVhSc1pVbGtJaXdpY21WdVpHVnlSM0pwWkNJc0ltMXZaR0ZzSWl3aWNHRnlaVzUwUTI5dWRHRnBibVZ5SWl3aVkyeGxZWEpIY21sa0lpd2lhVzVtYVc1cGRHVlRZM0p2Ykd4bGNpSXNJbVpsZEdOb1IzSnBaRkJoWjJVaUxDSkNVMFJoZEdGVVlXSnNaVVJoZEdGVGIzVnlZMlVpTENKMWNteERZaUlzSW1Keklpd2lRbE5FWVhSaFZHRmliR1ZQY0hScGIyNXpJaXdpWjNKcFpFTnZiSE1pTENKQ1UwUmhkR0ZVWVdKc1pTSXNJbkpsWjJsemRHVnlRMkZzYkdKaFkydHpJaXdpWjNKcFpFRmpkR2x2Ym5NaUxDSjJhWE5wWW14bElpd2lZMlZzYkhNaUxDSmhaR1JEWld4c0lpd2lZMlZzYkNJc0ltRmtaRU5sYkd4eklpd2ljR0Z5Wlc1MFEyeHZibVVpTENKcGMxUmxiWEJzWVhSbFVtOTNJaXdpWTJ4dmJtVlNiM2NpTENKQ1UwUmhkR0ZVWVdKc1pWSnZkeUlzSW1Oc2IyNWxRMlZzYkNJc0ltWnZZM1Z6VW05M0lpd2lhVzV3ZFhSeklpd2lhV1I0SWl3aVkzSmxZWFJsU1c1d2RYUkdiM0lpTENKa2N5SXNJbWRwWkNJc0luTlhhVzVrYjNjaUxDSkNVMFJoZEdGVVlXSnNaVk5sYkdWamRHOXlWMmx1Wkc5M0lpd2ljMlZzWldOMGIzSnpJaXdpUW5SdVNXUWlMQ0p5WldGa2IyNXNlU0lzSW5Sa0lpd2lZM0psWVhSbFNHVmhaR1Z5Um05eUlpd2lkR2dpTENKblpYUldhWE5wWW14bFNXNXdkWFJ6SWl3aVoyVjBVbTkzUkdGMFlVVjRkQ0lzSW5KdmQwbHVjSFYwY3lJc0luSmxZMjl5WkNJc0luSnZkMGx1Y0hWMElpd2lZMlZzYkZCeWIzQk9ZVzFsSWl3aWJXOWtaV3hPWVcxbElpd2laMlYwVW05M1NXNWtaWGdpTENKeWIzZEpibVJsZUNJc0ltZGxkRkp2ZDBSaGRHRWlMQ0p5YjNkRFlYUWlMQ0p5YjNkRFlYUmxaMjl5ZVNJc0ltbHpVbTkzUkdseWRIa2lMQ0poWkdSU2IzY2lMQ0p5YjNjaUxDSm5aWFJPWlhoMFVtOTNTVzVrWlhnaUxDSnlWSGx3WlNJc0ltZHlhV1JJWldGa1pYSWlMQ0puWlhSV2FYTnBZbXhsVW05M2N5SXNJbWRsZEVkeWFXUlVhWFJzWlhOU2IzY2lMQ0pDVTBSaGRHRlVZV0pzWlZKdmQwTnZiR3hsWTNScGIyNGlMQ0p5YjNkVGFXSnNhVzVuY3lJc0ltZGxkRlJsYlhCc1lYUmxVbTkzSWl3aVoyVjBSR2x5ZEhsU2IzZHpJaXdpWjJWMFJHbHlkSGxTWldOdmNtUnpJaXdpWkdseWRIbFNiM2R6SWl3aWNtVmpiM0prY3lJc0ltZGxkRUZzYkZKbFkyOXlaSE1pTENKdFlYSnJSR1ZzWlhSbFpDSXNJbXhoYzNSVGFXSnNhVzVuSWl3aWNtVnRiM1psVW05M0lpd2ljM0JzYVdObElpd2lhR1ZoWkNJc0lrSlRSR0YwWVZSaFlteGxTR1ZoWkdWeUlpd2lRbE5FWVhSaFZHRmliR1ZDYjJSNUlpd2lRbE5FWVhSaFZHRmliR1ZUWld4bFkzUnZjbGRwYm1SdmQwTnZiR3hsWTNScGIyNGlMQ0p3WVdkcGJtRjBiM0lpTENKQ1UwUmhkR0ZVWVdKc1pWQmhaMmx1WVhScGIyNGlMQ0pDVTBSaGRHRlVZV0pzWlZCaFoybHVZWFJwYjI1UGNIUnBiMjV6SWl3aWNHRm5hVzVoZEc5eVEyRnNiR0poWTJzaUxDSnpaWE56YVc5dVEyRmphR1VpTENKVFpYTnphVzl1VTNSdmNtRm5aVk5sY25acFkyVWlMQ0pDVTBSaGRHRlVZV0pzWlVoMGRIQkRiR2xsYm5RaUxDSmthWE5qYjNabGNtRmliR1VpTENKamIyNTBZV2x1WlhKRmJHVnRaVzUwSWl3aWMyVjBSR2x6WTI5MlpYSmhZbXhsSWl3aVlXUmtTR1ZoWkdWeUlpd2lZV1JrUW05a2VTSXNJbk5sZEhScGJtZHpJaXdpWjNKcFpFaGxZV1JsY2xKdmR5SXNJbWR5YVdSQ2IyUjVVbTkzSWl3aVozSnBaRU52YkhWdGJuTWlMQ0poY0hCc2VVTnZiRTl5WkdWeWFXNW5JaXdpYldnaUxDSnRZWEpyWlhJaUxDSkNVMFJoZEdGVVlXSnNaVTFoY210bGNpSXNJbTFpSWl3aVoyTWlMQ0pqYjJ4VFpYUjBhVzVuY3lJc0ltRmtaRk52Y25ScGJtY2lMQ0poY0hCc2VVTnZiRk5sZEhScGJtZHpJaXdpWVdSa1FXTjBhVzl1Y3lJc0ltRmtaRWx1Wm1sdWFYUmxVMk55YjJ4c0lpd2liV1JoZEdFaUxDSm1aWFJqYUVSaGRHRkZkbVZ1ZENJc0lrSlRSR0YwWVZSaFlteGxTVzVtYVc1cGRHVlRZM0p2Ykd3aUxDSkNVMFJoZEdGVVlXSnNaVUZqZEdsdmJuTWlMQ0poWkdSRmJYQjBlVkp2ZHlJc0ltRnpZeUlzSWtGell5SXNJblJsYlhCc1lYUmxVbTkzSWl3aVZtbHphV0pzWlNJc0ltOXlaR1Z5WldSRGIyeHpJaXdpWTI5c1JHVm1JaXdpWTI5c1UyVjBkR2x1WnlJc0lsQnZjMmwwYVc5dUlpd2lZbWx1WkVSaGRHRlRiM1Z5WTJVaUxDSndZV2RsWkVSaGRHRWlMQ0pzWVhOMFVtOTNJaXdpWVdSa1RtVjNVbTkzSWl3aVltbHVaRkJoWjJsdVlYUnZjaUlzSW5CaFoybHVZWFJwYjI1TmIyUmxiQ0lzSW5KdmQwUmhkR0VpTENKcGMwVjRhWE4wYVc1blVtVmpiM0prSWl3aWNtOTNUblZ0WW1WeUlpd2liMnhrU1dRaUxDSmpaV3hzVm1Gc0lpd2laR0YwWlNJc0luUnZSR0YwWlVScGMzQnNZWGxHYjNKdFlYUWlMQ0owYjI5c2RHbHdJaXdpWjNKcFpGVndaR0YwWlVWMlpXNTBJaXdpUjNKcFpDSXNJbkp2ZDFWd1pHRjBaV1JGZG1WdWRDSXNJbEp2ZHlJc0ltWnBaV3hrVlhCa1lXVmtSWFpsYm5RaUxDSkdhV1ZzWkNJc0luWnBjMmxpYkdWSmJuQjFkSE1pTENKdmJrbHVjSFYwUzJWNVJHOTNiaUlzSW1SaGVTSXNJbWRsZEVSaGRHVWlMQ0p0YjI1MGFDSXNJbWRsZEUxdmJuUm9JaXdpWjJWMFJuVnNiRmxsWVhJaUxDSjBiMVJwYldWRWFYTndiR0Y1Um05eWJXRjBJaXdpYUc5MWNpSXNJbWRsZEVodmRYSnpJaXdpWjJWMFRXbHVkWFJsY3lJc0luZG9hV05vSWl3aWRtbHphV0pzWlZKdmQzTWlMQ0pzWVhOMFVtOTNTVzVrWlhnaUxDSmxiWEIwZVZKdmR5SXNJbU55WldGMFpVVnRjSFI1VW05M1JHRjBZU0lzSW05dVNHVmhaR1Z5VG1WNGRDSXNJbVpsZEdOb1IzSnBaQ0lzSW5KbGMyVjBVMjl5ZEdsdVp5SXNJa0pUUkdGMFlWUmhZbXhsU0hSMGNFTnNhV1Z1ZEU5d2RHbHZibk1pTENKdmJsTmhkbVZTWldOdmNtUWlMQ0oyZUNJc0ltOXVVMkYyWlVWeWNtOXlJaXdpY21WemNHOXVjMlZLVTA5T0lpd2laWEp5YjNKeklpd2lhVzBpTENKamJHbGxiblJKYm1SbGVDSXNJbk5sY25abGNrbHVaR1Y0SWl3aVpYSnliM0pTYjNjaUxDSm5aWFJTYjNkQ2VVbHVaR1Y0SWl3aWFXNXdkWFJGY25KdmNpSXNJbWx1Y0NJc0ltRnNiRVZ5Y205eWN5SXNJbVZ5SWl3aWMyOXlkRlJoWW14bElpd2lZWE5qV0NJc0ltZGxkRU5sYkd4V1lXeDFaU0lzSW5SeUlpd2lkakVpTENKMk1pSXNJbXh2WTJGc1pVTnZiWEJoY21VaUxDSmpiMjVtUlhabGJuUWlMQ0pEZFhKeVpXNTBRMjlzSWl3aVFXTjBhVzl1SWl3aVkyOXNVbVZ2Y21SbGNrVjJaVzUwSWl3aWIyNVRiM0owYVc1blVtVnhkV1Z6ZENJc0luUm9lQ0lzSW05dVEyOXNjMUpsYjNKa1pYSmxaQ0lzSW5abGNtbG1lVVJUVG1GdFpTSXNJbTl1Um1WMFkyaEVZWFJoSWl3aWJXUWlMQ0p2YmtabGRHTm9SR0YwWVVWeWNtOXlJaXdpYjI1SGNtbGtRMjl1Wm1sbmRYSmhkR2x2YmtOb1lXNW5aV1FpTENKdmJrZHlhV1JFWVhSaFFtOTFibVFpTENKamIyNW1hV2QxY21GaWJHVkhjbWxrSWl3aWJXOWtaV3hVWlcxd2JHRjBaU0lzSW0xdlpHRnNSV3hsYlNJc0ltTnZiSE5NYVhOMElpd2lhR1ZoWkdWeUlpd2lZMjlzYzB4cGMzUkpkR1Z0SWl3aVkyaHJJaXdpWTJoclNXUWlMQ0pqYUd0TVltd2lMQ0pqYUd0RmJHVnRaVzUwSWl3aWFHVmhaR1Z5VW05M0lpd2lZbTlrZVZKdmQzTWlMQ0p5WlhOcGVtRmliR1ZIY21sa0lpd2lZMjlzY3lJc0luUmhZbXhsU0dWcFoyaDBJaXdpWTNKbFlYUmxSR2wySWl3aWMyVjBUR2x6ZEdWdVpYSnpJaXdpZEdGaWJHVWlMQ0p3WVdkbFdDSXNJbU4xY2tOdmJDSXNJbU4xY2tOdmJGZHBaSFJvSWl3aWRHRmliR1ZYYVdSMGFDSXNJbWRsZEZOMGVXeGxWbUZzSWl3aWNHRmtUR1ZtZENJc0luQmhaRkpwWjJoMElpd2ljR0ZrWkdsdVowUnBabVlpTENKaWIzSmtaWEpTYVdkb2RDSXNJbVJwWm1aWUlpd2lZM1Z5YzI5eUlpd2lkWE5sY2xObGJHVmpkQ0lzSW1Wc2JTSXNJbVZ1WVdKc1pVTnZiSFZ0YmxKbGIzSmtaWEpwYm1jaUxDSmtjbUZuWjJGaWJHVWlMQ0p6Y21ORmJHVnRaVzUwSWl3aVkyaHBiR1J6SWl3aWIzQmhZMmwwZVNJc0ltUmxjM1JRWVhKbGJuUWlMQ0prWlhOUVlYSmxiblJEWld4c0lpd2lkRzlKYm1SbGVDSXNJbk55WTFCaGNtVnVkQ0lzSW5OeVkxQmhjbVZ1ZEVObGJHd2lMQ0p5WlU5eVpHVnlJaXdpWkdseVpXTjBhVzl1Y3lJc0lteDBjaUlzSW5KMGJDSXNJbk4zWVhCU2RHd2lMQ0p6ZDJGd1RIUnlJaXdpYzNkaGNDSXNJbUZ5Y2lJc0ltbGhJaXdpYVdJaUxDSjBaVzF3SWl3aVkyOXNjMDlpYWlJc0ltTnZiRUYwZEhJaUxDSkJjMk5sYm1ScGJtY2lMQ0p6WldOMWNtVWlMQ0pUWVcxbFUybDBaU0pkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL2ltYWdlcy9zb3J0X2Rlc2MucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi4vaW1hZ2VzL3NvcnRfYXNjLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi4uL2ltYWdlcy9zb3J0X2JvdGgucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJodG1sIHtcXHJcXG4gIGZvbnQtc2l6ZTogMTRweDtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XFxyXFxuICBodG1sIHtcXHJcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5odG1sIHtcXHJcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogNjBweDtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLnRvb2x0aXAtZXJyb3IgLnRvb2x0aXAtaW5uZXIge1xcclxcbiAgbWF4LXdpZHRoOiAyMDBweDtcXHJcXG4gIHBhZGRpbmc6IC4yNXJlbSAuNXJlbTtcXHJcXG4gIGNvbG9yOiByZWQ7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IC4yNXJlbTtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLnRvb2x0aXAtZXJyb3IgLnRvb2x0aXAtYXJyb3c6OmJlZm9yZSB7XFxyXFxuICBib3JkZXItdG9wLWNvbG9yOiByZWQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlLm5hdlRhYmxlLm5vd3JhcCB0aCwgdGFibGUubmF2VGFibGUubm93cmFwIHRkIHtcXHJcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxyXFxufVxcclxcblxcclxcbnRhYmxlLm5hdlRhYmxlIHRoZWFkIC5zb3J0aW5nX2Rlc2Mge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19hc2Mge1xcclxcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZyB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZywgdGFibGUubmF2VGFibGUgdGhlYWQgLnNvcnRpbmdfYXNjLCB0YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19kZXNjLCB0YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19hc2NfZGlzYWJsZWQsIHRhYmxlLm5hdlRhYmxlIHRoZWFkIC5zb3J0aW5nX2Rlc2NfZGlzYWJsZWQge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUubmF2VGFibGUgdGhlYWQgdGgsIHRhYmxlLm5hdlRhYmxlIHRoZWFkIHRkIHtcXHJcXG4gIHBhZGRpbmc6IDEwcHggMThweDtcXHJcXG4gIC8qIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMTExOyAqL1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCB0aCwgdGFibGUubmF2VGFibGUgdGZvb3QgdGgge1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlLm5hdlRhYmxlIHRoLCB0YWJsZS5uYXZUYWJsZSB0ZCB7XFxyXFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG59XFxyXFxuXFxyXFxuY2FwdGlvbiwgdGgge1xcclxcbiAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUubmF2VGFibGUgLmZvcm0tY29udHJvbCB7XFxyXFxuICBib3JkZXI6IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm92ZXIge1xcclxcbiAgYm9yZGVyOiAycHggZGFzaGVkICMwMDA7XFxyXFxufVxcclxcblxcclxcbi5ncmlkLWhlYWRlciB7XFxyXFxuICAvKiBwYWRkaW5nOiA1cHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBib3JkZXI6IDNweCBzb2xpZCByZWQ7XFxyXFxuICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgd2lkdGg6IDEyMHB4OyAqL1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNkdW1teS1kYXRhLWNvbnRhaW5lciB7XFxyXFxuICBtYXgtaGVpZ2h0OiA3MCU7XFxyXFxuICB3aWR0aDogNjUlO1xcclxcbiAgbWFyZ2luOmF1dG87XFxyXFxufVxcclxcblxcclxcbi5ncmlkLXRvb2xiYXItYWN0aW9uIHtcXHJcXG4gIG1hcmdpbjogMnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICB3aWR0aDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQtdG9vbGJhciB7XFxyXFxuICBwYWRkaW5nOiAycHggIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvb2tpbmctc3VtbWFyeSBsaSB7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uYm9va2luZy1zdW1tYXJ5IC5jYXJkLWZvb3RlciB7XFxyXFxuICBwYWRkaW5nLXRvcDogMDtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQ6aG92ZXIsIHNlbGVjdDpob3ZlciB7XFxyXFxuICAvKiBiYWNrZ3JvdW5kOiByZ2JhKDEyMSwgMTY5LCAyNDEsIDAuNTM0KTtcXHJcXG4gICAgY29sb3I6IHdoaXRlc21va2U7ICovXFxyXFxuXFxyXFxuICBjb2xvcjogIzBkNmVmZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzBkNmVmZDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwZDZlZmQgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLnN1bS12YWx1ZSB7XFxyXFxuICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxuLmFjdGlvbnMtY29udGFpbmVyIHtcXHJcXG4gIG1hcmdpbjogNXB4IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWhvdmVyPnRib2R5PnRyOmhvdmVyIHtcXHJcXG4gIC0tYnMtdGFibGUtYWNjZW50LWJnOiByZ2IoMTMgMTEwIDI1MyAvIDclKTtcXHJcXG4gIGNvbG9yOiAjYzFkN2VjO1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtYWN0aXZlIHtcXHJcXG4gIC0tYnMtdGFibGUtYWNjZW50LWJnOiByZ2IoMTMgMTEwIDI1MyAvIDE3JSk7XFxyXFxuICBjb2xvcjogI2MxZDdlYztcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWFjdGl2ZTpob3ZlciB7XFxyXFxuICAtLWJzLXRhYmxlLWFjY2VudC1iZzogcmdiKDEzIDExMCAyNTMgLyAyNyUpICFpbXBvcnRhbnQ7XFxyXFxuICBjb2xvcjogI2MxZDdlYyAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtYWN0aXZlIC5yb3ctbWFya2VyIHtcXHJcXG4gIG1hcmdpbjogNXB4IDBweDtcXHJcXG4gIGNvbG9yOiBibHVlO1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIGZsb2F0OiByaWdodDtcXHJcXG4gIGRpc3BsYXk6IGluaXRpYWw7XFxyXFxufVxcclxcblxcclxcbi5yb3ctbWFya2VyIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi50YWJsZSB0ZCB7XFxyXFxuICBwYWRkaW5nOiAycHggMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uYnMtc2Nyb2xsIHtcXHJcXG4gIG1heC1oZWlnaHQ6IDM1MHB4ICFpbXBvcnRhbnQ7XFxyXFxuICAvKiBtYXgtaGVpZ2h0OiAyMDBweDsgICovXFxyXFxuICBvdmVyZmxvdy15OiBhdXRvXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5icy10YWJsZXtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLmJzLXBhZ2luYXRpb257XFxyXFxuXFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2FwcC1jbGllbnQvY3NzL3NpdGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFO0lBQ0UsZUFBZTtFQUNqQjtBQUNGOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7O0FBR0E7RUFDRSxnQkFBZ0I7RUFDaEIscUJBQXFCO0VBQ3JCLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLHFCQUFxQjtFQUNyQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxvRUFBeUQ7QUFDM0Q7O0FBRUE7RUFDRSxvRUFBd0Q7QUFDMUQ7O0FBRUE7RUFDRSx5REFBOEM7QUFDaEQ7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsNEJBQTRCO0VBQzVCLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixtQ0FBbUM7QUFDckM7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRTs7OzttQkFJaUI7RUFDakIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsVUFBVTtFQUNWLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxpQkFBaUI7RUFDakIsV0FBVztBQUNiOztBQUVBO0VBQ0UsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsVUFBVTtBQUNaOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFO3dCQUNzQjs7RUFFdEIsY0FBYztFQUNkLHFCQUFxQjtFQUNyQixvQ0FBb0M7QUFDdEM7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsMENBQTBDO0VBQzFDLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSwyQ0FBMkM7RUFDM0MsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHNEQUFzRDtFQUN0RCx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsV0FBVztFQUNYLHNCQUFzQjtFQUN0QixZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOzs7QUFHQTtFQUNFLDRCQUE0QjtFQUM1Qix3QkFBd0I7RUFDeEI7O0FBRUY7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCB7XFxyXFxuICBmb250LXNpemU6IDE0cHg7XFxyXFxufVxcclxcblxcclxcbkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkge1xcclxcbiAgaHRtbCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuaHRtbCB7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBtaW4taGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XFxyXFxufVxcclxcblxcclxcblxcclxcbi50b29sdGlwLWVycm9yIC50b29sdGlwLWlubmVyIHtcXHJcXG4gIG1heC13aWR0aDogMjAwcHg7XFxyXFxuICBwYWRkaW5nOiAuMjVyZW0gLjVyZW07XFxyXFxuICBjb2xvcjogcmVkO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICBib3JkZXItcmFkaXVzOiAuMjVyZW07XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XFxyXFxufVxcclxcblxcclxcbi50b29sdGlwLWVycm9yIC50b29sdGlwLWFycm93OjpiZWZvcmUge1xcclxcbiAgYm9yZGVyLXRvcC1jb2xvcjogcmVkO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZS5ub3dyYXAgdGgsIHRhYmxlLm5hdlRhYmxlLm5vd3JhcCB0ZCB7XFxyXFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19kZXNjIHtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9pbWFnZXMvc29ydF9kZXNjLnBuZykgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUubmF2VGFibGUgdGhlYWQgLnNvcnRpbmdfYXNjIHtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9pbWFnZXMvc29ydF9hc2MucG5nKSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZyB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoLi4vaW1hZ2VzL3NvcnRfYm90aC5wbmcpO1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZywgdGFibGUubmF2VGFibGUgdGhlYWQgLnNvcnRpbmdfYXNjLCB0YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19kZXNjLCB0YWJsZS5uYXZUYWJsZSB0aGVhZCAuc29ydGluZ19hc2NfZGlzYWJsZWQsIHRhYmxlLm5hdlRhYmxlIHRoZWFkIC5zb3J0aW5nX2Rlc2NfZGlzYWJsZWQge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXHJcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUubmF2VGFibGUgdGhlYWQgdGgsIHRhYmxlLm5hdlRhYmxlIHRoZWFkIHRkIHtcXHJcXG4gIHBhZGRpbmc6IDEwcHggMThweDtcXHJcXG4gIC8qIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMTExOyAqL1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5uYXZUYWJsZSB0aGVhZCB0aCwgdGFibGUubmF2VGFibGUgdGZvb3QgdGgge1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxufVxcclxcblxcclxcbnRhYmxlLm5hdlRhYmxlIHRoLCB0YWJsZS5uYXZUYWJsZSB0ZCB7XFxyXFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG59XFxyXFxuXFxyXFxuY2FwdGlvbiwgdGgge1xcclxcbiAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUubmF2VGFibGUgLmZvcm0tY29udHJvbCB7XFxyXFxuICBib3JkZXI6IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLm92ZXIge1xcclxcbiAgYm9yZGVyOiAycHggZGFzaGVkICMwMDA7XFxyXFxufVxcclxcblxcclxcbi5ncmlkLWhlYWRlciB7XFxyXFxuICAvKiBwYWRkaW5nOiA1cHg7XFxyXFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcclxcbiAgICBib3JkZXI6IDNweCBzb2xpZCByZWQ7XFxyXFxuICAgIGhlaWdodDogMjBweDtcXHJcXG4gICAgd2lkdGg6IDEyMHB4OyAqL1xcclxcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbiNkdW1teS1kYXRhLWNvbnRhaW5lciB7XFxyXFxuICBtYXgtaGVpZ2h0OiA3MCU7XFxyXFxuICB3aWR0aDogNjUlO1xcclxcbiAgbWFyZ2luOmF1dG87XFxyXFxufVxcclxcblxcclxcbi5ncmlkLXRvb2xiYXItYWN0aW9uIHtcXHJcXG4gIG1hcmdpbjogMnB4O1xcclxcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxyXFxuICB3aWR0aDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmdyaWQtdG9vbGJhciB7XFxyXFxuICBwYWRkaW5nOiAycHggIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvb2tpbmctc3VtbWFyeSBsaSB7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4uYm9va2luZy1zdW1tYXJ5IC5jYXJkLWZvb3RlciB7XFxyXFxuICBwYWRkaW5nLXRvcDogMDtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXQ6aG92ZXIsIHNlbGVjdDpob3ZlciB7XFxyXFxuICAvKiBiYWNrZ3JvdW5kOiByZ2JhKDEyMSwgMTY5LCAyNDEsIDAuNTM0KTtcXHJcXG4gICAgY29sb3I6IHdoaXRlc21va2U7ICovXFxyXFxuXFxyXFxuICBjb2xvcjogIzBkNmVmZDtcXHJcXG4gIGJvcmRlci1jb2xvcjogIzBkNmVmZDtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwZDZlZmQgIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLnN1bS12YWx1ZSB7XFxyXFxuICB0ZXh0LWFsaWduOiByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxuLmFjdGlvbnMtY29udGFpbmVyIHtcXHJcXG4gIG1hcmdpbjogNXB4IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWhvdmVyPnRib2R5PnRyOmhvdmVyIHtcXHJcXG4gIC0tYnMtdGFibGUtYWNjZW50LWJnOiByZ2IoMTMgMTEwIDI1MyAvIDclKTtcXHJcXG4gIGNvbG9yOiAjYzFkN2VjO1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtYWN0aXZlIHtcXHJcXG4gIC0tYnMtdGFibGUtYWNjZW50LWJnOiByZ2IoMTMgMTEwIDI1MyAvIDE3JSk7XFxyXFxuICBjb2xvcjogI2MxZDdlYztcXHJcXG59XFxyXFxuXFxyXFxuLnRhYmxlLWFjdGl2ZTpob3ZlciB7XFxyXFxuICAtLWJzLXRhYmxlLWFjY2VudC1iZzogcmdiKDEzIDExMCAyNTMgLyAyNyUpICFpbXBvcnRhbnQ7XFxyXFxuICBjb2xvcjogI2MxZDdlYyAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4udGFibGUtYWN0aXZlIC5yb3ctbWFya2VyIHtcXHJcXG4gIG1hcmdpbjogNXB4IDBweDtcXHJcXG4gIGNvbG9yOiBibHVlO1xcclxcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG4gIGZsb2F0OiByaWdodDtcXHJcXG4gIGRpc3BsYXk6IGluaXRpYWw7XFxyXFxufVxcclxcblxcclxcbi5yb3ctbWFya2VyIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi50YWJsZSB0ZCB7XFxyXFxuICBwYWRkaW5nOiAycHggMHB4O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uYnMtc2Nyb2xsIHtcXHJcXG4gIG1heC1oZWlnaHQ6IDM1MHB4ICFpbXBvcnRhbnQ7XFxyXFxuICAvKiBtYXgtaGVpZ2h0OiAyMDBweDsgICovXFxyXFxuICBvdmVyZmxvdy15OiBhdXRvXFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5icy10YWJsZXtcXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLmJzLXBhZ2luYXRpb257XFxyXFxuXFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zaXRlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2l0ZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IHsgYXBwRGF0YUV2ZW50cywgQlNEYXRhVGFibGUsIEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbiwgQlNEYXRhVGFibGVEYXRhU291cmNlLCBCU0RhdGFUYWJsZUlucHV0LCBCU0RhdGFUYWJsZU9wdGlvbnMsIEJTRGF0YVRhYmxlU2VsZWN0TGlzdEl0ZW0sIEJTRmllbGRVcGRhdGVkRXZlbnQgfSBmcm9tIFwiYnMtZGF0YXRhYmxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRHluYW1pY0RlbW8ge1xyXG4gICAgc3RhdGljIHJ1bihjb250YWluZXJJZDogc3RyaW5nLCBpbml0RGF0YSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdydW5uaW5nIGR5bmFtaWMgZGVtbycpO1xyXG5cclxuICAgICAgICB2YXIgYm9va2luZ0xpbmVzID0gaW5pdERhdGEuZGF0YTtcclxuICAgICAgICB2YXIgYm9va2luZ0xpbmVzTWV0YWRhdGEgPSBpbml0RGF0YS5tZXRhRGF0YTtcclxuXHJcbiAgICAgICAgdmFyIGNvbHMgPSBbXTtcclxuXHJcbiAgICAgICAgY29scy5wdXNoKG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oXCJMaW5lIG5iclwiLCBcIm51bWJlclwiLCBcIjgwcHhcIiwgXCJsaW5lTmJyXCIsIHRydWUpKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBzZWxlY3RvciB3aW5kb3dcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciBzdG9ja1NlbGVjdG9yID0gbmV3IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbihcIlN0b2NrIGl0ZW1cIiwgXCJzZWxlY3RvclwiLCBcIjYwcHhcIiwgXCJpbnZlbnRvcnlJZFwiKTtcclxuICAgICAgICBzdG9ja1NlbGVjdG9yLlNlbGVjdG9yRGF0YUNCID0gKHBhZ2UpID0+IHsgcmV0dXJuIGBodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3N0b2NraXRlbXM/cGFnZT0ke3BhZ2V9YCB9O1xyXG4gICAgICAgIHN0b2NrU2VsZWN0b3IuU2VsZWN0b3JDb2xzID0gW1xyXG4gICAgICAgICAgICBuZXcgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uKFwiU3RvY2sgaXRlbVwiLCBcInRleHRcIiwgXCI2MHB4XCIsIFwiaWRcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oXCJEZXNjcmlwdGlvblwiLCBcInRleHRcIiwgXCIyMjBweFwiLCBcIm5hbWVcIiwgZmFsc2UpXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgY29scy5wdXNoKHN0b2NrU2VsZWN0b3IpO1xyXG5cclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBzZWxlY3QgZHJvcGRvd25cclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciB1b20gPSBuZXcgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uKFwiVW5pdCBvZiBtZWFzdXJlXCIsIFwic2VsZWN0XCIsIFwiMTIwcHhcIiwgXCJ1b21cIiwgZmFsc2UsXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIG5ldyBCU0RhdGFUYWJsZVNlbGVjdExpc3RJdGVtKCdLaWxvJywgJ0tHJyksXHJcbiAgICAgICAgICAgICAgICBuZXcgQlNEYXRhVGFibGVTZWxlY3RMaXN0SXRlbSgnTGl0cmUnLCAnTEknKSxcclxuICAgICAgICAgICAgICAgIG5ldyBCU0RhdGFUYWJsZVNlbGVjdExpc3RJdGVtKCdTdGljaycsICdTVEsnKVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICBjb2xzLnB1c2godW9tKTtcclxuXHJcbiAgICAgICAgY29scy5wdXNoKG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oXCJEZXNjcmlwdGlvblwiLCBcInRleHRcIiwgXCIyMjBweFwiLCBcImRlc2NcIiwgZmFsc2UpKTtcclxuICAgICAgICBjb2xzLnB1c2gobmV3IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbihcIlF1YW50aXR5XCIsIFwibnVtYmVyXCIsIFwiODBweFwiLCBcInF0eVwiLCBmYWxzZSkpO1xyXG4gICAgICAgIGNvbHMucHVzaChuZXcgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uKFwiVW5pdCBjb3N0XCIsIFwibnVtYmVyXCIsIFwiMTIwcHhcIiwgXCJjb3N0XCIsIGZhbHNlKSk7XHJcbiAgICAgICAgY29scy5wdXNoKG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oXCJDb3N0XCIsIFwibnVtYmVyXCIsIFwiMTIwcHhcIiwgXCJleHRDb3N0XCIsIGZhbHNlKSk7XHJcblxyXG4gICAgICAgIHZhciBkYXRhU291cmNlID0gbmV3IEJTRGF0YVRhYmxlRGF0YVNvdXJjZSgnbGluZXMnLCB7XHJcbiAgICAgICAgICAgIGluaXREYXRhOiBib29raW5nTGluZXMsIG1ldGFEYXRhOiBib29raW5nTGluZXNNZXRhZGF0YVxyXG4gICAgICAgIH0sIHRydWUsIChwYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYm9va2luZ2xpbmVzP3BhZ2U9JyArIHBhZ2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0gbmV3IEJTRGF0YVRhYmxlT3B0aW9ucyhcImJvb2tpbmdMaW5lc1wiLCBjb250YWluZXJJZCwgY29scywgZGF0YVNvdXJjZSk7XHJcbiAgICAgICAgdmFyIGdyaWQgPSBuZXcgQlNEYXRhVGFibGUob3B0aW9ucyk7XHJcbiAgICAgICAgZ3JpZC5yZWdpc3RlckNhbGxiYWNrcygpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGxldHMgc2F5IHdlIGhhdmUgdG8gY2FsY3VsYXRlIGV4dCBjb3N0IHVzaW5nIHRoZSB1bml0IGNvc3QgYW5kIHF1YW50aXR5XHJcbiAgICAgICAgLy8gd2UgY2FuIGRvIHRoaXMgYnkgcmVnaXN0ZXJpbmcgYSBjaGFuZ2UgZXZlbnRcclxuICAgICAgICAvL1xyXG5cclxuICAgICAgICBncmlkLmFkZEhhbmRsZXIoYXBwRGF0YUV2ZW50cy5PTl9GSUVMRF9VUERBVEVELCAoc2VuZGVyLCBlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICBsZXQgZXYgPSBlIGFzIEJTRmllbGRVcGRhdGVkRXZlbnQ7XHJcbiAgICAgICAgICAgIGlmICghZXYpIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIGZpZWxkID0gZXYuRXZlbnREYXRhLkZpZWxkIGFzIEJTRGF0YVRhYmxlSW5wdXQ7XHJcbiAgICAgICAgICAgIGlmICghZmllbGQpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBmaWVsZC5tb2RlbE5hbWU7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSBldi5FdmVudERhdGEuUm93O1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpZWxkTmFtZSA9PT0gJ3F0eScgfHwgZmllbGROYW1lID09PSAnY29zdCcpIHtcclxuICAgICAgICAgICAgICAgIHJvdy5leHRDb3N0LnZhbCA9IHJvdy5xdHkudmFsICogcm93LmNvc3QudmFsO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBncmlkLnJlbmRlcigpO1xyXG5cclxuICAgICAgICBncmlkLmdyaWRBY3Rpb25zLmFkZEFjdGlvbignYnRuU2F2ZScsICdwcmltYXJ5JywgJ3NhdmUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZSBidXR0b24gaXMgY2FsbGVkJyk7XHJcbiAgICAgICAgICAgIHZhciByZWNvcmRzID0gZ3JpZC5hbGxSZWNvcmRzO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQWxsIHJlY29yZHM6JylcclxuICAgICAgICAgICAgY29uc29sZS50YWJsZShyZWNvcmRzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEaXJ0eSByb3dzOicpO1xyXG4gICAgICAgICAgICBjb25zb2xlLnRhYmxlKGdyaWQuZGlydHlSZWNvcmRzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZSwgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uLCBCU0RhdGFUYWJsZURhdGFTb3VyY2UsIEJTRGF0YVRhYmxlT3B0aW9ucywgQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSwgQlNEYXRhVGFibGVUZXh0SW5wdXRFeHQgfSBmcm9tIFwiYnMtZGF0YXRhYmxlXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGF0aWNEZW1vIHtcclxuXHJcbiAgICBzdGF0aWMgcnVuKCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0ZXN0IGlzIGluaXRpYWxpemVkJyk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdoZWxsbyBmcm9tIGluZGV4Jyk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gc2FtcGxlIHVzaW5nIGJvb3RzdHJhcCBkYXRhIGdyaWQgXHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgY29scyA9IFtdO1xyXG4gICAgICAgIHZhciBpbml0RGF0YSA9IFtdO1xyXG5cclxuICAgICAgICB2YXIgdG90Q29scyA9IDUsIHRvdFJvd3MgPSA2MDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdENvbHM7IGkrKykge1xyXG4gICAgICAgICAgICBjb2xzLnB1c2gobmV3IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbihcIkNPTC1cIiArIGksIFwidGV4dFwiLCBcIjE4MHB4XCIsIFwiY29sLVwiICsgaSwgZmFsc2UpKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdFJvd3M7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRvdENvbHM7IGorKykge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkWydjb2wtJyArIGpdID0gJ0RBVEEtJyArIGkgKyAnLScgKyBqO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluaXREYXRhLnB1c2gocmVjb3JkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkYXRhU291cmNlID0gbmV3IEJTRGF0YVRhYmxlRGF0YVNvdXJjZSgnZmFrZURhdGEnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbml0RGF0YSxcclxuICAgICAgICAgICAgICAgIG1ldGFEYXRhOiBuZXcgQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSgxLCA1LCB0b3RSb3dzKVxyXG4gICAgICAgICAgICB9LCBmYWxzZSwgbnVsbCxcclxuICAgICAgICAgICAgKHBhZ2UsIGRhdGEsIG1kYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBwYWdlIDw9IDEgPyAwIDogKHBhZ2UgLSAxKSAqIG1kYXRhLnBhZ2VTaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgbWRhdGEucGFnZVNpemU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF4SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPiBtYXhJbmRleCB8fCBlbmQgPiBtYXhJbmRleCkgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VEYXRhID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHN0YXJ0OyBpbmRleCA8IGVuZDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkYXRhW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlRGF0YS5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2VEYXRhO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGJzID0gbmV3IEJTRGF0YVRhYmxlT3B0aW9ucyhcImZha2VEYXRhX3RhYmxlXCIsIFwiZHVtbXktZGF0YS1jb250YWluZXJcIiwgY29scywgZGF0YVNvdXJjZSk7XHJcblxyXG4gICAgICAgIHZhciBncmlkID0gbmV3IEJTRGF0YVRhYmxlKGJzKTtcclxuICAgICAgICBncmlkLnJlZ2lzdGVyQ2FsbGJhY2tzKCk7XHJcbiAgICAgICAgZ3JpZC5yZW5kZXIoKTtcclxuXHJcblxyXG4gICAgICAgIHZhciBuYW1lID0gbmV3IEJTRGF0YVRhYmxlVGV4dElucHV0RXh0KHsgSW5wdXRUeXBlOiBcInRleHRcIiwgRWxlbWVudElkOiBcInR4dE5hbWVcIiwgRGF0YVNvdXJjZU5hbWU6IFwid2VsY29tZVwiIH0pO1xyXG4gICAgICAgIG5hbWUudmFsID0gXCJXZWxjb21lIHRvIFR5cGVTY3JpcHRcIjtcclxuXHJcbiAgICB9XHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdFwibWFpblwiOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiXHJcbmltcG9ydCBcIi4vY3NzL3NpdGUuY3NzXCJcclxuaW1wb3J0IHsgRHluYW1pY0RlbW8gfSBmcm9tIFwiLi9keW5hbWljLWRlbW9cIjtcclxuaW1wb3J0IHsgU3RhdGljRGVtbyB9IGZyb20gXCIuL3N0YXRpYy1kZW1vXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZURlbW9zIHtcclxuXHJcbiAgICBzdGF0aWMgcnVuU3RhdGljRGVtbygpIHtcclxuICAgICAgICBTdGF0aWNEZW1vLnJ1bigpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBydW5EeW5hbWljRGVtbyhjb250YWluZXJJZDogc3RyaW5nLCBpbml0RGF0YSkge1xyXG4gICAgICAgIER5bmFtaWNEZW1vLnJ1bihjb250YWluZXJJZCwgaW5pdERhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9