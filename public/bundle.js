(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bs_dt_demo"] = factory();
	else
		root["bs_dt_demo"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bs-datatable/dist/bsdatatable.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-datatable/dist/bsdatatable.js ***!
  \*******************************************************/
/***/ ((module) => {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_754__) => {

"use strict";
__nested_webpack_require_754__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_754__.d(__webpack_exports__, {
/* harmony export */   "popperGenerator": () => (/* binding */ popperGenerator),
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__["default"])
/* harmony export */ });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_754__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_754__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_754__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_754__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_754__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_754__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_754__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_754__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_754__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_754__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_754__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_754__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_754__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_754__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: (0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(reference) ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference) : reference.contextElement ? (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reference.contextElement) : [],
          popper: (0,_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = (0,_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_3__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = (0,_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_4__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          (0,_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(modifiers);

          if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_7__.auto) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_8__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update â€“ it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: (0,_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_9__["default"])(reference, (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(popper), state.options.strategy === 'fixed'),
          popper: (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_11__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update â€“ it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: (0,_utils_debounce_js__WEBPACK_IMPORTED_MODULE_12__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_14340__) => {

"use strict";
__nested_webpack_require_14340__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_14340__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ contains)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_14340__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isShadowRoot)(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_15810__) => {

"use strict";
__nested_webpack_require_15810__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_15810__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBoundingClientRect)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_15810__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_15810__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");


function getBoundingClientRect(element, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  var rect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) && includeScale) {
    var offsetHeight = element.offsetHeight;
    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
    // Fallback to 1 in case both values are `0`

    if (offsetWidth > 0) {
      scaleX = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(rect.width) / offsetWidth || 1;
    }

    if (offsetHeight > 0) {
      scaleY = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_1__.round)(rect.height) / offsetHeight || 1;
    }
  }

  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_17819__) => {

"use strict";
__nested_webpack_require_17819__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_17819__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getClippingRect)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_17819__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_17819__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_17819__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_17819__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_17819__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_17819__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_17819__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_17819__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_17819__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_17819__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_17819__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_17819__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_17819__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_17819__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element) {
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_1__.viewport ? (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getViewportRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element)) : (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent) : (0,_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = (0,_listScrollParents_js__WEBPACK_IMPORTED_MODULE_7__["default"])((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isHTMLElement)(element) ? (0,_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_10__["default"])(element) : element;

  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(clippingParent) && (0,_contains_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent, clipperElement) && (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_12__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.top, accRect.top);
    accRect.right = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.right, accRect.right);
    accRect.bottom = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.min)(rect.bottom, accRect.bottom);
    accRect.left = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_13__.max)(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_24640__) => {

"use strict";
__nested_webpack_require_24640__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_24640__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCompositeRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_24640__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_24640__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_24640__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_24640__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_24640__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_24640__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_24640__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_24640__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");









function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.width) / element.offsetWidth || 1;
  var scaleY = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent);
  var offsetParentIsScaled = (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
  var documentElement = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent);
  var rect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_5__["default"])(documentElement)) {
      scroll = (0,_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_6__["default"])(offsetParent);
    }

    if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(offsetParent)) {
      offsets = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_7__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_28983__) => {

"use strict";
__nested_webpack_require_28983__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_28983__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getComputedStyle)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_28983__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_29925__) => {

"use strict";
__nested_webpack_require_29925__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_29925__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentElement)
/* harmony export */ });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_29925__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return (((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isElement)(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_31018__) => {

"use strict";
__nested_webpack_require_31018__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_31018__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getDocumentRect)
/* harmony export */ });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_31018__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_31018__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_31018__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_31018__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_31018__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var y = -winScroll.scrollTop;

  if ((0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(body || html).direction === 'rtl') {
    x += (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_2__.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_33896__) => {

"use strict";
__nested_webpack_require_33896__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_33896__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getHTMLElementScroll)
/* harmony export */ });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_34634__) => {

"use strict";
__nested_webpack_require_34634__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_34634__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getLayoutRect)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_34634__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_36176__) => {

"use strict";
__nested_webpack_require_36176__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_36176__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeName)
/* harmony export */ });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_36877__) => {

"use strict";
__nested_webpack_require_36877__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_36877__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNodeScroll)
/* harmony export */ });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_36877__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_36877__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_36877__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_36877__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node) || !(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node)) {
    return (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node);
  } else {
    return (0,_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_38609__) => {

"use strict";
__nested_webpack_require_38609__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_38609__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOffsetParent)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_38609__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_38609__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_38609__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38609__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_38609__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_38609__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");







function getTrueOffsetParent(element) {
  if (!(0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
  (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = (0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);

  while ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(currentNode) && ['html', 'body'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(currentNode)) < 0) {
    var css = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_4__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && (0,_isTableElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent) && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'html' || (0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_3__["default"])(offsetParent) === 'body' && (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_43206__) => {

"use strict";
__nested_webpack_require_43206__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_43206__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getParentNode)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_43206__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_43206__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_43206__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if ((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    (0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_45114__) => {

"use strict";
__nested_webpack_require_45114__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_45114__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getScrollParent)
/* harmony export */ });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_45114__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_45114__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_45114__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_45114__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if ((0,_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__.isHTMLElement)(node) && (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) {
    return node;
  }

  return getScrollParent((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_46992__) => {

"use strict";
__nested_webpack_require_46992__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_46992__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getViewportRect)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_46992__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_46992__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_46992__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



function getViewportRect(element) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = (0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + (0,_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_49725__) => {

"use strict";
__nested_webpack_require_49725__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_49725__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindow)
/* harmony export */ });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_50591__) => {

"use strict";
__nested_webpack_require_50591__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_50591__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScroll)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_50591__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_51646__) => {

"use strict";
__nested_webpack_require_51646__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_51646__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getWindowScrollBarX)
/* harmony export */ });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_51646__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_51646__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_51646__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return (0,_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + (0,_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_53523__) => {

"use strict";
__nested_webpack_require_53523__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_53523__.d(__webpack_exports__, {
/* harmony export */   "isElement": () => (/* binding */ isElement),
/* harmony export */   "isHTMLElement": () => (/* binding */ isHTMLElement),
/* harmony export */   "isShadowRoot": () => (/* binding */ isShadowRoot)
/* harmony export */ });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_53523__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_55130__) => {

"use strict";
__nested_webpack_require_55130__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_55130__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isScrollParent)
/* harmony export */ });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_55130__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = (0,_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_56353__) => {

"use strict";
__nested_webpack_require_56353__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_56353__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isTableElement)
/* harmony export */ });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_56353__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf((0,_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_57305__) => {

"use strict";
__nested_webpack_require_57305__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_57305__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listScrollParents)
/* harmony export */ });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_57305__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_57305__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_57305__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_57305__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = (0,_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = (0,_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], (0,_isScrollParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents((0,_getParentNode_js__WEBPACK_IMPORTED_MODULE_3__["default"])(target)));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_59746__) => {

"use strict";
__nested_webpack_require_59746__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_59746__.d(__webpack_exports__, {
/* harmony export */   "top": () => (/* binding */ top),
/* harmony export */   "bottom": () => (/* binding */ bottom),
/* harmony export */   "right": () => (/* binding */ right),
/* harmony export */   "left": () => (/* binding */ left),
/* harmony export */   "auto": () => (/* binding */ auto),
/* harmony export */   "basePlacements": () => (/* binding */ basePlacements),
/* harmony export */   "start": () => (/* binding */ start),
/* harmony export */   "end": () => (/* binding */ end),
/* harmony export */   "clippingParents": () => (/* binding */ clippingParents),
/* harmony export */   "viewport": () => (/* binding */ viewport),
/* harmony export */   "popper": () => (/* binding */ popper),
/* harmony export */   "reference": () => (/* binding */ reference),
/* harmony export */   "variationPlacements": () => (/* binding */ variationPlacements),
/* harmony export */   "placements": () => (/* binding */ placements),
/* harmony export */   "beforeRead": () => (/* binding */ beforeRead),
/* harmony export */   "read": () => (/* binding */ read),
/* harmony export */   "afterRead": () => (/* binding */ afterRead),
/* harmony export */   "beforeMain": () => (/* binding */ beforeMain),
/* harmony export */   "main": () => (/* binding */ main),
/* harmony export */   "afterMain": () => (/* binding */ afterMain),
/* harmony export */   "beforeWrite": () => (/* binding */ beforeWrite),
/* harmony export */   "write": () => (/* binding */ write),
/* harmony export */   "afterWrite": () => (/* binding */ afterWrite),
/* harmony export */   "modifierPhases": () => (/* binding */ modifierPhases)
/* harmony export */ });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_62992__) => {

"use strict";
__nested_webpack_require_62992__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_62992__.d(__webpack_exports__, {
/* harmony export */   "afterMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterMain),
/* harmony export */   "afterRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterRead),
/* harmony export */   "afterWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.afterWrite),
/* harmony export */   "auto": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.auto),
/* harmony export */   "basePlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements),
/* harmony export */   "beforeMain": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeMain),
/* harmony export */   "beforeRead": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeRead),
/* harmony export */   "beforeWrite": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.beforeWrite),
/* harmony export */   "bottom": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom),
/* harmony export */   "clippingParents": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents),
/* harmony export */   "end": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.end),
/* harmony export */   "left": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.left),
/* harmony export */   "main": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.main),
/* harmony export */   "modifierPhases": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases),
/* harmony export */   "placements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements),
/* harmony export */   "popper": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper),
/* harmony export */   "read": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.read),
/* harmony export */   "reference": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference),
/* harmony export */   "right": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.right),
/* harmony export */   "start": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.start),
/* harmony export */   "top": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.top),
/* harmony export */   "variationPlacements": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements),
/* harmony export */   "viewport": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport),
/* harmony export */   "write": () => (/* reexport safe */ _enums_js__WEBPACK_IMPORTED_MODULE_0__.write),
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.computeStyles),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.offset),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__.preventOverflow),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.popperGenerator),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "createPopperBase": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_2__.createPopper),
/* harmony export */   "createPopper": () => (/* reexport safe */ _popper_js__WEBPACK_IMPORTED_MODULE_4__.createPopper),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__.createPopper)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_62992__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_62992__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_62992__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_62992__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_62992__(/*! ./popper.js */ "./node_modules/@popperjs/core/lib/popper.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_62992__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_69154__) => {

"use strict";
__nested_webpack_require_69154__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_69154__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_69154__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_69154__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__.isHTMLElement)(element) || !(0,_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_72819__) => {

"use strict";
__nested_webpack_require_72819__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_72819__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_72819__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_72819__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_72819__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_72819__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_72819__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_72819__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_72819__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_72819__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_72819__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_72819__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return (0,_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typeof padding !== 'number' ? padding : (0,_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_1__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_2__.basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state.placement);
  var axis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_2__.left, _enums_js__WEBPACK_IMPORTED_MODULE_2__.right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.top : _enums_js__WEBPACK_IMPORTED_MODULE_2__.left;
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_2__.right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_7__.within)(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!(0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_8__.isHTMLElement)(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!(0,_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_79490__) => {

"use strict";
__nested_webpack_require_79490__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_79490__.d(__webpack_exports__, {
/* harmony export */   "mapToStyles": () => (/* binding */ mapToStyles),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_79490__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_79490__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_79490__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_79490__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_79490__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_79490__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_79490__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_79490__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");







 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(x * dpr) / dpr || 0,
    y: (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_0__.round)(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.left;
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;
  var win = window;

  if (adaptive) {
    var offsetParent = (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper)) {
      offsetParent = (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper);

      if ((0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.right) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom;
      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.left || (placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.top || placement === _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom) && variation === _enums_js__WEBPACK_IMPORTED_MODULE_1__.end) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_1__.right;
      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = (0,_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.placement),
    variation: (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_88791__) => {

"use strict";
__nested_webpack_require_88791__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_88791__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_88791__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = (0,_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_90941__) => {

"use strict";
__nested_webpack_require_90941__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_90941__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_90941__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_90941__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_90941__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_90941__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_90941__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_90941__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_90941__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if ((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto) {
    return [];
  }

  var oppositePlacement = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement);
  return [(0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement), oppositePlacement, (0,_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [(0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat((0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.auto ? (0,_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);

    var isStartVariation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_5__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_1__.start;
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.top, _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.right : _enums_js__WEBPACK_IMPORTED_MODULE_1__.left : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_1__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_1__.top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    }

    var altVariationSide = (0,_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases â€“ research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_98477__) => {

"use strict";
__nested_webpack_require_98477__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_98477__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_98477__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_98477__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom, _enums_js__WEBPACK_IMPORTED_MODULE_0__.left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_101555__) => {

"use strict";
__nested_webpack_require_101555__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_101555__.d(__webpack_exports__, {
/* harmony export */   "applyStyles": () => (/* reexport safe */ _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "arrow": () => (/* reexport safe */ _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "flip": () => (/* reexport safe */ _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "hide": () => (/* reexport safe */ _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "offset": () => (/* reexport safe */ _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"])
/* harmony export */ });
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_101555__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_101555__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_101555__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_101555__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_101555__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_101555__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_101555__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_101555__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_101555__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");










/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_104716__) => {

"use strict";
__nested_webpack_require_104716__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_104716__.d(__webpack_exports__, {
/* harmony export */   "distanceAndSkiddingToXY": () => (/* binding */ distanceAndSkiddingToXY),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_104716__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_104716__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");

 // eslint-disable-next-line import/no-unused-modules

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__.left, _enums_js__WEBPACK_IMPORTED_MODULE_1__.right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__.placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_107558__) => {

"use strict";
__nested_webpack_require_107558__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_107558__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_107558__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = (0,_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_109121__) => {

"use strict";
__nested_webpack_require_109121__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_109121__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_109121__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_109121__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_109121__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_109121__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_109121__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_109121__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_109121__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_109121__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_109121__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_109121__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_109121__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = (0,_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = (0,_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = (0,_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = (0,_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement);
  var altAxis = (0,_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_4__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = offset + overflow[mainSide];
    var max = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_5__.start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? (0,_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0,_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && (0,_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.min)(min, tetherMin) : min, offset, tether ? (0,_utils_math_js__WEBPACK_IMPORTED_MODULE_10__.max)(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.top : _enums_js__WEBPACK_IMPORTED_MODULE_5__.left;

    var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_5__.bottom : _enums_js__WEBPACK_IMPORTED_MODULE_5__.right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [_enums_js__WEBPACK_IMPORTED_MODULE_5__.top, _enums_js__WEBPACK_IMPORTED_MODULE_5__.left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0,_utils_within_js__WEBPACK_IMPORTED_MODULE_8__.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_118969__) => {

"use strict";
__nested_webpack_require_118969__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_118969__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_118969__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_118969__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_118969__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_118969__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_118969__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_118969__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_4__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_121521__) => {

"use strict";
__nested_webpack_require_121521__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_121521__.d(__webpack_exports__, {
/* harmony export */   "createPopper": () => (/* binding */ createPopper),
/* harmony export */   "popperGenerator": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator),
/* harmony export */   "defaultModifiers": () => (/* binding */ defaultModifiers),
/* harmony export */   "detectOverflow": () => (/* reexport safe */ _createPopper_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "createPopperLite": () => (/* reexport safe */ _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__.createPopper),
/* harmony export */   "applyStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.applyStyles),
/* harmony export */   "arrow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.arrow),
/* harmony export */   "computeStyles": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.computeStyles),
/* harmony export */   "eventListeners": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.eventListeners),
/* harmony export */   "flip": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.flip),
/* harmony export */   "hide": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.hide),
/* harmony export */   "offset": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.offset),
/* harmony export */   "popperOffsets": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.popperOffsets),
/* harmony export */   "preventOverflow": () => (/* reexport safe */ _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__.preventOverflow)
/* harmony export */ });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_121521__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_121521__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_121521__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_121521__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_121521__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_121521__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_121521__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_121521__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_121521__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_121521__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_121521__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_121521__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_121521__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");










var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_0__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_8__["default"]];
var createPopper = /*#__PURE__*/(0,_createPopper_js__WEBPACK_IMPORTED_MODULE_9__.popperGenerator)({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_127132__) => {

"use strict";
__nested_webpack_require_127132__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_127132__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeAutoPlacement)
/* harmony export */ });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_127132__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_127132__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_127132__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_127132__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.placements : _options$allowedAutoP;
  var variation = (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements : _enums_js__WEBPACK_IMPORTED_MODULE_0__.variationPlacements.filter(function (placement) {
    return (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements;
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = (0,_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[(0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_130513__) => {

"use strict";
__nested_webpack_require_130513__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_130513__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ computeOffsets)
/* harmony export */ });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_130513__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_130513__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_130513__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_130513__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? (0,_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? (0,_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_2__.left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? (0,_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_2__.end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_133683__) => {

"use strict";
__nested_webpack_require_133683__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_133683__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ debounce)
/* harmony export */ });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_134557__) => {

"use strict";
__nested_webpack_require_134557__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_134557__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ detectOverflow)
/* harmony export */ });
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_134557__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_134557__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_134557__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_134557__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_134557__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_134557__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_134557__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_134557__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_134557__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = (0,_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_1__["default"])(typeof padding !== 'number' ? padding : (0,_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_2__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_0__.basePlacements));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? _enums_js__WEBPACK_IMPORTED_MODULE_0__.reference : _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = (0,_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_4__.isElement)(element) ? element : element.contextElement || (0,_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = (0,_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.reference);
  var popperOffsets = (0,_computeOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = (0,_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_0__.popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.right, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_0__.top, _enums_js__WEBPACK_IMPORTED_MODULE_0__.bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_140648__) => {

"use strict";
__nested_webpack_require_140648__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_140648__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ expandToHashMap)
/* harmony export */ });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_141354__) => {

"use strict";
__nested_webpack_require_141354__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_141354__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ format)
/* harmony export */ });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_142194__) => {

"use strict";
__nested_webpack_require_142194__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_142194__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getAltAxis)
/* harmony export */ });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_142855__) => {

"use strict";
__nested_webpack_require_142855__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_142855__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getBasePlacement)
/* harmony export */ });

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_143541__) => {

"use strict";
__nested_webpack_require_143541__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_143541__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getFreshSideObject)
/* harmony export */ });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_144280__) => {

"use strict";
__nested_webpack_require_144280__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_144280__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getMainAxisFromPlacement)
/* harmony export */ });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_145019__) => {

"use strict";
__nested_webpack_require_145019__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_145019__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositePlacement)
/* harmony export */ });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_145911__) => {

"use strict";
__nested_webpack_require_145911__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_145911__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getOppositeVariationPlacement)
/* harmony export */ });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_146705__) => {

"use strict";
__nested_webpack_require_146705__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_146705__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getVariation)
/* harmony export */ });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_147326__) => {

"use strict";
__nested_webpack_require_147326__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_147326__.d(__webpack_exports__, {
/* harmony export */   "max": () => (/* binding */ max),
/* harmony export */   "min": () => (/* binding */ min),
/* harmony export */   "round": () => (/* binding */ round)
/* harmony export */ });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_148073__) => {

"use strict";
__nested_webpack_require_148073__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_148073__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeByName)
/* harmony export */ });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_149188__) => {

"use strict";
__nested_webpack_require_149188__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_149188__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergePaddingObject)
/* harmony export */ });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_149188__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, (0,_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_150141__) => {

"use strict";
__nested_webpack_require_150141__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_150141__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ orderModifiers)
/* harmony export */ });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_150141__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__.modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_152113__) => {

"use strict";
__nested_webpack_require_152113__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_152113__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rectToClientRect)
/* harmony export */ });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_152860__) => {

"use strict";
__nested_webpack_require_152860__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_152860__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ uniqueBy)
/* harmony export */ });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_153696__) => {

"use strict";
__nested_webpack_require_153696__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_153696__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ validateModifiers)
/* harmony export */ });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_153696__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_153696__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
    .filter(function (value, index, self) {
      return self.indexOf(value) === index;
    }).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

          break;

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.indexOf(modifier.phase) < 0) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__.modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (modifier.effect != null && typeof modifier.effect !== 'function') {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error((0,_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_158202__) => {

"use strict";
__nested_webpack_require_158202__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_158202__.d(__webpack_exports__, {
/* harmony export */   "within": () => (/* binding */ within),
/* harmony export */   "withinMaxClamp": () => (/* binding */ withinMaxClamp)
/* harmony export */ });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_158202__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(min, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(value, max));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_159252__) => {

"use strict";
__nested_webpack_require_159252__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_159252__.d(__webpack_exports__, {
/* harmony export */   "Alert": () => (/* binding */ Alert),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "Carousel": () => (/* binding */ Carousel),
/* harmony export */   "Collapse": () => (/* binding */ Collapse),
/* harmony export */   "Dropdown": () => (/* binding */ Dropdown),
/* harmony export */   "Modal": () => (/* binding */ Modal),
/* harmony export */   "Offcanvas": () => (/* binding */ Offcanvas),
/* harmony export */   "Popover": () => (/* binding */ Popover),
/* harmony export */   "ScrollSpy": () => (/* binding */ ScrollSpy),
/* harmony export */   "Tab": () => (/* binding */ Tab),
/* harmony export */   "Toast": () => (/* binding */ Toast),
/* harmony export */   "Tooltip": () => (/* binding */ Tooltip)
/* harmony export */ });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_159252__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/index.js");
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_159252__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/popper.js");
/*!
  * Bootstrap v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */


/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const MAX_UID = 1000000;
const MILLISECONDS_MULTIPLIER = 1000;
const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

const toType = obj => {
  if (obj === null || obj === undefined) {
    return `${obj}`;
  }

  return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
};
/**
 * --------------------------------------------------------------------------
 * Public Util Api
 * --------------------------------------------------------------------------
 */


const getUID = prefix => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));

  return prefix;
};

const getSelector = element => {
  let selector = element.getAttribute('data-bs-target');

  if (!selector || selector === '#') {
    let hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
    // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
    // `document.querySelector` will rightfully complain it is invalid.
    // See https://github.com/twbs/bootstrap/issues/32273

    if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
      return null;
    } // Just in case some CMS puts out a full URL with the anchor appended


    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
      hrefAttr = `#${hrefAttr.split('#')[1]}`;
    }

    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
  }

  return selector;
};

const getSelectorFromElement = element => {
  const selector = getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};

const getElementFromSelector = element => {
  const selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};

const getTransitionDurationFromElement = element => {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(',')[0];
  transitionDelay = transitionDelay.split(',')[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};

const triggerTransitionEnd = element => {
  element.dispatchEvent(new Event(TRANSITION_END));
};

const isElement = obj => {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (typeof obj.jquery !== 'undefined') {
    obj = obj[0];
  }

  return typeof obj.nodeType !== 'undefined';
};

const getElement = obj => {
  if (isElement(obj)) {
    // it's a jQuery object or a node element
    return obj.jquery ? obj[0] : obj;
  }

  if (typeof obj === 'string' && obj.length > 0) {
    return document.querySelector(obj);
  }

  return null;
};

const typeCheckConfig = (componentName, config, configTypes) => {
  Object.keys(configTypes).forEach(property => {
    const expectedTypes = configTypes[property];
    const value = config[property];
    const valueType = value && isElement(value) ? 'element' : toType(value);

    if (!new RegExp(expectedTypes).test(valueType)) {
      throw new TypeError(`${componentName.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
    }
  });
};

const isVisible = element => {
  if (!isElement(element) || element.getClientRects().length === 0) {
    return false;
  }

  return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
};

const isDisabled = element => {
  if (!element || element.nodeType !== Node.ELEMENT_NODE) {
    return true;
  }

  if (element.classList.contains('disabled')) {
    return true;
  }

  if (typeof element.disabled !== 'undefined') {
    return element.disabled;
  }

  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
};

const findShadowRoot = element => {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === 'function') {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return findShadowRoot(element.parentNode);
};

const noop = () => {};
/**
 * Trick to restart an element's animation
 *
 * @param {HTMLElement} element
 * @return void
 *
 * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
 */


const reflow = element => {
  // eslint-disable-next-line no-unused-expressions
  element.offsetHeight;
};

const getjQuery = () => {
  const {
    jQuery
  } = window;

  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
    return jQuery;
  }

  return null;
};

const DOMContentLoadedCallbacks = [];

const onDOMContentLoaded = callback => {
  if (document.readyState === 'loading') {
    // add listener on the first call when the document is in loading state
    if (!DOMContentLoadedCallbacks.length) {
      document.addEventListener('DOMContentLoaded', () => {
        DOMContentLoadedCallbacks.forEach(callback => callback());
      });
    }

    DOMContentLoadedCallbacks.push(callback);
  } else {
    callback();
  }
};

const isRTL = () => document.documentElement.dir === 'rtl';

const defineJQueryPlugin = plugin => {
  onDOMContentLoaded(() => {
    const $ = getjQuery();
    /* istanbul ignore if */

    if ($) {
      const name = plugin.NAME;
      const JQUERY_NO_CONFLICT = $.fn[name];
      $.fn[name] = plugin.jQueryInterface;
      $.fn[name].Constructor = plugin;

      $.fn[name].noConflict = () => {
        $.fn[name] = JQUERY_NO_CONFLICT;
        return plugin.jQueryInterface;
      };
    }
  });
};

const execute = callback => {
  if (typeof callback === 'function') {
    callback();
  }
};

const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
  if (!waitForTransition) {
    execute(callback);
    return;
  }

  const durationPadding = 5;
  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  let called = false;

  const handler = ({
    target
  }) => {
    if (target !== transitionElement) {
      return;
    }

    called = true;
    transitionElement.removeEventListener(TRANSITION_END, handler);
    execute(callback);
  };

  transitionElement.addEventListener(TRANSITION_END, handler);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
/**
 * Return the previous/next element of a list.
 *
 * @param {array} list    The list of elements
 * @param activeElement   The active element
 * @param shouldGetNext   Choose to get next or previous element
 * @param isCycleAllowed
 * @return {Element|elem} The proper element
 */


const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
  let index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

  if (index === -1) {
    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
  }

  const listLength = list.length;
  index += shouldGetNext ? 1 : -1;

  if (isCycleAllowed) {
    index = (index + listLength) % listLength;
  }

  return list[Math.max(0, Math.min(index, listLength - 1))];
};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
const stripNameRegex = /\..*/;
const stripUidRegex = /::\d+$/;
const eventRegistry = {}; // Events storage

let uidEvent = 1;
const customEvents = {
  mouseenter: 'mouseover',
  mouseleave: 'mouseout'
};
const customEventsRegex = /^(mouseenter|mouseleave)/i;
const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
/**
 * ------------------------------------------------------------------------
 * Private methods
 * ------------------------------------------------------------------------
 */

function getUidEvent(element, uid) {
  return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
}

function getEvent(element) {
  const uid = getUidEvent(element);
  element.uidEvent = uid;
  eventRegistry[uid] = eventRegistry[uid] || {};
  return eventRegistry[uid];
}

function bootstrapHandler(element, fn) {
  return function handler(event) {
    event.delegateTarget = element;

    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn);
    }

    return fn.apply(element, [event]);
  };
}

function bootstrapDelegationHandler(element, selector, fn) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector);

    for (let {
      target
    } = event; target && target !== this; target = target.parentNode) {
      for (let i = domElements.length; i--;) {
        if (domElements[i] === target) {
          event.delegateTarget = target;

          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn);
          }

          return fn.apply(target, [event]);
        }
      }
    } // To please ESLint


    return null;
  };
}

function findHandler(events, handler, delegationSelector = null) {
  const uidEventList = Object.keys(events);

  for (let i = 0, len = uidEventList.length; i < len; i++) {
    const event = events[uidEventList[i]];

    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
      return event;
    }
  }

  return null;
}

function normalizeParams(originalTypeEvent, handler, delegationFn) {
  const delegation = typeof handler === 'string';
  const originalHandler = delegation ? delegationFn : handler;
  let typeEvent = getTypeEvent(originalTypeEvent);
  const isNative = nativeEvents.has(typeEvent);

  if (!isNative) {
    typeEvent = originalTypeEvent;
  }

  return [delegation, originalHandler, typeEvent];
}

function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
  if (typeof originalTypeEvent !== 'string' || !element) {
    return;
  }

  if (!handler) {
    handler = delegationFn;
    delegationFn = null;
  } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
  // this prevents the handler from being dispatched the same way as mouseover or mouseout does


  if (customEventsRegex.test(originalTypeEvent)) {
    const wrapFn = fn => {
      return function (event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn.call(this, event);
        }
      };
    };

    if (delegationFn) {
      delegationFn = wrapFn(delegationFn);
    } else {
      handler = wrapFn(handler);
    }
  }

  const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
  const events = getEvent(element);
  const handlers = events[typeEvent] || (events[typeEvent] = {});
  const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

  if (previousFn) {
    previousFn.oneOff = previousFn.oneOff && oneOff;
    return;
  }

  const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
  const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
  fn.delegationSelector = delegation ? handler : null;
  fn.originalHandler = originalHandler;
  fn.oneOff = oneOff;
  fn.uidEvent = uid;
  handlers[uid] = fn;
  element.addEventListener(typeEvent, fn, delegation);
}

function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn = findHandler(events[typeEvent], handler, delegationSelector);

  if (!fn) {
    return;
  }

  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
  delete events[typeEvent][fn.uidEvent];
}

function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const storeElementEvent = events[typeEvent] || {};
  Object.keys(storeElementEvent).forEach(handlerKey => {
    if (handlerKey.includes(namespace)) {
      const event = storeElementEvent[handlerKey];
      removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
    }
  });
}

function getTypeEvent(event) {
  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
  event = event.replace(stripNameRegex, '');
  return customEvents[event] || event;
}

const EventHandler = {
  on(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, false);
  },

  one(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, true);
  },

  off(element, originalTypeEvent, handler, delegationFn) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);
    const inNamespace = typeEvent !== originalTypeEvent;
    const events = getEvent(element);
    const isNamespace = originalTypeEvent.startsWith('.');

    if (typeof originalHandler !== 'undefined') {
      // Simplest case: handler is passed, remove that listener ONLY.
      if (!events || !events[typeEvent]) {
        return;
      }

      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
      return;
    }

    if (isNamespace) {
      Object.keys(events).forEach(elementEvent => {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
      });
    }

    const storeElementEvent = events[typeEvent] || {};
    Object.keys(storeElementEvent).forEach(keyHandlers => {
      const handlerKey = keyHandlers.replace(stripUidRegex, '');

      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        const event = storeElementEvent[keyHandlers];
        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
      }
    });
  },

  trigger(element, event, args) {
    if (typeof event !== 'string' || !element) {
      return null;
    }

    const $ = getjQuery();
    const typeEvent = getTypeEvent(event);
    const inNamespace = event !== typeEvent;
    const isNative = nativeEvents.has(typeEvent);
    let jQueryEvent;
    let bubbles = true;
    let nativeDispatch = true;
    let defaultPrevented = false;
    let evt = null;

    if (inNamespace && $) {
      jQueryEvent = $.Event(event, args);
      $(element).trigger(jQueryEvent);
      bubbles = !jQueryEvent.isPropagationStopped();
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
      defaultPrevented = jQueryEvent.isDefaultPrevented();
    }

    if (isNative) {
      evt = document.createEvent('HTMLEvents');
      evt.initEvent(typeEvent, bubbles, true);
    } else {
      evt = new CustomEvent(event, {
        bubbles,
        cancelable: true
      });
    } // merge custom information in our event


    if (typeof args !== 'undefined') {
      Object.keys(args).forEach(key => {
        Object.defineProperty(evt, key, {
          get() {
            return args[key];
          }

        });
      });
    }

    if (defaultPrevented) {
      evt.preventDefault();
    }

    if (nativeDispatch) {
      element.dispatchEvent(evt);
    }

    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
      jQueryEvent.preventDefault();
    }

    return evt;
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */
const elementMap = new Map();
const Data = {
  set(element, key, instance) {
    if (!elementMap.has(element)) {
      elementMap.set(element, new Map());
    }

    const instanceMap = elementMap.get(element); // make it clear we only want one instance per element
    // can be removed later when multiple key/instances are fine to be used

    if (!instanceMap.has(key) && instanceMap.size !== 0) {
      // eslint-disable-next-line no-console
      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
      return;
    }

    instanceMap.set(key, instance);
  },

  get(element, key) {
    if (elementMap.has(element)) {
      return elementMap.get(element).get(key) || null;
    }

    return null;
  },

  remove(element, key) {
    if (!elementMap.has(element)) {
      return;
    }

    const instanceMap = elementMap.get(element);
    instanceMap.delete(key); // free up element references if there are no instances left for an element

    if (instanceMap.size === 0) {
      elementMap.delete(element);
    }
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const VERSION = '5.1.3';

class BaseComponent {
  constructor(element) {
    element = getElement(element);

    if (!element) {
      return;
    }

    this._element = element;
    Data.set(this._element, this.constructor.DATA_KEY, this);
  }

  dispose() {
    Data.remove(this._element, this.constructor.DATA_KEY);
    EventHandler.off(this._element, this.constructor.EVENT_KEY);
    Object.getOwnPropertyNames(this).forEach(propertyName => {
      this[propertyName] = null;
    });
  }

  _queueCallback(callback, element, isAnimated = true) {
    executeAfterTransition(callback, element, isAnimated);
  }
  /** Static */


  static getInstance(element) {
    return Data.get(getElement(element), this.DATA_KEY);
  }

  static getOrCreateInstance(element, config = {}) {
    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);
  }

  static get VERSION() {
    return VERSION;
  }

  static get NAME() {
    throw new Error('You have to implement the static method "NAME", for each component!');
  }

  static get DATA_KEY() {
    return `bs.${this.NAME}`;
  }

  static get EVENT_KEY() {
    return `.${this.DATA_KEY}`;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/component-functions.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

const enableDismissTrigger = (component, method = 'hide') => {
  const clickEvent = `click.dismiss${component.EVENT_KEY}`;
  const name = component.NAME;
  EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    const target = getElementFromSelector(this) || this.closest(`.${name}`);
    const instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

    instance[method]();
  });
};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$d = 'alert';
const DATA_KEY$c = 'bs.alert';
const EVENT_KEY$c = `.${DATA_KEY$c}`;
const EVENT_CLOSE = `close${EVENT_KEY$c}`;
const EVENT_CLOSED = `closed${EVENT_KEY$c}`;
const CLASS_NAME_FADE$5 = 'fade';
const CLASS_NAME_SHOW$8 = 'show';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Alert extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$d;
  } // Public


  close() {
    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

    if (closeEvent.defaultPrevented) {
      return;
    }

    this._element.classList.remove(CLASS_NAME_SHOW$8);

    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
  } // Private


  _destroyElement() {
    this._element.remove();

    EventHandler.trigger(this._element, EVENT_CLOSED);
    this.dispose();
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Alert.getOrCreateInstance(this);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](this);
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


enableDismissTrigger(Alert, 'close');
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Alert to jQuery only if jQuery is present
 */

defineJQueryPlugin(Alert);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$c = 'button';
const DATA_KEY$b = 'bs.button';
const EVENT_KEY$b = `.${DATA_KEY$b}`;
const DATA_API_KEY$7 = '.data-api';
const CLASS_NAME_ACTIVE$3 = 'active';
const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$b}${DATA_API_KEY$7}`;
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Button extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$c;
  } // Public


  toggle() {
    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Button.getOrCreateInstance(this);

      if (config === 'toggle') {
        data[config]();
      }
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, event => {
  event.preventDefault();
  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
  const data = Button.getOrCreateInstance(button);
  data.toggle();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Button to jQuery only if jQuery is present
 */

defineJQueryPlugin(Button);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
function normalizeData(val) {
  if (val === 'true') {
    return true;
  }

  if (val === 'false') {
    return false;
  }

  if (val === Number(val).toString()) {
    return Number(val);
  }

  if (val === '' || val === 'null') {
    return null;
  }

  return val;
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);
}

const Manipulator = {
  setDataAttribute(element, key, value) {
    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
  },

  removeDataAttribute(element, key) {
    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
  },

  getDataAttributes(element) {
    if (!element) {
      return {};
    }

    const attributes = {};
    Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {
      let pureKey = key.replace(/^bs/, '');
      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
      attributes[pureKey] = normalizeData(element.dataset[key]);
    });
    return attributes;
  },

  getDataAttribute(element, key) {
    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
  },

  offset(element) {
    const rect = element.getBoundingClientRect();
    return {
      top: rect.top + window.pageYOffset,
      left: rect.left + window.pageXOffset
    };
  },

  position(element) {
    return {
      top: element.offsetTop,
      left: element.offsetLeft
    };
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const NODE_TEXT = 3;
const SelectorEngine = {
  find(selector, element = document.documentElement) {
    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
  },

  findOne(selector, element = document.documentElement) {
    return Element.prototype.querySelector.call(element, selector);
  },

  children(element, selector) {
    return [].concat(...element.children).filter(child => child.matches(selector));
  },

  parents(element, selector) {
    const parents = [];
    let ancestor = element.parentNode;

    while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
      if (ancestor.matches(selector)) {
        parents.push(ancestor);
      }

      ancestor = ancestor.parentNode;
    }

    return parents;
  },

  prev(element, selector) {
    let previous = element.previousElementSibling;

    while (previous) {
      if (previous.matches(selector)) {
        return [previous];
      }

      previous = previous.previousElementSibling;
    }

    return [];
  },

  next(element, selector) {
    let next = element.nextElementSibling;

    while (next) {
      if (next.matches(selector)) {
        return [next];
      }

      next = next.nextElementSibling;
    }

    return [];
  },

  focusableChildren(element) {
    const focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(selector => `${selector}:not([tabindex^="-"])`).join(', ');
    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el));
  }

};

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$b = 'carousel';
const DATA_KEY$a = 'bs.carousel';
const EVENT_KEY$a = `.${DATA_KEY$a}`;
const DATA_API_KEY$6 = '.data-api';
const ARROW_LEFT_KEY = 'ArrowLeft';
const ARROW_RIGHT_KEY = 'ArrowRight';
const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

const SWIPE_THRESHOLD = 40;
const Default$a = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: 'hover',
  wrap: true,
  touch: true
};
const DefaultType$a = {
  interval: '(number|boolean)',
  keyboard: 'boolean',
  slide: '(boolean|string)',
  pause: '(string|boolean)',
  wrap: 'boolean',
  touch: 'boolean'
};
const ORDER_NEXT = 'next';
const ORDER_PREV = 'prev';
const DIRECTION_LEFT = 'left';
const DIRECTION_RIGHT = 'right';
const KEY_TO_DIRECTION = {
  [ARROW_LEFT_KEY]: DIRECTION_RIGHT,
  [ARROW_RIGHT_KEY]: DIRECTION_LEFT
};
const EVENT_SLIDE = `slide${EVENT_KEY$a}`;
const EVENT_SLID = `slid${EVENT_KEY$a}`;
const EVENT_KEYDOWN = `keydown${EVENT_KEY$a}`;
const EVENT_MOUSEENTER = `mouseenter${EVENT_KEY$a}`;
const EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY$a}`;
const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$a}`;
const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$a}`;
const EVENT_TOUCHEND = `touchend${EVENT_KEY$a}`;
const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$a}`;
const EVENT_POINTERUP = `pointerup${EVENT_KEY$a}`;
const EVENT_DRAG_START = `dragstart${EVENT_KEY$a}`;
const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$a}${DATA_API_KEY$6}`;
const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
const CLASS_NAME_CAROUSEL = 'carousel';
const CLASS_NAME_ACTIVE$2 = 'active';
const CLASS_NAME_SLIDE = 'slide';
const CLASS_NAME_END = 'carousel-item-end';
const CLASS_NAME_START = 'carousel-item-start';
const CLASS_NAME_NEXT = 'carousel-item-next';
const CLASS_NAME_PREV = 'carousel-item-prev';
const CLASS_NAME_POINTER_EVENT = 'pointer-event';
const SELECTOR_ACTIVE$1 = '.active';
const SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
const SELECTOR_ITEM = '.carousel-item';
const SELECTOR_ITEM_IMG = '.carousel-item img';
const SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
const SELECTOR_INDICATORS = '.carousel-indicators';
const SELECTOR_INDICATOR = '[data-bs-target]';
const SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
const POINTER_TYPE_TOUCH = 'touch';
const POINTER_TYPE_PEN = 'pen';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Carousel extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._items = null;
    this._interval = null;
    this._activeElement = null;
    this._isPaused = false;
    this._isSliding = false;
    this.touchTimeout = null;
    this.touchStartX = 0;
    this.touchDeltaX = 0;
    this._config = this._getConfig(config);
    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    this._pointerEvent = Boolean(window.PointerEvent);

    this._addEventListeners();
  } // Getters


  static get Default() {
    return Default$a;
  }

  static get NAME() {
    return NAME$b;
  } // Public


  next() {
    this._slide(ORDER_NEXT);
  }

  nextWhenVisible() {
    // Don't call next when the page isn't visible
    // or the carousel or its parent isn't visible
    if (!document.hidden && isVisible(this._element)) {
      this.next();
    }
  }

  prev() {
    this._slide(ORDER_PREV);
  }

  pause(event) {
    if (!event) {
      this._isPaused = true;
    }

    if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {
      triggerTransitionEnd(this._element);
      this.cycle(true);
    }

    clearInterval(this._interval);
    this._interval = null;
  }

  cycle(event) {
    if (!event) {
      this._isPaused = false;
    }

    if (this._interval) {
      clearInterval(this._interval);
      this._interval = null;
    }

    if (this._config && this._config.interval && !this._isPaused) {
      this._updateInterval();

      this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
    }
  }

  to(index) {
    this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

    const activeIndex = this._getItemIndex(this._activeElement);

    if (index > this._items.length - 1 || index < 0) {
      return;
    }

    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
      return;
    }

    if (activeIndex === index) {
      this.pause();
      this.cycle();
      return;
    }

    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

    this._slide(order, this._items[index]);
  } // Private


  _getConfig(config) {
    config = { ...Default$a,
      ...Manipulator.getDataAttributes(this._element),
      ...(typeof config === 'object' ? config : {})
    };
    typeCheckConfig(NAME$b, config, DefaultType$a);
    return config;
  }

  _handleSwipe() {
    const absDeltax = Math.abs(this.touchDeltaX);

    if (absDeltax <= SWIPE_THRESHOLD) {
      return;
    }

    const direction = absDeltax / this.touchDeltaX;
    this.touchDeltaX = 0;

    if (!direction) {
      return;
    }

    this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
  }

  _addEventListeners() {
    if (this._config.keyboard) {
      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event));
    }

    if (this._config.pause === 'hover') {
      EventHandler.on(this._element, EVENT_MOUSEENTER, event => this.pause(event));
      EventHandler.on(this._element, EVENT_MOUSELEAVE, event => this.cycle(event));
    }

    if (this._config.touch && this._touchSupported) {
      this._addTouchEventListeners();
    }
  }

  _addTouchEventListeners() {
    const hasPointerPenTouch = event => {
      return this._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
    };

    const start = event => {
      if (hasPointerPenTouch(event)) {
        this.touchStartX = event.clientX;
      } else if (!this._pointerEvent) {
        this.touchStartX = event.touches[0].clientX;
      }
    };

    const move = event => {
      // ensure swiping with one touch and not pinching
      this.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this.touchStartX;
    };

    const end = event => {
      if (hasPointerPenTouch(event)) {
        this.touchDeltaX = event.clientX - this.touchStartX;
      }

      this._handleSwipe();

      if (this._config.pause === 'hover') {
        // If it's a touch-enabled device, mouseenter/leave are fired as
        // part of the mouse compatibility events on first tap - the carousel
        // would stop cycling until user tapped out of it;
        // here, we listen for touchend, explicitly pause the carousel
        // (as if it's the second time we tap on it, mouseenter compat event
        // is NOT fired) and after a timeout (to allow for mouse compatibility
        // events to fire) we explicitly restart cycling
        this.pause();

        if (this.touchTimeout) {
          clearTimeout(this.touchTimeout);
        }

        this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
      }
    };

    SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(itemImg => {
      EventHandler.on(itemImg, EVENT_DRAG_START, event => event.preventDefault());
    });

    if (this._pointerEvent) {
      EventHandler.on(this._element, EVENT_POINTERDOWN, event => start(event));
      EventHandler.on(this._element, EVENT_POINTERUP, event => end(event));

      this._element.classList.add(CLASS_NAME_POINTER_EVENT);
    } else {
      EventHandler.on(this._element, EVENT_TOUCHSTART, event => start(event));
      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => move(event));
      EventHandler.on(this._element, EVENT_TOUCHEND, event => end(event));
    }
  }

  _keydown(event) {
    if (/input|textarea/i.test(event.target.tagName)) {
      return;
    }

    const direction = KEY_TO_DIRECTION[event.key];

    if (direction) {
      event.preventDefault();

      this._slide(direction);
    }
  }

  _getItemIndex(element) {
    this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];
    return this._items.indexOf(element);
  }

  _getItemByOrder(order, activeElement) {
    const isNext = order === ORDER_NEXT;
    return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
  }

  _triggerSlideEvent(relatedTarget, eventDirectionName) {
    const targetIndex = this._getItemIndex(relatedTarget);

    const fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));

    return EventHandler.trigger(this._element, EVENT_SLIDE, {
      relatedTarget,
      direction: eventDirectionName,
      from: fromIndex,
      to: targetIndex
    });
  }

  _setActiveIndicatorElement(element) {
    if (this._indicatorsElement) {
      const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);
      activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
      activeIndicator.removeAttribute('aria-current');
      const indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);

      for (let i = 0; i < indicators.length; i++) {
        if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
          indicators[i].classList.add(CLASS_NAME_ACTIVE$2);
          indicators[i].setAttribute('aria-current', 'true');
          break;
        }
      }
    }
  }

  _updateInterval() {
    const element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

    if (!element) {
      return;
    }

    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);

    if (elementInterval) {
      this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
      this._config.interval = elementInterval;
    } else {
      this._config.interval = this._config.defaultInterval || this._config.interval;
    }
  }

  _slide(directionOrOrder, element) {
    const order = this._directionToOrder(directionOrOrder);

    const activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

    const activeElementIndex = this._getItemIndex(activeElement);

    const nextElement = element || this._getItemByOrder(order, activeElement);

    const nextElementIndex = this._getItemIndex(nextElement);

    const isCycling = Boolean(this._interval);
    const isNext = order === ORDER_NEXT;
    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;

    const eventDirectionName = this._orderToDirection(order);

    if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {
      this._isSliding = false;
      return;
    }

    if (this._isSliding) {
      return;
    }

    const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

    if (slideEvent.defaultPrevented) {
      return;
    }

    if (!activeElement || !nextElement) {
      // Some weirdness is happening, so we bail
      return;
    }

    this._isSliding = true;

    if (isCycling) {
      this.pause();
    }

    this._setActiveIndicatorElement(nextElement);

    this._activeElement = nextElement;

    const triggerSlidEvent = () => {
      EventHandler.trigger(this._element, EVENT_SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });
    };

    if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
      nextElement.classList.add(orderClassName);
      reflow(nextElement);
      activeElement.classList.add(directionalClassName);
      nextElement.classList.add(directionalClassName);

      const completeCallBack = () => {
        nextElement.classList.remove(directionalClassName, orderClassName);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
        this._isSliding = false;
        setTimeout(triggerSlidEvent, 0);
      };

      this._queueCallback(completeCallBack, activeElement, true);
    } else {
      activeElement.classList.remove(CLASS_NAME_ACTIVE$2);
      nextElement.classList.add(CLASS_NAME_ACTIVE$2);
      this._isSliding = false;
      triggerSlidEvent();
    }

    if (isCycling) {
      this.cycle();
    }
  }

  _directionToOrder(direction) {
    if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {
      return direction;
    }

    if (isRTL()) {
      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
    }

    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
  }

  _orderToDirection(order) {
    if (![ORDER_NEXT, ORDER_PREV].includes(order)) {
      return order;
    }

    if (isRTL()) {
      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }

    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
  } // Static


  static carouselInterface(element, config) {
    const data = Carousel.getOrCreateInstance(element, config);
    let {
      _config
    } = data;

    if (typeof config === 'object') {
      _config = { ..._config,
        ...config
      };
    }

    const action = typeof config === 'string' ? config : _config.slide;

    if (typeof config === 'number') {
      data.to(config);
    } else if (typeof action === 'string') {
      if (typeof data[action] === 'undefined') {
        throw new TypeError(`No method named "${action}"`);
      }

      data[action]();
    } else if (_config.interval && _config.ride) {
      data.pause();
      data.cycle();
    }
  }

  static jQueryInterface(config) {
    return this.each(function () {
      Carousel.carouselInterface(this, config);
    });
  }

  static dataApiClickHandler(event) {
    const target = getElementFromSelector(this);

    if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
      return;
    }

    const config = { ...Manipulator.getDataAttributes(target),
      ...Manipulator.getDataAttributes(this)
    };
    const slideIndex = this.getAttribute('data-bs-slide-to');

    if (slideIndex) {
      config.interval = false;
    }

    Carousel.carouselInterface(target, config);

    if (slideIndex) {
      Carousel.getInstance(target).to(slideIndex);
    }

    event.preventDefault();
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

  for (let i = 0, len = carousels.length; i < len; i++) {
    Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
  }
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Carousel to jQuery only if jQuery is present
 */

defineJQueryPlugin(Carousel);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$a = 'collapse';
const DATA_KEY$9 = 'bs.collapse';
const EVENT_KEY$9 = `.${DATA_KEY$9}`;
const DATA_API_KEY$5 = '.data-api';
const Default$9 = {
  toggle: true,
  parent: null
};
const DefaultType$9 = {
  toggle: 'boolean',
  parent: '(null|element)'
};
const EVENT_SHOW$5 = `show${EVENT_KEY$9}`;
const EVENT_SHOWN$5 = `shown${EVENT_KEY$9}`;
const EVENT_HIDE$5 = `hide${EVENT_KEY$9}`;
const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$9}`;
const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$9}${DATA_API_KEY$5}`;
const CLASS_NAME_SHOW$7 = 'show';
const CLASS_NAME_COLLAPSE = 'collapse';
const CLASS_NAME_COLLAPSING = 'collapsing';
const CLASS_NAME_COLLAPSED = 'collapsed';
const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
const CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
const WIDTH = 'width';
const HEIGHT = 'height';
const SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Collapse extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._isTransitioning = false;
    this._config = this._getConfig(config);
    this._triggerArray = [];
    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

    for (let i = 0, len = toggleList.length; i < len; i++) {
      const elem = toggleList[i];
      const selector = getSelectorFromElement(elem);
      const filterElement = SelectorEngine.find(selector).filter(foundElem => foundElem === this._element);

      if (selector !== null && filterElement.length) {
        this._selector = selector;

        this._triggerArray.push(elem);
      }
    }

    this._initializeChildren();

    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
    }

    if (this._config.toggle) {
      this.toggle();
    }
  } // Getters


  static get Default() {
    return Default$9;
  }

  static get NAME() {
    return NAME$a;
  } // Public


  toggle() {
    if (this._isShown()) {
      this.hide();
    } else {
      this.show();
    }
  }

  show() {
    if (this._isTransitioning || this._isShown()) {
      return;
    }

    let actives = [];
    let activesData;

    if (this._config.parent) {
      const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(elem => !children.includes(elem)); // remove children if greater depth
    }

    const container = SelectorEngine.findOne(this._selector);

    if (actives.length) {
      const tempActiveData = actives.find(elem => container !== elem);
      activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

      if (activesData && activesData._isTransitioning) {
        return;
      }
    }

    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);

    if (startEvent.defaultPrevented) {
      return;
    }

    actives.forEach(elemActive => {
      if (container !== elemActive) {
        Collapse.getOrCreateInstance(elemActive, {
          toggle: false
        }).hide();
      }

      if (!activesData) {
        Data.set(elemActive, DATA_KEY$9, null);
      }
    });

    const dimension = this._getDimension();

    this._element.classList.remove(CLASS_NAME_COLLAPSE);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.style[dimension] = 0;

    this._addAriaAndCollapsedClass(this._triggerArray, true);

    this._isTransitioning = true;

    const complete = () => {
      this._isTransitioning = false;

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

      this._element.style[dimension] = '';
      EventHandler.trigger(this._element, EVENT_SHOWN$5);
    };

    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = `scroll${capitalizedDimension}`;

    this._queueCallback(complete, this._element, true);

    this._element.style[dimension] = `${this._element[scrollSize]}px`;
  }

  hide() {
    if (this._isTransitioning || !this._isShown()) {
      return;
    }

    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);

    if (startEvent.defaultPrevented) {
      return;
    }

    const dimension = this._getDimension();

    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
    reflow(this._element);

    this._element.classList.add(CLASS_NAME_COLLAPSING);

    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

    const triggerArrayLength = this._triggerArray.length;

    for (let i = 0; i < triggerArrayLength; i++) {
      const trigger = this._triggerArray[i];
      const elem = getElementFromSelector(trigger);

      if (elem && !this._isShown(elem)) {
        this._addAriaAndCollapsedClass([trigger], false);
      }
    }

    this._isTransitioning = true;

    const complete = () => {
      this._isTransitioning = false;

      this._element.classList.remove(CLASS_NAME_COLLAPSING);

      this._element.classList.add(CLASS_NAME_COLLAPSE);

      EventHandler.trigger(this._element, EVENT_HIDDEN$5);
    };

    this._element.style[dimension] = '';

    this._queueCallback(complete, this._element, true);
  }

  _isShown(element = this._element) {
    return element.classList.contains(CLASS_NAME_SHOW$7);
  } // Private


  _getConfig(config) {
    config = { ...Default$9,
      ...Manipulator.getDataAttributes(this._element),
      ...config
    };
    config.toggle = Boolean(config.toggle); // Coerce string values

    config.parent = getElement(config.parent);
    typeCheckConfig(NAME$a, config, DefaultType$9);
    return config;
  }

  _getDimension() {
    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
  }

  _initializeChildren() {
    if (!this._config.parent) {
      return;
    }

    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
    SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(elem => !children.includes(elem)).forEach(element => {
      const selected = getElementFromSelector(element);

      if (selected) {
        this._addAriaAndCollapsedClass([element], this._isShown(selected));
      }
    });
  }

  _addAriaAndCollapsedClass(triggerArray, isOpen) {
    if (!triggerArray.length) {
      return;
    }

    triggerArray.forEach(elem => {
      if (isOpen) {
        elem.classList.remove(CLASS_NAME_COLLAPSED);
      } else {
        elem.classList.add(CLASS_NAME_COLLAPSED);
      }

      elem.setAttribute('aria-expanded', isOpen);
    });
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const _config = {};

      if (typeof config === 'string' && /show|hide/.test(config)) {
        _config.toggle = false;
      }

      const data = Collapse.getOrCreateInstance(this, _config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
    event.preventDefault();
  }

  const selector = getSelectorFromElement(this);
  const selectorElements = SelectorEngine.find(selector);
  selectorElements.forEach(element => {
    Collapse.getOrCreateInstance(element, {
      toggle: false
    }).toggle();
  });
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Collapse to jQuery only if jQuery is present
 */

defineJQueryPlugin(Collapse);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$9 = 'dropdown';
const DATA_KEY$8 = 'bs.dropdown';
const EVENT_KEY$8 = `.${DATA_KEY$8}`;
const DATA_API_KEY$4 = '.data-api';
const ESCAPE_KEY$2 = 'Escape';
const SPACE_KEY = 'Space';
const TAB_KEY$1 = 'Tab';
const ARROW_UP_KEY = 'ArrowUp';
const ARROW_DOWN_KEY = 'ArrowDown';
const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

const REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEY}|${ARROW_DOWN_KEY}|${ESCAPE_KEY$2}`);
const EVENT_HIDE$4 = `hide${EVENT_KEY$8}`;
const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$8}`;
const EVENT_SHOW$4 = `show${EVENT_KEY$8}`;
const EVENT_SHOWN$4 = `shown${EVENT_KEY$8}`;
const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$8}${DATA_API_KEY$4}`;
const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$8}${DATA_API_KEY$4}`;
const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$8}${DATA_API_KEY$4}`;
const CLASS_NAME_SHOW$6 = 'show';
const CLASS_NAME_DROPUP = 'dropup';
const CLASS_NAME_DROPEND = 'dropend';
const CLASS_NAME_DROPSTART = 'dropstart';
const CLASS_NAME_NAVBAR = 'navbar';
const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]';
const SELECTOR_MENU = '.dropdown-menu';
const SELECTOR_NAVBAR_NAV = '.navbar-nav';
const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
const Default$8 = {
  offset: [0, 2],
  boundary: 'clippingParents',
  reference: 'toggle',
  display: 'dynamic',
  popperConfig: null,
  autoClose: true
};
const DefaultType$8 = {
  offset: '(array|string|function)',
  boundary: '(string|element)',
  reference: '(string|element|object)',
  display: 'string',
  popperConfig: '(null|object|function)',
  autoClose: '(boolean|string)'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Dropdown extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._popper = null;
    this._config = this._getConfig(config);
    this._menu = this._getMenuElement();
    this._inNavbar = this._detectNavbar();
  } // Getters


  static get Default() {
    return Default$8;
  }

  static get DefaultType() {
    return DefaultType$8;
  }

  static get NAME() {
    return NAME$9;
  } // Public


  toggle() {
    return this._isShown() ? this.hide() : this.show();
  }

  show() {
    if (isDisabled(this._element) || this._isShown(this._menu)) {
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);

    if (showEvent.defaultPrevented) {
      return;
    }

    const parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

    if (this._inNavbar) {
      Manipulator.setDataAttribute(this._menu, 'popper', 'none');
    } else {
      this._createPopper(parent);
    } // If this is a touch-enabled device we add extra
    // empty mouseover listeners to the body's immediate children;
    // only needed because of broken event delegation on iOS
    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


    if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
      [].concat(...document.body.children).forEach(elem => EventHandler.on(elem, 'mouseover', noop));
    }

    this._element.focus();

    this._element.setAttribute('aria-expanded', true);

    this._menu.classList.add(CLASS_NAME_SHOW$6);

    this._element.classList.add(CLASS_NAME_SHOW$6);

    EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);
  }

  hide() {
    if (isDisabled(this._element) || !this._isShown(this._menu)) {
      return;
    }

    const relatedTarget = {
      relatedTarget: this._element
    };

    this._completeHide(relatedTarget);
  }

  dispose() {
    if (this._popper) {
      this._popper.destroy();
    }

    super.dispose();
  }

  update() {
    this._inNavbar = this._detectNavbar();

    if (this._popper) {
      this._popper.update();
    }
  } // Private


  _completeHide(relatedTarget) {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);

    if (hideEvent.defaultPrevented) {
      return;
    } // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support


    if ('ontouchstart' in document.documentElement) {
      [].concat(...document.body.children).forEach(elem => EventHandler.off(elem, 'mouseover', noop));
    }

    if (this._popper) {
      this._popper.destroy();
    }

    this._menu.classList.remove(CLASS_NAME_SHOW$6);

    this._element.classList.remove(CLASS_NAME_SHOW$6);

    this._element.setAttribute('aria-expanded', 'false');

    Manipulator.removeDataAttribute(this._menu, 'popper');
    EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);
  }

  _getConfig(config) {
    config = { ...this.constructor.Default,
      ...Manipulator.getDataAttributes(this._element),
      ...config
    };
    typeCheckConfig(NAME$9, config, this.constructor.DefaultType);

    if (typeof config.reference === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
      // Popper virtual elements require a getBoundingClientRect method
      throw new TypeError(`${NAME$9.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
    }

    return config;
  }

  _createPopper(parent) {
    if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {
      throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
    }

    let referenceElement = this._element;

    if (this._config.reference === 'parent') {
      referenceElement = parent;
    } else if (isElement(this._config.reference)) {
      referenceElement = getElement(this._config.reference);
    } else if (typeof this._config.reference === 'object') {
      referenceElement = this._config.reference;
    }

    const popperConfig = this._getPopperConfig();

    const isDisplayStatic = popperConfig.modifiers.find(modifier => modifier.name === 'applyStyles' && modifier.enabled === false);
    this._popper = _popperjs_core__WEBPACK_IMPORTED_MODULE_1__.createPopper(referenceElement, this._menu, popperConfig);

    if (isDisplayStatic) {
      Manipulator.setDataAttribute(this._menu, 'popper', 'static');
    }
  }

  _isShown(element = this._element) {
    return element.classList.contains(CLASS_NAME_SHOW$6);
  }

  _getMenuElement() {
    return SelectorEngine.next(this._element, SELECTOR_MENU)[0];
  }

  _getPlacement() {
    const parentDropdown = this._element.parentNode;

    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
      return PLACEMENT_RIGHT;
    }

    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
      return PLACEMENT_LEFT;
    } // We need to trim the value because custom properties can also include spaces


    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
    }

    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
  }

  _detectNavbar() {
    return this._element.closest(`.${CLASS_NAME_NAVBAR}`) !== null;
  }

  _getOffset() {
    const {
      offset
    } = this._config;

    if (typeof offset === 'string') {
      return offset.split(',').map(val => Number.parseInt(val, 10));
    }

    if (typeof offset === 'function') {
      return popperData => offset(popperData, this._element);
    }

    return offset;
  }

  _getPopperConfig() {
    const defaultBsPopperConfig = {
      placement: this._getPlacement(),
      modifiers: [{
        name: 'preventOverflow',
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: 'offset',
        options: {
          offset: this._getOffset()
        }
      }]
    }; // Disable Popper if we have a static display

    if (this._config.display === 'static') {
      defaultBsPopperConfig.modifiers = [{
        name: 'applyStyles',
        enabled: false
      }];
    }

    return { ...defaultBsPopperConfig,
      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
    };
  }

  _selectMenuItem({
    key,
    target
  }) {
    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

    if (!items.length) {
      return;
    } // if target isn't included in items (e.g. when expanding the dropdown)
    // allow cycling to get the last item in case key equals ARROW_UP_KEY


    getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Dropdown.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

  static clearMenus(event) {
    if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {
      return;
    }

    const toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);

    for (let i = 0, len = toggles.length; i < len; i++) {
      const context = Dropdown.getInstance(toggles[i]);

      if (!context || context._config.autoClose === false) {
        continue;
      }

      if (!context._isShown()) {
        continue;
      }

      const relatedTarget = {
        relatedTarget: context._element
      };

      if (event) {
        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context._menu);

        if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
          continue;
        } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


        if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue;
        }

        if (event.type === 'click') {
          relatedTarget.clickEvent = event;
        }
      }

      context._completeHide(relatedTarget);
    }
  }

  static getParentFromElement(element) {
    return getElementFromSelector(element) || element.parentNode;
  }

  static dataApiKeydownHandler(event) {
    // If not input/textarea:
    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
    // If input/textarea:
    //  - If space key => not a dropdown command
    //  - If key is other than escape
    //    - If key is not up or down => not a dropdown command
    //    - If trigger inside the menu => not a dropdown command
    if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
      return;
    }

    const isActive = this.classList.contains(CLASS_NAME_SHOW$6);

    if (!isActive && event.key === ESCAPE_KEY$2) {
      return;
    }

    event.preventDefault();
    event.stopPropagation();

    if (isDisabled(this)) {
      return;
    }

    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];
    const instance = Dropdown.getOrCreateInstance(getToggleButton);

    if (event.key === ESCAPE_KEY$2) {
      instance.hide();
      return;
    }

    if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
      if (!isActive) {
        instance.show();
      }

      instance._selectMenuItem(event);

      return;
    }

    if (!isActive || event.key === SPACE_KEY) {
      Dropdown.clearMenus();
    }
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
  event.preventDefault();
  Dropdown.getOrCreateInstance(this).toggle();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Dropdown to jQuery only if jQuery is present
 */

defineJQueryPlugin(Dropdown);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/scrollBar.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
const SELECTOR_STICKY_CONTENT = '.sticky-top';

class ScrollBarHelper {
  constructor() {
    this._element = document.body;
  }

  getWidth() {
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
    const documentWidth = document.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  hide() {
    const width = this.getWidth();

    this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


    this._setElementAttributes(this._element, 'paddingRight', calculatedValue => calculatedValue + width); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


    this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', calculatedValue => calculatedValue + width);

    this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', calculatedValue => calculatedValue - width);
  }

  _disableOverFlow() {
    this._saveInitialAttribute(this._element, 'overflow');

    this._element.style.overflow = 'hidden';
  }

  _setElementAttributes(selector, styleProp, callback) {
    const scrollbarWidth = this.getWidth();

    const manipulationCallBack = element => {
      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
        return;
      }

      this._saveInitialAttribute(element, styleProp);

      const calculatedValue = window.getComputedStyle(element)[styleProp];
      element.style[styleProp] = `${callback(Number.parseFloat(calculatedValue))}px`;
    };

    this._applyManipulationCallback(selector, manipulationCallBack);
  }

  reset() {
    this._resetElementAttributes(this._element, 'overflow');

    this._resetElementAttributes(this._element, 'paddingRight');

    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');

    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
  }

  _saveInitialAttribute(element, styleProp) {
    const actualValue = element.style[styleProp];

    if (actualValue) {
      Manipulator.setDataAttribute(element, styleProp, actualValue);
    }
  }

  _resetElementAttributes(selector, styleProp) {
    const manipulationCallBack = element => {
      const value = Manipulator.getDataAttribute(element, styleProp);

      if (typeof value === 'undefined') {
        element.style.removeProperty(styleProp);
      } else {
        Manipulator.removeDataAttribute(element, styleProp);
        element.style[styleProp] = value;
      }
    };

    this._applyManipulationCallback(selector, manipulationCallBack);
  }

  _applyManipulationCallback(selector, callBack) {
    if (isElement(selector)) {
      callBack(selector);
    } else {
      SelectorEngine.find(selector, this._element).forEach(callBack);
    }
  }

  isOverflowing() {
    return this.getWidth() > 0;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/backdrop.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const Default$7 = {
  className: 'modal-backdrop',
  isVisible: true,
  // if false, we use the backdrop helper without adding any element to the dom
  isAnimated: false,
  rootElement: 'body',
  // give the choice to place backdrop under different elements
  clickCallback: null
};
const DefaultType$7 = {
  className: 'string',
  isVisible: 'boolean',
  isAnimated: 'boolean',
  rootElement: '(element|string)',
  clickCallback: '(function|null)'
};
const NAME$8 = 'backdrop';
const CLASS_NAME_FADE$4 = 'fade';
const CLASS_NAME_SHOW$5 = 'show';
const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$8}`;

class Backdrop {
  constructor(config) {
    this._config = this._getConfig(config);
    this._isAppended = false;
    this._element = null;
  }

  show(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }

    this._append();

    if (this._config.isAnimated) {
      reflow(this._getElement());
    }

    this._getElement().classList.add(CLASS_NAME_SHOW$5);

    this._emulateAnimation(() => {
      execute(callback);
    });
  }

  hide(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }

    this._getElement().classList.remove(CLASS_NAME_SHOW$5);

    this._emulateAnimation(() => {
      this.dispose();
      execute(callback);
    });
  } // Private


  _getElement() {
    if (!this._element) {
      const backdrop = document.createElement('div');
      backdrop.className = this._config.className;

      if (this._config.isAnimated) {
        backdrop.classList.add(CLASS_NAME_FADE$4);
      }

      this._element = backdrop;
    }

    return this._element;
  }

  _getConfig(config) {
    config = { ...Default$7,
      ...(typeof config === 'object' ? config : {})
    }; // use getElement() with the default "body" to get a fresh Element on each instantiation

    config.rootElement = getElement(config.rootElement);
    typeCheckConfig(NAME$8, config, DefaultType$7);
    return config;
  }

  _append() {
    if (this._isAppended) {
      return;
    }

    this._config.rootElement.append(this._getElement());

    EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, () => {
      execute(this._config.clickCallback);
    });
    this._isAppended = true;
  }

  dispose() {
    if (!this._isAppended) {
      return;
    }

    EventHandler.off(this._element, EVENT_MOUSEDOWN);

    this._element.remove();

    this._isAppended = false;
  }

  _emulateAnimation(callback) {
    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/focustrap.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const Default$6 = {
  trapElement: null,
  // The element to trap focus inside of
  autofocus: true
};
const DefaultType$6 = {
  trapElement: 'element',
  autofocus: 'boolean'
};
const NAME$7 = 'focustrap';
const DATA_KEY$7 = 'bs.focustrap';
const EVENT_KEY$7 = `.${DATA_KEY$7}`;
const EVENT_FOCUSIN$1 = `focusin${EVENT_KEY$7}`;
const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$7}`;
const TAB_KEY = 'Tab';
const TAB_NAV_FORWARD = 'forward';
const TAB_NAV_BACKWARD = 'backward';

class FocusTrap {
  constructor(config) {
    this._config = this._getConfig(config);
    this._isActive = false;
    this._lastTabNavDirection = null;
  }

  activate() {
    const {
      trapElement,
      autofocus
    } = this._config;

    if (this._isActive) {
      return;
    }

    if (autofocus) {
      trapElement.focus();
    }

    EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop

    EventHandler.on(document, EVENT_FOCUSIN$1, event => this._handleFocusin(event));
    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event));
    this._isActive = true;
  }

  deactivate() {
    if (!this._isActive) {
      return;
    }

    this._isActive = false;
    EventHandler.off(document, EVENT_KEY$7);
  } // Private


  _handleFocusin(event) {
    const {
      target
    } = event;
    const {
      trapElement
    } = this._config;

    if (target === document || target === trapElement || trapElement.contains(target)) {
      return;
    }

    const elements = SelectorEngine.focusableChildren(trapElement);

    if (elements.length === 0) {
      trapElement.focus();
    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
      elements[elements.length - 1].focus();
    } else {
      elements[0].focus();
    }
  }

  _handleKeydown(event) {
    if (event.key !== TAB_KEY) {
      return;
    }

    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
  }

  _getConfig(config) {
    config = { ...Default$6,
      ...(typeof config === 'object' ? config : {})
    };
    typeCheckConfig(NAME$7, config, DefaultType$6);
    return config;
  }

}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$6 = 'modal';
const DATA_KEY$6 = 'bs.modal';
const EVENT_KEY$6 = `.${DATA_KEY$6}`;
const DATA_API_KEY$3 = '.data-api';
const ESCAPE_KEY$1 = 'Escape';
const Default$5 = {
  backdrop: true,
  keyboard: true,
  focus: true
};
const DefaultType$5 = {
  backdrop: '(boolean|string)',
  keyboard: 'boolean',
  focus: 'boolean'
};
const EVENT_HIDE$3 = `hide${EVENT_KEY$6}`;
const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$6}`;
const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$6}`;
const EVENT_SHOW$3 = `show${EVENT_KEY$6}`;
const EVENT_SHOWN$3 = `shown${EVENT_KEY$6}`;
const EVENT_RESIZE = `resize${EVENT_KEY$6}`;
const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$6}`;
const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$6}`;
const EVENT_MOUSEUP_DISMISS = `mouseup.dismiss${EVENT_KEY$6}`;
const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$6}`;
const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
const CLASS_NAME_OPEN = 'modal-open';
const CLASS_NAME_FADE$3 = 'fade';
const CLASS_NAME_SHOW$4 = 'show';
const CLASS_NAME_STATIC = 'modal-static';
const OPEN_SELECTOR$1 = '.modal.show';
const SELECTOR_DIALOG = '.modal-dialog';
const SELECTOR_MODAL_BODY = '.modal-body';
const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Modal extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._config = this._getConfig(config);
    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._isShown = false;
    this._ignoreBackdropClick = false;
    this._isTransitioning = false;
    this._scrollBar = new ScrollBarHelper();
  } // Getters


  static get Default() {
    return Default$5;
  }

  static get NAME() {
    return NAME$6;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
      relatedTarget
    });

    if (showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;

    if (this._isAnimated()) {
      this._isTransitioning = true;
    }

    this._scrollBar.hide();

    document.body.classList.add(CLASS_NAME_OPEN);

    this._adjustDialog();

    this._setEscapeEvent();

    this._setResizeEvent();

    EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, () => {
      EventHandler.one(this._element, EVENT_MOUSEUP_DISMISS, event => {
        if (event.target === this._element) {
          this._ignoreBackdropClick = true;
        }
      });
    });

    this._showBackdrop(() => this._showElement(relatedTarget));
  }

  hide() {
    if (!this._isShown || this._isTransitioning) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._isShown = false;

    const isAnimated = this._isAnimated();

    if (isAnimated) {
      this._isTransitioning = true;
    }

    this._setEscapeEvent();

    this._setResizeEvent();

    this._focustrap.deactivate();

    this._element.classList.remove(CLASS_NAME_SHOW$4);

    EventHandler.off(this._element, EVENT_CLICK_DISMISS);
    EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);

    this._queueCallback(() => this._hideModal(), this._element, isAnimated);
  }

  dispose() {
    [window, this._dialog].forEach(htmlElement => EventHandler.off(htmlElement, EVENT_KEY$6));

    this._backdrop.dispose();

    this._focustrap.deactivate();

    super.dispose();
  }

  handleUpdate() {
    this._adjustDialog();
  } // Private


  _initializeBackDrop() {
    return new Backdrop({
      isVisible: Boolean(this._config.backdrop),
      // 'static' option will be translated to true, and booleans will keep their value
      isAnimated: this._isAnimated()
    });
  }

  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }

  _getConfig(config) {
    config = { ...Default$5,
      ...Manipulator.getDataAttributes(this._element),
      ...(typeof config === 'object' ? config : {})
    };
    typeCheckConfig(NAME$6, config, DefaultType$5);
    return config;
  }

  _showElement(relatedTarget) {
    const isAnimated = this._isAnimated();

    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
      // Don't move modal's DOM position
      document.body.append(this._element);
    }

    this._element.style.display = 'block';

    this._element.removeAttribute('aria-hidden');

    this._element.setAttribute('aria-modal', true);

    this._element.setAttribute('role', 'dialog');

    this._element.scrollTop = 0;

    if (modalBody) {
      modalBody.scrollTop = 0;
    }

    if (isAnimated) {
      reflow(this._element);
    }

    this._element.classList.add(CLASS_NAME_SHOW$4);

    const transitionComplete = () => {
      if (this._config.focus) {
        this._focustrap.activate();
      }

      this._isTransitioning = false;
      EventHandler.trigger(this._element, EVENT_SHOWN$3, {
        relatedTarget
      });
    };

    this._queueCallback(transitionComplete, this._dialog, isAnimated);
  }

  _setEscapeEvent() {
    if (this._isShown) {
      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, event => {
        if (this._config.keyboard && event.key === ESCAPE_KEY$1) {
          event.preventDefault();
          this.hide();
        } else if (!this._config.keyboard && event.key === ESCAPE_KEY$1) {
          this._triggerBackdropTransition();
        }
      });
    } else {
      EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);
    }
  }

  _setResizeEvent() {
    if (this._isShown) {
      EventHandler.on(window, EVENT_RESIZE, () => this._adjustDialog());
    } else {
      EventHandler.off(window, EVENT_RESIZE);
    }
  }

  _hideModal() {
    this._element.style.display = 'none';

    this._element.setAttribute('aria-hidden', true);

    this._element.removeAttribute('aria-modal');

    this._element.removeAttribute('role');

    this._isTransitioning = false;

    this._backdrop.hide(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);

      this._resetAdjustments();

      this._scrollBar.reset();

      EventHandler.trigger(this._element, EVENT_HIDDEN$3);
    });
  }

  _showBackdrop(callback) {
    EventHandler.on(this._element, EVENT_CLICK_DISMISS, event => {
      if (this._ignoreBackdropClick) {
        this._ignoreBackdropClick = false;
        return;
      }

      if (event.target !== event.currentTarget) {
        return;
      }

      if (this._config.backdrop === true) {
        this.hide();
      } else if (this._config.backdrop === 'static') {
        this._triggerBackdropTransition();
      }
    });

    this._backdrop.show(callback);
  }

  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_FADE$3);
  }

  _triggerBackdropTransition() {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const {
      classList,
      scrollHeight,
      style
    } = this._element;
    const isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed

    if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {
      return;
    }

    if (!isModalOverflowing) {
      style.overflowY = 'hidden';
    }

    classList.add(CLASS_NAME_STATIC);

    this._queueCallback(() => {
      classList.remove(CLASS_NAME_STATIC);

      if (!isModalOverflowing) {
        this._queueCallback(() => {
          style.overflowY = '';
        }, this._dialog);
      }
    }, this._dialog);

    this._element.focus();
  } // ----------------------------------------------------------------------
  // the following methods are used to handle overflowing modals
  // ----------------------------------------------------------------------


  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

    const scrollbarWidth = this._scrollBar.getWidth();

    const isBodyOverflowing = scrollbarWidth > 0;

    if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {
      this._element.style.paddingLeft = `${scrollbarWidth}px`;
    }

    if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {
      this._element.style.paddingRight = `${scrollbarWidth}px`;
    }
  }

  _resetAdjustments() {
    this._element.style.paddingLeft = '';
    this._element.style.paddingRight = '';
  } // Static


  static jQueryInterface(config, relatedTarget) {
    return this.each(function () {
      const data = Modal.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](relatedTarget);
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
  const target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  EventHandler.one(target, EVENT_SHOW$3, showEvent => {
    if (showEvent.defaultPrevented) {
      // only register focus restorer if modal will actually get shown
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$3, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
  }); // avoid conflict when clicking moddal toggler while another one is open

  const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);

  if (allReadyOpen) {
    Modal.getInstance(allReadyOpen).hide();
  }

  const data = Modal.getOrCreateInstance(target);
  data.toggle(this);
});
enableDismissTrigger(Modal);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Modal to jQuery only if jQuery is present
 */

defineJQueryPlugin(Modal);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): offcanvas.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$5 = 'offcanvas';
const DATA_KEY$5 = 'bs.offcanvas';
const EVENT_KEY$5 = `.${DATA_KEY$5}`;
const DATA_API_KEY$2 = '.data-api';
const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$5}${DATA_API_KEY$2}`;
const ESCAPE_KEY = 'Escape';
const Default$4 = {
  backdrop: true,
  keyboard: true,
  scroll: false
};
const DefaultType$4 = {
  backdrop: 'boolean',
  keyboard: 'boolean',
  scroll: 'boolean'
};
const CLASS_NAME_SHOW$3 = 'show';
const CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
const OPEN_SELECTOR = '.offcanvas.show';
const EVENT_SHOW$2 = `show${EVENT_KEY$5}`;
const EVENT_SHOWN$2 = `shown${EVENT_KEY$5}`;
const EVENT_HIDE$2 = `hide${EVENT_KEY$5}`;
const EVENT_HIDDEN$2 = `hidden${EVENT_KEY$5}`;
const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$5}${DATA_API_KEY$2}`;
const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$5}`;
const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Offcanvas extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._config = this._getConfig(config);
    this._isShown = false;
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();

    this._addEventListeners();
  } // Getters


  static get NAME() {
    return NAME$5;
  }

  static get Default() {
    return Default$4;
  } // Public


  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }

  show(relatedTarget) {
    if (this._isShown) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {
      relatedTarget
    });

    if (showEvent.defaultPrevented) {
      return;
    }

    this._isShown = true;
    this._element.style.visibility = 'visible';

    this._backdrop.show();

    if (!this._config.scroll) {
      new ScrollBarHelper().hide();
    }

    this._element.removeAttribute('aria-hidden');

    this._element.setAttribute('aria-modal', true);

    this._element.setAttribute('role', 'dialog');

    this._element.classList.add(CLASS_NAME_SHOW$3);

    const completeCallBack = () => {
      if (!this._config.scroll) {
        this._focustrap.activate();
      }

      EventHandler.trigger(this._element, EVENT_SHOWN$2, {
        relatedTarget
      });
    };

    this._queueCallback(completeCallBack, this._element, true);
  }

  hide() {
    if (!this._isShown) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);

    if (hideEvent.defaultPrevented) {
      return;
    }

    this._focustrap.deactivate();

    this._element.blur();

    this._isShown = false;

    this._element.classList.remove(CLASS_NAME_SHOW$3);

    this._backdrop.hide();

    const completeCallback = () => {
      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      this._element.style.visibility = 'hidden';

      if (!this._config.scroll) {
        new ScrollBarHelper().reset();
      }

      EventHandler.trigger(this._element, EVENT_HIDDEN$2);
    };

    this._queueCallback(completeCallback, this._element, true);
  }

  dispose() {
    this._backdrop.dispose();

    this._focustrap.deactivate();

    super.dispose();
  } // Private


  _getConfig(config) {
    config = { ...Default$4,
      ...Manipulator.getDataAttributes(this._element),
      ...(typeof config === 'object' ? config : {})
    };
    typeCheckConfig(NAME$5, config, DefaultType$4);
    return config;
  }

  _initializeBackDrop() {
    return new Backdrop({
      className: CLASS_NAME_BACKDROP,
      isVisible: this._config.backdrop,
      isAnimated: true,
      rootElement: this._element.parentNode,
      clickCallback: () => this.hide()
    });
  }

  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }

  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {
      if (this._config.keyboard && event.key === ESCAPE_KEY) {
        this.hide();
      }
    });
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Offcanvas.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config](this);
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
  const target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  EventHandler.one(target, EVENT_HIDDEN$2, () => {
    // focus on trigger when it is closed
    if (isVisible(this)) {
      this.focus();
    }
  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

  const allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

  if (allReadyOpen && allReadyOpen !== target) {
    Offcanvas.getInstance(allReadyOpen).hide();
  }

  const data = Offcanvas.getOrCreateInstance(target);
  data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => SelectorEngine.find(OPEN_SELECTOR).forEach(el => Offcanvas.getOrCreateInstance(el).show()));
enableDismissTrigger(Offcanvas);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

defineJQueryPlugin(Offcanvas);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
const uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

const allowedAttribute = (attribute, allowedAttributeList) => {
  const attributeName = attribute.nodeName.toLowerCase();

  if (allowedAttributeList.includes(attributeName)) {
    if (uriAttributes.has(attributeName)) {
      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
    }

    return true;
  }

  const regExp = allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp); // Check if a regular expression validates the attribute.

  for (let i = 0, len = regExp.length; i < len; i++) {
    if (regExp[i].test(attributeName)) {
      return true;
    }
  }

  return false;
};

const DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
  a: ['target', 'href', 'title', 'rel'],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFn && typeof sanitizeFn === 'function') {
    return sanitizeFn(unsafeHtml);
  }

  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
  const elements = [].concat(...createdDocument.body.querySelectorAll('*'));

  for (let i = 0, len = elements.length; i < len; i++) {
    const element = elements[i];
    const elementName = element.nodeName.toLowerCase();

    if (!Object.keys(allowList).includes(elementName)) {
      element.remove();
      continue;
    }

    const attributeList = [].concat(...element.attributes);
    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
    attributeList.forEach(attribute => {
      if (!allowedAttribute(attribute, allowedAttributes)) {
        element.removeAttribute(attribute.nodeName);
      }
    });
  }

  return createdDocument.body.innerHTML;
}

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$4 = 'tooltip';
const DATA_KEY$4 = 'bs.tooltip';
const EVENT_KEY$4 = `.${DATA_KEY$4}`;
const CLASS_PREFIX$1 = 'bs-tooltip';
const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
const DefaultType$3 = {
  animation: 'boolean',
  template: 'string',
  title: '(string|element|function)',
  trigger: 'string',
  delay: '(number|object)',
  html: 'boolean',
  selector: '(string|boolean)',
  placement: '(string|function)',
  offset: '(array|string|function)',
  container: '(string|element|boolean)',
  fallbackPlacements: 'array',
  boundary: '(string|element)',
  customClass: '(string|function)',
  sanitize: 'boolean',
  sanitizeFn: '(null|function)',
  allowList: 'object',
  popperConfig: '(null|object|function)'
};
const AttachmentMap = {
  AUTO: 'auto',
  TOP: 'top',
  RIGHT: isRTL() ? 'left' : 'right',
  BOTTOM: 'bottom',
  LEFT: isRTL() ? 'right' : 'left'
};
const Default$3 = {
  animation: true,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
  trigger: 'hover focus',
  title: '',
  delay: 0,
  html: false,
  selector: false,
  placement: 'top',
  offset: [0, 0],
  container: false,
  fallbackPlacements: ['top', 'right', 'bottom', 'left'],
  boundary: 'clippingParents',
  customClass: '',
  sanitize: true,
  sanitizeFn: null,
  allowList: DefaultAllowlist,
  popperConfig: null
};
const Event$2 = {
  HIDE: `hide${EVENT_KEY$4}`,
  HIDDEN: `hidden${EVENT_KEY$4}`,
  SHOW: `show${EVENT_KEY$4}`,
  SHOWN: `shown${EVENT_KEY$4}`,
  INSERTED: `inserted${EVENT_KEY$4}`,
  CLICK: `click${EVENT_KEY$4}`,
  FOCUSIN: `focusin${EVENT_KEY$4}`,
  FOCUSOUT: `focusout${EVENT_KEY$4}`,
  MOUSEENTER: `mouseenter${EVENT_KEY$4}`,
  MOUSELEAVE: `mouseleave${EVENT_KEY$4}`
};
const CLASS_NAME_FADE$2 = 'fade';
const CLASS_NAME_MODAL = 'modal';
const CLASS_NAME_SHOW$2 = 'show';
const HOVER_STATE_SHOW = 'show';
const HOVER_STATE_OUT = 'out';
const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
const EVENT_MODAL_HIDE = 'hide.bs.modal';
const TRIGGER_HOVER = 'hover';
const TRIGGER_FOCUS = 'focus';
const TRIGGER_CLICK = 'click';
const TRIGGER_MANUAL = 'manual';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Tooltip extends BaseComponent {
  constructor(element, config) {
    if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {
      throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
    }

    super(element); // private

    this._isEnabled = true;
    this._timeout = 0;
    this._hoverState = '';
    this._activeTrigger = {};
    this._popper = null; // Protected

    this._config = this._getConfig(config);
    this.tip = null;

    this._setListeners();
  } // Getters


  static get Default() {
    return Default$3;
  }

  static get NAME() {
    return NAME$4;
  }

  static get Event() {
    return Event$2;
  }

  static get DefaultType() {
    return DefaultType$3;
  } // Public


  enable() {
    this._isEnabled = true;
  }

  disable() {
    this._isEnabled = false;
  }

  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }

  toggle(event) {
    if (!this._isEnabled) {
      return;
    }

    if (event) {
      const context = this._initializeOnDelegatedTarget(event);

      context._activeTrigger.click = !context._activeTrigger.click;

      if (context._isWithActiveTrigger()) {
        context._enter(null, context);
      } else {
        context._leave(null, context);
      }
    } else {
      if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {
        this._leave(null, this);

        return;
      }

      this._enter(null, this);
    }
  }

  dispose() {
    clearTimeout(this._timeout);
    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

    if (this.tip) {
      this.tip.remove();
    }

    this._disposePopper();

    super.dispose();
  }

  show() {
    if (this._element.style.display === 'none') {
      throw new Error('Please use show on visible elements');
    }

    if (!(this.isWithContent() && this._isEnabled)) {
      return;
    }

    const showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);
    const shadowRoot = findShadowRoot(this._element);
    const isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);

    if (showEvent.defaultPrevented || !isInTheDom) {
      return;
    } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`
    // This will be removed later in favor of a `setContent` method


    if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {
      this._disposePopper();

      this.tip.remove();
      this.tip = null;
    }

    const tip = this.getTipElement();
    const tipId = getUID(this.constructor.NAME);
    tip.setAttribute('id', tipId);

    this._element.setAttribute('aria-describedby', tipId);

    if (this._config.animation) {
      tip.classList.add(CLASS_NAME_FADE$2);
    }

    const placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;

    const attachment = this._getAttachment(placement);

    this._addAttachmentClass(attachment);

    const {
      container
    } = this._config;
    Data.set(tip, this.constructor.DATA_KEY, this);

    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
      container.append(tip);
      EventHandler.trigger(this._element, this.constructor.Event.INSERTED);
    }

    if (this._popper) {
      this._popper.update();
    } else {
      this._popper = _popperjs_core__WEBPACK_IMPORTED_MODULE_1__.createPopper(this._element, tip, this._getPopperConfig(attachment));
    }

    tip.classList.add(CLASS_NAME_SHOW$2);

    const customClass = this._resolvePossibleFunction(this._config.customClass);

    if (customClass) {
      tip.classList.add(...customClass.split(' '));
    } // If this is a touch-enabled device we add extra
    // empty mouseover listeners to the body's immediate children;
    // only needed because of broken event delegation on iOS
    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


    if ('ontouchstart' in document.documentElement) {
      [].concat(...document.body.children).forEach(element => {
        EventHandler.on(element, 'mouseover', noop);
      });
    }

    const complete = () => {
      const prevHoverState = this._hoverState;
      this._hoverState = null;
      EventHandler.trigger(this._element, this.constructor.Event.SHOWN);

      if (prevHoverState === HOVER_STATE_OUT) {
        this._leave(null, this);
      }
    };

    const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

    this._queueCallback(complete, this.tip, isAnimated);
  }

  hide() {
    if (!this._popper) {
      return;
    }

    const tip = this.getTipElement();

    const complete = () => {
      if (this._isWithActiveTrigger()) {
        return;
      }

      if (this._hoverState !== HOVER_STATE_SHOW) {
        tip.remove();
      }

      this._cleanTipClass();

      this._element.removeAttribute('aria-describedby');

      EventHandler.trigger(this._element, this.constructor.Event.HIDDEN);

      this._disposePopper();
    };

    const hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
    // empty mouseover listeners we added for iOS support

    if ('ontouchstart' in document.documentElement) {
      [].concat(...document.body.children).forEach(element => EventHandler.off(element, 'mouseover', noop));
    }

    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;
    const isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

    this._queueCallback(complete, this.tip, isAnimated);

    this._hoverState = '';
  }

  update() {
    if (this._popper !== null) {
      this._popper.update();
    }
  } // Protected


  isWithContent() {
    return Boolean(this.getTitle());
  }

  getTipElement() {
    if (this.tip) {
      return this.tip;
    }

    const element = document.createElement('div');
    element.innerHTML = this._config.template;
    const tip = element.children[0];
    this.setContent(tip);
    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
    this.tip = tip;
    return this.tip;
  }

  setContent(tip) {
    this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);
  }

  _sanitizeAndSetContent(template, content, selector) {
    const templateElement = SelectorEngine.findOne(selector, template);

    if (!content && templateElement) {
      templateElement.remove();
      return;
    } // we use append for html objects to maintain js events


    this.setElementContent(templateElement, content);
  }

  setElementContent(element, content) {
    if (element === null) {
      return;
    }

    if (isElement(content)) {
      content = getElement(content); // content is a DOM node or a jQuery

      if (this._config.html) {
        if (content.parentNode !== element) {
          element.innerHTML = '';
          element.append(content);
        }
      } else {
        element.textContent = content.textContent;
      }

      return;
    }

    if (this._config.html) {
      if (this._config.sanitize) {
        content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);
      }

      element.innerHTML = content;
    } else {
      element.textContent = content;
    }
  }

  getTitle() {
    const title = this._element.getAttribute('data-bs-original-title') || this._config.title;

    return this._resolvePossibleFunction(title);
  }

  updateAttachment(attachment) {
    if (attachment === 'right') {
      return 'end';
    }

    if (attachment === 'left') {
      return 'start';
    }

    return attachment;
  } // Private


  _initializeOnDelegatedTarget(event, context) {
    return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
  }

  _getOffset() {
    const {
      offset
    } = this._config;

    if (typeof offset === 'string') {
      return offset.split(',').map(val => Number.parseInt(val, 10));
    }

    if (typeof offset === 'function') {
      return popperData => offset(popperData, this._element);
    }

    return offset;
  }

  _resolvePossibleFunction(content) {
    return typeof content === 'function' ? content.call(this._element) : content;
  }

  _getPopperConfig(attachment) {
    const defaultBsPopperConfig = {
      placement: attachment,
      modifiers: [{
        name: 'flip',
        options: {
          fallbackPlacements: this._config.fallbackPlacements
        }
      }, {
        name: 'offset',
        options: {
          offset: this._getOffset()
        }
      }, {
        name: 'preventOverflow',
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: 'arrow',
        options: {
          element: `.${this.constructor.NAME}-arrow`
        }
      }, {
        name: 'onChange',
        enabled: true,
        phase: 'afterWrite',
        fn: data => this._handlePopperPlacementChange(data)
      }],
      onFirstUpdate: data => {
        if (data.options.placement !== data.placement) {
          this._handlePopperPlacementChange(data);
        }
      }
    };
    return { ...defaultBsPopperConfig,
      ...(typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig)
    };
  }

  _addAttachmentClass(attachment) {
    this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(attachment)}`);
  }

  _getAttachment(placement) {
    return AttachmentMap[placement.toUpperCase()];
  }

  _setListeners() {
    const triggers = this._config.trigger.split(' ');

    triggers.forEach(trigger => {
      if (trigger === 'click') {
        EventHandler.on(this._element, this.constructor.Event.CLICK, this._config.selector, event => this.toggle(event));
      } else if (trigger !== TRIGGER_MANUAL) {
        const eventIn = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN;
        const eventOut = trigger === TRIGGER_HOVER ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;
        EventHandler.on(this._element, eventIn, this._config.selector, event => this._enter(event));
        EventHandler.on(this._element, eventOut, this._config.selector, event => this._leave(event));
      }
    });

    this._hideModalHandler = () => {
      if (this._element) {
        this.hide();
      }
    };

    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

    if (this._config.selector) {
      this._config = { ...this._config,
        trigger: 'manual',
        selector: ''
      };
    } else {
      this._fixTitle();
    }
  }

  _fixTitle() {
    const title = this._element.getAttribute('title');

    const originalTitleType = typeof this._element.getAttribute('data-bs-original-title');

    if (title || originalTitleType !== 'string') {
      this._element.setAttribute('data-bs-original-title', title || '');

      if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {
        this._element.setAttribute('aria-label', title);
      }

      this._element.setAttribute('title', '');
    }
  }

  _enter(event, context) {
    context = this._initializeOnDelegatedTarget(event, context);

    if (event) {
      context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
    }

    if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {
      context._hoverState = HOVER_STATE_SHOW;
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_SHOW;

    if (!context._config.delay || !context._config.delay.show) {
      context.show();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_SHOW) {
        context.show();
      }
    }, context._config.delay.show);
  }

  _leave(event, context) {
    context = this._initializeOnDelegatedTarget(event, context);

    if (event) {
      context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
    }

    if (context._isWithActiveTrigger()) {
      return;
    }

    clearTimeout(context._timeout);
    context._hoverState = HOVER_STATE_OUT;

    if (!context._config.delay || !context._config.delay.hide) {
      context.hide();
      return;
    }

    context._timeout = setTimeout(() => {
      if (context._hoverState === HOVER_STATE_OUT) {
        context.hide();
      }
    }, context._config.delay.hide);
  }

  _isWithActiveTrigger() {
    for (const trigger in this._activeTrigger) {
      if (this._activeTrigger[trigger]) {
        return true;
      }
    }

    return false;
  }

  _getConfig(config) {
    const dataAttributes = Manipulator.getDataAttributes(this._element);
    Object.keys(dataAttributes).forEach(dataAttr => {
      if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {
        delete dataAttributes[dataAttr];
      }
    });
    config = { ...this.constructor.Default,
      ...dataAttributes,
      ...(typeof config === 'object' && config ? config : {})
    };
    config.container = config.container === false ? document.body : getElement(config.container);

    if (typeof config.delay === 'number') {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }

    if (typeof config.title === 'number') {
      config.title = config.title.toString();
    }

    if (typeof config.content === 'number') {
      config.content = config.content.toString();
    }

    typeCheckConfig(NAME$4, config, this.constructor.DefaultType);

    if (config.sanitize) {
      config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);
    }

    return config;
  }

  _getDelegateConfig() {
    const config = {};

    for (const key in this._config) {
      if (this.constructor.Default[key] !== this._config[key]) {
        config[key] = this._config[key];
      }
    } // In the future can be replaced with:
    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
    // `Object.fromEntries(keysWithDifferentValues)`


    return config;
  }

  _cleanTipClass() {
    const tip = this.getTipElement();
    const basicClassPrefixRegex = new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`, 'g');
    const tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);

    if (tabClass !== null && tabClass.length > 0) {
      tabClass.map(token => token.trim()).forEach(tClass => tip.classList.remove(tClass));
    }
  }

  _getBasicClassPrefix() {
    return CLASS_PREFIX$1;
  }

  _handlePopperPlacementChange(popperData) {
    const {
      state
    } = popperData;

    if (!state) {
      return;
    }

    this.tip = state.elements.popper;

    this._cleanTipClass();

    this._addAttachmentClass(this._getAttachment(state.placement));
  }

  _disposePopper() {
    if (this._popper) {
      this._popper.destroy();

      this._popper = null;
    }
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Tooltip.getOrCreateInstance(this, config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Tooltip to jQuery only if jQuery is present
 */


defineJQueryPlugin(Tooltip);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$3 = 'popover';
const DATA_KEY$3 = 'bs.popover';
const EVENT_KEY$3 = `.${DATA_KEY$3}`;
const CLASS_PREFIX = 'bs-popover';
const Default$2 = { ...Tooltip.Default,
  placement: 'right',
  offset: [0, 8],
  trigger: 'click',
  content: '',
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>'
};
const DefaultType$2 = { ...Tooltip.DefaultType,
  content: '(string|element|function)'
};
const Event$1 = {
  HIDE: `hide${EVENT_KEY$3}`,
  HIDDEN: `hidden${EVENT_KEY$3}`,
  SHOW: `show${EVENT_KEY$3}`,
  SHOWN: `shown${EVENT_KEY$3}`,
  INSERTED: `inserted${EVENT_KEY$3}`,
  CLICK: `click${EVENT_KEY$3}`,
  FOCUSIN: `focusin${EVENT_KEY$3}`,
  FOCUSOUT: `focusout${EVENT_KEY$3}`,
  MOUSEENTER: `mouseenter${EVENT_KEY$3}`,
  MOUSELEAVE: `mouseleave${EVENT_KEY$3}`
};
const SELECTOR_TITLE = '.popover-header';
const SELECTOR_CONTENT = '.popover-body';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Popover extends Tooltip {
  // Getters
  static get Default() {
    return Default$2;
  }

  static get NAME() {
    return NAME$3;
  }

  static get Event() {
    return Event$1;
  }

  static get DefaultType() {
    return DefaultType$2;
  } // Overrides


  isWithContent() {
    return this.getTitle() || this._getContent();
  }

  setContent(tip) {
    this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);

    this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);
  } // Private


  _getContent() {
    return this._resolvePossibleFunction(this._config.content);
  }

  _getBasicClassPrefix() {
    return CLASS_PREFIX;
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Popover.getOrCreateInstance(this, config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Popover to jQuery only if jQuery is present
 */


defineJQueryPlugin(Popover);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$2 = 'scrollspy';
const DATA_KEY$2 = 'bs.scrollspy';
const EVENT_KEY$2 = `.${DATA_KEY$2}`;
const DATA_API_KEY$1 = '.data-api';
const Default$1 = {
  offset: 10,
  method: 'auto',
  target: ''
};
const DefaultType$1 = {
  offset: 'number',
  method: 'string',
  target: '(string|element)'
};
const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
const EVENT_SCROLL = `scroll${EVENT_KEY$2}`;
const EVENT_LOAD_DATA_API = `load${EVENT_KEY$2}${DATA_API_KEY$1}`;
const CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
const CLASS_NAME_ACTIVE$1 = 'active';
const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
const SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
const SELECTOR_NAV_LINKS = '.nav-link';
const SELECTOR_NAV_ITEMS = '.nav-item';
const SELECTOR_LIST_ITEMS = '.list-group-item';
const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}, .${CLASS_NAME_DROPDOWN_ITEM}`;
const SELECTOR_DROPDOWN$1 = '.dropdown';
const SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
const METHOD_OFFSET = 'offset';
const METHOD_POSITION = 'position';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class ScrollSpy extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._scrollElement = this._element.tagName === 'BODY' ? window : this._element;
    this._config = this._getConfig(config);
    this._offsets = [];
    this._targets = [];
    this._activeTarget = null;
    this._scrollHeight = 0;
    EventHandler.on(this._scrollElement, EVENT_SCROLL, () => this._process());
    this.refresh();

    this._process();
  } // Getters


  static get Default() {
    return Default$1;
  }

  static get NAME() {
    return NAME$2;
  } // Public


  refresh() {
    const autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
    const offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
    const offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
    this._offsets = [];
    this._targets = [];
    this._scrollHeight = this._getScrollHeight();
    const targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);
    targets.map(element => {
      const targetSelector = getSelectorFromElement(element);
      const target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;

      if (target) {
        const targetBCR = target.getBoundingClientRect();

        if (targetBCR.width || targetBCR.height) {
          return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];
        }
      }

      return null;
    }).filter(item => item).sort((a, b) => a[0] - b[0]).forEach(item => {
      this._offsets.push(item[0]);

      this._targets.push(item[1]);
    });
  }

  dispose() {
    EventHandler.off(this._scrollElement, EVENT_KEY$2);
    super.dispose();
  } // Private


  _getConfig(config) {
    config = { ...Default$1,
      ...Manipulator.getDataAttributes(this._element),
      ...(typeof config === 'object' && config ? config : {})
    };
    config.target = getElement(config.target) || document.documentElement;
    typeCheckConfig(NAME$2, config, DefaultType$1);
    return config;
  }

  _getScrollTop() {
    return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
  }

  _getScrollHeight() {
    return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
  }

  _getOffsetHeight() {
    return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
  }

  _process() {
    const scrollTop = this._getScrollTop() + this._config.offset;

    const scrollHeight = this._getScrollHeight();

    const maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

    if (this._scrollHeight !== scrollHeight) {
      this.refresh();
    }

    if (scrollTop >= maxScroll) {
      const target = this._targets[this._targets.length - 1];

      if (this._activeTarget !== target) {
        this._activate(target);
      }

      return;
    }

    if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
      this._activeTarget = null;

      this._clear();

      return;
    }

    for (let i = this._offsets.length; i--;) {
      const isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

      if (isActiveTarget) {
        this._activate(this._targets[i]);
      }
    }
  }

  _activate(target) {
    this._activeTarget = target;

    this._clear();

    const queries = SELECTOR_LINK_ITEMS.split(',').map(selector => `${selector}[data-bs-target="${target}"],${selector}[href="${target}"]`);
    const link = SelectorEngine.findOne(queries.join(','), this._config.target);
    link.classList.add(CLASS_NAME_ACTIVE$1);

    if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);
    } else {
      SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(listGroup => {
        // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        SelectorEngine.prev(listGroup, `${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1)); // Handle special case when .nav-link is inside .nav-item

        SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(navItem => {
          SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(item => item.classList.add(CLASS_NAME_ACTIVE$1));
        });
      });
    }

    EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {
      relatedTarget: target
    });
  }

  _clear() {
    SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(node => node.classList.contains(CLASS_NAME_ACTIVE$1)).forEach(node => node.classList.remove(CLASS_NAME_ACTIVE$1));
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = ScrollSpy.getOrCreateInstance(this, config);

      if (typeof config !== 'string') {
        return;
      }

      if (typeof data[config] === 'undefined') {
        throw new TypeError(`No method named "${config}"`);
      }

      data[config]();
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
  SelectorEngine.find(SELECTOR_DATA_SPY).forEach(spy => new ScrollSpy(spy));
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .ScrollSpy to jQuery only if jQuery is present
 */

defineJQueryPlugin(ScrollSpy);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME$1 = 'tab';
const DATA_KEY$1 = 'bs.tab';
const EVENT_KEY$1 = `.${DATA_KEY$1}`;
const DATA_API_KEY = '.data-api';
const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}${DATA_API_KEY}`;
const CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
const CLASS_NAME_ACTIVE = 'active';
const CLASS_NAME_FADE$1 = 'fade';
const CLASS_NAME_SHOW$1 = 'show';
const SELECTOR_DROPDOWN = '.dropdown';
const SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
const SELECTOR_ACTIVE = '.active';
const SELECTOR_ACTIVE_UL = ':scope > li > .active';
const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
const SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
const SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Tab extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$1;
  } // Public


  show() {
    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
      return;
    }

    let previous;
    const target = getElementFromSelector(this._element);

    const listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);

    if (listElement) {
      const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
      previous = SelectorEngine.find(itemSelector, listElement);
      previous = previous[previous.length - 1];
    }

    const hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {
      relatedTarget: this._element
    }) : null;
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {
      relatedTarget: previous
    });

    if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {
      return;
    }

    this._activate(this._element, listElement);

    const complete = () => {
      EventHandler.trigger(previous, EVENT_HIDDEN$1, {
        relatedTarget: this._element
      });
      EventHandler.trigger(this._element, EVENT_SHOWN$1, {
        relatedTarget: previous
      });
    };

    if (target) {
      this._activate(target, target.parentNode, complete);
    } else {
      complete();
    }
  } // Private


  _activate(element, container, callback) {
    const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);
    const active = activeElements[0];
    const isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);

    const complete = () => this._transitionComplete(element, active, callback);

    if (active && isTransitioning) {
      active.classList.remove(CLASS_NAME_SHOW$1);

      this._queueCallback(complete, element, true);
    } else {
      complete();
    }
  }

  _transitionComplete(element, active, callback) {
    if (active) {
      active.classList.remove(CLASS_NAME_ACTIVE);
      const dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);

      if (dropdownChild) {
        dropdownChild.classList.remove(CLASS_NAME_ACTIVE);
      }

      if (active.getAttribute('role') === 'tab') {
        active.setAttribute('aria-selected', false);
      }
    }

    element.classList.add(CLASS_NAME_ACTIVE);

    if (element.getAttribute('role') === 'tab') {
      element.setAttribute('aria-selected', true);
    }

    reflow(element);

    if (element.classList.contains(CLASS_NAME_FADE$1)) {
      element.classList.add(CLASS_NAME_SHOW$1);
    }

    let parent = element.parentNode;

    if (parent && parent.nodeName === 'LI') {
      parent = parent.parentNode;
    }

    if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {
      const dropdownElement = element.closest(SELECTOR_DROPDOWN);

      if (dropdownElement) {
        SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(dropdown => dropdown.classList.add(CLASS_NAME_ACTIVE));
      }

      element.setAttribute('aria-expanded', true);
    }

    if (callback) {
      callback();
    }
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Tab.getOrCreateInstance(this);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config]();
      }
    });
  }

}
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  const data = Tab.getOrCreateInstance(this);
  data.show();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Tab to jQuery only if jQuery is present
 */

defineJQueryPlugin(Tab);

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */
/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

const NAME = 'toast';
const DATA_KEY = 'bs.toast';
const EVENT_KEY = `.${DATA_KEY}`;
const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
const EVENT_HIDE = `hide${EVENT_KEY}`;
const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
const EVENT_SHOW = `show${EVENT_KEY}`;
const EVENT_SHOWN = `shown${EVENT_KEY}`;
const CLASS_NAME_FADE = 'fade';
const CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

const CLASS_NAME_SHOW = 'show';
const CLASS_NAME_SHOWING = 'showing';
const DefaultType = {
  animation: 'boolean',
  autohide: 'boolean',
  delay: 'number'
};
const Default = {
  animation: true,
  autohide: true,
  delay: 5000
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

class Toast extends BaseComponent {
  constructor(element, config) {
    super(element);
    this._config = this._getConfig(config);
    this._timeout = null;
    this._hasMouseInteraction = false;
    this._hasKeyboardInteraction = false;

    this._setListeners();
  } // Getters


  static get DefaultType() {
    return DefaultType;
  }

  static get Default() {
    return Default;
  }

  static get NAME() {
    return NAME;
  } // Public


  show() {
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

    if (showEvent.defaultPrevented) {
      return;
    }

    this._clearTimeout();

    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }

    const complete = () => {
      this._element.classList.remove(CLASS_NAME_SHOWING);

      EventHandler.trigger(this._element, EVENT_SHOWN);

      this._maybeScheduleHide();
    };

    this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


    reflow(this._element);

    this._element.classList.add(CLASS_NAME_SHOW);

    this._element.classList.add(CLASS_NAME_SHOWING);

    this._queueCallback(complete, this._element, this._config.animation);
  }

  hide() {
    if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
      return;
    }

    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

    if (hideEvent.defaultPrevented) {
      return;
    }

    const complete = () => {
      this._element.classList.add(CLASS_NAME_HIDE); // @deprecated


      this._element.classList.remove(CLASS_NAME_SHOWING);

      this._element.classList.remove(CLASS_NAME_SHOW);

      EventHandler.trigger(this._element, EVENT_HIDDEN);
    };

    this._element.classList.add(CLASS_NAME_SHOWING);

    this._queueCallback(complete, this._element, this._config.animation);
  }

  dispose() {
    this._clearTimeout();

    if (this._element.classList.contains(CLASS_NAME_SHOW)) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    }

    super.dispose();
  } // Private


  _getConfig(config) {
    config = { ...Default,
      ...Manipulator.getDataAttributes(this._element),
      ...(typeof config === 'object' && config ? config : {})
    };
    typeCheckConfig(NAME, config, this.constructor.DefaultType);
    return config;
  }

  _maybeScheduleHide() {
    if (!this._config.autohide) {
      return;
    }

    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
      return;
    }

    this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay);
  }

  _onInteraction(event, isInteracting) {
    switch (event.type) {
      case 'mouseover':
      case 'mouseout':
        this._hasMouseInteraction = isInteracting;
        break;

      case 'focusin':
      case 'focusout':
        this._hasKeyboardInteraction = isInteracting;
        break;
    }

    if (isInteracting) {
      this._clearTimeout();

      return;
    }

    const nextElement = event.relatedTarget;

    if (this._element === nextElement || this._element.contains(nextElement)) {
      return;
    }

    this._maybeScheduleHide();
  }

  _setListeners() {
    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false));
    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false));
  }

  _clearTimeout() {
    clearTimeout(this._timeout);
    this._timeout = null;
  } // Static


  static jQueryInterface(config) {
    return this.each(function () {
      const data = Toast.getOrCreateInstance(this, config);

      if (typeof config === 'string') {
        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`);
        }

        data[config](this);
      }
    });
  }

}

enableDismissTrigger(Toast);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Toast to jQuery only if jQuery is present
 */

defineJQueryPlugin(Toast);


//# sourceMappingURL=bootstrap.esm.js.map


/***/ }),

/***/ "./src/commonTypes/common-types.ts":
/*!*****************************************!*\
  !*** ./src/commonTypes/common-types.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_300536__) => {

"use strict";
__nested_webpack_require_300536__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_300536__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelectListItem": () => (/* binding */ BSDataTableSelectListItem),
/* harmony export */   "BSDataTableColDefinition": () => (/* binding */ BSDataTableColDefinition),
/* harmony export */   "BSDataTableDataSource": () => (/* binding */ BSDataTableDataSource),
/* harmony export */   "BSDataTableOptions": () => (/* binding */ BSDataTableOptions),
/* harmony export */   "BSDataTablePagingMetaData": () => (/* binding */ BSDataTablePagingMetaData),
/* harmony export */   "BSDataTablePaginationOptions": () => (/* binding */ BSDataTablePaginationOptions),
/* harmony export */   "BSDataTableHttpClientOptions": () => (/* binding */ BSDataTableHttpClientOptions)
/* harmony export */ });
;
var BSDataTableSelectListItem = /** @class */ (function () {
    /**
     * @param {string} text
     * @param {string} value
     * @param {boolean} isSelected
     */
    function BSDataTableSelectListItem(text, value, isSelected) {
        if (isSelected === void 0) { isSelected = false; }
        this.text = text;
        this.value = value;
        this.isSelected = isSelected;
    }
    return BSDataTableSelectListItem;
}());

var BSDataTableColDefinition = /** @class */ (function () {
    /**
     * @param {string} [name]
     * @param {string} [dataType]
     * @param {string} [width]
     * @param {string} [propName]
     * @param {boolean} [isKey]
     * @param {BSDataTableSelectListItem[]} [dataSource]
     * @param {number} [colSpan]
     * @param {number} [rowSpan]
     * @param {getUrlCallback} [selectorDataCB] - a cb to return the page url
     * @param {BSDataTableColDefinition[]} [selectorCols] - cols def for selector
     */
    function BSDataTableColDefinition(name, dataType, width, propName, isKey, dataSource, colSpan, rowSpan, selectorDataCB, selectorCols) {
        this.Name = name;
        this.DataType = dataType;
        this.Width = width;
        this.PropName = propName;
        this.IsKey = isKey;
        this.DataSource = dataSource;
        this.ColSpan = colSpan;
        this.RowSpan = rowSpan;
        this.SelectorDataCB = selectorDataCB;
        this.SelectorCols = selectorCols;
    }
    return BSDataTableColDefinition;
}());

;
var BSDataTableDataSource = /** @class */ (function () {
    /**
     * @param {string} name
     * @param {{initData: object[];metaData: BSDataTablePagingMetaData;}} initData
     * @param {boolean} isRemote
     * @param {getUrlCallback} url - A cb that will accept a page number and returns the url to the next page
     * @param {getNextPageOffline} getPageOffline - A callback type to get the next page in the offline mode
     */
    function BSDataTableDataSource(name, initData, isRemote, url, getPageOffline) {
        if (url === void 0) { url = function (page) { return undefined; }; }
        if (getPageOffline === void 0) { getPageOffline = undefined; }
        this.name = name;
        this.data = initData;
        this.isRemote = isRemote;
        this.url = url;
        this.getPageOfflineCB = getPageOffline;
    }
    return BSDataTableDataSource;
}());

var BSDataTableOptions = /** @class */ (function () {
    function BSDataTableOptions(gridId, containerId, colDefinition, dataSource, isReadonly) {
        if (isReadonly === void 0) { isReadonly = false; }
        this.gridId = gridId;
        this.containerId = containerId;
        this.colDefinition = colDefinition;
        this.dataSource = dataSource;
        this.isReadonly = isReadonly;
        this.enableInfiniteScroll = true;
        this.cacheResponses = false;
    }
    return BSDataTableOptions;
}());

var BSDataTablePagingMetaData = /** @class */ (function () {
    /**
     * @param {number} pageIndex
     * @param {number} pageSize
     * @param {number} totalRecords
     */
    function BSDataTablePagingMetaData(pageIndex, pageSize, totalRecords) {
        if (pageIndex === void 0) { pageIndex = 1; }
        if (pageSize === void 0) { pageSize = 10; }
        if (totalRecords === void 0) { totalRecords = 10; }
        this.pageIndex = pageIndex;
        this.pageSize = !pageSize || pageSize <= 0 ? 10 : pageSize;
        this.totalRecords = totalRecords;
        this.totalPages = Math.ceil(this.totalRecords / this.pageSize);
    }
    return BSDataTablePagingMetaData;
}());

var BSDataTablePaginationOptions = /** @class */ (function () {
    /**
     * @param {string} dsName
     * @param {BSDataTablePagingMetaData} pagingMetaData
     */
    function BSDataTablePaginationOptions(dsName, pagingMetaData, nextPageCallback) {
        if (nextPageCallback === void 0) { nextPageCallback = function (page) { }; }
        this.dsName = dsName;
        this.pagingMetaData = pagingMetaData;
        this.nextPageCallback = nextPageCallback;
    }
    return BSDataTablePaginationOptions;
}());

var BSDataTableHttpClientOptions = /** @class */ (function () {
    /**
     * @param {string} url
     * @param {string} method
     * @param {object[]} headers
     * @param {string} recordId
     */
    function BSDataTableHttpClientOptions(url, method, headers, recordId) {
        if (headers === void 0) { headers = undefined; }
        if (recordId === void 0) { recordId = undefined; }
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.recordId = recordId;
    }
    return BSDataTableHttpClientOptions;
}());



/***/ }),

/***/ "./src/components/BSDataTable.ts":
/*!***************************************!*\
  !*** ./src/components/BSDataTable.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_306439__) => {

"use strict";
__nested_webpack_require_306439__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_306439__.d(__webpack_exports__, {
/* harmony export */   "BSDataTable": () => (/* binding */ BSDataTable)
/* harmony export */ });
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_306439__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_306439__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _services_string_extensions__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_306439__(/*! ../services/string.extensions */ "./src/services/string.extensions.ts");
/* harmony import */ var _services_string_extensions__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__nested_webpack_require_306439__.n(_services_string_extensions__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_306439__(/*! ../services */ "./src/services/index.ts");
/* harmony import */ var _BSDataTableCell__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_306439__(/*! ./BSDataTableCell */ "./src/components/BSDataTableCell.ts");
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_306439__(/*! ../commonTypes/common-types */ "./src/commonTypes/common-types.ts");
/* harmony import */ var _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_306439__(/*! ./BSDataTableCheckBox */ "./src/components/BSDataTableCheckBox.ts");
/* harmony import */ var _BSDataTableHttpClient__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_306439__(/*! ./BSDataTableHttpClient */ "./src/components/BSDataTableHttpClient.ts");
/* harmony import */ var _BSDataTablePagination__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_306439__(/*! ./BSDataTablePagination */ "./src/components/BSDataTablePagination.ts");
/* harmony import */ var _BSDataTableInfiniteScroll__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_306439__(/*! ./BSDataTableInfiniteScroll */ "./src/components/BSDataTableInfiniteScroll.ts");
/* harmony import */ var _BSDataTableMarker__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_306439__(/*! ./BSDataTableMarker */ "./src/components/BSDataTableMarker.ts");
/* harmony import */ var _BSDataTableActions__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_306439__(/*! ./BSDataTableActions */ "./src/components/BSDataTableActions.ts");
/* harmony import */ var _BSDataTableRow__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_306439__(/*! ./BSDataTableRow */ "./src/components/BSDataTableRow.ts");
/* harmony import */ var _BSDataTableHeader__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_306439__(/*! ./BSDataTableHeader */ "./src/components/BSDataTableHeader.ts");
/* harmony import */ var _BSDataTableBody__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_306439__(/*! ./BSDataTableBody */ "./src/components/BSDataTableBody.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = ( false) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};















var BSDataTable = /** @class */ (function (_super) {
    __extends(BSDataTable, _super);
    function BSDataTable(options) {
        var _this_1 = this;
        var _a;
        _this_1 = _super.call(this) || this;
        _this_1.options = options;
        _this_1.head = new _BSDataTableHeader__WEBPACK_IMPORTED_MODULE_13__.BSDataTableHeader();
        _this_1.body = new _BSDataTableBody__WEBPACK_IMPORTED_MODULE_14__.BSDataTableBody();
        _this_1.paginator = new _BSDataTablePagination__WEBPACK_IMPORTED_MODULE_8__.BSDataTablePagination(new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTablePaginationOptions(_this_1.options.dataSource.name, new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTablePagingMetaData(), function (page) { return _this_1.paginatorCallback(page); }));
        _this_1.httpClient = (_a = options.httpClient) !== null && _a !== void 0 ? _a : new _BSDataTableHttpClient__WEBPACK_IMPORTED_MODULE_7__.BSDataTableHttpClient(new _services__WEBPACK_IMPORTED_MODULE_3__.SessionStorageService(), _this_1.options.dataSource.name, _this_1.options.cacheResponses);
        _this_1.infiniteScroller = null;
        _this_1.gridActions = null;
        _this_1.discoverable = true;
        _this_1.containerElement = document.getElementById(_this_1.options.containerId);
        return _this_1;
    }
    BSDataTable.prototype.notifyListeners = function (eventType, payload) {
        _services__WEBPACK_IMPORTED_MODULE_3__.dataEventsService.Emit(eventType, this, payload);
    };
    BSDataTable.prototype.setDiscoverable = function () {
        _services__WEBPACK_IMPORTED_MODULE_3__.bsDataTableDiscoveryService.Add(this);
    };
    Object.defineProperty(BSDataTable.prototype, "dataSourceName", {
        get: function () {
            return this.options.dataSource.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTable.prototype, "isReadOnly", {
        get: function () {
            return this.options.isReadonly;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTable.prototype, "dirtyRecords", {
        get: function () {
            return this.body.getDirtyRecords();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTable.prototype, "allRecords", {
        get: function () {
            return this.body.getAllRecords();
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @param {number} page
     */
    BSDataTable.prototype.paginatorCallback = function (page) {
        // console.log(`Page.Nbr: ${page} is requested`);
        this.fetchGridPage(page);
    };
    BSDataTable.prototype.addHeader = function () {
        this.element.append(this.head.element);
    };
    BSDataTable.prototype.addBody = function () {
        this.element.append(this.body.element);
    };
    BSDataTable.prototype.getGridSettings = function (gridId) {
        try {
            // debugger;
            var gridSettings = _services__WEBPACK_IMPORTED_MODULE_3__.CookieHelper.getJSON(gridId);
            //console.log('GridSettings Cookie: ', gridSettings ? 'settings found' : 'no settings found!');
            return gridSettings;
        }
        catch (error) {
            console.log(error);
            return undefined;
        }
    };
    ;
    BSDataTable.prototype.render = function () {
        var _this_1 = this;
        this.element = document.createElement('table');
        this.element.classList.add('table', 'table-bordered', 'table-hover', 'table-sm', 'resizable', 'navTable', 'nowrap', 'bs-table');
        this.id = this.options.gridId;
        this.prop('data-datasource', this.options.dataSource.name);
        var settings = this.getGridSettings(this.options.gridId) || {};
        this.css = { 'width': 'inherit' };
        var gridHeaderRow = new _BSDataTableRow__WEBPACK_IMPORTED_MODULE_12__.BSDataTableRow({
            dataSourceName: this.options.dataSource.name,
            gridId: this.options.gridId,
            gridHeader: true
        });
        gridHeaderRow.addClass('draggable').addClass('grid-cols');
        var templateRow = new _BSDataTableRow__WEBPACK_IMPORTED_MODULE_12__.BSDataTableRow({
            isTemplateRow: true,
            dataSourceName: this.options.dataSource.name,
            gridId: this.options.gridId,
            containerId: this.options.containerId
        });
        templateRow.addClass('grid-rows');
        templateRow.css = { 'display': 'none' };
        templateRow.visible = false;
        var gridColumns = this.applyColOrdering(settings);
        //
        // add row markers - this helps to improve the visual appearance of selected row
        //
        var mh = new _BSDataTableCell__WEBPACK_IMPORTED_MODULE_4__.BSDataTableCell(new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTableColDefinition(), true);
        var marker = new _BSDataTableMarker__WEBPACK_IMPORTED_MODULE_10__.BSDataTableMarker();
        var mb = new _BSDataTableCell__WEBPACK_IMPORTED_MODULE_4__.BSDataTableCell(new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTableColDefinition());
        mb.append(marker);
        gridHeaderRow.addCell(mh);
        templateRow.addCell(mb);
        gridColumns.forEach(function (gc) {
            //
            // the grid stores a cookie which contains info about the visiblity and size of the column
            // we will use this info to size and visualize the grid data
            //
            if (!gc.PropName)
                return;
            var colSettings = settings[gc.PropName];
            var th = gridHeaderRow.createHeaderFor(gc);
            var td = templateRow.createInputFor(gc, _this_1.isReadOnly);
            //
            // sorting of the data when the header cell is clicked
            //
            _this_1.addSorting(th);
            _this_1.applyColSettings(th, colSettings);
            _this_1.applyColSettings(td, colSettings);
            gridHeaderRow.addCell(th);
            templateRow.addCell(td);
        });
        this.head.addRow(gridHeaderRow);
        this.body.addRow(templateRow);
        //
        // add grid actions toolbar
        //
        this.addActions();
        //
        // add header and body to the grid
        //
        this.addHeader();
        this.addBody();
        //
        // add actions for the grid to the container
        //
        this.containerElement.appendChild(this.gridActions.element);
        //
        // add grid to the provided container
        //
        this.containerElement.appendChild(this.element);
        //
        // enable infinite scroll
        //
        this.addInfiniteScroll();
        //
        // add data to the grid
        //
        var data = this.options.dataSource.data.initData;
        var mdata = this.options.dataSource.data.metaData;
        var fetchDataEvent = {
            DataSourceName: this.options.dataSource.name, EventData: {
                Data: data,
                MetaData: mdata
            }
        };
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FETCH_GRID_RECORD, fetchDataEvent);
        //
        // notify that grid is data-bound
        //
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_DATA_BOUND, {
            DataSourceName: this.options.dataSource.name,
            EventData: {}
        });
        if (this.discoverable === true) {
            this.setDiscoverable();
        }
    };
    ;
    BSDataTable.prototype.addInfiniteScroll = function () {
        var _this_1 = this;
        if (this.options.enableInfiniteScroll === true) {
            this.infiniteScroller = new _BSDataTableInfiniteScroll__WEBPACK_IMPORTED_MODULE_9__.BSDataTableInfiniteScroll({ gridElement: this.element, httpClient: this.httpClient });
            this.infiniteScroller.nextPageCallback = function (page) { return _this_1.paginatorCallback(page); };
            this.infiniteScroller.enable();
        }
    };
    BSDataTable.prototype.addActions = function () {
        var _this_1 = this;
        this.gridActions = new _BSDataTableActions__WEBPACK_IMPORTED_MODULE_11__.BSDataTableActions();
        this.gridActions.dataSourceName = this.options.dataSource.name;
        this.gridActions.addNewRecordAction(function (e) { return _this_1.addEmptyRow(); })
            .addDeleteAction(function (e) { return _this_1.body.markDeleted(); })
            .addGridSettingsAction();
    };
    /**
     * @param {BSDataTableCell} th
     */
    BSDataTable.prototype.addSorting = function (th) {
        //
        // sorting of the data when the header cell is clicked
        //
        var _this = this;
        th.addEventHandler('click', function (e) {
            var asc = true;
            if (th.hasClass('sorting_asc')) {
                th.removeClass('sorting_asc').addClass('sorting_desc');
                asc = false;
            }
            else {
                th.removeClass('sorting_desc').addClass('sorting_asc');
            }
            //
            // supports sorting on only one column.
            //
            th.siblings('th').forEach(function (x) {
                x.classList.remove('sorting_asc', 'sorting_desc');
            });
            //
            // notify that we need sorting of the column
            //
            var prop = th.options.PropName;
            //
            // TODO: fix
            //
            var event = { EventData: { Event: e, PropName: prop, Asc: asc }, DataSourceName: _this.options.dataSource.name };
            _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_SORTING_REQUESTED, event);
        });
    };
    BSDataTable.prototype.clearGrid = function () {
        var _this_1 = this;
        var rows = this.findElements('.grid-row');
        rows.forEach(function (row) { return _this_1.removeElement(row); });
        // remove all except the template row
        var templateRow = this.body.getTemplateRow();
        this.body.rows = [templateRow];
    };
    ;
    /**
     * Apply visibility and size settings from store cookie.
     * This helps the user not to re-arrange cols based on their needs all the time they open the screen
     * @param {BSDataTableCell} col
     * @param {any} settings
     */
    BSDataTable.prototype.applyColSettings = function (col, settings) {
        if (!settings || this.isEmptyObj(settings))
            return;
        if (settings.Visible === false) {
            col.visible = false;
        }
        if (settings.Width) {
            col.css = { 'position': 'relative', 'width': settings.Width };
        }
    };
    ;
    /**
     * Apply column re-ordering based on the stored cookie
     * This helps the user to not re-order the columns everytime they open the screen.
     * @param {*} settings
     * @returns {BSDataTableColDefinition[]}
     */
    BSDataTable.prototype.applyColOrdering = function (settings) {
        if (!settings || this.isEmptyObj(settings))
            return this.options.colDefinition;
        var orderedCols = [];
        this.options.colDefinition.forEach(function (colDef, i) {
            var colSetting = settings[colDef.PropName];
            if (!colSetting)
                return;
            orderedCols[colSetting.Position] = colDef;
        });
        // in case the col settings stored in cookie are not matching, we return the current col definition
        if (orderedCols.length !== this.options.colDefinition.length)
            return this.options.colDefinition;
        return orderedCols;
    };
    /**
     * @param {object[]} data
     * @param {BSDataTablePagingMetaData} [metaData]
     * @returns
     */
    BSDataTable.prototype.bindDataSource = function (data, metaData) {
        var _this_1 = this;
        // debugger;
        if (!data || data.length <= 0)
            return;
        var pagedData = data;
        if (this.options.dataSource.isRemote === false) {
            pagedData = this.options.dataSource.getPageOfflineCB(metaData.pageIndex, this.options.dataSource.data.initData, metaData);
        }
        /**
         * @type {BSDataTableRow}
         */
        var lastRow = null;
        pagedData.forEach(function (v, i) {
            var row = _this_1.addNewRow(v, true);
            row.rowCategory = 'PRESTINE';
            lastRow = row;
        });
        //
        // update the pagination component
        //
        if (this.options.enableInfiniteScroll == false)
            this.bindPaginator(metaData);
        else {
            this.infiniteScroller.initMetaData = metaData;
            this.infiniteScroller.initData = pagedData;
            if (lastRow) {
                this.infiniteScroller.unobserve();
                this.infiniteScroller.observe(lastRow.element);
            }
        }
    };
    /**
     * @param {BSDataTablePagingMetaData} [paginationModel]
     */
    BSDataTable.prototype.bindPaginator = function (paginationModel) {
        if (paginationModel === void 0) { paginationModel = new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTablePagingMetaData(); }
        this.paginator.options.pagingMetaData = paginationModel;
        this.paginator.render();
        var container = document.getElementById('#' + this.options.containerId);
        container.appendChild(this.paginator.element);
    };
    /**
     * @param {object} rowData
     * @param {boolean} isExistingRecord
     */
    BSDataTable.prototype.addNewRow = function (rowData, isExistingRecord) {
        var _this_1 = this;
        var rowNumber = this.body.getNextRowIndex();
        var row = this.body.getTemplateRow().clone();
        row.options.isTemplateRow = false;
        row.addClass('grid-row');
        row.css = { 'display': 'table-row' };
        row.visible = true;
        var _this = this;
        var inputs = row.getInputs();
        // debugger;
        inputs.forEach(function (v, i) {
            var input = v;
            var oldId = input.id;
            input.id = oldId + "_" + rowNumber;
            var cellPropName = input.options.ModelName;
            // console.log('cell-pro', cellPropName);
            var cellVal = rowData[cellPropName];
            if (input.options.InputType === 'date' && cellVal) {
                var date = new Date(cellVal);
                input.val = _this.toDateDisplayFormat(date);
            }
            else if (input instanceof _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_6__.BSDataTableCheckBox
                && (cellVal === 'true' || cellVal === 'True' || cellVal === true)) {
                input.prop('checked', 'checked');
            }
            else if (cellVal !== undefined) {
                input.val = cellVal;
            }
            // debugger;
            if (isExistingRecord === false) {
                input.disabled = false;
                input.readonly = false;
            }
            input.element.addEventListener('change', function (e) {
                row.prop('data-isdirty', true);
                var rowCat = row.rowCategory;
                if (rowCat !== 'ADDED') {
                    row.rowCategory = 'UPDATED';
                }
                // remove any previous errors
                input.removeClass('is-invalid').prop('title', '');
                var tooltip = bootstrap__WEBPACK_IMPORTED_MODULE_0__.Tooltip.getInstance(e.target);
                if (tooltip)
                    tooltip.dispose();
                var rowData = row.getRowDataExt();
                var ds = _this.options.dataSource.name;
                var gridUpdateEvent = { EventData: { Event: e, Grid: _this }, DataSourceName: ds };
                var rowUpdatedEvent = { EventData: { Event: e, Row: rowData }, DataSourceName: ds };
                var fieldUpdaedEvent = { EventData: { Event: e, Row: rowData, Field: input }, DataSourceName: ds };
                _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_UPDATED, gridUpdateEvent);
                _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FIELD_UPDATED, fieldUpdaedEvent);
                _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_ROW_UPDATED, rowUpdatedEvent);
            });
            input.element.addEventListener('focus', function (e) {
                _this.body.focusRow(row);
            });
        });
        row.element.addEventListener('click', function (e) {
            _this.body.focusRow(row);
        });
        this.body.addRow(row);
        var visibleInputs = row.getVisibleInputs();
        if (visibleInputs.length > 0) {
            var lastInput = visibleInputs[visibleInputs.length - 1];
            lastInput.element.addEventListener('keydown', function (e) { return _this_1.onInputKeyDown; });
        }
        return row;
    };
    ;
    BSDataTable.prototype.toDateDisplayFormat = function (date) {
        var day = date.getDate(), month = date.getMonth() + 1, year = date.getFullYear();
        var monthStr = (month < 10 ? "0" : "") + month;
        var dayStr = (day < 10 ? "0" : "") + day;
        return year + "-" + monthStr + "-" + dayStr;
    };
    BSDataTable.prototype.toTimeDisplayFormat = function (date) {
        var hour = date.getHours(), min = date.getMinutes();
        var hourStr = (hour < 10 ? "0" : "") + hour;
        var minStr = (min < 10 ? "0" : "") + min;
        return hourStr + ":" + minStr;
    };
    /**
     *
     * @param {BSDataTableRow} row
     * @param {*} e
     * @returns
     */
    BSDataTable.prototype.onInputKeyDown = function (e) {
        //
        // insert a new row if its the last input in the row
        //   
        if (e.which !== 9 || e.shiftKey === true)
            return;
        // debugger;
        var visibleRows = this.body.getVisibleRows();
        if (visibleRows.length <= 0)
            return;
        var lastRowIndex = visibleRows[visibleRows.length - 1].getRowIndex();
        var row = e.target.closest('tr');
        if (!row)
            return;
        var parentIndex = parseInt(row.getAttribute('data-rowindex'));
        // console.log(gridRows, currentRowIndex);
        if (lastRowIndex === parentIndex) {
            var eRow = this.addEmptyRow();
        }
    };
    ;
    BSDataTable.prototype.addEmptyRow = function () {
        var emptyRow = this.addNewRow(this.createEmptyRowData(), false);
        var inputs = emptyRow.getVisibleInputs();
        if (inputs.length > 0) {
            inputs[0].focus();
        }
        emptyRow.rowCategory = 'ADDED';
        emptyRow.prop('data-isdirty', 'true');
        var gridUpdateEvent = { EventData: { Grid: this, Event: emptyRow }, DataSourceName: this.options.dataSource.name };
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_UPDATED, gridUpdateEvent);
        this.infiniteScroller.unobserve();
        this.infiniteScroller.observe(emptyRow.element);
        return emptyRow;
    };
    ;
    BSDataTable.prototype.createEmptyRowData = function () {
        var record = {};
        this.options.colDefinition.forEach(function (v, i) { record[v.PropName] = undefined; });
        //debugger;
        return record;
    };
    ;
    BSDataTable.prototype.onHeaderNext = function (eventArgs, fetchGrid) {
        if (!eventArgs || !eventArgs.EventData)
            return;
        // console.log(eventArgs);
        this.resetSorting();
        this.clearGrid();
        this.paginator.clear();
        if (fetchGrid === false)
            return;
        //
        // fetch grid data
        //        
        this.fetchGridPage(1);
        if (this.options.enableInfiniteScroll === true) {
            this.infiniteScroller.currentPage = 1;
        }
    };
    ;
    /**
     * @param {number} pageIndex
     */
    BSDataTable.prototype.fetchGridPage = function (pageIndex) {
        if (this.options.dataSource.isRemote === true) {
            var url = this.options.dataSource.url(pageIndex);
            if (!url)
                return;
            var options = new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTableHttpClientOptions(url, "GET");
            this.httpClient.get(options);
        }
        else {
            var data = this.options.dataSource.data.initData;
            var mdata = this.options.dataSource.data.metaData;
            //var cb = this.options.dataSource.getPageOfflineCB;
            //var pageData = cb(pageIndex, data, mdata);
            var fetchRecordEvent = {
                DataSourceName: this.options.dataSource.name,
                EventData: {
                    Data: data,
                    MetaData: new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTablePagingMetaData(pageIndex, mdata.pageSize, mdata.totalRecords)
                }
            };
            this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FETCH_GRID_RECORD, fetchRecordEvent);
        }
    };
    BSDataTable.prototype.onSaveRecord = function (eventArgs) {
        //
        // remove rows from the grid that has been deleted
        //
        var _this_1 = this;
        // this.body.find("tr[data-rowcategory='DELETED']").remove();
        // this.body.find("tr[data-rowcategory='ADDED_DELETED']").remove();
        //
        // remove elements from the real and virtual DOM
        //
        this.body.rows
            .filter(function (v) { return v.rowCategory === 'DELETED' || v.rowCategory === 'ADDED_DELETED'; })
            .forEach(function (v) { return _this_1.body.removeRow(v); });
        //
        // when main record is saved, disable the key columns of the grid,
        //        
        this.body.rows.forEach(function (v) {
            // mark all rows prestine
            v.rowCategory = 'PRESTINE';
            // make id inputs disabled
            v.getInputs().filter(function (x) { return x.isKey; }).forEach(function (vx) { vx.disabled = true; });
        });
    };
    ;
    BSDataTable.prototype.onSaveError = function (eventArgs) {
        /*
        // Its assumed that the .net mvc api will convert the model state errors into the following format
        //
        // {
        //     "addresses.[0]": ["1"], // client row index
        //     "addresses.[1]": ["2"],
        //     "addresses.[2]": ["3"],
        //     "addresses[1].City": ["The City: field is required.", "The City: must be at least 3 and at max 128 characters long."],
        //     "addresses[1].Country": ["The Country: field is required.", "The Country: must be at least 2 and at max 128 characters long."],
        //     "addresses[1].PostalCode": ["The Postal code: field is required.", "The Postal code: must be at least 3 and at max 128 characters long."],
        //     "addresses[1].StreetAddress": ["The Street address: field is required.", "The Street address: must be at least 3 and at max 128 characters long."],
        //     "addresses[2].City": ["The City: field is required.", "The City: must be at least 3 and at max 128 characters long."],
        //     "addresses[2].Country": ["The Country: field is required.", "The Country: must be at least 2 and at max 128 characters long."],
        //     "addresses[2].PostalCode": ["The Postal code: field is required.", "The Postal code: must be at least 3 and at max 128 characters long."],
        //     "addresses[2].StreetAddress": ["The Street address: must be at least 3 and at max 128 characters long."]
        / }
        */
        if (!eventArgs || !eventArgs.EventData || !eventArgs.EventData.Event.responseJSON)
            return;
        var errors = eventArgs.EventData.Event.responseJSON;
        var dsName = this.options.dataSource.name;
        var dirtyRows = this.body.getDirtyRows();
        for (var i = 0; i < dirtyRows.length; i++) {
            //debugger;
            var errorProp = dsName + '[' + i + ']';
            var im = errors[errorProp];
            if (im && im.length > 0) {
                var clientIndex = im[0];
                var serverIndex = i;
                var errorRow = this.getRowByIndex(parseInt(clientIndex));
                if (!errorRow)
                    continue;
                this.options.colDefinition.forEach(function (col, i) {
                    var propName = col.PropName.toPascalCaseJson();
                    var inputError = errors[dsName + '[' + serverIndex + '].' + propName];
                    if (inputError && inputError.length > 0) {
                        var input = errorRow.getInputs().find(function (inp) { return inp.options.ModelName === col.PropName; });
                        if (input) {
                            input.addClass('is-invalid');
                            //console.log(inputError);
                            var allErrors = '';
                            Array.from(inputError).forEach(function (er) {
                                allErrors += er + ' ';
                            });
                            input.prop('title', allErrors);
                            var tooltip = new bootstrap__WEBPACK_IMPORTED_MODULE_0__.Tooltip(input[0], { customClass: 'tooltip-error' });
                        }
                    }
                });
            }
        }
    };
    BSDataTable.prototype.getRowByIndex = function (index) {
        return this.body.rows.find(function (v, i) { return v.getRowIndex() === index; });
    };
    /**
     * @param {BSDataTableCell} th
     * @param {boolean} ascX
     */
    BSDataTable.prototype.sortTable = function (th, ascX) {
        var _this_1 = this;
        //  console.log('sorting', ascX);
        var getCellValue = function (tr, idx) {
            var child = tr.cells[idx];
            // console.log('idx: ', idx,  child);
            return child.getCellText();
        };
        // Returns a function responsible for sorting a specific column index 
        // (idx = columnIndex, asc = ascending order?).
        var comparer = function (idx, asc) {
            //console.log('idx: ', idx, 'asc: ', asc);
            // This is used by the array.sort() function...
            return function (a, b) {
                //console.log('a: ', a, 'b: ', b);
                // This is a transient function, that is called straight away. 
                // It allows passing in different order of args, based on 
                // the ascending/descending order.
                return function (v1, v2) {
                    //  console.log('v1: ', v1, 'v2: ', v2);
                    // sort based on a numeric or localeCompare, based on type...
                    // return (v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2))
                    //     ? v1 - v2
                    //     : v1.toString().localeCompare(v2);
                    return v1.toString().localeCompare(v2.toString());
                }(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));
            };
        };
        // do the work...
        // const table = th.closest('table');
        //debugger;
        var ds = this.options.dataSource.name;
        // console.log(rows);
        var list = this.body.rows.sort(comparer(this.head.getGridTitlesRow().cells.indexOf(th), ascX = !ascX));
        list.forEach(function (tr) { return _this_1.body.append(tr, false); });
        var confEvent = { EventData: { CurrentCol: th, Action: _services__WEBPACK_IMPORTED_MODULE_3__.appActions.COL_SORTING }, DataSourceName: ds };
        var colReorderEvent = { EventData: { CurrentCol: th, Asc: ascX }, DataSourceName: ds };
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_COLS_REORDERED, colReorderEvent);
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_CONFIG_UPDATED, confEvent);
    };
    ;
    BSDataTable.prototype.onSortingRequest = function (eventArgs) {
        // console.log(eventArgs);
        var target = eventArgs.EventData.Event.target;
        var isTh = target.tagName.toLowerCase() === 'th';
        if (!isTh) {
            var th = target.closest('th');
            if (!th)
                return;
            target = th;
        }
        var thx = this.head.getGridTitlesRow().cells.find(function (v, i) { return v.element === target; });
        if (!thx)
            return;
        // debugger;
        this.sortTable(thx, eventArgs.EventData.Asc);
    };
    ;
    BSDataTable.prototype.resetSorting = function () {
        this.head.rows.forEach(function (v, i) {
            if (v.hasClass('sorting_desc' || 0)) {
                v.removeClass('sorting_asc').removeClass('sorting_desc');
            }
        });
    };
    ;
    BSDataTable.prototype.onColsReordered = function (eventArgs) {
        var _this_1 = this;
        //
        // modify 'keydown' events on the row inputs
        //
        var grid = this;
        // console.log(eventArgs);
        grid.body.rows.forEach(function (row, i) {
            var inputs = row.getInputs();
            inputs.forEach(function (inp) { inp.element.removeEventListener('keydown', _this_1.onInputKeyDown); });
            var visibleInputs = row.getVisibleInputs();
            if (visibleInputs.length <= 0)
                return;
            var lastInput = visibleInputs[visibleInputs.length - 1];
            lastInput.element.addEventListener('keydown', _this_1.onInputKeyDown);
        });
    };
    /**
     * Add handler to the events raised by the data table
     * @param eventName
     * @param callback
     * @param verifyDSName
     */
    BSDataTable.prototype.addHandler = function (eventName, callback, verifyDSName) {
        if (verifyDSName === void 0) { verifyDSName = false; }
        var model = {
            Key: this.options.gridId,
            EventName: eventName,
            Callback: callback,
            DataSourceName: this.options.dataSource.name,
            VerifyDataSourceName: verifyDSName
        };
        _services__WEBPACK_IMPORTED_MODULE_3__.dataEventsService.Subscribe(model);
    };
    ;
    BSDataTable.prototype.removeHandler = function (eventName) {
        var model = {
            Key: this.options.gridId,
            EventName: eventName,
            DataSourceName: this.options.dataSource.name,
        };
        _services__WEBPACK_IMPORTED_MODULE_3__.dataEventsService.Unsubscribe(model);
    };
    ;
    BSDataTable.prototype.onFetchData = function (eventArgs) {
        // console.log('onFetchData:', eventArgs);
        //
        // populate the grid with the fetched data
        //
        if (this.options.enableInfiniteScroll === false)
            this.clearGrid();
        var md = eventArgs.EventData.MetaData;
        if (!md)
            return;
        this.bindDataSource(eventArgs.EventData.Data, new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_5__.BSDataTablePagingMetaData(md.pageIndex, md.pageSize, md.totalRecords));
    };
    BSDataTable.prototype.onFetchDataError = function (eventArgs) {
        // console.error('onFetchDataError: ', eventArgs);
    };
    BSDataTable.prototype.registerCallbacks = function (verifyDSName) {
        var _this_1 = this;
        if (verifyDSName === void 0) { verifyDSName = true; }
        // debugger;
        var id = this.options.gridId;
        var ds = this.options.dataSource.name;
        //
        // subscribe to main view/form events
        //
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.GRID_DATA, function (sender, ev) { return _this_1.body.getDirtyRecords(); }); // TODO: obsolete -> replaced with discovery service
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_ADD_RECORD, function (sender, ev) { return _this_1.onHeaderNext(ev, false); });
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FETCH_RECORD, function (sender, ev) { return _this_1.onHeaderNext(ev, true); });
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_SAVE_RECORD, function (sender, ev) { return _this_1.onSaveRecord(ev); });
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_SAVE_ERROR, function (sender, ev) { return _this_1.onSaveError(ev); });
        //
        // subscribe to grid events
        //
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_SORTING_REQUESTED, function (sender, ev) { return _this_1.onSortingRequest(ev); }, verifyDSName);
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_COLS_REORDERED, function (sender, ev) { return _this_1.onColsReordered(ev); }, verifyDSName);
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_CONFIG_UPDATED, function (sender, ev) { return _this_1.onGridConfigurationChanged(ev); }, verifyDSName);
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_DATA_BOUND, function (sender, ev) { return _this_1.onGridDataBound(ev); }, verifyDSName);
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FETCH_GRID_RECORD, function (sender, ev) { return _this_1.onFetchData(ev); }, verifyDSName);
        this.addHandler(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_FETCH_GRID_RECORD_ERROR, function (sender, ev) { return _this_1.onFetchDataError(ev); }, verifyDSName);
    };
    BSDataTable.prototype.configurableGrid = function () {
        var _this_1 = this;
        // console.log('configurableGrid is reached', this);
        var headers = this.head.getGridTitlesRow().cells;
        var ds = this.options.dataSource.name;
        //
        // A modal for configuring grid columns.
        // The modal ahs an <ul> element which will be populated below with grid columns check-list.
        // the checks can be used to show/hide a particular grid column
        //
        var modelTemplate = "\n            <div class=\"modal fade\" id=\"staticBackdrop_".concat(ds, "\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\"\n            aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-dialog-scrollable\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"staticBackdropLabel_").concat(ds, "\">Configure columns</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <ul class=\"list-group grid-config-cols\">\n\n                            </ul>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\">Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </div>");
        var modalElem = document.createElement('div');
        modalElem.classList.add('settings-menu', 'grid-config-template');
        modalElem.innerHTML = modelTemplate;
        this.containerElement.append(modalElem);
        var colsList = modalElem.querySelector('.grid-config-cols');
        headers.forEach(function (header, index) {
            var propName = header.options.PropName;
            if (!propName)
                return;
            var colsListItem = document.createElement('li');
            colsListItem.classList.add('list-group-item');
            var chk = document.createElement('input');
            chk.type = 'checkbox';
            chk.value = '';
            chk.classList.add('form-check-input', 'me-1');
            var chkId = 'col_config_chk_' + propName;
            chk.setAttribute('id', chkId);
            chk.setAttribute('data-config-propname', propName);
            if (header.visible === true) {
                chk.checked = true;
            }
            var chkLbl = document.createElement('label');
            chkLbl.setAttribute('for', chkId);
            // debugger;
            chkLbl.textContent = header.getText();
            colsListItem.appendChild(chk);
            colsListItem.appendChild(chkLbl);
            colsList.appendChild(colsListItem);
            chk.addEventListener('click', function (e) {
                var chkElement = e.target;
                var prop = chkElement.getAttribute('data-config-propname');
                if (!prop)
                    return;
                var headerRow = _this_1.head.getGridTitlesRow();
                var col = headerRow.cells.find(function (cell) { return cell.options.PropName === prop; });
                if (!col)
                    return;
                var bodyRows = _this_1.body.rows;
                var rows = __spreadArray(__spreadArray([], bodyRows, true), [headerRow], false);
                //var rows = this.find('.grid-cols, .grid-rows');
                //var index = Array.from(col.parent('tr').children()).indexOf(col[0]);
                var index = headerRow.cells.indexOf(col);
                if (index < 0)
                    return;
                rows.forEach(function (row) {
                    var cell = row.cells[index];
                    if (!cell)
                        return;
                    if (chkElement.checked) {
                        // $(cell).show();
                        cell.visible = true;
                    }
                    else {
                        // $(cell).hide();
                        cell.visible = false;
                    }
                });
                _this_1.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_COLS_REORDERED, {
                    DataSourceName: ds,
                    EventData: { Event: e }
                });
                var confEvent = { EventData: { Event: e, Action: _services__WEBPACK_IMPORTED_MODULE_3__.appActions.COL_SHOW_HIDE }, DataSourceName: ds };
                _this_1.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_CONFIG_UPDATED, confEvent);
            });
        });
    };
    BSDataTable.prototype.resizableGrid = function () {
        // console.log('resizableGrid is reached', this);
        var dataSourceName = this.options.dataSource.name;
        // console.log(table);
        var cols = this.head.getGridTitlesRow().cells;
        this.css = {};
        this.setCss('overflow', 'hidden');
        var tableHeight = this.element.offsetHeight;
        for (var i = 0; i < cols.length; i++) {
            var div = createDiv(tableHeight);
            cols[i].element.append(div);
            cols[i].setCss('position', 'relative');
            setListeners(div, cols[i], this);
        }
        /**
         * @param {HTMLDivElement} div
         * @param {BSDataTableCell} col
         * @param {BSDataTable} table
         */
        function setListeners(div, col, table) {
            var pageX, curCol, curColWidth, nxtColWidth, tableWidth;
            div.addEventListener('mousedown', function (e) {
                tableWidth = table.element.offsetWidth;
                curCol = col.element;
                pageX = e.pageX;
                var padding = paddingDiff(curCol);
                curColWidth = curCol.offsetWidth - padding;
            });
            div.addEventListener('mouseover', function (e) {
                this.style.borderRight = '2px solid #0000ff';
            });
            div.addEventListener('mouseout', function (e) {
                this.style.borderRight = '';
            });
            document.addEventListener('mousemove', function (e) {
                if (curCol) {
                    var diffX = e.pageX - pageX;
                    curCol.style.width = (curColWidth + diffX) + 'px';
                    table.element.style.width = tableWidth + diffX + "px";
                }
            });
            document.addEventListener('mouseup', function (e) {
                if (curCol) {
                    var confEvent = {
                        EventData: {
                            Event: e, CurrentCol: curCol,
                            Action: _services__WEBPACK_IMPORTED_MODULE_3__.appActions.COL_RESIZED
                        }, DataSourceName: dataSourceName
                    };
                    table.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_CONFIG_UPDATED, confEvent);
                }
                curCol = undefined;
                pageX = undefined;
                nxtColWidth = undefined;
                curColWidth = undefined;
            });
        }
        /**
         * @param {string} height
         */
        function createDiv(height) {
            var div = document.createElement('div');
            div.style.top = "0";
            div.style.right = "0";
            div.style.width = '5px';
            div.style.position = 'absolute';
            div.style.cursor = 'col-resize';
            div.style.userSelect = 'none';
            div.style.height = height + 'px';
            return div;
        }
        function paddingDiff(col) {
            if (getStyleVal(col, 'box-sizing') == 'border-box') {
                return 0;
            }
            var padLeft = getStyleVal(col, 'padding-left');
            var padRight = getStyleVal(col, 'padding-right');
            return (parseInt(padLeft) + parseInt(padRight));
        }
        function getStyleVal(elm, css) {
            return (window.getComputedStyle(elm, null).getPropertyValue(css));
        }
    };
    BSDataTable.prototype.enableColumnReordering = function () {
        // console.log('enableColumnReordering is reached', this);
        var _this_1 = this;
        var dataSourceName = this.options.dataSource.name;
        var _this = this;
        //var gridId = $table.attr('id');
        //console.log('datasource-name', dataSourceName);
        var addWaitMarker = function () {
            // var dw = jq('<div></div>');
            // dw.addClass('wait-reorder').hide();
            // var ct = jq('<div class="d-flex justify-content-center"></div>');
            // var ds = jq('<div></div>').addClass('spinner-border');
            // ds.append('<span class="visually-hidden">Wait...</span>');
            // ct.append(ds);
            // dw.append(ct);
            // _this.addClass('caption-top');
            // var caption = jq('<caption></caption>').append(dw);
            // _this.element.append(caption);
        };
        var wrapper = document.createElement('div');
        wrapper.draggable = true;
        wrapper.classList.add('grid-header');
        var headerRow = _this.head.getGridTitlesRow();
        var cells = headerRow.cells;
        cells.forEach(function (cell) {
            var childs = cell.childrenNodes();
            if (childs.length === 0) {
                var txt = cell.getText();
                cell.setText('');
                var el = document.createElement('div');
                el.textContent = txt;
                cell.appendChild(el);
                _this_1.wrap(wrapper, el);
            }
            else {
                _this_1.wrap(wrapper, childs);
            }
        });
        // addWaitMarker();
        var srcElement;
        this.findElements('.grid-header').forEach(function (el) {
            //
            // attach drag handlers to the element
            //
            _this_1.addDragHandlers(el, {
                dragStart: function (e) {
                    if (!this.classList.contains('grid-header')) {
                        srcElement = undefined;
                        return;
                    }
                    ;
                    srcElement = this;
                    this.style.opacity = '0.5';
                },
                dragLeave: function (e) {
                    e.preventDefault();
                    if (!srcElement)
                        return;
                    if (!this.classList.contains('grid-header'))
                        return;
                    this.classList.remove('over');
                },
                dragEnter: function (e) {
                    e.preventDefault();
                    if (!srcElement)
                        return;
                    if (!this.classList.contains('grid-header'))
                        return;
                    this.classList.add('over');
                    // e.preventDefault();
                },
                dragOver: function (e) {
                    e.preventDefault();
                    if (!srcElement)
                        return;
                    if (!this.classList.contains('grid-header'))
                        return;
                    this.classList.add('over');
                },
                dragEnd: function (e) {
                    e.preventDefault();
                    if (!srcElement)
                        return;
                    this.style.opacity = '1';
                },
                drop: function (e) {
                    e.preventDefault();
                    if (!srcElement)
                        return;
                    // var $this = jq(this);
                    this.classList.remove('over');
                    var destElement = this;
                    if (!this.classList.contains('grid-header'))
                        return;
                    if (srcElement === destElement)
                        return;
                    //var cols = _this.head.rows[0].cells;
                    // dest
                    var destParent = this.closest('th');
                    if (!destParent)
                        return;
                    // lookup in cells
                    var desParentCell = cells.find(function (el) { return el.element === destParent; });
                    if (!desParentCell)
                        return;
                    var toIndex = cells.indexOf(desParentCell);
                    // src
                    var srcParent = srcElement.closest('th');
                    if (!srcParent)
                        return;
                    // lookup in cells
                    var srcParentCell = cells.find(function (el) { return el.element === srcParent; });
                    if (!desParentCell)
                        return;
                    var fromIndex = cells.indexOf(srcParentCell);
                    //console.log(toIndex, fromIndex);
                    if (toIndex == fromIndex)
                        return;
                    //
                    // apply new order to the headers
                    //
                    reOrder(headerRow, cells, fromIndex, toIndex);
                    var rows = _this.body.rows;
                    // jq('.wait-reorder').css({ 'cursor': 'progress' }).show();
                    //
                    // apply new order to all the rows in the grid
                    //
                    setTimeout(function () {
                        //console.log('Reordering started, ', new Date());
                        for (var index = 0; index < rows.length; index++) {
                            // debugger;
                            var row = rows[index];
                            var cells = row.cells;
                            if (toIndex == fromIndex)
                                return;
                            reOrder(row, cells, fromIndex, toIndex);
                        }
                        //console.log('Reordering completed, ', new Date());
                        //
                        // notify about column re-ordering
                        //
                        _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_COLS_REORDERED, { DataSourceName: dataSourceName, EventData: { Event: e } });
                        var confEvent = { EventData: { Event: e, Action: _services__WEBPACK_IMPORTED_MODULE_3__.appActions.COL_REORDER }, DataSourceName: dataSourceName };
                        _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_3__.appDataEvents.ON_GRID_CONFIG_UPDATED, confEvent);
                        // jq('.wait-reorder').css({ 'cursor': '' }).hide();
                    }, 500);
                }
            });
        });
        var reOrder = function (/** @type {BSDataTableRow} */ row, /** @type {BSDataTableCell[]} */ cells, /** @type {number} */ fromIndex, /** @type {number} */ toIndex) {
            // debugger;
            if (fromIndex == toIndex)
                return;
            var dir = directions.ltr;
            if (fromIndex > toIndex) {
                dir = directions.rtl;
            }
            if (dir === directions.rtl) {
                swapRtl(cells, fromIndex, toIndex);
            }
            else {
                swapLtr(cells, fromIndex, toIndex);
            }
            // debugger;
            row.cells = [];
            row.addCells(cells);
            //jq(row).append(cells);
        };
        var swapRtl = function (/** @type {BSDataTableCell[]} */ cells, /** @type {number} */ fromIndex, /** @type {number} */ toIndex) {
            for (var i = fromIndex; i > toIndex; i--) {
                swap(cells, i, i - 1);
            }
        };
        var swapLtr = function (/** @type {BSDataTableCell[]} */ cells, /** @type {number} */ fromIndex, /** @type {number} */ toIndex) {
            for (var i = fromIndex; i < toIndex; i++) {
                swap(cells, i, i + 1);
            }
        };
        var swap = function (/** @type {BSDataTableCell[]} */ arr, /** @type {number} */ ia, /** @type {number} */ ib) {
            var temp = arr[ia];
            arr[ia] = arr[ib];
            arr[ib] = temp;
        };
        var directions = { rtl: 'RIGHT-TO-LEFT', ltr: 'LEFT-TO-RIGHT' };
    };
    BSDataTable.prototype.onGridConfigurationChanged = function (eventArgs) {
        // console.log('grid configuration updated', eventArgs);
        // debugger;
        var action = eventArgs.EventData.Action;
        var gridId = this.options.gridId;
        var cols = this.head.getGridTitlesRow().cells;
        // console.log(cols);
        var colsObj = {};
        cols.forEach(function (col, index) {
            var prop = col.options.PropName;
            if (!prop)
                return;
            var asc = true;
            if (col.hasClass('sorting_desc'))
                asc = false;
            var colAttr = { Width: col.getCss('width'), Visible: col.visible, Ascending: asc, Position: index };
            colsObj[prop] = colAttr;
        });
        _services__WEBPACK_IMPORTED_MODULE_3__.CookieHelper["delete"](gridId);
        setTimeout(function () {
            // console.log('Colsobject: ', colsObj);
            _services__WEBPACK_IMPORTED_MODULE_3__.CookieHelper.setJSON(gridId, colsObj, { days: 30, secure: true, SameSite: 'strict' });
        }, 500);
    };
    BSDataTable.prototype.onGridDataBound = function (eventArgs) {
        // console.log(eventArgs);
        // var grid = eventArgs.source;
        //
        // enables the configuration of columns
        //
        this.configurableGrid();
        //
        // enables to re-order the columns
        //
        this.enableColumnReordering();
        //
        // make the grid resixeable
        //
        this.resizableGrid();
    };
    return BSDataTable;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableActions.ts":
/*!**********************************************!*\
  !*** ./src/components/BSDataTableActions.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_363768__) => {

"use strict";
__nested_webpack_require_363768__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_363768__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableActions": () => (/* binding */ BSDataTableActions)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_363768__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableActions = /** @class */ (function (_super) {
    __extends(BSDataTableActions, _super);
    function BSDataTableActions() {
        var _this = _super.call(this) || this;
        _this.render();
        return _this;
    }
    BSDataTableActions.prototype.render = function () {
        this.element = document.createElement('div');
        this.element.classList.add('row', 'actions-container');
    };
    BSDataTableActions.prototype.addAction = function (id, type, icon, callback) {
        var btn = this.getButton(id, type, icon);
        btn.addEventListener('click', callback);
        this.element.appendChild(btn);
        return this;
    };
    /**
     * @param {(arg0: object) => any} [callback]
     */
    BSDataTableActions.prototype.addDeleteAction = function (callback) {
        return this.addAction('btnDeleteRow', 'danger', 'trash', callback);
    };
    /**
     * @param {(arg0: object) => any} [callback]
     */
    BSDataTableActions.prototype.addNewRecordAction = function (callback) {
        return this.addAction('btnAddRow', 'primary', 'plus-circle', callback);
    };
    BSDataTableActions.prototype.addGridSettingsAction = function () {
        var btn = this.getButton('btnSettings', 'primary', 'gear');
        btn.setAttribute('data-bs-toggle', 'modal');
        btn.setAttribute('data-bs-target', "#staticBackdrop_".concat(this.dataSourceName));
        this.element.append(btn);
        return this;
    };
    BSDataTableActions.prototype.getButton = function (id, type, icon) {
        var btn = document.createElement('button');
        btn.type = "button";
        btn.classList.add('btn', 'btn-sm', "btn-outline-".concat(type), 'grid-toolbar-action');
        btn.id = "".concat(id, "_").concat(this.dataSourceName);
        this.appendIcon(btn, icon);
        return btn;
    };
    BSDataTableActions.prototype.getIcon = function (iconType) {
        var icon = document.createElement('i');
        icon.classList.add('bi', "bi-".concat(iconType));
        return icon;
    };
    BSDataTableActions.prototype.appendIcon = function (elem, iconType) {
        var icon = this.getIcon(iconType);
        elem.append(icon);
    };
    return BSDataTableActions;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableBase.ts":
/*!*******************************************!*\
  !*** ./src/components/BSDataTableBase.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_367582__) => {

"use strict";
__nested_webpack_require_367582__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_367582__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableBase": () => (/* binding */ BSDataTableBase)
/* harmony export */ });
var BSDataTableBase = /** @class */ (function () {
    function BSDataTableBase() {
        this.children = [];
    }
    /**
     * Add handler to the events raised by the DOM
     */
    BSDataTableBase.prototype.addEventHandler = function (eventName, handler) {
        this.element.addEventListener(eventName, handler);
    };
    Object.defineProperty(BSDataTableBase.prototype, "title", {
        get: function () {
            return this.element.title;
        },
        set: function (val) {
            this.element.title = val;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableBase.prototype, "dataSourceName", {
        get: function () {
            return this._dataSourceName;
        },
        set: function (v) {
            this._dataSourceName = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableBase.prototype, "isReadOnly", {
        get: function () {
            return this._isReadOnly;
        },
        set: function (v) {
            this._isReadOnly = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableBase.prototype, "dirtyRecords", {
        get: function () {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableBase.prototype, "width", {
        get: function () {
            return this.element.style.width;
        },
        set: function (width) {
            this.element.style.width = width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableBase.prototype, "visible", {
        get: function () {
            //return !!(this.element.offsetWidth || this.element.offsetHeight || this.element.getClientRects().length);
            return this.element.hidden === false;
        },
        set: function (val) {
            //this.element.style.display = val === false ? "none" : "block";
            this.element.hidden = val === false;
        },
        enumerable: false,
        configurable: true
    });
    BSDataTableBase.prototype.getCss = function (t) {
        return this.element.style[t];
    };
    BSDataTableBase.prototype.setCss = function (k, v) {
        this.element.style[k] = v;
    };
    Object.defineProperty(BSDataTableBase.prototype, "css", {
        set: function (css) {
            var _this_1 = this;
            if (typeof css === 'object' && css !== null && this.isEmptyObj(css) === false) {
                var keys = Object.keys(css);
                keys.forEach(function (k) {
                    _this_1.element.style[k] = css[k];
                });
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * @param {object[]} props
     */
    BSDataTableBase.prototype.props = function (props) {
        var _this = this;
        props.forEach(function (p) { return _this.prop(p.key, p.value); });
    };
    /**
     * Sets the value of an attribute
     * @param key
     * @param value
     * @returns
     */
    BSDataTableBase.prototype.prop = function (key, value) {
        // return this.element.attr(key, value);
        this.element.setAttribute(key, value);
        return this.element;
    };
    BSDataTableBase.prototype.getProp = function (key) {
        return this.element.getAttribute(key);
    };
    // find(selector: string) {
    //     return this.element.querySelectorAll(selector);
    // }
    BSDataTableBase.prototype.findElements = function (selector) {
        return this.element.querySelectorAll(selector);
    };
    BSDataTableBase.prototype.findById = function (id) {
        return document.getElementById(id);
    };
    BSDataTableBase.prototype.removeElement = function (el) {
        var parent = el.parentElement;
        parent.removeChild(el);
    };
    BSDataTableBase.prototype.addClass = function (cssClass) {
        var _a;
        var split = cssClass.split(' ');
        (_a = this.element.classList).add.apply(_a, split);
        return this;
    };
    BSDataTableBase.prototype.removeClass = function (cssClass) {
        this.element.classList.remove(cssClass);
        return this;
    };
    BSDataTableBase.prototype.hasClass = function (cssClass) {
        return this.element.classList.contains(cssClass);
    };
    BSDataTableBase.prototype.setText = function (txt) {
        this.element.innerText = txt;
        return this;
    };
    BSDataTableBase.prototype.getText = function () {
        return this.element.innerText;
    };
    /**
     *
     * @param {BSDataTableBase} elem
     */
    BSDataTableBase.prototype.append = function (elem, pushToArray) {
        if (pushToArray === void 0) { pushToArray = true; }
        if (pushToArray) {
            this.children.push(elem);
        }
        this.element.appendChild(elem.element);
        return this;
    };
    BSDataTableBase.prototype.focus = function () {
        this.element.focus();
    };
    BSDataTableBase.prototype.isEmptyObj = function (obj) {
        return Object.keys(obj).length === 0;
    };
    Object.defineProperty(BSDataTableBase.prototype, "id", {
        get: function () {
            return this.getProp('id');
        },
        set: function (v) {
            this.prop('id', v);
        },
        enumerable: false,
        configurable: true
    });
    BSDataTableBase.prototype.clone = function () {
        //debugger;
        var c = new BSDataTableBase();
        // c.element = this.element.clone();
        var x = this.element.cloneNode();
        if (x instanceof HTMLElement) {
            c.element = x;
        }
        if (this.children.length > 0) {
            var list = this.children.map(function (v) {
                var cc = v.clone();
                c.element.append(cc.element);
                return cc;
            });
            c.children = list;
        }
        return c;
    };
    /**
     * a shallow clone
     * @param {object} obj
     * @returns
     */
    BSDataTableBase.prototype.shClone = function (obj) {
        if (!obj)
            return obj;
        return Object.assign(Object.create(Object.getPrototypeOf(obj)), obj);
    };
    BSDataTableBase.prototype.childrenNodes = function () {
        return this.element.children;
    };
    BSDataTableBase.prototype.appendChild = function (node) {
        this.element.appendChild(node);
    };
    BSDataTableBase.prototype.wrap = function (wrapper, nodes) {
        var clone = wrapper.cloneNode();
        if (nodes instanceof Element) {
            var parent = nodes.parentElement;
            clone.appendChild(nodes);
            parent.appendChild(clone);
        }
        else {
            if (nodes.length <= 0)
                return;
            var parent = nodes[0].parentElement;
            for (var index = 0; index < nodes.length; index++) {
                var element = nodes[index];
                clone.appendChild(element);
            }
            parent.appendChild(clone);
        }
    };
    BSDataTableBase.prototype.addDragHandlers = function (node, dragHandlers) {
        if (!dragHandlers || this.isEmptyObj(dragHandlers))
            return;
        if (dragHandlers.dragStart) {
            node.addEventListener('dragstart', dragHandlers.dragStart);
        }
        if (dragHandlers.dragLeave) {
            node.addEventListener('dragleave', dragHandlers.dragLeave);
        }
        if (dragHandlers.dragEnter) {
            node.addEventListener('dragenter', dragHandlers.dragEnter);
        }
        if (dragHandlers.dragOver) {
            node.addEventListener('dragover', dragHandlers.dragOver);
        }
        if (dragHandlers.dragEnd) {
            node.addEventListener('dragend', dragHandlers.dragEnd);
        }
        if (dragHandlers.drop) {
            node.addEventListener('drop', dragHandlers.drop);
        }
    };
    BSDataTableBase.prototype.matches = function (elem, filter) {
        if (elem && elem.nodeType === 1) {
            if (filter) {
                return elem.matches(filter);
            }
            return true;
        }
        return false;
    };
    BSDataTableBase.prototype.siblings = function (selector) {
        var _this_1 = this;
        var list = [];
        if (!this.element.parentNode)
            return list;
        this.element.parentNode.childNodes.forEach(function (nd) {
            if (nd === _this_1.element)
                return;
            if (_this_1.matches(nd, selector)) {
                list.push(nd);
            }
        });
        return list;
    };
    return BSDataTableBase;
}());



/***/ }),

/***/ "./src/components/BSDataTableBody.ts":
/*!*******************************************!*\
  !*** ./src/components/BSDataTableBody.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_377102__) => {

"use strict";
__nested_webpack_require_377102__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_377102__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableBody": () => (/* binding */ BSDataTableBody)
/* harmony export */ });
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_377102__(/*! ../services */ "./src/services/index.ts");
/* harmony import */ var _BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_377102__(/*! ./BSDataTableRowCollection */ "./src/components/BSDataTableRowCollection.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BSDataTableBody = /** @class */ (function (_super) {
    __extends(BSDataTableBody, _super);
    function BSDataTableBody() {
        var _this = _super.call(this) || this;
        _this.render();
        return _this;
    }
    BSDataTableBody.prototype.render = function () {
        this.element = document.createElement('tbody');
    };
    BSDataTableBody.prototype.notifyListeners = function (eventType, payload) {
        _services__WEBPACK_IMPORTED_MODULE_0__.dataEventsService.Emit(eventType, this, payload);
    };
    /**
    * @param {BSDataTableRow} row
    */
    BSDataTableBody.prototype.rowSiblings = function (row) {
        return this.rows.filter(function (v, i) {
            if (v !== row)
                return v; // return all except the current row
        });
    };
    /**
     * @param {BSDataTableRow} row
     */
    BSDataTableBody.prototype.focusRow = function (row) {
        row.removeClass('table-active').addClass('table-active');
        var siblings = this.rowSiblings(row);
        siblings.forEach(function (v, i) { return v.removeClass('table-active'); });
    };
    ;
    BSDataTableBody.prototype.getTemplateRow = function () {
        var result = this.rows.filter(function (v) {
            if (v.options.isTemplateRow === true)
                return v;
        });
        if (result && result.length > 0)
            return result[0];
    };
    BSDataTableBody.prototype.getDirtyRows = function () {
        var rows = this.rows.filter(function (v, i) { return v.isRowDirty(); });
        return rows;
    };
    BSDataTableBody.prototype.getDirtyRecords = function () {
        var dirtyRows = this.getDirtyRows();
        if (dirtyRows.length === 0) {
            return [];
        }
        var records = [];
        dirtyRows.forEach(function (row, i) {
            records.push(row.getRowData());
        });
        return records;
    };
    BSDataTableBody.prototype.getAllRecords = function () {
        //
        // all rows except the template row
        //
        var rows = this.rows.filter(function (row) { return row.options.isTemplateRow === false; });
        var records = [];
        rows.forEach(function (row) {
            records.push(row.getRowData());
        });
        return records;
    };
    BSDataTableBody.prototype.getSelectedRow = function () {
        return this.rows.find(function (v, i) { return v.hasClass('table-active'); });
    };
    BSDataTableBody.prototype.markDeleted = function () {
        var row = this.getSelectedRow();
        if (!row)
            return;
        var siblings = this.rowSiblings(row);
        var lastSibling = siblings[siblings.length - 1];
        row.removeClass('table-active');
        row.prop('data-isdirty', 'true');
        row.css = { 'display': 'none' };
        var rowCat = row.rowCategory;
        if (rowCat === 'ADDED') {
            row.rowCategory = 'ADDED_DELETED';
        }
        else {
            row.rowCategory = 'DELETED';
        }
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_GRID_UPDATED, { DataSourceName: row.options.dataSourceName, EventData: { Event: row } });
        this.focusRow(lastSibling);
    };
    /**
     * Removes the row from rows collection
     * @param {BSDataTableRow} row
     */
    BSDataTableBody.prototype.removeRow = function (row) {
        // this.find(`tr[data-rowcategory='${row.rowCategory}']`).remove();
        row.element.remove();
        var index = this.rows.indexOf(row);
        if (index > -1)
            this.rows.splice(index, 1);
    };
    return BSDataTableBody;
}(_BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_1__.BSDataTableRowCollection));



/***/ }),

/***/ "./src/components/BSDataTableButton.ts":
/*!*********************************************!*\
  !*** ./src/components/BSDataTableButton.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_382536__) => {

"use strict";
__nested_webpack_require_382536__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_382536__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableButton": () => (/* binding */ BSDataTableButton)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_382536__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableButton = /** @class */ (function (_super) {
    __extends(BSDataTableButton, _super);
    function BSDataTableButton(options) {
        var _this = this;
        options.InputType = 'button';
        _this = _super.call(this, options) || this;
        _this.options = options;
        _this.render();
        return _this;
    }
    BSDataTableButton.prototype.render = function () {
        var _a;
        _super.prototype.render.call(this);
        //var icon = this.options.Icon ? `<i class="bi bi-${this.options.Icon}"></i>` : '';
        this.addClass((_a = this.options.Classes) !== null && _a !== void 0 ? _a : 'btn btn-outline-primary');
        if (this.options.Icon) {
            var icon = document.createElement('i');
            icon.classList.add('bi', "bi-".concat(this.options.Icon));
            this.element.appendChild(icon);
        }
        if (this.options.Handler)
            this.addClickHandler();
    };
    BSDataTableButton.prototype.addClickHandler = function () {
        var _this = this;
        this.element.addEventListener('click', function (e) { return _this.options.Handler(e); });
    };
    BSDataTableButton.prototype.clone = function () {
        var sc = _super.prototype.clone.call(this);
        var btn = new BSDataTableButton(this.shClone(this.options));
        btn.children = sc.children;
        return btn;
    };
    return BSDataTableButton;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/BSDataTableCell.ts":
/*!*******************************************!*\
  !*** ./src/components/BSDataTableCell.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_385524__) => {

"use strict";
__nested_webpack_require_385524__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_385524__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableCell": () => (/* binding */ BSDataTableCell)
/* harmony export */ });
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_385524__(/*! ../commonTypes/common-types */ "./src/commonTypes/common-types.ts");
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_385524__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_385524__(/*! ./BSDataTableCheckBox */ "./src/components/BSDataTableCheckBox.ts");
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_385524__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var BSDataTableCell = /** @class */ (function (_super) {
    __extends(BSDataTableCell, _super);
    /**
     * @param {BSDataTableColDefinition} [options]
     */
    function BSDataTableCell(options, isHeader) {
        if (isHeader === void 0) { isHeader = false; }
        var _this = _super.call(this) || this;
        _this.options = options || new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition();
        _this.isHeader = isHeader;
        _this.render();
        return _this;
    }
    BSDataTableCell.prototype.render = function () {
        var rowSpan = this.options ? this.options.RowSpan : undefined;
        var colSpan = this.options ? this.options.ColSpan : undefined;
        this.element =
            this.isHeader === true
                ? document.createElement('th')
                : document.createElement('td');
        if (this.isHeader) {
            this.element.classList.add('sorting', 'ds-col');
        }
        if (rowSpan)
            this.prop('rowSpan', rowSpan);
        if (colSpan)
            this.prop('colSpan', colSpan);
    };
    BSDataTableCell.prototype.getCellText = function () {
        var child = this.children[0];
        if (!child)
            return "";
        if (child.element instanceof HTMLInputElement) {
            if (child instanceof _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_2__.BSDataTableCheckBox) {
                return child.element.checked + "";
            }
            else if (child instanceof _BSDataTableInput__WEBPACK_IMPORTED_MODULE_3__.BSDataTableInput) {
                return child.val;
            }
        }
        return child.getText();
    };
    BSDataTableCell.prototype.clone = function () {
        // debugger;
        var sc = _super.prototype.clone.call(this);
        var c = new BSDataTableCell(this.shClone(this.options), this.isHeader);
        c.children = sc.children;
        c.element = sc.element;
        return c;
    };
    return BSDataTableCell;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableCheckBox.ts":
/*!***********************************************!*\
  !*** ./src/components/BSDataTableCheckBox.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_389636__) => {

"use strict";
__nested_webpack_require_389636__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_389636__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableCheckBox": () => (/* binding */ BSDataTableCheckBox)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_389636__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableCheckBox = /** @class */ (function (_super) {
    __extends(BSDataTableCheckBox, _super);
    function BSDataTableCheckBox(options) {
        var _this = this;
        options.InputType = 'checkbox';
        _this = _super.call(this, options) || this;
        _this.render();
        return _this;
    }
    BSDataTableCheckBox.prototype.clone = function () {
        var sc = _super.prototype.clone.call(this);
        var c = new BSDataTableCheckBox(this.shClone(this.options));
        c.element = sc.element;
        c.children = sc.children;
        this.addDoubleClickEvent();
        return c;
    };
    return BSDataTableCheckBox;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/BSDataTableHeader.ts":
/*!*********************************************!*\
  !*** ./src/components/BSDataTableHeader.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_391862__) => {

"use strict";
__nested_webpack_require_391862__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_391862__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableHeader": () => (/* binding */ BSDataTableHeader)
/* harmony export */ });
/* harmony import */ var _BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_391862__(/*! ./BSDataTableRowCollection */ "./src/components/BSDataTableRowCollection.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableHeader = /** @class */ (function (_super) {
    __extends(BSDataTableHeader, _super);
    function BSDataTableHeader() {
        var _this = _super.call(this) || this;
        _this.render();
        return _this;
    }
    BSDataTableHeader.prototype.render = function () {
        this.element = document.createElement('thead');
        this.addClass('table-light');
    };
    return BSDataTableHeader;
}(_BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_0__.BSDataTableRowCollection));



/***/ }),

/***/ "./src/components/BSDataTableHttpClient.ts":
/*!*************************************************!*\
  !*** ./src/components/BSDataTableHttpClient.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_393900__) => {

"use strict";
__nested_webpack_require_393900__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_393900__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableHttpClient": () => (/* binding */ BSDataTableHttpClient)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_393900__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_393900__(/*! ../services */ "./src/services/index.ts");
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_393900__(/*! ../commonTypes/common-types */ "./src/commonTypes/common-types.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



var BSDataTableHttpClient = /** @class */ (function (_super) {
    __extends(BSDataTableHttpClient, _super);
    function BSDataTableHttpClient(sessionStorage, dataSourceName, cacheResponses) {
        if (cacheResponses === void 0) { cacheResponses = false; }
        var _this_1 = _super.call(this) || this;
        _this_1.sessionStorage = sessionStorage;
        _this_1.dataSourceName = dataSourceName;
        _this_1.cacheResponses = cacheResponses;
        return _this_1;
    }
    BSDataTableHttpClient.prototype.notifyListeners = function (eventType, payload) {
        _services__WEBPACK_IMPORTED_MODULE_1__.dataEventsService.Emit(eventType, this, payload);
    };
    /**
     * @param {BSDataTableHttpClientOptions} options
     */
    BSDataTableHttpClient.prototype.get = function (options) {
        // debugger;
        var _this = this;
        var cache = _this.cacheResponses;
        if (cache === true) {
            var key = JSON.stringify(options);
            var value = this.sessionStorage.getItem(key);
            if (value) {
                _this.notifyResponse(value);
                return;
            }
        }
        var request = {
            method: 'GET',
            headers: options.headers ? options.headers : {}
        };
        fetch(options.url, request)
            .then(function (response) { return response.json(); })
            .then(function (data) {
            if (cache === true) {
                _this.sessionStorage.addItem(key, data, new Date(Date.now() + (10 * 60 * 1000))); // expires in 10 minutes
            }
            _this.notifyResponse(data);
        })
            .catch(function (error) {
            _this.nofifyError(error, options);
        });
    };
    ;
    BSDataTableHttpClient.prototype.notifyResponse = function (response) {
        try {
            var fetchRecordEvent = {
                DataSourceName: this.dataSourceName,
                EventData: {
                    Data: response.items,
                    MetaData: new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTablePagingMetaData(response.metaData.pageIndex, response.metaData.pageSize, response.metaData.totalRecords)
                }
            };
        }
        catch (error) {
            console.log('invalid response. Make sure response have fields: items{array[object]}, metaData {pageIndex, pageSize, totalRecords}');
            return;
        }
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_1__.appDataEvents.ON_FETCH_GRID_RECORD, fetchRecordEvent);
    };
    BSDataTableHttpClient.prototype.nofifyError = function (error, options) {
        var errEvent = { DataSourceName: this.dataSourceName, EventData: { Event: error, RecordId: options.recordId } };
        this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_1__.appDataEvents.ON_FETCH_GRID_RECORD_ERROR, errEvent);
    };
    return BSDataTableHttpClient;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableInfiniteScroll.ts":
/*!*****************************************************!*\
  !*** ./src/components/BSDataTableInfiniteScroll.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_398793__) => {

"use strict";
__nested_webpack_require_398793__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_398793__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableInfiniteScroll": () => (/* binding */ BSDataTableInfiniteScroll)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_398793__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableInfiniteScroll = /** @class */ (function (_super) {
    __extends(BSDataTableInfiniteScroll, _super);
    function BSDataTableInfiniteScroll(options) {
        var _this = _super.call(this) || this;
        _this.gridElement = options.gridElement;
        _this.httpClient = options.httpClient;
        _this.s_area = null;
        _this.observer = null;
        _this.target = null;
        // this.totalPages = null;
        _this.currentPage = 1;
        _this.initData = null;
        _this.initMetaData = null;
        _this.nextPageCallback = null;
        return _this;
    }
    /**
     * @param {IntersectionObserverEntry[]} entries
     * @param {IntersectionObserver} sender
     */
    BSDataTableInfiniteScroll.prototype.observerCB = function (entries, sender) {
        var entry = entries[0];
        // console.log(entry);
        if (entry.isIntersecting === true) {
            // console.log('Observer is invoked. Entry: ', entry);
            // console.log('initdata: ', this.initData);
            // console.log('metadata: ', this.initMetaData);
            //
            // fetch next page if we still have more pages to read
            //
            if (this.currentPage < this.initMetaData.totalPages) {
                console.log('Infinite scroll: fetching next page#: ', this.currentPage + 1);
                this.currentPage++;
                this.nextPageCallback(this.currentPage);
            }
        }
    };
    BSDataTableInfiniteScroll.prototype.observe = function (el) {
        this.target = el;
        this.observer.observe(el);
    };
    BSDataTableInfiniteScroll.prototype.unobserve = function () {
        this.observer.unobserve(this.target);
    };
    BSDataTableInfiniteScroll.prototype.enable = function () {
        var _this = this;
        this.s_area = 'scroll_area_' + this.gridElement.id;
        var scrollArea = document.createElement('div');
        scrollArea.id = this.s_area;
        scrollArea.classList.add('row', 'bs-scroll');
        this.wrap(scrollArea, this.gridElement);
        var root = document.getElementById(this.s_area);
        var options = {
            root: root,
            rootMargin: '0px',
            threshold: 0.3,
            trackVisibility: false
        };
        this.observer = new IntersectionObserver(function (entries, sender) { return _this.observerCB(entries, sender); }, options);
        var rows = this.gridElement.querySelectorAll('tr');
        var lastRow = rows[rows.length - 1];
        var target = lastRow;
        // console.log(target, root);
        this.observe(target);
    };
    return BSDataTableInfiniteScroll;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableInput.ts":
/*!********************************************!*\
  !*** ./src/components/BSDataTableInput.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_403070__) => {

"use strict";
__nested_webpack_require_403070__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_403070__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableInput": () => (/* binding */ BSDataTableInput)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_403070__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_403070__(/*! ../services */ "./src/services/index.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BSDataTableInput = /** @class */ (function (_super) {
    __extends(BSDataTableInput, _super);
    function BSDataTableInput(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.dataSourceName = options.DataSourceName;
        return _this;
    }
    BSDataTableInput.prototype.notifyListeners = function (eventType, payload) {
        _services__WEBPACK_IMPORTED_MODULE_1__.dataEventsService.Emit(eventType, this, payload);
    };
    BSDataTableInput.prototype.render = function () {
        var _a;
        if (this.options.InputType === 'select')
            this.element = document.createElement('select');
        else if (this.options.InputType === 'button') {
            var btn = document.createElement('button');
            btn.type = this.options.InputType;
            this.element = btn;
        }
        else {
            var input = document.createElement('input');
            input.type = this.options.InputType;
            this.element = input;
        }
        this.element.id = (_a = this.options.ElementId) !== null && _a !== void 0 ? _a : this.options.InputType + "_" + this.options.DataSourceName + "_" + this.options.ModelName;
        this.title = this.options.Title;
    };
    Object.defineProperty(BSDataTableInput.prototype, "val", {
        get: function () {
            if (!this.element)
                return undefined;
            if (this.element instanceof HTMLInputElement) {
                if (this.options.InputType === 'checkbox')
                    return this.element.checked;
                else if (this.options.InputType === 'number')
                    return this.element.valueAsNumber;
                else
                    return this.element.value;
            }
            return this.element['value'];
        },
        set: function (v) {
            if (!this.element)
                return;
            if (this.options.InputType === 'checkbox')
                this.element['checked'] = v;
            else
                this.element['value'] = v;
            // invoke change event if its a select input
            if (this.options.InputType === 'select') {
                this.change();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableInput.prototype, "valExt", {
        /**
         * This method should be used with dropdowns where just setting the val of element is not enough
         * this method ensure that 'change' is called after 'val' so that value of the selector is set properly
         * @param {string} v - value
         */
        set: function (v) {
            this.val = v;
            this.change();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableInput.prototype, "readonly", {
        // get modelName() {
        //     return this.getProp('data-propname');
        // }
        // set modelName(v) {
        //     this.prop('data-propname', v);
        // }
        get: function () {
            if (this.element instanceof HTMLInputElement)
                return this.element.readOnly;
            return false;
        },
        set: function (v) {
            if (this.element instanceof HTMLInputElement) {
                this.element.readOnly = v;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableInput.prototype, "disabled", {
        get: function () {
            if (this.element instanceof HTMLInputElement || this.element instanceof HTMLSelectElement) {
                return this.element.disabled;
            }
            var val = this.getProp('disabled') === 'true' ? true : false;
            return val;
        },
        set: function (v) {
            if (this.element instanceof HTMLInputElement || this.element instanceof HTMLSelectElement) {
                this.element.disabled = v;
                return;
            }
            var val = v === true ? "true" : "false";
            this.prop('disabled', val);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BSDataTableInput.prototype, "isKey", {
        get: function () {
            return this.getProp('data-keycolumn') === 'true';
        },
        set: function (v) {
            this.prop('data-keycolumn', v);
        },
        enumerable: false,
        configurable: true
    });
    BSDataTableInput.prototype.clone = function () {
        return _super.prototype.clone.call(this);
    };
    BSDataTableInput.prototype.addDoubleClickEvent = function () {
        var _this = this;
        this.element.addEventListener('dblclick', function (e) {
            _this.notifyListeners(_services__WEBPACK_IMPORTED_MODULE_1__.appDataEvents.ON_ROW_DOUBLE_CLICKED, { EventData: { Event: e }, DataSourceName: _this.options.DataSourceName });
        });
    };
    BSDataTableInput.prototype.change = function () {
        this.element.dispatchEvent(new Event('change'));
    };
    return BSDataTableInput;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableMarker.ts":
/*!*********************************************!*\
  !*** ./src/components/BSDataTableMarker.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_410004__) => {

"use strict";
__nested_webpack_require_410004__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_410004__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableMarker": () => (/* binding */ BSDataTableMarker)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_410004__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableMarker = /** @class */ (function (_super) {
    __extends(BSDataTableMarker, _super);
    function BSDataTableMarker() {
        var _this = _super.call(this) || this;
        _this.render();
        return _this;
    }
    BSDataTableMarker.prototype.render = function () {
        this.element = document.createElement('i');
        this.element.classList.add('bi', 'bi-caret-right', 'row-marker');
    };
    BSDataTableMarker.prototype.clone = function () {
        return _super.prototype.clone.call(this);
    };
    return BSDataTableMarker;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTablePagination.ts":
/*!*************************************************!*\
  !*** ./src/components/BSDataTablePagination.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_412143__) => {

"use strict";
__nested_webpack_require_412143__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_412143__.d(__webpack_exports__, {
/* harmony export */   "BSDataTablePagination": () => (/* binding */ BSDataTablePagination)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_412143__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTablePagination = /** @class */ (function (_super) {
    __extends(BSDataTablePagination, _super);
    /**
     * @param {BSDataTablePaginationOptions} options
     */
    function BSDataTablePagination(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.listId = "pg_list_".concat(_this.options.dsName);
        _this.containerId = "pg_container_".concat(_this.options.dsName);
        return _this;
    }
    BSDataTablePagination.prototype.render = function () {
        var _this = this;
        if (this.element)
            this.element.remove();
        this.element = document.createElement('div');
        this.element.id = this.containerId;
        this.addClass('bs-pagination');
        var pager = document.createElement('nav');
        pager.setAttribute('aria-label', "Page navigation");
        this.element.appendChild(pager);
        var pageList = document.createElement('ul');
        pageList.id = this.listId;
        pageList.classList.add('pagination', 'justify-content-end');
        for (var index = 1; index <= this.options.pagingMetaData.totalPages && index <= 5; index++) {
            var li = document.createElement('li');
            li.classList.add('page-item');
            var link = document.createElement('a');
            link.classList.add('page-link');
            link.href = '#';
            link.classList.add('data-p-index');
            link.innerText = "".concat(index);
            li.appendChild(link);
            pageList.appendChild(li);
            link.addEventListener('click', function (e) {
                e.preventDefault();
                if (e.target instanceof HTMLElement) {
                    var index = e.target.getAttribute('data-p-index');
                    if (_this.options.nextPageCallback)
                        _this.options.nextPageCallback(parseInt(index));
                }
            });
        }
        ;
        pager.appendChild(pageList);
    };
    BSDataTablePagination.prototype.clear = function () {
        var list = this.element.querySelector('#' + this.listId);
        // remove all the children of the list
        // ref: https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript
        list.replaceChildren();
    };
    return BSDataTablePagination;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableRow.ts":
/*!******************************************!*\
  !*** ./src/components/BSDataTableRow.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_416095__) => {

"use strict";
__nested_webpack_require_416095__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_416095__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableRow": () => (/* binding */ BSDataTableRow)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_416095__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_416095__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
/* harmony import */ var _BSDataTableCell__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_416095__(/*! ./BSDataTableCell */ "./src/components/BSDataTableCell.ts");
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_416095__(/*! ../commonTypes/common-types */ "./src/commonTypes/common-types.ts");
/* harmony import */ var _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_416095__(/*! ./BSDataTableTextInput */ "./src/components/BSDataTableTextInput.ts");
/* harmony import */ var _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_416095__(/*! ./BSDataTableCheckBox */ "./src/components/BSDataTableCheckBox.ts");
/* harmony import */ var _BSDataTableSelect__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_416095__(/*! ./BSDataTableSelect */ "./src/components/BSDataTableSelect.ts");
/* harmony import */ var _BSDataTableSelector__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_416095__(/*! ./BSDataTableSelector */ "./src/components/BSDataTableSelector.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = ( false) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};








var BSDataTableRow = /** @class */ (function (_super) {
    __extends(BSDataTableRow, _super);
    /**
     * @param {{ dataSourceName: string; gridId: string; gridHeader?: boolean; isTemplateRow?: boolean; containerId?:string}} options
     */
    function BSDataTableRow(options) {
        var _this = _super.call(this) || this;
        /**
         * @type BSDataTableCell[]
         */
        _this.cells = [];
        _this.options = options;
        _this.render();
        return _this;
    }
    Object.defineProperty(BSDataTableRow.prototype, "rowCategory", {
        get: function () {
            return this.getProp('data-rowcategory');
        },
        set: function (v) {
            this.prop('data-rowcategory', v);
        },
        enumerable: false,
        configurable: true
    });
    /**
    *
    * @param {BSDataTableCell} cell
    */
    BSDataTableRow.prototype.addCell = function (cell) {
        this.element.append(cell.element);
        this.cells.push(cell);
    };
    /**
     * @param {BSDataTableCell[]} cells
     */
    BSDataTableRow.prototype.addCells = function (cells) {
        var _this = this;
        cells.forEach(function (cell) { return _this.addCell(cell); });
    };
    BSDataTableRow.prototype.render = function () {
        if (!this.element)
            this.element = document.createElement('tr');
    };
    /**
     *
     * @returns {BSDataTableRow}
     */
    BSDataTableRow.prototype.clone = function () {
        //var clone = this.element.clone();
        //return new BSDataTableRow({ element: clone, dataSourceName: this.dataSourceName });
        //let clone = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        //return clone;
        var parentClone = _super.prototype.clone.call(this);
        //debugger;
        var optClone = this.shClone(this.options);
        optClone.isTemplateRow = false;
        var cloneRow = new BSDataTableRow(optClone);
        cloneRow.element = parentClone.element;
        cloneRow.children = parentClone.children;
        cloneRow.cells = this.cells.map(function (v) {
            var cloneCell = v.clone();
            cloneRow.element.append(cloneCell.element);
            return cloneCell;
        });
        return cloneRow;
    };
    BSDataTableRow.prototype.focusRow = function () {
        this.removeClass('table-active').addClass('table-active');
    };
    BSDataTableRow.prototype.getInputs = function () {
        /**
         * @type BSDataTableInput[]
         */
        var inputs = [];
        // debugger;
        this.cells.forEach(function (cell, idx) {
            var children = cell.children;
            if (children.length > 0) {
                children.forEach(function (v, i) {
                    if (v instanceof _BSDataTableSelector__WEBPACK_IMPORTED_MODULE_7__.BSDataTableSelector)
                        inputs.push(v.txtElement);
                    else if (v instanceof _BSDataTableInput__WEBPACK_IMPORTED_MODULE_1__.BSDataTableInput)
                        inputs.push(v);
                    // if (v instanceof BSDataTableInput)
                    //     inputs.push(v);
                });
            }
        });
        return inputs;
    };
    /**
     * @param {BSDataTableColDefinition} model
     * @param {BSDataTable} grid instance
     * @returns {BSDataTableCell} returns the grid cell containing the input
     */
    BSDataTableRow.prototype.createInputFor = function (model, readonly) {
        var ds = this.options.dataSourceName;
        var input = null;
        var inputOptions = {
            DataSourceName: ds,
            ModelName: model.PropName,
            PlaceHolder: model.Name,
            Title: model.Name
        };
        //debugger;
        if (model.DataType === 'select') {
            var selectOptions = __assign(__assign({}, inputOptions), { SelectOptions: model.DataSource });
            input = new _BSDataTableSelect__WEBPACK_IMPORTED_MODULE_6__.BSDataTableSelect(selectOptions);
        }
        else if (model.DataType === 'checkbox') {
            input = new _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_5__.BSDataTableCheckBox(inputOptions);
        }
        else if (model.DataType === 'selector') {
            var sltrOptions = __assign(__assign({}, inputOptions), { ContainerId: this.options.containerId, UrlCb: model.SelectorDataCB, GridCols: model.SelectorCols });
            input = new _BSDataTableSelector__WEBPACK_IMPORTED_MODULE_7__.BSDataTableSelector(sltrOptions);
        }
        else {
            input = new _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_4__.BSDataTableTextInput(inputOptions);
        }
        if (model.IsKey === true) {
            input.readonly = true;
            input.isKey = true;
        }
        if (readonly === true) {
            input.readonly = true;
            input.setCss('cursor', 'pointer');
            input.setCss('user-select', 'none');
        }
        var td = new _BSDataTableCell__WEBPACK_IMPORTED_MODULE_2__.BSDataTableCell(new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_3__.BSDataTableColDefinition());
        td.append(input);
        return td;
    };
    /**
     * @param {BSDataTableColDefinition} model
     */
    BSDataTableRow.prototype.createHeaderFor = function (model) {
        var th = new _BSDataTableCell__WEBPACK_IMPORTED_MODULE_2__.BSDataTableCell(model, true);
        th.addClass('sorting').addClass('ds-col');
        th.setText(model.Name);
        th.prop('data-th-propname', model.PropName);
        return th;
    };
    BSDataTableRow.prototype.getVisibleInputs = function () {
        var inputs = this.getInputs();
        return inputs.filter(function (input) { return input.visible === true; });
    };
    /**
     * This function returns the row containing the actual inputs
     * @returns A row record containing actual inputs
     */
    BSDataTableRow.prototype.getRowDataExt = function () {
        var rowInputs = this.getInputs();
        var record = {};
        rowInputs.forEach(function (rowInput, i) {
            var cellPropName = rowInput.options.ModelName;
            record[cellPropName] = rowInput;
        });
        return record;
    };
    BSDataTableRow.prototype.getRowIndex = function () {
        var rowIndex = this.getProp('data-rowindex');
        return parseInt(rowIndex);
    };
    /**
     * This function returns an object which contains the values of the all the inputs in the row
     * @returns Retuns an object which contains the values of the inputs
     */
    BSDataTableRow.prototype.getRowData = function () {
        var rowInputs = this.getInputs();
        var rowIndex = this.getRowIndex();
        var record = {};
        var rowCat = this.rowCategory;
        record['rowCategory'] = rowCat;
        rowInputs.forEach(function (rowInput, i) {
            var cellPropName = rowInput.options.ModelName;
            record[cellPropName] = rowInput.val;
        });
        record["clientRowNumber"] = rowIndex;
        // console.log('GetRowData: ', record);
        return record;
    };
    BSDataTableRow.prototype.isRowDirty = function () {
        return this.getProp('data-isdirty') === 'true';
    };
    return BSDataTableRow;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableRowCollection.ts":
/*!****************************************************!*\
  !*** ./src/components/BSDataTableRowCollection.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_426669__) => {

"use strict";
__nested_webpack_require_426669__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_426669__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableRowCollection": () => (/* binding */ BSDataTableRowCollection)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_426669__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableRowCollection = /** @class */ (function (_super) {
    __extends(BSDataTableRowCollection, _super);
    function BSDataTableRowCollection() {
        var _this = _super.call(this) || this;
        /**
         * @type BSDataTableRow[]
         */
        _this.rows = [];
        return _this;
    }
    /**
     *
     * @param {BSDataTableRow} row
     */
    BSDataTableRowCollection.prototype.addRow = function (row) {
        this.element.append(row.element);
        var index = this.getNextRowIndex();
        row.prop('data-rowindex', index);
        var rType = row.options.gridHeader === true ? 'head' : 'data';
        row.prop('id', "".concat(row.options.gridId, "_").concat(rType, "_").concat(index));
        this.rows.push(row);
        return this;
    };
    BSDataTableRowCollection.prototype.getVisibleRows = function () {
        return this.rows.filter(function (row) { return row.visible === true; });
    };
    BSDataTableRowCollection.prototype.getNextRowIndex = function () {
        return this.rows.length + 1;
    };
    // getActionsRow() {
    //     return this.rows.find((row) => row.options.isActionsRow === true);
    // }
    BSDataTableRowCollection.prototype.getGridTitlesRow = function () {
        return this.rows.find(function (row) { return row.options.gridHeader === true; });
    };
    return BSDataTableRowCollection;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableSelect.ts":
/*!*********************************************!*\
  !*** ./src/components/BSDataTableSelect.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_429643__) => {

"use strict";
__nested_webpack_require_429643__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_429643__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelect": () => (/* binding */ BSDataTableSelect)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_429643__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
/* harmony import */ var _BSDataTableSelectOption__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_429643__(/*! ./BSDataTableSelectOption */ "./src/components/BSDataTableSelectOption.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var BSDataTableSelect = /** @class */ (function (_super) {
    __extends(BSDataTableSelect, _super);
    function BSDataTableSelect(options) {
        var _this = this;
        options.InputType = 'select';
        _this = _super.call(this, options) || this;
        _this.render();
        return _this;
    }
    BSDataTableSelect.prototype.render = function () {
        var _this = this;
        _super.prototype.render.call(this);
        this.options.SelectOptions.forEach(function (opt) { return _this.append(new _BSDataTableSelectOption__WEBPACK_IMPORTED_MODULE_1__.BSDataTableSelectOption(opt)); });
        this.addClass('form-select form-select-sm');
    };
    BSDataTableSelect.prototype.clone = function () {
        var sc = _super.prototype.clone.call(this);
        var c = new BSDataTableSelect(this.shClone(this.options));
        c.element = sc.element;
        c.children = sc.children;
        this.addDoubleClickEvent();
        return c;
    };
    return BSDataTableSelect;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/BSDataTableSelectOption.ts":
/*!***************************************************!*\
  !*** ./src/components/BSDataTableSelectOption.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_432423__) => {

"use strict";
__nested_webpack_require_432423__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_432423__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelectOption": () => (/* binding */ BSDataTableSelectOption)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_432423__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableSelectOption = /** @class */ (function (_super) {
    __extends(BSDataTableSelectOption, _super);
    /**
     *
     * @param {BSDataTableSelectListItem} options
     */
    function BSDataTableSelectOption(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.render();
        return _this;
    }
    BSDataTableSelectOption.prototype.render = function () {
        var opt = document.createElement('option');
        opt.value = this.options.value;
        opt.text = this.options.text;
        if (this.options.isSelected)
            opt.selected = true;
        this.element = opt;
    };
    BSDataTableSelectOption.prototype.clone = function () {
        var clone = _super.prototype.clone.call(this);
        clone.setText(this.options.text);
        return clone;
    };
    return BSDataTableSelectOption;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableSelector.ts":
/*!***********************************************!*\
  !*** ./src/components/BSDataTableSelector.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_434897__) => {

"use strict";
__nested_webpack_require_434897__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_434897__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelector": () => (/* binding */ BSDataTableSelector)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_434897__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
/* harmony import */ var _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_434897__(/*! ./BSDataTableTextInput */ "./src/components/BSDataTableTextInput.ts");
/* harmony import */ var _BSDataTableButton__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_434897__(/*! ./BSDataTableButton */ "./src/components/BSDataTableButton.ts");
/* harmony import */ var _BSDataTableSelectorWindow__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_434897__(/*! ./BSDataTableSelectorWindow */ "./src/components/BSDataTableSelectorWindow.ts");
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_434897__(/*! ../services */ "./src/services/index.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var BSDataTableSelector = /** @class */ (function (_super) {
    __extends(BSDataTableSelector, _super);
    function BSDataTableSelector(options, selectorWindow) {
        var _this = _super.call(this, options) || this;
        _this.options = options;
        _this.selectorWindow = selectorWindow;
        _this.render();
        return _this;
    }
    /**
     * @param {BSDataTableSelectorWindow} sender
     * @param {any} e
     */
    BSDataTableSelector.prototype.onItemSelected = function (sender, e) {
        // console.log('row selected', sender.grid.body.getSelectedRow());
        var row = sender.grid.body.getSelectedRow();
        var selectedInput = row.getInputs().find(function (input) { return input.isKey; });
        if (selectedInput) {
            // console.log('Selected value: ', selectedInput.val);
            // console.log('selector: ', this.txtElement.val);
            this.txtElement.val = selectedInput.val;
            this.txtElement.change(); // call change to fire the change event
        }
        sender.selectorModal.hide();
    };
    BSDataTableSelector.prototype.render = function () {
        var _this = this;
        if (!this.selectorWindow) {
            var sWindow = new _BSDataTableSelectorWindow__WEBPACK_IMPORTED_MODULE_3__.BSDataTableSelectorWindow(this.options);
            this.selectorWindow = sWindow;
        }
        var btnHandler = function (sender, e) {
            _this.selectorWindow.grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_ROW_DOUBLE_CLICKED);
            _this.selectorWindow.grid.addHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_ROW_DOUBLE_CLICKED, function (s, ev) { return sender.onItemSelected(_this.selectorWindow, ev); });
            _this.selectorWindow.show();
        };
        this.txtElement = new _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_1__.BSDataTableTextInput(this.options);
        this.btnElement = new _BSDataTableButton__WEBPACK_IMPORTED_MODULE_2__.BSDataTableButton({
            DataSourceName: this.options.DataSourceName,
            Icon: 'search',
            Handler: function (e) { return btnHandler(_this, e); }
        });
        var wrapper = document.createElement('div');
        wrapper.classList.add('input-group', 'input-group-sm');
        wrapper.appendChild(this.txtElement.element);
        wrapper.appendChild(this.btnElement.element);
        this.element = wrapper;
    };
    BSDataTableSelector.prototype.clone = function () {
        // debugger;
        var sc = _super.prototype.clone.call(this);
        var opt = this.shClone(this.options);
        opt.cloneContext = true;
        var c = new BSDataTableSelector(opt, this.selectorWindow);
        c.children = sc.children;
        return c;
    };
    return BSDataTableSelector;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/BSDataTableSelectorCollection.ts":
/*!*********************************************************!*\
  !*** ./src/components/BSDataTableSelectorCollection.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_440041__) => {

"use strict";
__nested_webpack_require_440041__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_440041__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelectorWindowCollection": () => (/* binding */ BSDataTableSelectorWindowCollection)
/* harmony export */ });
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_440041__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableSelectorWindowCollection = /** @class */ (function (_super) {
    __extends(BSDataTableSelectorWindowCollection, _super);
    function BSDataTableSelectorWindowCollection() {
        var _this = _super.call(this) || this;
        _this.items = [];
        return _this;
    }
    BSDataTableSelectorWindowCollection.prototype.add = function (item) {
        if (!this.findItem(item.options.ModelName))
            this.items.push(item);
    };
    BSDataTableSelectorWindowCollection.prototype.findItem = function (modelName) {
        return this.items.find(function (item) { return item.options.ModelName === modelName; });
    };
    return BSDataTableSelectorWindowCollection;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableSelectorWindow.ts":
/*!*****************************************************!*\
  !*** ./src/components/BSDataTableSelectorWindow.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_442364__) => {

"use strict";
__nested_webpack_require_442364__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_442364__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableSelectorWindow": () => (/* binding */ BSDataTableSelectorWindow)
/* harmony export */ });
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_442364__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_442364__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_442364__(/*! ../commonTypes/common-types */ "./src/commonTypes/common-types.ts");
/* harmony import */ var _BSDataTable__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_442364__(/*! ./BSDataTable */ "./src/components/BSDataTable.ts");
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_442364__(/*! ../services */ "./src/services/index.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var BSDataTableSelectorWindow = /** @class */ (function (_super) {
    __extends(BSDataTableSelectorWindow, _super);
    /**
     * @param {{ propName: string; containerId: string; urlCb: getUrlCallback; gridCols: BSDataTableColDefinition[]}} options
     */
    function BSDataTableSelectorWindow(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.parentContainerId = _this.options.ContainerId;
        _this.modalId = "".concat(_this.parentContainerId, "_bs_").concat(_this.options.ModelName);
        _this.modalTitleId = "".concat(_this.parentContainerId, "_lbs_").concat(_this.options.ModelName);
        _this.containerId = "".concat(_this.parentContainerId, "_cbs_").concat(_this.options.ModelName);
        _this.gridId = "".concat(_this.parentContainerId, "_g_").concat(_this.options.ModelName);
        _this.render();
        _this.grid = _this.renderGrid();
        _this.onItemSelected = function (/** @type {BSDataTable} */ sender, /** @type {any} */ e) { console.log(); };
        return _this;
    }
    BSDataTableSelectorWindow.prototype.render = function () {
        var _this = this;
        var modal = document.getElementById(this.modalId);
        if (modal) {
            this.element = modal;
            this.selectorModal = bootstrap__WEBPACK_IMPORTED_MODULE_0__.Modal.getOrCreateInstance(modal);
        }
        else {
            this.element = document.createElement('div');
            this.element.id = this.modalId;
            this.element.classList.add('modal');
            this.element.innerHTML = "<div class=\"modal-dialog modal-dialog-scrollable\">\n                                    <div class=\"modal-content\">\n                                        <div class=\"modal-header\">\n                                            <h5 class=\"modal-title\" id=\"".concat(this.modalTitleId, "\">Select a value</h5>\n                                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                                        </div>\n                                        <div class=\"modal-body\">\n                                            <div id=\"").concat(this.containerId, "\">\n\n                                            </div>\n                                        </div>\n                                        <div class=\"modal-footer\">\n                                            <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\">Ok</button>\n                                        </div>\n                                    </div>\n                                </div>");
            var parentContainer = document.getElementById(this.parentContainerId);
            if (parentContainer) {
                parentContainer.appendChild(this.element);
            }
            this.selectorModal = new bootstrap__WEBPACK_IMPORTED_MODULE_0__.Modal(this.element);
            this.element.addEventListener('shown.bs.modal', function (e) {
                _this.grid.clearGrid();
                _this.grid.infiniteScroller.currentPage = 1;
                _this.grid.fetchGridPage(1);
                if (_this.onWindowShown)
                    _this.onWindowShown(_this);
            });
        }
    };
    BSDataTableSelectorWindow.prototype.show = function () {
        this.selectorModal.show();
    };
    BSDataTableSelectorWindow.prototype.renderGrid = function () {
        //
        // if the grid exist from before, no need to render again
        //
        if (this.findById(this.gridId))
            return;
        //
        // grid shown in the selector window
        //
        var dataSource = new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableDataSource(this.options.DataSourceName + "_" + this.options.ModelName, {
            initData: [],
            metaData: undefined
        }, true, this.options.UrlCb);
        var bs = new _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableOptions(this.gridId, this.containerId, this.options.GridCols, dataSource, true);
        // bs.enableInfiniteScroll = false;
        var grid = new _BSDataTable__WEBPACK_IMPORTED_MODULE_3__.BSDataTable(bs);
        grid.registerCallbacks();
        // grid.addHandler(grid.appDataEvents.ON_ROW_DOUBLE_CLICKED, this.onItemSelected);
        //
        // following events are linked to parent (primary view/form) and are not needed for selector
        //
        grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.GRID_DATA);
        grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_ADD_RECORD);
        grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_FETCH_RECORD);
        grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_SAVE_RECORD);
        grid.removeHandler(_services__WEBPACK_IMPORTED_MODULE_4__.appDataEvents.ON_SAVE_ERROR);
        grid.render();
        // hide actions
        grid.gridActions.visible = false;
        return grid;
    };
    return BSDataTableSelectorWindow;
}(_BSDataTableBase__WEBPACK_IMPORTED_MODULE_1__.BSDataTableBase));



/***/ }),

/***/ "./src/components/BSDataTableTextInput.ts":
/*!************************************************!*\
  !*** ./src/components/BSDataTableTextInput.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_449791__) => {

"use strict";
__nested_webpack_require_449791__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_449791__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableTextInput": () => (/* binding */ BSDataTableTextInput)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_449791__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableTextInput = /** @class */ (function (_super) {
    __extends(BSDataTableTextInput, _super);
    function BSDataTableTextInput(options) {
        var _this = this;
        var _a;
        options.InputType = (_a = options.InputType) !== null && _a !== void 0 ? _a : 'text';
        _this = _super.call(this, options) || this;
        _this.render();
        return _this;
    }
    BSDataTableTextInput.prototype.render = function () {
        var _a, _b;
        _super.prototype.render.call(this);
        this.addClass((_a = this.options.Classes) !== null && _a !== void 0 ? _a : 'form-control form-control-sm');
        this.placeHolder = (_b = this.options.PlaceHolder) !== null && _b !== void 0 ? _b : this.options.ModelName;
    };
    Object.defineProperty(BSDataTableTextInput.prototype, "placeHolder", {
        set: function (val) {
            if (!val)
                return;
            if (this.element instanceof HTMLInputElement) {
                this.element.placeholder = val;
            }
        },
        enumerable: false,
        configurable: true
    });
    BSDataTableTextInput.prototype.clone = function () {
        var sc = _super.prototype.clone.call(this);
        var c = new BSDataTableTextInput(this.shClone(this.options));
        c.element = sc.element;
        c.children = sc.children;
        c.addDoubleClickEvent();
        return c;
    };
    return BSDataTableTextInput;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/BSTextInputExt.ts":
/*!******************************************!*\
  !*** ./src/components/BSTextInputExt.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_452805__) => {

"use strict";
__nested_webpack_require_452805__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_452805__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableTextInputExt": () => (/* binding */ BSDataTableTextInputExt)
/* harmony export */ });
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_452805__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
var __extends = ( false) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BSDataTableTextInputExt = /** @class */ (function (_super) {
    __extends(BSDataTableTextInputExt, _super);
    function BSDataTableTextInputExt(options) {
        var _this = _super.call(this, options) || this;
        _this.options = options;
        _this.render();
        return _this;
    }
    BSDataTableTextInputExt.prototype.render = function () {
        this.element = document.getElementById(this.options.ElementId);
    };
    return BSDataTableTextInputExt;
}(_BSDataTableInput__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput));



/***/ }),

/***/ "./src/components/index.ts":
/*!*********************************!*\
  !*** ./src/components/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_454808__) => {

"use strict";
__nested_webpack_require_454808__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_454808__.d(__webpack_exports__, {
/* harmony export */   "BSDataTable": () => (/* reexport safe */ _BSDataTable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable),
/* harmony export */   "BSDataTableActions": () => (/* reexport safe */ _BSDataTableActions__WEBPACK_IMPORTED_MODULE_1__.BSDataTableActions),
/* harmony export */   "BSDataTableBase": () => (/* reexport safe */ _BSDataTableBase__WEBPACK_IMPORTED_MODULE_2__.BSDataTableBase),
/* harmony export */   "BSDataTableBody": () => (/* reexport safe */ _BSDataTableBody__WEBPACK_IMPORTED_MODULE_3__.BSDataTableBody),
/* harmony export */   "BSDataTableButton": () => (/* reexport safe */ _BSDataTableButton__WEBPACK_IMPORTED_MODULE_4__.BSDataTableButton),
/* harmony export */   "BSDataTableCell": () => (/* reexport safe */ _BSDataTableCell__WEBPACK_IMPORTED_MODULE_5__.BSDataTableCell),
/* harmony export */   "BSDataTableCheckBox": () => (/* reexport safe */ _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_6__.BSDataTableCheckBox),
/* harmony export */   "BSDataTableHeader": () => (/* reexport safe */ _BSDataTableHeader__WEBPACK_IMPORTED_MODULE_7__.BSDataTableHeader),
/* harmony export */   "BSDataTableHttpClient": () => (/* reexport safe */ _BSDataTableHttpClient__WEBPACK_IMPORTED_MODULE_8__.BSDataTableHttpClient),
/* harmony export */   "BSDataTableInfiniteScroll": () => (/* reexport safe */ _BSDataTableInfiniteScroll__WEBPACK_IMPORTED_MODULE_9__.BSDataTableInfiniteScroll),
/* harmony export */   "BSDataTableInput": () => (/* reexport safe */ _BSDataTableInput__WEBPACK_IMPORTED_MODULE_10__.BSDataTableInput),
/* harmony export */   "BSDataTableMarker": () => (/* reexport safe */ _BSDataTableMarker__WEBPACK_IMPORTED_MODULE_11__.BSDataTableMarker),
/* harmony export */   "BSDataTablePagination": () => (/* reexport safe */ _BSDataTablePagination__WEBPACK_IMPORTED_MODULE_12__.BSDataTablePagination),
/* harmony export */   "BSDataTableRow": () => (/* reexport safe */ _BSDataTableRow__WEBPACK_IMPORTED_MODULE_13__.BSDataTableRow),
/* harmony export */   "BSDataTableRowCollection": () => (/* reexport safe */ _BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_14__.BSDataTableRowCollection),
/* harmony export */   "BSDataTableSelect": () => (/* reexport safe */ _BSDataTableSelect__WEBPACK_IMPORTED_MODULE_15__.BSDataTableSelect),
/* harmony export */   "BSDataTableSelectOption": () => (/* reexport safe */ _BSDataTableSelectOption__WEBPACK_IMPORTED_MODULE_16__.BSDataTableSelectOption),
/* harmony export */   "BSDataTableSelector": () => (/* reexport safe */ _BSDataTableSelector__WEBPACK_IMPORTED_MODULE_17__.BSDataTableSelector),
/* harmony export */   "BSDataTableSelectorWindow": () => (/* reexport safe */ _BSDataTableSelectorWindow__WEBPACK_IMPORTED_MODULE_18__.BSDataTableSelectorWindow),
/* harmony export */   "BSDataTableSelectorWindowCollection": () => (/* reexport safe */ _BSDataTableSelectorCollection__WEBPACK_IMPORTED_MODULE_19__.BSDataTableSelectorWindowCollection),
/* harmony export */   "BSDataTableTextInput": () => (/* reexport safe */ _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_20__.BSDataTableTextInput),
/* harmony export */   "BSDataTableTextInputExt": () => (/* reexport safe */ _BSTextInputExt__WEBPACK_IMPORTED_MODULE_21__.BSDataTableTextInputExt)
/* harmony export */ });
/* harmony import */ var _BSDataTable__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_454808__(/*! ./BSDataTable */ "./src/components/BSDataTable.ts");
/* harmony import */ var _BSDataTableActions__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_454808__(/*! ./BSDataTableActions */ "./src/components/BSDataTableActions.ts");
/* harmony import */ var _BSDataTableBase__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_454808__(/*! ./BSDataTableBase */ "./src/components/BSDataTableBase.ts");
/* harmony import */ var _BSDataTableBody__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_454808__(/*! ./BSDataTableBody */ "./src/components/BSDataTableBody.ts");
/* harmony import */ var _BSDataTableButton__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_454808__(/*! ./BSDataTableButton */ "./src/components/BSDataTableButton.ts");
/* harmony import */ var _BSDataTableCell__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_454808__(/*! ./BSDataTableCell */ "./src/components/BSDataTableCell.ts");
/* harmony import */ var _BSDataTableCheckBox__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_454808__(/*! ./BSDataTableCheckBox */ "./src/components/BSDataTableCheckBox.ts");
/* harmony import */ var _BSDataTableHeader__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_454808__(/*! ./BSDataTableHeader */ "./src/components/BSDataTableHeader.ts");
/* harmony import */ var _BSDataTableHttpClient__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_454808__(/*! ./BSDataTableHttpClient */ "./src/components/BSDataTableHttpClient.ts");
/* harmony import */ var _BSDataTableInfiniteScroll__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_454808__(/*! ./BSDataTableInfiniteScroll */ "./src/components/BSDataTableInfiniteScroll.ts");
/* harmony import */ var _BSDataTableInput__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_454808__(/*! ./BSDataTableInput */ "./src/components/BSDataTableInput.ts");
/* harmony import */ var _BSDataTableMarker__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_454808__(/*! ./BSDataTableMarker */ "./src/components/BSDataTableMarker.ts");
/* harmony import */ var _BSDataTablePagination__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_454808__(/*! ./BSDataTablePagination */ "./src/components/BSDataTablePagination.ts");
/* harmony import */ var _BSDataTableRow__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_454808__(/*! ./BSDataTableRow */ "./src/components/BSDataTableRow.ts");
/* harmony import */ var _BSDataTableRowCollection__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_454808__(/*! ./BSDataTableRowCollection */ "./src/components/BSDataTableRowCollection.ts");
/* harmony import */ var _BSDataTableSelect__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_454808__(/*! ./BSDataTableSelect */ "./src/components/BSDataTableSelect.ts");
/* harmony import */ var _BSDataTableSelectOption__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_454808__(/*! ./BSDataTableSelectOption */ "./src/components/BSDataTableSelectOption.ts");
/* harmony import */ var _BSDataTableSelector__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_454808__(/*! ./BSDataTableSelector */ "./src/components/BSDataTableSelector.ts");
/* harmony import */ var _BSDataTableSelectorWindow__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_454808__(/*! ./BSDataTableSelectorWindow */ "./src/components/BSDataTableSelectorWindow.ts");
/* harmony import */ var _BSDataTableSelectorCollection__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_454808__(/*! ./BSDataTableSelectorCollection */ "./src/components/BSDataTableSelectorCollection.ts");
/* harmony import */ var _BSDataTableTextInput__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_454808__(/*! ./BSDataTableTextInput */ "./src/components/BSDataTableTextInput.ts");
/* harmony import */ var _BSTextInputExt__WEBPACK_IMPORTED_MODULE_21__ = __nested_webpack_require_454808__(/*! ./BSTextInputExt */ "./src/components/BSTextInputExt.ts");
























/***/ }),

/***/ "./src/services/CookieHelper.ts":
/*!**************************************!*\
  !*** ./src/services/CookieHelper.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_462213__) => {

"use strict";
__nested_webpack_require_462213__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_462213__.d(__webpack_exports__, {
/* harmony export */   "CookieHelper": () => (/* binding */ CookieHelper)
/* harmony export */ });
var __assign = ( false) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * simple utility to add/remove cookies based on ES7
 * credit: https://stackoverflow.com/a/48706852
 */
var Cookie = /** @class */ (function () {
    function Cookie() {
    }
    Cookie.prototype.get = function (name) {
        var c = document.cookie.match("(?:(?:^|.*; *)".concat(name, " *= *([^;]*).*$)|^.*$"))[1];
        if (c)
            return decodeURIComponent(c);
    };
    Cookie.prototype.set = function (name, value, opts) {
        if (opts === void 0) { opts = {}; }
        /*If options contains days then we're configuring max-age*/
        if (opts.days) {
            opts['max-age'] = opts.days * 60 * 60 * 24;
            /*Deleting days from options to pass remaining opts to cookie settings*/
            delete opts.days;
        }
        /*Configuring options to cookie standard by reducing each property*/
        opts = Object.entries(opts).reduce(function (accumulatedStr, _a) {
            var k = _a[0], v = _a[1];
            return "".concat(accumulatedStr, "; ").concat(k, "=").concat(v);
        }, '');
        /*Finally, creating the key*/
        document.cookie = name + '=' + encodeURIComponent(value) + opts;
    };
    Cookie.prototype.delete = function (name, opts) {
        this.set(name, '', __assign({ 'max-age': -1 }, opts));
    };
    // path & domain must match cookie being deleted 
    Cookie.prototype.getJSON = function (name) {
        var result = this.get(name);
        if (!result)
            return '';
        return JSON.parse(result);
    };
    Cookie.prototype.setJSON = function (name, value, opts) {
        this.set(name, JSON.stringify(value), opts);
    };
    return Cookie;
}());
var CookieHelper = new Cookie();


/***/ }),

/***/ "./src/services/data-events-service.ts":
/*!*********************************************!*\
  !*** ./src/services/data-events-service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_464872__) => {

"use strict";
__nested_webpack_require_464872__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_464872__.d(__webpack_exports__, {
/* harmony export */   "dataEventsService": () => (/* binding */ dataEventsService)
/* harmony export */ });
/* harmony import */ var _data_events__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_464872__(/*! ./data-events */ "./src/services/data-events.ts");

var DataEventsService = /** @class */ (function () {
    function DataEventsService() {
        this.callbacks = [];
        this.registerWinPopState();
    }
    DataEventsService.prototype.registerWinPopState = function () {
        var _this = this;
        window.onpopstate = function (e) {
            if (e.state && e.state.eventData) {
                console.log(e.state);
                var ev = { EventData: e.state.eventData, SkipPush: true, DataSourceName: "" };
                _this.Emit(_data_events__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_FETCH_RECORD, window, ev);
            }
        };
    };
    ;
    DataEventsService.prototype.Emit = function (eventName, source, eventArgs) {
        if (!eventName)
            return;
        try {
            this.callbacks.forEach(function (cb) {
                if (cb.EventName !== eventName || (cb.DataSourceName !== eventArgs.DataSourceName && cb.VerifyDataSourceName === true))
                    return;
                cb.Callback(source, eventArgs);
            });
        }
        catch (error) {
            console.error(error);
        }
    };
    ;
    DataEventsService.prototype.Unsubscribe = function (model) {
        var filtered = this.callbacks
            .filter(function (cb) { return (cb.Key === model.Key
            && cb.EventName === model.EventName
            && cb.DataSourceName === model.DataSourceName) === false; });
        this.callbacks = filtered;
    };
    DataEventsService.prototype.Subscribe = function (model) {
        //
        // No need to do a lookup if handler exist from before
        //
        if (!model.EventName)
            return;
        this.callbacks.push(model);
    };
    ;
    return DataEventsService;
}());
var dataEventsService = new DataEventsService();


/***/ }),

/***/ "./src/services/data-events.ts":
/*!*************************************!*\
  !*** ./src/services/data-events.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_467363__) => {

"use strict";
__nested_webpack_require_467363__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_467363__.d(__webpack_exports__, {
/* harmony export */   "appActions": () => (/* binding */ appActions),
/* harmony export */   "appDataEvents": () => (/* binding */ appDataEvents)
/* harmony export */ });
//
// action types
//
var appActions = /** @class */ (function () {
    function appActions() {
    }
    appActions.COL_SORTING = 'COL_SORTING';
    appActions.COL_RESIZED = 'COL_RESIZED';
    appActions.COL_SHOW_HIDE = 'COL_SHOW_HIDE';
    appActions.COL_REORDER = 'COL_REORDER';
    return appActions;
}());
//
// event types
//
var appDataEvents = /** @class */ (function () {
    function appDataEvents() {
    }
    appDataEvents.GRID_DATA = "GRID_DATA";
    appDataEvents.ON_NEXT_RECORD = "ON_NEXT_RECORD";
    appDataEvents.ON_PREV_RECORD = "ON_PREV_RECORD";
    appDataEvents.ON_SAVE_RECORD = "ON_SAVE_RECORD";
    appDataEvents.ON_DELETE_RECORD = "ON_DELETE_RECORD";
    appDataEvents.ON_LAST_RECORD = "ON_LAST_RECORD";
    appDataEvents.ON_FIRST_RECORD = "ON_FIRST_RECORD";
    appDataEvents.ON_ADD_RECORD = "ON_ADD_RECORD";
    appDataEvents.ON_FETCH_RECORD = "ON_FETCH_RECORD";
    appDataEvents.ON_FETCH_RECORD_ERROR = "ON_FETCH_RECORD_ERROR";
    appDataEvents.ON_FETCH_GRID_RECORD = "ON_FETCH_GRID_RECORD";
    appDataEvents.ON_FETCH_GRID_RECORD_ERROR = "ON_FETCH_GRID_RECORD_ERROR";
    appDataEvents.ON_NAVIGATING_RECORD = "ON_NAVIGATING_RECORD"; // raised when the main record is about to navigate
    appDataEvents.ON_GRID_UPDATED = "ON_GRID_UPDATED";
    appDataEvents.ON_SAVE_ERROR = "ON_SAVE_ERROR";
    appDataEvents.ON_SORTING_REQUESTED = "ON_SORTING_REQUESTED";
    appDataEvents.ON_COLS_REORDERED = "ON_COLS_REORDERED";
    appDataEvents.ON_GRID_DATA_BOUND = "ON_GRID_DATA_BOUND";
    appDataEvents.ON_GRID_CONFIG_UPDATED = "ON_GRID_CONFIG_UPDATED";
    appDataEvents.ON_PAGE_READY = "ON_PAGE_READY";
    appDataEvents.ON_ROW_UPDATED = "ON_ROW_UPDATED";
    appDataEvents.ON_FIELD_UPDATED = "ON_FIELD_UPDATED";
    appDataEvents.ON_ROW_DOUBLE_CLICKED = "ON_ROW_DOUBLE_CLICKED";
    return appDataEvents;
}());



/***/ }),

/***/ "./src/services/data-table-discovery-service.ts":
/*!******************************************************!*\
  !*** ./src/services/data-table-discovery-service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_469870__) => {

"use strict";
__nested_webpack_require_469870__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_469870__.d(__webpack_exports__, {
/* harmony export */   "bsDataTableDiscoveryService": () => (/* binding */ bsDataTableDiscoveryService)
/* harmony export */ });
/**
 * Service used to discover data-tables by its identify
 * This can be useful when we have many tables in the page and query them for their data
 * to be sent back to server when the user presses the save/persist button
 */
var BSDataTableDiscoveryService = /** @class */ (function () {
    function BSDataTableDiscoveryService() {
        this.DataTables = [];
    }
    BSDataTableDiscoveryService.prototype.Add = function (datatable) {
        this.DataTables.push(datatable);
    };
    BSDataTableDiscoveryService.prototype.GetAll = function () {
        var result = [];
        this.DataTables.forEach(function (dt) {
            if (dt.isReadOnly)
                return;
            var model = { DataSourceName: dt.dataSourceName, Data: dt.dirtyRecords };
            result.push(model);
        });
        return result;
    };
    /**
     *
     * @param dsName DataSource Name
     */
    BSDataTableDiscoveryService.prototype.GetByDSName = function (dsName) {
        var find = this.DataTables.find(function (dt) { return dt.dataSourceName === dsName; });
        if (find)
            return { DataSourceName: find.dataSourceName, Data: find.dirtyRecords };
    };
    return BSDataTableDiscoveryService;
}());
var bsDataTableDiscoveryService = new BSDataTableDiscoveryService();



/***/ }),

/***/ "./src/services/index.ts":
/*!*******************************!*\
  !*** ./src/services/index.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_471698__) => {

"use strict";
__nested_webpack_require_471698__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_471698__.d(__webpack_exports__, {
/* harmony export */   "CookieHelper": () => (/* reexport safe */ _CookieHelper__WEBPACK_IMPORTED_MODULE_0__.CookieHelper),
/* harmony export */   "dataEventsService": () => (/* reexport safe */ _data_events_service__WEBPACK_IMPORTED_MODULE_1__.dataEventsService),
/* harmony export */   "appActions": () => (/* reexport safe */ _data_events__WEBPACK_IMPORTED_MODULE_2__.appActions),
/* harmony export */   "appDataEvents": () => (/* reexport safe */ _data_events__WEBPACK_IMPORTED_MODULE_2__.appDataEvents),
/* harmony export */   "SessionStorageService": () => (/* reexport safe */ _session_storage_service__WEBPACK_IMPORTED_MODULE_3__.SessionStorageService),
/* harmony export */   "bsDataTableDiscoveryService": () => (/* reexport safe */ _data_table_discovery_service__WEBPACK_IMPORTED_MODULE_4__.bsDataTableDiscoveryService)
/* harmony export */ });
/* harmony import */ var _CookieHelper__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_471698__(/*! ./CookieHelper */ "./src/services/CookieHelper.ts");
/* harmony import */ var _data_events_service__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_471698__(/*! ./data-events-service */ "./src/services/data-events-service.ts");
/* harmony import */ var _data_events__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_471698__(/*! ./data-events */ "./src/services/data-events.ts");
/* harmony import */ var _session_storage_service__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_471698__(/*! ./session-storage-service */ "./src/services/session-storage-service.ts");
/* harmony import */ var _data_table_discovery_service__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_471698__(/*! ./data-table-discovery-service */ "./src/services/data-table-discovery-service.ts");







/***/ }),

/***/ "./src/services/session-storage-service.ts":
/*!*************************************************!*\
  !*** ./src/services/session-storage-service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_473831__) => {

"use strict";
__nested_webpack_require_473831__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_473831__.d(__webpack_exports__, {
/* harmony export */   "SessionStorageService": () => (/* binding */ SessionStorageService)
/* harmony export */ });
var SessionStorageService = /** @class */ (function () {
    function SessionStorageService() {
        // console.log('Session storage is initialized');
    }
    SessionStorageService.prototype.addItem = function (key, value, expiry) {
        //
        // Here we are using sessionStorage instead of localStorage.
        // The later is not cleared even if the user closes the browser!
        //
        var item = { value: value, type: 'prem', expiry: expiry.getTime() };
        if (typeof value === 'object' && value !== undefined) {
            item.type = 'object';
        }
        sessionStorage.setItem(key, JSON.stringify(item));
    };
    SessionStorageService.prototype.appendItem = function (key, appendFactory) {
        try {
            var item = this.getItemRaw(key);
            if (item) {
                var newValue = appendFactory(item.value);
                this.addItem(key, newValue, new Date(item.expiry));
            }
        }
        catch (error) {
            console.error(error);
        }
    };
    SessionStorageService.prototype.createExpiryKey = function (key) {
        return key + '-expiry';
    };
    SessionStorageService.prototype.getItemRaw = function (key) {
        var entry = sessionStorage.getItem(key);
        if (entry) {
            var item = JSON.parse(entry);
            if (Date.now() > item.expiry) {
                this.removeItem(key);
                console.log('entry expired, will be removed', item);
                return undefined;
            }
            return item;
        }
        return null;
    };
    SessionStorageService.prototype.getItem = function (key) {
        var item = this.getItemRaw(key);
        if (item)
            return item.value;
        return null;
    };
    SessionStorageService.prototype.removeItem = function (key) {
        sessionStorage.removeItem(key);
    };
    /**
     * Removes all the items starting with the given prefix from session storage
     * Note that if no prefix is provided, it will remove all the keys.
     * @param {string?} prefix optional
     * @returns
     */
    SessionStorageService.prototype.removeAll = function (prefix) {
        if (!prefix) {
            sessionStorage.removeAll();
            return;
        }
        var length = sessionStorage.length;
        if (length <= 0)
            return;
        var keys = [];
        for (var index = 0; index < length; index++) {
            var key = sessionStorage.key(index);
            if (!key.startsWith(prefix))
                continue;
            keys.push(key);
        }
        for (var index = 0; index < keys.length; index++) {
            var key = keys[index];
            sessionStorage.removeItem(key);
        }
    };
    return SessionStorageService;
}());



/***/ }),

/***/ "./src/services/string.extensions.ts":
/*!*******************************************!*\
  !*** ./src/services/string.extensions.ts ***!
  \*******************************************/
/***/ (() => {

/**
 * Converts string to camal casing
 * @returns camelCasing of the string
 */
String.prototype.toCamalCase = function () {
    return this.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
        return index === 0 ? word.toLowerCase() : word.toUpperCase();
    }).replace(/\s+/g, '');
};
/**
 * Converts string to pascal casing
 * @returns PascalCasing of the string
 */
String.prototype.toPascalCase = function () {
    return this.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
        return index === 0 ? word.toUpperCase() : word.toLowerCase();
    }).replace(/\s+/g, '');
};
String.prototype.toPascalCaseJson = function () {
    return this.replace(/(?:^\w|[A-Z]|\b\w)/g, function (word, index) {
        return index === 0 ? word.toUpperCase() : word;
    }).replace(/\s+/g, '');
};
if (!String.prototype.format) {
    String.prototype.format = function () {
        var args = arguments;
        return this.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined'
                ? args[number]
                : match;
        });
    };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_478568__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_478568__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__nested_webpack_require_478568__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__nested_webpack_require_478568__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_478568__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_478568__.o(definition, key) && !__nested_webpack_require_478568__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__nested_webpack_require_478568__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_478568__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__nested_webpack_require_478568__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_478568__.d(__webpack_exports__, {
/* harmony export */   "BSDataTable": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTable),
/* harmony export */   "BSDataTableActions": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableActions),
/* harmony export */   "BSDataTableBase": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBase),
/* harmony export */   "BSDataTableBody": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableBody),
/* harmony export */   "BSDataTableButton": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableButton),
/* harmony export */   "BSDataTableCell": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableCell),
/* harmony export */   "BSDataTableCheckBox": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableCheckBox),
/* harmony export */   "BSDataTableHeader": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableHeader),
/* harmony export */   "BSDataTableHttpClient": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableHttpClient),
/* harmony export */   "BSDataTableInfiniteScroll": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInfiniteScroll),
/* harmony export */   "BSDataTableInput": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableInput),
/* harmony export */   "BSDataTableMarker": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableMarker),
/* harmony export */   "BSDataTablePagination": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagination),
/* harmony export */   "BSDataTableRow": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableRow),
/* harmony export */   "BSDataTableRowCollection": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableRowCollection),
/* harmony export */   "BSDataTableSelect": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelect),
/* harmony export */   "BSDataTableSelectOption": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectOption),
/* harmony export */   "BSDataTableSelector": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelector),
/* harmony export */   "BSDataTableSelectorWindow": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectorWindow),
/* harmony export */   "BSDataTableSelectorWindowCollection": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectorWindowCollection),
/* harmony export */   "BSDataTableTextInput": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInput),
/* harmony export */   "BSDataTableTextInputExt": () => (/* reexport safe */ _components__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt),
/* harmony export */   "CookieHelper": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.CookieHelper),
/* harmony export */   "SessionStorageService": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.SessionStorageService),
/* harmony export */   "appActions": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.appActions),
/* harmony export */   "appDataEvents": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.appDataEvents),
/* harmony export */   "bsDataTableDiscoveryService": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.bsDataTableDiscoveryService),
/* harmony export */   "dataEventsService": () => (/* reexport safe */ _services__WEBPACK_IMPORTED_MODULE_1__.dataEventsService),
/* harmony export */   "BSDataTableColDefinition": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableColDefinition),
/* harmony export */   "BSDataTableDataSource": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableDataSource),
/* harmony export */   "BSDataTableHttpClientOptions": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableHttpClientOptions),
/* harmony export */   "BSDataTableOptions": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableOptions),
/* harmony export */   "BSDataTablePaginationOptions": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTablePaginationOptions),
/* harmony export */   "BSDataTablePagingMetaData": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTablePagingMetaData),
/* harmony export */   "BSDataTableSelectListItem": () => (/* reexport safe */ _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__.BSDataTableSelectListItem)
/* harmony export */ });
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_478568__(/*! ./components */ "./src/components/index.ts");
/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_478568__(/*! ./services */ "./src/services/index.ts");
/* harmony import */ var _commonTypes_common_types__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_478568__(/*! ./commonTypes/common-types */ "./src/commonTypes/common-types.ts");




})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_desc.png */ "./app-client/images/sort_desc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_asc.png */ "./app-client/images/sort_asc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_both.png */ "./app-client/images/sort_both.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n  /* max-height: 200px;  */\r\n  overflow-y: auto\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}", "",{"version":3,"sources":["webpack://./app-client/css/site.css"],"names":[],"mappings":"AAAA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,UAAU;EACV,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oEAAyD;AAC3D;;AAEA;EACE,oEAAwD;AAC1D;;AAEA;EACE,yDAA8C;AAChD;;AAEA;EACE,eAAe;EACf,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;;;mBAIiB;EACjB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,UAAU;EACV,WAAW;AACb;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;wBACsB;;EAEtB,cAAc;EACd,qBAAqB;EACrB,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,2CAA2C;EAC3C,cAAc;AAChB;;AAEA;EACE,sDAAsD;EACtD,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;;AAGA;EACE,4BAA4B;EAC5B,wBAAwB;EACxB;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA","sourcesContent":["html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(../images/sort_desc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(../images/sort_asc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(../images/sort_both.png);\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n  /* max-height: 200px;  */\r\n  overflow-y: auto\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./app-client/css/site.css":
/*!*********************************!*\
  !*** ./app-client/css/site.css ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./site.css */ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./app-client/dynamic-demo.ts":
/*!************************************!*\
  !*** ./app-client/dynamic-demo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDemo": () => (/* binding */ DynamicDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var DynamicDemo = /** @class */ (function () {
    function DynamicDemo() {
    }
    DynamicDemo.run = function (containerId, initData) {
        console.log('running dynamic demo');
        var bookingLines = initData.data;
        var bookingLinesMetadata = initData.metaData;
        var cols = [];
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Line nbr", "number", "80px", "lineNbr", true));
        //
        // selector window
        //
        var stockSelector = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Stock item", "selector", "60px", "inventoryId");
        stockSelector.SelectorDataCB = function (page) { return "http://localhost:3000/api/stockitems?page=".concat(page); };
        stockSelector.SelectorCols = [
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Stock item", "text", "60px", "id", true),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "name", false)
        ];
        cols.push(stockSelector);
        //
        // select dropdown
        //
        var uom = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit of measure", "select", "120px", "uom", false, [
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Kilo', 'KG'),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Litre', 'LI'),
            new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableSelectListItem('Piece', 'PCS')
        ]);
        cols.push(uom);
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "desc", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Quantity", "number", "80px", "qty", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit cost", "number", "120px", "cost", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Cost", "number", "120px", "extCost", false));
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('lines', {
            initData: bookingLines, metaData: bookingLinesMetadata
        }, true, function (page) {
            // debugger;
            return 'http://localhost:3000/api/bookinglines?page=' + page;
        });
        var options = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("bookingLines", containerId, cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(options);
        grid.registerCallbacks();
        //
        // lets say we have to calculate ext cost using the unit cost and quantity
        // we can do this by registering a change event
        //
        grid.addHandler(bs_datatable__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_FIELD_UPDATED, function (sender, e) {
            // debugger;
            var ev = e;
            if (!ev)
                return;
            var field = ev.EventData.Field;
            if (!field)
                return;
            var fieldName = field.options.ModelName;
            var row = ev.EventData.Row;
            if (fieldName === 'qty' || fieldName === 'cost') {
                row.extCost.val = row.qty.val * row.cost.val;
            }
        });
        grid.render();
        grid.gridActions.addAction('btnSave', 'primary', 'save', function (e) {
            console.log('save button is called');
            var records = grid.allRecords;
            console.log('All records:');
            console.table(records);
            console.log('Dirty rows:');
            console.table(grid.dirtyRecords);
        });
    };
    return DynamicDemo;
}());



/***/ }),

/***/ "./app-client/static-demo.ts":
/*!***********************************!*\
  !*** ./app-client/static-demo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticDemo": () => (/* binding */ StaticDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var StaticDemo = /** @class */ (function () {
    function StaticDemo() {
    }
    StaticDemo.run = function () {
        // console.log('test is initialized');
        console.log('hello from index');
        //
        // sample using bootstrap data grid 
        //
        var cols = [];
        var initData = [];
        var totCols = 5, totRows = 60;
        for (var i = 0; i < totCols; i++) {
            cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("COL-" + i, "text", "180px", "col-" + i, false));
        }
        for (var i = 0; i < totRows; i++) {
            var record = {};
            for (var j = 0; j < totCols; j++) {
                record['col-' + j] = 'DATA-' + i + '-' + j;
            }
            initData.push(record);
        }
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('fakeData', {
            initData: initData,
            metaData: new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagingMetaData(1, 5, totRows)
        }, false, null, function (page, data, mdata) {
            var start = page <= 1 ? 0 : (page - 1) * mdata.pageSize;
            var end = start + mdata.pageSize;
            var maxIndex = data.length - 1;
            if (start > maxIndex || end > maxIndex)
                return [];
            var pageData = [];
            for (var index = start; index < end; index++) {
                var element = data[index];
                pageData.push(element);
            }
            return pageData;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("fakeData_table", "dummy-data-container", cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
        var name = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt({ InputType: "text", ElementId: "txtName", DataSourceName: "welcome" });
        name.val = "Welcome to TypeScript";
    };
    return StaticDemo;
}());



/***/ }),

/***/ "./app-client/images/sort_asc.png":
/*!****************************************!*\
  !*** ./app-client/images/sort_asc.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "4bba59196d7ce2619696.png";

/***/ }),

/***/ "./app-client/images/sort_both.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_both.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "8b117faa9d4dd934d6bb.png";

/***/ }),

/***/ "./app-client/images/sort_desc.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_desc.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "c4196d3286cc33244c83.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./app-client/index.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableDemos": () => (/* binding */ BSDataTableDemos)
/* harmony export */ });
/* harmony import */ var _css_site_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/site.css */ "./app-client/css/site.css");
/* harmony import */ var _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dynamic-demo */ "./app-client/dynamic-demo.ts");
/* harmony import */ var _static_demo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static-demo */ "./app-client/static-demo.ts");



var BSDataTableDemos = /** @class */ (function () {
    function BSDataTableDemos() {
    }
    BSDataTableDemos.runStaticDemo = function () {
        _static_demo__WEBPACK_IMPORTED_MODULE_2__.StaticDemo.run();
    };
    BSDataTableDemos.runDynamicDemo = function (containerId, initData) {
        _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__.DynamicDemo.run(containerId, initData);
    };
    return BSDataTableDemos;
}());


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,