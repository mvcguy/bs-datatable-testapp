(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["bs_dt_demo"] = factory();
	else
		root["bs_dt_demo"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/bs-datatable/dist/bsdatatable.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-datatable/dist/bsdatatable.js ***!
  \*******************************************************/
/***/ ((module) => {

/*! For license information please see bsdatatable.js.LICENSE.txt */
!function(t,e){ true?module.exports=e():0}(self,(function(){return(()=>{var t={755:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(t){return r.flat.call(t)}:function(t){return r.concat.apply([],t)},c=r.push,u=r.indexOf,p={},d=p.toString,f=p.hasOwnProperty,h=f.toString,g=h.call(Object),m={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},y=function(t){return null!=t&&t===t.window},b=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,o,r=(n=n||b).createElement("script");if(r.text=t,e)for(i in _)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function E(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?p[d.call(t)]||"object":typeof t}var x="3.6.0",D=function(t,e){return new D.fn.init(t,e)};function C(t){var e=!!t&&"length"in t&&t.length,n=E(t);return!v(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}D.fn=D.prototype={jquery:x,constructor:D,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=D.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return D.each(this,t)},map:function(t){return this.pushStack(D.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(D.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(D.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},D.extend=D.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||v(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(c&&i&&(D.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[e],r=o&&!Array.isArray(n)?[]:o||D.isPlainObject(n)?n:{},o=!1,s[e]=D.extend(c,r,i)):void 0!==i&&(s[e]=i));return s},D.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t)||(e=s(t))&&("function"!=typeof(n=f.call(e,"constructor")&&e.constructor)||h.call(n)!==g))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){w(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(C(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(C(Object(t))?D.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:u.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!==s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,s=[];if(C(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&s.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&s.push(o);return l(s)},guid:1,support:m}),"function"==typeof Symbol&&(D.fn[Symbol.iterator]=r[Symbol.iterator]),D.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){p["[object "+e+"]"]=e.toLowerCase()}));var O=function(t){var e,n,i,o,r,s,a,l,c,u,p,d,f,h,g,m,v,y,b,_="sizzle"+1*new Date,w=t.document,E=0,x=0,D=lt(),C=lt(),O=lt(),T=lt(),S=function(t,e){return t===e&&(p=!0),0},N={}.hasOwnProperty,A=[],R=A.pop,k=A.push,I=A.push,j=A.slice,L=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\[[\\x20\\t\\r\\n\\f]*("+q+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+H+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",F=new RegExp(H+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),G=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),U=new RegExp(H+"|>"),z=new RegExp(B),V=new RegExp("^"+q+"$"),K={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,Y=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ot=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){d()},st=_t((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{I.apply(A=j.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(t){I={apply:A.length?function(t,e){k.apply(t,j.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,o){var r,a,c,u,p,h,v,y=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!o&&(d(e),e=e||f,g)){if(11!==w&&(p=Z.exec(t)))if(r=p[1]){if(9===w){if(!(c=e.getElementById(r)))return i;if(c.id===r)return i.push(c),i}else if(y&&(c=y.getElementById(r))&&b(e,c)&&c.id===r)return i.push(c),i}else{if(p[2])return I.apply(i,e.getElementsByTagName(t)),i;if((r=p[3])&&n.getElementsByClassName&&e.getElementsByClassName)return I.apply(i,e.getElementsByClassName(r)),i}if(n.qsa&&!T[t+" "]&&(!m||!m.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,y=e,1===w&&(U.test(t)||$.test(t))){for((y=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((u=e.getAttribute("id"))?u=u.replace(it,ot):e.setAttribute("id",u=_)),a=(h=s(t)).length;a--;)h[a]=(u?"#"+u:":scope")+" "+bt(h[a]);v=h.join(",")}try{return I.apply(i,y.querySelectorAll(v)),i}catch(e){T(t,!0)}finally{u===_&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,i,o)}function lt(){var t=[];return function e(n,o){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function ct(t){return t[_]=!0,t}function ut(t){var e=f.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function pt(t,e){for(var n=t.split("|"),o=n.length;o--;)i.attrHandle[n[o]]=e}function dt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function mt(t){return ct((function(e){return e=+e,ct((function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},r=at.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},d=at.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:w;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,g=!r(f),w!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",rt,!1):o.attachEvent&&o.attachEvent("onunload",rt)),n.scope=ut((function(t){return h.appendChild(t).appendChild(f.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),n.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ut((function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=ut((function(t){return h.appendChild(t).id=_,!f.getElementsByName||!f.getElementsByName(_).length})),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(ut((function(t){var e;h.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+P+")"),t.querySelectorAll("[id~="+_+"-]").length||m.push("~="),(e=f.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||m.push(".#.+[+~]"),t.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=f.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ut((function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",B)})),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(h.compareDocumentPosition),b=e||J.test(h.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},S=e?function(t,e){if(t===e)return p=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t==f||t.ownerDocument==w&&b(w,t)?-1:e==f||e.ownerDocument==w&&b(w,e)?1:u?L(u,t)-L(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return p=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t==f?-1:e==f?1:o?-1:r?1:u?L(u,t)-L(u,e):0;if(o===r)return dt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?dt(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},f):f},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if(d(t),n.matchesSelector&&g&&!T[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){T(e,!0)}return at(e,f,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!=f&&d(t),b(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!=f&&d(t);var o=i.attrHandle[e.toLowerCase()],r=o&&N.call(i.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==r?r:n.attributes||!g?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},at.escape=function(t){return(t+"").replace(it,ot)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,r=0;if(p=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(S),p){for(;e=t[r++];)e===t[r]&&(o=i.push(r));for(;o--;)t.splice(i[o],1)}return u=null,t},o=at.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=o(e);return n},i=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&z.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=D[t+" "];return e||(e=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+t+"("+H+"|$)"))&&D(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var o=at.attr(i,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,p,d,f,h,g=r!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===t&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(b=(f=(c=(u=(p=(d=m)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]||[])[0]===E&&c[1])&&c[2],d=f&&m.childNodes[f];d=++f&&d&&d[g]||(b=f=0)||h.pop();)if(1===d.nodeType&&++b&&d===e){u[t]=[E,f,b];break}}else if(y&&(b=f=(c=(u=(p=(d=e)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]||[])[0]===E&&c[1]),!1===b)for(;(d=++f&&d&&d[g]||(b=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(y&&((u=(p=d[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[t]=[E,b]),d!==e)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,e){var n,o=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return o[_]?o(e):o.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,n){for(var i,r=o(t,e),s=r.length;s--;)t[i=L(t,r[s])]=!(n[i]=r[s])})):function(t){return o(t,0,n)}):o}},pseudos:{not:ct((function(t){var e=[],n=[],i=a(t.replace(W,"$1"));return i[_]?ct((function(t,e,n,o){for(var r,s=i(t,null,o,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))})):function(t,o,r){return e[0]=t,i(e,null,r,n),e[0]=null,!n.pop()}})),has:ct((function(t){return function(e){return at(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||o(e)).indexOf(t)>-1}})),lang:ct((function(t){return V.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===h},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt((function(){return[0]})),last:mt((function(t,e){return[e-1]})),eq:mt((function(t,e,n){return[n<0?n+e:n]})),even:mt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:mt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:mt((function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t})),gt:mt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ft(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ht(e);function yt(){}function bt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function _t(t,e,n){var i=e.dir,o=e.next,r=o||i,s=n&&"parentNode"===r,a=x++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,l){var c,u,p,d=[E,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(u=(p=e[_]||(e[_]={}))[e.uniqueID]||(p[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[r])&&c[0]===E&&c[1]===a)return d[2]=c[2];if(u[r]=d,d[2]=t(e,n,l))return!0}return!1}}function wt(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function Et(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function xt(t,e,n,i,o,r){return i&&!i[_]&&(i=xt(i)),o&&!o[_]&&(o=xt(o,r)),ct((function(r,s,a,l){var c,u,p,d=[],f=[],h=s.length,g=r||function(t,e,n){for(var i=0,o=e.length;i<o;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!r&&e?g:Et(g,d,t,a,l),v=n?o||(r?t:h||i)?[]:s:m;if(n&&n(m,v,a,l),i)for(c=Et(v,f),i(c,[],a,l),u=c.length;u--;)(p=c[u])&&(v[f[u]]=!(m[f[u]]=p));if(r){if(o||t){if(o){for(c=[],u=v.length;u--;)(p=v[u])&&c.push(m[u]=p);o(null,v=[],c,l)}for(u=v.length;u--;)(p=v[u])&&(c=o?L(r,p):d[u])>-1&&(r[c]=!(s[c]=p))}}else v=Et(v===s?v.splice(h,v.length):v),o?o(null,s,v,l):I.apply(s,v)}))}function Dt(t){for(var e,n,o,r=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,u=_t((function(t){return t===e}),a,!0),p=_t((function(t){return L(e,t)>-1}),a,!0),d=[function(t,n,i){var o=!s&&(i||n!==c)||((e=n).nodeType?u(t,n,i):p(t,n,i));return e=null,o}];l<r;l++)if(n=i.relative[t[l].type])d=[_t(wt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[_]){for(o=++l;o<r&&!i.relative[t[o].type];o++);return xt(l>1&&wt(d),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),n,l<o&&Dt(t.slice(l,o)),o<r&&Dt(t=t.slice(o)),o<r&&bt(t))}d.push(n)}return wt(d)}return yt.prototype=i.filters=i.pseudos,i.setFilters=new yt,s=at.tokenize=function(t,e){var n,o,r,s,a,l,c,u=C[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=i.preFilter;a;){for(s in n&&!(o=G.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),n=!1,(o=$.exec(a))&&(n=o.shift(),r.push({value:n,type:o[0].replace(W," ")}),a=a.slice(n.length)),i.filter)!(o=K[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),r.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):C(t,l).slice(0)},a=at.compile=function(t,e){var n,o=[],r=[],a=O[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Dt(e[n]))[_]?o.push(a):r.push(a);a=O(t,function(t,e){var n=e.length>0,o=t.length>0,r=function(r,s,a,l,u){var p,h,m,v=0,y="0",b=r&&[],_=[],w=c,x=r||o&&i.find.TAG("*",u),D=E+=null==w?1:Math.random()||.1,C=x.length;for(u&&(c=s==f||s||u);y!==C&&null!=(p=x[y]);y++){if(o&&p){for(h=0,s||p.ownerDocument==f||(d(p),a=!g);m=t[h++];)if(m(p,s||f,a)){l.push(p);break}u&&(E=D)}n&&((p=!m&&p)&&v--,r&&b.push(p))}if(v+=y,n&&y!==v){for(h=0;m=e[h++];)m(b,_,s,a);if(r){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=R.call(l));_=Et(_)}I.apply(l,_),u&&!r&&_.length>0&&v+e.length>1&&at.uniqueSort(l)}return u&&(E=D,c=w),b};return n?ct(r):r}(r,o)),a.selector=t}return a},l=at.select=function(t,e,n,o){var r,l,c,u,p,d="function"==typeof t&&t,f=!o&&s(t=d.selector||t);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(r=K.needsContext.test(t)?0:l.length;r--&&(c=l[r],!i.relative[u=c.type]);)if((p=i.find[u])&&(o=p(c.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(r,1),!(t=o.length&&bt(l)))return I.apply(n,o),n;break}}return(d||a(t,f))(o,e,!g,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=_.split("").sort(S).join("")===_,n.detectDuplicates=!!p,d(),n.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||pt("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||pt("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||pt(P,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),at}(i);D.find=O,D.expr=O.selectors,D.expr[":"]=D.expr.pseudos,D.uniqueSort=D.unique=O.uniqueSort,D.text=O.getText,D.isXMLDoc=O.isXML,D.contains=O.contains,D.escapeSelector=O.escape;var T=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&D(t).is(n))break;i.push(t)}return i},S=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},N=D.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var R=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(t,e,n){return v(e)?D.grep(t,(function(t,i){return!!e.call(t,i,t)!==n})):e.nodeType?D.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?D.grep(t,(function(t){return u.call(e,t)>-1!==n})):D.filter(e,t,n)}D.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?D.find.matchesSelector(i,t)?[i]:[]:D.find.matches(t,D.grep(e,(function(t){return 1===t.nodeType})))},D.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(D(t).filter((function(){for(e=0;e<i;e++)if(D.contains(o[e],this))return!0})));for(n=this.pushStack([]),e=0;e<i;e++)D.find(t,o[e],n);return i>1?D.uniqueSort(n):n},filter:function(t){return this.pushStack(k(this,t||[],!1))},not:function(t){return this.pushStack(k(this,t||[],!0))},is:function(t){return!!k(this,"string"==typeof t&&N.test(t)?D(t):t||[],!1).length}});var I,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(D.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||I,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:j.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof D?e[0]:e,D.merge(this,D.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:b,!0)),R.test(i[1])&&D.isPlainObject(e))for(i in e)v(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=b.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(D):D.makeArray(t,this)}).prototype=D.fn,I=D(b);var L=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}D.fn.extend({has:function(t){var e=D(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(D.contains(this,e[t]))return!0}))},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&D(t);if(!N.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&D.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?D.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?u.call(D(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(D.uniqueSort(D.merge(this.get(),D(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),D.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return T(t,"parentNode")},parentsUntil:function(t,e,n){return T(t,"parentNode",n)},next:function(t){return H(t,"nextSibling")},prev:function(t){return H(t,"previousSibling")},nextAll:function(t){return T(t,"nextSibling")},prevAll:function(t){return T(t,"previousSibling")},nextUntil:function(t,e,n){return T(t,"nextSibling",n)},prevUntil:function(t,e,n){return T(t,"previousSibling",n)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return null!=t.contentDocument&&s(t.contentDocument)?t.contentDocument:(A(t,"template")&&(t=t.content||t),D.merge([],t.childNodes))}},(function(t,e){D.fn[t]=function(n,i){var o=D.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=D.filter(i,o)),this.length>1&&(P[t]||D.uniqueSort(o),L.test(t)&&o.reverse()),this.pushStack(o)}}));var q=/[^\x20\t\r\n\f]+/g;function M(t){return t}function B(t){throw t}function F(t,e,n,i){var o;try{t&&v(o=t.promise)?o.call(t).done(e).fail(n):t&&v(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}D.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return D.each(t.match(q)||[],(function(t,n){e[n]=!0})),e}(t):D.extend({},t);var e,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=r.length,n=!1);t.memory||(n=!1),e=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!e&&(a=r.length-1,s.push(n)),function e(n){D.each(n,(function(n,i){v(i)?t.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==E(i)&&e(i)}))}(arguments),n&&!e&&l()),this},remove:function(){return D.each(arguments,(function(t,e){for(var n;(n=D.inArray(e,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(t){return t?D.inArray(t,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||e||(r=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},D.extend({Deferred:function(t){var e=[["notify","progress",D.Callbacks("memory"),D.Callbacks("memory"),2],["resolve","done",D.Callbacks("once memory"),D.Callbacks("once memory"),0,"resolved"],["reject","fail",D.Callbacks("once memory"),D.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return D.Deferred((function(n){D.each(e,(function(e,i){var o=v(t[i[4]])&&t[i[4]];r[i[1]]((function(){var t=o&&o.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,o){var r=0;function s(t,e,n,o){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(t<r)){if((i=n.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?o?c.call(i,s(r,e,M,o),s(r,e,B,o)):(r++,c.call(i,s(r,e,M,o),s(r,e,B,o),s(r,e,M,e.notifyWith))):(n!==M&&(a=void 0,l=[i]),(o||e.resolveWith)(a,l))}},u=o?c:function(){try{c()}catch(i){D.Deferred.exceptionHook&&D.Deferred.exceptionHook(i,u.stackTrace),t+1>=r&&(n!==B&&(a=void 0,l=[i]),e.rejectWith(a,l))}};t?u():(D.Deferred.getStackHook&&(u.stackTrace=D.Deferred.getStackHook()),i.setTimeout(u))}}return D.Deferred((function(i){e[0][3].add(s(0,i,v(o)?o:M,i.notifyWith)),e[1][3].add(s(0,i,v(t)?t:M)),e[2][3].add(s(0,i,v(n)?n:B))})).promise()},promise:function(t){return null!=t?D.extend(t,o):o}},r={};return D.each(e,(function(t,i){var s=i[2],a=i[5];o[i[1]]=s.add,a&&s.add((function(){n=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=s.fireWith})),o.promise(r),t&&t.call(r,r),r},when:function(t){var e=arguments.length,n=e,i=Array(n),o=a.call(arguments),r=D.Deferred(),s=function(t){return function(n){i[t]=this,o[t]=arguments.length>1?a.call(arguments):n,--e||r.resolveWith(i,o)}};if(e<=1&&(F(t,r.done(s(n)).resolve,r.reject,!e),"pending"===r.state()||v(o[n]&&o[n].then)))return r.then();for(;n--;)F(o[n],s(n),r.reject);return r.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;D.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&W.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},D.readyException=function(t){i.setTimeout((function(){throw t}))};var G=D.Deferred();function $(){b.removeEventListener("DOMContentLoaded",$),i.removeEventListener("load",$),D.ready()}D.fn.ready=function(t){return G.then(t).catch((function(t){D.readyException(t)})),this},D.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--D.readyWait:D.isReady)||(D.isReady=!0,!0!==t&&--D.readyWait>0||G.resolveWith(b,[D]))}}),D.ready.then=G.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(D.ready):(b.addEventListener("DOMContentLoaded",$),i.addEventListener("load",$));var U=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===E(n))for(a in o=!0,n)U(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,v(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(D(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},z=/^-ms-/,V=/-([a-z])/g;function K(t,e){return e.toUpperCase()}function X(t){return t.replace(z,"ms-").replace(V,K)}var Y=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Q(){this.expando=D.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[X(e)]=n;else for(i in e)o[X(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(q)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||D.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!D.isEmptyObject(e)}};var J=new Q,Z=new Q,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}D.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),D.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=Z.get(r),1===r.nodeType&&!J.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=X(i.slice(5)),nt(r,i,o[i]));J.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each((function(){Z.set(this,t)})):U(this,(function(e){var n;if(r&&void 0===e)return void 0!==(n=Z.get(r,t))||void 0!==(n=nt(r,t))?n:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),D.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,D.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=D.queue(t,e),i=n.length,o=n.shift(),r=D._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,(function(){D.dequeue(t,e)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:D.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),D.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?D.queue(this[0],t):void 0===e?this:this.each((function(){var n=D.queue(this,t,e);D._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&D.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){D.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=D.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=J.get(r[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ot=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),rt=["Top","Right","Bottom","Left"],st=b.documentElement,at=function(t){return D.contains(t.ownerDocument,t)},lt={composed:!0};st.getRootNode&&(at=function(t){return D.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===D.css(t,"display")};function ut(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return D.css(t,e,"")},l=a(),c=n&&n[3]||(D.cssNumber[e]?"":"px"),u=t.nodeType&&(D.cssNumber[e]||"px"!==c&&+l)&&ot.exec(D.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)D.style(t,e,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,D.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var pt={};function dt(t){var e,n=t.ownerDocument,i=t.nodeName,o=pt[i];return o||(e=n.body.appendChild(n.createElement(i)),o=D.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),pt[i]=o,o)}function ft(t,e){for(var n,i,o=[],r=0,s=t.length;r<s;r++)(i=t[r]).style&&(n=i.style.display,e?("none"===n&&(o[r]=J.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&ct(i)&&(o[r]=dt(i))):"none"!==n&&(o[r]="none",J.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(t[r].style.display=o[r]);return t}D.fn.extend({show:function(){return ft(this,!0)},hide:function(){return ft(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?D(this).show():D(this).hide()}))}});var ht,gt,mt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,yt=/^$|^module$|\/(?:java|ecma)script/i;ht=b.createDocumentFragment().appendChild(b.createElement("div")),(gt=b.createElement("input")).setAttribute("type","radio"),gt.setAttribute("checked","checked"),gt.setAttribute("name","t"),ht.appendChild(gt),m.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",m.option=!!ht.lastChild;var bt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _t(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?D.merge([t],n):n}function wt(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}bt.tbody=bt.tfoot=bt.colgroup=bt.caption=bt.thead,bt.th=bt.td,m.option||(bt.optgroup=bt.option=[1,"<select multiple='multiple'>","</select>"]);var Et=/<|&#?\w+;/;function xt(t,e,n,i,o){for(var r,s,a,l,c,u,p=e.createDocumentFragment(),d=[],f=0,h=t.length;f<h;f++)if((r=t[f])||0===r)if("object"===E(r))D.merge(d,r.nodeType?[r]:r);else if(Et.test(r)){for(s=s||p.appendChild(e.createElement("div")),a=(vt.exec(r)||["",""])[1].toLowerCase(),l=bt[a]||bt._default,s.innerHTML=l[1]+D.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;D.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(e.createTextNode(r));for(p.textContent="",f=0;r=d[f++];)if(i&&D.inArray(r,i)>-1)o&&o.push(r);else if(c=at(r),s=_t(p.appendChild(r),"script"),c&&wt(s),n)for(u=0;r=s[u++];)yt.test(r.type||"")&&n.push(r);return p}var Dt=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function Ot(){return!1}function Tt(t,e){return t===function(){try{return b.activeElement}catch(t){}}()==("focus"===e)}function St(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)St(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Ot;else if(!o)return t;return 1===r&&(s=o,o=function(t){return D().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=D.guid++)),t.each((function(){D.event.add(this,e,o,i,n)}))}function Nt(t,e,n){n?(J.set(t,e,!1),D.event.add(t,e,{namespace:!1,handler:function(t){var i,o,r=J.get(this,e);if(1&t.isTrigger&&this[e]){if(r.length)(D.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=a.call(arguments),J.set(this,e,r),i=n(this,e),this[e](),r!==(o=J.get(this,e))||i?J.set(this,e,!1):o={},r!==o)return t.stopImmediatePropagation(),t.preventDefault(),o&&o.value}else r.length&&(J.set(this,e,{value:D.event.trigger(D.extend(r[0],D.Event.prototype),r.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&D.event.add(t,e,Ct)}D.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,c,u,p,d,f,h,g,m=J.get(t);if(Y(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&D.find.matchesSelector(st,o),n.guid||(n.guid=D.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(e){return void 0!==D&&D.event.triggered!==e.type?D.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(q)||[""]).length;c--;)f=g=(a=Dt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=D.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=D.event.special[f]||{},u=D.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&D.expr.match.needsContext.test(o),namespace:h.join(".")},r),(d=l[f])||((d=l[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(t,i,h,s)||t.addEventListener&&t.addEventListener(f,s)),p.add&&(p.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,u):d.push(u),D.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,p,d,f,h,g,m=J.hasData(t)&&J.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(q)||[""]).length;c--;)if(f=g=(a=Dt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=D.event.special[f]||{},d=l[f=(i?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=d.length;r--;)u=d[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,p.remove&&p.remove.call(t,u));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(t,h,m.handle)||D.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)D.event.remove(t,f+e[c],n,i,!0);D.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=new Array(arguments.length),l=D.event.fix(t),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=D.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=D.event.handlers.call(this,l,c),e=0;(o=s[e++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((D.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?D(o,this).index(c)>-1:D.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(D.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[D.expando]?t:new D.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&Nt(e,"click",Ct),!1},trigger:function(t){var e=this||t;return mt.test(e.type)&&e.click&&A(e,"input")&&Nt(e,"click"),!0},_default:function(t){var e=t.target;return mt.test(e.type)&&e.click&&A(e,"input")&&J.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},D.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},D.Event=function(t,e){if(!(this instanceof D.Event))return new D.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:Ot,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&D.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[D.expando]=!0},D.Event.prototype={constructor:D.Event,isDefaultPrevented:Ot,isPropagationStopped:Ot,isImmediatePropagationStopped:Ot,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},D.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},D.event.addProp),D.each({focus:"focusin",blur:"focusout"},(function(t,e){D.event.special[t]={setup:function(){return Nt(this,t,Tt),!1},trigger:function(){return Nt(this,t),!0},_default:function(){return!0},delegateType:e}})),D.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){D.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||D.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}})),D.fn.extend({on:function(t,e,n,i){return St(this,t,e,n,i)},one:function(t,e,n,i){return St(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,D(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Ot),this.each((function(){D.event.remove(this,t,n,e)}))}});var At=/<script|<style|<link/i,Rt=/checked\s*(?:[^=]|=\s*.checked.)/i,kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function It(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&D(t).children("tbody")[0]||t}function jt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Lt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var n,i,o,r,s,a;if(1===e.nodeType){if(J.hasData(t)&&(a=J.get(t).events))for(o in J.remove(e,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)D.event.add(e,o,a[o][n]);Z.hasData(t)&&(r=Z.access(t),s=D.extend({},r),Z.set(e,s))}}function Ht(t,e){var n=e.nodeName.toLowerCase();"input"===n&&mt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function qt(t,e,n,i){e=l(e);var o,r,s,a,c,u,p=0,d=t.length,f=d-1,h=e[0],g=v(h);if(g||d>1&&"string"==typeof h&&!m.checkClone&&Rt.test(h))return t.each((function(o){var r=t.eq(o);g&&(e[0]=h.call(this,o,r.html())),qt(r,e,n,i)}));if(d&&(r=(o=xt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=D.map(_t(o,"script"),jt)).length;p<d;p++)c=o,p!==f&&(c=D.clone(c,!0,!0),a&&D.merge(s,_t(c,"script"))),n.call(t[p],c,p);if(a)for(u=s[s.length-1].ownerDocument,D.map(s,Lt),p=0;p<a;p++)c=s[p],yt.test(c.type||"")&&!J.access(c,"globalEval")&&D.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?D._evalUrl&&!c.noModule&&D._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(kt,""),c,u))}return t}function Mt(t,e,n){for(var i,o=e?D.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||D.cleanData(_t(i)),i.parentNode&&(n&&at(i)&&wt(_t(i,"script")),i.parentNode.removeChild(i));return t}D.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||D.isXMLDoc(t)))for(s=_t(a),i=0,o=(r=_t(t)).length;i<o;i++)Ht(r[i],s[i]);if(e)if(n)for(r=r||_t(t),s=s||_t(a),i=0,o=r.length;i<o;i++)Pt(r[i],s[i]);else Pt(t,a);return(s=_t(a,"script")).length>0&&wt(s,!l&&_t(t,"script")),a},cleanData:function(t){for(var e,n,i,o=D.event.special,r=0;void 0!==(n=t[r]);r++)if(Y(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)o[i]?D.event.remove(n,i):D.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),D.fn.extend({detach:function(t){return Mt(this,t,!0)},remove:function(t){return Mt(this,t)},text:function(t){return U(this,(function(t){return void 0===t?D.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return qt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||It(this,t).appendChild(t)}))},prepend:function(){return qt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=It(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return qt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return qt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(D.cleanData(_t(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return D.clone(this,t,e)}))},html:function(t){return U(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!bt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=D.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(D.cleanData(_t(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return qt(this,arguments,(function(e){var n=this.parentNode;D.inArray(this,t)<0&&(D.cleanData(_t(this)),n&&n.replaceChild(e,this))}),t)}}),D.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){D.fn[t]=function(t){for(var n,i=[],o=D(t),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),D(o[s])[e](n),c.apply(i,n.get());return this.pushStack(i)}}));var Bt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Ft=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},Wt=function(t,e,n){var i,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];for(o in i=n.call(t),e)t.style[o]=r[o];return i},Gt=new RegExp(rt.join("|"),"i");function $t(t,e,n){var i,o,r,s,a=t.style;return(n=n||Ft(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at(t)||(s=D.style(t,e)),!m.pixelBoxStyles()&&Bt.test(s)&&Gt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Ut(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(c).appendChild(u);var t=i.getComputedStyle(u);n="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",s=36===e(t.right),o=36===e(t.width),u.style.position="absolute",r=12===e(u.offsetWidth/3),st.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var n,o,r,s,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,D.extend(m,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),r},reliableTrDimensions:function(){var t,e,n,o;return null==a&&(t=b.createElement("table"),e=b.createElement("tr"),n=b.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",st.appendChild(t).appendChild(e).appendChild(n),o=i.getComputedStyle(e),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===e.offsetHeight,st.removeChild(t)),a}}))}();var zt=["Webkit","Moz","ms"],Vt=b.createElement("div").style,Kt={};function Xt(t){return D.cssProps[t]||Kt[t]||(t in Vt?t:Kt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=zt.length;n--;)if((t=zt[n]+e)in Vt)return t}(t)||t)}var Yt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,Jt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"};function te(t,e,n){var i=ot.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ee(t,e,n,i,o,r){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=D.css(t,n+rt[s],!0,o)),i?("content"===n&&(l-=D.css(t,"padding"+rt[s],!0,o)),"margin"!==n&&(l-=D.css(t,"border"+rt[s]+"Width",!0,o))):(l+=D.css(t,"padding"+rt[s],!0,o),"padding"!==n?l+=D.css(t,"border"+rt[s]+"Width",!0,o):a+=D.css(t,"border"+rt[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function ne(t,e,n){var i=Ft(t),o=(!m.boxSizingReliable()||n)&&"border-box"===D.css(t,"boxSizing",!1,i),r=o,s=$t(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Bt.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&A(t,"tr")||"auto"===s||!parseFloat(s)&&"inline"===D.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===D.css(t,"boxSizing",!1,i),(r=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+ee(t,e,n||(o?"border":"content"),r,i,s)+"px"}function ie(t,e,n,i,o){return new ie.prototype.init(t,e,n,i,o)}D.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=$t(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=X(e),l=Qt.test(e),c=t.style;if(l||(e=Xt(a)),s=D.cssHooks[e]||D.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"==(r=typeof n)&&(o=ot.exec(n))&&o[1]&&(n=ut(t,e,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(D.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,r,s,a=X(e);return Qt.test(e)||(e=Xt(a)),(s=D.cssHooks[e]||D.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=$t(t,e,i)),"normal"===o&&e in Zt&&(o=Zt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),D.each(["height","width"],(function(t,e){D.cssHooks[e]={get:function(t,n,i){if(n)return!Yt.test(D.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ne(t,e,i):Wt(t,Jt,(function(){return ne(t,e,i)}))},set:function(t,n,i){var o,r=Ft(t),s=!m.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===D.css(t,"boxSizing",!1,r),l=i?ee(t,e,i,a,r):0;return a&&s&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(r[e])-ee(t,e,"border",!1,r)-.5)),l&&(o=ot.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=D.css(t,e)),te(0,n,l)}}})),D.cssHooks.marginLeft=Ut(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-Wt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),D.each({margin:"",padding:"",border:"Width"},(function(t,e){D.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+rt[i]+e]=r[i]||r[i-2]||r[0];return o}},"margin"!==t&&(D.cssHooks[t+e].set=te)})),D.fn.extend({css:function(t,e){return U(this,(function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Ft(t),o=e.length;s<o;s++)r[e[s]]=D.css(t,e[s],!1,i);return r}return void 0!==n?D.style(t,e,n):D.css(t,e)}),t,e,arguments.length>1)}}),D.Tween=ie,ie.prototype={constructor:ie,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||D.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(D.cssNumber[n]?"":"px")},cur:function(){var t=ie.propHooks[this.prop];return t&&t.get?t.get(this):ie.propHooks._default.get(this)},run:function(t){var e,n=ie.propHooks[this.prop];return this.options.duration?this.pos=e=D.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ie.propHooks._default.set(this),this}},ie.prototype.init.prototype=ie.prototype,ie.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=D.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){D.fx.step[t.prop]?D.fx.step[t.prop](t):1!==t.elem.nodeType||!D.cssHooks[t.prop]&&null==t.elem.style[Xt(t.prop)]?t.elem[t.prop]=t.now:D.style(t.elem,t.prop,t.now+t.unit)}}},ie.propHooks.scrollTop=ie.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},D.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},D.fx=ie.prototype.init,D.fx.step={};var oe,re,se=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;function le(){re&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(le):i.setTimeout(le,D.fx.interval),D.fx.tick())}function ce(){return i.setTimeout((function(){oe=void 0})),oe=Date.now()}function ue(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=rt[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function pe(t,e,n){for(var i,o=(de.tweeners[e]||[]).concat(de.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function de(t,e,n){var i,o,r=0,s=de.prefilters.length,a=D.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var e=oe||ce(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:D.extend({},e),opts:D.extend(!0,{specialEasing:{},easing:D.easing._default},n),originalProperties:e,originalOptions:n,startTime:oe||ce(),duration:n.duration,tweens:[],createTween:function(e,n){var i=D.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=X(n)],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=D.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(u,c.opts.specialEasing);r<s;r++)if(i=de.prefilters[r].call(c,t,u,c.opts))return v(i.stop)&&(D._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return D.map(u,pe,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),D.fx.timer(D.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}D.Animation=D.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,ot.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(q);for(var n,i=0,o=t.length;i<o;i++)n=t[i],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u,p="width"in e||"height"in e,d=this,f={},h=t.style,g=t.nodeType&&ct(t),m=J.get(t,"fxshow");for(i in n.queue||(null==(s=D._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always((function(){d.always((function(){s.unqueued--,D.queue(t,"fx").length||s.empty.fire()}))}))),e)if(o=e[i],se.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||D.style(t,i)}if((l=!D.isEmptyObject(e))||!D.isEmptyObject(f))for(i in p&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=J.get(t,"display")),"none"===(u=D.css(t,"display"))&&(c?u=c:(ft([t],!0),c=t.style.display||c,u=D.css(t,"display"),ft([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===D.css(t,"float")&&(l||(d.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=J.access(t,"fxshow",{display:c}),r&&(m.hidden=!g),g&&ft([t],!0),d.done((function(){for(i in g||ft([t]),J.remove(t,"fxshow"),f)D.style(t,i,f[i])}))),l=pe(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),D.speed=function(t,e,n){var i=t&&"object"==typeof t?D.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return D.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in D.fx.speeds?i.duration=D.fx.speeds[i.duration]:i.duration=D.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&D.dequeue(this,i.queue)},i},D.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=D.isEmptyObject(t),r=D.speed(e,n,i),s=function(){var e=de(this,D.extend({},t),r);(o||J.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,o=null!=t&&t+"queueHooks",r=D.timers,s=J.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&ae.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||D.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=D.timers,s=i?i.length:0;for(n.finish=!0,D.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),D.each(["toggle","show","hide"],(function(t,e){var n=D.fn[e];D.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ue(e,!0),t,i,o)}})),D.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){D.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),D.timers=[],D.fx.tick=function(){var t,e=0,n=D.timers;for(oe=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||D.fx.stop(),oe=void 0},D.fx.timer=function(t){D.timers.push(t),D.fx.start()},D.fx.interval=13,D.fx.start=function(){re||(re=!0,le())},D.fx.stop=function(){re=null},D.fx.speeds={slow:600,fast:200,_default:400},D.fn.delay=function(t,e){return t=D.fx&&D.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var o=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(o)}}))},function(){var t=b.createElement("input"),e=b.createElement("select").appendChild(b.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=b.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var fe,he=D.expr.attrHandle;D.fn.extend({attr:function(t,e){return U(this,D.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){D.removeAttr(this,t)}))}}),D.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?D.prop(t,e,n):(1===r&&D.isXMLDoc(t)||(o=D.attrHooks[e.toLowerCase()]||(D.expr.match.bool.test(e)?fe:void 0)),void 0!==n?null===n?void D.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=D.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(q);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),fe={set:function(t,e,n){return!1===e?D.removeAttr(t,n):t.setAttribute(n,n),n}},D.each(D.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=he[e]||D.find.attr;he[e]=function(t,e,i){var o,r,s=e.toLowerCase();return i||(r=he[s],he[s]=o,o=null!=n(t,e,i)?s:null,he[s]=r),o}}));var ge=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;function ve(t){return(t.match(q)||[]).join(" ")}function ye(t){return t.getAttribute&&t.getAttribute("class")||""}function be(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(q)||[]}D.fn.extend({prop:function(t,e){return U(this,D.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[D.propFix[t]||t]}))}}),D.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&D.isXMLDoc(t)||(e=D.propFix[e]||e,o=D.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=D.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(D.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),D.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){D.propFix[this.toLowerCase()]=this})),D.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t))return this.each((function(e){D(this).addClass(t.call(this,e,ye(this)))}));if((e=be(t)).length)for(;n=this[l++];)if(o=ye(n),i=1===n.nodeType&&" "+ve(o)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=ve(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(v(t))return this.each((function(e){D(this).removeClass(t.call(this,e,ye(this)))}));if(!arguments.length)return this.attr("class","");if((e=be(t)).length)for(;n=this[l++];)if(o=ye(n),i=1===n.nodeType&&" "+ve(o)+" "){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(a=ve(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(n){D(this).toggleClass(t.call(this,n,ye(this),e),e)})):this.each((function(){var e,o,r,s;if(i)for(o=0,r=D(this),s=be(t);e=s[o++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=ye(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ve(ye(n))+" ").indexOf(e)>-1)return!0;return!1}});var _e=/\r/g;D.fn.extend({val:function(t){var e,n,i,o=this[0];return arguments.length?(i=v(t),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,D(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=D.map(o,(function(t){return null==t?"":t+""}))),(e=D.valHooks[this.type]||D.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))}))):o?(e=D.valHooks[o.type]||D.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(_e,""):null==n?"":n:void 0}}),D.extend({valHooks:{option:{get:function(t){var e=D.find.attr(t,"value");return null!=e?e:ve(D.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=D(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=D.makeArray(e),s=o.length;s--;)((i=o[s]).selected=D.inArray(D.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),D.each(["radio","checkbox"],(function(){D.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=D.inArray(D(t).val(),e)>-1}},m.checkOn||(D.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),m.focusin="onfocusin"in i;var we=/^(?:focusinfocus|focusoutblur)$/,Ee=function(t){t.stopPropagation()};D.extend(D.event,{trigger:function(t,e,n,o){var r,s,a,l,c,u,p,d,h=[n||b],g=f.call(t,"type")?t.type:t,m=f.call(t,"namespace")?t.namespace.split("."):[];if(s=d=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!we.test(g+D.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(t=t[D.expando]?t:new D.Event(g,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:D.makeArray(e,[t]),p=D.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(n,e))){if(!o&&!p.noBubble&&!y(n)){for(l=p.delegateType||g,we.test(l+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||i)}for(r=0;(s=h[r++])&&!t.isPropagationStopped();)d=s,t.type=r>1?l:p.bindType||g,(u=(J.get(s,"events")||Object.create(null))[t.type]&&J.get(s,"handle"))&&u.apply(s,e),(u=c&&s[c])&&u.apply&&Y(s)&&(t.result=u.apply(s,e),!1===t.result&&t.preventDefault());return t.type=g,o||t.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),e)||!Y(n)||c&&v(n[g])&&!y(n)&&((a=n[c])&&(n[c]=null),D.event.triggered=g,t.isPropagationStopped()&&d.addEventListener(g,Ee),n[g](),t.isPropagationStopped()&&d.removeEventListener(g,Ee),D.event.triggered=void 0,a&&(n[c]=a)),t.result}},simulate:function(t,e,n){var i=D.extend(new D.Event,n,{type:t,isSimulated:!0});D.event.trigger(i,null,e)}}),D.fn.extend({trigger:function(t,e){return this.each((function(){D.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return D.event.trigger(t,e,n,!0)}}),m.focusin||D.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){D.event.simulate(e,t.target,D.event.fix(t))};D.event.special[e]={setup:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,e);o||i.addEventListener(t,n,!0),J.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=J.access(i,e)-1;o?J.access(i,e,o):(i.removeEventListener(t,n,!0),J.remove(i,e))}}}));var xe=i.location,De={guid:Date.now()},Ce=/\?/;D.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||D.error("Invalid XML: "+(n?D.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Oe=/\[\]$/,Te=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function Ae(t,e,n,i){var o;if(Array.isArray(e))D.each(e,(function(e,o){n||Oe.test(t)?i(t,o):Ae(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)}));else if(n||"object"!==E(e))i(t,e);else for(o in e)Ae(t+"["+o+"]",e[o],n,i)}D.param=function(t,e){var n,i=[],o=function(t,e){var n=v(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!D.isPlainObject(t))D.each(t,(function(){o(this.name,this.value)}));else for(n in t)Ae(n,t[n],e,o);return i.join("&")},D.fn.extend({serialize:function(){return D.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=D.prop(this,"elements");return t?D.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!D(this).is(":disabled")&&Ne.test(this.nodeName)&&!Se.test(t)&&(this.checked||!mt.test(t))})).map((function(t,e){var n=D(this).val();return null==n?null:Array.isArray(n)?D.map(n,(function(t){return{name:e.name,value:t.replace(Te,"\r\n")}})):{name:e.name,value:n.replace(Te,"\r\n")}})).get()}});var Re=/%20/g,ke=/#.*$/,Ie=/([?&])_=[^&]*/,je=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,Pe=/^\/\//,He={},qe={},Me="*/".concat("*"),Be=b.createElement("a");function Fe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(q)||[];if(v(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function We(t,e,n,i){var o={},r=t===qe;function s(a){var l;return o[a]=!0,D.each(t[a]||[],(function(t,a){var c=a(e,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)})),l}return s(e.dataTypes[0])||!o["*"]&&s("*")}function Ge(t,e){var n,i,o=D.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&D.extend(!0,t,i),t}Be.href=xe.href,D.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":D.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ge(Ge(t,D.ajaxSettings),e):Ge(D.ajaxSettings,t)},ajaxPrefilter:Fe(He),ajaxTransport:Fe(qe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o,r,s,a,l,c,u,p,d,f=D.ajaxSetup({},e),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?D(h):D.event,m=D.Deferred(),v=D.Callbacks("once memory"),y=f.statusCode||{},_={},w={},E="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(c){if(!s)for(s={};e=je.exec(r);)s[e[1].toLowerCase()+" "]=(s[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=s[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==c&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)x.always(t[x.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||E;return n&&n.abort(e),C(0,e),this}};if(m.promise(x),f.url=((t||f.url||xe.href)+"").replace(Pe,xe.protocol+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(q)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Be.protocol+"//"+Be.host!=l.protocol+"//"+l.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=D.param(f.data,f.traditional)),We(He,f,e,x),c)return x;for(p in(u=D.event&&f.global)&&0==D.active++&&D.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Le.test(f.type),o=f.url.replace(ke,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Re,"+")):(d=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Ce.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Ie,"$1"),d=(Ce.test(o)?"&":"?")+"_="+De.guid+++d),f.url=o+d),f.ifModified&&(D.lastModified[o]&&x.setRequestHeader("If-Modified-Since",D.lastModified[o]),D.etag[o]&&x.setRequestHeader("If-None-Match",D.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||e.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Me+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,x,f)||c))return x.abort();if(E="abort",v.add(f.complete),x.done(f.success),x.fail(f.error),n=We(qe,f,e,x)){if(x.readyState=1,u&&g.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(a=i.setTimeout((function(){x.abort("timeout")}),f.timeout));try{c=!1,n.send(_,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,e,s,l){var p,d,b,_,w,E=e;c||(c=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",x.readyState=t>0?4:0,p=t>=200&&t<300||304===t,s&&(_=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,x,s)),!p&&D.inArray("script",f.dataTypes)>-1&&D.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),_=function(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(f,_,x,p),p?(f.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(D.lastModified[o]=w),(w=x.getResponseHeader("etag"))&&(D.etag[o]=w)),204===t||"HEAD"===f.type?E="nocontent":304===t?E="notmodified":(E=_.state,d=_.data,p=!(b=_.error))):(b=E,!t&&E||(E="error",t<0&&(t=0))),x.status=t,x.statusText=(e||E)+"",p?m.resolveWith(h,[d,E,x]):m.rejectWith(h,[x,E,b]),x.statusCode(y),y=void 0,u&&g.trigger(p?"ajaxSuccess":"ajaxError",[x,f,p?d:b]),v.fireWith(h,[x,E]),u&&(g.trigger("ajaxComplete",[x,f]),--D.active||D.event.trigger("ajaxStop")))}return x},getJSON:function(t,e,n){return D.get(t,e,n,"json")},getScript:function(t,e){return D.get(t,void 0,e,"script")}}),D.each(["get","post"],(function(t,e){D[e]=function(t,n,i,o){return v(n)&&(o=o||i,i=n,n=void 0),D.ajax(D.extend({url:t,type:e,dataType:o,data:n,success:i},D.isPlainObject(t)&&t))}})),D.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),D._evalUrl=function(t,e,n){return D.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){D.globalEval(t,e,n)}})},D.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=D(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){D(this).wrapInner(t.call(this,e))})):this.each((function(){var e=D(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){D(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){D(this).replaceWith(this.childNodes)})),this}}),D.expr.pseudos.hidden=function(t){return!D.expr.pseudos.visible(t)},D.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},D.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ue=D.ajaxSettings.xhr();m.cors=!!Ue&&"withCredentials"in Ue,m.ajax=Ue=!!Ue,D.ajaxTransport((function(t){var e,n;if(m.cors||Ue&&!t.crossDomain)return{send:function(o,r){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);e=function(t){return function(){e&&(e=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r($e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),n=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),D.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),D.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return D.globalEval(t),t}}}),D.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),D.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,o){e=D("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),b.head.appendChild(e[0])},abort:function(){n&&n()}}}));var ze,Ve=[],Ke=/(=)\?(?=&|$)|\?\?/;D.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||D.expando+"_"+De.guid++;return this[t]=!0,t}}),D.ajaxPrefilter("json jsonp",(function(t,e,n){var o,r,s,a=!1!==t.jsonp&&(Ke.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ke.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ke,"$1"+o):!1!==t.jsonp&&(t.url+=(Ce.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||D.error(o+" was not called"),s[0]},t.dataTypes[0]="json",r=i[o],i[o]=function(){s=arguments},n.always((function(){void 0===r?D(i).removeProp(o):i[o]=r,t[o]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(o)),s&&v(r)&&r(s[0]),s=r=void 0})),"script"})),m.createHTMLDocument=((ze=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ze.childNodes.length),D.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,e.head.appendChild(i)):e=b),r=!n&&[],(o=R.exec(t))?[e.createElement(o[1])]:(o=xt([t],e,r),r&&r.length&&D(r).remove(),D.merge([],o.childNodes)));var i,o,r},D.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=ve(t.slice(a)),t=t.slice(0,a)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&D.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done((function(t){r=arguments,s.html(i?D("<div>").append(D.parseHTML(t)).find(i):t)})).always(n&&function(t,e){s.each((function(){n.apply(this,r||[t.responseText,e,t])}))}),this},D.expr.pseudos.animated=function(t){return D.grep(D.timers,(function(e){return t===e.elem})).length},D.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c=D.css(t,"position"),u=D(t),p={};"static"===c&&(t.style.position="relative"),a=u.offset(),r=D.css(t,"top"),l=D.css(t,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=u.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),v(e)&&(e=e.call(t,n,D.extend({},a))),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+o),"using"in e?e.using.call(t,p):u.css(p)}},D.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){D.offset.setOffset(this,t,e)}));var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===D.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===D.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=D(t).offset()).top+=D.css(t,"borderTopWidth",!0),o.left+=D.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-D.css(i,"marginTop",!0),left:e.left-o.left-D.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===D.css(t,"position");)t=t.offsetParent;return t||st}))}}),D.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;D.fn[t]=function(i){return U(this,(function(t,i,o){var r;if(y(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o}),t,i,arguments.length)}})),D.each(["top","left"],(function(t,e){D.cssHooks[e]=Ut(m.pixelPosition,(function(t,n){if(n)return n=$t(t,e),Bt.test(n)?D(t).position()[e]+"px":n}))})),D.each({Height:"height",Width:"width"},(function(t,e){D.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){D.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return U(this,(function(e,n,o){var r;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===o?D.css(e,n,a):D.style(e,n,o,a)}),e,s?o:void 0,s)}}))})),D.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){D.fn[e]=function(t){return this.on(e,t)}})),D.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),D.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){D.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var Xe=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;D.proxy=function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return i=a.call(arguments,2),o=function(){return t.apply(e||this,i.concat(a.call(arguments)))},o.guid=t.guid=t.guid||D.guid++,o},D.holdReady=function(t){t?D.readyWait++:D.ready(!0)},D.isArray=Array.isArray,D.parseJSON=JSON.parse,D.nodeName=A,D.isFunction=v,D.isWindow=y,D.camelCase=X,D.type=E,D.now=Date.now,D.isNumeric=function(t){var e=D.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},D.trim=function(t){return null==t?"":(t+"").replace(Xe,"")},void 0===(n=function(){return D}.apply(e,[]))||(t.exports=n);var Ye=i.jQuery,Qe=i.$;return D.noConflict=function(t){return i.$===D&&(i.$=Qe),t&&i.jQuery===D&&(i.jQuery=Ye),D},void 0===o&&(i.jQuery=i.$=D),D}))},661:()=>{String.prototype.toCamalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toLowerCase():t.toUpperCase()})).replace(/\s+/g,"")},String.prototype.toPascalCase=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t.toLowerCase()})).replace(/\s+/g,"")},String.prototype.toPascalCaseJson=function(){return this.replace(/(?:^\w|[A-Z]|\b\w)/g,(function(t,e){return 0===e?t.toUpperCase():t})).replace(/\s+/g,"")},String.prototype.format||(String.prototype.format=function(){var t=arguments;return this.replace(/{(\d+)}/g,(function(e,n){return void 0!==t[n]?t[n]:e}))})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i),n.d(i,{BSDataTable:()=>Go,BSDataTableActions:()=>_o,BSDataTableBase:()=>Vi,BSDataTableBody:()=>Bo,BSDataTableButton:()=>So,BSDataTableCell:()=>io,BSDataTableCheckBox:()=>ao,BSDataTableColDefinition:()=>Xi,BSDataTableColSettings:()=>eo,BSDataTableDataSource:()=>Yi,BSDataTableHeader:()=>qo,BSDataTableHttpClient:()=>co,BSDataTableHttpClientOptions:()=>to,BSDataTableInfiniteScroll:()=>ho,BSDataTableInput:()=>ro,BSDataTableMarker:()=>yo,BSDataTableOptions:()=>Qi,BSDataTablePagination:()=>po,BSDataTablePaginationOptions:()=>Zi,BSDataTablePagingMetaData:()=>Ji,BSDataTableRow:()=>jo,BSDataTableRowCollection:()=>Po,BSDataTableSelect:()=>Oo,BSDataTableSelectListItem:()=>Ki,BSDataTableSelectOption:()=>Do,BSDataTableSelector:()=>Ao,BSDataTableSelectorWindow:()=>ko,BSDataTableSelectorWindowCollection:()=>mo,BSDataTableTextInput:()=>Eo,BSDataTableTextInputExt:()=>Uo,CookieHelper:()=>Fi,SessionStorageService:()=>Ui,appActions:()=>Wi,appDataEvents:()=>Gi,bsDataTableDiscoveryService:()=>zi,dataEventsService:()=>$i});var t={};n.r(t),n.d(t,{afterMain:()=>E,afterRead:()=>b,afterWrite:()=>C,applyStyles:()=>k,arrow:()=>Y,auto:()=>a,basePlacements:()=>l,beforeMain:()=>_,beforeRead:()=>v,beforeWrite:()=>x,bottom:()=>o,clippingParents:()=>p,computeStyles:()=>tt,createPopper:()=>Nt,createPopperBase:()=>St,createPopperLite:()=>At,detectOverflow:()=>gt,end:()=>u,eventListeners:()=>nt,flip:()=>mt,hide:()=>bt,left:()=>s,main:()=>w,modifierPhases:()=>O,offset:()=>_t,placements:()=>m,popper:()=>f,popperGenerator:()=>Tt,popperOffsets:()=>wt,preventOverflow:()=>Et,read:()=>y,reference:()=>h,right:()=>r,start:()=>c,top:()=>e,variationPlacements:()=>g,viewport:()=>d,write:()=>D});var e="top",o="bottom",r="right",s="left",a="auto",l=[e,o,r,s],c="start",u="end",p="clippingParents",d="viewport",f="popper",h="reference",g=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+u])}),[]),m=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+u])}),[]),v="beforeRead",y="read",b="afterRead",_="beforeMain",w="main",E="afterMain",x="beforeWrite",D="write",C="afterWrite",O=[v,y,b,_,w,E,x,D,C];function T(t){return t?(t.nodeName||"").toLowerCase():null}function S(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function N(t){return t instanceof S(t).Element||t instanceof Element}function A(t){return t instanceof S(t).HTMLElement||t instanceof HTMLElement}function R(t){return"undefined"!=typeof ShadowRoot&&(t instanceof S(t).ShadowRoot||t instanceof ShadowRoot)}const k={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},o=e.elements[t];A(o)&&T(o)&&(Object.assign(o.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],o=e.attributes[t]||{},r=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});A(i)&&T(i)&&(Object.assign(i.style,r),Object.keys(o).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function I(t){return t.split("-")[0]}var j=Math.max,L=Math.min,P=Math.round;function H(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,o=1;if(A(t)&&e){var r=t.offsetHeight,s=t.offsetWidth;s>0&&(i=P(n.width)/s||1),r>0&&(o=P(n.height)/r||1)}return{width:n.width/i,height:n.height/o,top:n.top/o,right:n.right/i,bottom:n.bottom/o,left:n.left/i,x:n.left/i,y:n.top/o}}function q(t){var e=H(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function M(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&R(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function B(t){return S(t).getComputedStyle(t)}function F(t){return["table","td","th"].indexOf(T(t))>=0}function W(t){return((N(t)?t.ownerDocument:t.document)||window.document).documentElement}function G(t){return"html"===T(t)?t:t.assignedSlot||t.parentNode||(R(t)?t.host:null)||W(t)}function $(t){return A(t)&&"fixed"!==B(t).position?t.offsetParent:null}function U(t){for(var e=S(t),n=$(t);n&&F(n)&&"static"===B(n).position;)n=$(n);return n&&("html"===T(n)||"body"===T(n)&&"static"===B(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&A(t)&&"fixed"===B(t).position)return null;for(var n=G(t);A(n)&&["html","body"].indexOf(T(n))<0;){var i=B(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function z(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function V(t,e,n){return j(t,L(e,n))}function K(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function X(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const Y={name:"arrow",enabled:!0,phase:"main",fn:function(t){var n,i=t.state,a=t.name,c=t.options,u=i.elements.arrow,p=i.modifiersData.popperOffsets,d=I(i.placement),f=z(d),h=[s,r].indexOf(d)>=0?"height":"width";if(u&&p){var g=function(t,e){return K("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:X(t,l))}(c.padding,i),m=q(u),v="y"===f?e:s,y="y"===f?o:r,b=i.rects.reference[h]+i.rects.reference[f]-p[f]-i.rects.popper[h],_=p[f]-i.rects.reference[f],w=U(u),E=w?"y"===f?w.clientHeight||0:w.clientWidth||0:0,x=b/2-_/2,D=g[v],C=E-m[h]-g[y],O=E/2-m[h]/2+x,T=V(D,O,C),S=f;i.modifiersData[a]=((n={})[S]=T,n.centerOffset=T-O,n)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&M(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Q(t){return t.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(t){var n,i=t.popper,a=t.popperRect,l=t.placement,c=t.variation,p=t.offsets,d=t.position,f=t.gpuAcceleration,h=t.adaptive,g=t.roundOffsets,m=t.isFixed,v=p.x,y=void 0===v?0:v,b=p.y,_=void 0===b?0:b,w="function"==typeof g?g({x:y,y:_}):{x:y,y:_};y=w.x,_=w.y;var E=p.hasOwnProperty("x"),x=p.hasOwnProperty("y"),D=s,C=e,O=window;if(h){var T=U(i),N="clientHeight",A="clientWidth";T===S(i)&&"static"!==B(T=W(i)).position&&"absolute"===d&&(N="scrollHeight",A="scrollWidth"),T=T,(l===e||(l===s||l===r)&&c===u)&&(C=o,_-=(m&&O.visualViewport?O.visualViewport.height:T[N])-a.height,_*=f?1:-1),l!==s&&(l!==e&&l!==o||c!==u)||(D=r,y-=(m&&O.visualViewport?O.visualViewport.width:T[A])-a.width,y*=f?1:-1)}var R,k=Object.assign({position:d},h&&J),I=!0===g?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:P(e*i)/i||0,y:P(n*i)/i||0}}({x:y,y:_}):{x:y,y:_};return y=I.x,_=I.y,f?Object.assign({},k,((R={})[C]=x?"0":"",R[D]=E?"0":"",R.transform=(O.devicePixelRatio||1)<=1?"translate("+y+"px, "+_+"px)":"translate3d("+y+"px, "+_+"px, 0)",R)):Object.assign({},k,((n={})[C]=x?_+"px":"",n[D]=E?y+"px":"",n.transform="",n))}const tt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,s=void 0===r||r,a=n.roundOffsets,l=void 0===a||a,c={placement:I(e.placement),variation:Q(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Z(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Z(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var et={passive:!0};const nt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,o=i.scroll,r=void 0===o||o,s=i.resize,a=void 0===s||s,l=S(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&c.forEach((function(t){t.addEventListener("scroll",n.update,et)})),a&&l.addEventListener("resize",n.update,et),function(){r&&c.forEach((function(t){t.removeEventListener("scroll",n.update,et)})),a&&l.removeEventListener("resize",n.update,et)}},data:{}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var rt={start:"end",end:"start"};function st(t){return t.replace(/start|end/g,(function(t){return rt[t]}))}function at(t){var e=S(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function lt(t){return H(W(t)).left+at(t).scrollLeft}function ct(t){var e=B(t),n=e.overflow,i=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+i)}function ut(t){return["html","body","#document"].indexOf(T(t))>=0?t.ownerDocument.body:A(t)&&ct(t)?t:ut(G(t))}function pt(t,e){var n;void 0===e&&(e=[]);var i=ut(t),o=i===(null==(n=t.ownerDocument)?void 0:n.body),r=S(i),s=o?[r].concat(r.visualViewport||[],ct(i)?i:[]):i,a=e.concat(s);return o?a:a.concat(pt(G(s)))}function dt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ft(t,e){return e===d?dt(function(t){var e=S(t),n=W(t),i=e.visualViewport,o=n.clientWidth,r=n.clientHeight,s=0,a=0;return i&&(o=i.width,r=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=i.offsetLeft,a=i.offsetTop)),{width:o,height:r,x:s+lt(t),y:a}}(t)):N(e)?function(t){var e=H(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):dt(function(t){var e,n=W(t),i=at(t),o=null==(e=t.ownerDocument)?void 0:e.body,r=j(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=j(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-i.scrollLeft+lt(t),l=-i.scrollTop;return"rtl"===B(o||n).direction&&(a+=j(n.clientWidth,o?o.clientWidth:0)-r),{width:r,height:s,x:a,y:l}}(W(t)))}function ht(t){var n,i=t.reference,a=t.element,l=t.placement,p=l?I(l):null,d=l?Q(l):null,f=i.x+i.width/2-a.width/2,h=i.y+i.height/2-a.height/2;switch(p){case e:n={x:f,y:i.y-a.height};break;case o:n={x:f,y:i.y+i.height};break;case r:n={x:i.x+i.width,y:h};break;case s:n={x:i.x-a.width,y:h};break;default:n={x:i.x,y:i.y}}var g=p?z(p):null;if(null!=g){var m="y"===g?"height":"width";switch(d){case c:n[g]=n[g]-(i[m]/2-a[m]/2);break;case u:n[g]=n[g]+(i[m]/2-a[m]/2)}}return n}function gt(t,n){void 0===n&&(n={});var i=n,s=i.placement,a=void 0===s?t.placement:s,c=i.boundary,u=void 0===c?p:c,g=i.rootBoundary,m=void 0===g?d:g,v=i.elementContext,y=void 0===v?f:v,b=i.altBoundary,_=void 0!==b&&b,w=i.padding,E=void 0===w?0:w,x=K("number"!=typeof E?E:X(E,l)),D=y===f?h:f,C=t.rects.popper,O=t.elements[_?D:y],S=function(t,e,n){var i="clippingParents"===e?function(t){var e=pt(G(t)),n=["absolute","fixed"].indexOf(B(t).position)>=0&&A(t)?U(t):t;return N(n)?e.filter((function(t){return N(t)&&M(t,n)&&"body"!==T(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),r=o[0],s=o.reduce((function(e,n){var i=ft(t,n);return e.top=j(i.top,e.top),e.right=L(i.right,e.right),e.bottom=L(i.bottom,e.bottom),e.left=j(i.left,e.left),e}),ft(t,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(N(O)?O:O.contextElement||W(t.elements.popper),u,m),R=H(t.elements.reference),k=ht({reference:R,element:C,strategy:"absolute",placement:a}),I=dt(Object.assign({},C,k)),P=y===f?I:R,q={top:S.top-P.top+x.top,bottom:P.bottom-S.bottom+x.bottom,left:S.left-P.left+x.left,right:P.right-S.right+x.right},F=t.modifiersData.offset;if(y===f&&F){var $=F[a];Object.keys(q).forEach((function(t){var n=[r,o].indexOf(t)>=0?1:-1,i=[e,o].indexOf(t)>=0?"y":"x";q[t]+=$[i]*n}))}return q}const mt={name:"flip",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,u=t.name;if(!n.modifiersData[u]._skip){for(var p=i.mainAxis,d=void 0===p||p,f=i.altAxis,h=void 0===f||f,v=i.fallbackPlacements,y=i.padding,b=i.boundary,_=i.rootBoundary,w=i.altBoundary,E=i.flipVariations,x=void 0===E||E,D=i.allowedAutoPlacements,C=n.options.placement,O=I(C),T=v||(O!==C&&x?function(t){if(I(t)===a)return[];var e=ot(t);return[st(t),e,st(e)]}(C):[ot(C)]),S=[C].concat(T).reduce((function(t,e){return t.concat(I(e)===a?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,o=n.boundary,r=n.rootBoundary,s=n.padding,a=n.flipVariations,c=n.allowedAutoPlacements,u=void 0===c?m:c,p=Q(i),d=p?a?g:g.filter((function(t){return Q(t)===p})):l,f=d.filter((function(t){return u.indexOf(t)>=0}));0===f.length&&(f=d);var h=f.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:o,rootBoundary:r,padding:s})[I(n)],e}),{});return Object.keys(h).sort((function(t,e){return h[t]-h[e]}))}(n,{placement:e,boundary:b,rootBoundary:_,padding:y,flipVariations:x,allowedAutoPlacements:D}):e)}),[]),N=n.rects.reference,A=n.rects.popper,R=new Map,k=!0,j=S[0],L=0;L<S.length;L++){var P=S[L],H=I(P),q=Q(P)===c,M=[e,o].indexOf(H)>=0,B=M?"width":"height",F=gt(n,{placement:P,boundary:b,rootBoundary:_,altBoundary:w,padding:y}),W=M?q?r:s:q?o:e;N[B]>A[B]&&(W=ot(W));var G=ot(W),$=[];if(d&&$.push(F[H]<=0),h&&$.push(F[W]<=0,F[G]<=0),$.every((function(t){return t}))){j=P,k=!1;break}R.set(P,$)}if(k)for(var U=function(t){var e=S.find((function(e){var n=R.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return j=e,"break"},z=x?3:1;z>0&&"break"!==U(z);z--);n.placement!==j&&(n.modifiersData[u]._skip=!0,n.placement=j,n.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function vt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function yt(t){return[e,r,o,s].some((function(e){return t[e]>=0}))}const bt={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,o=e.rects.popper,r=e.modifiersData.preventOverflow,s=gt(e,{elementContext:"reference"}),a=gt(e,{altBoundary:!0}),l=vt(s,i),c=vt(a,o,r),u=yt(l),p=yt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:p},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":p})}},_t={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var n=t.state,i=t.options,o=t.name,a=i.offset,l=void 0===a?[0,0]:a,c=m.reduce((function(t,i){return t[i]=function(t,n,i){var o=I(t),a=[s,e].indexOf(o)>=0?-1:1,l="function"==typeof i?i(Object.assign({},n,{placement:t})):i,c=l[0],u=l[1];return c=c||0,u=(u||0)*a,[s,r].indexOf(o)>=0?{x:u,y:c}:{x:c,y:u}}(i,n.rects,l),t}),{}),u=c[n.placement],p=u.x,d=u.y;null!=n.modifiersData.popperOffsets&&(n.modifiersData.popperOffsets.x+=p,n.modifiersData.popperOffsets.y+=d),n.modifiersData[o]=c}},wt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=ht({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},Et={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var n=t.state,i=t.options,a=t.name,l=i.mainAxis,u=void 0===l||l,p=i.altAxis,d=void 0!==p&&p,f=i.boundary,h=i.rootBoundary,g=i.altBoundary,m=i.padding,v=i.tether,y=void 0===v||v,b=i.tetherOffset,_=void 0===b?0:b,w=gt(n,{boundary:f,rootBoundary:h,padding:m,altBoundary:g}),E=I(n.placement),x=Q(n.placement),D=!x,C=z(E),O="x"===C?"y":"x",T=n.modifiersData.popperOffsets,S=n.rects.reference,N=n.rects.popper,A="function"==typeof _?_(Object.assign({},n.rects,{placement:n.placement})):_,R="number"==typeof A?{mainAxis:A,altAxis:A}:Object.assign({mainAxis:0,altAxis:0},A),k=n.modifiersData.offset?n.modifiersData.offset[n.placement]:null,P={x:0,y:0};if(T){if(u){var H,M="y"===C?e:s,B="y"===C?o:r,F="y"===C?"height":"width",W=T[C],G=W+w[M],$=W-w[B],K=y?-N[F]/2:0,X=x===c?S[F]:N[F],Y=x===c?-N[F]:-S[F],J=n.elements.arrow,Z=y&&J?q(J):{width:0,height:0},tt=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[M],nt=tt[B],it=V(0,S[F],Z[F]),ot=D?S[F]/2-K-it-et-R.mainAxis:X-it-et-R.mainAxis,rt=D?-S[F]/2+K+it+nt+R.mainAxis:Y+it+nt+R.mainAxis,st=n.elements.arrow&&U(n.elements.arrow),at=st?"y"===C?st.clientTop||0:st.clientLeft||0:0,lt=null!=(H=null==k?void 0:k[C])?H:0,ct=W+rt-lt,ut=V(y?L(G,W+ot-lt-at):G,W,y?j($,ct):$);T[C]=ut,P[C]=ut-W}if(d){var pt,dt="x"===C?e:s,ft="x"===C?o:r,ht=T[O],mt="y"===O?"height":"width",vt=ht+w[dt],yt=ht-w[ft],bt=-1!==[e,s].indexOf(E),_t=null!=(pt=null==k?void 0:k[O])?pt:0,wt=bt?vt:ht-S[mt]-N[mt]-_t+R.altAxis,Et=bt?ht+S[mt]+N[mt]-_t-R.altAxis:yt,xt=y&&bt?function(t,e,n){var i=V(t,e,n);return i>n?n:i}(wt,ht,Et):V(y?wt:vt,ht,y?Et:yt);T[O]=xt,P[O]=xt-ht}n.modifiersData[a]=P}},requiresIfExists:["offset"]};function xt(t,e,n){void 0===n&&(n=!1);var i,o,r=A(e),s=A(e)&&function(t){var e=t.getBoundingClientRect(),n=P(e.width)/t.offsetWidth||1,i=P(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),a=W(e),l=H(t,s),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(r||!r&&!n)&&(("body"!==T(e)||ct(a))&&(c=(i=e)!==S(i)&&A(i)?{scrollLeft:(o=i).scrollLeft,scrollTop:o.scrollTop}:at(i)),A(e)?((u=H(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):a&&(u.x=lt(a))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function Dt(t){var e=new Map,n=new Set,i=[];function o(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&o(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||o(t)})),i}var Ct={placement:"bottom",modifiers:[],strategy:"absolute"};function Ot(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Tt(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,o=e.defaultOptions,r=void 0===o?Ct:o;return function(t,e,n){void 0===n&&(n=r);var o,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Ct,r),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,u={state:a,setOptions:function(n){var o="function"==typeof n?n(a.options):n;p(),a.options=Object.assign({},r,a.options,o),a.scrollParents={reference:N(t)?pt(t):t.contextElement?pt(t.contextElement):[],popper:pt(e)};var s,c,d=function(t){var e=Dt(t);return O.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((s=[].concat(i,a.options.modifiers),c=s.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return a.orderedModifiers=d.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var r=o({state:a,name:e,instance:u,options:i});l.push(r||function(){})}})),u.update()},forceUpdate:function(){if(!c){var t=a.elements,e=t.reference,n=t.popper;if(Ot(e,n)){a.rects={reference:xt(e,U(n),"fixed"===a.options.strategy),popper:q(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<a.orderedModifiers.length;i++)if(!0!==a.reset){var o=a.orderedModifiers[i],r=o.fn,s=o.options,l=void 0===s?{}:s,p=o.name;"function"==typeof r&&(a=r({state:a,options:l,name:p,instance:u})||a)}else a.reset=!1,i=-1}}},update:(o=function(){return new Promise((function(t){u.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){p(),c=!0}};if(!Ot(t,e))return u;function p(){l.forEach((function(t){return t()})),l=[]}return u.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var St=Tt(),Nt=Tt({defaultModifiers:[nt,wt,tt,k,_t,mt,Et,Y,bt]}),At=Tt({defaultModifiers:[nt,wt,tt,k]});const Rt="transitionend",kt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},It=t=>{const e=kt(t);return e&&document.querySelector(e)?e:null},jt=t=>{const e=kt(t);return e?document.querySelector(e):null},Lt=t=>{t.dispatchEvent(new Event(Rt))},Pt=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Ht=t=>Pt(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,qt=(t,e,n)=>{Object.keys(n).forEach((i=>{const o=n[i],r=e[i],s=r&&Pt(r)?"element":null==(a=r)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(o).test(s))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${s}" but expected type "${o}".`)}))},Mt=t=>!(!Pt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),Bt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Ft=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Ft(t.parentNode):null},Wt=()=>{},Gt=t=>{t.offsetHeight},$t=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Ut=[],zt=()=>"rtl"===document.documentElement.dir,Vt=t=>{var e;e=()=>{const e=$t();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Ut.length||document.addEventListener("DOMContentLoaded",(()=>{Ut.forEach((t=>t()))})),Ut.push(e)):e()},Kt=t=>{"function"==typeof t&&t()},Xt=(t,e,n=!0)=>{if(!n)return void Kt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),o=Number.parseFloat(n);return i||o?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let o=!1;const r=({target:n})=>{n===e&&(o=!0,e.removeEventListener(Rt,r),Kt(t))};e.addEventListener(Rt,r),setTimeout((()=>{o||Lt(e)}),i)},Yt=(t,e,n,i)=>{let o=t.indexOf(e);if(-1===o)return t[!n&&i?t.length-1:0];const r=t.length;return o+=n?1:-1,i&&(o=(o+r)%r),t[Math.max(0,Math.min(o,r-1))]},Qt=/[^.]*(?=\..*)\.|.*/,Jt=/\..*/,Zt=/::\d+$/,te={};let ee=1;const ne={mouseenter:"mouseover",mouseleave:"mouseout"},ie=/^(mouseenter|mouseleave)/i,oe=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function re(t,e){return e&&`${e}::${ee++}`||t.uidEvent||ee++}function se(t){const e=re(t);return t.uidEvent=e,te[e]=te[e]||{},te[e]}function ae(t,e,n=null){const i=Object.keys(t);for(let o=0,r=i.length;o<r;o++){const r=t[i[o]];if(r.originalHandler===e&&r.delegationSelector===n)return r}return null}function le(t,e,n){const i="string"==typeof e,o=i?n:e;let r=pe(t);return oe.has(r)||(r=t),[i,o,r]}function ce(t,e,n,i,o){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),ie.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[r,s,a]=le(e,n,i),l=se(t),c=l[a]||(l[a]={}),u=ae(c,s,r?n:null);if(u)return void(u.oneOff=u.oneOff&&o);const p=re(s,e.replace(Qt,"")),d=r?function(t,e,n){return function i(o){const r=t.querySelectorAll(e);for(let{target:s}=o;s&&s!==this;s=s.parentNode)for(let a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&de.off(t,o.type,e,n),n.apply(s,[o]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&de.off(t,i.type,e),e.apply(t,[i])}}(t,n);d.delegationSelector=r?n:null,d.originalHandler=s,d.oneOff=o,d.uidEvent=p,c[p]=d,t.addEventListener(a,d,r)}function ue(t,e,n,i,o){const r=ae(e[n],i,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent])}function pe(t){return t=t.replace(Jt,""),ne[t]||t}const de={on(t,e,n,i){ce(t,e,n,i,!1)},one(t,e,n,i){ce(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[o,r,s]=le(e,n,i),a=s!==e,l=se(t),c=e.startsWith(".");if(void 0!==r){if(!l||!l[s])return;return void ue(t,l,s,r,o?n:null)}c&&Object.keys(l).forEach((n=>{!function(t,e,n,i){const o=e[n]||{};Object.keys(o).forEach((r=>{if(r.includes(i)){const i=o[r];ue(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,l,n,e.slice(1))}));const u=l[s]||{};Object.keys(u).forEach((n=>{const i=n.replace(Zt,"");if(!a||e.includes(i)){const e=u[n];ue(t,l,s,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=$t(),o=pe(e),r=e!==o,s=oe.has(o);let a,l=!0,c=!0,u=!1,p=null;return r&&i&&(a=i.Event(e,n),i(t).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),u=a.isDefaultPrevented()),s?(p=document.createEvent("HTMLEvents"),p.initEvent(o,l,!0)):p=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(p,t,{get:()=>n[t]})})),u&&p.preventDefault(),c&&t.dispatchEvent(p),p.defaultPrevented&&void 0!==a&&a.preventDefault(),p}},fe=new Map,he={set(t,e,n){fe.has(t)||fe.set(t,new Map);const i=fe.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>fe.has(t)&&fe.get(t).get(e)||null,remove(t,e){if(!fe.has(t))return;const n=fe.get(t);n.delete(e),0===n.size&&fe.delete(t)}};class ge{constructor(t){(t=Ht(t))&&(this._element=t,he.set(this._element,this.constructor.DATA_KEY,this))}dispose(){he.remove(this._element,this.constructor.DATA_KEY),de.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Xt(t,e,n)}static getInstance(t){return he.get(Ht(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const me=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;de.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Bt(this))return;const o=jt(this)||this.closest(`.${i}`);t.getOrCreateInstance(o)[e]()}))};class ve extends ge{static get NAME(){return"alert"}close(){if(de.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),de.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=ve.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(ve,"close"),Vt(ve);const ye='[data-bs-toggle="button"]';class be extends ge{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function _e(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function we(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}de.on(document,"click.bs.button.data-api",ye,(t=>{t.preventDefault();const e=t.target.closest(ye);be.getOrCreateInstance(e).toggle()})),Vt(be);const Ee={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${we(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${we(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=_e(t.dataset[n])})),e},getDataAttribute:(t,e)=>_e(t.getAttribute(`data-bs-${we(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},xe={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!Bt(t)&&Mt(t)))}},De="carousel",Ce={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Oe={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Te="next",Se="prev",Ne="left",Ae="right",Re={ArrowLeft:Ae,ArrowRight:Ne},ke="slid.bs.carousel",Ie="active",je=".active.carousel-item";class Le extends ge{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=xe.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Ce}static get NAME(){return De}next(){this._slide(Te)}nextWhenVisible(){!document.hidden&&Mt(this._element)&&this.next()}prev(){this._slide(Se)}pause(t){t||(this._isPaused=!0),xe.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Lt(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=xe.findOne(je,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void de.one(this._element,ke,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Te:Se;this._slide(n,this._items[t])}_getConfig(t){return t={...Ce,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(De,t,Oe),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?Ae:Ne)}_addEventListeners(){this._config.keyboard&&de.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(de.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),de.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},n=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},i=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};xe.find(".carousel-item img",this._element).forEach((t=>{de.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(de.on(this._element,"pointerdown.bs.carousel",(t=>e(t))),de.on(this._element,"pointerup.bs.carousel",(t=>i(t))),this._element.classList.add("pointer-event")):(de.on(this._element,"touchstart.bs.carousel",(t=>e(t))),de.on(this._element,"touchmove.bs.carousel",(t=>n(t))),de.on(this._element,"touchend.bs.carousel",(t=>i(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Re[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?xe.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Te;return Yt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(xe.findOne(je,this._element));return de.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=xe.findOne(".active",this._indicatorsElement);e.classList.remove(Ie),e.removeAttribute("aria-current");const n=xe.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Ie),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||xe.findOne(je,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=xe.findOne(je,this._element),o=this._getItemIndex(i),r=e||this._getItemByOrder(n,i),s=this._getItemIndex(r),a=Boolean(this._interval),l=n===Te,c=l?"carousel-item-start":"carousel-item-end",u=l?"carousel-item-next":"carousel-item-prev",p=this._orderToDirection(n);if(r&&r.classList.contains(Ie))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(r,p).defaultPrevented)return;if(!i||!r)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(r),this._activeElement=r;const d=()=>{de.trigger(this._element,ke,{relatedTarget:r,direction:p,from:o,to:s})};if(this._element.classList.contains("slide")){r.classList.add(u),Gt(r),i.classList.add(c),r.classList.add(c);const t=()=>{r.classList.remove(c,u),r.classList.add(Ie),i.classList.remove(Ie,u,c),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Ie),r.classList.add(Ie),this._isSliding=!1,d();a&&this.cycle()}_directionToOrder(t){return[Ae,Ne].includes(t)?zt()?t===Ne?Se:Te:t===Ne?Te:Se:t}_orderToDirection(t){return[Te,Se].includes(t)?zt()?t===Se?Ne:Ae:t===Se?Ae:Ne:t}static carouselInterface(t,e){const n=Le.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const o="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof o){if(void 0===n[o])throw new TypeError(`No method named "${o}"`);n[o]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){Le.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=jt(this);if(!e||!e.classList.contains("carousel"))return;const n={...Ee.getDataAttributes(e),...Ee.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Le.carouselInterface(e,n),i&&Le.getInstance(e).to(i),t.preventDefault()}}de.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Le.dataApiClickHandler),de.on(window,"load.bs.carousel.data-api",(()=>{const t=xe.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Le.carouselInterface(t[e],Le.getInstance(t[e]))})),Vt(Le);const Pe="collapse",He={toggle:!0,parent:null},qe={toggle:"boolean",parent:"(null|element)"},Me="show",Be="collapse",Fe="collapsing",We="collapsed",Ge=":scope .collapse .collapse",$e='[data-bs-toggle="collapse"]';class Ue extends ge{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=xe.find($e);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=It(e),o=xe.find(i).filter((t=>t===this._element));null!==i&&o.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return He}static get NAME(){return Pe}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=xe.find(Ge,this._config.parent);e=xe.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((e=>!t.includes(e)))}const n=xe.findOne(this._selector);if(e.length){const i=e.find((t=>n!==t));if(t=i?Ue.getInstance(i):null,t&&t._isTransitioning)return}if(de.trigger(this._element,"show.bs.collapse").defaultPrevented)return;e.forEach((e=>{n!==e&&Ue.getOrCreateInstance(e,{toggle:!1}).hide(),t||he.set(e,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Be),this._element.classList.add(Fe),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Be,Me),this._element.style[i]="",de.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(de.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,Gt(this._element),this._element.classList.add(Fe),this._element.classList.remove(Be,Me);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=jt(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Fe),this._element.classList.add(Be),de.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(Me)}_getConfig(t){return(t={...He,...Ee.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=Ht(t.parent),qt(Pe,t,qe),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=xe.find(Ge,this._config.parent);xe.find($e,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=jt(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(We):t.classList.add(We),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=Ue.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}de.on(document,"click.bs.collapse.data-api",$e,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=It(this);xe.find(e).forEach((t=>{Ue.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),Vt(Ue);const ze="dropdown",Ve="Escape",Ke="Space",Xe="ArrowUp",Ye="ArrowDown",Qe=new RegExp("ArrowUp|ArrowDown|Escape"),Je="click.bs.dropdown.data-api",Ze="keydown.bs.dropdown.data-api",tn="show",en='[data-bs-toggle="dropdown"]',nn=".dropdown-menu",on=zt()?"top-end":"top-start",rn=zt()?"top-start":"top-end",sn=zt()?"bottom-end":"bottom-start",an=zt()?"bottom-start":"bottom-end",ln=zt()?"left-start":"right-start",cn=zt()?"right-start":"left-start",un={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},pn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class dn extends ge{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return un}static get DefaultType(){return pn}static get NAME(){return ze}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Bt(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(de.trigger(this._element,"show.bs.dropdown",t).defaultPrevented)return;const e=dn.getParentFromElement(this._element);this._inNavbar?Ee.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>de.on(t,"mouseover",Wt))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(tn),this._element.classList.add(tn),de.trigger(this._element,"shown.bs.dropdown",t)}hide(){if(Bt(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){de.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Wt))),this._popper&&this._popper.destroy(),this._menu.classList.remove(tn),this._element.classList.remove(tn),this._element.setAttribute("aria-expanded","false"),Ee.removeDataAttribute(this._menu,"popper"),de.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...Ee.getDataAttributes(this._element),...t},qt(ze,t,this.constructor.DefaultType),"object"==typeof t.reference&&!Pt(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${ze.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(e){if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let n=this._element;"parent"===this._config.reference?n=e:Pt(this._config.reference)?n=Ht(this._config.reference):"object"==typeof this._config.reference&&(n=this._config.reference);const i=this._getPopperConfig(),o=i.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=Nt(n,this._menu,i),o&&Ee.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(tn)}_getMenuElement(){return xe.next(this._element,nn)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return ln;if(t.classList.contains("dropstart"))return cn;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?rn:on:e?an:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=xe.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(Mt);n.length&&Yt(n,e,t===Ye,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=dn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=xe.find(en);for(let n=0,i=e.length;n<i;n++){const i=dn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const o={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(o.clickEvent=t)}i._completeHide(o)}}static getParentFromElement(t){return jt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Ke||t.key!==Ve&&(t.key!==Ye&&t.key!==Xe||t.target.closest(nn)):!Qe.test(t.key))return;const e=this.classList.contains(tn);if(!e&&t.key===Ve)return;if(t.preventDefault(),t.stopPropagation(),Bt(this))return;const n=this.matches(en)?this:xe.prev(this,en)[0],i=dn.getOrCreateInstance(n);if(t.key!==Ve)return t.key===Xe||t.key===Ye?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==Ke||dn.clearMenus());i.hide()}}de.on(document,Ze,en,dn.dataApiKeydownHandler),de.on(document,Ze,nn,dn.dataApiKeydownHandler),de.on(document,Je,dn.clearMenus),de.on(document,"keyup.bs.dropdown.data-api",dn.clearMenus),de.on(document,Je,en,(function(t){t.preventDefault(),dn.getOrCreateInstance(this).toggle()})),Vt(dn);const fn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",hn=".sticky-top";class gn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(fn,"paddingRight",(e=>e+t)),this._setElementAttributes(hn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const o=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(o))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(fn,"paddingRight"),this._resetElementAttributes(hn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&Ee.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=Ee.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(Ee.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){Pt(t)?e(t):xe.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const mn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},vn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",bn="mousedown.bs.backdrop";class _n{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&Gt(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Kt(t)}))):Kt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Kt(t)}))):Kt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...mn,..."object"==typeof t?t:{}}).rootElement=Ht(t.rootElement),qt("backdrop",t,vn),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),de.on(this._getElement(),bn,(()=>{Kt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(de.off(this._element,bn),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Xt(t,this._getElement(),this._config.isAnimated)}}const wn={trapElement:null,autofocus:!0},En={trapElement:"element",autofocus:"boolean"},xn=".bs.focustrap",Dn="backward";class Cn{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),de.off(document,xn),de.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),de.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,de.off(document,xn))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=xe.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===Dn?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Dn:"forward")}_getConfig(t){return t={...wn,..."object"==typeof t?t:{}},qt("focustrap",t,En),t}}const On="modal",Tn="Escape",Sn={backdrop:!0,keyboard:!0,focus:!0},Nn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},An="hidden.bs.modal",Rn="show.bs.modal",kn="resize.bs.modal",In="click.dismiss.bs.modal",jn="keydown.dismiss.bs.modal",Ln="mousedown.dismiss.bs.modal",Pn="modal-open",Hn="show",qn="modal-static";class Mn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=xe.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new gn}static get Default(){return Sn}static get NAME(){return On}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||de.trigger(this._element,Rn,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Pn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),de.on(this._dialog,Ln,(()=>{de.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(de.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Hn),de.off(this._element,In),de.off(this._dialog,Ln),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>de.off(t,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new _n({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_getConfig(t){return t={...Sn,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(On,t,Nn),t}_showElement(t){const e=this._isAnimated(),n=xe.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&Gt(this._element),this._element.classList.add(Hn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,de.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_setEscapeEvent(){this._isShown?de.on(this._element,jn,(t=>{this._config.keyboard&&t.key===Tn?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==Tn||this._triggerBackdropTransition()})):de.off(this._element,jn)}_setResizeEvent(){this._isShown?de.on(window,kn,(()=>this._adjustDialog())):de.off(window,kn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Pn),this._resetAdjustments(),this._scrollBar.reset(),de.trigger(this._element,An)}))}_showBackdrop(t){de.on(this._element,In,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(de.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(qn)||(i||(n.overflowY="hidden"),t.add(qn),this._queueCallback((()=>{t.remove(qn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!zt()||n&&!t&&zt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!zt()||!n&&t&&zt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=Mn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}de.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=jt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),de.one(e,Rn,(t=>{t.defaultPrevented||de.one(e,An,(()=>{Mt(this)&&this.focus()}))}));const n=xe.findOne(".modal.show");n&&Mn.getInstance(n).hide(),Mn.getOrCreateInstance(e).toggle(this)})),me(Mn),Vt(Mn);const Bn="offcanvas",Fn={backdrop:!0,keyboard:!0,scroll:!1},Wn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Gn="show",$n=".offcanvas.show",Un="hidden.bs.offcanvas";class zn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bn}static get Default(){return Fn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||de.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new gn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(Gn),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),de.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(de.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(Gn),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new gn).reset(),de.trigger(this._element,Un)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...Fn,...Ee.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Bn,t,Wn),t}_initializeBackDrop(){return new _n({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Cn({trapElement:this._element})}_addEventListeners(){de.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=zn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}de.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=jt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this))return;de.one(e,Un,(()=>{Mt(this)&&this.focus()}));const n=xe.findOne($n);n&&n!==e&&zn.getInstance(n).hide(),zn.getOrCreateInstance(e).toggle(this)})),de.on(window,"load.bs.offcanvas.data-api",(()=>xe.find($n).forEach((t=>zn.getOrCreateInstance(t).show())))),me(zn),Vt(zn);const Vn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Xn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Yn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Vn.has(n)||Boolean(Kn.test(t.nodeValue)||Xn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Qn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),o=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=o.length;t<n;t++){const n=o[t],i=n.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){n.remove();continue}const r=[].concat(...n.attributes),s=[].concat(e["*"]||[],e[i]||[]);r.forEach((t=>{Yn(t,s)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Jn="tooltip",Zn=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ei={AUTO:"auto",TOP:"top",RIGHT:zt()?"left":"right",BOTTOM:"bottom",LEFT:zt()?"right":"left"},ni={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ii={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ri="show",si="show",ai="out",li=".tooltip-inner",ci=".modal",ui="hide.bs.modal",pi="hover",di="focus";class fi extends ge{constructor(e,n){if(void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(n),this.tip=null,this._setListeners()}static get Default(){return ni}static get NAME(){return Jn}static get Event(){return ii}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(ri))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),de.off(this._element.closest(ci),ui,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=de.trigger(this._element,this.constructor.Event.SHOW),e=Ft(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(li).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),o=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME);i.setAttribute("id",o),this._element.setAttribute("aria-describedby",o),this._config.animation&&i.classList.add(oi);const r="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,s=this._getAttachment(r);this._addAttachmentClass(s);const{container:a}=this._config;he.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(i),de.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Nt(this._element,i,this._getPopperConfig(s)),i.classList.add(ri);const l=this._resolvePossibleFunction(this._config.customClass);l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{de.on(t,"mouseover",Wt)}));const c=this.tip.classList.contains(oi);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,de.trigger(this._element,this.constructor.Event.SHOWN),t===ai&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(de.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(ri),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>de.off(t,"mouseover",Wt))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),de.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(oi,ri),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),li)}_sanitizeAndSetContent(t,e,n){const i=xe.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return Pt(e)?(e=Ht(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Qn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return ei[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)de.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===pi?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===pi?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;de.on(this._element,e,this._config.selector,(t=>this._enter(t))),de.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},de.on(this._element.closest(ci),ui,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?di:pi]=!0),e.getTipElement().classList.contains(ri)||e._hoverState===si?e._hoverState=si:(clearTimeout(e._timeout),e._hoverState=si,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===si&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?di:pi]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ai,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===ai&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=Ee.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{Zn.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:Ht(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),qt(Jn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Qn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=fi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Vt(fi);const hi={...fi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...fi.DefaultType,content:"(string|element|function)"},mi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class vi extends fi{static get Default(){return hi}static get NAME(){return"popover"}static get Event(){return mi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(t){return this.each((function(){const e=vi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Vt(vi);const yi="scrollspy",bi={offset:10,method:"auto",target:""},_i={offset:"number",method:"string",target:"(string|element)"},wi="active",Ei=".nav-link, .list-group-item, .dropdown-item",xi="position";class Di extends ge{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,de.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return bi}static get NAME(){return yi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":xi,e="auto"===this._config.method?t:this._config.method,n=e===xi?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),xe.find(Ei,this._config.target).map((t=>{const i=It(t),o=i?xe.findOne(i):null;if(o){const t=o.getBoundingClientRect();if(t.width||t.height)return[Ee[e](o).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){de.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){return(t={...bi,...Ee.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=Ht(t.target)||document.documentElement,qt(yi,t,_i),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=Ei.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=xe.findOne(e.join(","),this._config.target);n.classList.add(wi),n.classList.contains("dropdown-item")?xe.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(wi):xe.parents(n,".nav, .list-group").forEach((t=>{xe.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(wi))),xe.prev(t,".nav-item").forEach((t=>{xe.children(t,".nav-link").forEach((t=>t.classList.add(wi)))}))})),de.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){xe.find(Ei,this._config.target).filter((t=>t.classList.contains(wi))).forEach((t=>t.classList.remove(wi)))}static jQueryInterface(t){return this.each((function(){const e=Di.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(window,"load.bs.scrollspy.data-api",(()=>{xe.find('[data-bs-spy="scroll"]').forEach((t=>new Di(t)))})),Vt(Di);const Ci="active",Oi="fade",Ti="show",Si=".active",Ni=":scope > li > .active";class Ai extends ge{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ci))return;let t;const e=jt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Ni:Si;t=xe.find(e,n),t=t[t.length-1]}const i=t?de.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(de.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const o=()=>{de.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),de.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,o):o()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?xe.children(e,Si):xe.find(Ni,e))[0],o=n&&i&&i.classList.contains(Oi),r=()=>this._transitionComplete(t,i,n);i&&o?(i.classList.remove(Ti),this._queueCallback(r,t,!0)):r()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ci);const t=xe.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ci),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ci),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),Gt(t),t.classList.contains(Oi)&&t.classList.add(Ti);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&xe.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ci))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=Ai.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}de.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this)||Ai.getOrCreateInstance(this).show()})),Vt(Ai);const Ri="toast",ki="hide",Ii="show",ji="showing",Li={animation:"boolean",autohide:"boolean",delay:"number"},Pi={animation:!0,autohide:!0,delay:5e3};class Hi extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Li}static get Default(){return Pi}static get NAME(){return Ri}show(){de.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ki),Gt(this._element),this._element.classList.add(Ii),this._element.classList.add(ji),this._queueCallback((()=>{this._element.classList.remove(ji),de.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Ii)&&(de.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(ji),this._queueCallback((()=>{this._element.classList.add(ki),this._element.classList.remove(ji),this._element.classList.remove(Ii),de.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Ii)&&this._element.classList.remove(Ii),super.dispose()}_getConfig(t){return t={...Pi,...Ee.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},qt(Ri,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){de.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),de.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),de.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}me(Hi),Vt(Hi);var qi,Mi=n(755),Bi=function(){return Bi=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},Bi.apply(this,arguments)},Fi=new(function(){function t(){}return t.prototype.get=function(t){var e=document.cookie.match("(?:(?:^|.*; *)".concat(t," *= *([^;]*).*$)|^.*$"))[1];if(e)return decodeURIComponent(e)},t.prototype.set=function(t,e,n){void 0===n&&(n={}),n.days&&(n["max-age"]=60*n.days*60*24,delete n.days),n=Object.entries(n).reduce((function(t,e){var n=e[0],i=e[1];return"".concat(t,"; ").concat(n,"=").concat(i)}),""),document.cookie=t+"="+encodeURIComponent(e)+n},t.prototype.delete=function(t,e){this.set(t,"",Bi({"max-age":-1},e))},t.prototype.getJSON=function(t){var e=this.get(t);return e?JSON.parse(e):""},t.prototype.setJSON=function(t,e,n){this.set(t,JSON.stringify(e),n)},t}()),Wi=function(){function t(){}return t.COL_SORTING="COL_SORTING",t.COL_RESIZED="COL_RESIZED",t.COL_SHOW_HIDE="COL_SHOW_HIDE",t.COL_REORDER="COL_REORDER",t}(),Gi=function(){function t(){}return t.GRID_DATA="GRID_DATA",t.ON_NEXT_RECORD="ON_NEXT_RECORD",t.ON_PREV_RECORD="ON_PREV_RECORD",t.ON_SAVE_RECORD="ON_SAVE_RECORD",t.ON_DELETE_RECORD="ON_DELETE_RECORD",t.ON_LAST_RECORD="ON_LAST_RECORD",t.ON_FIRST_RECORD="ON_FIRST_RECORD",t.ON_ADD_RECORD="ON_ADD_RECORD",t.ON_FETCH_RECORD="ON_FETCH_RECORD",t.ON_FETCH_RECORD_ERROR="ON_FETCH_RECORD_ERROR",t.ON_FETCH_GRID_RECORD="ON_FETCH_GRID_RECORD",t.ON_FETCH_GRID_RECORD_ERROR="ON_FETCH_GRID_RECORD_ERROR",t.ON_NAVIGATING_RECORD="ON_NAVIGATING_RECORD",t.ON_GRID_UPDATED="ON_GRID_UPDATED",t.ON_SAVE_ERROR="ON_SAVE_ERROR",t.ON_SORTING_REQUESTED="ON_SORTING_REQUESTED",t.ON_COLS_REORDERED="ON_COLS_REORDERED",t.ON_GRID_DATA_BOUND="ON_GRID_DATA_BOUND",t.ON_GRID_CONFIG_UPDATED="ON_GRID_CONFIG_UPDATED",t.ON_PAGE_READY="ON_PAGE_READY",t.ON_ROW_UPDATED="ON_ROW_UPDATED",t.ON_FIELD_UPDATED="ON_FIELD_UPDATED",t.ON_ROW_DOUBLE_CLICKED="ON_ROW_DOUBLE_CLICKED",t}(),$i=new(function(){function t(){this.callbacks=[],this.registerWinPopState()}return t.prototype.registerWinPopState=function(){var t=this;window.onpopstate=function(e){if(e.state&&e.state.eventData){console.log(e.state);var n={EventData:e.state.eventData,SkipPush:!0,DataSourceName:""};t.Emit(Gi.ON_FETCH_RECORD,window,n)}}},t.prototype.Emit=function(t,e,n){if(t)try{this.callbacks.forEach((function(i){i.EventName!==t||i.DataSourceName!==n.DataSourceName&&!0===i.VerifyDataSourceName||i.Callback(e,n)}))}catch(t){console.error(t)}},t.prototype.Unsubscribe=function(t){var e=this.callbacks.filter((function(e){return!(e.Key===t.Key||e.EventName===t.EventName||e.DataSourceName===t.DataSourceName)}));this.callbacks=e},t.prototype.Subscribe=function(t){t.EventName&&this.callbacks.push(t)},t}()),Ui=function(){function t(){console.log("Session storage is initialized")}return t.prototype.addItem=function(t,e,n){var i={value:e,type:"prem",expiry:n.getTime()};"object"==typeof e&&void 0!==e&&(i.type="object"),sessionStorage.setItem(t,JSON.stringify(i))},t.prototype.appendItem=function(t,e){try{var n=this.getItemRaw(t);if(n){var i=e(n.value);this.addItem(t,i,new Date(n.expiry))}}catch(t){console.error(t)}},t.prototype.createExpiryKey=function(t){return t+"-expiry"},t.prototype.getItemRaw=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?(this.removeItem(t),void console.log("entry expired, will be removed",n)):n}return null},t.prototype.getItem=function(t){var e=sessionStorage.getItem(t);if(e){var n=JSON.parse(e),i=n.expiry;return Date.now()>parseInt(i)?void this.removeItem(t):n.value}return null},t.prototype.removeItem=function(t){sessionStorage.removeItem(t)},t.prototype.removeAll=function(t){if(t){var e=sessionStorage.length;if(!(e<=0)){for(var n=[],i=0;i<e;i++)(o=sessionStorage.key(i)).startsWith(t)&&n.push(o);for(i=0;i<n.length;i++){var o=n[i];sessionStorage.removeItem(o)}}}else sessionStorage.removeAll()},t}(),zi=new(function(){function t(){}return t.prototype.Add=function(t){this.DataTables.push(t)},t.prototype.GetAll=function(){var t=[];return this.DataTables.forEach((function(e){if(!e.isReadOnly){var n={DataSourceName:e.dataSourceName,Data:e.records};t.push(n)}})),t},t.prototype.GetByDSName=function(t){var e=this.DataTables.find((function(e){return e.dataSourceName===t}));if(e)return{DataSourceName:e.dataSourceName,Data:e.records}},t}()),Vi=function(){function t(){this.jquery=Mi,this.children=[],this.appDataEvents=Gi,this.appActions=Wi}return t.prototype.notifyListeners=function(t,e){$i.Emit(t,this,e)},t.prototype.getGridSettings=function(t){try{return Fi.getJSON(t)}catch(t){return void console.log(t)}},Object.defineProperty(t.prototype,"dataSourceName",{get:function(){return this._dataSourceName},set:function(t){this._dataSourceName=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isReadOnly",{get:function(){return this._isReadOnly},set:function(t){this._isReadOnly=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"records",{get:function(){return[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.element.css("width")},set:function(t){this.element.css("width",t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{get:function(){return this.element.is(":visible")},set:function(t){!1===t?this.element.hide():this.element.show()},enumerable:!1,configurable:!0}),t.prototype.getCss=function(t){return this.element.css(t)},t.prototype.setCss=function(t,e){this.element.css(t,e)},Object.defineProperty(t.prototype,"css",{set:function(t){this.element.css(t)},enumerable:!1,configurable:!0}),t.prototype.props=function(t){var e=this;t.forEach((function(t){return e.prop(t.key,t.value)}))},t.prototype.prop=function(t,e){return this.element.attr(t,e)},t.prototype.getProp=function(t){return this.element.attr(t)},t.prototype.find=function(t){return this.element.find(t)},t.prototype.addClass=function(t){return this.element.addClass(t),this},t.prototype.removeClass=function(t){return this.element.removeClass(t),this},t.prototype.hasClass=function(t){return this.element.hasClass(t)},t.prototype.setText=function(t){return this.element.text(t),this},t.prototype.getText=function(){return this.element.text()},t.prototype.append=function(t,e){return void 0===e&&(e=!0),e&&this.children.push(t),this.element.append(t.element),this},t.prototype.focus=function(){this.element.focus()},t.prototype.isEmptyObj=function(t){return 0===Object.keys(t).length},Object.defineProperty(t.prototype,"id",{get:function(){return this.getProp("id")},set:function(t){this.prop("id",t)},enumerable:!1,configurable:!0}),t.prototype.clone=function(){var e=new t,n=this.element[0].cloneNode();if(n instanceof HTMLElement&&(e.element=this.jquery(n)),this.children.length>0){var i=this.children.map((function(t){var n=t.clone();return e.element.append(n.element),n}));e.children=i}return e},t.prototype.shClone=function(t){return t?Object.assign(Object.create(Object.getPrototypeOf(t)),t):t},t}(),Ki=(n(661),function(t,e,n){void 0===n&&(n=!1),this.text=t,this.value=e,this.isSelected=n}),Xi=function(t,e,n,i,o,r,s,a,l,c){this.Name=t,this.DataType=e,this.Width=n,this.PropName=i,this.IsKey=o,this.DataSource=r,this.ColSpan=s,this.RowSpan=a,this.SelectorDataCB=l,this.SelectorCols=c},Yi=function(t,e,n,i,o){void 0===i&&(i=function(t){}),void 0===o&&(o=void 0),this.name=t,this.data=e,this.isRemote=n,this.url=i,this.getPageOfflineCB=o},Qi=function(t,e,n,i,o){void 0===o&&(o=!1),this.gridId=t,this.containerId=e,this.colDefinition=n,this.dataSource=i,this.isReadonly=o,this.enableInfiniteScroll=!0,this.cacheResponses=!1},Ji=function(t,e,n){void 0===t&&(t=1),void 0===e&&(e=10),void 0===n&&(n=10),this.pageIndex=t,this.pageSize=!e||e<=0?10:e,this.totalRecords=n,this.totalPages=Math.ceil(this.totalRecords/this.pageSize)},Zi=function(t,e,n){void 0===n&&(n=function(t){}),this.dsName=t,this.pagingMetaData=e,this.nextPageCallback=n},to=function(t,e,n,i){void 0===n&&(n=void 0),void 0===i&&(i=void 0),this.url=t,this.method=e,this.headers=n,this.recordId=i},eo=function(t,e,n,i){this.width=t,this.visible=e,this.sort=n,this.position=i},no=(qi=function(t,e){return qi=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},qi(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}qi(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),io=function(t){function e(e,n){void 0===n&&(n=!1);var i=t.call(this)||this;return i.options=e||new Xi,i.isHeader=n,i.render(),i}return no(e,t),e.prototype.render=function(){var t=this.options?this.options.RowSpan:void 0,e=this.options?this.options.ColSpan:void 0;this.element=!0===this.isHeader?this.jquery("<th class='sorting ds-col'></th>"):this.jquery("<td></td>"),t&&this.element.attr("rowSpan",t),e&&this.element.attr("colSpan",e)},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options),this.isHeader);return i.children=n.children,i.element=n.element,i},e}(Vi),oo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ro=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n}return oo(e,t),e.prototype.render=function(){"select"===this.options.InputType&&(this.element=this.jquery("<select></select>")),"button"===this.options.InputType?this.element=this.jquery('<button class="btn btn-outline-primary" type="button"></button>'):this.element=this.jquery("<input type='".concat(this.options.InputType,"' /> "))},Object.defineProperty(e.prototype,"val",{get:function(){return"date"===this.options.InputType&&this.element.val()?new Date(this.element.val().toString()).toString():this.element.val()},set:function(t){this.element.val(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valExt",{set:function(t){this.element.val(t),this.element.change()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"modelName",{get:function(){return this.getProp("data-propname")},set:function(t){this.prop("data-propname",t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"readonly",{get:function(){return this.element.is("readonly")},set:function(t){var e=!0===t?"true":"false";this.element.attr("readonly",e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this.element.is("disabled")},set:function(t){var e=!0===t?"true":"false";this.element.attr("disabled",e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isKey",{get:function(){return"true"===this.getProp("data-keycolumn")},set:function(t){this.prop("data-keycolumn",t)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return t.prototype.clone.call(this)},e.prototype.addDoubleClickEvent=function(){var t=this;this.element.on("dblclick",(function(e){t.notifyListeners(t.appDataEvents.ON_ROW_DOUBLE_CLICKED,{EventData:{Event:e},DataSourceName:t.options.DataSourceName})}))},e.prototype.change=function(){this.element.change()},e}(Vi),so=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ao=function(t){function e(e){var n=this,i={DataSourceName:e,InputType:"checkbox"};return(n=t.call(this,i)||this).render(),n}return so(e,t),Object.defineProperty(e.prototype,"val",{get:function(){return!0===this.element.is(":checked")?"true":"false"},set:function(t){this.element.val(t)},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},e}(ro),lo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),co=function(t){function e(e,n){var i=t.call(this)||this;return i.appDataEvents=Gi,i.sessionStorage=e,i.dataSourceName=n,i.cacheResponses=!1,i}return lo(e,t),e.prototype.get=function(t){var e=this,n=e.cacheResponses;if(!0===n){var i=JSON.stringify(t),o=this.sessionStorage.getItem(i);if(o)return void e.notifyResponse(o)}var r={url:t.url,method:"GET",headers:t.headers?t.headers:{}};this.jquery.ajax(r).then((function(t){!0===n&&e.sessionStorage.addItem(i,t,new Date(Date.now()+6e5)),e.notifyResponse(t)}),(function(n){e.nofifyError(n,t)}))},e.prototype.notifyResponse=function(t){this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,{DataSourceName:this.dataSourceName,EventData:{Event:t}})},e.prototype.nofifyError=function(t,e){var n={DataSourceName:this.dataSourceName,EventData:{Event:t,RecordId:e.recordId}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD_ERROR,n)},e}(Vi),uo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),po=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.listId="pg_list_".concat(n.options.dsName),n.containerId="pg_container_".concat(n.options.dsName),n}return uo(e,t),e.prototype.render=function(){var t=this;this.element&&this.element.remove(),this.element=this.jquery('<div class="bs-pagination" id="'.concat(this.containerId,'">\n                        <nav aria-label="Page navigation">\n                            \n                        </nav>\n                    </div>'));for(var e=this.jquery('<ul class="pagination justify-content-end" id="'.concat(this.listId,'"></ul>')),n=1;n<=this.options.pagingMetaData.totalPages&&n<=5;n++){var i=this.jquery('<li class="page-item"></li>'),o=this.jquery('<a class="page-link" href="#" data-p-index="'.concat(n,'">').concat(n,"</a>"));i.append(o),e.append(i),o.on("click",(function(e){e.preventDefault();var n=t.jquery(e.target).attr("data-p-index");t.options.nextPageCallback&&t.options.nextPageCallback(parseInt(n))}))}this.element.find("nav").append(e)},e.prototype.clear=function(){this.jquery("#"+this.listId).children("li").remove()},e}(Vi),fo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ho=function(t){function e(e){var n=t.call(this)||this;return n.gridElement=e.gridElement,n.httpClient=e.httpClient,n.s_area=null,n.observer=null,n.target=null,n.currentPage=1,n.initData=null,n.initMetaData=null,n.nextPageCallback=null,n}return fo(e,t),e.prototype.observerCB=function(t,e){!0===t[0].isIntersecting&&this.currentPage<this.initMetaData.totalPages&&(console.log("Infinite scroll: fetching next page#: ",this.currentPage+1),this.currentPage++,this.nextPageCallback(this.currentPage))},e.prototype.observe=function(t){this.target=t,this.observer.observe(t)},e.prototype.unobserve=function(){this.observer.unobserve(this.target)},e.prototype.enable=function(){var t=this;this.s_area="scroll_area_"+this.gridElement.attr("id");var e=this.jquery('<div class="row bs-scroll" id="'.concat(this.s_area,'" style="max-height: 200px; overflow-y: auto"></div>'));this.gridElement.wrap(e);var n={root:this.jquery("#".concat(this.s_area))[0],rootMargin:"0px",threshold:.3,trackVisibility:!1};this.observer=new IntersectionObserver((function(e,n){return t.observerCB(e,n)}),n);var i=this.gridElement.find("tr"),o=i[i.length-1];this.observe(o)},e}(Vi),go=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),mo=function(t){function e(){var e=t.call(this)||this;return e.items=[],e}return go(e,t),e.prototype.add=function(t){this.find(t.options.propName)||this.items.push(t)},e.prototype.findSelector=function(t){return this.items.find((function(e){return e.options.propName===t}))},e}(Vi),vo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),yo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return vo(e,t),e.prototype.render=function(){this.element=this.jquery('<i class="bi bi-caret-right row-marker"></i>')},e.prototype.clone=function(){return t.prototype.clone.call(this)},e}(Vi),bo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),_o=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return bo(e,t),e.prototype.render=function(){this.element=this.jquery('<div class="row actions-container"></div>')},e.prototype.addDeleteAction=function(t){var e=this.jquery('<button type="button" class="btn btn-sm btn-outline-danger grid-toolbar-action" \n                                    id="btnDeleteRow_'.concat(this.dataSourceName,'"><i class="bi bi-trash"></i>\n                                </button>'));return e.on("click",t),this.element.append(e),this},e.prototype.addNewRecordAction=function(t){var e=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    id="btnAddRow_'.concat(this.dataSourceName,'"><i class="bi bi-plus-circle"></i>\n                                </button>\''));return e.on("click",t),this.element.append(e),this},e.prototype.addGridSettingsAction=function(){var t=this.jquery('<button type="button" class="btn btn-sm btn-outline-primary grid-toolbar-action" \n                                    data-bs-toggle="modal" data-bs-target="#staticBackdrop_'.concat(this.dataSourceName,'" \n                                    id="btnSettings_').concat(this.dataSourceName,'"><i class="bi bi-gear"></i>\n                                </button>'));return this.element.append(t),this},e}(Vi),wo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Eo=function(t){function e(e,n){void 0===n&&(n="text");var i=this,o={DataSourceName:e,InputType:n};return(i=t.call(this,o)||this).render(),i}return wo(e,t),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,i.addDoubleClickEvent(),i},e}(ro),xo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Do=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.render(),n}return xo(e,t),e.prototype.render=function(){this.element=this.jquery("<option></option>"),this.element.val(this.options.value),this.element.text(this.options.text),this.options.isSelected&&this.element.attr("selected","selected")},e.prototype.clone=function(){var e=t.prototype.clone.call(this);return e.setText(this.element.text()),e},e}(Vi),Co=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Oo=function(t){function e(e){var n=this,i={DataSourceName:e,InputType:"select"};return(n=t.call(this,i)||this).render(),n}return Co(e,t),Object.defineProperty(e.prototype,"val",{get:function(){return this.element.val()},set:function(t){this.element.val(t),this.element.change()},enumerable:!1,configurable:!0}),e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.element=n.element,i.children=n.children,this.addDoubleClickEvent(),i},e}(ro),To=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),So=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return To(e,t),e.prototype.render=function(){t.prototype.render.call(this);var e=this.options.Icon?'<i class="bi bi-'.concat(this.options.Icon,'"></i>'):"";this.element.append(e),this.options.Handler&&this.addClickHandler()},e.prototype.addClickHandler=function(){var t=this;this.element.on("click",(function(e){return t.options.Handler(e)}))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(ro),No=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Ao=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return No(e,t),e.prototype.onItemSelected=function(t,e){console.log("row selected",t.grid.body.getSelectedRow());var n=t.grid.body.getSelectedRow().getInputs().find((function(t){return t.isKey}));n&&(this.txtElement.val=n.val,this.txtElement.change()),t.selectorModal.hide()},e.prototype.render=function(){var t=this;this.txtElement=new Eo(this.options.DataSourceName),this.txtElement.addClass(this.options.CssClass).props([{key:"id",value:this.options.ElementId},{key:"placeHolder",value:this.options.PlaceHolder},{key:"data-propname",value:this.options.PropName}]),this.btnElement=new So({InputType:"button",DataSourceName:this.options.DataSourceName,Icon:"search",Handler:function(e){return t.options.BtnClick(t,e)}});var e=this.jquery('<div class="input-group input-group-sm"></div>');this.element=e.append(this.txtElement.element).append(this.btnElement.element)},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=new e(this.shClone(this.options));return i.children=n.children,i},e}(ro),Ro=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),ko=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.parentContainerId=n.options.containerId,n.modalId="".concat(n.parentContainerId,"_bs_").concat(n.options.propName),n.modalTitleId="".concat(n.parentContainerId,"_lbs_").concat(n.options.propName),n.containerId="".concat(n.parentContainerId,"_cbs_").concat(n.options.propName),n.gridId="".concat(n.parentContainerId,"_g_").concat(n.options.propName),n.render(),n.grid=n.renderGrid(),n.onItemSelected=function(t,e){console.log()},n}return Ro(e,t),e.prototype.render=function(){var t=this,e=this.jquery("#"+this.parentContainerId).find("#"+this.modalId);if(e&&1===e.length)this.element=e,this.selectorModal=Mn.getOrCreateInstance(e[0]);else{var n='<div class="modal" id="'.concat(this.modalId,'">\n                        <div class="modal-dialog modal-dialog-scrollable">\n                            <div class="modal-content">\n                                <div class="modal-header">\n                                    <h5 class="modal-title" id="').concat(this.modalTitleId,'">Select a value</h5>\n                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                                </div>\n                                <div class="modal-body">\n                                    <div id="').concat(this.containerId,'">\n\n                                    </div>\n                                </div>\n                                <div class="modal-footer">\n                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                                </div>\n                            </div>\n                        </div>\n                </div>');this.element=this.jquery(n),this.jquery("#"+this.parentContainerId).append(this.element),this.selectorModal=new Mn(this.element[0]),this.element[0].addEventListener("shown.bs.modal",(function(e){t.grid.clearGrid(),t.grid.infiniteScroller.currentPage=1,t.grid.fetchGridPage(1)}))}},e.prototype.show=function(){this.selectorModal.show()},e.prototype.renderGrid=function(){var t=new Yi("bsSelector",{initData:[],metaData:void 0},!0,this.options.urlCb),e=new Qi(this.gridId,this.containerId,this.options.gridCols,t,!0),n=new Go(e);return n.registerCallbacks(),n.removeHandler(this.appDataEvents.GRID_DATA),n.removeHandler(this.appDataEvents.ON_ADD_RECORD),n.removeHandler(this.appDataEvents.ON_FETCH_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_RECORD),n.removeHandler(this.appDataEvents.ON_SAVE_ERROR),n.render(),n.gridActions.visible=!1,n},e}(Vi),Io=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),jo=function(t){function e(e){var n=t.call(this)||this;return n.cells=[],n.options=e,n.render(),n}return Io(e,t),Object.defineProperty(e.prototype,"rowCategory",{get:function(){return this.element.prop("data-rowcategory")},set:function(t){this.element.prop("data-rowcategory",t)},enumerable:!1,configurable:!0}),e.prototype.addCell=function(t){this.element.append(t.element),this.cells.push(t)},e.prototype.addCells=function(t){var e=this;t.forEach((function(t){return e.addCell(t)}))},e.prototype.render=function(){this.element||(this.element=this.jquery("<tr></tr>"))},e.prototype.clone=function(){var n=t.prototype.clone.call(this),i=this.shClone(this.options);i.isTemplateRow=!1;var o=new e(i);return o.element=n.element,o.children=n.children,o.cells=this.cells.map((function(t){var e=t.clone();return o.element.append(e.element),e})),o},e.prototype.focusRow=function(){this.removeClass("table-active").addClass("table-active")},e.prototype.getInputs=function(){var t=[];return this.cells.forEach((function(e,n){var i=e.children;i.length>0&&i.forEach((function(e,n){e instanceof Ao?t.push(e.txtElement):e instanceof ro&&t.push(e)}))})),t},e.prototype.createInputFor=function(t,e){var n=this,i=this.options.dataSourceName,o=this.options.gridId,r=null;if("select"===t.DataType)r=new Oo(i),t.DataSource.forEach((function(t){return r.append(new Do(t))})),r.addClass("form-select form-select-sm");else if("checkbox"===t.DataType)r=new ao(i);else if("selector"===t.DataType){var s=new ko({propName:t.PropName,containerId:this.options.containerId,urlCb:t.SelectorDataCB,gridCols:t.SelectorCols});e.selectors.add(s),r=new Ao({DataSourceName:i,PropName:t.PropName,BtnId:"btn_"+o+"_template_row_"+t.PropName,CssClass:"form-control form-control-sm",ElementId:o+"_template_row_"+t.PropName,InputType:"text",PlaceHolder:t.Name,BtnClick:function(t,e){s.grid.removeHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED),s.grid.addHandler(n.appDataEvents.ON_ROW_DOUBLE_CLICKED,(function(e,n){return t.onItemSelected(s,n)})),s.show()}})}else(r=new Eo(i,t.DataType)).addClass("form-control form-control-sm");"selector"!==t.DataType&&r.props([{key:"data-propname",value:t.PropName},{key:"title",value:t.Name},{key:"id",value:o+"_template_row_"+t.PropName},{key:"placeholder",value:t.Name}]),!0===t.IsKey&&(r.readonly=!0,r.isKey=!0),!0===e.options.isReadonly&&(r.readonly=!0,r.setCss("cursor","pointer"),r.setCss("user-select","none"));var a=new io(new Xi);return a.append(r),a},e.prototype.createHeaderFor=function(t){var e=new io(t,!0);return e.addClass("sorting").addClass("ds-col"),e.setText(t.Name),e.prop("data-th-propname",t.PropName),e},e.prototype.getVisibleInputs=function(){return this.getInputs().filter((function(t){return!0===t.visible}))},e.prototype.getRowDataExt=function(){var t=this.getInputs(),e={};return t.forEach((function(t,n){var i=t.modelName;e[i]=t})),e},e.prototype.getRowIndex=function(){var t=this.getProp("data-rowindex");return parseInt(t)},e.prototype.getRowData=function(){var t=this.getInputs(),e=this.getRowIndex(),n={},i=this.rowCategory;return n.rowCategory=i,t.forEach((function(t,e){var i=t.modelName;n[i]=t.val})),n.clientRowNumber=e,n},e.prototype.isRowDirty=function(){return"true"===this.getProp("data-isdirty")},e}(Vi),Lo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Po=function(t){function e(){var e=t.call(this)||this;return e.rows=[],e}return Lo(e,t),e.prototype.addRow=function(t){this.element.append(t.element);var e=this.getNextRowIndex();t.prop("data-rowindex",e);var n=!0===t.options.gridHeader?"head":"data";return t.prop("id","".concat(t.options.gridId,"_").concat(n,"_").concat(e)),this.rows.push(t),this},e.prototype.getVisibleRows=function(){return this.rows.filter((function(t){return!0===t.visible}))},e.prototype.getNextRowIndex=function(){return this.rows.length+1},e.prototype.getGridTitlesRow=function(){return this.rows.find((function(t){return!0===t.options.gridHeader}))},e}(Vi),Ho=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),qo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return Ho(e,t),e.prototype.render=function(){this.element=this.jquery('<thead class="table-light"></thead>')},e}(Po),Mo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Bo=function(t){function e(){var e=t.call(this)||this;return e.render(),e}return Mo(e,t),e.prototype.render=function(){this.element=this.jquery("<tbody></tbody>")},e.prototype.rowSiblings=function(t){return this.rows.filter((function(e,n){if(e!==t)return e}))},e.prototype.focusRow=function(t){t.removeClass("table-active").addClass("table-active"),this.rowSiblings(t).forEach((function(t,e){return t.removeClass("table-active")}))},e.prototype.getTemplateRow=function(){var t=this.rows.filter((function(t){if(!0===t.options.isTemplateRow)return t}));if(t&&t.length>0)return t[0]},e.prototype.getDirtyRows=function(){return this.rows.filter((function(t,e){return t.isRowDirty()}))},e.prototype.getDirtyRecords=function(){var t=this.getDirtyRows();if(0===t.length)return[];var e=[];return t.forEach((function(t,n){e.push(t.getRowData())})),e},e.prototype.getSelectedRow=function(){return this.rows.find((function(t,e){return t.hasClass("table-active")}))},e.prototype.markDeleted=function(){var t=this.getSelectedRow();if(t){var e=this.rowSiblings(t),n=e[e.length-1];t.removeClass("table-active"),t.prop("data-isdirty","true"),t.css={display:"none"};var i=t.rowCategory;t.rowCategory="ADDED"===i?"ADDED_DELETED":"DELETED",this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,{DataSourceName:t.options.dataSourceName,EventData:{Event:t}}),this.focusRow(n)}},e.prototype.removeRow=function(t){t.element.remove();var e=this.rows.indexOf(t);e>-1&&this.rows.splice(e,1)},e}(Po),Fo=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Wo=function(t,e,n){if(n||2===arguments.length)for(var i,o=0,r=e.length;o<r;o++)!i&&o in e||(i||(i=Array.prototype.slice.call(e,0,o)),i[o]=e[o]);return t.concat(i||Array.prototype.slice.call(e))},Go=function(t){function e(e){var n=t.call(this)||this;return n.options=e,n.head=new qo,n.body=new Bo,n.selectors=new mo,n.paginator=new po(new Zi(n.options.dataSource.name,new Ji,(function(t){return n.paginatorCallback(t)}))),n.sessionCache=new Ui,n.httpClient=new co(n.sessionCache,n.options.dataSource.name),n.httpClient.cacheResponses=n.options.cacheResponses,n.infiniteScroller=null,n.gridActions=null,n.discoverable=!0,n}return Fo(e,t),e.prototype.setDiscoverable=function(){zi.Add(this)},Object.defineProperty(e.prototype,"dataSourceName",{get:function(){return this.options.dataSource.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isReadOnly",{get:function(){return this.options.isReadonly},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"records",{get:function(){return this.body.getDirtyRecords()},enumerable:!1,configurable:!0}),e.prototype.paginatorCallback=function(t){this.fetchGridPage(t)},e.prototype.addHeader=function(){this.element.append(this.head.element)},e.prototype.addBody=function(){this.element.append(this.body.element)},e.prototype.render=function(){var t=this;this.element=this.jquery('<table class="table table-bordered table-hover table-sm resizable navTable nowrap bs-table"></table>'),this.id=this.options.gridId,this.prop("data-datasource",this.options.dataSource.name);var e=this.getGridSettings(this.options.gridId)||{};this.css={width:"inherit"};var n=new jo({dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,gridHeader:!0});n.addClass("draggable").addClass("grid-cols");var i=new jo({isTemplateRow:!0,dataSourceName:this.options.dataSource.name,gridId:this.options.gridId,containerId:this.options.containerId});i.addClass("grid-rows"),i.css={display:"none"};var o=this.applyColSorting(e),r=new io(new Xi,!0),s=new yo,a=new io(new Xi);a.append(s),n.addCell(r),i.addCell(a),o.forEach((function(o){var r=e[o.propName]||{},s=n.createHeaderFor(o),a=i.createInputFor(o,t);t.addSorting(s),t.applyColSettings(s,r),t.applyColSettings(a,r),n.addCell(s),i.addCell(a)})),this.head.addRow(n),this.body.addRow(i),this.addActions(),this.addHeader(),this.addBody(),this.jquery("#"+this.options.containerId).append(this.gridActions.element),this.jquery("#"+this.options.containerId).append(this.element),this.addInfiniteScroll();var l=this.options.dataSource.data.initData,c=this.options.dataSource.data.metaData,u={DataSourceName:this.options.dataSource.name,EventData:{Data:l,MetaData:c}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,u),this.notifyListeners(this.appDataEvents.ON_GRID_DATA_BOUND,{DataSourceName:this.options.dataSource.name,EventData:{}}),!0===this.discoverable&&this.setDiscoverable()},e.prototype.addInfiniteScroll=function(){var t=this;!0===this.options.enableInfiniteScroll&&(this.infiniteScroller=new ho({gridElement:this.element,httpClient:this.httpClient}),this.infiniteScroller.nextPageCallback=function(e){return t.paginatorCallback(e)},this.infiniteScroller.enable())},e.prototype.addActions=function(){var t=this;this.gridActions=new _o,this.gridActions.dataSourceName=this.options.dataSource.name,this.gridActions.addNewRecordAction((function(e){return t.addEmptyRow()})).addDeleteAction((function(e){return t.body.markDeleted()})).addGridSettingsAction()},e.prototype.addSorting=function(t){var e=this;t.element.on("click",(function(n){var i=!0;t.hasClass("sorting_asc")?(t.removeClass("sorting_asc").addClass("sorting_desc"),i=!1):t.removeClass("sorting_desc").addClass("sorting_asc"),t.element.siblings("th").removeClass("sorting_asc").removeClass("sorting_desc");var o={EventData:{Event:n,PropName:t.getProp("data-th-propname"),Asc:i},DataSourceName:e.options.dataSource.name};t.notifyListeners(t.appDataEvents.ON_SORTING_REQUESTED,o)}))},e.prototype.clearGrid=function(){this.find(".grid-row").remove();var t=this.body.getTemplateRow();this.body.rows=[t]},e.prototype.applyColSettings=function(t,e){this.isEmptyObj(e)||(!1===e.visible&&t.element.hide(),e.width&&(t.css={position:"relative",width:e.width}))},e.prototype.applyColSorting=function(t){if(!t||this.isEmptyObj(t))return this.options.colDefinition;var e=[];return this.options.colDefinition.forEach((function(n,i){var o=t[n.PropName];e[o.position]=n})),e},e.prototype.bindDataSource=function(t,e){var n=this;if(t&&!(t.length<=0)){var i=t;!1===this.options.dataSource.isRemote&&(i=this.options.dataSource.getPageOfflineCB(e.pageIndex,this.options.dataSource.data.initData,e));var o=null;i.forEach((function(t,e){var i=n.addNewRow(t,!0);i.rowCategory="PRESTINE",o=i})),0==this.options.enableInfiniteScroll?this.bindPaginator(e):(this.infiniteScroller.initMetaData=e,this.infiniteScroller.initData=i,o&&(this.infiniteScroller.unobserve(),this.infiniteScroller.observe(o.element[0])))}},e.prototype.bindPaginator=function(t){void 0===t&&(t=new Ji),this.paginator.options.pagingMetaData=t,this.paginator.render(),this.jquery("#"+this.options.containerId).append(this.paginator.element)},e.prototype.addNewRow=function(t,e){var n=this,i=this.body.getNextRowIndex(),o=this.body.getTemplateRow().clone();o.options.isTemplateRow=!1,o.addClass("grid-row"),o.css={display:"table-row"};var r=this;o.getInputs().forEach((function(n,s){var a=n,l=a.id;a.id=l+"_"+i;var c=a.modelName,u=t[c];if("date"===a.options.InputType&&u){var p=new Date(u);a.val=r.toDateDisplayFormat(p)}else a instanceof ao&&("true"===u||"True"===u||!0===u)?a.prop("checked","checked"):void 0!==u&&(a.val=u);!1===e&&(a.disabled=!1,a.readonly=!1),a.element.on("change",(function(t){o.prop("data-isdirty",!0),"ADDED"!==o.rowCategory&&(o.rowCategory="UPDATED"),a.removeClass("is-invalid").prop("title","");var e=fi.getInstance(t.target);e&&e.dispose();var n=o.getRowDataExt(),i=r.options.dataSource.name,s={EventData:{Event:t,Grid:r},DataSourceName:i},l={EventData:{Event:t,Row:n},DataSourceName:i},c={EventData:{Event:t,Row:n,Field:a},DataSourceName:i};o.notifyListeners(r.appDataEvents.ON_GRID_UPDATED,s),o.notifyListeners(r.appDataEvents.ON_FIELD_UPDATED,c),o.notifyListeners(r.appDataEvents.ON_ROW_UPDATED,l)})),a.element.on("focus",(function(t){r.body.focusRow(o)}))})),o.element.on("click",(function(t){r.body.focusRow(o)})),this.body.addRow(o);var s=o.getVisibleInputs();return s.length>0&&s[s.length-1].element.on("keydown",(function(t){return n.onInputKeyDown(o,t)})),o},e.prototype.toDateDisplayFormat=function(t){var e=t.getDate(),n=t.getMonth()+1;return t.getFullYear()+"-"+(n<10?"0":"")+n+"-"+(e<10?"0":"")+e},e.prototype.toTimeDisplayFormat=function(t){var e=t.getHours(),n=t.getMinutes();return(e<10?"0":"")+e+":"+(n<10?"0":"")+n},e.prototype.onInputKeyDown=function(t,e){if(9===e.which&&!0!==e.shiftKey){var n=this.body.getVisibleRows();n.length<=0||n[n.length-1].getRowIndex()===t.getRowIndex()&&this.addEmptyRow()}},e.prototype.addEmptyRow=function(){var t=this.addNewRow(this.createEmptyRowData(),!1),e=t.getVisibleInputs();e.length>0&&e[0].focus(),t.rowCategory="ADDED",t.prop("data-isdirty","true");var n={EventData:{Grid:this,Event:t},DataSourceName:this.options.dataSource.name};return this.notifyListeners(this.appDataEvents.ON_GRID_UPDATED,n),this.infiniteScroller.unobserve(),this.infiniteScroller.observe(t.element[0]),t},e.prototype.createEmptyRowData=function(){var t={};return this.options.colDefinition.forEach((function(e,n){t[e.PropName]=void 0})),t},e.prototype.onHeaderNext=function(t,e){t&&t.EventData&&(this.resetSorting(),this.clearGrid(),this.paginator.clear(),!1!==e&&(this.fetchGridPage(1),!0===this.options.enableInfiniteScroll&&(this.infiniteScroller.currentPage=1)))},e.prototype.fetchGridPage=function(t){if(!0===this.options.dataSource.isRemote){var e=this.options.dataSource.url(t);if(!e)return;var n=new to(e,"GET");this.httpClient.get(n)}else{var i=this.options.dataSource.data.initData,o=this.options.dataSource.data.metaData,r={DataSourceName:this.options.dataSource.name,EventData:{Data:i,MetaData:new Ji(t,o.pageSize,o.totalRecords)}};this.notifyListeners(this.appDataEvents.ON_FETCH_GRID_RECORD,r)}},e.prototype.onSaveRecord=function(t){var e=this;this.body.rows.filter((function(t){return"DELETED"===t.rowCategory||"ADDED_DELETED"===t.rowCategory})).forEach((function(t){return e.body.removeRow(t)})),this.body.rows.forEach((function(t){t.rowCategory="PRESTINE",t.getInputs().filter((function(t){return t.isKey})).forEach((function(t){t.disabled=!0}))}))},e.prototype.onSaveError=function(t){if(t&&t.EventData&&t.EventData.Event.responseJSON)for(var e=t.EventData.Event.responseJSON,n=this.options.dataSource.name,i=this.body.getDirtyRows(),o=0;o<i.length;o++){var r=e[n+"["+o+"]"];if(r&&r.length>0){var s=r[0],a=o,l=this.getRowByIndex(parseInt(s));if(!l)continue;this.options.colDefinition.forEach((function(t,i){var o=t.PropName.toPascalCaseJson(),r=e[n+"["+a+"]."+o];if(r&&r.length>0){var s=l.find("input[data-propname="+t.PropName+"]");if((!s||s.length<=0)&&(s=l.find("select[data-propname="+t.PropName+"]"),console.log("select found")),s&&s.length>0){s.addClass("is-invalid");var c="";Array.from(r).forEach((function(t){c+=t+" "})),s.attr("title",c),new fi(s[0],{customClass:"tooltip-error"})}}}))}}},e.prototype.getRowByIndex=function(t){return this.body.rows.find((function(e,n){return e.getRowIndex()===t}))},e.prototype.sortTable=function(t,e){var n,i,o=this,r=function(t,e){var n=t.cells[e].element;return n.find("input, select").is(":checked")||n.find("input, select").val()||n.text()},s=this.options.dataSource.name;this.body.rows.sort((n=this.head.getGridTitlesRow().cells.indexOf(t),i=e=!e,function(t,e){return o=r(i?t:e,n),s=r(i?e:t,n),""===o||""===s||isNaN(o)||isNaN(s)?o.toString().localeCompare(s):o-s;var o,s})).forEach((function(t){return o.body.append(t,!1)}));var a={EventData:{CurrentCol:t,Action:Wi.COL_SORTING},DataSourceName:s},l={EventData:{CurrentCol:t,Asc:e},DataSourceName:s};this.notifyListeners(Gi.ON_COLS_REORDERED,l),this.notifyListeners(this.appDataEvents.ON_GRID_CONFIG_UPDATED,a)},e.prototype.onSortingRequest=function(t){var e=this.jquery(t.EventData.Event.target);if("th"!==e.prop("tagName").toLowerCase()){var n=e.parents("th");if(!n||0===n.length)return;t.EventData.Event.target=n[0]}var i=this.head.getGridTitlesRow().cells.find((function(e,n){return e.element[0]===t.EventData.Event.target}));this.sortTable(i,t.EventData.Asc)},e.prototype.resetSorting=function(){this.head.rows.forEach((function(t,e){t.hasClass("sorting_desc")&&t.removeClass("sorting_asc").removeClass("sorting_desc")}))},e.prototype.onColsReordered=function(t){var e=this;this.body.rows.forEach((function(t,n){t.getInputs().forEach((function(t){t.element.off("keydown")}));var i=t.getVisibleInputs();i.length<=0||i[i.length-1].element.on("keydown",(function(n){e.onInputKeyDown(t,n)}))}))},e.prototype.addHandler=function(t,e,n){void 0===n&&(n=!1);var i={Key:this.options.gridId,EventName:t,Callback:e,DataSourceName:this.options.dataSource.name,VerifyDataSourceName:n};$i.Subscribe(i)},e.prototype.removeHandler=function(t){var e={Key:this.options.gridId,EventName:t,DataSourceName:this.options.dataSource.name};$i.Unsubscribe(e)},e.prototype.onFetchData=function(t){!1===this.options.enableInfiniteScroll&&this.clearGrid();var e=t.EventData.MetaData;e&&this.bindDataSource(t.EventData.Data,new Ji(e.pageIndex,e.pageSize,e.totalRecords))},e.prototype.onFetchDataError=function(t){},e.prototype.registerCallbacks=function(t){var e=this;void 0===t&&(t=!0),this.options.gridId,this.options.dataSource.name,this.addHandler(Gi.GRID_DATA,(function(t,n){return e.body.getDirtyRecords()})),this.addHandler(Gi.ON_ADD_RECORD,(function(t,n){return e.onHeaderNext(n,!1)})),this.addHandler(Gi.ON_FETCH_RECORD,(function(t,n){return e.onHeaderNext(n,!0)})),this.addHandler(Gi.ON_SAVE_RECORD,(function(t,n){return e.onSaveRecord(n)})),this.addHandler(Gi.ON_SAVE_ERROR,(function(t,n){return e.onSaveError(n)})),this.addHandler(Gi.ON_SORTING_REQUESTED,(function(t,n){return e.onSortingRequest(n)}),t),this.addHandler(Gi.ON_COLS_REORDERED,(function(t,n){return e.onColsReordered(n)}),t),this.addHandler(Gi.ON_GRID_CONFIG_UPDATED,(function(t,n){return e.onGridConfigurationChanged(n)}),t),this.addHandler(Gi.ON_GRID_DATA_BOUND,(function(t,n){return e.onGridDataBound(n)}),t),this.addHandler(Gi.ON_FETCH_GRID_RECORD,(function(t,n){return e.onFetchData(n)}),t),this.addHandler(Gi.ON_FETCH_GRID_RECORD_ERROR,(function(t,n){return e.onFetchDataError(n)}),t)},e.prototype.configurableGrid=function(){var t=this,e=this.head.getGridTitlesRow().cells,n=this.options.dataSource.name,i='<div class="settings-menu grid-config-template">\n            <div class="modal fade" id="staticBackdrop_'.concat(this.options.dataSource.name,'" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"\n            aria-labelledby="staticBackdropLabel" aria-hidden="true">\n                <div class="modal-dialog modal-dialog-scrollable">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="staticBackdropLabel_').concat(this.options.dataSource.name,'">Configure columns</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <ul class="list-group grid-config-cols">\n\n                            </ul>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>'),o=this.jquery(i);this.jquery("#"+this.options.containerId).append(o);var r=o.find(".grid-config-cols");e.forEach((function(e,i){var o=e.getProp("data-th-propname");if(o){var s=t.jquery('<li class="list-group-item"></li>'),a=t.jquery('<input type="checkbox" value="" class="form-check-input me-1" />'),l="col_config_chk_"+o;a.attr("id",l),a.attr("data-config-propname",o),!0===e.visible&&a.attr("checked","checked");var c=t.jquery('<label for="'+l+'"></label>');c.text(e.getText()),s.append(a),s.append(c),r.append(s),a.on("click",(function(e){var i=t.jquery(e.target),o=i.attr("data-config-propname");if(o){var r=t.head.getGridTitlesRow(),s=r.cells.find((function(t){return t.getProp("data-th-propname")===o}));if(s){var a=t.body.rows,l=Wo(Wo([],a,!0),[r],!1),c=r.cells.indexOf(s);if(!(c<0)){l.forEach((function(t){var e=t.cells[c];e&&(!0===i.is(":checked")?e.visible=!0:e.visible=!1)})),t.notifyListeners(Gi.ON_COLS_REORDERED,{DataSourceName:n,EventData:{Event:e}});var u={EventData:{Event:e,Action:Wi.COL_SHOW_HIDE},DataSourceName:n};t.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,u)}}}}))}}))},e.prototype.resizableGrid=function(){var t=this.options.dataSource.name,e=this.head.getGridTitlesRow().cells;this.css={},this.setCss("overflow","hidden");for(var n=this.element[0].offsetHeight,i=0;i<e.length;i++){var o=s(n);e[i].element.append(o),e[i].setCss("position","relative"),r(o,e[i],this)}function r(e,n,i){var o,r,s,l;e.addEventListener("mousedown",(function(t){l=i.element[0].offsetWidth,r=n.element[0],o=t.pageX;var e=function(t){if("border-box"==a(t,"box-sizing"))return 0;var e=a(t,"padding-left"),n=a(t,"padding-right");return parseInt(e)+parseInt(n)}(r);s=r.offsetWidth-e})),e.addEventListener("mouseover",(function(t){this.style.borderRight="2px solid #0000ff"})),e.addEventListener("mouseout",(function(t){this.style.borderRight=""})),document.addEventListener("mousemove",(function(t){if(r){var e=t.pageX-o;r.style.width=s+e+"px",i.element[0].style.width=l+e+"px"}})),document.addEventListener("mouseup",(function(e){r&&i.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,{dataSourceName:t,eventData:{e,curCol:r},source:i,action:Wi.COL_RESIZED}),r=void 0,o=void 0,s=void 0}))}function s(t){var e=document.createElement("div");return e.style.top="0",e.style.right="0",e.style.width="5px",e.style.position="absolute",e.style.cursor="col-resize",e.style.userSelect="none",e.style.height=t+"px",e}function a(t,e){return window.getComputedStyle(t,null).getPropertyValue(e)}},e.prototype.enableColumnReordering=function(){var t,e=this.options.dataSource.name,n=this.jquery,i=this,o=n('<div draggable="true" class="grid-header"></div>'),r=i.head.getGridTitlesRow(),s=r.cells;s.forEach((function(t){var e=t.element.children();if(0===e.length){var i=t.element.text();t.element.text(""),e=n("<div></div>").text(i),t.element.append(e)}n(e).wrap(o)})),i.find(".grid-header").on({dragstart:function(e){n(this).hasClass("grid-header")?(t=e.target,n(this).css("opacity","0.5")):t=void 0},dragleave:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).removeClass("over")},dragenter:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragover:function(e){e.preventDefault(),t&&n(this).hasClass("grid-header")&&n(this).addClass("over")},dragend:function(e){e.preventDefault(),t&&n(this).css("opacity","1")},drop:function(o){if(o.preventDefault(),t){var l=n(this);l.removeClass("over");var c=o.target;if(l.hasClass("grid-header")&&t!==c){var u=l.parents("th");if(u&&!(u.length<=0)){var p=s.find((function(t){return t.element[0]===u[0]}));if(p){var d=s.indexOf(p),f=n(t).parents("th");if(f&&!(f.length<=0)){var h=s.find((function(t){return t.element[0]===f[0]}));if(p){var g=s.indexOf(h);if(d!=g){a(r,s,g,d);var m=i.body.rows;setTimeout((function(){for(var t=0;t<m.length;t++){var n=m[t],r=n.cells;if(d==g)return;a(n,r,g,d)}i.notifyListeners(Gi.ON_COLS_REORDERED,{DataSourceName:e,EventData:{Event:o}});var s={EventData:{Event:o,Action:Wi.COL_REORDER},DataSourceName:e};i.notifyListeners(Gi.ON_GRID_CONFIG_UPDATED,s)}),500)}}}}}}}}});var a=function(t,e,n,i){if(n!=i){var o=p.ltr;n>i&&(o=p.rtl),o===p.rtl?l(e,n,i):c(e,n,i),t.cells=[],t.addCells(e)}},l=function(t,e,n){for(var i=e;i>n;i--)u(t,i,i-1)},c=function(t,e,n){for(var i=e;i<n;i++)u(t,i,i+1)},u=function(t,e,n){var i=t[e];t[e]=t[n],t[n]=i},p={rtl:"RIGHT-TO-LEFT",ltr:"LEFT-TO-RIGHT"}},e.prototype.onGridConfigurationChanged=function(t){t.EventData.Action;var e=this.options.gridId,n=this.head.getGridTitlesRow().cells,i={};n.forEach((function(t,e){var n="asc";t.hasClass("sorting_desc")&&(n="desc");var o=t.getProp("data-th-propname"),r=new eo(t.getCss("width"),t.visible,n,e);i[o]=r})),Fi.delete(e),setTimeout((function(){Fi.setJSON(e,i,{days:30,secure:!0,SameSite:"strict"})}),500)},e.prototype.onGridDataBound=function(t){this.configurableGrid(),this.enableColumnReordering(),this.resizableGrid()},e}(Vi),$o=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),Uo=function(t){function e(e){var n=t.call(this,e)||this;return n.options=e,n.render(),n}return $o(e,t),e.prototype.render=function(){this.element=this.jquery("#".concat(this.options.ElementId))},e}(ro)})(),i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnNkYXRhdGFibGUuanMiLCJtYXBwaW5ncyI6IjtDQUFBLFNBQTJDQSxFQUFNQyxHQUMxQixpQkFBWkMsU0FBMEMsaUJBQVhDLE9BQ3hDQSxPQUFPRCxRQUFVRCxJQUNRLG1CQUFYRyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sR0FBSUgsR0FDZSxpQkFBWkMsUUFDZEEsUUFBcUIsWUFBSUQsSUFFekJELEVBQWtCLFlBQUlDLElBUnhCLENBU0dLLE1BQU0sV0FDVCxxQ0NWQSxPQWFBLFNBQVlDLEVBQVFOLEdBRW5CLGFBRTZELGlCQUFuQkUsRUFBT0QsUUFTaERDLEVBQU9ELFFBQVVLLEVBQU9DLFNBQ3ZCUCxFQUFTTSxHQUFRLEdBQ2pCLFNBQVVFLEdBQ1QsSUFBTUEsRUFBRUQsU0FDUCxNQUFNLElBQUlFLE1BQU8sNENBRWxCLE9BQU9ULEVBQVNRLElBR2xCUixFQUFTTSxHQXRCWCxDQTBCdUIsb0JBQVhJLE9BQXlCQSxPQUFTQyxNQUFNLFNBQVVELEVBQVFFLEdBTXRFLGFBRUEsSUFBSUMsRUFBTSxHQUVOQyxFQUFXQyxPQUFPQyxlQUVsQkMsRUFBUUosRUFBSUksTUFFWkMsRUFBT0wsRUFBSUssS0FBTyxTQUFVQyxHQUMvQixPQUFPTixFQUFJSyxLQUFLRSxLQUFNRCxJQUNuQixTQUFVQSxHQUNiLE9BQU9OLEVBQUlRLE9BQU9DLE1BQU8sR0FBSUgsSUFJMUJJLEVBQU9WLEVBQUlVLEtBRVhDLEVBQVVYLEVBQUlXLFFBRWRDLEVBQWEsR0FFYkMsRUFBV0QsRUFBV0MsU0FFdEJDLEVBQVNGLEVBQVdHLGVBRXBCQyxFQUFhRixFQUFPRCxTQUVwQkksRUFBdUJELEVBQVdULEtBQU1MLFFBRXhDZ0IsRUFBVSxHQUVWQyxFQUFhLFNBQXFCQyxHQVNwQyxNQUFzQixtQkFBUkEsR0FBOEMsaUJBQWpCQSxFQUFJQyxVQUMxQixtQkFBYkQsRUFBSUUsTUFJVkMsRUFBVyxTQUFtQkgsR0FDaEMsT0FBYyxNQUFQQSxHQUFlQSxJQUFRQSxFQUFJdkIsUUFJaENILEVBQVdHLEVBQU9ILFNBSWpCOEIsRUFBNEIsQ0FDL0JDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxPQUFPLEVBQ1BDLFVBQVUsR0FHWCxTQUFTQyxFQUFTQyxFQUFNQyxFQUFNQyxHQUc3QixJQUFJQyxFQUFHQyxFQUNOQyxHQUhESCxFQUFNQSxHQUFPdEMsR0FHQzBDLGNBQWUsVUFHN0IsR0FEQUQsRUFBT0UsS0FBT1AsRUFDVEMsRUFDSixJQUFNRSxLQUFLVCxHQVlWVSxFQUFNSCxFQUFNRSxJQUFPRixFQUFLTyxjQUFnQlAsRUFBS08sYUFBY0wsS0FFMURFLEVBQU9JLGFBQWNOLEVBQUdDLEdBSTNCRixFQUFJUSxLQUFLQyxZQUFhTixHQUFTTyxXQUFXQyxZQUFhUixHQUl6RCxTQUFTUyxFQUFReEIsR0FDaEIsT0FBWSxNQUFQQSxFQUNHQSxFQUFNLEdBSVEsaUJBQVJBLEdBQW1DLG1CQUFSQSxFQUN4Q1IsRUFBWUMsRUFBU04sS0FBTWEsS0FBVyxnQkFDL0JBLEVBUVQsSUFDQ3lCLEVBQVUsUUFHVkMsRUFBUyxTQUFVQyxFQUFVQyxHQUk1QixPQUFPLElBQUlGLEVBQU9HLEdBQUdDLEtBQU1ILEVBQVVDLElBMFZ2QyxTQUFTRyxFQUFhL0IsR0FNckIsSUFBSWdDLElBQVdoQyxHQUFPLFdBQVlBLEdBQU9BLEVBQUlnQyxPQUM1QzNCLEVBQU9tQixFQUFReEIsR0FFaEIsT0FBS0QsRUFBWUMsS0FBU0csRUFBVUgsS0FJcEIsVUFBVEssR0FBK0IsSUFBWDJCLEdBQ1IsaUJBQVhBLEdBQXVCQSxFQUFTLEdBQU9BLEVBQVMsS0FBT2hDLEdBcldoRTBCLEVBQU9HLEdBQUtILEVBQU9PLFVBQVksQ0FHOUJDLE9BQVFULEVBRVJVLFlBQWFULEVBR2JNLE9BQVEsRUFFUkksUUFBUyxXQUNSLE9BQU9wRCxFQUFNRyxLQUFNVCxPQUtwQjJELElBQUssU0FBVUMsR0FHZCxPQUFZLE1BQVBBLEVBQ0d0RCxFQUFNRyxLQUFNVCxNQUliNEQsRUFBTSxFQUFJNUQsS0FBTTRELEVBQU01RCxLQUFLc0QsUUFBV3RELEtBQU00RCxJQUtwREMsVUFBVyxTQUFVQyxHQUdwQixJQUFJQyxFQUFNZixFQUFPZ0IsTUFBT2hFLEtBQUt5RCxjQUFlSyxHQU01QyxPQUhBQyxFQUFJRSxXQUFhakUsS0FHVitELEdBSVJHLEtBQU0sU0FBVUMsR0FDZixPQUFPbkIsRUFBT2tCLEtBQU1sRSxLQUFNbUUsSUFHM0JDLElBQUssU0FBVUQsR0FDZCxPQUFPbkUsS0FBSzZELFVBQVdiLEVBQU9vQixJQUFLcEUsTUFBTSxTQUFVcUUsRUFBTWxDLEdBQ3hELE9BQU9nQyxFQUFTMUQsS0FBTTRELEVBQU1sQyxFQUFHa0MsUUFJakMvRCxNQUFPLFdBQ04sT0FBT04sS0FBSzZELFVBQVd2RCxFQUFNSyxNQUFPWCxLQUFNc0UsYUFHM0NDLE1BQU8sV0FDTixPQUFPdkUsS0FBS3dFLEdBQUksSUFHakJDLEtBQU0sV0FDTCxPQUFPekUsS0FBS3dFLElBQUssSUFHbEJFLEtBQU0sV0FDTCxPQUFPMUUsS0FBSzZELFVBQVdiLEVBQU8yQixLQUFNM0UsTUFBTSxTQUFVNEUsRUFBT3pDLEdBQzFELE9BQVNBLEVBQUksR0FBTSxPQUlyQjBDLElBQUssV0FDSixPQUFPN0UsS0FBSzZELFVBQVdiLEVBQU8yQixLQUFNM0UsTUFBTSxTQUFVNEUsRUFBT3pDLEdBQzFELE9BQU9BLEVBQUksT0FJYnFDLEdBQUksU0FBVXJDLEdBQ2IsSUFBSTJDLEVBQU05RSxLQUFLc0QsT0FDZHlCLEdBQUs1QyxHQUFNQSxFQUFJLEVBQUkyQyxFQUFNLEdBQzFCLE9BQU85RSxLQUFLNkQsVUFBV2tCLEdBQUssR0FBS0EsRUFBSUQsRUFBTSxDQUFFOUUsS0FBTStFLElBQVEsS0FHNURDLElBQUssV0FDSixPQUFPaEYsS0FBS2lFLFlBQWNqRSxLQUFLeUQsZUFLaEM3QyxLQUFNQSxFQUNOcUUsS0FBTS9FLEVBQUkrRSxLQUNWQyxPQUFRaEYsRUFBSWdGLFFBR2JsQyxFQUFPbUMsT0FBU25DLEVBQU9HLEdBQUdnQyxPQUFTLFdBQ2xDLElBQUlDLEVBQVNDLEVBQU16RCxFQUFLMEQsRUFBTUMsRUFBYUMsRUFDMUNDLEVBQVNuQixVQUFXLElBQU8sR0FDM0JuQyxFQUFJLEVBQ0ptQixFQUFTZ0IsVUFBVWhCLE9BQ25Cb0MsR0FBTyxFQXNCUixJQW5CdUIsa0JBQVhELElBQ1hDLEVBQU9ELEVBR1BBLEVBQVNuQixVQUFXbkMsSUFBTyxHQUMzQkEsS0FJc0IsaUJBQVhzRCxHQUF3QnBFLEVBQVlvRSxLQUMvQ0EsRUFBUyxJQUlMdEQsSUFBTW1CLElBQ1ZtQyxFQUFTekYsS0FDVG1DLEtBR09BLEVBQUltQixFQUFRbkIsSUFHbkIsR0FBcUMsT0FBOUJpRCxFQUFVZCxVQUFXbkMsSUFHM0IsSUFBTWtELEtBQVFELEVBQ2JFLEVBQU9GLEVBQVNDLEdBSUYsY0FBVEEsR0FBd0JJLElBQVdILElBS25DSSxHQUFRSixJQUFVdEMsRUFBTzJDLGNBQWVMLEtBQzFDQyxFQUFjSyxNQUFNQyxRQUFTUCxNQUMvQjFELEVBQU02RCxFQUFRSixHQUliRyxFQURJRCxJQUFnQkssTUFBTUMsUUFBU2pFLEdBQzNCLEdBQ0kyRCxHQUFnQnZDLEVBQU8yQyxjQUFlL0QsR0FHMUNBLEVBRkEsR0FJVDJELEdBQWMsRUFHZEUsRUFBUUosR0FBU3JDLEVBQU9tQyxPQUFRTyxFQUFNRixFQUFPRixTQUd6QlEsSUFBVFIsSUFDWEcsRUFBUUosR0FBU0MsSUFPckIsT0FBT0csR0FHUnpDLEVBQU9tQyxPQUFRLENBR2RZLFFBQVMsVUFBYWhELEVBQVVpRCxLQUFLQyxVQUFXQyxRQUFTLE1BQU8sSUFHaEVDLFNBQVMsRUFFVEMsTUFBTyxTQUFVQyxHQUNoQixNQUFNLElBQUl2RyxNQUFPdUcsSUFHbEJDLEtBQU0sYUFFTlgsY0FBZSxTQUFVckUsR0FDeEIsSUFBSWlGLEVBQU9DLEVBSVgsU0FBTWxGLEdBQWdDLG9CQUF6QlAsRUFBU04sS0FBTWEsS0FJNUJpRixFQUFRcEcsRUFBVW1CLE1BU0ssbUJBRHZCa0YsRUFBT3hGLEVBQU9QLEtBQU04RixFQUFPLGdCQUFtQkEsRUFBTTlDLGNBQ2Z2QyxFQUFXVCxLQUFNK0YsS0FBV3JGLEtBR2xFc0YsY0FBZSxTQUFVbkYsR0FDeEIsSUFBSStELEVBRUosSUFBTUEsS0FBUS9ELEVBQ2IsT0FBTyxFQUVSLE9BQU8sR0FLUm9GLFdBQVksU0FBVTFFLEVBQU1vRCxFQUFTbEQsR0FDcENILEVBQVNDLEVBQU0sQ0FBRUgsTUFBT3VELEdBQVdBLEVBQVF2RCxPQUFTSyxJQUdyRGdDLEtBQU0sU0FBVTVDLEVBQUs2QyxHQUNwQixJQUFJYixFQUFRbkIsRUFBSSxFQUVoQixHQUFLa0IsRUFBYS9CLEdBRWpCLElBREFnQyxFQUFTaEMsRUFBSWdDLE9BQ0xuQixFQUFJbUIsSUFDcUMsSUFBM0NhLEVBQVMxRCxLQUFNYSxFQUFLYSxHQUFLQSxFQUFHYixFQUFLYSxJQURuQkEsVUFNcEIsSUFBTUEsS0FBS2IsRUFDVixJQUFnRCxJQUEzQzZDLEVBQVMxRCxLQUFNYSxFQUFLYSxHQUFLQSxFQUFHYixFQUFLYSxJQUNyQyxNQUtILE9BQU9iLEdBSVJxRixVQUFXLFNBQVV6RyxFQUFLMEcsR0FDekIsSUFBSTdDLEVBQU02QyxHQUFXLEdBYXJCLE9BWFksTUFBUDFHLElBQ0NtRCxFQUFhakQsT0FBUUYsSUFDekI4QyxFQUFPZ0IsTUFBT0QsRUFDRSxpQkFBUjdELEVBQ04sQ0FBRUEsR0FBUUEsR0FHWlUsRUFBS0gsS0FBTXNELEVBQUs3RCxJQUlYNkQsR0FHUjhDLFFBQVMsU0FBVXhDLEVBQU1uRSxFQUFLaUMsR0FDN0IsT0FBYyxNQUFQakMsR0FBZSxFQUFJVyxFQUFRSixLQUFNUCxFQUFLbUUsRUFBTWxDLElBS3BENkIsTUFBTyxTQUFVTyxFQUFPdUMsR0FLdkIsSUFKQSxJQUFJaEMsR0FBT2dDLEVBQU94RCxPQUNqQnlCLEVBQUksRUFDSjVDLEVBQUlvQyxFQUFNakIsT0FFSHlCLEVBQUlELEVBQUtDLElBQ2hCUixFQUFPcEMsS0FBUTJFLEVBQVEvQixHQUt4QixPQUZBUixFQUFNakIsT0FBU25CLEVBRVJvQyxHQUdSSSxLQUFNLFNBQVViLEVBQU9LLEVBQVU0QyxHQVNoQyxJQVJBLElBQ0NDLEVBQVUsR0FDVjdFLEVBQUksRUFDSm1CLEVBQVNRLEVBQU1SLE9BQ2YyRCxHQUFrQkYsRUFJWDVFLEVBQUltQixFQUFRbkIsS0FDQWdDLEVBQVVMLEVBQU8zQixHQUFLQSxLQUNoQjhFLEdBQ3hCRCxFQUFRcEcsS0FBTWtELEVBQU8zQixJQUl2QixPQUFPNkUsR0FJUjVDLElBQUssU0FBVU4sRUFBT0ssRUFBVStDLEdBQy9CLElBQUk1RCxFQUFRNkQsRUFDWGhGLEVBQUksRUFDSjRCLEVBQU0sR0FHUCxHQUFLVixFQUFhUyxHQUVqQixJQURBUixFQUFTUSxFQUFNUixPQUNQbkIsRUFBSW1CLEVBQVFuQixJQUdMLE9BRmRnRixFQUFRaEQsRUFBVUwsRUFBTzNCLEdBQUtBLEVBQUcrRSxLQUdoQ25ELEVBQUluRCxLQUFNdUcsUUFNWixJQUFNaEYsS0FBSzJCLEVBR0ksT0FGZHFELEVBQVFoRCxFQUFVTCxFQUFPM0IsR0FBS0EsRUFBRytFLEtBR2hDbkQsRUFBSW5ELEtBQU11RyxHQU1iLE9BQU81RyxFQUFNd0QsSUFJZHFELEtBQU0sRUFJTmhHLFFBQVNBLElBR2EsbUJBQVhpRyxTQUNYckUsRUFBT0csR0FBSWtFLE9BQU9DLFVBQWFwSCxFQUFLbUgsT0FBT0MsV0FJNUN0RSxFQUFPa0IsS0FBTSx1RUFBdUVxRCxNQUFPLE1BQzFGLFNBQVVDLEVBQUluQyxHQUNidkUsRUFBWSxXQUFhdUUsRUFBTyxLQUFRQSxFQUFLb0MsaUJBbUIvQyxJQUFJQyxFQVdKLFNBQVkzSCxHQUNaLElBQUlvQyxFQUNIZixFQUNBdUcsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFHQUMsRUFDQXhJLEVBQ0F5SSxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBeEIsRUFDQXlCLEVBR0ExQyxFQUFVLFNBQVcsRUFBSSxJQUFJMkMsS0FDN0JDLEVBQWU1SSxFQUFPSCxTQUN0QmdKLEVBQVUsRUFDVkMsRUFBTyxFQUNQQyxFQUFhQyxLQUNiQyxFQUFhRCxLQUNiRSxFQUFnQkYsS0FDaEJHLEVBQXlCSCxLQUN6QkksRUFBWSxTQUFVQyxFQUFHQyxHQUl4QixPQUhLRCxJQUFNQyxJQUNWbEIsR0FBZSxHQUVULEdBSVJuSCxFQUFTLEdBQU9DLGVBQ2hCZixFQUFNLEdBQ05vSixFQUFNcEosRUFBSW9KLElBQ1ZDLEVBQWFySixFQUFJVSxLQUNqQkEsRUFBT1YsRUFBSVUsS0FDWE4sRUFBUUosRUFBSUksTUFJWk8sRUFBVSxTQUFVMkksRUFBTW5GLEdBR3pCLElBRkEsSUFBSWxDLEVBQUksRUFDUDJDLEVBQU0wRSxFQUFLbEcsT0FDSm5CLEVBQUkyQyxFQUFLM0MsSUFDaEIsR0FBS3FILEVBQU1ySCxLQUFRa0MsRUFDbEIsT0FBT2xDLEVBR1QsT0FBUSxHQUdUc0gsRUFBVyw2SEFNWEMsRUFBYSxzQkFHYkMsRUFBYSxvRkFJYkMsRUFBYSwyQkFBNEJELEVBQWEsT0FBU0QsRUFHOUQsZ0JBQWtCQSxFQUlsQiwyREFBNkRDLEVBQWEsT0FDMUVELEVBQWEsT0FFZEcsRUFBVSxLQUFPRixFQUFQLHdGQU9vQkMsRUFQcEIsZUFjVkUsRUFBYyxJQUFJQyxPQUFRTCxFQUFhLElBQUssS0FDNUNNLEVBQVEsSUFBSUQsT0FBUSx1RUFDQSxLQUVwQkUsRUFBUyxJQUFJRixPQUFRLDhDQUNyQkcsRUFBZSxJQUFJSCxPQUFRLHdFQUUzQkksRUFBVyxJQUFJSixPQUFRTCxFQUFhLE1BRXBDVSxFQUFVLElBQUlMLE9BQVFGLEdBQ3RCUSxFQUFjLElBQUlOLE9BQVEsSUFBTUosRUFBYSxLQUU3Q1csRUFBWSxDQUNYLEdBQU0sSUFBSVAsT0FBUSxNQUFRSixFQUFhLEtBQ3ZDLE1BQVMsSUFBSUksT0FBUSxRQUFVSixFQUFhLEtBQzVDLElBQU8sSUFBSUksT0FBUSxLQUFPSixFQUFhLFNBQ3ZDLEtBQVEsSUFBSUksT0FBUSxJQUFNSCxHQUMxQixPQUFVLElBQUlHLE9BQVEsSUFBTUYsR0FDNUIsTUFBUyxJQUFJRSxPQUFRLDRMQUUrQixLQUNwRCxLQUFRLElBQUlBLE9BQVEsT0FBU04sRUFBVyxLQUFNLEtBSTlDLGFBQWdCLElBQUlNLE9BQVEsNklBRTJCLE1BR3hEUSxFQUFRLFNBQ1JDLEVBQVUsc0NBQ1ZDLEVBQVUsU0FFVkMsRUFBVSx5QkFHVkMsRUFBYSxtQ0FFYkMsR0FBVyxPQUlYQyxHQUFZLElBQUlkLE9BQVEsOERBQThELEtBQ3RGZSxHQUFZLFNBQVVDLEVBQVFDLEdBQzdCLElBQUlDLEVBQU8sS0FBT0YsRUFBT3pLLE1BQU8sR0FBTSxNQUV0QyxPQUFPMEssSUFTTkMsRUFBTyxFQUNOQyxPQUFPQyxhQUFjRixFQUFPLE9BQzVCQyxPQUFPQyxhQUFjRixHQUFRLEdBQUssTUFBZSxLQUFQQSxFQUFlLFNBSzVERyxHQUFhLHNEQUNiQyxHQUFhLFNBQVVDLEVBQUlDLEdBQzFCLE9BQUtBLEVBR1EsT0FBUEQsRUFDRyxJQUlEQSxFQUFHaEwsTUFBTyxHQUFJLEdBQU0sS0FDMUJnTCxFQUFHRSxXQUFZRixFQUFHaEksT0FBUyxHQUFJdkMsU0FBVSxJQUFPLElBSTNDLEtBQU91SyxHQU9mRyxHQUFnQixXQUNmckQsS0FHRHNELEdBQXFCQyxJQUNwQixTQUFVdEgsR0FDVCxPQUF5QixJQUFsQkEsRUFBS3VILFVBQXFELGFBQWhDdkgsRUFBS3dILFNBQVNwRSxnQkFFaEQsQ0FBRXFFLElBQUssYUFBY0MsS0FBTSxXQUk3QixJQUNDbkwsRUFBS0QsTUFDRlQsRUFBTUksRUFBTUcsS0FBTWtJLEVBQWFxRCxZQUNqQ3JELEVBQWFxRCxZQU1kOUwsRUFBS3lJLEVBQWFxRCxXQUFXMUksUUFBUy9CLFNBQ3JDLE1BQVEwSyxHQUNUckwsRUFBTyxDQUFFRCxNQUFPVCxFQUFJb0QsT0FHbkIsU0FBVW1DLEVBQVF5RyxHQUNqQjNDLEVBQVc1SSxNQUFPOEUsRUFBUW5GLEVBQU1HLEtBQU15TCxLQUt2QyxTQUFVekcsRUFBUXlHLEdBS2pCLElBSkEsSUFBSW5ILEVBQUlVLEVBQU9uQyxPQUNkbkIsRUFBSSxFQUdLc0QsRUFBUVYsS0FBUW1ILEVBQUsvSixPQUMvQnNELEVBQU9uQyxPQUFTeUIsRUFBSSxJQUt2QixTQUFTMkMsR0FBUXpFLEVBQVVDLEVBQVMwRCxFQUFTdUYsR0FDNUMsSUFBSUMsRUFBR2pLLEVBQUdrQyxFQUFNZ0ksRUFBS0MsRUFBT0MsRUFBUUMsRUFDbkNDLEVBQWF2SixHQUFXQSxFQUFRd0osY0FHaENuTCxFQUFXMkIsRUFBVUEsRUFBUTNCLFNBQVcsRUFLekMsR0FIQXFGLEVBQVVBLEdBQVcsR0FHSSxpQkFBYjNELElBQTBCQSxHQUN4QixJQUFiMUIsR0FBK0IsSUFBYkEsR0FBK0IsS0FBYkEsRUFFcEMsT0FBT3FGLEVBSVIsSUFBTXVGLElBQ0wvRCxFQUFhbEYsR0FDYkEsRUFBVUEsR0FBV3RELEVBRWhCMEksR0FBaUIsQ0FJckIsR0FBa0IsS0FBYi9HLElBQXFCK0ssRUFBUTNCLEVBQVdnQyxLQUFNMUosSUFHbEQsR0FBT21KLEVBQUlFLEVBQU8sSUFHakIsR0FBa0IsSUFBYi9LLEVBQWlCLENBQ3JCLEtBQU84QyxFQUFPbkIsRUFBUTBKLGVBQWdCUixJQVVyQyxPQUFPeEYsRUFMUCxHQUFLdkMsRUFBS3dJLEtBQU9ULEVBRWhCLE9BREF4RixFQUFRaEcsS0FBTXlELEdBQ1B1QyxPQVlULEdBQUs2RixJQUFnQnBJLEVBQU9vSSxFQUFXRyxlQUFnQlIsS0FDdEQzRCxFQUFVdkYsRUFBU21CLElBQ25CQSxFQUFLd0ksS0FBT1QsRUFHWixPQURBeEYsRUFBUWhHLEtBQU15RCxHQUNQdUMsTUFLSCxJQUFLMEYsRUFBTyxHQUVsQixPQURBMUwsRUFBS0QsTUFBT2lHLEVBQVMxRCxFQUFRNEoscUJBQXNCN0osSUFDNUMyRCxFQUdELElBQU93RixFQUFJRSxFQUFPLEtBQVNsTCxFQUFRMkwsd0JBQ3pDN0osRUFBUTZKLHVCQUdSLE9BREFuTSxFQUFLRCxNQUFPaUcsRUFBUzFELEVBQVE2Six1QkFBd0JYLElBQzlDeEYsRUFLVCxHQUFLeEYsRUFBUTRMLE1BQ1g5RCxFQUF3QmpHLEVBQVcsUUFDakNzRixJQUFjQSxFQUFVMEUsS0FBTWhLLE1BSWxCLElBQWIxQixHQUFxRCxXQUFuQzJCLEVBQVEySSxTQUFTcEUsZUFBK0IsQ0FZcEUsR0FWQStFLEVBQWN2SixFQUNkd0osRUFBYXZKLEVBU0ssSUFBYjNCLElBQ0Y0SSxFQUFTOEMsS0FBTWhLLElBQWNpSCxFQUFhK0MsS0FBTWhLLElBQWUsQ0FxQmpFLEtBbEJBd0osRUFBYTdCLEdBQVNxQyxLQUFNaEssSUFBY2lLLEdBQWFoSyxFQUFRTixhQUM5RE0sS0FJbUJBLEdBQVk5QixFQUFRK0wsU0FHaENkLEVBQU1uSixFQUFRVixhQUFjLE9BQ2xDNkosRUFBTUEsRUFBSW5HLFFBQVNrRixHQUFZQyxJQUUvQm5JLEVBQVFULGFBQWMsS0FBUTRKLEVBQU10RyxJQU10QzVELEdBREFvSyxFQUFTekUsRUFBVTdFLElBQ1JLLE9BQ0huQixLQUNQb0ssRUFBUXBLLElBQVFrSyxFQUFNLElBQU1BLEVBQU0sVUFBYSxJQUM5Q2UsR0FBWWIsRUFBUXBLLElBRXRCcUssRUFBY0QsRUFBT2MsS0FBTSxLQUc1QixJQUlDLE9BSEF6TSxFQUFLRCxNQUFPaUcsRUFDWDZGLEVBQVdhLGlCQUFrQmQsSUFFdkI1RixFQUNOLE1BQVEyRyxHQUNUckUsRUFBd0JqRyxHQUFVLEdBQ2pDLFFBQ0lvSixJQUFRdEcsR0FDWjdDLEVBQVFzSyxnQkFBaUIsUUFROUIsT0FBT3hGLEVBQVEvRSxFQUFTaUQsUUFBUzhELEVBQU8sTUFBUTlHLEVBQVMwRCxFQUFTdUYsR0FTbkUsU0FBU3BELEtBQ1IsSUFBSTBFLEVBQU8sR0FZWCxPQVZBLFNBQVNDLEVBQU9DLEVBQUt4RyxHQVFwQixPQUxLc0csRUFBSzdNLEtBQU0rTSxFQUFNLEtBQVFoRyxFQUFLaUcsb0JBRzNCRixFQUFPRCxFQUFLSSxTQUVYSCxFQUFPQyxFQUFNLEtBQVF4RyxHQVNoQyxTQUFTMkcsR0FBYzNLLEdBRXRCLE9BREFBLEVBQUk0QyxJQUFZLEVBQ1Q1QyxFQU9SLFNBQVM0SyxHQUFRNUssR0FDaEIsSUFBSTZLLEVBQUtwTyxFQUFTMEMsY0FBZSxZQUVqQyxJQUNDLFFBQVNhLEVBQUk2SyxHQUNaLE1BQVEvQixHQUNULE9BQU8sRUFDTixRQUdJK0IsRUFBR3BMLFlBQ1BvTCxFQUFHcEwsV0FBV0MsWUFBYW1MLEdBSTVCQSxFQUFLLE1BU1AsU0FBU0MsR0FBV0MsRUFBT0MsR0FJMUIsSUFIQSxJQUFJak8sRUFBTWdPLEVBQU0zRyxNQUFPLEtBQ3RCcEYsRUFBSWpDLEVBQUlvRCxPQUVEbkIsS0FDUHdGLEVBQUt5RyxXQUFZbE8sRUFBS2lDLElBQVFnTSxFQVVoQyxTQUFTRSxHQUFjakYsRUFBR0MsR0FDekIsSUFBSWlGLEVBQU1qRixHQUFLRCxFQUNkbUYsRUFBT0QsR0FBc0IsSUFBZmxGLEVBQUU3SCxVQUFpQyxJQUFmOEgsRUFBRTlILFVBQ25DNkgsRUFBRW9GLFlBQWNuRixFQUFFbUYsWUFHcEIsR0FBS0QsRUFDSixPQUFPQSxFQUlSLEdBQUtELEVBQ0osS0FBVUEsRUFBTUEsRUFBSUcsYUFDbkIsR0FBS0gsSUFBUWpGLEVBQ1osT0FBUSxFQUtYLE9BQU9ELEVBQUksR0FBSyxFQU9qQixTQUFTc0YsR0FBbUIvTSxHQUMzQixPQUFPLFNBQVUwQyxHQUVoQixNQUFnQixVQURMQSxFQUFLd0gsU0FBU3BFLGVBQ0VwRCxFQUFLMUMsT0FBU0EsR0FRM0MsU0FBU2dOLEdBQW9CaE4sR0FDNUIsT0FBTyxTQUFVMEMsR0FDaEIsSUFBSWdCLEVBQU9oQixFQUFLd0gsU0FBU3BFLGNBQ3pCLE9BQWtCLFVBQVRwQyxHQUE2QixXQUFUQSxJQUF1QmhCLEVBQUsxQyxPQUFTQSxHQVFwRSxTQUFTaU4sR0FBc0JoRCxHQUc5QixPQUFPLFNBQVV2SCxHQUtoQixNQUFLLFNBQVVBLEVBU1RBLEVBQUt6QixhQUFnQyxJQUFsQnlCLEVBQUt1SCxTQUd2QixVQUFXdkgsRUFDVixVQUFXQSxFQUFLekIsV0FDYnlCLEVBQUt6QixXQUFXZ0osV0FBYUEsRUFFN0J2SCxFQUFLdUgsV0FBYUEsRUFNcEJ2SCxFQUFLd0ssYUFBZWpELEdBSTFCdkgsRUFBS3dLLGNBQWdCakQsR0FDckJGLEdBQW9CckgsS0FBV3VILEVBRzFCdkgsRUFBS3VILFdBQWFBLEVBS2QsVUFBV3ZILEdBQ2ZBLEVBQUt1SCxXQUFhQSxHQVk1QixTQUFTa0QsR0FBd0IzTCxHQUNoQyxPQUFPMkssSUFBYyxTQUFVaUIsR0FFOUIsT0FEQUEsR0FBWUEsRUFDTGpCLElBQWMsU0FBVTNCLEVBQU1uRixHQU1wQyxJQUxBLElBQUlqQyxFQUNIaUssRUFBZTdMLEVBQUksR0FBSWdKLEVBQUs3SSxPQUFReUwsR0FDcEM1TSxFQUFJNk0sRUFBYTFMLE9BR1ZuQixLQUNGZ0ssRUFBUXBILEVBQUlpSyxFQUFjN00sTUFDOUJnSyxFQUFNcEgsS0FBU2lDLEVBQVNqQyxHQUFNb0gsRUFBTXBILFdBWXpDLFNBQVNtSSxHQUFhaEssR0FDckIsT0FBT0EsUUFBbUQsSUFBakNBLEVBQVE0SixzQkFBd0M1SixFQWtyQzFFLElBQU1mLEtBOXFDTmYsRUFBVXNHLEdBQU90RyxRQUFVLEdBTzNCeUcsRUFBUUgsR0FBT0csTUFBUSxTQUFVeEQsR0FDaEMsSUFBSTRLLEVBQVk1SyxHQUFRQSxFQUFLNkssYUFDNUI3RyxFQUFVaEUsSUFBVUEsRUFBS3FJLGVBQWlCckksR0FBTzhLLGdCQUtsRCxPQUFRNUUsRUFBTTBDLEtBQU1nQyxHQUFhNUcsR0FBV0EsRUFBUXdELFVBQVksU0FRakV6RCxFQUFjVixHQUFPVSxZQUFjLFNBQVVuRyxHQUM1QyxJQUFJbU4sRUFBWUMsRUFDZm5OLEVBQU1ELEVBQU9BLEVBQUt5SyxlQUFpQnpLLEVBQU8wRyxFQU8zQyxPQUFLekcsR0FBT3RDLEdBQTZCLElBQWpCc0MsRUFBSVgsVUFBbUJXLEVBQUlpTixpQkFNbkQ5RyxHQURBekksRUFBV3NDLEdBQ1FpTixnQkFDbkI3RyxHQUFrQlQsRUFBT2pJLEdBUXBCK0ksR0FBZ0IvSSxJQUNsQnlQLEVBQVl6UCxFQUFTMFAsY0FBaUJELEVBQVVFLE1BQVFGLElBR3JEQSxFQUFVRyxpQkFDZEgsRUFBVUcsaUJBQWtCLFNBQVUvRCxJQUFlLEdBRzFDNEQsRUFBVUksYUFDckJKLEVBQVVJLFlBQWEsV0FBWWhFLEtBU3JDckssRUFBUStMLE1BQVFZLElBQVEsU0FBVUMsR0FFakMsT0FEQTNGLEVBQVExRixZQUFhcUwsR0FBS3JMLFlBQWEvQyxFQUFTMEMsY0FBZSxhQUN6QixJQUF4QjBMLEVBQUdWLG1CQUNmVSxFQUFHVixpQkFBa0IsdUJBQXdCaEssVUFTaERsQyxFQUFRd0ksV0FBYW1FLElBQVEsU0FBVUMsR0FFdEMsT0FEQUEsRUFBRzBCLFVBQVksS0FDUDFCLEVBQUd4TCxhQUFjLGdCQU8xQnBCLEVBQVEwTCxxQkFBdUJpQixJQUFRLFNBQVVDLEdBRWhELE9BREFBLEVBQUdyTCxZQUFhL0MsRUFBUytQLGNBQWUsTUFDaEMzQixFQUFHbEIscUJBQXNCLEtBQU14SixVQUl4Q2xDLEVBQVEyTCx1QkFBeUJyQyxFQUFRdUMsS0FBTXJOLEVBQVNtTix3QkFNeEQzTCxFQUFRd08sUUFBVTdCLElBQVEsU0FBVUMsR0FFbkMsT0FEQTNGLEVBQVExRixZQUFhcUwsR0FBS25CLEdBQUs5RyxHQUN2Qm5HLEVBQVNpUSxvQkFBc0JqUSxFQUFTaVEsa0JBQW1COUosR0FBVXpDLFVBSXpFbEMsRUFBUXdPLFNBQ1pqSSxFQUFLbUksT0FBYSxHQUFJLFNBQVVqRCxHQUMvQixJQUFJa0QsRUFBU2xELEVBQUczRyxRQUFTMkUsR0FBV0MsSUFDcEMsT0FBTyxTQUFVekcsR0FDaEIsT0FBT0EsRUFBSzdCLGFBQWMsUUFBV3VOLElBR3ZDcEksRUFBS3FJLEtBQVcsR0FBSSxTQUFVbkQsRUFBSTNKLEdBQ2pDLFFBQXVDLElBQTNCQSxFQUFRMEosZ0JBQWtDdEUsRUFBaUIsQ0FDdEUsSUFBSWpFLEVBQU9uQixFQUFRMEosZUFBZ0JDLEdBQ25DLE9BQU94SSxFQUFPLENBQUVBLEdBQVMsT0FJM0JzRCxFQUFLbUksT0FBYSxHQUFLLFNBQVVqRCxHQUNoQyxJQUFJa0QsRUFBU2xELEVBQUczRyxRQUFTMkUsR0FBV0MsSUFDcEMsT0FBTyxTQUFVekcsR0FDaEIsSUFBSXBDLE9BQXdDLElBQTFCb0MsRUFBSzRMLGtCQUN0QjVMLEVBQUs0TCxpQkFBa0IsTUFDeEIsT0FBT2hPLEdBQVFBLEVBQUtrRixRQUFVNEksSUFNaENwSSxFQUFLcUksS0FBVyxHQUFJLFNBQVVuRCxFQUFJM0osR0FDakMsUUFBdUMsSUFBM0JBLEVBQVEwSixnQkFBa0N0RSxFQUFpQixDQUN0RSxJQUFJckcsRUFBTUUsRUFBRzJCLEVBQ1pPLEVBQU9uQixFQUFRMEosZUFBZ0JDLEdBRWhDLEdBQUt4SSxFQUFPLENBSVgsSUFEQXBDLEVBQU9vQyxFQUFLNEwsaUJBQWtCLFFBQ2pCaE8sRUFBS2tGLFFBQVUwRixFQUMzQixNQUFPLENBQUV4SSxHQU1WLElBRkFQLEVBQVFaLEVBQVEyTSxrQkFBbUJoRCxHQUNuQzFLLEVBQUksRUFDTWtDLEVBQU9QLEVBQU8zQixNQUV2QixJQURBRixFQUFPb0MsRUFBSzRMLGlCQUFrQixRQUNqQmhPLEVBQUtrRixRQUFVMEYsRUFDM0IsTUFBTyxDQUFFeEksR0FLWixNQUFPLE1BTVZzRCxFQUFLcUksS0FBWSxJQUFJNU8sRUFBUTBMLHFCQUM1QixTQUFVb0QsRUFBS2hOLEdBQ2QsWUFBNkMsSUFBakNBLEVBQVE0SixxQkFDWjVKLEVBQVE0SixxQkFBc0JvRCxHQUcxQjlPLEVBQVE0TCxJQUNaOUosRUFBUW9LLGlCQUFrQjRDLFFBRDNCLEdBS1IsU0FBVUEsRUFBS2hOLEdBQ2QsSUFBSW1CLEVBQ0g4TCxFQUFNLEdBQ05oTyxFQUFJLEVBR0p5RSxFQUFVMUQsRUFBUTRKLHFCQUFzQm9ELEdBR3pDLEdBQWEsTUFBUkEsRUFBYyxDQUNsQixLQUFVN0wsRUFBT3VDLEVBQVN6RSxNQUNGLElBQWxCa0MsRUFBSzlDLFVBQ1Q0TyxFQUFJdlAsS0FBTXlELEdBSVosT0FBTzhMLEVBRVIsT0FBT3ZKLEdBSVRlLEVBQUtxSSxLQUFjLE1BQUk1TyxFQUFRMkwsd0JBQTBCLFNBQVUyQyxFQUFXeE0sR0FDN0UsUUFBK0MsSUFBbkNBLEVBQVE2Six3QkFBMEN6RSxFQUM3RCxPQUFPcEYsRUFBUTZKLHVCQUF3QjJDLElBVXpDbEgsRUFBZ0IsR0FPaEJELEVBQVksSUFFTG5ILEVBQVE0TCxJQUFNdEMsRUFBUXVDLEtBQU1yTixFQUFTME4scUJBSTNDUyxJQUFRLFNBQVVDLEdBRWpCLElBQUlvQyxFQU9KL0gsRUFBUTFGLFlBQWFxTCxHQUFLcUMsVUFBWSxVQUFZdEssRUFBWixxQkFDcEJBLEVBRG9CLGtFQVFqQ2lJLEVBQUdWLGlCQUFrQix3QkFBeUJoSyxRQUNsRGlGLEVBQVUzSCxLQUFNLHlDQUtYb04sRUFBR1YsaUJBQWtCLGNBQWVoSyxRQUN6Q2lGLEVBQVUzSCxLQUFNLG1DQUFvQzZJLEVBQVcsS0FJMUR1RSxFQUFHVixpQkFBa0IsUUFBVXZILEVBQVUsTUFBT3pDLFFBQ3JEaUYsRUFBVTNILEtBQU0sT0FRakJ3UCxFQUFReFEsRUFBUzBDLGNBQWUsVUFDMUJHLGFBQWMsT0FBUSxJQUM1QnVMLEVBQUdyTCxZQUFheU4sR0FDVnBDLEVBQUdWLGlCQUFrQixhQUFjaEssUUFDeENpRixFQUFVM0gsS0FBTSxtRkFPWG9OLEVBQUdWLGlCQUFrQixZQUFhaEssUUFDdkNpRixFQUFVM0gsS0FBTSxZQU1Yb04sRUFBR1YsaUJBQWtCLEtBQU92SCxFQUFVLE1BQU96QyxRQUNsRGlGLEVBQVUzSCxLQUFNLFlBS2pCb04sRUFBR1YsaUJBQWtCLFFBQ3JCL0UsRUFBVTNILEtBQU0sa0JBR2pCbU4sSUFBUSxTQUFVQyxHQUNqQkEsRUFBR3FDLFVBQVksb0ZBS2YsSUFBSUQsRUFBUXhRLEVBQVMwQyxjQUFlLFNBQ3BDOE4sRUFBTTNOLGFBQWMsT0FBUSxVQUM1QnVMLEVBQUdyTCxZQUFheU4sR0FBUTNOLGFBQWMsT0FBUSxLQUl6Q3VMLEVBQUdWLGlCQUFrQixZQUFhaEssUUFDdENpRixFQUFVM0gsS0FBTSxzQ0FLaUMsSUFBN0NvTixFQUFHVixpQkFBa0IsWUFBYWhLLFFBQ3RDaUYsRUFBVTNILEtBQU0sV0FBWSxhQUs3QnlILEVBQVExRixZQUFhcUwsR0FBS3BDLFVBQVcsRUFDYyxJQUE5Q29DLEVBQUdWLGlCQUFrQixhQUFjaEssUUFDdkNpRixFQUFVM0gsS0FBTSxXQUFZLGFBSzdCb04sRUFBR1YsaUJBQWtCLFFBQ3JCL0UsRUFBVTNILEtBQU0sYUFJWFEsRUFBUWtQLGdCQUFrQjVGLEVBQVF1QyxLQUFRakcsRUFBVXFCLEVBQVFyQixTQUNsRXFCLEVBQVFrSSx1QkFDUmxJLEVBQVFtSSxvQkFDUm5JLEVBQVFvSSxrQkFDUnBJLEVBQVFxSSxxQkFFUjNDLElBQVEsU0FBVUMsR0FJakI1TSxFQUFRdVAsa0JBQW9CM0osRUFBUXZHLEtBQU11TixFQUFJLEtBSTlDaEgsRUFBUXZHLEtBQU11TixFQUFJLGFBQ2xCeEYsRUFBYzVILEtBQU0sS0FBTWlKLE1BSTVCdEIsRUFBWUEsRUFBVWpGLFFBQVUsSUFBSXlHLE9BQVF4QixFQUFVOEUsS0FBTSxNQUM1RDdFLEVBQWdCQSxFQUFjbEYsUUFBVSxJQUFJeUcsT0FBUXZCLEVBQWM2RSxLQUFNLE1BSXhFK0IsRUFBYTFFLEVBQVF1QyxLQUFNNUUsRUFBUXVJLHlCQUtuQ25JLEVBQVcyRyxHQUFjMUUsRUFBUXVDLEtBQU01RSxFQUFRSSxVQUM5QyxTQUFVVyxFQUFHQyxHQUNaLElBQUl3SCxFQUF1QixJQUFmekgsRUFBRTdILFNBQWlCNkgsRUFBRStGLGdCQUFrQi9GLEVBQ2xEMEgsRUFBTXpILEdBQUtBLEVBQUV6RyxXQUNkLE9BQU93RyxJQUFNMEgsTUFBV0EsR0FBd0IsSUFBakJBLEVBQUl2UCxZQUNsQ3NQLEVBQU1wSSxTQUNMb0ksRUFBTXBJLFNBQVVxSSxHQUNoQjFILEVBQUV3SCx5QkFBOEQsR0FBbkN4SCxFQUFFd0gsd0JBQXlCRSxNQUczRCxTQUFVMUgsRUFBR0MsR0FDWixHQUFLQSxFQUNKLEtBQVVBLEVBQUlBLEVBQUV6RyxZQUNmLEdBQUt5RyxJQUFNRCxFQUNWLE9BQU8sRUFJVixPQUFPLEdBT1RELEVBQVlpRyxFQUNaLFNBQVVoRyxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWxCLEdBQWUsRUFDUixFQUlSLElBQUk0SSxHQUFXM0gsRUFBRXdILHlCQUEyQnZILEVBQUV1SCx3QkFDOUMsT0FBS0csSUFnQlUsR0FQZkEsR0FBWTNILEVBQUVzRCxlQUFpQnRELEtBQVNDLEVBQUVxRCxlQUFpQnJELEdBQzFERCxFQUFFd0gsd0JBQXlCdkgsR0FHM0IsS0FJR2pJLEVBQVE0UCxjQUFnQjNILEVBQUV1SCx3QkFBeUJ4SCxLQUFRMkgsRUFPekQzSCxHQUFLeEosR0FBWXdKLEVBQUVzRCxlQUFpQi9ELEdBQ3hDRixFQUFVRSxFQUFjUyxJQUNoQixFQU9KQyxHQUFLekosR0FBWXlKLEVBQUVxRCxlQUFpQi9ELEdBQ3hDRixFQUFVRSxFQUFjVSxHQUNqQixFQUlEbkIsRUFDSnJILEVBQVNxSCxFQUFXa0IsR0FBTXZJLEVBQVNxSCxFQUFXbUIsR0FDaEQsRUFHZSxFQUFWMEgsR0FBZSxFQUFJLElBRTNCLFNBQVUzSCxFQUFHQyxHQUdaLEdBQUtELElBQU1DLEVBRVYsT0FEQWxCLEdBQWUsRUFDUixFQUdSLElBQUltRyxFQUNIbk0sRUFBSSxFQUNKOE8sRUFBTTdILEVBQUV4RyxXQUNSa08sRUFBTXpILEVBQUV6RyxXQUNSc08sRUFBSyxDQUFFOUgsR0FDUCtILEVBQUssQ0FBRTlILEdBR1IsSUFBTTRILElBQVFILEVBTWIsT0FBTzFILEdBQUt4SixHQUFZLEVBQ3ZCeUosR0FBS3pKLEVBQVcsRUFFaEJxUixHQUFPLEVBQ1BILEVBQU0sRUFDTjVJLEVBQ0VySCxFQUFTcUgsRUFBV2tCLEdBQU12SSxFQUFTcUgsRUFBV21CLEdBQ2hELEVBR0ssR0FBSzRILElBQVFILEVBQ25CLE9BQU96QyxHQUFjakYsRUFBR0MsR0FLekIsSUFEQWlGLEVBQU1sRixFQUNJa0YsRUFBTUEsRUFBSTFMLFlBQ25Cc08sRUFBR0UsUUFBUzlDLEdBR2IsSUFEQUEsRUFBTWpGLEVBQ0lpRixFQUFNQSxFQUFJMUwsWUFDbkJ1TyxFQUFHQyxRQUFTOUMsR0FJYixLQUFRNEMsRUFBSS9PLEtBQVFnUCxFQUFJaFAsSUFDdkJBLElBR0QsT0FBT0EsRUFHTmtNLEdBQWM2QyxFQUFJL08sR0FBS2dQLEVBQUloUCxJQU8zQitPLEVBQUkvTyxJQUFPd0csR0FBZ0IsRUFDM0J3SSxFQUFJaFAsSUFBT3dHLEVBQWUsRUFFMUIsR0FHSy9JLEdBL2NDQSxHQWtkVDhILEdBQU9WLFFBQVUsU0FBVXFLLEVBQU1DLEdBQ2hDLE9BQU81SixHQUFRMkosRUFBTSxLQUFNLEtBQU1DLElBR2xDNUosR0FBTzRJLGdCQUFrQixTQUFVak0sRUFBTWdOLEdBR3hDLEdBRkFqSixFQUFhL0QsR0FFUmpELEVBQVFrUCxpQkFBbUJoSSxJQUM5QlksRUFBd0JtSSxFQUFPLFFBQzdCN0ksSUFBa0JBLEVBQWN5RSxLQUFNb0UsT0FDdEM5SSxJQUFrQkEsRUFBVTBFLEtBQU1vRSxJQUVyQyxJQUNDLElBQUl0TixFQUFNaUQsRUFBUXZHLEtBQU00RCxFQUFNZ04sR0FHOUIsR0FBS3ROLEdBQU8zQyxFQUFRdVAsbUJBSW5CdE0sRUFBS3pFLFVBQXVDLEtBQTNCeUUsRUFBS3pFLFNBQVMyQixTQUMvQixPQUFPd0MsRUFFUCxNQUFRa0ksR0FDVC9DLEVBQXdCbUksR0FBTSxHQUloQyxPQUFPM0osR0FBUTJKLEVBQU16UixFQUFVLEtBQU0sQ0FBRXlFLElBQVNmLE9BQVMsR0FHMURvRSxHQUFPZSxTQUFXLFNBQVV2RixFQUFTbUIsR0FVcEMsT0FIT25CLEVBQVF3SixlQUFpQnhKLElBQWF0RCxHQUM1Q3dJLEVBQWFsRixHQUVQdUYsRUFBVXZGLEVBQVNtQixJQUczQnFELEdBQU82SixLQUFPLFNBQVVsTixFQUFNZ0IsSUFPdEJoQixFQUFLcUksZUFBaUJySSxJQUFVekUsR0FDdEN3SSxFQUFhL0QsR0FHZCxJQUFJbEIsRUFBS3dFLEVBQUt5RyxXQUFZL0ksRUFBS29DLGVBRzlCckYsRUFBTWUsR0FBTW5DLEVBQU9QLEtBQU1rSCxFQUFLeUcsV0FBWS9JLEVBQUtvQyxlQUM5Q3RFLEVBQUlrQixFQUFNZ0IsR0FBT2lELFFBQ2pCeEMsRUFFRixZQUFlQSxJQUFSMUQsRUFDTkEsRUFDQWhCLEVBQVF3SSxhQUFldEIsRUFDdEJqRSxFQUFLN0IsYUFBYzZDLElBQ2pCakQsRUFBTWlDLEVBQUs0TCxpQkFBa0I1SyxLQUFZakQsRUFBSW9QLFVBQzlDcFAsRUFBSStFLE1BQ0osTUFHSk8sR0FBT3FELE9BQVMsU0FBVTBHLEdBQ3pCLE9BQVNBLEVBQU0sSUFBS3ZMLFFBQVNrRixHQUFZQyxLQUcxQzNELEdBQU90QixNQUFRLFNBQVVDLEdBQ3hCLE1BQU0sSUFBSXZHLE1BQU8sMENBQTRDdUcsSUFPOURxQixHQUFPZ0ssV0FBYSxTQUFVOUssR0FDN0IsSUFBSXZDLEVBQ0hzTixFQUFhLEdBQ2I1TSxFQUFJLEVBQ0o1QyxFQUFJLEVBT0wsR0FKQWdHLEdBQWdCL0csRUFBUXdRLGlCQUN4QjFKLEdBQWE5RyxFQUFReVEsWUFBY2pMLEVBQVF0RyxNQUFPLEdBQ2xEc0csRUFBUTNCLEtBQU1rRSxHQUVUaEIsRUFBZSxDQUNuQixLQUFVOUQsRUFBT3VDLEVBQVN6RSxNQUNwQmtDLElBQVN1QyxFQUFTekUsS0FDdEI0QyxFQUFJNE0sRUFBVy9RLEtBQU11QixJQUd2QixLQUFRNEMsS0FDUDZCLEVBQVExQixPQUFReU0sRUFBWTVNLEdBQUssR0FRbkMsT0FGQW1ELEVBQVksS0FFTHRCLEdBT1JnQixFQUFVRixHQUFPRSxRQUFVLFNBQVV2RCxHQUNwQyxJQUFJcEMsRUFDSDhCLEVBQU0sR0FDTjVCLEVBQUksRUFDSlosRUFBVzhDLEVBQUs5QyxTQUVqQixHQUFNQSxHQVFDLEdBQWtCLElBQWJBLEdBQStCLElBQWJBLEdBQStCLEtBQWJBLEVBQWtCLENBSWpFLEdBQWlDLGlCQUFyQjhDLEVBQUt5TixZQUNoQixPQUFPek4sRUFBS3lOLFlBSVosSUFBTXpOLEVBQU9BLEVBQUswTixXQUFZMU4sRUFBTUEsRUFBT0EsRUFBS29LLFlBQy9DMUssR0FBTzZELEVBQVN2RCxRQUdaLEdBQWtCLElBQWI5QyxHQUErQixJQUFiQSxFQUM3QixPQUFPOEMsRUFBSzJOLGVBbkJaLEtBQVUvUCxFQUFPb0MsRUFBTWxDLE1BR3RCNEIsR0FBTzZELEVBQVMzRixHQXFCbEIsT0FBTzhCLEdBR1I0RCxFQUFPRCxHQUFPdUssVUFBWSxDQUd6QnJFLFlBQWEsR0FFYnNFLGFBQWNwRSxHQUVkeEIsTUFBT2hDLEVBRVA4RCxXQUFZLEdBRVo0QixLQUFNLEdBRU5tQyxTQUFVLENBQ1QsSUFBSyxDQUFFckcsSUFBSyxhQUFjdkgsT0FBTyxHQUNqQyxJQUFLLENBQUV1SCxJQUFLLGNBQ1osSUFBSyxDQUFFQSxJQUFLLGtCQUFtQnZILE9BQU8sR0FDdEMsSUFBSyxDQUFFdUgsSUFBSyxvQkFHYnNHLFVBQVcsQ0FDVixLQUFRLFNBQVU5RixHQVdqQixPQVZBQSxFQUFPLEdBQU1BLEVBQU8sR0FBSXBHLFFBQVMyRSxHQUFXQyxJQUc1Q3dCLEVBQU8sSUFBUUEsRUFBTyxJQUFPQSxFQUFPLElBQ25DQSxFQUFPLElBQU8sSUFBS3BHLFFBQVMyRSxHQUFXQyxJQUVwQixPQUFmd0IsRUFBTyxLQUNYQSxFQUFPLEdBQU0sSUFBTUEsRUFBTyxHQUFNLEtBRzFCQSxFQUFNaE0sTUFBTyxFQUFHLElBR3hCLE1BQVMsU0FBVWdNLEdBaUNsQixPQXJCQUEsRUFBTyxHQUFNQSxFQUFPLEdBQUk3RSxjQUVVLFFBQTdCNkUsRUFBTyxHQUFJaE0sTUFBTyxFQUFHLElBR25CZ00sRUFBTyxJQUNaNUUsR0FBT3RCLE1BQU9rRyxFQUFPLElBS3RCQSxFQUFPLEtBQVNBLEVBQU8sR0FDdEJBLEVBQU8sSUFBUUEsRUFBTyxJQUFPLEdBQzdCLEdBQXFCLFNBQWZBLEVBQU8sSUFBaUMsUUFBZkEsRUFBTyxLQUN2Q0EsRUFBTyxLQUFXQSxFQUFPLEdBQU1BLEVBQU8sSUFBd0IsUUFBZkEsRUFBTyxLQUczQ0EsRUFBTyxJQUNsQjVFLEdBQU90QixNQUFPa0csRUFBTyxJQUdmQSxHQUdSLE9BQVUsU0FBVUEsR0FDbkIsSUFBSStGLEVBQ0hDLEdBQVloRyxFQUFPLElBQU9BLEVBQU8sR0FFbEMsT0FBS2hDLEVBQW1CLE1BQUUyQyxLQUFNWCxFQUFPLElBQy9CLE1BSUhBLEVBQU8sR0FDWEEsRUFBTyxHQUFNQSxFQUFPLElBQU9BLEVBQU8sSUFBTyxHQUc5QmdHLEdBQVlsSSxFQUFRNkMsS0FBTXFGLEtBR25DRCxFQUFTdkssRUFBVXdLLEdBQVUsTUFHN0JELEVBQVNDLEVBQVN6UixRQUFTLElBQUt5UixFQUFTaFAsT0FBUytPLEdBQVdDLEVBQVNoUCxVQUd4RWdKLEVBQU8sR0FBTUEsRUFBTyxHQUFJaE0sTUFBTyxFQUFHK1IsR0FDbEMvRixFQUFPLEdBQU1nRyxFQUFTaFMsTUFBTyxFQUFHK1IsSUFJMUIvRixFQUFNaE0sTUFBTyxFQUFHLE1BSXpCd1AsT0FBUSxDQUVQLElBQU8sU0FBVXlDLEdBQ2hCLElBQUkxRyxFQUFXMEcsRUFBaUJyTSxRQUFTMkUsR0FBV0MsSUFBWXJELGNBQ2hFLE1BQTRCLE1BQXJCOEssRUFDTixXQUNDLE9BQU8sR0FFUixTQUFVbE8sR0FDVCxPQUFPQSxFQUFLd0gsVUFBWXhILEVBQUt3SCxTQUFTcEUsZ0JBQWtCb0UsSUFJM0QsTUFBUyxTQUFVNkQsR0FDbEIsSUFBSThDLEVBQVUxSixFQUFZNEcsRUFBWSxLQUV0QyxPQUFPOEMsSUFDSkEsRUFBVSxJQUFJekksT0FBUSwwQkFDakIyRixFQUFZLElBQU1oRyxFQUFhLFNBQWFaLEVBQ2pENEcsR0FBVyxTQUFVckwsR0FDcEIsT0FBT21PLEVBQVF2RixLQUNZLGlCQUFuQjVJLEVBQUtxTCxXQUEwQnJMLEVBQUtxTCxnQkFDZCxJQUF0QnJMLEVBQUs3QixjQUNYNkIsRUFBSzdCLGFBQWMsVUFDcEIsUUFLTixLQUFRLFNBQVU2QyxFQUFNb04sRUFBVUMsR0FDakMsT0FBTyxTQUFVck8sR0FDaEIsSUFBSXNPLEVBQVNqTCxHQUFPNkosS0FBTWxOLEVBQU1nQixHQUVoQyxPQUFlLE1BQVZzTixFQUNnQixPQUFiRixHQUVGQSxJQUlORSxHQUFVLEdBSVUsTUFBYkYsRUFBbUJFLElBQVdELEVBQ3ZCLE9BQWJELEVBQW9CRSxJQUFXRCxFQUNsQixPQUFiRCxFQUFvQkMsR0FBcUMsSUFBNUJDLEVBQU85UixRQUFTNlIsR0FDaEMsT0FBYkQsRUFBb0JDLEdBQVNDLEVBQU85UixRQUFTNlIsSUFBVyxFQUMzQyxPQUFiRCxFQUFvQkMsR0FBU0MsRUFBT3JTLE9BQVFvUyxFQUFNcFAsVUFBYW9QLEVBQ2xELE9BQWJELEdBQXNCLElBQU1FLEVBQU96TSxRQUFTNEQsRUFBYSxLQUFRLEtBQU1qSixRQUFTNlIsSUFBVyxFQUM5RSxPQUFiRCxJQUFvQkUsSUFBV0QsR0FBU0MsRUFBT3JTLE1BQU8sRUFBR29TLEVBQU1wUCxPQUFTLEtBQVFvUCxFQUFRLFFBTzNGLE1BQVMsU0FBVS9RLEVBQU1pUixFQUFNQyxFQUFXdE8sRUFBT0UsR0FDaEQsSUFBSXFPLEVBQWdDLFFBQXZCblIsRUFBS3JCLE1BQU8sRUFBRyxHQUMzQnlTLEVBQStCLFNBQXJCcFIsRUFBS3JCLE9BQVEsR0FDdkIwUyxFQUFrQixZQUFUSixFQUVWLE9BQWlCLElBQVZyTyxHQUF3QixJQUFURSxFQUdyQixTQUFVSixHQUNULFFBQVNBLEVBQUt6QixZQUdmLFNBQVV5QixFQUFNNE8sRUFBVUMsR0FDekIsSUFBSXhGLEVBQU95RixFQUFhQyxFQUFZblIsRUFBTW9SLEVBQVdDLEVBQ3BEeEgsRUFBTWdILElBQVdDLEVBQVUsY0FBZ0Isa0JBQzNDUSxFQUFTbFAsRUFBS3pCLFdBQ2R5QyxFQUFPMk4sR0FBVTNPLEVBQUt3SCxTQUFTcEUsY0FDL0IrTCxHQUFZTixJQUFRRixFQUNwQnpFLEdBQU8sRUFFUixHQUFLZ0YsRUFBUyxDQUdiLEdBQUtULEVBQVMsQ0FDYixLQUFRaEgsR0FBTSxDQUViLElBREE3SixFQUFPb0MsRUFDR3BDLEVBQU9BLEVBQU02SixJQUN0QixHQUFLa0gsRUFDSi9RLEVBQUs0SixTQUFTcEUsZ0JBQWtCcEMsRUFDZCxJQUFsQnBELEVBQUtWLFNBRUwsT0FBTyxFQUtUK1IsRUFBUXhILEVBQWUsU0FBVG5LLElBQW9CMlIsR0FBUyxjQUU1QyxPQUFPLEVBTVIsR0FIQUEsRUFBUSxDQUFFUCxFQUFVUSxFQUFPeEIsV0FBYXdCLEVBQU9FLFdBRzFDVixHQUFXUyxHQWtCZixJQUhBakYsR0FEQThFLEdBREEzRixHQUhBeUYsR0FKQUMsR0FEQW5SLEVBQU9zUixHQUNZeE4sS0FBZTlELEVBQU04RCxHQUFZLEtBSTFCOUQsRUFBS3lSLFlBQzVCTixFQUFZblIsRUFBS3lSLFVBQWEsS0FFWi9SLElBQVUsSUFDWixLQUFRaUgsR0FBVzhFLEVBQU8sS0FDekJBLEVBQU8sR0FDM0J6TCxFQUFPb1IsR0FBYUUsRUFBT3ZILFdBQVlxSCxHQUU3QnBSLElBQVNvUixHQUFhcFIsR0FBUUEsRUFBTTZKLEtBRzNDeUMsRUFBTzhFLEVBQVksSUFBT0MsRUFBTWhLLE9BR2xDLEdBQXVCLElBQWxCckgsRUFBS1YsWUFBb0JnTixHQUFRdE0sSUFBU29DLEVBQU8sQ0FDckQ4TyxFQUFheFIsR0FBUyxDQUFFaUgsRUFBU3lLLEVBQVc5RSxHQUM1QyxZQXlCRixHQWxCS2lGLElBYUpqRixFQURBOEUsR0FEQTNGLEdBSEF5RixHQUpBQyxHQURBblIsRUFBT29DLEdBQ1kwQixLQUFlOUQsRUFBTThELEdBQVksS0FJMUI5RCxFQUFLeVIsWUFDNUJOLEVBQVluUixFQUFLeVIsVUFBYSxLQUVaL1IsSUFBVSxJQUNaLEtBQVFpSCxHQUFXOEUsRUFBTyxLQU1oQyxJQUFUYSxFQUdKLE1BQVV0TSxJQUFTb1IsR0FBYXBSLEdBQVFBLEVBQU02SixLQUMzQ3lDLEVBQU84RSxFQUFZLElBQU9DLEVBQU1oSyxVQUUzQjBKLEVBQ04vUSxFQUFLNEosU0FBU3BFLGdCQUFrQnBDLEVBQ2QsSUFBbEJwRCxFQUFLVixjQUNIZ04sSUFHR2lGLEtBTUpMLEdBTEFDLEVBQWFuUixFQUFNOEQsS0FDaEI5RCxFQUFNOEQsR0FBWSxLQUlLOUQsRUFBS3lSLFlBQzVCTixFQUFZblIsRUFBS3lSLFVBQWEsS0FFcEIvUixHQUFTLENBQUVpSCxFQUFTMkYsSUFHN0J0TSxJQUFTb0MsTUFVbEIsT0FEQWtLLEdBQVE5SixLQUNRRixHQUFXZ0ssRUFBT2hLLEdBQVUsR0FBS2dLLEVBQU9oSyxHQUFTLEtBS3JFLE9BQVUsU0FBVW9QLEVBQVE1RSxHQU0zQixJQUFJNkUsRUFDSHpRLEVBQUt3RSxFQUFLa0MsUUFBUzhKLElBQVloTSxFQUFLa00sV0FBWUYsRUFBT2xNLGdCQUN0REMsR0FBT3RCLE1BQU8sdUJBQXlCdU4sR0FLekMsT0FBS3hRLEVBQUk0QyxHQUNENUMsRUFBSTRMLEdBSVA1TCxFQUFHRyxPQUFTLEdBQ2hCc1EsRUFBTyxDQUFFRCxFQUFRQSxFQUFRLEdBQUk1RSxHQUN0QnBILEVBQUtrTSxXQUFXNVMsZUFBZ0IwUyxFQUFPbE0sZUFDN0NxRyxJQUFjLFNBQVUzQixFQUFNbkYsR0FJN0IsSUFIQSxJQUFJOE0sRUFDSEMsRUFBVTVRLEVBQUlnSixFQUFNNEMsR0FDcEI1TSxFQUFJNFIsRUFBUXpRLE9BQ0xuQixLQUVQZ0ssRUFEQTJILEVBQU1qVCxFQUFTc0wsRUFBTTRILEVBQVM1UixPQUNiNkUsRUFBUzhNLEdBQVFDLEVBQVM1UixPQUc3QyxTQUFVa0MsR0FDVCxPQUFPbEIsRUFBSWtCLEVBQU0sRUFBR3VQLEtBSWhCelEsSUFJVDBHLFFBQVMsQ0FHUixJQUFPaUUsSUFBYyxTQUFVN0ssR0FLOUIsSUFBSW1OLEVBQVEsR0FDWHhKLEVBQVUsR0FDVm9OLEVBQVVqTSxFQUFTOUUsRUFBU2lELFFBQVM4RCxFQUFPLE9BRTdDLE9BQU9nSyxFQUFTak8sR0FDZitILElBQWMsU0FBVTNCLEVBQU1uRixFQUFTaU0sRUFBVUMsR0FNaEQsSUFMQSxJQUFJN08sRUFDSDRQLEVBQVlELEVBQVM3SCxFQUFNLEtBQU0rRyxFQUFLLElBQ3RDL1EsRUFBSWdLLEVBQUs3SSxPQUdGbkIsTUFDQWtDLEVBQU80UCxFQUFXOVIsTUFDeEJnSyxFQUFNaEssS0FBUzZFLEVBQVM3RSxHQUFNa0MsT0FJakMsU0FBVUEsRUFBTTRPLEVBQVVDLEdBTXpCLE9BTEE5QyxFQUFPLEdBQU0vTCxFQUNiMlAsRUFBUzVELEVBQU8sS0FBTThDLEVBQUt0TSxHQUczQndKLEVBQU8sR0FBTSxNQUNMeEosRUFBUTBDLFVBSW5CLElBQU93RSxJQUFjLFNBQVU3SyxHQUM5QixPQUFPLFNBQVVvQixHQUNoQixPQUFPcUQsR0FBUXpFLEVBQVVvQixHQUFPZixPQUFTLE1BSTNDLFNBQVl3SyxJQUFjLFNBQVV2TCxHQUVuQyxPQURBQSxFQUFPQSxFQUFLMkQsUUFBUzJFLEdBQVdDLElBQ3pCLFNBQVV6RyxHQUNoQixPQUFTQSxFQUFLeU4sYUFBZWxLLEVBQVN2RCxJQUFTeEQsUUFBUzBCLElBQVUsTUFXcEUsS0FBUXVMLElBQWMsU0FBVW9HLEdBTy9CLE9BSk03SixFQUFZNEMsS0FBTWlILEdBQVEsS0FDL0J4TSxHQUFPdEIsTUFBTyxxQkFBdUI4TixHQUV0Q0EsRUFBT0EsRUFBS2hPLFFBQVMyRSxHQUFXQyxJQUFZckQsY0FDckMsU0FBVXBELEdBQ2hCLElBQUk4UCxFQUNKLEdBQ0MsR0FBT0EsRUFBVzdMLEVBQ2pCakUsRUFBSzZQLEtBQ0w3UCxFQUFLN0IsYUFBYyxhQUFnQjZCLEVBQUs3QixhQUFjLFFBR3RELE9BREEyUixFQUFXQSxFQUFTMU0saUJBQ0F5TSxHQUEyQyxJQUFuQ0MsRUFBU3RULFFBQVNxVCxFQUFPLFlBRTNDN1AsRUFBT0EsRUFBS3pCLGFBQWtDLElBQWxCeUIsRUFBSzlDLFVBQzdDLE9BQU8sTUFLVCxPQUFVLFNBQVU4QyxHQUNuQixJQUFJK1AsRUFBT3JVLEVBQU9zVSxVQUFZdFUsRUFBT3NVLFNBQVNELEtBQzlDLE9BQU9BLEdBQVFBLEVBQUs5VCxNQUFPLEtBQVErRCxFQUFLd0ksSUFHekMsS0FBUSxTQUFVeEksR0FDakIsT0FBT0EsSUFBU2dFLEdBR2pCLE1BQVMsU0FBVWhFLEdBQ2xCLE9BQU9BLElBQVN6RSxFQUFTMFUsaUJBQ3JCMVUsRUFBUzJVLFVBQVkzVSxFQUFTMlUsZ0JBQzdCbFEsRUFBSzFDLE1BQVEwQyxFQUFLbVEsT0FBU25RLEVBQUtvUSxXQUl0QyxRQUFXN0YsSUFBc0IsR0FDakMsU0FBWUEsSUFBc0IsR0FFbEMsUUFBVyxTQUFVdkssR0FJcEIsSUFBSXdILEVBQVd4SCxFQUFLd0gsU0FBU3BFLGNBQzdCLE1BQXNCLFVBQWJvRSxLQUEwQnhILEVBQUtxUSxTQUN4QixXQUFiN0ksS0FBMkJ4SCxFQUFLc1EsVUFHcEMsU0FBWSxTQUFVdFEsR0FTckIsT0FMS0EsRUFBS3pCLFlBRVR5QixFQUFLekIsV0FBV2dTLGVBR1EsSUFBbEJ2USxFQUFLc1EsVUFJYixNQUFTLFNBQVV0USxHQU1sQixJQUFNQSxFQUFPQSxFQUFLME4sV0FBWTFOLEVBQU1BLEVBQU9BLEVBQUtvSyxZQUMvQyxHQUFLcEssRUFBSzlDLFNBQVcsRUFDcEIsT0FBTyxFQUdULE9BQU8sR0FHUixPQUFVLFNBQVU4QyxHQUNuQixPQUFRc0QsRUFBS2tDLFFBQWlCLE1BQUd4RixJQUlsQyxPQUFVLFNBQVVBLEdBQ25CLE9BQU9vRyxFQUFRd0MsS0FBTTVJLEVBQUt3SCxXQUczQixNQUFTLFNBQVV4SCxHQUNsQixPQUFPbUcsRUFBUXlDLEtBQU01SSxFQUFLd0gsV0FHM0IsT0FBVSxTQUFVeEgsR0FDbkIsSUFBSWdCLEVBQU9oQixFQUFLd0gsU0FBU3BFLGNBQ3pCLE1BQWdCLFVBQVRwQyxHQUFrQyxXQUFkaEIsRUFBSzFDLE1BQThCLFdBQVQwRCxHQUd0RCxLQUFRLFNBQVVoQixHQUNqQixJQUFJa04sRUFDSixNQUF1QyxVQUFoQ2xOLEVBQUt3SCxTQUFTcEUsZUFDTixTQUFkcEQsRUFBSzFDLE9BSXVDLE9BQXhDNFAsRUFBT2xOLEVBQUs3QixhQUFjLFVBQ04sU0FBdkIrTyxFQUFLOUosZ0JBSVIsTUFBU3FILElBQXdCLFdBQ2hDLE1BQU8sQ0FBRSxNQUdWLEtBQVFBLElBQXdCLFNBQVUrRixFQUFldlIsR0FDeEQsTUFBTyxDQUFFQSxFQUFTLE1BR25CLEdBQU13TCxJQUF3QixTQUFVK0YsRUFBZXZSLEVBQVF5TCxHQUM5RCxNQUFPLENBQUVBLEVBQVcsRUFBSUEsRUFBV3pMLEVBQVN5TCxNQUc3QyxLQUFRRCxJQUF3QixTQUFVRSxFQUFjMUwsR0FFdkQsSUFEQSxJQUFJbkIsRUFBSSxFQUNBQSxFQUFJbUIsRUFBUW5CLEdBQUssRUFDeEI2TSxFQUFhcE8sS0FBTXVCLEdBRXBCLE9BQU82TSxLQUdSLElBQU9GLElBQXdCLFNBQVVFLEVBQWMxTCxHQUV0RCxJQURBLElBQUluQixFQUFJLEVBQ0FBLEVBQUltQixFQUFRbkIsR0FBSyxFQUN4QjZNLEVBQWFwTyxLQUFNdUIsR0FFcEIsT0FBTzZNLEtBR1IsR0FBTUYsSUFBd0IsU0FBVUUsRUFBYzFMLEVBQVF5TCxHQU03RCxJQUxBLElBQUk1TSxFQUFJNE0sRUFBVyxFQUNsQkEsRUFBV3pMLEVBQ1h5TCxFQUFXekwsRUFDVkEsRUFDQXlMLElBQ1E1TSxHQUFLLEdBQ2Q2TSxFQUFhcE8sS0FBTXVCLEdBRXBCLE9BQU82TSxLQUdSLEdBQU1GLElBQXdCLFNBQVVFLEVBQWMxTCxFQUFReUwsR0FFN0QsSUFEQSxJQUFJNU0sRUFBSTRNLEVBQVcsRUFBSUEsRUFBV3pMLEVBQVN5TCxJQUNqQzVNLEVBQUltQixHQUNiMEwsRUFBYXBPLEtBQU11QixHQUVwQixPQUFPNk0sT0FLVnJILEVBQUtrQyxRQUFlLElBQUlsQyxFQUFLa0MsUUFBYyxHQUdoQyxDQUFFaUwsT0FBTyxFQUFNQyxVQUFVLEVBQU1DLE1BQU0sRUFBTUMsVUFBVSxFQUFNQyxPQUFPLEdBQzVFdk4sRUFBS2tDLFFBQVMxSCxHQUFNdU0sR0FBbUJ2TSxHQUV4QyxJQUFNQSxJQUFLLENBQUVnVCxRQUFRLEVBQU1DLE9BQU8sR0FDakN6TixFQUFLa0MsUUFBUzFILEdBQU13TSxHQUFvQnhNLEdBSXpDLFNBQVMwUixNQTBFVCxTQUFTekcsR0FBWWlJLEdBSXBCLElBSEEsSUFBSWxULEVBQUksRUFDUDJDLEVBQU11USxFQUFPL1IsT0FDYkwsRUFBVyxHQUNKZCxFQUFJMkMsRUFBSzNDLElBQ2hCYyxHQUFZb1MsRUFBUWxULEdBQUlnRixNQUV6QixPQUFPbEUsRUFHUixTQUFTMEksR0FBZXFJLEVBQVNzQixFQUFZQyxHQUM1QyxJQUFJekosRUFBTXdKLEVBQVd4SixJQUNwQjBKLEVBQU9GLEVBQVd2SixLQUNsQjRCLEVBQU02SCxHQUFRMUosRUFDZDJKLEVBQW1CRixHQUFnQixlQUFSNUgsRUFDM0IrSCxFQUFXN00sSUFFWixPQUFPeU0sRUFBVy9RLE1BR2pCLFNBQVVGLEVBQU1uQixFQUFTZ1EsR0FDeEIsS0FBVTdPLEVBQU9BLEVBQU15SCxJQUN0QixHQUF1QixJQUFsQnpILEVBQUs5QyxVQUFrQmtVLEVBQzNCLE9BQU96QixFQUFTM1AsRUFBTW5CLEVBQVNnUSxHQUdqQyxPQUFPLEdBSVIsU0FBVTdPLEVBQU1uQixFQUFTZ1EsR0FDeEIsSUFBSXlDLEVBQVV4QyxFQUFhQyxFQUMxQndDLEVBQVcsQ0FBRWhOLEVBQVM4TSxHQUd2QixHQUFLeEMsR0FDSixLQUFVN08sRUFBT0EsRUFBTXlILElBQ3RCLElBQXVCLElBQWxCekgsRUFBSzlDLFVBQWtCa1UsSUFDdEJ6QixFQUFTM1AsRUFBTW5CLEVBQVNnUSxHQUM1QixPQUFPLE9BS1YsS0FBVTdPLEVBQU9BLEVBQU15SCxJQUN0QixHQUF1QixJQUFsQnpILEVBQUs5QyxVQUFrQmtVLEVBUTNCLEdBSEF0QyxHQUpBQyxFQUFhL08sRUFBTTBCLEtBQWUxQixFQUFNMEIsR0FBWSxLQUkxQjFCLEVBQUtxUCxZQUM1Qk4sRUFBWS9PLEVBQUtxUCxVQUFhLElBRTVCOEIsR0FBUUEsSUFBU25SLEVBQUt3SCxTQUFTcEUsY0FDbkNwRCxFQUFPQSxFQUFNeUgsSUFBU3pILE1BQ2hCLEtBQU9zUixFQUFXeEMsRUFBYXhGLEtBQ3JDZ0ksRUFBVSxLQUFRL00sR0FBVytNLEVBQVUsS0FBUUQsRUFHL0MsT0FBU0UsRUFBVSxHQUFNRCxFQUFVLEdBT25DLEdBSEF4QyxFQUFheEYsR0FBUWlJLEVBR2RBLEVBQVUsR0FBTTVCLEVBQVMzUCxFQUFNbkIsRUFBU2dRLEdBQzlDLE9BQU8sRUFNWixPQUFPLEdBSVYsU0FBUzJDLEdBQWdCQyxHQUN4QixPQUFPQSxFQUFTeFMsT0FBUyxFQUN4QixTQUFVZSxFQUFNbkIsRUFBU2dRLEdBRXhCLElBREEsSUFBSS9RLEVBQUkyVCxFQUFTeFMsT0FDVG5CLEtBQ1AsSUFBTTJULEVBQVUzVCxHQUFLa0MsRUFBTW5CLEVBQVNnUSxHQUNuQyxPQUFPLEVBR1QsT0FBTyxHQUVSNEMsRUFBVSxHQVlaLFNBQVNDLEdBQVU5QixFQUFXN1AsRUFBSzBMLEVBQVE1TSxFQUFTZ1EsR0FPbkQsSUFOQSxJQUFJN08sRUFDSDJSLEVBQWUsR0FDZjdULEVBQUksRUFDSjJDLEVBQU1tUCxFQUFVM1EsT0FDaEIyUyxFQUFnQixNQUFQN1IsRUFFRmpDLEVBQUkyQyxFQUFLM0MsS0FDVGtDLEVBQU80UCxFQUFXOVIsTUFDbEIyTixJQUFVQSxFQUFRekwsRUFBTW5CLEVBQVNnUSxLQUN0QzhDLEVBQWFwVixLQUFNeUQsR0FDZDRSLEdBQ0o3UixFQUFJeEQsS0FBTXVCLEtBTWQsT0FBTzZULEVBR1IsU0FBU0UsR0FBWTlELEVBQVduUCxFQUFVK1EsRUFBU21DLEVBQVlDLEVBQVlDLEdBTzFFLE9BTktGLElBQWVBLEVBQVlwUSxLQUMvQm9RLEVBQWFELEdBQVlDLElBRXJCQyxJQUFlQSxFQUFZclEsS0FDL0JxUSxFQUFhRixHQUFZRSxFQUFZQyxJQUUvQnZJLElBQWMsU0FBVTNCLEVBQU12RixFQUFTMUQsRUFBU2dRLEdBQ3RELElBQUlvRCxFQUFNblUsRUFBR2tDLEVBQ1prUyxFQUFTLEdBQ1RDLEVBQVUsR0FDVkMsRUFBYzdQLEVBQVF0RCxPQUd0QlEsRUFBUXFJLEdBNUNYLFNBQTJCbEosRUFBVXlULEVBQVU5UCxHQUc5QyxJQUZBLElBQUl6RSxFQUFJLEVBQ1AyQyxFQUFNNFIsRUFBU3BULE9BQ1JuQixFQUFJMkMsRUFBSzNDLElBQ2hCdUYsR0FBUXpFLEVBQVV5VCxFQUFVdlUsR0FBS3lFLEdBRWxDLE9BQU9BLEVBc0NXK1AsQ0FDZjFULEdBQVksSUFDWkMsRUFBUTNCLFNBQVcsQ0FBRTJCLEdBQVlBLEVBQ2pDLElBSUQwVCxHQUFZeEUsSUFBZWpHLEdBQVNsSixFQUVuQ2EsRUFEQWlTLEdBQVVqUyxFQUFPeVMsRUFBUW5FLEVBQVdsUCxFQUFTZ1EsR0FHOUMyRCxFQUFhN0MsRUFHWm9DLElBQWdCakssRUFBT2lHLEVBQVlxRSxHQUFlTixHQUdqRCxHQUdBdlAsRUFDRGdRLEVBUUYsR0FMSzVDLEdBQ0pBLEVBQVM0QyxFQUFXQyxFQUFZM1QsRUFBU2dRLEdBSXJDaUQsRUFNSixJQUxBRyxFQUFPUCxHQUFVYyxFQUFZTCxHQUM3QkwsRUFBWUcsRUFBTSxHQUFJcFQsRUFBU2dRLEdBRy9CL1EsRUFBSW1VLEVBQUtoVCxPQUNEbkIsTUFDQWtDLEVBQU9pUyxFQUFNblUsTUFDbkIwVSxFQUFZTCxFQUFTclUsTUFBV3lVLEVBQVdKLEVBQVNyVSxJQUFRa0MsSUFLL0QsR0FBSzhILEdBQ0osR0FBS2lLLEdBQWNoRSxFQUFZLENBQzlCLEdBQUtnRSxFQUFhLENBS2pCLElBRkFFLEVBQU8sR0FDUG5VLEVBQUkwVSxFQUFXdlQsT0FDUG5CLE1BQ0FrQyxFQUFPd1MsRUFBWTFVLEtBR3pCbVUsRUFBSzFWLEtBQVFnVyxFQUFXelUsR0FBTWtDLEdBR2hDK1IsRUFBWSxLQUFRUyxFQUFhLEdBQU1QLEVBQU1wRCxHQUs5QyxJQURBL1EsRUFBSTBVLEVBQVd2VCxPQUNQbkIsTUFDQWtDLEVBQU93UyxFQUFZMVUsTUFDdkJtVSxFQUFPRixFQUFhdlYsRUFBU3NMLEVBQU05SCxHQUFTa1MsRUFBUXBVLEtBQVMsSUFFL0RnSyxFQUFNbUssS0FBWTFQLEVBQVMwUCxHQUFTalMsVUFPdkN3UyxFQUFhZCxHQUNaYyxJQUFlalEsRUFDZGlRLEVBQVczUixPQUFRdVIsRUFBYUksRUFBV3ZULFFBQzNDdVQsR0FFR1QsRUFDSkEsRUFBWSxLQUFNeFAsRUFBU2lRLEVBQVkzRCxHQUV2Q3RTLEVBQUtELE1BQU9pRyxFQUFTaVEsTUFNekIsU0FBU0MsR0FBbUJ6QixHQXlCM0IsSUF4QkEsSUFBSTBCLEVBQWMvQyxFQUFTalAsRUFDMUJELEVBQU11USxFQUFPL1IsT0FDYjBULEVBQWtCclAsRUFBS3dLLFNBQVVrRCxFQUFRLEdBQUkxVCxNQUM3Q3NWLEVBQW1CRCxHQUFtQnJQLEVBQUt3SyxTQUFVLEtBQ3JEaFEsRUFBSTZVLEVBQWtCLEVBQUksRUFHMUJFLEVBQWV2TCxJQUFlLFNBQVV0SCxHQUN2QyxPQUFPQSxJQUFTMFMsSUFDZEUsR0FBa0IsR0FDckJFLEVBQWtCeEwsSUFBZSxTQUFVdEgsR0FDMUMsT0FBT3hELEVBQVNrVyxFQUFjMVMsSUFBVSxJQUN0QzRTLEdBQWtCLEdBQ3JCbkIsRUFBVyxDQUFFLFNBQVV6UixFQUFNbkIsRUFBU2dRLEdBQ3JDLElBQUluUCxHQUFTaVQsSUFBcUI5RCxHQUFPaFEsSUFBWStFLE1BQ2xEOE8sRUFBZTdULEdBQVUzQixTQUMxQjJWLEVBQWM3UyxFQUFNbkIsRUFBU2dRLEdBQzdCaUUsRUFBaUI5UyxFQUFNbkIsRUFBU2dRLElBSWxDLE9BREE2RCxFQUFlLEtBQ1JoVCxJQUdENUIsRUFBSTJDLEVBQUszQyxJQUNoQixHQUFPNlIsRUFBVXJNLEVBQUt3SyxTQUFVa0QsRUFBUWxULEdBQUlSLE1BQzNDbVUsRUFBVyxDQUFFbkssR0FBZWtLLEdBQWdCQyxHQUFZOUIsUUFDbEQsQ0FJTixJQUhBQSxFQUFVck0sRUFBS21JLE9BQVF1RixFQUFRbFQsR0FBSVIsTUFBT2hCLE1BQU8sS0FBTTBVLEVBQVFsVCxHQUFJNkUsVUFHckRqQixHQUFZLENBSXpCLElBREFoQixJQUFNNUMsRUFDRTRDLEVBQUlELElBQ042QyxFQUFLd0ssU0FBVWtELEVBQVF0USxHQUFJcEQsTUFEaEJvRCxLQUtqQixPQUFPbVIsR0FDTi9ULEVBQUksR0FBSzBULEdBQWdCQyxHQUN6QjNULEVBQUksR0FBS2lMLEdBR1RpSSxFQUNFL1UsTUFBTyxFQUFHNkIsRUFBSSxHQUNkekIsT0FBUSxDQUFFeUcsTUFBZ0MsTUFBekJrTyxFQUFRbFQsRUFBSSxHQUFJUixLQUFlLElBQU0sTUFDdER1RSxRQUFTOEQsRUFBTyxNQUNsQmdLLEVBQ0E3UixFQUFJNEMsR0FBSytSLEdBQW1CekIsRUFBTy9VLE1BQU82QixFQUFHNEMsSUFDN0NBLEVBQUlELEdBQU9nUyxHQUFxQnpCLEVBQVNBLEVBQU8vVSxNQUFPeUUsSUFDdkRBLEVBQUlELEdBQU9zSSxHQUFZaUksSUFHekJTLEVBQVNsVixLQUFNb1QsR0FJakIsT0FBTzZCLEdBQWdCQyxHQW9UeEIsT0F0cEJBakMsR0FBV3RRLFVBQVlvRSxFQUFLeVAsUUFBVXpQLEVBQUtrQyxRQUMzQ2xDLEVBQUtrTSxXQUFhLElBQUlBLEdBRXRCL0wsRUFBV0osR0FBT0ksU0FBVyxTQUFVN0UsRUFBVW9VLEdBQ2hELElBQUl0RCxFQUFTekgsRUFBTytJLEVBQVExVCxFQUMzQjJWLEVBQU8vSyxFQUFRZ0wsRUFDZkMsRUFBU3hPLEVBQVkvRixFQUFXLEtBRWpDLEdBQUt1VSxFQUNKLE9BQU9ILEVBQVksRUFBSUcsRUFBT2xYLE1BQU8sR0FPdEMsSUFKQWdYLEVBQVFyVSxFQUNSc0osRUFBUyxHQUNUZ0wsRUFBYTVQLEVBQUt5SyxVQUVWa0YsR0FBUSxDQTJCZixJQUFNM1YsS0F4QkFvUyxLQUFhekgsRUFBUXJDLEVBQU8wQyxLQUFNMkssTUFDbENoTCxJQUdKZ0wsRUFBUUEsRUFBTWhYLE1BQU9nTSxFQUFPLEdBQUloSixTQUFZZ1UsR0FFN0MvSyxFQUFPM0wsS0FBUXlVLEVBQVMsS0FHekJ0QixHQUFVLEdBR0h6SCxFQUFRcEMsRUFBYXlDLEtBQU0ySyxNQUNqQ3ZELEVBQVV6SCxFQUFNdUIsUUFDaEJ3SCxFQUFPelUsS0FBTSxDQUNadUcsTUFBTzRNLEVBR1BwUyxLQUFNMkssRUFBTyxHQUFJcEcsUUFBUzhELEVBQU8sT0FFbENzTixFQUFRQSxFQUFNaFgsTUFBT3lULEVBQVF6USxTQUloQnFFLEVBQUttSSxTQUNYeEQsRUFBUWhDLEVBQVczSSxHQUFPZ0wsS0FBTTJLLEtBQWdCQyxFQUFZNVYsTUFDaEUySyxFQUFRaUwsRUFBWTVWLEdBQVEySyxNQUM5QnlILEVBQVV6SCxFQUFNdUIsUUFDaEJ3SCxFQUFPelUsS0FBTSxDQUNadUcsTUFBTzRNLEVBQ1BwUyxLQUFNQSxFQUNOcUYsUUFBU3NGLElBRVZnTCxFQUFRQSxFQUFNaFgsTUFBT3lULEVBQVF6USxTQUkvQixJQUFNeVEsRUFDTCxNQU9GLE9BQU9zRCxFQUNOQyxFQUFNaFUsT0FDTmdVLEVBQ0M1UCxHQUFPdEIsTUFBT25ELEdBR2QrRixFQUFZL0YsRUFBVXNKLEdBQVNqTSxNQUFPLElBNFp6Q3lILEVBQVVMLEdBQU9LLFFBQVUsU0FBVTlFLEVBQVVxSixHQUM5QyxJQUFJbkssRUFDSHNWLEVBQWMsR0FDZEMsRUFBa0IsR0FDbEJGLEVBQVN2TyxFQUFlaEcsRUFBVyxLQUVwQyxJQUFNdVUsRUFBUyxDQU9kLElBSk1sTCxJQUNMQSxFQUFReEUsRUFBVTdFLElBRW5CZCxFQUFJbUssRUFBTWhKLE9BQ0ZuQixNQUNQcVYsRUFBU1YsR0FBbUJ4SyxFQUFPbkssS0FDdEI0RCxHQUNaMFIsRUFBWTdXLEtBQU00VyxHQUVsQkUsRUFBZ0I5VyxLQUFNNFcsR0FLeEJBLEVBQVN2TyxFQUNSaEcsRUFySkgsU0FBbUN5VSxFQUFpQkQsR0FDbkQsSUFBSUUsRUFBUUYsRUFBWW5VLE9BQVMsRUFDaENzVSxFQUFZRixFQUFnQnBVLE9BQVMsRUFDckN1VSxFQUFlLFNBQVUxTCxFQUFNakosRUFBU2dRLEVBQUt0TSxFQUFTa1IsR0FDckQsSUFBSXpULEVBQU1VLEVBQUdpUCxFQUNaK0QsRUFBZSxFQUNmNVYsRUFBSSxJQUNKOFIsRUFBWTlILEdBQVEsR0FDcEI2TCxFQUFhLEdBQ2JDLEVBQWdCaFEsRUFHaEJuRSxFQUFRcUksR0FBUXlMLEdBQWFqUSxFQUFLcUksS0FBWSxJQUFHLElBQUs4SCxHQUd0REksRUFBa0J0UCxHQUE0QixNQUFqQnFQLEVBQXdCLEVBQUlqUyxLQUFLQyxVQUFZLEdBQzFFbkIsRUFBTWhCLEVBQU1SLE9BY2IsSUFaS3dVLElBTUo3UCxFQUFtQi9FLEdBQVd0RCxHQUFZc0QsR0FBVzRVLEdBTTlDM1YsSUFBTTJDLEdBQWdDLE9BQXZCVCxFQUFPUCxFQUFPM0IsSUFBZUEsSUFBTSxDQUN6RCxHQUFLeVYsR0FBYXZULEVBQU8sQ0FXeEIsSUFWQVUsRUFBSSxFQU1FN0IsR0FBV21CLEVBQUtxSSxlQUFpQjlNLElBQ3RDd0ksRUFBYS9ELEdBQ2I2TyxHQUFPNUssR0FFRTBMLEVBQVUwRCxFQUFpQjNTLE1BQ3BDLEdBQUtpUCxFQUFTM1AsRUFBTW5CLEdBQVd0RCxFQUFVc1QsR0FBUSxDQUNoRHRNLEVBQVFoRyxLQUFNeUQsR0FDZCxNQUdHeVQsSUFDSmxQLEVBQVVzUCxHQUtQUCxLQUdHdFQsR0FBUTJQLEdBQVczUCxJQUN6QjBULElBSUk1TCxHQUNKOEgsRUFBVXJULEtBQU15RCxJQWdCbkIsR0FUQTBULEdBQWdCNVYsRUFTWHdWLEdBQVN4VixJQUFNNFYsRUFBZSxDQUVsQyxJQURBaFQsRUFBSSxFQUNNaVAsRUFBVXlELEVBQWExUyxNQUNoQ2lQLEVBQVNDLEVBQVcrRCxFQUFZOVUsRUFBU2dRLEdBRzFDLEdBQUsvRyxFQUFPLENBR1gsR0FBSzRMLEVBQWUsRUFDbkIsS0FBUTVWLEtBQ0M4UixFQUFXOVIsSUFBTzZWLEVBQVk3VixLQUNyQzZWLEVBQVk3VixHQUFNbUgsRUFBSTdJLEtBQU1tRyxJQU0vQm9SLEVBQWFqQyxHQUFVaUMsR0FJeEJwWCxFQUFLRCxNQUFPaUcsRUFBU29SLEdBR2hCRixJQUFjM0wsR0FBUTZMLEVBQVcxVSxPQUFTLEdBQzVDeVUsRUFBZU4sRUFBWW5VLE9BQVcsR0FFeENvRSxHQUFPZ0ssV0FBWTlLLEdBVXJCLE9BTEtrUixJQUNKbFAsRUFBVXNQLEVBQ1ZqUSxFQUFtQmdRLEdBR2JoRSxHQUdULE9BQU8wRCxFQUNON0osR0FBYytKLEdBQ2RBLEVBNEJDTSxDQUEwQlQsRUFBaUJELElBSTVDRCxFQUFPdlUsU0FBV0EsRUFFbkIsT0FBT3VVLEdBWVJ4UCxFQUFTTixHQUFPTSxPQUFTLFNBQVUvRSxFQUFVQyxFQUFTMEQsRUFBU3VGLEdBQzlELElBQUloSyxFQUFHa1QsRUFBUStDLEVBQU96VyxFQUFNcU8sRUFDM0JxSSxFQUErQixtQkFBYnBWLEdBQTJCQSxFQUM3Q3FKLEdBQVNILEdBQVFyRSxFQUFZN0UsRUFBV29WLEVBQVNwVixVQUFZQSxHQU05RCxHQUpBMkQsRUFBVUEsR0FBVyxHQUlDLElBQWpCMEYsRUFBTWhKLE9BQWUsQ0FJekIsSUFEQStSLEVBQVMvSSxFQUFPLEdBQU1BLEVBQU8sR0FBSWhNLE1BQU8sSUFDNUJnRCxPQUFTLEdBQXNDLFFBQS9COFUsRUFBUS9DLEVBQVEsSUFBTTFULE1BQzVCLElBQXJCdUIsRUFBUTNCLFVBQWtCK0csR0FBa0JYLEVBQUt3SyxTQUFVa0QsRUFBUSxHQUFJMVQsTUFBUyxDQUloRixLQUZBdUIsR0FBWXlFLEVBQUtxSSxLQUFXLEdBQUdvSSxFQUFNcFIsUUFBUyxHQUM1Q2QsUUFBUzJFLEdBQVdDLElBQWE1SCxJQUFhLElBQU0sSUFFckQsT0FBTzBELEVBR0l5UixJQUNYblYsRUFBVUEsRUFBUU4sWUFHbkJLLEVBQVdBLEVBQVMzQyxNQUFPK1UsRUFBT3hILFFBQVExRyxNQUFNN0QsUUFLakQsSUFEQW5CLEVBQUltSSxFQUEwQixhQUFFMkMsS0FBTWhLLEdBQWEsRUFBSW9TLEVBQU8vUixPQUN0RG5CLE1BQ1BpVyxFQUFRL0MsRUFBUWxULElBR1h3RixFQUFLd0ssU0FBWXhRLEVBQU95VyxFQUFNelcsUUFHbkMsSUFBT3FPLEVBQU9ySSxFQUFLcUksS0FBTXJPLE1BR2pCd0ssRUFBTzZELEVBQ2JvSSxFQUFNcFIsUUFBUyxHQUFJZCxRQUFTMkUsR0FBV0MsSUFDdkNGLEdBQVNxQyxLQUFNb0ksRUFBUSxHQUFJMVQsT0FBVXVMLEdBQWFoSyxFQUFRTixhQUN6RE0sSUFDSSxDQUtMLEdBRkFtUyxFQUFPblEsT0FBUS9DLEVBQUcsS0FDbEJjLEVBQVdrSixFQUFLN0ksUUFBVThKLEdBQVlpSSxJQUdyQyxPQURBelUsRUFBS0QsTUFBT2lHLEVBQVN1RixHQUNkdkYsRUFHUixPQWVKLE9BUEV5UixHQUFZdFEsRUFBUzlFLEVBQVVxSixJQUNoQ0gsRUFDQWpKLEdBQ0NvRixFQUNEMUIsR0FDQzFELEdBQVcwSCxHQUFTcUMsS0FBTWhLLElBQWNpSyxHQUFhaEssRUFBUU4sYUFBZ0JNLEdBRXhFMEQsR0FNUnhGLEVBQVF5USxXQUFhOUwsRUFBUXdCLE1BQU8sSUFBS3RDLEtBQU1rRSxHQUFZa0UsS0FBTSxNQUFTdEgsRUFJMUUzRSxFQUFRd1EsbUJBQXFCekosRUFHN0JDLElBSUFoSCxFQUFRNFAsYUFBZWpELElBQVEsU0FBVUMsR0FHeEMsT0FBNEUsRUFBckVBLEVBQUc0Qyx3QkFBeUJoUixFQUFTMEMsY0FBZSxnQkFNdER5TCxJQUFRLFNBQVVDLEdBRXZCLE9BREFBLEVBQUdxQyxVQUFZLG1CQUNpQyxNQUF6Q3JDLEVBQUcrRCxXQUFXdlAsYUFBYyxZQUVuQ3lMLEdBQVcsMEJBQTBCLFNBQVU1SixFQUFNZ0IsRUFBTXdDLEdBQzFELElBQU1BLEVBQ0wsT0FBT3hELEVBQUs3QixhQUFjNkMsRUFBNkIsU0FBdkJBLEVBQUtvQyxjQUEyQixFQUFJLE1BT2pFckcsRUFBUXdJLFlBQWVtRSxJQUFRLFNBQVVDLEdBRzlDLE9BRkFBLEVBQUdxQyxVQUFZLFdBQ2ZyQyxFQUFHK0QsV0FBV3RQLGFBQWMsUUFBUyxJQUNZLEtBQTFDdUwsRUFBRytELFdBQVd2UCxhQUFjLGFBRW5DeUwsR0FBVyxTQUFTLFNBQVU1SixFQUFNaVUsRUFBT3pRLEdBQzFDLElBQU1BLEdBQXlDLFVBQWhDeEQsRUFBS3dILFNBQVNwRSxjQUM1QixPQUFPcEQsRUFBS2tVLGdCQU9UeEssSUFBUSxTQUFVQyxHQUN2QixPQUF3QyxNQUFqQ0EsRUFBR3hMLGFBQWMsZ0JBRXhCeUwsR0FBV3hFLEdBQVUsU0FBVXBGLEVBQU1nQixFQUFNd0MsR0FDMUMsSUFBSXpGLEVBQ0osSUFBTXlGLEVBQ0wsT0FBd0IsSUFBakJ4RCxFQUFNZ0IsR0FBa0JBLEVBQUtvQyxlQUNqQ3JGLEVBQU1pQyxFQUFLNEwsaUJBQWtCNUssS0FBWWpELEVBQUlvUCxVQUM5Q3BQLEVBQUkrRSxNQUNKLFFBS0VPLEdBMTRFUCxDQTQ0RUszSCxHQUlMaUQsRUFBT2dOLEtBQU90SSxFQUNkMUUsRUFBT3FPLEtBQU8zSixFQUFPdUssVUFHckJqUCxFQUFPcU8sS0FBTSxLQUFRck8sRUFBT3FPLEtBQUt4SCxRQUNqQzdHLEVBQU8wTyxXQUFhMU8sRUFBT3dWLE9BQVM5USxFQUFPZ0ssV0FDM0MxTyxFQUFPVCxLQUFPbUYsRUFBT0UsUUFDckI1RSxFQUFPeVYsU0FBVy9RLEVBQU9HLE1BQ3pCN0UsRUFBT3lGLFNBQVdmLEVBQU9lLFNBQ3pCekYsRUFBTzBWLGVBQWlCaFIsRUFBT3FELE9BSy9CLElBQUllLEVBQU0sU0FBVXpILEVBQU15SCxFQUFLNk0sR0FJOUIsSUFIQSxJQUFJNUUsRUFBVSxHQUNiNkUsT0FBcUI5UyxJQUFWNlMsR0FFRnRVLEVBQU9BLEVBQU15SCxLQUE2QixJQUFsQnpILEVBQUs5QyxVQUN0QyxHQUF1QixJQUFsQjhDLEVBQUs5QyxTQUFpQixDQUMxQixHQUFLcVgsR0FBWTVWLEVBQVFxQixHQUFPd1UsR0FBSUYsR0FDbkMsTUFFRDVFLEVBQVFuVCxLQUFNeUQsR0FHaEIsT0FBTzBQLEdBSUorRSxFQUFXLFNBQVVDLEVBQUcxVSxHQUczQixJQUZBLElBQUkwUCxFQUFVLEdBRU5nRixFQUFHQSxFQUFJQSxFQUFFdEssWUFDSSxJQUFmc0ssRUFBRXhYLFVBQWtCd1gsSUFBTTFVLEdBQzlCMFAsRUFBUW5ULEtBQU1tWSxHQUloQixPQUFPaEYsR0FJSmlGLEVBQWdCaFcsRUFBT3FPLEtBQUsvRSxNQUFNMk0sYUFJdEMsU0FBU3BOLEVBQVV4SCxFQUFNZ0IsR0FFeEIsT0FBT2hCLEVBQUt3SCxVQUFZeEgsRUFBS3dILFNBQVNwRSxnQkFBa0JwQyxFQUFLb0MsY0FHOUQsSUFBSXlSLEVBQWEsa0VBS2pCLFNBQVNDLEVBQVE3SCxFQUFVOEgsRUFBV0MsR0FDckMsT0FBS2hZLEVBQVkrWCxHQUNUcFcsRUFBTzJCLEtBQU0yTSxHQUFVLFNBQVVqTixFQUFNbEMsR0FDN0MsUUFBU2lYLEVBQVUzWSxLQUFNNEQsRUFBTWxDLEVBQUdrQyxLQUFXZ1YsS0FLMUNELEVBQVU3WCxTQUNQeUIsRUFBTzJCLEtBQU0yTSxHQUFVLFNBQVVqTixHQUN2QyxPQUFTQSxJQUFTK1UsSUFBZ0JDLEtBS1YsaUJBQWRELEVBQ0pwVyxFQUFPMkIsS0FBTTJNLEdBQVUsU0FBVWpOLEdBQ3ZDLE9BQVN4RCxFQUFRSixLQUFNMlksRUFBVy9VLElBQVUsSUFBUWdWLEtBSy9DclcsRUFBTzhNLE9BQVFzSixFQUFXOUgsRUFBVStILEdBRzVDclcsRUFBTzhNLE9BQVMsU0FBVXVCLEVBQU12TixFQUFPdVYsR0FDdEMsSUFBSWhWLEVBQU9QLEVBQU8sR0FNbEIsT0FKS3VWLElBQ0poSSxFQUFPLFFBQVVBLEVBQU8sS0FHSCxJQUFqQnZOLEVBQU1SLFFBQWtDLElBQWxCZSxFQUFLOUMsU0FDeEJ5QixFQUFPZ04sS0FBS00sZ0JBQWlCak0sRUFBTWdOLEdBQVMsQ0FBRWhOLEdBQVMsR0FHeERyQixFQUFPZ04sS0FBS2hKLFFBQVNxSyxFQUFNck8sRUFBTzJCLEtBQU1iLEdBQU8sU0FBVU8sR0FDL0QsT0FBeUIsSUFBbEJBLEVBQUs5QyxjQUlkeUIsRUFBT0csR0FBR2dDLE9BQVEsQ0FDakI2SyxLQUFNLFNBQVUvTSxHQUNmLElBQUlkLEVBQUc0QixFQUNOZSxFQUFNOUUsS0FBS3NELE9BQ1g1RCxFQUFPTSxLQUVSLEdBQXlCLGlCQUFiaUQsRUFDWCxPQUFPakQsS0FBSzZELFVBQVdiLEVBQVFDLEdBQVc2TSxRQUFRLFdBQ2pELElBQU0zTixFQUFJLEVBQUdBLEVBQUkyQyxFQUFLM0MsSUFDckIsR0FBS2EsRUFBT3lGLFNBQVUvSSxFQUFNeUMsR0FBS25DLE1BQ2hDLE9BQU8sTUFRWCxJQUZBK0QsRUFBTS9ELEtBQUs2RCxVQUFXLElBRWhCMUIsRUFBSSxFQUFHQSxFQUFJMkMsRUFBSzNDLElBQ3JCYSxFQUFPZ04sS0FBTS9NLEVBQVV2RCxFQUFNeUMsR0FBSzRCLEdBR25DLE9BQU9lLEVBQU0sRUFBSTlCLEVBQU8wTyxXQUFZM04sR0FBUUEsR0FFN0MrTCxPQUFRLFNBQVU3TSxHQUNqQixPQUFPakQsS0FBSzZELFVBQVdzVixFQUFRblosS0FBTWlELEdBQVksSUFBSSxLQUV0RG9XLElBQUssU0FBVXBXLEdBQ2QsT0FBT2pELEtBQUs2RCxVQUFXc1YsRUFBUW5aLEtBQU1pRCxHQUFZLElBQUksS0FFdEQ0VixHQUFJLFNBQVU1VixHQUNiLFFBQVNrVyxFQUNSblosS0FJb0IsaUJBQWJpRCxHQUF5QitWLEVBQWMvTCxLQUFNaEssR0FDbkRELEVBQVFDLEdBQ1JBLEdBQVksSUFDYixHQUNDSyxVQVNKLElBQUlnVyxFQU1IM08sRUFBYSx1Q0FFTjNILEVBQU9HLEdBQUdDLEtBQU8sU0FBVUgsRUFBVUMsRUFBUzlELEdBQ3BELElBQUlrTixFQUFPakksRUFHWCxJQUFNcEIsRUFDTCxPQUFPakQsS0FRUixHQUhBWixFQUFPQSxHQUFRa2EsRUFHVSxpQkFBYnJXLEVBQXdCLENBYW5DLEtBUENxSixFQUxzQixNQUFsQnJKLEVBQVUsSUFDc0IsTUFBcENBLEVBQVVBLEVBQVNLLE9BQVMsSUFDNUJMLEVBQVNLLFFBQVUsRUFHWCxDQUFFLEtBQU1MLEVBQVUsTUFHbEIwSCxFQUFXZ0MsS0FBTTFKLE1BSVZxSixFQUFPLElBQVFwSixFQTZDeEIsT0FBTUEsR0FBV0EsRUFBUU0sUUFDdEJOLEdBQVc5RCxHQUFPNFEsS0FBTS9NLEdBSzFCakQsS0FBS3lELFlBQWFQLEdBQVU4TSxLQUFNL00sR0FoRHpDLEdBQUtxSixFQUFPLEdBQU0sQ0FZakIsR0FYQXBKLEVBQVVBLGFBQW1CRixFQUFTRSxFQUFTLEdBQU1BLEVBSXJERixFQUFPZ0IsTUFBT2hFLEtBQU1nRCxFQUFPdVcsVUFDMUJqTixFQUFPLEdBQ1BwSixHQUFXQSxFQUFRM0IsU0FBVzJCLEVBQVF3SixlQUFpQnhKLEVBQVV0RCxHQUNqRSxJQUlJc1osRUFBV2pNLEtBQU1YLEVBQU8sS0FBU3RKLEVBQU8yQyxjQUFlekMsR0FDM0QsSUFBTW9KLEtBQVNwSixFQUdUN0IsRUFBWXJCLEtBQU1zTSxJQUN0QnRNLEtBQU1zTSxHQUFTcEosRUFBU29KLElBSXhCdE0sS0FBS3VSLEtBQU1qRixFQUFPcEosRUFBU29KLElBSzlCLE9BQU90TSxLQVlQLE9BUkFxRSxFQUFPekUsRUFBU2dOLGVBQWdCTixFQUFPLE9BS3RDdE0sS0FBTSxHQUFNcUUsRUFDWnJFLEtBQUtzRCxPQUFTLEdBRVJ0RCxLQWNILE9BQUtpRCxFQUFTMUIsVUFDcEJ2QixLQUFNLEdBQU1pRCxFQUNaakQsS0FBS3NELE9BQVMsRUFDUHRELE1BSUlxQixFQUFZNEIsUUFDRDZDLElBQWYxRyxFQUFLb2EsTUFDWHBhLEVBQUtvYSxNQUFPdlcsR0FHWkEsRUFBVUQsR0FHTEEsRUFBTzJELFVBQVcxRCxFQUFVakQsUUFJaEN1RCxVQUFZUCxFQUFPRyxHQUd4Qm1XLEVBQWF0VyxFQUFRcEQsR0FHckIsSUFBSTZaLEVBQWUsaUNBR2xCQyxFQUFtQixDQUNsQkMsVUFBVSxFQUNWQyxVQUFVLEVBQ1Y3TixNQUFNLEVBQ044TixNQUFNLEdBb0ZSLFNBQVNDLEVBQVN4TCxFQUFLeEMsR0FDdEIsTUFBVXdDLEVBQU1BLEVBQUt4QyxLQUE0QixJQUFqQndDLEVBQUkvTSxXQUNwQyxPQUFPK00sRUFuRlJ0TCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQjRVLElBQUssU0FBVXRVLEdBQ2QsSUFBSXVVLEVBQVVoWCxFQUFReUMsRUFBUXpGLE1BQzdCaWEsRUFBSUQsRUFBUTFXLE9BRWIsT0FBT3RELEtBQUs4UCxRQUFRLFdBRW5CLElBREEsSUFBSTNOLEVBQUksRUFDQUEsRUFBSThYLEVBQUc5WCxJQUNkLEdBQUthLEVBQU95RixTQUFVekksS0FBTWdhLEVBQVM3WCxJQUNwQyxPQUFPLE1BTVgrWCxRQUFTLFNBQVVqSSxFQUFXL08sR0FDN0IsSUFBSW9MLEVBQ0huTSxFQUFJLEVBQ0o4WCxFQUFJamEsS0FBS3NELE9BQ1R5USxFQUFVLEdBQ1ZpRyxFQUErQixpQkFBZC9ILEdBQTBCalAsRUFBUWlQLEdBR3BELElBQU0rRyxFQUFjL0wsS0FBTWdGLEdBQ3pCLEtBQVE5UCxFQUFJOFgsRUFBRzlYLElBQ2QsSUFBTW1NLEVBQU10TyxLQUFNbUMsR0FBS21NLEdBQU9BLElBQVFwTCxFQUFTb0wsRUFBTUEsRUFBSTFMLFdBR3hELEdBQUswTCxFQUFJL00sU0FBVyxLQUFReVksRUFDM0JBLEVBQVFHLE1BQU83TCxJQUFTLEVBR1AsSUFBakJBLEVBQUkvTSxVQUNIeUIsRUFBT2dOLEtBQUtNLGdCQUFpQmhDLEVBQUsyRCxJQUFnQixDQUVuRDhCLEVBQVFuVCxLQUFNME4sR0FDZCxNQU1KLE9BQU90TyxLQUFLNkQsVUFBV2tRLEVBQVF6USxPQUFTLEVBQUlOLEVBQU8wTyxXQUFZcUMsR0FBWUEsSUFJNUVvRyxNQUFPLFNBQVU5VixHQUdoQixPQUFNQSxFQUtlLGlCQUFUQSxFQUNKeEQsRUFBUUosS0FBTXVDLEVBQVFxQixHQUFRckUsS0FBTSxJQUlyQ2EsRUFBUUosS0FBTVQsS0FHcEJxRSxFQUFLYixPQUFTYSxFQUFNLEdBQU1BLEdBWmpCckUsS0FBTSxJQUFPQSxLQUFNLEdBQUk0QyxXQUFlNUMsS0FBS3VFLFFBQVE2VixVQUFVOVcsUUFBVSxHQWdCbEYrVyxJQUFLLFNBQVVwWCxFQUFVQyxHQUN4QixPQUFPbEQsS0FBSzZELFVBQ1hiLEVBQU8wTyxXQUNOMU8sRUFBT2dCLE1BQU9oRSxLQUFLMkQsTUFBT1gsRUFBUUMsRUFBVUMsT0FLL0NvWCxRQUFTLFNBQVVyWCxHQUNsQixPQUFPakQsS0FBS3FhLElBQWlCLE1BQVpwWCxFQUNoQmpELEtBQUtpRSxXQUFhakUsS0FBS2lFLFdBQVc2TCxPQUFRN00sT0FVN0NELEVBQU9rQixLQUFNLENBQ1pxUCxPQUFRLFNBQVVsUCxHQUNqQixJQUFJa1AsRUFBU2xQLEVBQUt6QixXQUNsQixPQUFPMlEsR0FBOEIsS0FBcEJBLEVBQU9oUyxTQUFrQmdTLEVBQVMsTUFFcERnSCxRQUFTLFNBQVVsVyxHQUNsQixPQUFPeUgsRUFBS3pILEVBQU0sZUFFbkJtVyxhQUFjLFNBQVVuVyxFQUFNbUQsRUFBSW1SLEdBQ2pDLE9BQU83TSxFQUFLekgsRUFBTSxhQUFjc1UsSUFFakM1TSxLQUFNLFNBQVUxSCxHQUNmLE9BQU95VixFQUFTelYsRUFBTSxnQkFFdkJ3VixLQUFNLFNBQVV4VixHQUNmLE9BQU95VixFQUFTelYsRUFBTSxvQkFFdkJvVyxRQUFTLFNBQVVwVyxHQUNsQixPQUFPeUgsRUFBS3pILEVBQU0sZ0JBRW5CK1YsUUFBUyxTQUFVL1YsR0FDbEIsT0FBT3lILEVBQUt6SCxFQUFNLG9CQUVuQnFXLFVBQVcsU0FBVXJXLEVBQU1tRCxFQUFJbVIsR0FDOUIsT0FBTzdNLEVBQUt6SCxFQUFNLGNBQWVzVSxJQUVsQ2dDLFVBQVcsU0FBVXRXLEVBQU1tRCxFQUFJbVIsR0FDOUIsT0FBTzdNLEVBQUt6SCxFQUFNLGtCQUFtQnNVLElBRXRDRyxTQUFVLFNBQVV6VSxHQUNuQixPQUFPeVUsR0FBWXpVLEVBQUt6QixZQUFjLElBQUttUCxXQUFZMU4sSUFFeERzVixTQUFVLFNBQVV0VixHQUNuQixPQUFPeVUsRUFBVXpVLEVBQUswTixhQUV2QjZILFNBQVUsU0FBVXZWLEdBQ25CLE9BQTZCLE1BQXhCQSxFQUFLdVcsaUJBS1R6YSxFQUFVa0UsRUFBS3VXLGlCQUVSdlcsRUFBS3VXLGlCQU1SL08sRUFBVXhILEVBQU0sY0FDcEJBLEVBQU9BLEVBQUt3VyxTQUFXeFcsR0FHakJyQixFQUFPZ0IsTUFBTyxHQUFJSyxFQUFLMkgsZ0JBRTdCLFNBQVUzRyxFQUFNbEMsR0FDbEJILEVBQU9HLEdBQUlrQyxHQUFTLFNBQVVzVCxFQUFPMVYsR0FDcEMsSUFBSThRLEVBQVUvUSxFQUFPb0IsSUFBS3BFLEtBQU1tRCxFQUFJd1YsR0F1QnBDLE1BckIwQixVQUFyQnRULEVBQUsvRSxPQUFRLEtBQ2pCMkMsRUFBVzBWLEdBR1AxVixHQUFnQyxpQkFBYkEsSUFDdkI4USxFQUFVL1EsRUFBTzhNLE9BQVE3TSxFQUFVOFEsSUFHL0IvVCxLQUFLc0QsT0FBUyxJQUdab1csRUFBa0JyVSxJQUN2QnJDLEVBQU8wTyxXQUFZcUMsR0FJZjBGLEVBQWF4TSxLQUFNNUgsSUFDdkIwTyxFQUFRK0csV0FJSDlhLEtBQUs2RCxVQUFXa1EsT0FHekIsSUFBSWdILEVBQWdCLG9CQXNPcEIsU0FBU0MsRUFBVUMsR0FDbEIsT0FBT0EsRUFFUixTQUFTQyxFQUFTQyxHQUNqQixNQUFNQSxFQUdQLFNBQVNDLEVBQVlqVSxFQUFPa1UsRUFBU0MsRUFBUUMsR0FDNUMsSUFBSUMsRUFFSixJQUdNclUsR0FBUzlGLEVBQWNtYSxFQUFTclUsRUFBTXNVLFNBQzFDRCxFQUFPL2EsS0FBTTBHLEdBQVEwQixLQUFNd1MsR0FBVUssS0FBTUosR0FHaENuVSxHQUFTOUYsRUFBY21hLEVBQVNyVSxFQUFNd1UsTUFDakRILEVBQU8vYSxLQUFNMEcsRUFBT2tVLEVBQVNDLEdBUTdCRCxFQUFRMWEsV0FBT21GLEVBQVcsQ0FBRXFCLEdBQVE3RyxNQUFPaWIsSUFNM0MsTUFBUXBVLEdBSVRtVSxFQUFPM2EsV0FBT21GLEVBQVcsQ0FBRXFCLEtBdk83Qm5FLEVBQU80WSxVQUFZLFNBQVV4VyxHQUk1QkEsRUFBNkIsaUJBQVpBLEVBbENsQixTQUF3QkEsR0FDdkIsSUFBSXlXLEVBQVMsR0FJYixPQUhBN1ksRUFBT2tCLEtBQU1rQixFQUFRa0gsTUFBT3lPLElBQW1CLElBQUksU0FBVWUsRUFBR0MsR0FDL0RGLEVBQVFFLElBQVMsS0FFWEYsRUE4Qk5HLENBQWU1VyxHQUNmcEMsRUFBT21DLE9BQVEsR0FBSUMsR0FFcEIsSUFDQzZXLEVBR0FDLEVBR0FDLEVBR0FDLEVBR0E1UyxFQUFPLEdBR1A2UyxFQUFRLEdBR1JDLEdBQWUsRUFHZkMsRUFBTyxXQVFOLElBTEFILEVBQVNBLEdBQVVoWCxFQUFRb1gsS0FJM0JMLEVBQVFGLEdBQVMsRUFDVEksRUFBTS9ZLE9BQVFnWixHQUFlLEVBRXBDLElBREFKLEVBQVNHLEVBQU14TyxVQUNMeU8sRUFBYzlTLEVBQUtsRyxTQUdtQyxJQUExRGtHLEVBQU04UyxHQUFjM2IsTUFBT3ViLEVBQVEsR0FBS0EsRUFBUSxLQUNwRDlXLEVBQVFxWCxjQUdSSCxFQUFjOVMsRUFBS2xHLE9BQ25CNFksR0FBUyxHQU1OOVcsRUFBUThXLFNBQ2JBLEdBQVMsR0FHVkQsR0FBUyxFQUdKRyxJQUlINVMsRUFESTBTLEVBQ0csR0FJQSxLQU1WeGMsRUFBTyxDQUdOMmEsSUFBSyxXQTJCSixPQTFCSzdRLElBR0MwUyxJQUFXRCxJQUNmSyxFQUFjOVMsRUFBS2xHLE9BQVMsRUFDNUIrWSxFQUFNemIsS0FBTXNiLElBR2IsU0FBVzdCLEVBQUt6RyxHQUNmNVEsRUFBT2tCLEtBQU0wUCxHQUFNLFNBQVVrSSxFQUFHNVUsR0FDMUI3RixFQUFZNkYsR0FDVjlCLEVBQVFvVCxRQUFXOVksRUFBS3FhLElBQUs3UyxJQUNsQ3NDLEVBQUs1SSxLQUFNc0csR0FFREEsR0FBT0EsRUFBSTVELFFBQTRCLFdBQWxCUixFQUFRb0UsSUFHeENtVCxFQUFLblQsTUFUUixDQVlLNUMsV0FFQTRYLElBQVdELEdBQ2ZNLEtBR0t2YyxNQUlSMGMsT0FBUSxXQVlQLE9BWEExWixFQUFPa0IsS0FBTUksV0FBVyxTQUFVd1gsRUFBRzVVLEdBRXBDLElBREEsSUFBSWlULEdBQ01BLEVBQVFuWCxFQUFPNkQsUUFBU0ssRUFBS3NDLEVBQU0yUSxLQUFhLEdBQ3pEM1EsRUFBS3RFLE9BQVFpVixFQUFPLEdBR2ZBLEdBQVNtQyxHQUNiQSxPQUlJdGMsTUFLUitaLElBQUssU0FBVTVXLEdBQ2QsT0FBT0EsRUFDTkgsRUFBTzZELFFBQVMxRCxFQUFJcUcsSUFBVSxFQUM5QkEsRUFBS2xHLE9BQVMsR0FJaEJxWixNQUFPLFdBSU4sT0FIS25ULElBQ0pBLEVBQU8sSUFFRHhKLE1BTVI0YyxRQUFTLFdBR1IsT0FGQVIsRUFBU0MsRUFBUSxHQUNqQjdTLEVBQU8wUyxFQUFTLEdBQ1RsYyxNQUVSNEwsU0FBVSxXQUNULE9BQVFwQyxHQU1UcVQsS0FBTSxXQUtMLE9BSkFULEVBQVNDLEVBQVEsR0FDWEgsR0FBV0QsSUFDaEJ6UyxFQUFPMFMsRUFBUyxJQUVWbGMsTUFFUm9jLE9BQVEsV0FDUCxRQUFTQSxHQUlWVSxTQUFVLFNBQVU1WixFQUFTMFEsR0FTNUIsT0FSTXdJLElBRUx4SSxFQUFPLENBQUUxUSxHQURUMFEsRUFBT0EsR0FBUSxJQUNRdFQsTUFBUXNULEVBQUt0VCxRQUFVc1QsR0FDOUN5SSxFQUFNemIsS0FBTWdULEdBQ05xSSxHQUNMTSxLQUdLdmMsTUFJUnVjLEtBQU0sV0FFTCxPQURBN2MsRUFBS29kLFNBQVU5YyxLQUFNc0UsV0FDZHRFLE1BSVJtYyxNQUFPLFdBQ04sUUFBU0EsSUFJWixPQUFPemMsR0E0Q1JzRCxFQUFPbUMsT0FBUSxDQUVkNFgsU0FBVSxTQUFVQyxHQUNuQixJQUFJQyxFQUFTLENBSVgsQ0FBRSxTQUFVLFdBQVlqYSxFQUFPNFksVUFBVyxVQUN6QzVZLEVBQU80WSxVQUFXLFVBQVksR0FDL0IsQ0FBRSxVQUFXLE9BQVE1WSxFQUFPNFksVUFBVyxlQUN0QzVZLEVBQU80WSxVQUFXLGVBQWlCLEVBQUcsWUFDdkMsQ0FBRSxTQUFVLE9BQVE1WSxFQUFPNFksVUFBVyxlQUNyQzVZLEVBQU80WSxVQUFXLGVBQWlCLEVBQUcsYUFFeENzQixFQUFRLFVBQ1J6QixFQUFVLENBQ1R5QixNQUFPLFdBQ04sT0FBT0EsR0FFUkMsT0FBUSxXQUVQLE9BREFDLEVBQVN2VSxLQUFNdkUsV0FBWW9YLEtBQU1wWCxXQUMxQnRFLE1BRVIsTUFBUyxTQUFVbUQsR0FDbEIsT0FBT3NZLEVBQVFFLEtBQU0sS0FBTXhZLElBSTVCa2EsS0FBTSxXQUNMLElBQUlDLEVBQU1oWixVQUVWLE9BQU90QixFQUFPK1osVUFBVSxTQUFVUSxHQUNqQ3ZhLEVBQU9rQixLQUFNK1ksR0FBUSxTQUFVelYsRUFBSWdXLEdBR2xDLElBQUlyYSxFQUFLOUIsRUFBWWljLEVBQUtFLEVBQU8sTUFBV0YsRUFBS0UsRUFBTyxJQUt4REosRUFBVUksRUFBTyxLQUFPLFdBQ3ZCLElBQUlDLEVBQVd0YSxHQUFNQSxFQUFHeEMsTUFBT1gsS0FBTXNFLFdBQ2hDbVosR0FBWXBjLEVBQVlvYyxFQUFTaEMsU0FDckNnQyxFQUFTaEMsVUFDUGlDLFNBQVVILEVBQVNJLFFBQ25COVUsS0FBTTBVLEVBQVNsQyxTQUNmSyxLQUFNNkIsRUFBU2pDLFFBRWpCaUMsRUFBVUMsRUFBTyxHQUFNLFFBQ3RCeGQsS0FDQW1ELEVBQUssQ0FBRXNhLEdBQWFuWixpQkFLeEJnWixFQUFNLFFBQ0g3QixXQUVMRSxLQUFNLFNBQVVpQyxFQUFhQyxFQUFZQyxHQUN4QyxJQUFJQyxFQUFXLEVBQ2YsU0FBUzFDLEVBQVMyQyxFQUFPWixFQUFValAsRUFBUzhQLEdBQzNDLE9BQU8sV0FDTixJQUFJQyxFQUFPbGUsS0FDVjRULEVBQU90UCxVQUNQNlosRUFBYSxXQUNaLElBQUlWLEVBQVU5QixFQUtkLEtBQUtxQyxFQUFRRCxHQUFiLENBUUEsSUFKQU4sRUFBV3RQLEVBQVF4TixNQUFPdWQsRUFBTXRLLE1BSWR3SixFQUFTM0IsVUFDMUIsTUFBTSxJQUFJMkMsVUFBVyw0QkFPdEJ6QyxFQUFPOEIsSUFLZ0IsaUJBQWJBLEdBQ1ksbUJBQWJBLElBQ1JBLEVBQVM5QixLQUdMdGEsRUFBWXNhLEdBR1hzQyxFQUNKdEMsRUFBS2xiLEtBQ0pnZCxFQUNBcEMsRUFBUzBDLEVBQVVYLEVBQVVwQyxFQUFVaUQsR0FDdkM1QyxFQUFTMEMsRUFBVVgsRUFBVWxDLEVBQVMrQyxLQU92Q0YsSUFFQXBDLEVBQUtsYixLQUNKZ2QsRUFDQXBDLEVBQVMwQyxFQUFVWCxFQUFVcEMsRUFBVWlELEdBQ3ZDNUMsRUFBUzBDLEVBQVVYLEVBQVVsQyxFQUFTK0MsR0FDdEM1QyxFQUFTMEMsRUFBVVgsRUFBVXBDLEVBQzVCb0MsRUFBU2lCLGVBU1BsUSxJQUFZNk0sSUFDaEJrRCxPQUFPcFksRUFDUDhOLEVBQU8sQ0FBRTZKLEtBS1JRLEdBQVdiLEVBQVNrQixhQUFlSixFQUFNdEssTUFLN0MySyxFQUFVTixFQUNURSxFQUNBLFdBQ0MsSUFDQ0EsSUFDQyxNQUFRbFMsR0FFSmpKLEVBQU8rWixTQUFTeUIsZUFDcEJ4YixFQUFPK1osU0FBU3lCLGNBQWV2UyxFQUM5QnNTLEVBQVFFLFlBTUxULEVBQVEsR0FBS0QsSUFJWjVQLElBQVkrTSxJQUNoQmdELE9BQU9wWSxFQUNQOE4sRUFBTyxDQUFFM0gsSUFHVm1SLEVBQVNzQixXQUFZUixFQUFNdEssTUFTM0JvSyxFQUNKTyxLQUtLdmIsRUFBTytaLFNBQVM0QixlQUNwQkosRUFBUUUsV0FBYXpiLEVBQU8rWixTQUFTNEIsZ0JBRXRDNWUsRUFBTzZlLFdBQVlMLEtBS3RCLE9BQU92YixFQUFPK1osVUFBVSxTQUFVUSxHQUdqQ04sRUFBUSxHQUFLLEdBQUk1QyxJQUNoQmdCLEVBQ0MsRUFDQWtDLEVBQ0FsYyxFQUFZeWMsR0FDWEEsRUFDQTlDLEVBQ0R1QyxFQUFTYyxhQUtYcEIsRUFBUSxHQUFLLEdBQUk1QyxJQUNoQmdCLEVBQ0MsRUFDQWtDLEVBQ0FsYyxFQUFZdWMsR0FDWEEsRUFDQTVDLElBS0hpQyxFQUFRLEdBQUssR0FBSTVDLElBQ2hCZ0IsRUFDQyxFQUNBa0MsRUFDQWxjLEVBQVl3YyxHQUNYQSxFQUNBM0MsT0FHQU8sV0FLTEEsUUFBUyxTQUFVbmEsR0FDbEIsT0FBYyxNQUFQQSxFQUFjMEIsRUFBT21DLE9BQVE3RCxFQUFLbWEsR0FBWUEsSUFHdkQyQixFQUFXLEdBa0VaLE9BL0RBcGEsRUFBT2tCLEtBQU0rWSxHQUFRLFNBQVU5YSxFQUFHcWIsR0FDakMsSUFBSWhVLEVBQU9nVSxFQUFPLEdBQ2pCcUIsRUFBY3JCLEVBQU8sR0FLdEIvQixFQUFTK0IsRUFBTyxJQUFRaFUsRUFBSzZRLElBR3hCd0UsR0FDSnJWLEVBQUs2USxLQUNKLFdBSUM2QyxFQUFRMkIsSUFLVDVCLEVBQVEsRUFBSTlhLEdBQUssR0FBSXlhLFFBSXJCSyxFQUFRLEVBQUk5YSxHQUFLLEdBQUl5YSxRQUdyQkssRUFBUSxHQUFLLEdBQUlKLEtBR2pCSSxFQUFRLEdBQUssR0FBSUosTUFPbkJyVCxFQUFLNlEsSUFBS21ELEVBQU8sR0FBSWpCLE1BS3JCYSxFQUFVSSxFQUFPLElBQVEsV0FFeEIsT0FEQUosRUFBVUksRUFBTyxHQUFNLFFBQVV4ZCxPQUFTb2QsT0FBV3RYLEVBQVk5RixLQUFNc0UsV0FDaEV0RSxNQU1Sb2QsRUFBVUksRUFBTyxHQUFNLFFBQVdoVSxFQUFLc1QsWUFJeENyQixFQUFRQSxRQUFTMkIsR0FHWkosR0FDSkEsRUFBS3ZjLEtBQU0yYyxFQUFVQSxHQUlmQSxHQUlSMEIsS0FBTSxTQUFVQyxHQUNmLElBR0NDLEVBQVkxYSxVQUFVaEIsT0FHdEJuQixFQUFJNmMsRUFHSkMsRUFBa0JyWixNQUFPekQsR0FDekIrYyxFQUFnQjVlLEVBQU1HLEtBQU02RCxXQUc1QjZhLEVBQVVuYyxFQUFPK1osV0FHakJxQyxFQUFhLFNBQVVqZCxHQUN0QixPQUFPLFNBQVVnRixHQUNoQjhYLEVBQWlCOWMsR0FBTW5DLEtBQ3ZCa2YsRUFBZS9jLEdBQU1tQyxVQUFVaEIsT0FBUyxFQUFJaEQsRUFBTUcsS0FBTTZELFdBQWM2QyxJQUM1RDZYLEdBQ1RHLEVBQVFiLFlBQWFXLEVBQWlCQyxLQU0xQyxHQUFLRixHQUFhLElBQ2pCNUQsRUFBWTJELEVBQWFJLEVBQVF0VyxLQUFNdVcsRUFBWWpkLElBQU1rWixRQUFTOEQsRUFBUTdELFFBQ3hFMEQsR0FHdUIsWUFBcEJHLEVBQVFqQyxTQUNaN2IsRUFBWTZkLEVBQWUvYyxJQUFPK2MsRUFBZS9jLEdBQUl3WixPQUVyRCxPQUFPd0QsRUFBUXhELE9BS2pCLEtBQVF4WixLQUNQaVosRUFBWThELEVBQWUvYyxHQUFLaWQsRUFBWWpkLEdBQUtnZCxFQUFRN0QsUUFHMUQsT0FBTzZELEVBQVExRCxhQU9qQixJQUFJNEQsRUFBYyx5REFFbEJyYyxFQUFPK1osU0FBU3lCLGNBQWdCLFNBQVVwWSxFQUFPa1osR0FJM0N2ZixFQUFPd2YsU0FBV3hmLEVBQU93ZixRQUFRQyxNQUFRcFosR0FBU2laLEVBQVlwUyxLQUFNN0csRUFBTWYsT0FDOUV0RixFQUFPd2YsUUFBUUMsS0FBTSw4QkFBZ0NwWixFQUFNcVosUUFBU3JaLEVBQU1rWixNQUFPQSxJQU9uRnRjLEVBQU8wYyxlQUFpQixTQUFVdFosR0FDakNyRyxFQUFPNmUsWUFBWSxXQUNsQixNQUFNeFksTUFRUixJQUFJdVosRUFBWTNjLEVBQU8rWixXQWtEdkIsU0FBUzZDLElBQ1JoZ0IsRUFBU2lnQixvQkFBcUIsbUJBQW9CRCxHQUNsRDdmLEVBQU84ZixvQkFBcUIsT0FBUUQsR0FDcEM1YyxFQUFPd1csUUFuRFJ4VyxFQUFPRyxHQUFHcVcsTUFBUSxTQUFVclcsR0FZM0IsT0FWQXdjLEVBQ0VoRSxLQUFNeFksR0FLTjJjLE9BQU8sU0FBVTFaLEdBQ2pCcEQsRUFBTzBjLGVBQWdCdFosTUFHbEJwRyxNQUdSZ0QsRUFBT21DLE9BQVEsQ0FHZGdCLFNBQVMsRUFJVDRaLFVBQVcsRUFHWHZHLE1BQU8sU0FBVXdHLEtBR0YsSUFBVEEsSUFBa0JoZCxFQUFPK2MsVUFBWS9jLEVBQU9tRCxXQUtqRG5ELEVBQU9tRCxTQUFVLEdBR0gsSUFBVDZaLEtBQW1CaGQsRUFBTytjLFVBQVksR0FLM0NKLEVBQVVyQixZQUFhMWUsRUFBVSxDQUFFb0QsUUFJckNBLEVBQU93VyxNQUFNbUMsS0FBT2dFLEVBQVVoRSxLQWFELGFBQXhCL2IsRUFBU3FnQixZQUNhLFlBQXhCcmdCLEVBQVNxZ0IsYUFBNkJyZ0IsRUFBU3VQLGdCQUFnQitRLFNBR2pFbmdCLEVBQU82ZSxXQUFZNWIsRUFBT3dXLFFBSzFCNVosRUFBUzRQLGlCQUFrQixtQkFBb0JvUSxHQUcvQzdmLEVBQU95UCxpQkFBa0IsT0FBUW9RLElBUWxDLElBQUlPLEVBQVMsU0FBVXJjLEVBQU9YLEVBQUl3SyxFQUFLeEcsRUFBT2laLEVBQVdDLEVBQVVDLEdBQ2xFLElBQUluZSxFQUFJLEVBQ1AyQyxFQUFNaEIsRUFBTVIsT0FDWmlkLEVBQWMsTUFBUDVTLEVBR1IsR0FBdUIsV0FBbEI3SyxFQUFRNkssR0FFWixJQUFNeEwsS0FETmllLEdBQVksRUFDRHpTLEVBQ1Z3UyxFQUFRcmMsRUFBT1gsRUFBSWhCLEVBQUd3TCxFQUFLeEwsSUFBSyxFQUFNa2UsRUFBVUMsUUFJM0MsUUFBZXhhLElBQVZxQixJQUNYaVosR0FBWSxFQUVOL2UsRUFBWThGLEtBQ2pCbVosR0FBTSxHQUdGQyxJQUdDRCxHQUNKbmQsRUFBRzFDLEtBQU1xRCxFQUFPcUQsR0FDaEJoRSxFQUFLLE9BSUxvZCxFQUFPcGQsRUFDUEEsRUFBSyxTQUFVa0IsRUFBTW1jLEVBQU1yWixHQUMxQixPQUFPb1osRUFBSzlmLEtBQU11QyxFQUFRcUIsR0FBUThDLE1BS2hDaEUsR0FDSixLQUFRaEIsRUFBSTJDLEVBQUszQyxJQUNoQmdCLEVBQ0NXLEVBQU8zQixHQUFLd0wsRUFBSzJTLEVBQ2hCblosRUFDQUEsRUFBTTFHLEtBQU1xRCxFQUFPM0IsR0FBS0EsRUFBR2dCLEVBQUlXLEVBQU8zQixHQUFLd0wsS0FNaEQsT0FBS3lTLEVBQ0d0YyxFQUlIeWMsRUFDR3BkLEVBQUcxQyxLQUFNcUQsR0FHVmdCLEVBQU0zQixFQUFJVyxFQUFPLEdBQUs2SixHQUFRMFMsR0FLbENJLEVBQVksUUFDZkMsRUFBYSxZQUdkLFNBQVNDLEVBQVlDLEVBQU1DLEdBQzFCLE9BQU9BLEVBQU9DLGNBTWYsU0FBU0MsRUFBV0MsR0FDbkIsT0FBT0EsRUFBTzlhLFFBQVN1YSxFQUFXLE9BQVF2YSxRQUFTd2EsRUFBWUMsR0FFaEUsSUFBSU0sRUFBYSxTQUFVQyxHQVExQixPQUEwQixJQUFuQkEsRUFBTTNmLFVBQXFDLElBQW5CMmYsRUFBTTNmLFlBQXNCMmYsRUFBTTNmLFVBTWxFLFNBQVM0ZixJQUNSbmhCLEtBQUsrRixRQUFVL0MsRUFBTytDLFFBQVVvYixFQUFLQyxNQUd0Q0QsRUFBS0MsSUFBTSxFQUVYRCxFQUFLNWQsVUFBWSxDQUVoQm1LLE1BQU8sU0FBVXdULEdBR2hCLElBQUkvWixFQUFRK1osRUFBT2xoQixLQUFLK0YsU0E0QnhCLE9BekJNb0IsSUFDTEEsRUFBUSxHQUtIOFosRUFBWUMsS0FJWEEsRUFBTTNmLFNBQ1YyZixFQUFPbGhCLEtBQUsrRixTQUFZb0IsRUFNeEIvRyxPQUFPaWhCLGVBQWdCSCxFQUFPbGhCLEtBQUsrRixRQUFTLENBQzNDb0IsTUFBT0EsRUFDUG1hLGNBQWMsTUFNWG5hLEdBRVJvYSxJQUFLLFNBQVVMLEVBQU9NLEVBQU1yYSxHQUMzQixJQUFJc2EsRUFDSC9ULEVBQVExTixLQUFLME4sTUFBT3dULEdBSXJCLEdBQXFCLGlCQUFUTSxFQUNYOVQsRUFBT3FULEVBQVdTLElBQVdyYSxPQU03QixJQUFNc2EsS0FBUUQsRUFDYjlULEVBQU9xVCxFQUFXVSxJQUFXRCxFQUFNQyxHQUdyQyxPQUFPL1QsR0FFUi9KLElBQUssU0FBVXVkLEVBQU92VCxHQUNyQixZQUFlN0gsSUFBUjZILEVBQ04zTixLQUFLME4sTUFBT3dULEdBR1pBLEVBQU9saEIsS0FBSytGLFVBQWFtYixFQUFPbGhCLEtBQUsrRixTQUFXZ2IsRUFBV3BULEtBRTdEd1MsT0FBUSxTQUFVZSxFQUFPdlQsRUFBS3hHLEdBYTdCLFlBQWFyQixJQUFSNkgsR0FDQ0EsR0FBc0IsaUJBQVJBLFFBQWdDN0gsSUFBVnFCLEVBRWxDbkgsS0FBSzJELElBQUt1ZCxFQUFPdlQsSUFTekIzTixLQUFLdWhCLElBQUtMLEVBQU92VCxFQUFLeEcsUUFJTHJCLElBQVZxQixFQUFzQkEsRUFBUXdHLElBRXRDK08sT0FBUSxTQUFVd0UsRUFBT3ZULEdBQ3hCLElBQUl4TCxFQUNIdUwsRUFBUXdULEVBQU9saEIsS0FBSytGLFNBRXJCLFFBQWVELElBQVY0SCxFQUFMLENBSUEsUUFBYTVILElBQVI2SCxFQUFvQixDQWtCeEJ4TCxHQVhDd0wsRUFKSS9ILE1BQU1DLFFBQVM4SCxHQUliQSxFQUFJdkosSUFBSzJjLElBRWZwVCxFQUFNb1QsRUFBV3BULE1BSUpELEVBQ1osQ0FBRUMsR0FDQUEsRUFBSXJCLE1BQU95TyxJQUFtQixJQUcxQnpYLE9BRVIsS0FBUW5CLFlBQ0F1TCxFQUFPQyxFQUFLeEwsVUFLUjJELElBQVI2SCxHQUFxQjNLLEVBQU95RCxjQUFlaUgsTUFNMUN3VCxFQUFNM2YsU0FDVjJmLEVBQU9saEIsS0FBSytGLGNBQVlELFNBRWpCb2IsRUFBT2xoQixLQUFLK0YsWUFJdEIyYixRQUFTLFNBQVVSLEdBQ2xCLElBQUl4VCxFQUFRd1QsRUFBT2xoQixLQUFLK0YsU0FDeEIsWUFBaUJELElBQVY0SCxJQUF3QjFLLEVBQU95RCxjQUFlaUgsS0FHdkQsSUFBSWlVLEVBQVcsSUFBSVIsRUFFZlMsRUFBVyxJQUFJVCxFQWNmVSxHQUFTLGdDQUNaQyxHQUFhLFNBMkJkLFNBQVNDLEdBQVUxZCxFQUFNc0osRUFBSzZULEdBQzdCLElBQUluYyxFQUlKLFFBQWNTLElBQVQwYixHQUF3QyxJQUFsQm5kLEVBQUs5QyxTQUkvQixHQUhBOEQsRUFBTyxRQUFVc0ksRUFBSXpILFFBQVM0YixHQUFZLE9BQVFyYSxjQUc3QixpQkFGckIrWixFQUFPbmQsRUFBSzdCLGFBQWM2QyxJQUVNLENBQy9CLElBQ0NtYyxFQXBDSixTQUFrQkEsR0FDakIsTUFBYyxTQUFUQSxHQUlTLFVBQVRBLElBSVMsU0FBVEEsRUFDRyxLQUlIQSxLQUFVQSxFQUFPLElBQ2JBLEVBR0pLLEdBQU81VSxLQUFNdVUsR0FDVlEsS0FBS0MsTUFBT1QsR0FHYkEsR0FjR1UsQ0FBU1YsR0FDZixNQUFRdlYsSUFHVjJWLEVBQVNMLElBQUtsZCxFQUFNc0osRUFBSzZULFFBRXpCQSxPQUFPMWIsRUFHVCxPQUFPMGIsRUFHUnhlLEVBQU9tQyxPQUFRLENBQ2R1YyxRQUFTLFNBQVVyZCxHQUNsQixPQUFPdWQsRUFBU0YsUUFBU3JkLElBQVVzZCxFQUFTRCxRQUFTcmQsSUFHdERtZCxLQUFNLFNBQVVuZCxFQUFNZ0IsRUFBTW1jLEdBQzNCLE9BQU9JLEVBQVN6QixPQUFROWIsRUFBTWdCLEVBQU1tYyxJQUdyQ1csV0FBWSxTQUFVOWQsRUFBTWdCLEdBQzNCdWMsRUFBU2xGLE9BQVFyWSxFQUFNZ0IsSUFLeEIrYyxNQUFPLFNBQVUvZCxFQUFNZ0IsRUFBTW1jLEdBQzVCLE9BQU9HLEVBQVN4QixPQUFROWIsRUFBTWdCLEVBQU1tYyxJQUdyQ2EsWUFBYSxTQUFVaGUsRUFBTWdCLEdBQzVCc2MsRUFBU2pGLE9BQVFyWSxFQUFNZ0IsTUFJekJyQyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQnFjLEtBQU0sU0FBVTdULEVBQUt4RyxHQUNwQixJQUFJaEYsRUFBR2tELEVBQU1tYyxFQUNabmQsRUFBT3JFLEtBQU0sR0FDYmtPLEVBQVE3SixHQUFRQSxFQUFLdUYsV0FHdEIsUUFBYTlELElBQVI2SCxFQUFvQixDQUN4QixHQUFLM04sS0FBS3NELFNBQ1RrZSxFQUFPSSxFQUFTamUsSUFBS1UsR0FFRSxJQUFsQkEsRUFBSzlDLFdBQW1Cb2dCLEVBQVNoZSxJQUFLVSxFQUFNLGlCQUFtQixDQUVuRSxJQURBbEMsRUFBSStMLEVBQU01SyxPQUNGbkIsS0FJRitMLEVBQU8vTCxJQUVzQixLQURqQ2tELEVBQU82SSxFQUFPL0wsR0FBSWtELE1BQ1J4RSxRQUFTLFdBQ2xCd0UsRUFBTzBiLEVBQVcxYixFQUFLL0UsTUFBTyxJQUM5QnloQixHQUFVMWQsRUFBTWdCLEVBQU1tYyxFQUFNbmMsS0FJL0JzYyxFQUFTSixJQUFLbGQsRUFBTSxnQkFBZ0IsR0FJdEMsT0FBT21kLEVBSVIsTUFBb0IsaUJBQVI3VCxFQUNKM04sS0FBS2tFLE1BQU0sV0FDakIwZCxFQUFTTCxJQUFLdmhCLEtBQU0yTixNQUlmd1MsRUFBUW5nQixNQUFNLFNBQVVtSCxHQUM5QixJQUFJcWEsRUFPSixHQUFLbmQsUUFBa0J5QixJQUFWcUIsRUFLWixZQUFjckIsS0FEZDBiLEVBQU9JLEVBQVNqZSxJQUFLVSxFQUFNc0osVUFRYjdILEtBRGQwYixFQUFPTyxHQUFVMWQsRUFBTXNKLElBTGY2VCxPQVdSLEVBSUR4aEIsS0FBS2tFLE1BQU0sV0FHVjBkLEVBQVNMLElBQUt2aEIsS0FBTTJOLEVBQUt4RyxRQUV4QixLQUFNQSxFQUFPN0MsVUFBVWhCLE9BQVMsRUFBRyxNQUFNLElBRzdDNmUsV0FBWSxTQUFVeFUsR0FDckIsT0FBTzNOLEtBQUtrRSxNQUFNLFdBQ2pCMGQsRUFBU2xGLE9BQVExYyxLQUFNMk4sU0FNMUIzSyxFQUFPbUMsT0FBUSxDQUNka1gsTUFBTyxTQUFVaFksRUFBTTFDLEVBQU02ZixHQUM1QixJQUFJbkYsRUFFSixHQUFLaFksRUFZSixPQVhBMUMsR0FBU0EsR0FBUSxNQUFTLFFBQzFCMGEsRUFBUXNGLEVBQVNoZSxJQUFLVSxFQUFNMUMsR0FHdkI2ZixLQUNFbkYsR0FBU3pXLE1BQU1DLFFBQVMyYixHQUM3Qm5GLEVBQVFzRixFQUFTeEIsT0FBUTliLEVBQU0xQyxFQUFNcUIsRUFBTzJELFVBQVc2YSxJQUV2RG5GLEVBQU16YixLQUFNNGdCLElBR1BuRixHQUFTLElBSWxCaUcsUUFBUyxTQUFVamUsRUFBTTFDLEdBQ3hCQSxFQUFPQSxHQUFRLEtBRWYsSUFBSTBhLEVBQVFyWixFQUFPcVosTUFBT2hZLEVBQU0xQyxHQUMvQjRnQixFQUFjbEcsRUFBTS9ZLE9BQ3BCSCxFQUFLa1osRUFBTXhPLFFBQ1gyVSxFQUFReGYsRUFBT3lmLFlBQWFwZSxFQUFNMUMsR0FNdkIsZUFBUHdCLElBQ0pBLEVBQUtrWixFQUFNeE8sUUFDWDBVLEtBR0lwZixJQUlVLE9BQVR4QixHQUNKMGEsRUFBTWpMLFFBQVMscUJBSVRvUixFQUFNRSxLQUNidmYsRUFBRzFDLEtBQU00RCxHQXBCRixXQUNOckIsRUFBT3NmLFFBQVNqZSxFQUFNMUMsS0FtQkY2Z0IsS0FHaEJELEdBQWVDLEdBQ3BCQSxFQUFNN0YsTUFBTUosUUFLZGtHLFlBQWEsU0FBVXBlLEVBQU0xQyxHQUM1QixJQUFJZ00sRUFBTWhNLEVBQU8sYUFDakIsT0FBT2dnQixFQUFTaGUsSUFBS1UsRUFBTXNKLElBQVNnVSxFQUFTeEIsT0FBUTliLEVBQU1zSixFQUFLLENBQy9EZ1AsTUFBTzNaLEVBQU80WSxVQUFXLGVBQWdCdkIsS0FBSyxXQUM3Q3NILEVBQVNqRixPQUFRclksRUFBTSxDQUFFMUMsRUFBTyxRQUFTZ00sWUFNN0MzSyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQmtYLE1BQU8sU0FBVTFhLEVBQU02ZixHQUN0QixJQUFJbUIsRUFBUyxFQVFiLE1BTnFCLGlCQUFUaGhCLElBQ1g2ZixFQUFPN2YsRUFDUEEsRUFBTyxLQUNQZ2hCLEtBR0lyZSxVQUFVaEIsT0FBU3FmLEVBQ2hCM2YsRUFBT3FaLE1BQU9yYyxLQUFNLEdBQUsyQixRQUdqQm1FLElBQVQwYixFQUNOeGhCLEtBQ0FBLEtBQUtrRSxNQUFNLFdBQ1YsSUFBSW1ZLEVBQVFyWixFQUFPcVosTUFBT3JjLEtBQU0yQixFQUFNNmYsR0FHdEN4ZSxFQUFPeWYsWUFBYXppQixLQUFNMkIsR0FFWixPQUFUQSxHQUFnQyxlQUFmMGEsRUFBTyxJQUM1QnJaLEVBQU9zZixRQUFTdGlCLEtBQU0yQixPQUkxQjJnQixRQUFTLFNBQVUzZ0IsR0FDbEIsT0FBTzNCLEtBQUtrRSxNQUFNLFdBQ2pCbEIsRUFBT3NmLFFBQVN0aUIsS0FBTTJCLE9BR3hCaWhCLFdBQVksU0FBVWpoQixHQUNyQixPQUFPM0IsS0FBS3FjLE1BQU8xYSxHQUFRLEtBQU0sS0FLbEM4WixRQUFTLFNBQVU5WixFQUFNTCxHQUN4QixJQUFJNk8sRUFDSDBTLEVBQVEsRUFDUkMsRUFBUTlmLEVBQU8rWixXQUNmekwsRUFBV3RSLEtBQ1htQyxFQUFJbkMsS0FBS3NELE9BQ1QrWCxFQUFVLGFBQ0N3SCxHQUNUQyxFQUFNeEUsWUFBYWhOLEVBQVUsQ0FBRUEsS0FVbEMsSUFOcUIsaUJBQVQzUCxJQUNYTCxFQUFNSyxFQUNOQSxPQUFPbUUsR0FFUm5FLEVBQU9BLEdBQVEsS0FFUFEsTUFDUGdPLEVBQU13UixFQUFTaGUsSUFBSzJOLEVBQVVuUCxHQUFLUixFQUFPLGdCQUM5QndPLEVBQUl3TSxRQUNma0csSUFDQTFTLEVBQUl3TSxNQUFNdEMsSUFBS2dCLElBSWpCLE9BREFBLElBQ095SCxFQUFNckgsUUFBU25hLE1BR3hCLElBQUl5aEIsR0FBTyxzQ0FBMENDLE9BRWpEQyxHQUFVLElBQUlsWixPQUFRLGlCQUFtQmdaLEdBQU8sY0FBZSxLQUcvREcsR0FBWSxDQUFFLE1BQU8sUUFBUyxTQUFVLFFBRXhDL1QsR0FBa0J2UCxFQUFTdVAsZ0JBSTFCZ1UsR0FBYSxTQUFVOWUsR0FDekIsT0FBT3JCLEVBQU95RixTQUFVcEUsRUFBS3FJLGNBQWVySSxJQUU3QytlLEdBQVcsQ0FBRUEsVUFBVSxHQU9uQmpVLEdBQWdCa1UsY0FDcEJGLEdBQWEsU0FBVTllLEdBQ3RCLE9BQU9yQixFQUFPeUYsU0FBVXBFLEVBQUtxSSxjQUFlckksSUFDM0NBLEVBQUtnZixZQUFhRCxNQUFlL2UsRUFBS3FJLGdCQUcxQyxJQUFJNFcsR0FBcUIsU0FBVWpmLEVBQU0ySixHQU92QyxNQUE4QixVQUg5QjNKLEVBQU8ySixHQUFNM0osR0FHRGtmLE1BQU1DLFNBQ00sS0FBdkJuZixFQUFLa2YsTUFBTUMsU0FNWEwsR0FBWTllLElBRXNCLFNBQWxDckIsRUFBT3lnQixJQUFLcGYsRUFBTSxZQUtyQixTQUFTcWYsR0FBV3JmLEVBQU1vZCxFQUFNa0MsRUFBWUMsR0FDM0MsSUFBSUMsRUFBVUMsRUFDYkMsRUFBZ0IsR0FDaEJDLEVBQWVKLEVBQ2QsV0FDQyxPQUFPQSxFQUFNdFYsT0FFZCxXQUNDLE9BQU90TCxFQUFPeWdCLElBQUtwZixFQUFNb2QsRUFBTSxLQUVqQ3dDLEVBQVVELElBQ1ZFLEVBQU9QLEdBQWNBLEVBQVksS0FBUzNnQixFQUFPbWhCLFVBQVcxQyxHQUFTLEdBQUssTUFHMUUyQyxFQUFnQi9mLEVBQUs5QyxXQUNsQnlCLEVBQU9taEIsVUFBVzFDLElBQW1CLE9BQVR5QyxJQUFrQkQsSUFDaERoQixHQUFRdFcsS0FBTTNKLEVBQU95Z0IsSUFBS3BmLEVBQU1vZCxJQUVsQyxHQUFLMkMsR0FBaUJBLEVBQWUsS0FBUUYsRUFBTyxDQVluRCxJQVJBRCxHQUFvQixFQUdwQkMsRUFBT0EsR0FBUUUsRUFBZSxHQUc5QkEsR0FBaUJILEdBQVcsRUFFcEJGLEtBSVAvZ0IsRUFBT3VnQixNQUFPbGYsRUFBTW9kLEVBQU0yQyxFQUFnQkYsSUFDbkMsRUFBSUosSUFBWSxHQUFNQSxFQUFRRSxJQUFpQkMsR0FBVyxNQUFXLElBQzNFRixFQUFnQixHQUVqQkssR0FBZ0NOLEVBSWpDTSxHQUFnQyxFQUNoQ3BoQixFQUFPdWdCLE1BQU9sZixFQUFNb2QsRUFBTTJDLEVBQWdCRixHQUcxQ1AsRUFBYUEsR0FBYyxHQWdCNUIsT0FiS0EsSUFDSlMsR0FBaUJBLElBQWtCSCxHQUFXLEVBRzlDSixFQUFXRixFQUFZLEdBQ3RCUyxHQUFrQlQsRUFBWSxHQUFNLEdBQU1BLEVBQVksSUFDckRBLEVBQVksR0FDVEMsSUFDSkEsRUFBTU0sS0FBT0EsRUFDYk4sRUFBTXRRLE1BQVE4USxFQUNkUixFQUFNNWUsSUFBTTZlLElBR1BBLEVBSVIsSUFBSVEsR0FBb0IsR0FFeEIsU0FBU0MsR0FBbUJqZ0IsR0FDM0IsSUFBSWlTLEVBQ0hwVSxFQUFNbUMsRUFBS3FJLGNBQ1hiLEVBQVd4SCxFQUFLd0gsU0FDaEIyWCxFQUFVYSxHQUFtQnhZLEdBRTlCLE9BQUsyWCxJQUlMbE4sRUFBT3BVLEVBQUlxaUIsS0FBSzVoQixZQUFhVCxFQUFJSSxjQUFldUosSUFDaEQyWCxFQUFVeGdCLEVBQU95Z0IsSUFBS25OLEVBQU0sV0FFNUJBLEVBQUsxVCxXQUFXQyxZQUFheVQsR0FFWixTQUFaa04sSUFDSkEsRUFBVSxTQUVYYSxHQUFtQnhZLEdBQWEyWCxFQUV6QkEsR0FHUixTQUFTZ0IsR0FBVWxULEVBQVVtVCxHQU81QixJQU5BLElBQUlqQixFQUFTbmYsRUFDWnFnQixFQUFTLEdBQ1R2SyxFQUFRLEVBQ1I3VyxFQUFTZ08sRUFBU2hPLE9BR1g2VyxFQUFRN1csRUFBUTZXLEtBQ3ZCOVYsRUFBT2lOLEVBQVU2SSxJQUNOb0osUUFJWEMsRUFBVW5mLEVBQUtrZixNQUFNQyxRQUNoQmlCLEdBS2EsU0FBWmpCLElBQ0prQixFQUFRdkssR0FBVXdILEVBQVNoZSxJQUFLVSxFQUFNLFlBQWUsS0FDL0NxZ0IsRUFBUXZLLEtBQ2I5VixFQUFLa2YsTUFBTUMsUUFBVSxLQUdLLEtBQXZCbmYsRUFBS2tmLE1BQU1DLFNBQWtCRixHQUFvQmpmLEtBQ3JEcWdCLEVBQVF2SyxHQUFVbUssR0FBbUJqZ0IsS0FHckIsU0FBWm1mLElBQ0prQixFQUFRdkssR0FBVSxPQUdsQndILEVBQVNKLElBQUtsZCxFQUFNLFVBQVdtZixLQU1sQyxJQUFNckosRUFBUSxFQUFHQSxFQUFRN1csRUFBUTZXLElBQ1IsTUFBbkJ1SyxFQUFRdkssS0FDWjdJLEVBQVU2SSxHQUFRb0osTUFBTUMsUUFBVWtCLEVBQVF2SyxJQUk1QyxPQUFPN0ksRUFHUnRPLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCc2YsS0FBTSxXQUNMLE9BQU9ELEdBQVV4a0IsTUFBTSxJQUV4QjJrQixLQUFNLFdBQ0wsT0FBT0gsR0FBVXhrQixPQUVsQjRrQixPQUFRLFNBQVUxSCxHQUNqQixNQUFzQixrQkFBVkEsRUFDSkEsRUFBUWxkLEtBQUt5a0IsT0FBU3prQixLQUFLMmtCLE9BRzVCM2tCLEtBQUtrRSxNQUFNLFdBQ1pvZixHQUFvQnRqQixNQUN4QmdELEVBQVFoRCxNQUFPeWtCLE9BRWZ6aEIsRUFBUWhELE1BQU8ya0IsYUFLbkIsSUFVRUUsR0FDQXpVLEdBWEUwVSxHQUFpQix3QkFFakJDLEdBQVcsaUNBRVhDLEdBQWMscUNBTWhCSCxHQURjamxCLEVBQVNxbEIseUJBQ1J0aUIsWUFBYS9DLEVBQVMwQyxjQUFlLFNBQ3BEOE4sR0FBUXhRLEVBQVMwQyxjQUFlLFVBTTNCRyxhQUFjLE9BQVEsU0FDNUIyTixHQUFNM04sYUFBYyxVQUFXLFdBQy9CMk4sR0FBTTNOLGFBQWMsT0FBUSxLQUU1Qm9pQixHQUFJbGlCLFlBQWF5TixJQUlqQmhQLEVBQVE4akIsV0FBYUwsR0FBSU0sV0FBVyxHQUFPQSxXQUFXLEdBQU8xUixVQUFVaUIsUUFJdkVtUSxHQUFJeFUsVUFBWSx5QkFDaEJqUCxFQUFRZ2tCLGlCQUFtQlAsR0FBSU0sV0FBVyxHQUFPMVIsVUFBVThFLGFBSzNEc00sR0FBSXhVLFVBQVksb0JBQ2hCalAsRUFBUWlrQixTQUFXUixHQUFJcFIsVUFLeEIsSUFBSTZSLEdBQVUsQ0FLYkMsTUFBTyxDQUFFLEVBQUcsVUFBVyxZQUN2QkMsSUFBSyxDQUFFLEVBQUcsb0JBQXFCLHVCQUMvQkMsR0FBSSxDQUFFLEVBQUcsaUJBQWtCLG9CQUMzQkMsR0FBSSxDQUFFLEVBQUcscUJBQXNCLHlCQUUvQkMsU0FBVSxDQUFFLEVBQUcsR0FBSSxLQVlwQixTQUFTQyxHQUFRMWlCLEVBQVNnTixHQUl6QixJQUFJbk0sRUFZSixPQVRDQSxPQUQ0QyxJQUFqQ2IsRUFBUTRKLHFCQUNiNUosRUFBUTRKLHFCQUFzQm9ELEdBQU8sVUFFSSxJQUE3QmhOLEVBQVFvSyxpQkFDcEJwSyxFQUFRb0ssaUJBQWtCNEMsR0FBTyxLQUdqQyxRQUdNcEssSUFBUm9LLEdBQXFCQSxHQUFPckUsRUFBVTNJLEVBQVNnTixHQUM1Q2xOLEVBQU9nQixNQUFPLENBQUVkLEdBQVdhLEdBRzVCQSxFQUtSLFNBQVM4aEIsR0FBZS9oQixFQUFPZ2lCLEdBSTlCLElBSEEsSUFBSTNqQixFQUFJLEVBQ1A4WCxFQUFJblcsRUFBTVIsT0FFSG5CLEVBQUk4WCxFQUFHOVgsSUFDZHdmLEVBQVNKLElBQ1J6ZCxFQUFPM0IsR0FDUCxjQUNDMmpCLEdBQWVuRSxFQUFTaGUsSUFBS21pQixFQUFhM2pCLEdBQUssZUExQ25EbWpCLEdBQVFTLE1BQVFULEdBQVFVLE1BQVFWLEdBQVFXLFNBQVdYLEdBQVFZLFFBQVVaLEdBQVFDLE1BQzdFRCxHQUFRYSxHQUFLYixHQUFRSSxHQUdmdGtCLEVBQVFpa0IsU0FDYkMsR0FBUWMsU0FBV2QsR0FBUUQsT0FBUyxDQUFFLEVBQUcsK0JBQWdDLGNBMkMxRSxJQUFJOWEsR0FBUSxZQUVaLFNBQVM4YixHQUFldmlCLEVBQU9aLEVBQVNvakIsRUFBU0MsRUFBV0MsR0FPM0QsSUFOQSxJQUFJbmlCLEVBQU04TCxFQUFLRCxFQUFLdVcsRUFBTUMsRUFBVTNoQixFQUNuQzRoQixFQUFXempCLEVBQVEraEIseUJBQ25CMkIsRUFBUSxHQUNSemtCLEVBQUksRUFDSjhYLEVBQUluVyxFQUFNUixPQUVIbkIsRUFBSThYLEVBQUc5WCxJQUdkLElBRkFrQyxFQUFPUCxFQUFPM0IsS0FFUSxJQUFUa0MsRUFHWixHQUF3QixXQUFuQnZCLEVBQVF1QixHQUlackIsRUFBT2dCLE1BQU80aUIsRUFBT3ZpQixFQUFLOUMsU0FBVyxDQUFFOEMsR0FBU0EsUUFHMUMsR0FBTWtHLEdBQU0wQyxLQUFNNUksR0FJbEIsQ0FVTixJQVRBOEwsRUFBTUEsR0FBT3dXLEVBQVNoa0IsWUFBYU8sRUFBUVosY0FBZSxRQUcxRDROLEdBQVE2VSxHQUFTcFksS0FBTXRJLElBQVUsQ0FBRSxHQUFJLEtBQVEsR0FBSW9ELGNBQ25EZ2YsRUFBT25CLEdBQVNwVixJQUFTb1YsR0FBUUssU0FDakN4VixFQUFJRSxVQUFZb1csRUFBTSxHQUFNempCLEVBQU82akIsY0FBZXhpQixHQUFTb2lCLEVBQU0sR0FHakUxaEIsRUFBSTBoQixFQUFNLEdBQ0YxaEIsS0FDUG9MLEVBQU1BLEVBQUlzRCxVQUtYelEsRUFBT2dCLE1BQU80aUIsRUFBT3pXLEVBQUluRSxhQUd6Qm1FLEVBQU13VyxFQUFTNVUsWUFHWEQsWUFBYyxRQXpCbEI4VSxFQUFNaG1CLEtBQU1zQyxFQUFRNGpCLGVBQWdCemlCLElBa0N2QyxJQUhBc2lCLEVBQVM3VSxZQUFjLEdBRXZCM1AsRUFBSSxFQUNNa0MsRUFBT3VpQixFQUFPemtCLE1BR3ZCLEdBQUtva0IsR0FBYXZqQixFQUFPNkQsUUFBU3hDLEVBQU1raUIsSUFBZSxFQUNqREMsR0FDSkEsRUFBUTVsQixLQUFNeUQsUUFnQmhCLEdBWEFxaUIsRUFBV3ZELEdBQVk5ZSxHQUd2QjhMLEVBQU15VixHQUFRZSxFQUFTaGtCLFlBQWEwQixHQUFRLFVBR3ZDcWlCLEdBQ0piLEdBQWUxVixHQUlYbVcsRUFFSixJQURBdmhCLEVBQUksRUFDTVYsRUFBTzhMLEVBQUtwTCxNQUNoQmlnQixHQUFZL1gsS0FBTTVJLEVBQUsxQyxNQUFRLEtBQ25DMmtCLEVBQVExbEIsS0FBTXlELEdBTWxCLE9BQU9zaUIsRUFJUixJQUFJSSxHQUFpQixzQkFFckIsU0FBU0MsS0FDUixPQUFPLEVBR1IsU0FBU0MsS0FDUixPQUFPLEVBU1IsU0FBU0MsR0FBWTdpQixFQUFNMUMsR0FDMUIsT0FBUzBDLElBTVYsV0FDQyxJQUNDLE9BQU96RSxFQUFTMFUsY0FDZixNQUFRNlMsS0FUUUMsS0FBcUMsVUFBVHpsQixHQVkvQyxTQUFTMGxCLEdBQUloakIsRUFBTWlqQixFQUFPcmtCLEVBQVV1ZSxFQUFNcmUsRUFBSW9rQixHQUM3QyxJQUFJQyxFQUFRN2xCLEVBR1osR0FBc0IsaUJBQVYybEIsRUFBcUIsQ0FTaEMsSUFBTTNsQixJQU5tQixpQkFBYnNCLElBR1h1ZSxFQUFPQSxHQUFRdmUsRUFDZkEsT0FBVzZDLEdBRUV3aEIsRUFDYkQsR0FBSWhqQixFQUFNMUMsRUFBTXNCLEVBQVV1ZSxFQUFNOEYsRUFBTzNsQixHQUFRNGxCLEdBRWhELE9BQU9sakIsRUFzQlIsR0FuQmEsTUFBUm1kLEdBQXNCLE1BQU5yZSxHQUdwQkEsRUFBS0YsRUFDTHVlLEVBQU92ZSxPQUFXNkMsR0FDRCxNQUFOM0MsSUFDYyxpQkFBYkYsR0FHWEUsRUFBS3FlLEVBQ0xBLE9BQU8xYixJQUlQM0MsRUFBS3FlLEVBQ0xBLEVBQU92ZSxFQUNQQSxPQUFXNkMsS0FHRCxJQUFQM0MsRUFDSkEsRUFBSzhqQixRQUNDLElBQU05akIsRUFDWixPQUFPa0IsRUFlUixPQVphLElBQVJrakIsSUFDSkMsRUFBU3JrQixFQUNUQSxFQUFLLFNBQVVza0IsR0FJZCxPQURBemtCLElBQVMwa0IsSUFBS0QsR0FDUEQsRUFBTzdtQixNQUFPWCxLQUFNc0UsWUFJNUJuQixFQUFHaUUsS0FBT29nQixFQUFPcGdCLE9BQVVvZ0IsRUFBT3BnQixLQUFPcEUsRUFBT29FLFNBRTFDL0MsRUFBS0gsTUFBTSxXQUNqQmxCLEVBQU95a0IsTUFBTXBOLElBQUtyYSxLQUFNc25CLEVBQU9ua0IsRUFBSXFlLEVBQU12ZSxNQSthM0MsU0FBUzBrQixHQUFnQjNaLEVBQUlyTSxFQUFNdWxCLEdBRzVCQSxHQVFOdkYsRUFBU0osSUFBS3ZULEVBQUlyTSxHQUFNLEdBQ3hCcUIsRUFBT3lrQixNQUFNcE4sSUFBS3JNLEVBQUlyTSxFQUFNLENBQzNCc04sV0FBVyxFQUNYZCxRQUFTLFNBQVVzWixHQUNsQixJQUFJRyxFQUFValYsRUFDYmtWLEVBQVFsRyxFQUFTaGUsSUFBSzNELEtBQU0yQixHQUU3QixHQUF5QixFQUFsQjhsQixFQUFNSyxXQUFtQjluQixLQUFNMkIsSUFLckMsR0FBTWttQixFQUFNdmtCLFFBdUNFTixFQUFPeWtCLE1BQU14SixRQUFTdGMsSUFBVSxJQUFLb21CLGNBQ2xETixFQUFNTyx1QkFyQk4sR0FkQUgsRUFBUXZuQixFQUFNRyxLQUFNNkQsV0FDcEJxZCxFQUFTSixJQUFLdmhCLEtBQU0yQixFQUFNa21CLEdBSzFCRCxFQUFXVixFQUFZbG5CLEtBQU0yQixHQUM3QjNCLEtBQU0yQixLQUVEa21CLEtBRExsVixFQUFTZ1AsRUFBU2hlLElBQUszRCxLQUFNMkIsS0FDSmltQixFQUN4QmpHLEVBQVNKLElBQUt2aEIsS0FBTTJCLEdBQU0sR0FFMUJnUixFQUFTLEdBRUxrVixJQUFVbFYsRUFXZCxPQVJBOFUsRUFBTVEsMkJBQ05SLEVBQU1TLGlCQU9DdlYsR0FBVUEsRUFBT3hMLFdBZWYwZ0IsRUFBTXZrQixTQUdqQnFlLEVBQVNKLElBQUt2aEIsS0FBTTJCLEVBQU0sQ0FDekJ3RixNQUFPbkUsRUFBT3lrQixNQUFNVSxRQUluQm5sQixFQUFPbUMsT0FBUTBpQixFQUFPLEdBQUs3a0IsRUFBT29sQixNQUFNN2tCLFdBQ3hDc2tCLEVBQU12bkIsTUFBTyxHQUNiTixRQUtGeW5CLEVBQU1RLHFDQS9FMEJuaUIsSUFBN0I2YixFQUFTaGUsSUFBS3FLLEVBQUlyTSxJQUN0QnFCLEVBQU95a0IsTUFBTXBOLElBQUtyTSxFQUFJck0sRUFBTXFsQixJQTVhL0Joa0IsRUFBT3lrQixNQUFRLENBRWQ5bkIsT0FBUSxHQUVSMGEsSUFBSyxTQUFVaFcsRUFBTWlqQixFQUFPblosRUFBU3FULEVBQU12ZSxHQUUxQyxJQUFJb2xCLEVBQWFDLEVBQWFuWSxFQUM3Qm9ZLEVBQVFDLEVBQUdDLEVBQ1h4SyxFQUFTeUssRUFBVS9tQixFQUFNZ25CLEVBQVlDLEVBQ3JDQyxFQUFXbEgsRUFBU2hlLElBQUtVLEdBRzFCLEdBQU00YyxFQUFZNWMsR0F1Q2xCLElBbENLOEosRUFBUUEsVUFFWkEsR0FEQWthLEVBQWNsYSxHQUNRQSxRQUN0QmxMLEVBQVdvbEIsRUFBWXBsQixVQUtuQkEsR0FDSkQsRUFBT2dOLEtBQUtNLGdCQUFpQm5CLEdBQWlCbE0sR0FJekNrTCxFQUFRL0csT0FDYitHLEVBQVEvRyxLQUFPcEUsRUFBT29FLFNBSWZtaEIsRUFBU00sRUFBU04sVUFDekJBLEVBQVNNLEVBQVNOLE9BQVNub0IsT0FBTzBvQixPQUFRLFFBRW5DUixFQUFjTyxFQUFTRSxVQUM5QlQsRUFBY08sRUFBU0UsT0FBUyxTQUFVOWMsR0FJekMsWUFBeUIsSUFBWGpKLEdBQTBCQSxFQUFPeWtCLE1BQU11QixZQUFjL2MsRUFBRXRLLEtBQ3BFcUIsRUFBT3lrQixNQUFNd0IsU0FBU3RvQixNQUFPMEQsRUFBTUMsZ0JBQWN3QixJQU1wRDBpQixHQURBbEIsR0FBVUEsR0FBUyxJQUFLaGIsTUFBT3lPLElBQW1CLENBQUUsS0FDMUN6WCxPQUNGa2xCLEtBRVA3bUIsRUFBT2luQixHQURQelksRUFBTTRXLEdBQWVwYSxLQUFNMmEsRUFBT2tCLEtBQVMsSUFDcEIsR0FDdkJHLEdBQWV4WSxFQUFLLElBQU8sSUFBSzVJLE1BQU8sS0FBTXRDLE9BR3ZDdEQsSUFLTnNjLEVBQVVqYixFQUFPeWtCLE1BQU14SixRQUFTdGMsSUFBVSxHQUcxQ0EsR0FBU3NCLEVBQVdnYixFQUFROEosYUFBZTlKLEVBQVFpTCxXQUFjdm5CLEVBR2pFc2MsRUFBVWpiLEVBQU95a0IsTUFBTXhKLFFBQVN0YyxJQUFVLEdBRzFDOG1CLEVBQVl6bEIsRUFBT21DLE9BQVEsQ0FDMUJ4RCxLQUFNQSxFQUNOaW5CLFNBQVVBLEVBQ1ZwSCxLQUFNQSxFQUNOclQsUUFBU0EsRUFDVC9HLEtBQU0rRyxFQUFRL0csS0FDZG5FLFNBQVVBLEVBQ1ZnVyxhQUFjaFcsR0FBWUQsRUFBT3FPLEtBQUsvRSxNQUFNMk0sYUFBYWhNLEtBQU1oSyxHQUMvRGdNLFVBQVcwWixFQUFXdGIsS0FBTSxNQUMxQmdiLElBR0tLLEVBQVdILEVBQVE1bUIsT0FDMUIrbUIsRUFBV0gsRUFBUTVtQixHQUFTLElBQ25Cd25CLGNBQWdCLEVBR25CbEwsRUFBUW1MLFFBQ2lELElBQTlEbkwsRUFBUW1MLE1BQU0zb0IsS0FBTTRELEVBQU1tZCxFQUFNbUgsRUFBWUwsSUFFdkNqa0IsRUFBS21MLGtCQUNUbkwsRUFBS21MLGlCQUFrQjdOLEVBQU0ybUIsSUFLM0JySyxFQUFRNUQsTUFDWjRELEVBQVE1RCxJQUFJNVosS0FBTTRELEVBQU1va0IsR0FFbEJBLEVBQVV0YSxRQUFRL0csT0FDdkJxaEIsRUFBVXRhLFFBQVEvRyxLQUFPK0csRUFBUS9HLE9BSzlCbkUsRUFDSnlsQixFQUFTeGpCLE9BQVF3akIsRUFBU1MsZ0JBQWlCLEVBQUdWLEdBRTlDQyxFQUFTOW5CLEtBQU02bkIsR0FJaEJ6bEIsRUFBT3lrQixNQUFNOW5CLE9BQVFnQyxJQUFTLElBTWhDK2EsT0FBUSxTQUFVclksRUFBTWlqQixFQUFPblosRUFBU2xMLEVBQVVvbUIsR0FFakQsSUFBSXRrQixFQUFHdWtCLEVBQVduWixFQUNqQm9ZLEVBQVFDLEVBQUdDLEVBQ1h4SyxFQUFTeUssRUFBVS9tQixFQUFNZ25CLEVBQVlDLEVBQ3JDQyxFQUFXbEgsRUFBU0QsUUFBU3JkLElBQVVzZCxFQUFTaGUsSUFBS1UsR0FFdEQsR0FBTXdrQixJQUFlTixFQUFTTSxFQUFTTixRQUF2QyxDQU9BLElBREFDLEdBREFsQixHQUFVQSxHQUFTLElBQUtoYixNQUFPeU8sSUFBbUIsQ0FBRSxLQUMxQ3pYLE9BQ0ZrbEIsS0FNUCxHQUpBN21CLEVBQU9pbkIsR0FEUHpZLEVBQU00VyxHQUFlcGEsS0FBTTJhLEVBQU9rQixLQUFTLElBQ3BCLEdBQ3ZCRyxHQUFleFksRUFBSyxJQUFPLElBQUs1SSxNQUFPLEtBQU10QyxPQUd2Q3RELEVBQU4sQ0FlQSxJQVJBc2MsRUFBVWpiLEVBQU95a0IsTUFBTXhKLFFBQVN0YyxJQUFVLEdBRTFDK21CLEVBQVdILEVBRFg1bUIsR0FBU3NCLEVBQVdnYixFQUFROEosYUFBZTlKLEVBQVFpTCxXQUFjdm5CLElBQ3BDLEdBQzdCd08sRUFBTUEsRUFBSyxJQUNWLElBQUlwRyxPQUFRLFVBQVk0ZSxFQUFXdGIsS0FBTSxpQkFBb0IsV0FHOURpYyxFQUFZdmtCLEVBQUkyakIsRUFBU3BsQixPQUNqQnlCLEtBQ1AwakIsRUFBWUMsRUFBVTNqQixJQUVmc2tCLEdBQWVULElBQWFILEVBQVVHLFVBQ3pDemEsR0FBV0EsRUFBUS9HLE9BQVNxaEIsRUFBVXJoQixNQUN0QytJLElBQU9BLEVBQUlsRCxLQUFNd2IsRUFBVXhaLFlBQzNCaE0sR0FBWUEsSUFBYXdsQixFQUFVeGxCLFdBQ3hCLE9BQWJBLElBQXFCd2xCLEVBQVV4bEIsWUFDaEN5bEIsRUFBU3hqQixPQUFRSCxFQUFHLEdBRWYwakIsRUFBVXhsQixVQUNkeWxCLEVBQVNTLGdCQUVMbEwsRUFBUXZCLFFBQ1p1QixFQUFRdkIsT0FBT2pjLEtBQU00RCxFQUFNb2tCLElBT3pCYSxJQUFjWixFQUFTcGxCLFNBQ3JCMmEsRUFBUXNMLFdBQ2tELElBQS9EdEwsRUFBUXNMLFNBQVM5b0IsS0FBTTRELEVBQU1za0IsRUFBWUUsRUFBU0UsU0FFbEQvbEIsRUFBT3dtQixZQUFhbmxCLEVBQU0xQyxFQUFNa25CLEVBQVNFLGVBR25DUixFQUFRNW1CLFNBMUNmLElBQU1BLEtBQVE0bUIsRUFDYnZsQixFQUFPeWtCLE1BQU0vSyxPQUFRclksRUFBTTFDLEVBQU8ybEIsRUFBT2tCLEdBQUtyYSxFQUFTbEwsR0FBVSxHQThDL0RELEVBQU95RCxjQUFlOGhCLElBQzFCNUcsRUFBU2pGLE9BQVFyWSxFQUFNLG1CQUl6QjRrQixTQUFVLFNBQVVRLEdBRW5CLElBQUl0bkIsRUFBRzRDLEVBQUdoQixFQUFLZ1EsRUFBUzBVLEVBQVdpQixFQUNsQzlWLEVBQU8sSUFBSWhPLE1BQU90QixVQUFVaEIsUUFHNUJta0IsRUFBUXprQixFQUFPeWtCLE1BQU1rQyxJQUFLRixHQUUxQmYsR0FDQy9HLEVBQVNoZSxJQUFLM0QsS0FBTSxXQUFjSSxPQUFPMG9CLE9BQVEsT0FDL0NyQixFQUFNOWxCLE9BQVUsR0FDbkJzYyxFQUFVamIsRUFBT3lrQixNQUFNeEosUUFBU3dKLEVBQU05bEIsT0FBVSxHQUtqRCxJQUZBaVMsRUFBTSxHQUFNNlQsRUFFTnRsQixFQUFJLEVBQUdBLEVBQUltQyxVQUFVaEIsT0FBUW5CLElBQ2xDeVIsRUFBTXpSLEdBQU1tQyxVQUFXbkMsR0FNeEIsR0FIQXNsQixFQUFNbUMsZUFBaUI1cEIsTUFHbEJpZSxFQUFRNEwsY0FBMkQsSUFBNUM1TCxFQUFRNEwsWUFBWXBwQixLQUFNVCxLQUFNeW5CLEdBQTVELENBU0EsSUFKQWlDLEVBQWUxbUIsRUFBT3lrQixNQUFNaUIsU0FBU2pvQixLQUFNVCxLQUFNeW5CLEVBQU9pQixHQUd4RHZtQixFQUFJLEdBQ000UixFQUFVMlYsRUFBY3ZuQixRQUFZc2xCLEVBQU1xQyx3QkFJbkQsSUFIQXJDLEVBQU1zQyxjQUFnQmhXLEVBQVExUCxLQUU5QlUsRUFBSSxHQUNNMGpCLEVBQVkxVSxFQUFRMlUsU0FBVTNqQixRQUN0QzBpQixFQUFNdUMsaUNBSUR2QyxFQUFNd0MsYUFBc0MsSUFBeEJ4QixFQUFVeFosWUFDbkN3WSxFQUFNd0MsV0FBV2hkLEtBQU13YixFQUFVeFosYUFFakN3WSxFQUFNZ0IsVUFBWUEsRUFDbEJoQixFQUFNakcsS0FBT2lILEVBQVVqSCxVQUtWMWIsS0FIYi9CLElBQVVmLEVBQU95a0IsTUFBTXhKLFFBQVN3SyxFQUFVRyxXQUFjLElBQUtHLFFBQzVETixFQUFVdGEsU0FBVXhOLE1BQU9vVCxFQUFRMVAsS0FBTXVQLE1BR1QsS0FBekI2VCxFQUFNOVUsT0FBUzVPLEtBQ3JCMGpCLEVBQU1TLGlCQUNOVCxFQUFNTyxvQkFZWCxPQUpLL0osRUFBUWlNLGNBQ1pqTSxFQUFRaU0sYUFBYXpwQixLQUFNVCxLQUFNeW5CLEdBRzNCQSxFQUFNOVUsU0FHZCtWLFNBQVUsU0FBVWpCLEVBQU9pQixHQUMxQixJQUFJdm1CLEVBQUdzbUIsRUFBV2hYLEVBQUswWSxFQUFpQkMsRUFDdkNWLEVBQWUsR0FDZlAsRUFBZ0JULEVBQVNTLGNBQ3pCN2EsRUFBTW1aLEVBQU1oaUIsT0FHYixHQUFLMGpCLEdBSUo3YSxFQUFJL00sWUFPYyxVQUFma21CLEVBQU05bEIsTUFBb0I4bEIsRUFBTTRDLFFBQVUsR0FFN0MsS0FBUS9iLElBQVF0TyxLQUFNc08sRUFBTUEsRUFBSTFMLFlBQWM1QyxLQUk3QyxHQUFzQixJQUFqQnNPLEVBQUkvTSxXQUFvQyxVQUFma21CLEVBQU05bEIsT0FBcUMsSUFBakIyTSxFQUFJMUMsVUFBc0IsQ0FHakYsSUFGQXVlLEVBQWtCLEdBQ2xCQyxFQUFtQixHQUNiam9CLEVBQUksRUFBR0EsRUFBSWduQixFQUFlaG5CLFNBTUUyRCxJQUE1QnNrQixFQUZMM1ksR0FIQWdYLEVBQVlDLEVBQVV2bUIsSUFHTmMsU0FBVyxPQUcxQm1uQixFQUFrQjNZLEdBQVFnWCxFQUFVeFAsYUFDbkNqVyxFQUFReU8sRUFBS3pSLE1BQU9tYSxNQUFPN0wsSUFBUyxFQUNwQ3RMLEVBQU9nTixLQUFNeUIsRUFBS3pSLEtBQU0sS0FBTSxDQUFFc08sSUFBUWhMLFFBRXJDOG1CLEVBQWtCM1ksSUFDdEIwWSxFQUFnQnZwQixLQUFNNm5CLEdBR25CMEIsRUFBZ0I3bUIsUUFDcEJvbUIsRUFBYTlvQixLQUFNLENBQUV5RCxLQUFNaUssRUFBS29hLFNBQVV5QixJQVk5QyxPQUxBN2IsRUFBTXRPLEtBQ0RtcEIsRUFBZ0JULEVBQVNwbEIsUUFDN0JvbUIsRUFBYTlvQixLQUFNLENBQUV5RCxLQUFNaUssRUFBS29hLFNBQVVBLEVBQVNwb0IsTUFBTzZvQixLQUdwRE8sR0FHUlksUUFBUyxTQUFVamxCLEVBQU1rbEIsR0FDeEJucUIsT0FBT2loQixlQUFnQnJlLEVBQU9vbEIsTUFBTTdrQixVQUFXOEIsRUFBTSxDQUNwRG1sQixZQUFZLEVBQ1psSixjQUFjLEVBRWQzZCxJQUFLdEMsRUFBWWtwQixHQUNoQixXQUNDLEdBQUt2cUIsS0FBS3lxQixjQUNULE9BQU9GLEVBQU12cUIsS0FBS3lxQixnQkFHcEIsV0FDQyxHQUFLenFCLEtBQUt5cUIsY0FDVCxPQUFPenFCLEtBQUt5cUIsY0FBZXBsQixJQUk5QmtjLElBQUssU0FBVXBhLEdBQ2QvRyxPQUFPaWhCLGVBQWdCcmhCLEtBQU1xRixFQUFNLENBQ2xDbWxCLFlBQVksRUFDWmxKLGNBQWMsRUFDZG9KLFVBQVUsRUFDVnZqQixNQUFPQSxRQU1Yd2lCLElBQUssU0FBVWMsR0FDZCxPQUFPQSxFQUFlem5CLEVBQU8rQyxTQUM1QjBrQixFQUNBLElBQUl6bkIsRUFBT29sQixNQUFPcUMsSUFHcEJ4TSxRQUFTLENBQ1IwTSxLQUFNLENBR0xDLFVBQVUsR0FFWEMsTUFBTyxDQUdOekIsTUFBTyxTQUFVNUgsR0FJaEIsSUFBSXhULEVBQUtoTyxNQUFRd2hCLEVBV2pCLE9BUktzRCxHQUFlN1gsS0FBTWUsRUFBR3JNLE9BQzVCcU0sRUFBRzZjLE9BQVNoZixFQUFVbUMsRUFBSSxVQUcxQjJaLEdBQWdCM1osRUFBSSxRQUFTZ1osS0FJdkIsR0FFUm1CLFFBQVMsU0FBVTNHLEdBSWxCLElBQUl4VCxFQUFLaE8sTUFBUXdoQixFQVVqQixPQVBLc0QsR0FBZTdYLEtBQU1lLEVBQUdyTSxPQUM1QnFNLEVBQUc2YyxPQUFTaGYsRUFBVW1DLEVBQUksVUFFMUIyWixHQUFnQjNaLEVBQUksVUFJZCxHQUtSMlgsU0FBVSxTQUFVOEIsR0FDbkIsSUFBSWhpQixFQUFTZ2lCLEVBQU1oaUIsT0FDbkIsT0FBT3FmLEdBQWU3WCxLQUFNeEgsRUFBTzlELE9BQ2xDOEQsRUFBT29sQixPQUFTaGYsRUFBVXBHLEVBQVEsVUFDbENrYyxFQUFTaGUsSUFBSzhCLEVBQVEsVUFDdEJvRyxFQUFVcEcsRUFBUSxPQUlyQnFsQixhQUFjLENBQ2JaLGFBQWMsU0FBVXpDLFFBSUQzaEIsSUFBakIyaEIsRUFBTTlVLFFBQXdCOFUsRUFBTWdELGdCQUN4Q2hELEVBQU1nRCxjQUFjTSxZQUFjdEQsRUFBTTlVLFlBb0c3QzNQLEVBQU93bUIsWUFBYyxTQUFVbmxCLEVBQU0xQyxFQUFNb25CLEdBR3JDMWtCLEVBQUt3YixxQkFDVHhiLEVBQUt3YixvQkFBcUJsZSxFQUFNb25CLElBSWxDL2xCLEVBQU9vbEIsTUFBUSxTQUFVeG1CLEVBQUtvcEIsR0FHN0IsS0FBUWhyQixnQkFBZ0JnRCxFQUFPb2xCLE9BQzlCLE9BQU8sSUFBSXBsQixFQUFPb2xCLE1BQU94bUIsRUFBS29wQixHQUkxQnBwQixHQUFPQSxFQUFJRCxNQUNmM0IsS0FBS3lxQixjQUFnQjdvQixFQUNyQjVCLEtBQUsyQixLQUFPQyxFQUFJRCxLQUloQjNCLEtBQUtpckIsbUJBQXFCcnBCLEVBQUlzcEIsdUJBQ0hwbEIsSUFBekJsRSxFQUFJc3BCLG1CQUdnQixJQUFwQnRwQixFQUFJbXBCLFlBQ0wvRCxHQUNBQyxHQUtEam5CLEtBQUt5RixPQUFXN0QsRUFBSTZELFFBQWtDLElBQXhCN0QsRUFBSTZELE9BQU9sRSxTQUN4Q0ssRUFBSTZELE9BQU83QyxXQUNYaEIsRUFBSTZELE9BRUx6RixLQUFLK3BCLGNBQWdCbm9CLEVBQUltb0IsY0FDekIvcEIsS0FBS21yQixjQUFnQnZwQixFQUFJdXBCLGVBSXpCbnJCLEtBQUsyQixLQUFPQyxFQUlSb3BCLEdBQ0pob0IsRUFBT21DLE9BQVFuRixLQUFNZ3JCLEdBSXRCaHJCLEtBQUtvckIsVUFBWXhwQixHQUFPQSxFQUFJd3BCLFdBQWExaUIsS0FBSzJpQixNQUc5Q3JyQixLQUFNZ0QsRUFBTytDLFVBQVksR0FLMUIvQyxFQUFPb2xCLE1BQU03a0IsVUFBWSxDQUN4QkUsWUFBYVQsRUFBT29sQixNQUNwQjZDLG1CQUFvQmhFLEdBQ3BCNkMscUJBQXNCN0MsR0FDdEIrQyw4QkFBK0IvQyxHQUMvQnFFLGFBQWEsRUFFYnBELGVBQWdCLFdBQ2YsSUFBSWpjLEVBQUlqTSxLQUFLeXFCLGNBRWJ6cUIsS0FBS2lyQixtQkFBcUJqRSxHQUVyQi9hLElBQU1qTSxLQUFLc3JCLGFBQ2ZyZixFQUFFaWMsa0JBR0pGLGdCQUFpQixXQUNoQixJQUFJL2IsRUFBSWpNLEtBQUt5cUIsY0FFYnpxQixLQUFLOHBCLHFCQUF1QjlDLEdBRXZCL2EsSUFBTWpNLEtBQUtzckIsYUFDZnJmLEVBQUUrYixtQkFHSkMseUJBQTBCLFdBQ3pCLElBQUloYyxFQUFJak0sS0FBS3lxQixjQUVienFCLEtBQUtncUIsOEJBQWdDaEQsR0FFaEMvYSxJQUFNak0sS0FBS3NyQixhQUNmcmYsRUFBRWdjLDJCQUdIam9CLEtBQUtnb0Isb0JBS1BobEIsRUFBT2tCLEtBQU0sQ0FDWnFuQixRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUNaQyxnQkFBZ0IsRUFDaEJDLFNBQVMsRUFDVEMsUUFBUSxFQUNSQyxZQUFZLEVBQ1pDLFNBQVMsRUFDVEMsT0FBTyxFQUNQQyxPQUFPLEVBQ1BDLFVBQVUsRUFDVkMsTUFBTSxFQUNOLE1BQVEsRUFDUmxxQixNQUFNLEVBQ05tcUIsVUFBVSxFQUNWeGUsS0FBSyxFQUNMeWUsU0FBUyxFQUNUL0IsUUFBUSxFQUNSZ0MsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1RDLFdBQVcsRUFDWEMsYUFBYSxFQUNiQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsZUFBZSxFQUNmQyxXQUFXLEVBQ1hDLFNBQVMsRUFDVEMsT0FBTyxHQUNManFCLEVBQU95a0IsTUFBTTZDLFNBRWhCdG5CLEVBQU9rQixLQUFNLENBQUVncEIsTUFBTyxVQUFXQyxLQUFNLGFBQWMsU0FBVXhyQixFQUFNb21CLEdBQ3BFL2tCLEVBQU95a0IsTUFBTXhKLFFBQVN0YyxHQUFTLENBRzlCeW5CLE1BQU8sV0FRTixPQUhBekIsR0FBZ0IzbkIsS0FBTTJCLEVBQU11bEIsS0FHckIsR0FFUmlCLFFBQVMsV0FNUixPQUhBUixHQUFnQjNuQixLQUFNMkIsSUFHZixHQUtSZ2tCLFNBQVUsV0FDVCxPQUFPLEdBR1JvQyxhQUFjQSxNQVloQi9rQixFQUFPa0IsS0FBTSxDQUNaa3BCLFdBQVksWUFDWkMsV0FBWSxXQUNaQyxhQUFjLGNBQ2RDLGFBQWMsZUFDWixTQUFVQyxFQUFNN0QsR0FDbEIzbUIsRUFBT3lrQixNQUFNeEosUUFBU3VQLEdBQVMsQ0FDOUJ6RixhQUFjNEIsRUFDZFQsU0FBVVMsRUFFVlosT0FBUSxTQUFVdEIsR0FDakIsSUFBSTFqQixFQUNIMEIsRUFBU3pGLEtBQ1R5dEIsRUFBVWhHLEVBQU0wRCxjQUNoQjFDLEVBQVloQixFQUFNZ0IsVUFTbkIsT0FMTWdGLElBQWFBLElBQVlob0IsR0FBV3pDLEVBQU95RixTQUFVaEQsRUFBUWdvQixNQUNsRWhHLEVBQU05bEIsS0FBTzhtQixFQUFVRyxTQUN2QjdrQixFQUFNMGtCLEVBQVV0YSxRQUFReE4sTUFBT1gsS0FBTXNFLFdBQ3JDbWpCLEVBQU05bEIsS0FBT2dvQixHQUVQNWxCLE9BS1ZmLEVBQU9HLEdBQUdnQyxPQUFRLENBRWpCa2lCLEdBQUksU0FBVUMsRUFBT3JrQixFQUFVdWUsRUFBTXJlLEdBQ3BDLE9BQU9ra0IsR0FBSXJuQixLQUFNc25CLEVBQU9ya0IsRUFBVXVlLEVBQU1yZSxJQUV6Q29rQixJQUFLLFNBQVVELEVBQU9ya0IsRUFBVXVlLEVBQU1yZSxHQUNyQyxPQUFPa2tCLEdBQUlybkIsS0FBTXNuQixFQUFPcmtCLEVBQVV1ZSxFQUFNcmUsRUFBSSxJQUU3Q3VrQixJQUFLLFNBQVVKLEVBQU9ya0IsRUFBVUUsR0FDL0IsSUFBSXNsQixFQUFXOW1CLEVBQ2YsR0FBSzJsQixHQUFTQSxFQUFNWSxnQkFBa0JaLEVBQU1tQixVQVczQyxPQVJBQSxFQUFZbkIsRUFBTW1CLFVBQ2xCemxCLEVBQVFza0IsRUFBTXNDLGdCQUFpQmxDLElBQzlCZSxFQUFVeFosVUFDVHdaLEVBQVVHLFNBQVcsSUFBTUgsRUFBVXhaLFVBQ3JDd1osRUFBVUcsU0FDWEgsRUFBVXhsQixTQUNWd2xCLEVBQVV0YSxTQUVKbk8sS0FFUixHQUFzQixpQkFBVnNuQixFQUFxQixDQUdoQyxJQUFNM2xCLEtBQVEybEIsRUFDYnRuQixLQUFLMG5CLElBQUsvbEIsRUFBTXNCLEVBQVVxa0IsRUFBTzNsQixJQUVsQyxPQUFPM0IsS0FXUixPQVRrQixJQUFiaUQsR0FBMEMsbUJBQWJBLElBR2pDRSxFQUFLRixFQUNMQSxPQUFXNkMsSUFFQSxJQUFQM0MsSUFDSkEsRUFBSzhqQixJQUVDam5CLEtBQUtrRSxNQUFNLFdBQ2pCbEIsRUFBT3lrQixNQUFNL0ssT0FBUTFjLEtBQU1zbkIsRUFBT25rQixFQUFJRixTQU16QyxJQUtDeXFCLEdBQWUsd0JBR2ZDLEdBQVcsb0NBQ1hDLEdBQWUsMkNBR2hCLFNBQVNDLEdBQW9CeHBCLEVBQU13VyxHQUNsQyxPQUFLaFAsRUFBVXhILEVBQU0sVUFDcEJ3SCxFQUErQixLQUFyQmdQLEVBQVF0WixTQUFrQnNaLEVBQVVBLEVBQVE5SSxXQUFZLE9BRTNEL08sRUFBUXFCLEdBQU9zVixTQUFVLFNBQVcsSUFHckN0VixFQUlSLFNBQVN5cEIsR0FBZXpwQixHQUV2QixPQURBQSxFQUFLMUMsTUFBeUMsT0FBaEMwQyxFQUFLN0IsYUFBYyxTQUFzQixJQUFNNkIsRUFBSzFDLEtBQzNEMEMsRUFFUixTQUFTMHBCLEdBQWUxcEIsR0FPdkIsTUFOMkMsV0FBcENBLEVBQUsxQyxNQUFRLElBQUtyQixNQUFPLEVBQUcsR0FDbEMrRCxFQUFLMUMsS0FBTzBDLEVBQUsxQyxLQUFLckIsTUFBTyxHQUU3QitELEVBQUttSixnQkFBaUIsUUFHaEJuSixFQUdSLFNBQVMycEIsR0FBZ0Jwc0IsRUFBS3FzQixHQUM3QixJQUFJOXJCLEVBQUc4WCxFQUFHdFksRUFBZ0J1c0IsRUFBVUMsRUFBVTVGLEVBRTlDLEdBQXVCLElBQWxCMEYsRUFBSzFzQixTQUFWLENBS0EsR0FBS29nQixFQUFTRCxRQUFTOWYsS0FFdEIybUIsRUFEVzVHLEVBQVNoZSxJQUFLL0IsR0FDUDJtQixRQUtqQixJQUFNNW1CLEtBRk5nZ0IsRUFBU2pGLE9BQVF1UixFQUFNLGlCQUVUMUYsRUFDYixJQUFNcG1CLEVBQUksRUFBRzhYLEVBQUlzTyxFQUFRNW1CLEdBQU8yQixPQUFRbkIsRUFBSThYLEVBQUc5WCxJQUM5Q2EsRUFBT3lrQixNQUFNcE4sSUFBSzRULEVBQU10c0IsRUFBTTRtQixFQUFRNW1CLEdBQVFRLElBTzdDeWYsRUFBU0YsUUFBUzlmLEtBQ3RCc3NCLEVBQVd0TSxFQUFTekIsT0FBUXZlLEdBQzVCdXNCLEVBQVduckIsRUFBT21DLE9BQVEsR0FBSStvQixHQUU5QnRNLEVBQVNMLElBQUswTSxFQUFNRSxLQUt0QixTQUFTQyxHQUFVeHNCLEVBQUtxc0IsR0FDdkIsSUFBSXBpQixFQUFXb2lCLEVBQUtwaUIsU0FBU3BFLGNBR1gsVUFBYm9FLEdBQXdCaVosR0FBZTdYLEtBQU1yTCxFQUFJRCxNQUNyRHNzQixFQUFLdlosUUFBVTlTLEVBQUk4UyxRQUdLLFVBQWI3SSxHQUFxQyxhQUFiQSxJQUNuQ29pQixFQUFLMVYsYUFBZTNXLEVBQUkyVyxjQUkxQixTQUFTOFYsR0FBVUMsRUFBWTFhLEVBQU16UCxFQUFVcWlCLEdBRzlDNVMsRUFBT3JULEVBQU1xVCxHQUViLElBQUkrUyxFQUFVcGlCLEVBQU8raEIsRUFBU2lJLEVBQVl0c0IsRUFBTUMsRUFDL0NDLEVBQUksRUFDSjhYLEVBQUlxVSxFQUFXaHJCLE9BQ2ZrckIsRUFBV3ZVLEVBQUksRUFDZjlTLEVBQVF5TSxFQUFNLEdBQ2Q2YSxFQUFrQnB0QixFQUFZOEYsR0FHL0IsR0FBS3NuQixHQUNEeFUsRUFBSSxHQUFzQixpQkFBVjlTLElBQ2hCL0YsRUFBUThqQixZQUFjeUksR0FBUzFnQixLQUFNOUYsR0FDeEMsT0FBT21uQixFQUFXcHFCLE1BQU0sU0FBVWlXLEdBQ2pDLElBQUl6YSxFQUFPNHVCLEVBQVc5cEIsR0FBSTJWLEdBQ3JCc1UsSUFDSjdhLEVBQU0sR0FBTXpNLEVBQU0xRyxLQUFNVCxLQUFNbWEsRUFBT3phLEVBQUtndkIsU0FFM0NMLEdBQVUzdUIsRUFBTWtVLEVBQU16UCxFQUFVcWlCLE1BSWxDLEdBQUt2TSxJQUVKMVYsR0FEQW9pQixFQUFXTixHQUFlelMsRUFBTTBhLEVBQVksR0FBSTVoQixlQUFlLEVBQU80aEIsRUFBWTlILElBQ2pFelUsV0FFbUIsSUFBL0I0VSxFQUFTM2EsV0FBVzFJLFNBQ3hCcWpCLEVBQVdwaUIsR0FJUEEsR0FBU2lpQixHQUFVLENBT3ZCLElBTEErSCxHQURBakksRUFBVXRqQixFQUFPb0IsSUFBS3doQixHQUFRZSxFQUFVLFVBQVltSCxLQUMvQnhxQixPQUtibkIsRUFBSThYLEVBQUc5WCxJQUNkRixFQUFPMGtCLEVBRUZ4a0IsSUFBTXFzQixJQUNWdnNCLEVBQU9lLEVBQU93QyxNQUFPdkQsR0FBTSxHQUFNLEdBRzVCc3NCLEdBSUp2ckIsRUFBT2dCLE1BQU9zaUIsRUFBU1YsR0FBUTNqQixFQUFNLFlBSXZDa0MsRUFBUzFELEtBQU02dEIsRUFBWW5zQixHQUFLRixFQUFNRSxHQUd2QyxHQUFLb3NCLEVBT0osSUFOQXJzQixFQUFNb2tCLEVBQVNBLEVBQVFoakIsT0FBUyxHQUFJb0osY0FHcEMxSixFQUFPb0IsSUFBS2tpQixFQUFTeUgsSUFHZjVyQixFQUFJLEVBQUdBLEVBQUlvc0IsRUFBWXBzQixJQUM1QkYsRUFBT3FrQixFQUFTbmtCLEdBQ1g2aUIsR0FBWS9YLEtBQU1oTCxFQUFLTixNQUFRLE1BQ2xDZ2dCLEVBQVN4QixPQUFRbGUsRUFBTSxlQUN4QmUsRUFBT3lGLFNBQVV2RyxFQUFLRCxLQUVqQkEsRUFBS0wsS0FBOEMsWUFBckNLLEVBQUtOLE1BQVEsSUFBSzhGLGNBRy9CekUsRUFBTzJyQixXQUFhMXNCLEVBQUtILFVBQzdCa0IsRUFBTzJyQixTQUFVMXNCLEVBQUtMLElBQUssQ0FDMUJDLE1BQU9JLEVBQUtKLE9BQVNJLEVBQUtPLGFBQWMsVUFDdENOLEdBR0pILEVBQVNFLEVBQUs2UCxZQUFZNUwsUUFBUzBuQixHQUFjLElBQU0zckIsRUFBTUMsSUFRbkUsT0FBT29zQixFQUdSLFNBQVM1UixHQUFRclksRUFBTXBCLEVBQVUyckIsR0FLaEMsSUFKQSxJQUFJM3NCLEVBQ0gya0IsRUFBUTNqQixFQUFXRCxFQUFPOE0sT0FBUTdNLEVBQVVvQixHQUFTQSxFQUNyRGxDLEVBQUksRUFFNEIsT0FBdkJGLEVBQU8ya0IsRUFBT3prQixJQUFlQSxJQUNoQ3lzQixHQUE4QixJQUFsQjNzQixFQUFLVixVQUN0QnlCLEVBQU82ckIsVUFBV2pKLEdBQVEzakIsSUFHdEJBLEVBQUtXLGFBQ0pnc0IsR0FBWXpMLEdBQVlsaEIsSUFDNUI0akIsR0FBZUQsR0FBUTNqQixFQUFNLFdBRTlCQSxFQUFLVyxXQUFXQyxZQUFhWixJQUkvQixPQUFPb0MsRUFHUnJCLEVBQU9tQyxPQUFRLENBQ2QwaEIsY0FBZSxTQUFVNkgsR0FDeEIsT0FBT0EsR0FHUmxwQixNQUFPLFNBQVVuQixFQUFNeXFCLEVBQWVDLEdBQ3JDLElBQUk1c0IsRUFBRzhYLEVBQUcrVSxFQUFhQyxFQUN0QnpwQixFQUFRbkIsRUFBSzhnQixXQUFXLEdBQ3hCK0osRUFBUy9MLEdBQVk5ZSxHQUd0QixLQUFNakQsRUFBUWdrQixnQkFBc0MsSUFBbEIvZ0IsRUFBSzlDLFVBQW9DLEtBQWxCOEMsRUFBSzlDLFVBQzNEeUIsRUFBT3lWLFNBQVVwVSxJQU1uQixJQUhBNHFCLEVBQWVySixHQUFRcGdCLEdBR2pCckQsRUFBSSxFQUFHOFgsR0FGYitVLEVBQWNwSixHQUFRdmhCLElBRU9mLE9BQVFuQixFQUFJOFgsRUFBRzlYLElBQzNDaXNCLEdBQVVZLEVBQWE3c0IsR0FBSzhzQixFQUFjOXNCLElBSzVDLEdBQUsyc0IsRUFDSixHQUFLQyxFQUlKLElBSEFDLEVBQWNBLEdBQWVwSixHQUFRdmhCLEdBQ3JDNHFCLEVBQWVBLEdBQWdCckosR0FBUXBnQixHQUVqQ3JELEVBQUksRUFBRzhYLEVBQUkrVSxFQUFZMXJCLE9BQVFuQixFQUFJOFgsRUFBRzlYLElBQzNDNnJCLEdBQWdCZ0IsRUFBYTdzQixHQUFLOHNCLEVBQWM5c0IsU0FHakQ2ckIsR0FBZ0IzcEIsRUFBTW1CLEdBV3hCLE9BTkF5cEIsRUFBZXJKLEdBQVFwZ0IsRUFBTyxXQUNabEMsT0FBUyxHQUMxQnVpQixHQUFlb0osR0FBZUMsR0FBVXRKLEdBQVF2aEIsRUFBTSxXQUloRG1CLEdBR1JxcEIsVUFBVyxTQUFVL3FCLEdBS3BCLElBSkEsSUFBSTBkLEVBQU1uZCxFQUFNMUMsRUFDZnNjLEVBQVVqYixFQUFPeWtCLE1BQU14SixRQUN2QjliLEVBQUksT0FFNkIyRCxLQUF4QnpCLEVBQU9QLEVBQU8zQixJQUFxQkEsSUFDNUMsR0FBSzhlLEVBQVk1YyxHQUFTLENBQ3pCLEdBQU9tZCxFQUFPbmQsRUFBTXNkLEVBQVM1YixTQUFjLENBQzFDLEdBQUt5YixFQUFLK0csT0FDVCxJQUFNNW1CLEtBQVE2ZixFQUFLK0csT0FDYnRLLEVBQVN0YyxHQUNicUIsRUFBT3lrQixNQUFNL0ssT0FBUXJZLEVBQU0xQyxHQUkzQnFCLEVBQU93bUIsWUFBYW5sQixFQUFNMUMsRUFBTTZmLEVBQUt1SCxRQU94QzFrQixFQUFNc2QsRUFBUzViLGNBQVlELEVBRXZCekIsRUFBTXVkLEVBQVM3YixXQUluQjFCLEVBQU11ZCxFQUFTN2IsY0FBWUQsT0FPaEM5QyxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQmdxQixPQUFRLFNBQVVsc0IsR0FDakIsT0FBT3laLEdBQVExYyxLQUFNaUQsR0FBVSxJQUdoQ3laLE9BQVEsU0FBVXpaLEdBQ2pCLE9BQU95WixHQUFRMWMsS0FBTWlELElBR3RCVixLQUFNLFNBQVU0RSxHQUNmLE9BQU9nWixFQUFRbmdCLE1BQU0sU0FBVW1ILEdBQzlCLFlBQWlCckIsSUFBVnFCLEVBQ05uRSxFQUFPVCxLQUFNdkMsTUFDYkEsS0FBSzJjLFFBQVF6WSxNQUFNLFdBQ0ssSUFBbEJsRSxLQUFLdUIsVUFBb0MsS0FBbEJ2QixLQUFLdUIsVUFBcUMsSUFBbEJ2QixLQUFLdUIsV0FDeER2QixLQUFLOFIsWUFBYzNLLFFBR3BCLEtBQU1BLEVBQU83QyxVQUFVaEIsU0FHM0I4ckIsT0FBUSxXQUNQLE9BQU9mLEdBQVVydUIsS0FBTXNFLFdBQVcsU0FBVUQsR0FDcEIsSUFBbEJyRSxLQUFLdUIsVUFBb0MsS0FBbEJ2QixLQUFLdUIsVUFBcUMsSUFBbEJ2QixLQUFLdUIsVUFDM0Nzc0IsR0FBb0I3dEIsS0FBTXFFLEdBQ2hDMUIsWUFBYTBCLE9BS3ZCZ3JCLFFBQVMsV0FDUixPQUFPaEIsR0FBVXJ1QixLQUFNc0UsV0FBVyxTQUFVRCxHQUMzQyxHQUF1QixJQUFsQnJFLEtBQUt1QixVQUFvQyxLQUFsQnZCLEtBQUt1QixVQUFxQyxJQUFsQnZCLEtBQUt1QixTQUFpQixDQUN6RSxJQUFJa0UsRUFBU29vQixHQUFvQjd0QixLQUFNcUUsR0FDdkNvQixFQUFPNnBCLGFBQWNqckIsRUFBTW9CLEVBQU9zTSxpQkFLckN3ZCxPQUFRLFdBQ1AsT0FBT2xCLEdBQVVydUIsS0FBTXNFLFdBQVcsU0FBVUQsR0FDdENyRSxLQUFLNEMsWUFDVDVDLEtBQUs0QyxXQUFXMHNCLGFBQWNqckIsRUFBTXJFLFVBS3ZDd3ZCLE1BQU8sV0FDTixPQUFPbkIsR0FBVXJ1QixLQUFNc0UsV0FBVyxTQUFVRCxHQUN0Q3JFLEtBQUs0QyxZQUNUNUMsS0FBSzRDLFdBQVcwc0IsYUFBY2pyQixFQUFNckUsS0FBS3lPLGlCQUs1Q2tPLE1BQU8sV0FJTixJQUhBLElBQUl0WSxFQUNIbEMsRUFBSSxFQUUyQixPQUF0QmtDLEVBQU9yRSxLQUFNbUMsSUFBZUEsSUFDZCxJQUFsQmtDLEVBQUs5QyxXQUdUeUIsRUFBTzZyQixVQUFXakosR0FBUXZoQixHQUFNLElBR2hDQSxFQUFLeU4sWUFBYyxJQUlyQixPQUFPOVIsTUFHUndGLE1BQU8sU0FBVXNwQixFQUFlQyxHQUkvQixPQUhBRCxFQUFpQyxNQUFqQkEsR0FBZ0NBLEVBQ2hEQyxFQUF5QyxNQUFyQkEsRUFBNEJELEVBQWdCQyxFQUV6RC91QixLQUFLb0UsS0FBSyxXQUNoQixPQUFPcEIsRUFBT3dDLE1BQU94RixLQUFNOHVCLEVBQWVDLE9BSTVDTCxLQUFNLFNBQVV2bkIsR0FDZixPQUFPZ1osRUFBUW5nQixNQUFNLFNBQVVtSCxHQUM5QixJQUFJOUMsRUFBT3JFLEtBQU0sSUFBTyxHQUN2Qm1DLEVBQUksRUFDSjhYLEVBQUlqYSxLQUFLc0QsT0FFVixRQUFld0MsSUFBVnFCLEdBQXlDLElBQWxCOUMsRUFBSzlDLFNBQ2hDLE9BQU84QyxFQUFLZ00sVUFJYixHQUFzQixpQkFBVmxKLElBQXVCdW1CLEdBQWF6Z0IsS0FBTTlGLEtBQ3BEbWUsSUFBV1AsR0FBU3BZLEtBQU14RixJQUFXLENBQUUsR0FBSSxLQUFRLEdBQUlNLGVBQWtCLENBRTFFTixFQUFRbkUsRUFBTzZqQixjQUFlMWYsR0FFOUIsSUFDQyxLQUFRaEYsRUFBSThYLEVBQUc5WCxJQUlTLEtBSHZCa0MsRUFBT3JFLEtBQU1tQyxJQUFPLElBR1ZaLFdBQ1R5QixFQUFPNnJCLFVBQVdqSixHQUFRdmhCLEdBQU0sSUFDaENBLEVBQUtnTSxVQUFZbEosR0FJbkI5QyxFQUFPLEVBR04sTUFBUTRILEtBR041SCxHQUNKckUsS0FBSzJjLFFBQVF5UyxPQUFRam9CLEtBRXBCLEtBQU1BLEVBQU83QyxVQUFVaEIsU0FHM0Jtc0IsWUFBYSxXQUNaLElBQUlqSixFQUFVLEdBR2QsT0FBTzZILEdBQVVydUIsS0FBTXNFLFdBQVcsU0FBVUQsR0FDM0MsSUFBSWtQLEVBQVN2VCxLQUFLNEMsV0FFYkksRUFBTzZELFFBQVM3RyxLQUFNd21CLEdBQVksSUFDdEN4akIsRUFBTzZyQixVQUFXakosR0FBUTVsQixPQUNyQnVULEdBQ0pBLEVBQU9tYyxhQUFjcnJCLEVBQU1yRSxTQUszQndtQixNQUlMeGpCLEVBQU9rQixLQUFNLENBQ1p5ckIsU0FBVSxTQUNWQyxVQUFXLFVBQ1hOLGFBQWMsU0FDZE8sWUFBYSxRQUNiQyxXQUFZLGdCQUNWLFNBQVV6cUIsRUFBTTBxQixHQUNsQi9zQixFQUFPRyxHQUFJa0MsR0FBUyxTQUFVcEMsR0FPN0IsSUFOQSxJQUFJYSxFQUNIQyxFQUFNLEdBQ05pc0IsRUFBU2h0QixFQUFRQyxHQUNqQndCLEVBQU91ckIsRUFBTzFzQixPQUFTLEVBQ3ZCbkIsRUFBSSxFQUVHQSxHQUFLc0MsRUFBTXRDLElBQ2xCMkIsRUFBUTNCLElBQU1zQyxFQUFPekUsS0FBT0EsS0FBS3dGLE9BQU8sR0FDeEN4QyxFQUFRZ3RCLEVBQVE3dEIsSUFBTzR0QixHQUFZanNCLEdBSW5DbEQsRUFBS0QsTUFBT29ELEVBQUtELEVBQU1ILE9BR3hCLE9BQU8zRCxLQUFLNkQsVUFBV0UsT0FHekIsSUFBSWtzQixHQUFZLElBQUlsbUIsT0FBUSxLQUFPZ1osR0FBTyxrQkFBbUIsS0FFekRtTixHQUFZLFNBQVU3ckIsR0FLeEIsSUFBSTZuQixFQUFPN25CLEVBQUtxSSxjQUFjNEMsWUFNOUIsT0FKTTRjLEdBQVNBLEVBQUtpRSxTQUNuQmpFLEVBQU9uc0IsR0FHRG1zQixFQUFLa0UsaUJBQWtCL3JCLElBRzVCZ3NCLEdBQU8sU0FBVWhzQixFQUFNZSxFQUFTakIsR0FDbkMsSUFBSUosRUFBS3NCLEVBQ1JpckIsRUFBTSxHQUdQLElBQU1qckIsS0FBUUQsRUFDYmtyQixFQUFLanJCLEdBQVNoQixFQUFLa2YsTUFBT2xlLEdBQzFCaEIsRUFBS2tmLE1BQU9sZSxHQUFTRCxFQUFTQyxHQU0vQixJQUFNQSxLQUhOdEIsRUFBTUksRUFBUzFELEtBQU00RCxHQUdQZSxFQUNiZixFQUFLa2YsTUFBT2xlLEdBQVNpckIsRUFBS2pyQixHQUczQixPQUFPdEIsR0FJSndzQixHQUFZLElBQUl4bUIsT0FBUW1aLEdBQVU3VixLQUFNLEtBQU8sS0FpSm5ELFNBQVNtakIsR0FBUW5zQixFQUFNZ0IsRUFBTW9yQixHQUM1QixJQUFJQyxFQUFPQyxFQUFVQyxFQUFVN3NCLEVBTTlCd2YsRUFBUWxmLEVBQUtrZixNQXFDZCxPQW5DQWtOLEVBQVdBLEdBQVlQLEdBQVc3ckIsTUFRcEIsTUFGYk4sRUFBTTBzQixFQUFTSSxpQkFBa0J4ckIsSUFBVW9yQixFQUFVcHJCLEtBRWpDOGQsR0FBWTllLEtBQy9CTixFQUFNZixFQUFPdWdCLE1BQU9sZixFQUFNZ0IsS0FRckJqRSxFQUFRMHZCLGtCQUFvQmIsR0FBVWhqQixLQUFNbEosSUFBU3dzQixHQUFVdGpCLEtBQU01SCxLQUcxRXFyQixFQUFRbk4sRUFBTW1OLE1BQ2RDLEVBQVdwTixFQUFNb04sU0FDakJDLEVBQVdyTixFQUFNcU4sU0FHakJyTixFQUFNb04sU0FBV3BOLEVBQU1xTixTQUFXck4sRUFBTW1OLE1BQVEzc0IsRUFDaERBLEVBQU0wc0IsRUFBU0MsTUFHZm5OLEVBQU1tTixNQUFRQSxFQUNkbk4sRUFBTW9OLFNBQVdBLEVBQ2pCcE4sRUFBTXFOLFNBQVdBLFNBSUo5cUIsSUFBUi9CLEVBSU5BLEVBQU0sR0FDTkEsRUFJRixTQUFTZ3RCLEdBQWNDLEVBQWFDLEdBR25DLE1BQU8sQ0FDTnR0QixJQUFLLFdBQ0osSUFBS3F0QixJQVNMLE9BQVNoeEIsS0FBSzJELElBQU1zdEIsR0FBU3R3QixNQUFPWCxLQUFNc0Usa0JBTGxDdEUsS0FBSzJELE9BM01oQixXQUlDLFNBQVN1dEIsSUFHUixHQUFNck0sRUFBTixDQUlBc00sRUFBVTVOLE1BQU02TixRQUFVLCtFQUUxQnZNLEVBQUl0QixNQUFNNk4sUUFDVCw0SEFHRGppQixHQUFnQnhNLFlBQWF3dUIsR0FBWXh1QixZQUFha2lCLEdBRXRELElBQUl3TSxFQUFXdHhCLEVBQU9xd0IsaUJBQWtCdkwsR0FDeEN5TSxFQUFvQyxPQUFqQkQsRUFBUzloQixJQUc1QmdpQixFQUFzRSxLQUE5Q0MsRUFBb0JILEVBQVNJLFlBSXJENU0sRUFBSXRCLE1BQU1tTyxNQUFRLE1BQ2xCQyxFQUE2RCxLQUF6Q0gsRUFBb0JILEVBQVNLLE9BSWpERSxFQUFnRSxLQUF6Q0osRUFBb0JILEVBQVNYLE9BTXBEN0wsRUFBSXRCLE1BQU1zTyxTQUFXLFdBQ3JCQyxFQUFpRSxLQUE5Q04sRUFBb0IzTSxFQUFJa04sWUFBYyxHQUV6RDVpQixHQUFnQnRNLFlBQWFzdUIsR0FJN0J0TSxFQUFNLE1BR1AsU0FBUzJNLEVBQW9CUSxHQUM1QixPQUFPaHNCLEtBQUtpc0IsTUFBT0MsV0FBWUYsSUFHaEMsSUFBSVYsRUFBa0JNLEVBQXNCRSxFQUFrQkgsRUFDN0RRLEVBQXlCWixFQUN6QkosRUFBWXZ4QixFQUFTMEMsY0FBZSxPQUNwQ3VpQixFQUFNamxCLEVBQVMwQyxjQUFlLE9BR3pCdWlCLEVBQUl0QixRQU1Wc0IsRUFBSXRCLE1BQU02TyxlQUFpQixjQUMzQnZOLEVBQUlNLFdBQVcsR0FBTzVCLE1BQU02TyxlQUFpQixHQUM3Q2h4QixFQUFRaXhCLGdCQUErQyxnQkFBN0J4TixFQUFJdEIsTUFBTTZPLGVBRXBDcHZCLEVBQU9tQyxPQUFRL0QsRUFBUyxDQUN2Qmt4QixrQkFBbUIsV0FFbEIsT0FEQXBCLElBQ09VLEdBRVJkLGVBQWdCLFdBRWYsT0FEQUksSUFDT1MsR0FFUlksY0FBZSxXQUVkLE9BREFyQixJQUNPSSxHQUVSa0IsbUJBQW9CLFdBRW5CLE9BREF0QixJQUNPSyxHQUVSa0IsY0FBZSxXQUVkLE9BREF2QixJQUNPWSxHQVlSWSxxQkFBc0IsV0FDckIsSUFBSUMsRUFBT2xOLEVBQUltTixFQUFTQyxFQW1DeEIsT0FsQ2dDLE1BQTNCVixJQUNKUSxFQUFRL3lCLEVBQVMwQyxjQUFlLFNBQ2hDbWpCLEVBQUs3bEIsRUFBUzBDLGNBQWUsTUFDN0Jzd0IsRUFBVWh6QixFQUFTMEMsY0FBZSxPQUVsQ3F3QixFQUFNcFAsTUFBTTZOLFFBQVUsMkRBQ3RCM0wsRUFBR2xDLE1BQU02TixRQUFVLG1CQUtuQjNMLEVBQUdsQyxNQUFNdVAsT0FBUyxNQUNsQkYsRUFBUXJQLE1BQU11UCxPQUFTLE1BUXZCRixFQUFRclAsTUFBTUMsUUFBVSxRQUV4QnJVLEdBQ0V4TSxZQUFhZ3dCLEdBQ2Jod0IsWUFBYThpQixHQUNiOWlCLFlBQWFpd0IsR0FFZkMsRUFBVTl5QixFQUFPcXdCLGlCQUFrQjNLLEdBQ25DME0sRUFBNEJZLFNBQVVGLEVBQVFDLE9BQVEsSUFDckRDLFNBQVVGLEVBQVFHLGVBQWdCLElBQ2xDRCxTQUFVRixFQUFRSSxrQkFBbUIsTUFBV3hOLEVBQUd5TixhQUVwRC9qQixHQUFnQnRNLFlBQWE4dkIsSUFFdkJSLE1BdklWLEdBc05BLElBQUlnQixHQUFjLENBQUUsU0FBVSxNQUFPLE1BQ3BDQyxHQUFheHpCLEVBQVMwQyxjQUFlLE9BQVFpaEIsTUFDN0M4UCxHQUFjLEdBa0JmLFNBQVNDLEdBQWVqdUIsR0FHdkIsT0FGWXJDLEVBQU91d0IsU0FBVWx1QixJQUFVZ3VCLEdBQWFodUIsS0FLL0NBLEtBQVErdEIsR0FDTC90QixFQUVEZ3VCLEdBQWFodUIsR0F4QnJCLFNBQXlCQSxHQU14QixJQUhBLElBQUltdUIsRUFBVW51QixFQUFNLEdBQUl5YixjQUFnQnpiLEVBQUsvRSxNQUFPLEdBQ25ENkIsRUFBSWd4QixHQUFZN3ZCLE9BRVRuQixLQUVQLElBREFrRCxFQUFPOHRCLEdBQWFoeEIsR0FBTXF4QixLQUNiSixHQUNaLE9BQU8vdEIsRUFlb0JvdUIsQ0FBZ0JwdUIsSUFBVUEsR0FJeEQsSUFLQ3F1QixHQUFlLDRCQUNmQyxHQUFjLE1BQ2RDLEdBQVUsQ0FBRS9CLFNBQVUsV0FBWWdDLFdBQVksU0FBVXJRLFFBQVMsU0FDakVzUSxHQUFxQixDQUNwQkMsY0FBZSxJQUNmQyxXQUFZLE9BR2QsU0FBU0MsR0FBbUJydkIsRUFBT3VDLEVBQU8rc0IsR0FJekMsSUFBSWx0QixFQUFVaWMsR0FBUXRXLEtBQU14RixHQUM1QixPQUFPSCxFQUdOaEIsS0FBS211QixJQUFLLEVBQUdudEIsRUFBUyxJQUFRa3RCLEdBQVksS0FBVWx0QixFQUFTLElBQU8sTUFDcEVHLEVBR0YsU0FBU2l0QixHQUFvQi92QixFQUFNZ3dCLEVBQVdDLEVBQUtDLEVBQWFDLEVBQVFDLEdBQ3ZFLElBQUl0eUIsRUFBa0IsVUFBZGt5QixFQUF3QixFQUFJLEVBQ25DSyxFQUFRLEVBQ1JDLEVBQVEsRUFHVCxHQUFLTCxLQUFVQyxFQUFjLFNBQVcsV0FDdkMsT0FBTyxFQUdSLEtBQVFweUIsRUFBSSxFQUFHQSxHQUFLLEVBR04sV0FBUm15QixJQUNKSyxHQUFTM3hCLEVBQU95Z0IsSUFBS3BmLEVBQU1pd0IsRUFBTXBSLEdBQVcvZ0IsSUFBSyxFQUFNcXlCLElBSWxERCxHQW1CUSxZQUFSRCxJQUNKSyxHQUFTM3hCLEVBQU95Z0IsSUFBS3BmLEVBQU0sVUFBWTZlLEdBQVcvZ0IsSUFBSyxFQUFNcXlCLElBSWpELFdBQVJGLElBQ0pLLEdBQVMzeEIsRUFBT3lnQixJQUFLcGYsRUFBTSxTQUFXNmUsR0FBVy9nQixHQUFNLFNBQVMsRUFBTXF5QixNQXRCdkVHLEdBQVMzeEIsRUFBT3lnQixJQUFLcGYsRUFBTSxVQUFZNmUsR0FBVy9nQixJQUFLLEVBQU1xeUIsR0FHaEQsWUFBUkYsRUFDSkssR0FBUzN4QixFQUFPeWdCLElBQUtwZixFQUFNLFNBQVc2ZSxHQUFXL2dCLEdBQU0sU0FBUyxFQUFNcXlCLEdBSXRFRSxHQUFTMXhCLEVBQU95Z0IsSUFBS3BmLEVBQU0sU0FBVzZlLEdBQVcvZ0IsR0FBTSxTQUFTLEVBQU1xeUIsSUFvQ3pFLE9BaEJNRCxHQUFlRSxHQUFlLElBSW5DRSxHQUFTM3VCLEtBQUttdUIsSUFBSyxFQUFHbnVCLEtBQUs0dUIsS0FDMUJ2d0IsRUFBTSxTQUFXZ3dCLEVBQVcsR0FBSXZULGNBQWdCdVQsRUFBVS96QixNQUFPLElBQ2pFbTBCLEVBQ0FFLEVBQ0FELEVBQ0EsTUFJTSxHQUdEQyxFQUdSLFNBQVNFLEdBQWtCeHdCLEVBQU1nd0IsRUFBV0ssR0FHM0MsSUFBSUYsRUFBU3RFLEdBQVc3ckIsR0FLdkJrd0IsSUFEbUJuekIsRUFBUWt4QixxQkFBdUJvQyxJQUVFLGVBQW5EMXhCLEVBQU95Z0IsSUFBS3BmLEVBQU0sYUFBYSxFQUFPbXdCLEdBQ3ZDTSxFQUFtQlAsRUFFbkJueUIsRUFBTW91QixHQUFRbnNCLEVBQU1nd0IsRUFBV0csR0FDL0JPLEVBQWEsU0FBV1YsRUFBVyxHQUFJdlQsY0FBZ0J1VCxFQUFVL3pCLE1BQU8sR0FJekUsR0FBSzJ2QixHQUFVaGpCLEtBQU03SyxHQUFRLENBQzVCLElBQU1zeUIsRUFDTCxPQUFPdHlCLEVBRVJBLEVBQU0sT0F5Q1AsUUFsQ1FoQixFQUFRa3hCLHFCQUF1QmlDLElBTXJDbnpCLEVBQVFzeEIsd0JBQTBCN21CLEVBQVV4SCxFQUFNLE9BSTNDLFNBQVJqQyxJQUlDOHZCLFdBQVk5dkIsSUFBMEQsV0FBakRZLEVBQU95Z0IsSUFBS3BmLEVBQU0sV0FBVyxFQUFPbXdCLEtBRzFEbndCLEVBQUsyd0IsaUJBQWlCMXhCLFNBRXRCaXhCLEVBQWlFLGVBQW5EdnhCLEVBQU95Z0IsSUFBS3BmLEVBQU0sYUFBYSxFQUFPbXdCLElBS3BETSxFQUFtQkMsS0FBYzF3QixLQUVoQ2pDLEVBQU1pQyxFQUFNMHdCLE1BS2QzeUIsRUFBTTh2QixXQUFZOXZCLElBQVMsR0FJMUJneUIsR0FDQy92QixFQUNBZ3dCLEVBQ0FLLElBQVdILEVBQWMsU0FBVyxXQUNwQ08sRUFDQU4sRUFHQXB5QixHQUVFLEtBK1NMLFNBQVM2eUIsR0FBTzV3QixFQUFNZSxFQUFTcWMsRUFBTXpjLEVBQUtrd0IsR0FDekMsT0FBTyxJQUFJRCxHQUFNMXhCLFVBQVVILEtBQU1pQixFQUFNZSxFQUFTcWMsRUFBTXpjLEVBQUtrd0IsR0E3UzVEbHlCLEVBQU9tQyxPQUFRLENBSWRnd0IsU0FBVSxDQUNUQyxRQUFTLENBQ1J6eEIsSUFBSyxTQUFVVSxFQUFNb3NCLEdBQ3BCLEdBQUtBLEVBQVcsQ0FHZixJQUFJMXNCLEVBQU15c0IsR0FBUW5zQixFQUFNLFdBQ3hCLE1BQWUsS0FBUk4sRUFBYSxJQUFNQSxNQU85Qm9nQixVQUFXLENBQ1YseUJBQTJCLEVBQzNCLGFBQWUsRUFDZixhQUFlLEVBQ2YsVUFBWSxFQUNaLFlBQWMsRUFDZCxZQUFjLEVBQ2QsVUFBWSxFQUNaLFlBQWMsRUFDZCxlQUFpQixFQUNqQixpQkFBbUIsRUFDbkIsU0FBVyxFQUNYLFlBQWMsRUFDZCxjQUFnQixFQUNoQixZQUFjLEVBQ2QsU0FBVyxFQUNYLE9BQVMsRUFDVCxTQUFXLEVBQ1gsUUFBVSxFQUNWLFFBQVUsRUFDVixNQUFRLEdBS1RvUCxTQUFVLEdBR1ZoUSxNQUFPLFNBQVVsZixFQUFNZ0IsRUFBTThCLEVBQU91dEIsR0FHbkMsR0FBTXJ3QixHQUEwQixJQUFsQkEsRUFBSzlDLFVBQW9DLElBQWxCOEMsRUFBSzlDLFVBQW1COEMsRUFBS2tmLE1BQWxFLENBS0EsSUFBSXhmLEVBQUtwQyxFQUFNNmdCLEVBQ2Q2UyxFQUFXdFUsRUFBVzFiLEdBQ3RCaXdCLEVBQWUzQixHQUFZMW1CLEtBQU01SCxHQUNqQ2tlLEVBQVFsZixFQUFLa2YsTUFhZCxHQVJNK1IsSUFDTGp3QixFQUFPaXVCLEdBQWUrQixJQUl2QjdTLEVBQVF4ZixFQUFPbXlCLFNBQVU5dkIsSUFBVXJDLEVBQU9teUIsU0FBVUUsUUFHckN2dkIsSUFBVnFCLEVBMENKLE9BQUtxYixHQUFTLFFBQVNBLFFBQ3dCMWMsS0FBNUMvQixFQUFNeWUsRUFBTTdlLElBQUtVLEdBQU0sRUFBT3F3QixJQUV6QjN3QixFQUlEd2YsRUFBT2xlLEdBN0NBLFdBSGQxRCxTQUFjd0YsS0FHY3BELEVBQU1rZixHQUFRdFcsS0FBTXhGLEtBQWFwRCxFQUFLLEtBQ2pFb0QsRUFBUXVjLEdBQVdyZixFQUFNZ0IsRUFBTXRCLEdBRy9CcEMsRUFBTyxVQUlNLE1BQVR3RixHQUFpQkEsR0FBVUEsSUFPbEIsV0FBVHhGLEdBQXNCMnpCLElBQzFCbnVCLEdBQVNwRCxHQUFPQSxFQUFLLEtBQVNmLEVBQU9taEIsVUFBV2tSLEdBQWEsR0FBSyxPQUk3RGowQixFQUFRaXhCLGlCQUE2QixLQUFWbHJCLEdBQWlELElBQWpDOUIsRUFBS3hFLFFBQVMsZ0JBQzlEMGlCLEVBQU9sZSxHQUFTLFdBSVhtZCxHQUFZLFFBQVNBLFFBQ3NCMWMsS0FBOUNxQixFQUFRcWIsRUFBTWpCLElBQUtsZCxFQUFNOEMsRUFBT3V0QixNQUU3QlksRUFDSi9SLEVBQU1nUyxZQUFhbHdCLEVBQU04QixHQUV6Qm9jLEVBQU9sZSxHQUFTOEIsTUFrQnBCc2MsSUFBSyxTQUFVcGYsRUFBTWdCLEVBQU1xdkIsRUFBT0YsR0FDakMsSUFBSXB5QixFQUFLd0IsRUFBSzRlLEVBQ2I2UyxFQUFXdFUsRUFBVzFiLEdBNkJ2QixPQTVCZ0JzdUIsR0FBWTFtQixLQUFNNUgsS0FNakNBLEVBQU9pdUIsR0FBZStCLEtBSXZCN1MsRUFBUXhmLEVBQU9teUIsU0FBVTl2QixJQUFVckMsRUFBT215QixTQUFVRSxLQUd0QyxRQUFTN1MsSUFDdEJwZ0IsRUFBTW9nQixFQUFNN2UsSUFBS1UsR0FBTSxFQUFNcXdCLFNBSWpCNXVCLElBQVIxRCxJQUNKQSxFQUFNb3VCLEdBQVFuc0IsRUFBTWdCLEVBQU1tdkIsSUFJZCxXQUFScHlCLEdBQW9CaUQsS0FBUXl1QixLQUNoQzF4QixFQUFNMHhCLEdBQW9CenVCLElBSVosS0FBVnF2QixHQUFnQkEsR0FDcEI5d0IsRUFBTXN1QixXQUFZOXZCLElBQ0QsSUFBVnN5QixHQUFrQmMsU0FBVTV4QixHQUFRQSxHQUFPLEVBQUl4QixHQUdoREEsS0FJVFksRUFBT2tCLEtBQU0sQ0FBRSxTQUFVLFVBQVcsU0FBVXNELEVBQUk2c0IsR0FDakRyeEIsRUFBT215QixTQUFVZCxHQUFjLENBQzlCMXdCLElBQUssU0FBVVUsRUFBTW9zQixFQUFVaUUsR0FDOUIsR0FBS2pFLEVBSUosT0FBT2lELEdBQWF6bUIsS0FBTWpLLEVBQU95Z0IsSUFBS3BmLEVBQU0sYUFReENBLEVBQUsyd0IsaUJBQWlCMXhCLFFBQVdlLEVBQUtveEIsd0JBQXdCL0UsTUFJakVtRSxHQUFrQnh3QixFQUFNZ3dCLEVBQVdLLEdBSG5DckUsR0FBTWhzQixFQUFNdXZCLElBQVMsV0FDcEIsT0FBT2lCLEdBQWtCeHdCLEVBQU1nd0IsRUFBV0ssT0FNOUNuVCxJQUFLLFNBQVVsZCxFQUFNOEMsRUFBT3V0QixHQUMzQixJQUFJMXRCLEVBQ0h3dEIsRUFBU3RFLEdBQVc3ckIsR0FJcEJxeEIsR0FBc0J0MEIsRUFBUXF4QixpQkFDVCxhQUFwQitCLEVBQU8zQyxTQUlSMEMsR0FEa0JtQixHQUFzQmhCLElBRVksZUFBbkQxeEIsRUFBT3lnQixJQUFLcGYsRUFBTSxhQUFhLEVBQU9td0IsR0FDdkNOLEVBQVdRLEVBQ1ZOLEdBQ0MvdkIsRUFDQWd3QixFQUNBSyxFQUNBSCxFQUNBQyxHQUVELEVBcUJGLE9BakJLRCxHQUFlbUIsSUFDbkJ4QixHQUFZbHVCLEtBQUs0dUIsS0FDaEJ2d0IsRUFBTSxTQUFXZ3dCLEVBQVcsR0FBSXZULGNBQWdCdVQsRUFBVS96QixNQUFPLElBQ2pFNHhCLFdBQVlzQyxFQUFRSCxJQUNwQkQsR0FBb0IvdkIsRUFBTWd3QixFQUFXLFVBQVUsRUFBT0csR0FDdEQsS0FLR04sSUFBY2x0QixFQUFVaWMsR0FBUXRXLEtBQU14RixLQUNiLFFBQTNCSCxFQUFTLElBQU8sUUFFbEIzQyxFQUFLa2YsTUFBTzhRLEdBQWNsdEIsRUFDMUJBLEVBQVFuRSxFQUFPeWdCLElBQUtwZixFQUFNZ3dCLElBR3BCSixHQUFtQjV2QixFQUFNOEMsRUFBTytzQixRQUsxQ2x4QixFQUFPbXlCLFNBQVMxRCxXQUFhVixHQUFjM3ZCLEVBQVFveEIsb0JBQ2xELFNBQVVudUIsRUFBTW9zQixHQUNmLEdBQUtBLEVBQ0osT0FBU3lCLFdBQVkxQixHQUFRbnNCLEVBQU0sZ0JBQ2xDQSxFQUFLb3hCLHdCQUF3QkUsS0FDNUJ0RixHQUFNaHNCLEVBQU0sQ0FBRW90QixXQUFZLElBQUssV0FDOUIsT0FBT3B0QixFQUFLb3hCLHdCQUF3QkUsU0FFbkMsUUFNUDN5QixFQUFPa0IsS0FBTSxDQUNaMHhCLE9BQVEsR0FDUkMsUUFBUyxHQUNUQyxPQUFRLFVBQ04sU0FBVUMsRUFBUUMsR0FDcEJoekIsRUFBT215QixTQUFVWSxFQUFTQyxHQUFXLENBQ3BDQyxPQUFRLFNBQVU5dUIsR0FPakIsSUFOQSxJQUFJaEYsRUFBSSxFQUNQK3pCLEVBQVcsR0FHWEMsRUFBeUIsaUJBQVZodkIsRUFBcUJBLEVBQU1JLE1BQU8sS0FBUSxDQUFFSixHQUVwRGhGLEVBQUksRUFBR0EsSUFDZCt6QixFQUFVSCxFQUFTN1MsR0FBVy9nQixHQUFNNnpCLEdBQ25DRyxFQUFPaDBCLElBQU9nMEIsRUFBT2gwQixFQUFJLElBQU9nMEIsRUFBTyxHQUd6QyxPQUFPRCxJQUlPLFdBQVhILElBQ0oveUIsRUFBT215QixTQUFVWSxFQUFTQyxHQUFTelUsSUFBTTBTLE9BSTNDanhCLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCc2UsSUFBSyxTQUFVcGUsRUFBTThCLEdBQ3BCLE9BQU9nWixFQUFRbmdCLE1BQU0sU0FBVXFFLEVBQU1nQixFQUFNOEIsR0FDMUMsSUFBSXF0QixFQUFRMXZCLEVBQ1hWLEVBQU0sR0FDTmpDLEVBQUksRUFFTCxHQUFLeUQsTUFBTUMsUUFBU1IsR0FBUyxDQUk1QixJQUhBbXZCLEVBQVN0RSxHQUFXN3JCLEdBQ3BCUyxFQUFNTyxFQUFLL0IsT0FFSG5CLEVBQUkyQyxFQUFLM0MsSUFDaEJpQyxFQUFLaUIsRUFBTWxELElBQVFhLEVBQU95Z0IsSUFBS3BmLEVBQU1nQixFQUFNbEQsSUFBSyxFQUFPcXlCLEdBR3hELE9BQU9wd0IsRUFHUixZQUFpQjBCLElBQVZxQixFQUNObkUsRUFBT3VnQixNQUFPbGYsRUFBTWdCLEVBQU04QixHQUMxQm5FLEVBQU95Z0IsSUFBS3BmLEVBQU1nQixLQUNqQkEsRUFBTThCLEVBQU83QyxVQUFVaEIsT0FBUyxNQVFyQ04sRUFBT2l5QixNQUFRQSxHQUVmQSxHQUFNMXhCLFVBQVksQ0FDakJFLFlBQWF3eEIsR0FDYjd4QixLQUFNLFNBQVVpQixFQUFNZSxFQUFTcWMsRUFBTXpjLEVBQUtrd0IsRUFBUWhSLEdBQ2pEbGtCLEtBQUtxRSxLQUFPQSxFQUNackUsS0FBS3loQixLQUFPQSxFQUNaemhCLEtBQUtrMUIsT0FBU0EsR0FBVWx5QixFQUFPa3lCLE9BQU92UCxTQUN0QzNsQixLQUFLb0YsUUFBVUEsRUFDZnBGLEtBQUtzVCxNQUFRdFQsS0FBS3FyQixJQUFNcnJCLEtBQUtzTyxNQUM3QnRPLEtBQUtnRixJQUFNQSxFQUNYaEYsS0FBS2trQixLQUFPQSxJQUFVbGhCLEVBQU9taEIsVUFBVzFDLEdBQVMsR0FBSyxPQUV2RG5ULElBQUssV0FDSixJQUFJa1UsRUFBUXlTLEdBQU1tQixVQUFXcDJCLEtBQUt5aEIsTUFFbEMsT0FBT2UsR0FBU0EsRUFBTTdlLElBQ3JCNmUsRUFBTTdlLElBQUszRCxNQUNYaTFCLEdBQU1tQixVQUFVelEsU0FBU2hpQixJQUFLM0QsT0FFaENxMkIsSUFBSyxTQUFVQyxHQUNkLElBQUlDLEVBQ0gvVCxFQUFReVMsR0FBTW1CLFVBQVdwMkIsS0FBS3loQixNQW9CL0IsT0FsQkt6aEIsS0FBS29GLFFBQVFveEIsU0FDakJ4MkIsS0FBS3kyQixJQUFNRixFQUFRdnpCLEVBQU9reUIsT0FBUWwxQixLQUFLazFCLFFBQ3RDb0IsRUFBU3QyQixLQUFLb0YsUUFBUW94QixTQUFXRixFQUFTLEVBQUcsRUFBR3QyQixLQUFLb0YsUUFBUW94QixVQUc5RHgyQixLQUFLeTJCLElBQU1GLEVBQVFELEVBRXBCdDJCLEtBQUtxckIsS0FBUXJyQixLQUFLZ0YsSUFBTWhGLEtBQUtzVCxPQUFVaWpCLEVBQVF2MkIsS0FBS3NULE1BRS9DdFQsS0FBS29GLFFBQVFzeEIsTUFDakIxMkIsS0FBS29GLFFBQVFzeEIsS0FBS2oyQixLQUFNVCxLQUFLcUUsS0FBTXJFLEtBQUtxckIsSUFBS3JyQixNQUd6Q3dpQixHQUFTQSxFQUFNakIsSUFDbkJpQixFQUFNakIsSUFBS3ZoQixNQUVYaTFCLEdBQU1tQixVQUFVelEsU0FBU3BFLElBQUt2aEIsTUFFeEJBLE9BSVRpMUIsR0FBTTF4QixVQUFVSCxLQUFLRyxVQUFZMHhCLEdBQU0xeEIsVUFFdkMweEIsR0FBTW1CLFVBQVksQ0FDakJ6USxTQUFVLENBQ1RoaUIsSUFBSyxTQUFVaWdCLEdBQ2QsSUFBSWpSLEVBSUosT0FBNkIsSUFBeEJpUixFQUFNdmYsS0FBSzlDLFVBQ2EsTUFBNUJxaUIsRUFBTXZmLEtBQU11ZixFQUFNbkMsT0FBb0QsTUFBbENtQyxFQUFNdmYsS0FBS2tmLE1BQU9LLEVBQU1uQyxNQUNyRG1DLEVBQU12ZixLQUFNdWYsRUFBTW5DLE9BTzFCOU8sRUFBUzNQLEVBQU95Z0IsSUFBS0csRUFBTXZmLEtBQU11ZixFQUFNbkMsS0FBTSxNQUdoQixTQUFYOU8sRUFBd0JBLEVBQUosR0FFdkM0TyxJQUFLLFNBQVVxQyxHQUtUNWdCLEVBQU8yekIsR0FBR0QsS0FBTTlTLEVBQU1uQyxNQUMxQnplLEVBQU8yekIsR0FBR0QsS0FBTTlTLEVBQU1uQyxNQUFRbUMsR0FDSyxJQUF4QkEsRUFBTXZmLEtBQUs5QyxXQUN0QnlCLEVBQU9teUIsU0FBVXZSLEVBQU1uQyxPQUM2QixNQUFuRG1DLEVBQU12ZixLQUFLa2YsTUFBTytQLEdBQWUxUCxFQUFNbkMsT0FHeENtQyxFQUFNdmYsS0FBTXVmLEVBQU1uQyxNQUFTbUMsRUFBTXlILElBRmpDcm9CLEVBQU91Z0IsTUFBT0ssRUFBTXZmLEtBQU11ZixFQUFNbkMsS0FBTW1DLEVBQU15SCxJQUFNekgsRUFBTU0sU0FVNUQrUSxHQUFNbUIsVUFBVVEsVUFBWTNCLEdBQU1tQixVQUFVUyxXQUFhLENBQ3hEdFYsSUFBSyxTQUFVcUMsR0FDVEEsRUFBTXZmLEtBQUs5QyxVQUFZcWlCLEVBQU12ZixLQUFLekIsYUFDdENnaEIsRUFBTXZmLEtBQU11ZixFQUFNbkMsTUFBU21DLEVBQU15SCxPQUtwQ3JvQixFQUFPa3lCLE9BQVMsQ0FDZjRCLE9BQVEsU0FBVUMsR0FDakIsT0FBT0EsR0FFUkMsTUFBTyxTQUFVRCxHQUNoQixNQUFPLEdBQU0vd0IsS0FBS2l4QixJQUFLRixFQUFJL3dCLEtBQUtreEIsSUFBTyxHQUV4Q3ZSLFNBQVUsU0FHWDNpQixFQUFPMnpCLEdBQUsxQixHQUFNMXhCLFVBQVVILEtBRzVCSixFQUFPMnpCLEdBQUdELEtBQU8sR0FLakIsSUFDQ1MsR0FBT0MsR0FDUEMsR0FBVyx5QkFDWEMsR0FBTyxjQUVSLFNBQVNDLEtBQ0hILE1BQ3FCLElBQXBCeDNCLEVBQVM0M0IsUUFBb0J6M0IsRUFBTzAzQixzQkFDeEMxM0IsRUFBTzAzQixzQkFBdUJGLElBRTlCeDNCLEVBQU82ZSxXQUFZMlksR0FBVXYwQixFQUFPMnpCLEdBQUdlLFVBR3hDMTBCLEVBQU8yekIsR0FBR2dCLFFBS1osU0FBU0MsS0FJUixPQUhBNzNCLEVBQU82ZSxZQUFZLFdBQ2xCdVksUUFBUXJ4QixLQUVBcXhCLEdBQVF6dUIsS0FBSzJpQixNQUl2QixTQUFTd00sR0FBT2wyQixFQUFNbTJCLEdBQ3JCLElBQUk3SyxFQUNIOXFCLEVBQUksRUFDSitMLEVBQVEsQ0FBRTRrQixPQUFRbnhCLEdBS25CLElBREFtMkIsRUFBZUEsRUFBZSxFQUFJLEVBQzFCMzFCLEVBQUksRUFBR0EsR0FBSyxFQUFJMjFCLEVBRXZCNXBCLEVBQU8sVUFEUCtlLEVBQVEvSixHQUFXL2dCLEtBQ1MrTCxFQUFPLFVBQVkrZSxHQUFVdHJCLEVBTzFELE9BSkttMkIsSUFDSjVwQixFQUFNa25CLFFBQVVsbkIsRUFBTXdpQixNQUFRL3VCLEdBR3hCdU0sRUFHUixTQUFTNnBCLEdBQWE1d0IsRUFBT3NhLEVBQU11VyxHQUtsQyxJQUpBLElBQUlwVSxFQUNIMEssR0FBZTJKLEdBQVVDLFNBQVV6VyxJQUFVLElBQUsvZ0IsT0FBUXUzQixHQUFVQyxTQUFVLE1BQzlFL2QsRUFBUSxFQUNSN1csRUFBU2dyQixFQUFXaHJCLE9BQ2I2VyxFQUFRN1csRUFBUTZXLElBQ3ZCLEdBQU95SixFQUFRMEssRUFBWW5VLEdBQVExWixLQUFNdTNCLEVBQVd2VyxFQUFNdGEsR0FHekQsT0FBT3ljLEVBc05WLFNBQVNxVSxHQUFXNXpCLEVBQU04ekIsRUFBWS95QixHQUNyQyxJQUFJdU4sRUFDSHlsQixFQUNBamUsRUFBUSxFQUNSN1csRUFBUzIwQixHQUFVSSxXQUFXLzBCLE9BQzlCOFosRUFBV3BhLEVBQU8rWixXQUFXSSxRQUFRLGtCQUc3QndhLEVBQUt0ekIsUUFFYnN6QixFQUFPLFdBQ04sR0FBS1MsRUFDSixPQUFPLEVBWVIsSUFWQSxJQUFJRSxFQUFjbkIsSUFBU1MsS0FDMUI1WSxFQUFZaFosS0FBS211QixJQUFLLEVBQUc2RCxFQUFVTyxVQUFZUCxFQUFVeEIsU0FBVzhCLEdBS3BFaEMsRUFBVSxHQURIdFgsRUFBWWdaLEVBQVV4QixVQUFZLEdBRXpDcmMsRUFBUSxFQUNSN1csRUFBUzAwQixFQUFVUSxPQUFPbDFCLE9BRW5CNlcsRUFBUTdXLEVBQVE2VyxJQUN2QjZkLEVBQVVRLE9BQVFyZSxHQUFRa2MsSUFBS0MsR0FNaEMsT0FIQWxaLEVBQVNpQixXQUFZaGEsRUFBTSxDQUFFMnpCLEVBQVcxQixFQUFTdFgsSUFHNUNzWCxFQUFVLEdBQUtoekIsRUFDWjBiLEdBSUYxYixHQUNMOFosRUFBU2lCLFdBQVloYSxFQUFNLENBQUUyekIsRUFBVyxFQUFHLElBSTVDNWEsRUFBU2tCLFlBQWFqYSxFQUFNLENBQUUyekIsS0FDdkIsSUFFUkEsRUFBWTVhLEVBQVMzQixRQUFTLENBQzdCcFgsS0FBTUEsRUFDTjJtQixNQUFPaG9CLEVBQU9tQyxPQUFRLEdBQUlnekIsR0FDMUJNLEtBQU16MUIsRUFBT21DLFFBQVEsRUFBTSxDQUMxQnV6QixjQUFlLEdBQ2Z4RCxPQUFRbHlCLEVBQU9reUIsT0FBT3ZQLFVBQ3BCdmdCLEdBQ0h1ekIsbUJBQW9CUixFQUNwQlMsZ0JBQWlCeHpCLEVBQ2pCbXpCLFVBQVdwQixJQUFTUyxLQUNwQnBCLFNBQVVweEIsRUFBUW94QixTQUNsQmdDLE9BQVEsR0FDUlQsWUFBYSxTQUFVdFcsRUFBTXpjLEdBQzVCLElBQUk0ZSxFQUFRNWdCLEVBQU9peUIsTUFBTzV3QixFQUFNMnpCLEVBQVVTLEtBQU1oWCxFQUFNemMsRUFDckRnekIsRUFBVVMsS0FBS0MsY0FBZWpYLElBQVV1VyxFQUFVUyxLQUFLdkQsUUFFeEQsT0FEQThDLEVBQVVRLE9BQU81M0IsS0FBTWdqQixHQUNoQkEsR0FFUmxCLEtBQU0sU0FBVW1XLEdBQ2YsSUFBSTFlLEVBQVEsRUFJWDdXLEVBQVN1MUIsRUFBVWIsRUFBVVEsT0FBT2wxQixPQUFTLEVBQzlDLEdBQUs4MEIsRUFDSixPQUFPcDRCLEtBR1IsSUFEQW80QixHQUFVLEVBQ0ZqZSxFQUFRN1csRUFBUTZXLElBQ3ZCNmQsRUFBVVEsT0FBUXJlLEdBQVFrYyxJQUFLLEdBVWhDLE9BTkt3QyxHQUNKemIsRUFBU2lCLFdBQVloYSxFQUFNLENBQUUyekIsRUFBVyxFQUFHLElBQzNDNWEsRUFBU2tCLFlBQWFqYSxFQUFNLENBQUUyekIsRUFBV2EsS0FFekN6YixFQUFTc0IsV0FBWXJhLEVBQU0sQ0FBRTJ6QixFQUFXYSxJQUVsQzc0QixRQUdUZ3JCLEVBQVFnTixFQUFVaE4sTUFJbkIsSUEvSEQsU0FBcUJBLEVBQU8wTixHQUMzQixJQUFJdmUsRUFBTzlVLEVBQU02dkIsRUFBUS90QixFQUFPcWIsRUFHaEMsSUFBTXJJLEtBQVM2USxFQWVkLEdBYkFrSyxFQUFTd0QsRUFEVHJ6QixFQUFPMGIsRUFBVzVHLElBRWxCaFQsRUFBUTZqQixFQUFPN1EsR0FDVnZVLE1BQU1DLFFBQVNzQixLQUNuQit0QixFQUFTL3RCLEVBQU8sR0FDaEJBLEVBQVE2akIsRUFBTzdRLEdBQVVoVCxFQUFPLElBRzVCZ1QsSUFBVTlVLElBQ2QybEIsRUFBTzNsQixHQUFTOEIsU0FDVDZqQixFQUFPN1EsS0FHZnFJLEVBQVF4ZixFQUFPbXlCLFNBQVU5dkIsS0FDWCxXQUFZbWQsRUFNekIsSUFBTXJJLEtBTE5oVCxFQUFRcWIsRUFBTXlULE9BQVE5dUIsVUFDZjZqQixFQUFPM2xCLEdBSUM4QixFQUNOZ1QsS0FBUzZRLElBQ2hCQSxFQUFPN1EsR0FBVWhULEVBQU9nVCxHQUN4QnVlLEVBQWV2ZSxHQUFVK2EsUUFJM0J3RCxFQUFlcnpCLEdBQVM2dkIsRUE2RjFCNEQsQ0FBWTlOLEVBQU9nTixFQUFVUyxLQUFLQyxlQUUxQnZlLEVBQVE3VyxFQUFRNlcsSUFFdkIsR0FEQXhILEVBQVNzbEIsR0FBVUksV0FBWWxlLEdBQVExWixLQUFNdTNCLEVBQVczekIsRUFBTTJtQixFQUFPZ04sRUFBVVMsTUFNOUUsT0FKS3AzQixFQUFZc1IsRUFBTytQLFFBQ3ZCMWYsRUFBT3lmLFlBQWF1VixFQUFVM3pCLEtBQU0yekIsRUFBVVMsS0FBS3BjLE9BQVFxRyxLQUMxRC9QLEVBQU8rUCxLQUFLcVcsS0FBTXBtQixJQUViQSxFQXlCVCxPQXJCQTNQLEVBQU9vQixJQUFLNG1CLEVBQU8rTSxHQUFhQyxHQUUzQjMyQixFQUFZMjJCLEVBQVVTLEtBQUtubEIsUUFDL0Iwa0IsRUFBVVMsS0FBS25sQixNQUFNN1MsS0FBTTRELEVBQU0yekIsR0FJbENBLEVBQ0V0YSxTQUFVc2EsRUFBVVMsS0FBSy9hLFVBQ3pCN1UsS0FBTW12QixFQUFVUyxLQUFLNXZCLEtBQU1tdkIsRUFBVVMsS0FBS08sVUFDMUN0ZCxLQUFNc2MsRUFBVVMsS0FBSy9jLE1BQ3JCeUIsT0FBUTZhLEVBQVVTLEtBQUt0YixRQUV6Qm5hLEVBQU8yekIsR0FBR3NDLE1BQ1RqMkIsRUFBT21DLE9BQVF3eUIsRUFBTSxDQUNwQnR6QixLQUFNQSxFQUNONjBCLEtBQU1sQixFQUNOM2IsTUFBTzJiLEVBQVVTLEtBQUtwYyxTQUlqQjJiLEVBR1JoMUIsRUFBT2kxQixVQUFZajFCLEVBQU9tQyxPQUFROHlCLEdBQVcsQ0FFNUNDLFNBQVUsQ0FDVCxJQUFLLENBQUUsU0FBVXpXLEVBQU10YSxHQUN0QixJQUFJeWMsRUFBUTVqQixLQUFLKzNCLFlBQWF0VyxFQUFNdGEsR0FFcEMsT0FEQXVjLEdBQVdFLEVBQU12ZixLQUFNb2QsRUFBTXdCLEdBQVF0VyxLQUFNeEYsR0FBU3ljLEdBQzdDQSxLQUlUdVYsUUFBUyxTQUFVbk8sRUFBTzdtQixHQUNwQjlDLEVBQVkycEIsSUFDaEI3bUIsRUFBVzZtQixFQUNYQSxFQUFRLENBQUUsTUFFVkEsRUFBUUEsRUFBTTFlLE1BQU95TyxHQU90QixJQUpBLElBQUkwRyxFQUNIdEgsRUFBUSxFQUNSN1csRUFBUzBuQixFQUFNMW5CLE9BRVI2VyxFQUFRN1csRUFBUTZXLElBQ3ZCc0gsRUFBT3VKLEVBQU83USxHQUNkOGQsR0FBVUMsU0FBVXpXLEdBQVN3VyxHQUFVQyxTQUFVelcsSUFBVSxHQUMzRHdXLEdBQVVDLFNBQVV6VyxHQUFPclEsUUFBU2pOLElBSXRDazBCLFdBQVksQ0EzV2IsU0FBMkJoMEIsRUFBTTJtQixFQUFPeU4sR0FDdkMsSUFBSWhYLEVBQU10YSxFQUFPeWQsRUFBUXBDLEVBQU80VyxFQUFTQyxFQUFXQyxFQUFnQjlWLEVBQ25FK1YsRUFBUSxVQUFXdk8sR0FBUyxXQUFZQSxFQUN4Q2tPLEVBQU9sNUIsS0FDUHd0QixFQUFPLEdBQ1BqSyxFQUFRbGYsRUFBS2tmLE1BQ2JpVSxFQUFTbnpCLEVBQUs5QyxVQUFZK2hCLEdBQW9CamYsR0FDOUNtMUIsRUFBVzdYLEVBQVNoZSxJQUFLVSxFQUFNLFVBNkJoQyxJQUFNb2QsS0ExQkFnWCxFQUFLcGMsUUFFYSxPQUR2Qm1HLEVBQVF4ZixFQUFPeWYsWUFBYXBlLEVBQU0sT0FDdkJvMUIsV0FDVmpYLEVBQU1pWCxTQUFXLEVBQ2pCTCxFQUFVNVcsRUFBTTdGLE1BQU1KLEtBQ3RCaUcsRUFBTTdGLE1BQU1KLEtBQU8sV0FDWmlHLEVBQU1pWCxVQUNYTCxNQUlINVcsRUFBTWlYLFdBRU5QLEVBQUsvYixRQUFRLFdBR1orYixFQUFLL2IsUUFBUSxXQUNacUYsRUFBTWlYLFdBQ0F6MkIsRUFBT3FaLE1BQU9oWSxFQUFNLE1BQU9mLFFBQ2hDa2YsRUFBTTdGLE1BQU1KLGNBT0Z5TyxFQUViLEdBREE3akIsRUFBUTZqQixFQUFPdkosR0FDVjRWLEdBQVNwcUIsS0FBTTlGLEdBQVUsQ0FHN0IsVUFGTzZqQixFQUFPdkosR0FDZG1ELEVBQVNBLEdBQW9CLFdBQVZ6ZCxFQUNkQSxLQUFZcXdCLEVBQVMsT0FBUyxRQUFXLENBSTdDLEdBQWUsU0FBVnJ3QixJQUFvQnF5QixRQUFpQzF6QixJQUFyQjB6QixFQUFVL1gsR0FLOUMsU0FKQStWLEdBQVMsRUFPWGhLLEVBQU0vTCxHQUFTK1gsR0FBWUEsRUFBVS9YLElBQVV6ZSxFQUFPdWdCLE1BQU9sZixFQUFNb2QsR0FNckUsSUFEQTRYLEdBQWFyMkIsRUFBT3lELGNBQWV1a0IsTUFDaEJob0IsRUFBT3lELGNBQWUrbUIsR0E4RHpDLElBQU0vTCxLQXpERDhYLEdBQTJCLElBQWxCbDFCLEVBQUs5QyxXQU1sQmszQixFQUFLaUIsU0FBVyxDQUFFblcsRUFBTW1XLFNBQVVuVyxFQUFNb1csVUFBV3BXLEVBQU1xVyxXQUlsQyxPQUR2Qk4sRUFBaUJFLEdBQVlBLEVBQVNoVyxXQUVyQzhWLEVBQWlCM1gsRUFBU2hlLElBQUtVLEVBQU0sWUFHckIsVUFEakJtZixFQUFVeGdCLEVBQU95Z0IsSUFBS3BmLEVBQU0sY0FFdEJpMUIsRUFDSjlWLEVBQVU4VixHQUlWOVUsR0FBVSxDQUFFbmdCLElBQVEsR0FDcEJpMUIsRUFBaUJqMUIsRUFBS2tmLE1BQU1DLFNBQVc4VixFQUN2QzlWLEVBQVV4Z0IsRUFBT3lnQixJQUFLcGYsRUFBTSxXQUM1Qm1nQixHQUFVLENBQUVuZ0IsT0FLRyxXQUFabWYsR0FBb0MsaUJBQVpBLEdBQWdELE1BQWxCOFYsSUFDckIsU0FBaEN0MkIsRUFBT3lnQixJQUFLcGYsRUFBTSxXQUdoQmcxQixJQUNMSCxFQUFLcndCLE1BQU0sV0FDVjBhLEVBQU1DLFFBQVU4VixLQUVNLE1BQWxCQSxJQUNKOVYsRUFBVUQsRUFBTUMsUUFDaEI4VixFQUE2QixTQUFaOVYsRUFBcUIsR0FBS0EsSUFHN0NELEVBQU1DLFFBQVUsaUJBS2RpVixFQUFLaUIsV0FDVG5XLEVBQU1tVyxTQUFXLFNBQ2pCUixFQUFLL2IsUUFBUSxXQUNab0csRUFBTW1XLFNBQVdqQixFQUFLaUIsU0FBVSxHQUNoQ25XLEVBQU1vVyxVQUFZbEIsRUFBS2lCLFNBQVUsR0FDakNuVyxFQUFNcVcsVUFBWW5CLEVBQUtpQixTQUFVLE9BS25DTCxHQUFZLEVBQ0U3TCxFQUdQNkwsSUFDQUcsRUFDQyxXQUFZQSxJQUNoQmhDLEVBQVNnQyxFQUFTaEMsUUFHbkJnQyxFQUFXN1gsRUFBU3hCLE9BQVE5YixFQUFNLFNBQVUsQ0FBRW1mLFFBQVM4VixJQUluRDFVLElBQ0o0VSxFQUFTaEMsUUFBVUEsR0FJZkEsR0FDSmhULEdBQVUsQ0FBRW5nQixJQUFRLEdBS3JCNjBCLEVBQUtyd0IsTUFBTSxXQVNWLElBQU00WSxLQUpBK1YsR0FDTGhULEdBQVUsQ0FBRW5nQixJQUVic2QsRUFBU2pGLE9BQVFyWSxFQUFNLFVBQ1RtcEIsRUFDYnhxQixFQUFPdWdCLE1BQU9sZixFQUFNb2QsRUFBTStMLEVBQU0vTCxRQU1uQzRYLEVBQVl0QixHQUFhUCxFQUFTZ0MsRUFBVS9YLEdBQVMsRUFBR0EsRUFBTXlYLEdBQ3REelgsS0FBUStYLElBQ2ZBLEVBQVUvWCxHQUFTNFgsRUFBVS9sQixNQUN4QmtrQixJQUNKNkIsRUFBVXIwQixJQUFNcTBCLEVBQVUvbEIsTUFDMUIrbEIsRUFBVS9sQixNQUFRLE1BdU1yQnVtQixVQUFXLFNBQVUxMUIsRUFBVWtyQixHQUN6QkEsRUFDSjRJLEdBQVVJLFdBQVdqbkIsUUFBU2pOLEdBRTlCOHpCLEdBQVVJLFdBQVd6M0IsS0FBTXVELE1BSzlCbkIsRUFBTzgyQixNQUFRLFNBQVVBLEVBQU81RSxFQUFRL3hCLEdBQ3ZDLElBQUk0MkIsRUFBTUQsR0FBMEIsaUJBQVZBLEVBQXFCOTJCLEVBQU9tQyxPQUFRLEdBQUkyMEIsR0FBVSxDQUMzRWQsU0FBVTcxQixJQUFPQSxHQUFNK3hCLEdBQ3RCN3pCLEVBQVl5NEIsSUFBV0EsRUFDeEJ0RCxTQUFVc0QsRUFDVjVFLE9BQVEveEIsR0FBTSt4QixHQUFVQSxJQUFXN3pCLEVBQVk2ekIsSUFBWUEsR0FvQzVELE9BaENLbHlCLEVBQU8yekIsR0FBR2pQLElBQ2RxUyxFQUFJdkQsU0FBVyxFQUdjLGlCQUFqQnVELEVBQUl2RCxXQUNWdUQsRUFBSXZELFlBQVl4ekIsRUFBTzJ6QixHQUFHcUQsT0FDOUJELEVBQUl2RCxTQUFXeHpCLEVBQU8yekIsR0FBR3FELE9BQVFELEVBQUl2RCxVQUdyQ3VELEVBQUl2RCxTQUFXeHpCLEVBQU8yekIsR0FBR3FELE9BQU9yVSxVQU1qQixNQUFib1UsRUFBSTFkLFFBQStCLElBQWQwZCxFQUFJMWQsUUFDN0IwZCxFQUFJMWQsTUFBUSxNQUliMGQsRUFBSXpKLElBQU15SixFQUFJZixTQUVkZSxFQUFJZixTQUFXLFdBQ1QzM0IsRUFBWTA0QixFQUFJekosTUFDcEJ5SixFQUFJekosSUFBSTd2QixLQUFNVCxNQUdWKzVCLEVBQUkxZCxPQUNSclosRUFBT3NmLFFBQVN0aUIsS0FBTSs1QixFQUFJMWQsUUFJckIwZCxHQUdSLzJCLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCODBCLE9BQVEsU0FBVUgsRUFBT0ksRUFBSWhGLEVBQVEvd0IsR0FHcEMsT0FBT25FLEtBQUs4UCxPQUFRd1QsSUFBcUJHLElBQUssVUFBVyxHQUFJZ0IsT0FHM0R6ZixNQUFNbTFCLFFBQVMsQ0FBRS9FLFFBQVM4RSxHQUFNSixFQUFPNUUsRUFBUS93QixJQUVsRGcyQixRQUFTLFNBQVUxWSxFQUFNcVksRUFBTzVFLEVBQVEvd0IsR0FDdkMsSUFBSXdZLEVBQVEzWixFQUFPeUQsY0FBZWdiLEdBQ2pDMlksRUFBU3AzQixFQUFPODJCLE1BQU9BLEVBQU81RSxFQUFRL3dCLEdBQ3RDazJCLEVBQWMsV0FHYixJQUFJbkIsRUFBT2pCLEdBQVdqNEIsS0FBTWdELEVBQU9tQyxPQUFRLEdBQUlzYyxHQUFRMlksSUFHbER6ZCxHQUFTZ0YsRUFBU2hlLElBQUszRCxLQUFNLFlBQ2pDazVCLEVBQUt4VyxNQUFNLElBTWQsT0FGQTJYLEVBQVlDLE9BQVNELEVBRWQxZCxJQUEwQixJQUFqQnlkLEVBQU8vZCxNQUN0QnJjLEtBQUtrRSxLQUFNbTJCLEdBQ1hyNkIsS0FBS3FjLE1BQU8rZCxFQUFPL2QsTUFBT2dlLElBRTVCM1gsS0FBTSxTQUFVL2dCLEVBQU1paEIsRUFBWWlXLEdBQ2pDLElBQUkwQixFQUFZLFNBQVUvWCxHQUN6QixJQUFJRSxFQUFPRixFQUFNRSxZQUNWRixFQUFNRSxLQUNiQSxFQUFNbVcsSUFZUCxNQVRxQixpQkFBVGwzQixJQUNYazNCLEVBQVVqVyxFQUNWQSxFQUFhamhCLEVBQ2JBLE9BQU9tRSxHQUVIOGMsR0FDSjVpQixLQUFLcWMsTUFBTzFhLEdBQVEsS0FBTSxJQUdwQjNCLEtBQUtrRSxNQUFNLFdBQ2pCLElBQUlvZSxHQUFVLEVBQ2JuSSxFQUFnQixNQUFSeFksR0FBZ0JBLEVBQU8sYUFDL0I2NEIsRUFBU3gzQixFQUFPdzNCLE9BQ2hCaFosRUFBT0csRUFBU2hlLElBQUszRCxNQUV0QixHQUFLbWEsRUFDQ3FILEVBQU1ySCxJQUFXcUgsRUFBTXJILEdBQVF1SSxNQUNuQzZYLEVBQVcvWSxFQUFNckgsU0FHbEIsSUFBTUEsS0FBU3FILEVBQ1RBLEVBQU1ySCxJQUFXcUgsRUFBTXJILEdBQVF1SSxNQUFRNFUsR0FBS3JxQixLQUFNa04sSUFDdERvZ0IsRUFBVy9ZLEVBQU1ySCxJQUtwQixJQUFNQSxFQUFRcWdCLEVBQU9sM0IsT0FBUTZXLEtBQ3ZCcWdCLEVBQVFyZ0IsR0FBUTlWLE9BQVNyRSxNQUNuQixNQUFSMkIsR0FBZ0I2NEIsRUFBUXJnQixHQUFRa0MsUUFBVTFhLElBRTVDNjRCLEVBQVFyZ0IsR0FBUStlLEtBQUt4VyxLQUFNbVcsR0FDM0J2VyxHQUFVLEVBQ1ZrWSxFQUFPdDFCLE9BQVFpVixFQUFPLEtBT25CbUksR0FBWXVXLEdBQ2hCNzFCLEVBQU9zZixRQUFTdGlCLEtBQU0yQixPQUl6QjI0QixPQUFRLFNBQVUzNEIsR0FJakIsT0FIYyxJQUFUQSxJQUNKQSxFQUFPQSxHQUFRLE1BRVQzQixLQUFLa0UsTUFBTSxXQUNqQixJQUFJaVcsRUFDSHFILEVBQU9HLEVBQVNoZSxJQUFLM0QsTUFDckJxYyxFQUFRbUYsRUFBTTdmLEVBQU8sU0FDckI2Z0IsRUFBUWhCLEVBQU03ZixFQUFPLGNBQ3JCNjRCLEVBQVN4M0IsRUFBT3czQixPQUNoQmwzQixFQUFTK1ksRUFBUUEsRUFBTS9ZLE9BQVMsRUFhakMsSUFWQWtlLEVBQUs4WSxRQUFTLEVBR2R0M0IsRUFBT3FaLE1BQU9yYyxLQUFNMkIsRUFBTSxJQUVyQjZnQixHQUFTQSxFQUFNRSxNQUNuQkYsRUFBTUUsS0FBS2ppQixLQUFNVCxNQUFNLEdBSWxCbWEsRUFBUXFnQixFQUFPbDNCLE9BQVE2VyxLQUN2QnFnQixFQUFRcmdCLEdBQVE5VixPQUFTckUsTUFBUXc2QixFQUFRcmdCLEdBQVFrQyxRQUFVMWEsSUFDL0Q2NEIsRUFBUXJnQixHQUFRK2UsS0FBS3hXLE1BQU0sR0FDM0I4WCxFQUFPdDFCLE9BQVFpVixFQUFPLElBS3hCLElBQU1BLEVBQVEsRUFBR0EsRUFBUTdXLEVBQVE2VyxJQUMzQmtDLEVBQU9sQyxJQUFXa0MsRUFBT2xDLEdBQVFtZ0IsUUFDckNqZSxFQUFPbEMsR0FBUW1nQixPQUFPNzVCLEtBQU1ULGFBS3ZCd2hCLEVBQUs4WSxhQUtmdDNCLEVBQU9rQixLQUFNLENBQUUsU0FBVSxPQUFRLFNBQVUsU0FBVXNELEVBQUluQyxHQUN4RCxJQUFJbzFCLEVBQVF6M0IsRUFBT0csR0FBSWtDLEdBQ3ZCckMsRUFBT0csR0FBSWtDLEdBQVMsU0FBVXkwQixFQUFPNUUsRUFBUS93QixHQUM1QyxPQUFnQixNQUFUMjFCLEdBQWtDLGtCQUFWQSxFQUM5QlcsRUFBTTk1QixNQUFPWCxLQUFNc0UsV0FDbkJ0RSxLQUFLbTZCLFFBQVN0QyxHQUFPeHlCLEdBQU0sR0FBUXkwQixFQUFPNUUsRUFBUS93QixPQUtyRG5CLEVBQU9rQixLQUFNLENBQ1p3MkIsVUFBVzdDLEdBQU8sUUFDbEI4QyxRQUFTOUMsR0FBTyxRQUNoQitDLFlBQWEvQyxHQUFPLFVBQ3BCZ0QsT0FBUSxDQUFFekYsUUFBUyxRQUNuQjBGLFFBQVMsQ0FBRTFGLFFBQVMsUUFDcEIyRixXQUFZLENBQUUzRixRQUFTLFlBQ3JCLFNBQVUvdkIsRUFBTTJsQixHQUNsQmhvQixFQUFPRyxHQUFJa0MsR0FBUyxTQUFVeTBCLEVBQU81RSxFQUFRL3dCLEdBQzVDLE9BQU9uRSxLQUFLbTZCLFFBQVNuUCxFQUFPOE8sRUFBTzVFLEVBQVEvd0IsT0FJN0NuQixFQUFPdzNCLE9BQVMsR0FDaEJ4M0IsRUFBTzJ6QixHQUFHZ0IsS0FBTyxXQUNoQixJQUFJc0IsRUFDSDkyQixFQUFJLEVBQ0pxNEIsRUFBU3gzQixFQUFPdzNCLE9BSWpCLElBRkFyRCxHQUFRenVCLEtBQUsyaUIsTUFFTGxwQixFQUFJcTRCLEVBQU9sM0IsT0FBUW5CLEtBQzFCODJCLEVBQVF1QixFQUFRcjRCLE9BR0NxNEIsRUFBUXI0QixLQUFRODJCLEdBQ2hDdUIsRUFBT3QxQixPQUFRL0MsSUFBSyxHQUloQnE0QixFQUFPbDNCLFFBQ1pOLEVBQU8yekIsR0FBR2pVLE9BRVh5VSxRQUFRcnhCLEdBR1Q5QyxFQUFPMnpCLEdBQUdzQyxNQUFRLFNBQVVBLEdBQzNCajJCLEVBQU93M0IsT0FBTzU1QixLQUFNcTRCLEdBQ3BCajJCLEVBQU8yekIsR0FBR3JqQixTQUdYdFEsRUFBTzJ6QixHQUFHZSxTQUFXLEdBQ3JCMTBCLEVBQU8yekIsR0FBR3JqQixNQUFRLFdBQ1o4akIsS0FJTEEsSUFBYSxFQUNiRyxPQUdEdjBCLEVBQU8yekIsR0FBR2pVLEtBQU8sV0FDaEIwVSxHQUFhLE1BR2RwMEIsRUFBTzJ6QixHQUFHcUQsT0FBUyxDQUNsQmdCLEtBQU0sSUFDTkMsS0FBTSxJQUdOdFYsU0FBVSxLQU1YM2lCLEVBQU9HLEdBQUcrM0IsTUFBUSxTQUFVQyxFQUFNeDVCLEdBSWpDLE9BSEF3NUIsRUFBT240QixFQUFPMnpCLElBQUszekIsRUFBTzJ6QixHQUFHcUQsT0FBUW1CLElBQWlCQSxFQUN0RHg1QixFQUFPQSxHQUFRLEtBRVIzQixLQUFLcWMsTUFBTzFhLEdBQU0sU0FBVW9LLEVBQU15VyxHQUN4QyxJQUFJNFksRUFBVXI3QixFQUFPNmUsV0FBWTdTLEVBQU1vdkIsR0FDdkMzWSxFQUFNRSxLQUFPLFdBQ1ozaUIsRUFBT3M3QixhQUFjRCxRQU14QixXQUNDLElBQUlockIsRUFBUXhRLEVBQVMwQyxjQUFlLFNBRW5DeTNCLEVBRFNuNkIsRUFBUzBDLGNBQWUsVUFDcEJLLFlBQWEvQyxFQUFTMEMsY0FBZSxXQUVuRDhOLEVBQU16TyxLQUFPLFdBSWJQLEVBQVFrNkIsUUFBMEIsS0FBaEJsckIsRUFBTWpKLE1BSXhCL0YsRUFBUW02QixZQUFjeEIsRUFBSXBsQixVQUkxQnZFLEVBQVF4USxFQUFTMEMsY0FBZSxVQUMxQjZFLE1BQVEsSUFDZGlKLEVBQU16TyxLQUFPLFFBQ2JQLEVBQVFvNkIsV0FBNkIsTUFBaEJwckIsRUFBTWpKLE1BcEI1QixHQXdCQSxJQUFJczBCLEdBQ0hydEIsR0FBYXBMLEVBQU9xTyxLQUFLakQsV0FFMUJwTCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQm9NLEtBQU0sU0FBVWxNLEVBQU04QixHQUNyQixPQUFPZ1osRUFBUW5nQixLQUFNZ0QsRUFBT3VPLEtBQU1sTSxFQUFNOEIsRUFBTzdDLFVBQVVoQixPQUFTLElBR25FbzRCLFdBQVksU0FBVXIyQixHQUNyQixPQUFPckYsS0FBS2tFLE1BQU0sV0FDakJsQixFQUFPMDRCLFdBQVkxN0IsS0FBTXFGLFNBSzVCckMsRUFBT21DLE9BQVEsQ0FDZG9NLEtBQU0sU0FBVWxOLEVBQU1nQixFQUFNOEIsR0FDM0IsSUFBSXBELEVBQUt5ZSxFQUNSbVosRUFBUXQzQixFQUFLOUMsU0FHZCxHQUFlLElBQVZvNkIsR0FBeUIsSUFBVkEsR0FBeUIsSUFBVkEsRUFLbkMsWUFBa0MsSUFBdEJ0M0IsRUFBSzdCLGFBQ1RRLEVBQU95ZSxLQUFNcGQsRUFBTWdCLEVBQU04QixJQUtsQixJQUFWdzBCLEdBQWdCMzRCLEVBQU95VixTQUFVcFUsS0FDckNtZSxFQUFReGYsRUFBTzQ0QixVQUFXdjJCLEVBQUtvQyxpQkFDNUJ6RSxFQUFPcU8sS0FBSy9FLE1BQU11dkIsS0FBSzV1QixLQUFNNUgsR0FBU28yQixRQUFXMzFCLFNBR3RDQSxJQUFWcUIsRUFDVyxPQUFWQSxPQUNKbkUsRUFBTzA0QixXQUFZcjNCLEVBQU1nQixHQUlyQm1kLEdBQVMsUUFBU0EsUUFDdUIxYyxLQUEzQy9CLEVBQU15ZSxFQUFNakIsSUFBS2xkLEVBQU04QyxFQUFPOUIsSUFDekJ0QixHQUdSTSxFQUFLNUIsYUFBYzRDLEVBQU04QixFQUFRLElBQzFCQSxHQUdIcWIsR0FBUyxRQUFTQSxHQUErQyxRQUFwQ3plLEVBQU15ZSxFQUFNN2UsSUFBS1UsRUFBTWdCLElBQ2pEdEIsRUFNTSxPQUhkQSxFQUFNZixFQUFPZ04sS0FBS3VCLEtBQU1sTixFQUFNZ0IsU0FHVFMsRUFBWS9CLElBR2xDNjNCLFVBQVcsQ0FDVmo2QixLQUFNLENBQ0w0ZixJQUFLLFNBQVVsZCxFQUFNOEMsR0FDcEIsSUFBTS9GLEVBQVFvNkIsWUFBd0IsVUFBVnIwQixHQUMzQjBFLEVBQVV4SCxFQUFNLFNBQVksQ0FDNUIsSUFBSWpDLEVBQU1pQyxFQUFLOEMsTUFLZixPQUpBOUMsRUFBSzVCLGFBQWMsT0FBUTBFLEdBQ3RCL0UsSUFDSmlDLEVBQUs4QyxNQUFRL0UsR0FFUCtFLE1BTVh1MEIsV0FBWSxTQUFVcjNCLEVBQU04QyxHQUMzQixJQUFJOUIsRUFDSGxELEVBQUksRUFJSjI1QixFQUFZMzBCLEdBQVNBLEVBQU1tRixNQUFPeU8sR0FFbkMsR0FBSytnQixHQUErQixJQUFsQnozQixFQUFLOUMsU0FDdEIsS0FBVThELEVBQU95MkIsRUFBVzM1QixNQUMzQmtDLEVBQUttSixnQkFBaUJuSSxNQU8xQm8yQixHQUFXLENBQ1ZsYSxJQUFLLFNBQVVsZCxFQUFNOEMsRUFBTzlCLEdBUTNCLE9BUGUsSUFBVjhCLEVBR0puRSxFQUFPMDRCLFdBQVlyM0IsRUFBTWdCLEdBRXpCaEIsRUFBSzVCLGFBQWM0QyxFQUFNQSxHQUVuQkEsSUFJVHJDLEVBQU9rQixLQUFNbEIsRUFBT3FPLEtBQUsvRSxNQUFNdXZCLEtBQUs3WSxPQUFPMVcsTUFBTyxTQUFVLFNBQVU5RSxFQUFJbkMsR0FDekUsSUFBSTAyQixFQUFTM3RCLEdBQVkvSSxJQUFVckMsRUFBT2dOLEtBQUt1QixLQUUvQ25ELEdBQVkvSSxHQUFTLFNBQVVoQixFQUFNZ0IsRUFBTXdDLEdBQzFDLElBQUk5RCxFQUFLZ2xCLEVBQ1JpVCxFQUFnQjMyQixFQUFLb0MsY0FZdEIsT0FWTUksSUFHTGtoQixFQUFTM2EsR0FBWTR0QixHQUNyQjV0QixHQUFZNHRCLEdBQWtCajRCLEVBQzlCQSxFQUFxQyxNQUEvQmc0QixFQUFRMTNCLEVBQU1nQixFQUFNd0MsR0FDekJtMEIsRUFDQSxLQUNENXRCLEdBQVk0dEIsR0FBa0JqVCxHQUV4QmhsQixNQU9ULElBQUlrNEIsR0FBYSxzQ0FDaEJDLEdBQWEsZ0JBeUliLFNBQVNDLEdBQWtCaDFCLEdBRTFCLE9BRGFBLEVBQU1tRixNQUFPeU8sSUFBbUIsSUFDL0IxTixLQUFNLEtBSXRCLFNBQVMrdUIsR0FBVS8zQixHQUNsQixPQUFPQSxFQUFLN0IsY0FBZ0I2QixFQUFLN0IsYUFBYyxVQUFhLEdBRzdELFNBQVM2NUIsR0FBZ0JsMUIsR0FDeEIsT0FBS3ZCLE1BQU1DLFFBQVNzQixHQUNaQSxFQUVjLGlCQUFWQSxHQUNKQSxFQUFNbUYsTUFBT3lPLElBRWQsR0F4SlIvWCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQnNjLEtBQU0sU0FBVXBjLEVBQU04QixHQUNyQixPQUFPZ1osRUFBUW5nQixLQUFNZ0QsRUFBT3llLEtBQU1wYyxFQUFNOEIsRUFBTzdDLFVBQVVoQixPQUFTLElBR25FZzVCLFdBQVksU0FBVWozQixHQUNyQixPQUFPckYsS0FBS2tFLE1BQU0sa0JBQ1ZsRSxLQUFNZ0QsRUFBT3U1QixRQUFTbDNCLElBQVVBLFNBSzFDckMsRUFBT21DLE9BQVEsQ0FDZHNjLEtBQU0sU0FBVXBkLEVBQU1nQixFQUFNOEIsR0FDM0IsSUFBSXBELEVBQUt5ZSxFQUNSbVosRUFBUXQzQixFQUFLOUMsU0FHZCxHQUFlLElBQVZvNkIsR0FBeUIsSUFBVkEsR0FBeUIsSUFBVkEsRUFXbkMsT0FQZSxJQUFWQSxHQUFnQjM0QixFQUFPeVYsU0FBVXBVLEtBR3JDZ0IsRUFBT3JDLEVBQU91NUIsUUFBU2wzQixJQUFVQSxFQUNqQ21kLEVBQVF4ZixFQUFPb3pCLFVBQVcvd0IsU0FHWlMsSUFBVnFCLEVBQ0NxYixHQUFTLFFBQVNBLFFBQ3VCMWMsS0FBM0MvQixFQUFNeWUsRUFBTWpCLElBQUtsZCxFQUFNOEMsRUFBTzlCLElBQ3pCdEIsRUFHQ00sRUFBTWdCLEdBQVM4QixFQUdwQnFiLEdBQVMsUUFBU0EsR0FBK0MsUUFBcEN6ZSxFQUFNeWUsRUFBTTdlLElBQUtVLEVBQU1nQixJQUNqRHRCLEVBR0RNLEVBQU1nQixJQUdkK3dCLFVBQVcsQ0FDVjNoQixTQUFVLENBQ1Q5USxJQUFLLFNBQVVVLEdBT2QsSUFBSW00QixFQUFXeDVCLEVBQU9nTixLQUFLdUIsS0FBTWxOLEVBQU0sWUFFdkMsT0FBS200QixFQUNHekosU0FBVXlKLEVBQVUsSUFJM0JQLEdBQVdodkIsS0FBTTVJLEVBQUt3SCxXQUN0QnF3QixHQUFXanZCLEtBQU01SSxFQUFLd0gsV0FDdEJ4SCxFQUFLbVEsS0FFRSxHQUdBLEtBS1grbkIsUUFBUyxDQUNSLElBQU8sVUFDUCxNQUFTLGVBWUxuN0IsRUFBUW02QixjQUNidjRCLEVBQU9vekIsVUFBVXpoQixTQUFXLENBQzNCaFIsSUFBSyxTQUFVVSxHQUlkLElBQUlrUCxFQUFTbFAsRUFBS3pCLFdBSWxCLE9BSEsyUSxHQUFVQSxFQUFPM1EsWUFDckIyUSxFQUFPM1EsV0FBV2dTLGNBRVosTUFFUjJNLElBQUssU0FBVWxkLEdBSWQsSUFBSWtQLEVBQVNsUCxFQUFLekIsV0FDYjJRLElBQ0pBLEVBQU9xQixjQUVGckIsRUFBTzNRLFlBQ1gyUSxFQUFPM1EsV0FBV2dTLGtCQU92QjVSLEVBQU9rQixLQUFNLENBQ1osV0FDQSxXQUNBLFlBQ0EsY0FDQSxjQUNBLFVBQ0EsVUFDQSxTQUNBLGNBQ0Esb0JBQ0UsV0FDRmxCLEVBQU91NUIsUUFBU3Y4QixLQUFLeUgsZUFBa0J6SCxRQTRCeENnRCxFQUFPRyxHQUFHZ0MsT0FBUSxDQUNqQnMzQixTQUFVLFNBQVV0MUIsR0FDbkIsSUFBSXUxQixFQUFTcjRCLEVBQU1pSyxFQUFLcXVCLEVBQVVDLEVBQU83M0IsRUFBRzgzQixFQUMzQzE2QixFQUFJLEVBRUwsR0FBS2QsRUFBWThGLEdBQ2hCLE9BQU9uSCxLQUFLa0UsTUFBTSxTQUFVYSxHQUMzQi9CLEVBQVFoRCxNQUFPeThCLFNBQVV0MUIsRUFBTTFHLEtBQU1ULEtBQU0rRSxFQUFHcTNCLEdBQVVwOEIsV0FNMUQsSUFGQTA4QixFQUFVTCxHQUFnQmwxQixJQUViN0QsT0FDWixLQUFVZSxFQUFPckUsS0FBTW1DLE1BSXRCLEdBSEF3NkIsRUFBV1AsR0FBVS8zQixHQUNyQmlLLEVBQXdCLElBQWxCakssRUFBSzlDLFVBQW9CLElBQU00NkIsR0FBa0JRLEdBQWEsSUFFekQsQ0FFVixJQURBNTNCLEVBQUksRUFDTTYzQixFQUFRRixFQUFTMzNCLE1BQ3JCdUosRUFBSXpOLFFBQVMsSUFBTSs3QixFQUFRLEtBQVEsSUFDdkN0dUIsR0FBT3N1QixFQUFRLEtBTVpELEtBRExFLEVBQWFWLEdBQWtCN3RCLEtBRTlCakssRUFBSzVCLGFBQWMsUUFBU282QixHQU1oQyxPQUFPNzhCLE1BR1I4OEIsWUFBYSxTQUFVMzFCLEdBQ3RCLElBQUl1MUIsRUFBU3I0QixFQUFNaUssRUFBS3F1QixFQUFVQyxFQUFPNzNCLEVBQUc4M0IsRUFDM0MxNkIsRUFBSSxFQUVMLEdBQUtkLEVBQVk4RixHQUNoQixPQUFPbkgsS0FBS2tFLE1BQU0sU0FBVWEsR0FDM0IvQixFQUFRaEQsTUFBTzg4QixZQUFhMzFCLEVBQU0xRyxLQUFNVCxLQUFNK0UsRUFBR3EzQixHQUFVcDhCLFdBSTdELElBQU1zRSxVQUFVaEIsT0FDZixPQUFPdEQsS0FBS3VSLEtBQU0sUUFBUyxJQUs1QixJQUZBbXJCLEVBQVVMLEdBQWdCbDFCLElBRWI3RCxPQUNaLEtBQVVlLEVBQU9yRSxLQUFNbUMsTUFNdEIsR0FMQXc2QixFQUFXUCxHQUFVLzNCLEdBR3JCaUssRUFBd0IsSUFBbEJqSyxFQUFLOUMsVUFBb0IsSUFBTTQ2QixHQUFrQlEsR0FBYSxJQUV6RCxDQUVWLElBREE1M0IsRUFBSSxFQUNNNjNCLEVBQVFGLEVBQVMzM0IsTUFHMUIsS0FBUXVKLEVBQUl6TixRQUFTLElBQU0rN0IsRUFBUSxNQUFTLEdBQzNDdHVCLEVBQU1BLEVBQUlwSSxRQUFTLElBQU0wMkIsRUFBUSxJQUFLLEtBTW5DRCxLQURMRSxFQUFhVixHQUFrQjd0QixLQUU5QmpLLEVBQUs1QixhQUFjLFFBQVNvNkIsR0FNaEMsT0FBTzc4QixNQUdSKzhCLFlBQWEsU0FBVTUxQixFQUFPNjFCLEdBQzdCLElBQUlyN0IsU0FBY3dGLEVBQ2pCODFCLEVBQXdCLFdBQVR0N0IsR0FBcUJpRSxNQUFNQyxRQUFTc0IsR0FFcEQsTUFBeUIsa0JBQWI2MUIsR0FBMEJDLEVBQzlCRCxFQUFXaDlCLEtBQUt5OEIsU0FBVXQxQixHQUFVbkgsS0FBSzg4QixZQUFhMzFCLEdBR3pEOUYsRUFBWThGLEdBQ1RuSCxLQUFLa0UsTUFBTSxTQUFVL0IsR0FDM0JhLEVBQVFoRCxNQUFPKzhCLFlBQ2Q1MUIsRUFBTTFHLEtBQU1ULEtBQU1tQyxFQUFHaTZCLEdBQVVwOEIsTUFBUWc5QixHQUN2Q0EsTUFLSWg5QixLQUFLa0UsTUFBTSxXQUNqQixJQUFJd0wsRUFBV3ZOLEVBQUd6QyxFQUFNdzlCLEVBRXhCLEdBQUtELEVBT0osSUFKQTk2QixFQUFJLEVBQ0p6QyxFQUFPc0QsRUFBUWhELE1BQ2ZrOUIsRUFBYWIsR0FBZ0JsMUIsR0FFbkJ1SSxFQUFZd3RCLEVBQVkvNkIsTUFHNUJ6QyxFQUFLeTlCLFNBQVV6dEIsR0FDbkJoUSxFQUFLbzlCLFlBQWFwdEIsR0FFbEJoUSxFQUFLKzhCLFNBQVUvc0IsYUFLSTVKLElBQVZxQixHQUFnQyxZQUFUeEYsS0FDbEMrTixFQUFZMHNCLEdBQVVwOEIsUUFJckIyaEIsRUFBU0osSUFBS3ZoQixLQUFNLGdCQUFpQjBQLEdBT2pDMVAsS0FBS3lDLGNBQ1R6QyxLQUFLeUMsYUFBYyxRQUNsQmlOLElBQXVCLElBQVZ2SSxFQUNaLEdBQ0F3YSxFQUFTaGUsSUFBSzNELEtBQU0sa0JBQXFCLFNBTy9DbTlCLFNBQVUsU0FBVWw2QixHQUNuQixJQUFJeU0sRUFBV3JMLEVBQ2RsQyxFQUFJLEVBR0wsSUFEQXVOLEVBQVksSUFBTXpNLEVBQVcsSUFDbkJvQixFQUFPckUsS0FBTW1DLE1BQ3RCLEdBQXVCLElBQWxCa0MsRUFBSzlDLFdBQ1AsSUFBTTQ2QixHQUFrQkMsR0FBVS8zQixJQUFXLEtBQU14RCxRQUFTNk8sSUFBZSxFQUM3RSxPQUFPLEVBSVQsT0FBTyxLQU9ULElBQUkwdEIsR0FBVSxNQUVkcDZCLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCL0MsSUFBSyxTQUFVK0UsR0FDZCxJQUFJcWIsRUFBT3plLEVBQUswcUIsRUFDZnBxQixFQUFPckUsS0FBTSxHQUVkLE9BQU1zRSxVQUFVaEIsUUEwQmhCbXJCLEVBQWtCcHRCLEVBQVk4RixHQUV2Qm5ILEtBQUtrRSxNQUFNLFNBQVUvQixHQUMzQixJQUFJQyxFQUVtQixJQUFsQnBDLEtBQUt1QixXQVdFLE9BTlhhLEVBRElxc0IsRUFDRXRuQixFQUFNMUcsS0FBTVQsS0FBTW1DLEVBQUdhLEVBQVFoRCxNQUFPb0MsT0FFcEMrRSxHQUtOL0UsRUFBTSxHQUVvQixpQkFBUkEsRUFDbEJBLEdBQU8sR0FFSXdELE1BQU1DLFFBQVN6RCxLQUMxQkEsRUFBTVksRUFBT29CLElBQUtoQyxHQUFLLFNBQVUrRSxHQUNoQyxPQUFnQixNQUFUQSxFQUFnQixHQUFLQSxFQUFRLFFBSXRDcWIsRUFBUXhmLEVBQU9xNkIsU0FBVXI5QixLQUFLMkIsT0FBVXFCLEVBQU9xNkIsU0FBVXI5QixLQUFLNkwsU0FBU3BFLGlCQUdyRCxRQUFTK2EsUUFBK0MxYyxJQUFwQzBjLEVBQU1qQixJQUFLdmhCLEtBQU1vQyxFQUFLLFdBQzNEcEMsS0FBS21ILE1BQVEvRSxRQXpEVGlDLEdBQ0ptZSxFQUFReGYsRUFBT3E2QixTQUFVaDVCLEVBQUsxQyxPQUM3QnFCLEVBQU9xNkIsU0FBVWg1QixFQUFLd0gsU0FBU3BFLGlCQUcvQixRQUFTK2EsUUFDZ0MxYyxLQUF2Qy9CLEVBQU15ZSxFQUFNN2UsSUFBS1UsRUFBTSxVQUVsQk4sRUFNWSxpQkFIcEJBLEVBQU1NLEVBQUs4QyxPQUlIcEQsRUFBSW1DLFFBQVNrM0IsR0FBUyxJQUloQixNQUFQcjVCLEVBQWMsR0FBS0EsT0FHM0IsS0F5Q0hmLEVBQU9tQyxPQUFRLENBQ2RrNEIsU0FBVSxDQUNUaFksT0FBUSxDQUNQMWhCLElBQUssU0FBVVUsR0FFZCxJQUFJakMsRUFBTVksRUFBT2dOLEtBQUt1QixLQUFNbE4sRUFBTSxTQUNsQyxPQUFjLE1BQVBqQyxFQUNOQSxFQU1BKzVCLEdBQWtCbjVCLEVBQU9ULEtBQU04QixNQUdsQzJELE9BQVEsQ0FDUHJFLElBQUssU0FBVVUsR0FDZCxJQUFJOEMsRUFBT2tlLEVBQVFsakIsRUFDbEJpRCxFQUFVZixFQUFLZSxRQUNmK1UsRUFBUTlWLEVBQUt1USxjQUNiMlMsRUFBb0IsZUFBZGxqQixFQUFLMUMsS0FDWCtpQixFQUFTNkMsRUFBTSxLQUFPLEdBQ3RCNE0sRUFBTTVNLEVBQU1wTixFQUFRLEVBQUkvVSxFQUFROUIsT0FVakMsSUFQQ25CLEVBRElnWSxFQUFRLEVBQ1JnYSxFQUdBNU0sRUFBTXBOLEVBQVEsRUFJWGhZLEVBQUlneUIsRUFBS2h5QixJQUtoQixLQUpBa2pCLEVBQVNqZ0IsRUFBU2pELElBSUp3UyxVQUFZeFMsSUFBTWdZLEtBRzdCa0wsRUFBT3paLFlBQ0x5WixFQUFPemlCLFdBQVdnSixXQUNuQkMsRUFBVXdaLEVBQU96aUIsV0FBWSxhQUFpQixDQU1qRCxHQUhBdUUsRUFBUW5FLEVBQVFxaUIsR0FBU2pqQixNQUdwQm1sQixFQUNKLE9BQU9wZ0IsRUFJUnVkLEVBQU85akIsS0FBTXVHLEdBSWYsT0FBT3VkLEdBR1JuRCxJQUFLLFNBQVVsZCxFQUFNOEMsR0FNcEIsSUFMQSxJQUFJbTJCLEVBQVdqWSxFQUNkamdCLEVBQVVmLEVBQUtlLFFBQ2ZzZixFQUFTMWhCLEVBQU8yRCxVQUFXUSxHQUMzQmhGLEVBQUlpRCxFQUFROUIsT0FFTG5CLE9BQ1BrakIsRUFBU2pnQixFQUFTakQsSUFJTndTLFNBQ1gzUixFQUFPNkQsUUFBUzdELEVBQU9xNkIsU0FBU2hZLE9BQU8xaEIsSUFBSzBoQixHQUFVWCxJQUFZLEtBRWxFNFksR0FBWSxHQVVkLE9BSE1BLElBQ0xqNUIsRUFBS3VRLGVBQWlCLEdBRWhCOFAsT0FPWDFoQixFQUFPa0IsS0FBTSxDQUFFLFFBQVMsYUFBYyxXQUNyQ2xCLEVBQU9xNkIsU0FBVXI5QixNQUFTLENBQ3pCdWhCLElBQUssU0FBVWxkLEVBQU04QyxHQUNwQixHQUFLdkIsTUFBTUMsUUFBU3NCLEdBQ25CLE9BQVM5QyxFQUFLcVEsUUFBVTFSLEVBQU82RCxRQUFTN0QsRUFBUXFCLEdBQU9qQyxNQUFPK0UsSUFBVyxJQUl0RS9GLEVBQVFrNkIsVUFDYnQ0QixFQUFPcTZCLFNBQVVyOUIsTUFBTzJELElBQU0sU0FBVVUsR0FDdkMsT0FBd0MsT0FBakNBLEVBQUs3QixhQUFjLFNBQXFCLEtBQU82QixFQUFLOEMsV0FXOUQvRixFQUFRbThCLFFBQVUsY0FBZXg5QixFQUdqQyxJQUFJeTlCLEdBQWMsa0NBQ2pCQyxHQUEwQixTQUFVeHhCLEdBQ25DQSxFQUFFK2IsbUJBR0pobEIsRUFBT21DLE9BQVFuQyxFQUFPeWtCLE1BQU8sQ0FFNUJVLFFBQVMsU0FBVVYsRUFBT2pHLEVBQU1uZCxFQUFNcTVCLEdBRXJDLElBQUl2N0IsRUFBR21NLEVBQUs2QixFQUFLd3RCLEVBQVlDLEVBQVE3VSxFQUFROUssRUFBUzRmLEVBQ3JEQyxFQUFZLENBQUV6NUIsR0FBUXpFLEdBQ3RCK0IsRUFBT1gsRUFBT1AsS0FBTWduQixFQUFPLFFBQVdBLEVBQU05bEIsS0FBTzhsQixFQUNuRGtCLEVBQWEzbkIsRUFBT1AsS0FBTWduQixFQUFPLGFBQWdCQSxFQUFNeFksVUFBVTFILE1BQU8sS0FBUSxHQUtqRixHQUhBK0csRUFBTXV2QixFQUFjMXRCLEVBQU05TCxFQUFPQSxHQUFRekUsRUFHbEIsSUFBbEJ5RSxFQUFLOUMsVUFBb0MsSUFBbEI4QyxFQUFLOUMsV0FLNUJpOEIsR0FBWXZ3QixLQUFNdEwsRUFBT3FCLEVBQU95a0IsTUFBTXVCLGFBSXRDcm5CLEVBQUtkLFFBQVMsTUFBUyxJQUczQjhuQixFQUFhaG5CLEVBQUs0RixNQUFPLEtBQ3pCNUYsRUFBT2duQixFQUFXOWEsUUFDbEI4YSxFQUFXMWpCLFFBRVoyNEIsRUFBU2o4QixFQUFLZCxRQUFTLEtBQVEsR0FBSyxLQUFPYyxHQUczQzhsQixFQUFRQSxFQUFPemtCLEVBQU8rQyxTQUNyQjBoQixFQUNBLElBQUl6a0IsRUFBT29sQixNQUFPem1CLEVBQXVCLGlCQUFWOGxCLEdBQXNCQSxJQUdoREssVUFBWTRWLEVBQWUsRUFBSSxFQUNyQ2pXLEVBQU14WSxVQUFZMFosRUFBV3RiLEtBQU0sS0FDbkNvYSxFQUFNd0MsV0FBYXhDLEVBQU14WSxVQUN4QixJQUFJbEYsT0FBUSxVQUFZNGUsRUFBV3RiLEtBQU0saUJBQW9CLFdBQzdELEtBR0RvYSxFQUFNOVUsWUFBUzdNLEVBQ1QyaEIsRUFBTWhpQixTQUNYZ2lCLEVBQU1oaUIsT0FBU3BCLEdBSWhCbWQsRUFBZSxNQUFSQSxFQUNOLENBQUVpRyxHQUNGemtCLEVBQU8yRCxVQUFXNmEsRUFBTSxDQUFFaUcsSUFHM0J4SixFQUFVamIsRUFBT3lrQixNQUFNeEosUUFBU3RjLElBQVUsR0FDcEMrN0IsSUFBZ0J6ZixFQUFRa0ssVUFBbUQsSUFBeENsSyxFQUFRa0ssUUFBUXhuQixNQUFPMEQsRUFBTW1kLElBQXRFLENBTUEsSUFBTWtjLElBQWlCemYsRUFBUTJNLFdBQWFucEIsRUFBVTRDLEdBQVMsQ0FNOUQsSUFKQXM1QixFQUFhMWYsRUFBUThKLGNBQWdCcG1CLEVBQy9CNjdCLEdBQVl2d0IsS0FBTTB3QixFQUFhaDhCLEtBQ3BDMk0sRUFBTUEsRUFBSTFMLFlBRUgwTCxFQUFLQSxFQUFNQSxFQUFJMUwsV0FDdEJrN0IsRUFBVWw5QixLQUFNME4sR0FDaEI2QixFQUFNN0IsRUFJRjZCLEtBQVU5TCxFQUFLcUksZUFBaUI5TSxJQUNwQ2srQixFQUFVbDlCLEtBQU11UCxFQUFJYixhQUFlYSxFQUFJNHRCLGNBQWdCaCtCLEdBTXpELElBREFvQyxFQUFJLEdBQ01tTSxFQUFNd3ZCLEVBQVczN0IsUUFBWXNsQixFQUFNcUMsd0JBQzVDK1QsRUFBY3Z2QixFQUNkbVosRUFBTTlsQixLQUFPUSxFQUFJLEVBQ2hCdzdCLEVBQ0ExZixFQUFRaUwsVUFBWXZuQixHQUdyQm9uQixHQUFXcEgsRUFBU2hlLElBQUsySyxFQUFLLFdBQWNsTyxPQUFPMG9CLE9BQVEsT0FBVXJCLEVBQU05bEIsT0FDMUVnZ0IsRUFBU2hlLElBQUsySyxFQUFLLFlBRW5CeWEsRUFBT3BvQixNQUFPMk4sRUFBS2tULElBSXBCdUgsRUFBUzZVLEdBQVV0dkIsRUFBS3N2QixLQUNUN1UsRUFBT3BvQixPQUFTc2dCLEVBQVkzUyxLQUMxQ21aLEVBQU05VSxPQUFTb1csRUFBT3BvQixNQUFPMk4sRUFBS2tULElBQ1osSUFBakJpRyxFQUFNOVUsUUFDVjhVLEVBQU1TLGtCQThDVCxPQTFDQVQsRUFBTTlsQixLQUFPQSxFQUdQKzdCLEdBQWlCalcsRUFBTXdELHNCQUVwQmhOLEVBQVEwSCxXQUNxQyxJQUFwRDFILEVBQVEwSCxTQUFTaGxCLE1BQU9tOUIsRUFBVXgwQixNQUFPa1ksS0FDekNQLEVBQVk1YyxJQUlQdTVCLEdBQVV2OEIsRUFBWWdELEVBQU0xQyxNQUFhRixFQUFVNEMsTUFHdkQ4TCxFQUFNOUwsRUFBTXU1QixNQUdYdjVCLEVBQU11NUIsR0FBVyxNQUlsQjU2QixFQUFPeWtCLE1BQU11QixVQUFZcm5CLEVBRXBCOGxCLEVBQU1xQyx3QkFDVitULEVBQVlydUIsaUJBQWtCN04sRUFBTTg3QixJQUdyQ3A1QixFQUFNMUMsS0FFRDhsQixFQUFNcUMsd0JBQ1YrVCxFQUFZaGUsb0JBQXFCbGUsRUFBTTg3QixJQUd4Q3o2QixFQUFPeWtCLE1BQU11QixlQUFZbGpCLEVBRXBCcUssSUFDSjlMLEVBQU11NUIsR0FBV3p0QixJQU1kc1gsRUFBTTlVLFNBS2RxckIsU0FBVSxTQUFVcjhCLEVBQU0wQyxFQUFNb2pCLEdBQy9CLElBQUl4YixFQUFJakosRUFBT21DLE9BQ2QsSUFBSW5DLEVBQU9vbEIsTUFDWFgsRUFDQSxDQUNDOWxCLEtBQU1BLEVBQ04ycEIsYUFBYSxJQUlmdG9CLEVBQU95a0IsTUFBTVUsUUFBU2xjLEVBQUcsS0FBTTVILE1BS2pDckIsRUFBT0csR0FBR2dDLE9BQVEsQ0FFakJnakIsUUFBUyxTQUFVeG1CLEVBQU02ZixHQUN4QixPQUFPeGhCLEtBQUtrRSxNQUFNLFdBQ2pCbEIsRUFBT3lrQixNQUFNVSxRQUFTeG1CLEVBQU02ZixFQUFNeGhCLFVBR3BDaStCLGVBQWdCLFNBQVV0OEIsRUFBTTZmLEdBQy9CLElBQUluZCxFQUFPckUsS0FBTSxHQUNqQixHQUFLcUUsRUFDSixPQUFPckIsRUFBT3lrQixNQUFNVSxRQUFTeG1CLEVBQU02ZixFQUFNbmQsR0FBTSxNQWM1Q2pELEVBQVFtOEIsU0FDYnY2QixFQUFPa0IsS0FBTSxDQUFFZ3BCLE1BQU8sVUFBV0MsS0FBTSxhQUFjLFNBQVVLLEVBQU03RCxHQUdwRSxJQUFJeGIsRUFBVSxTQUFVc1osR0FDdkJ6a0IsRUFBT3lrQixNQUFNdVcsU0FBVXJVLEVBQUtsQyxFQUFNaGlCLE9BQVF6QyxFQUFPeWtCLE1BQU1rQyxJQUFLbEMsS0FHN0R6a0IsRUFBT3lrQixNQUFNeEosUUFBUzBMLEdBQVEsQ0FDN0JQLE1BQU8sV0FJTixJQUFJbG5CLEVBQU1sQyxLQUFLME0sZUFBaUIxTSxLQUFLSixVQUFZSSxLQUNoRGsrQixFQUFXdmMsRUFBU3hCLE9BQVFqZSxFQUFLeW5CLEdBRTVCdVUsR0FDTGg4QixFQUFJc04saUJBQWtCZ2UsRUFBTXJmLEdBQVMsR0FFdEN3VCxFQUFTeEIsT0FBUWplLEVBQUt5bkIsR0FBT3VVLEdBQVksR0FBTSxJQUVoRDNVLFNBQVUsV0FDVCxJQUFJcm5CLEVBQU1sQyxLQUFLME0sZUFBaUIxTSxLQUFLSixVQUFZSSxLQUNoRGsrQixFQUFXdmMsRUFBU3hCLE9BQVFqZSxFQUFLeW5CLEdBQVEsRUFFcEN1VSxFQUtMdmMsRUFBU3hCLE9BQVFqZSxFQUFLeW5CLEVBQUt1VSxJQUozQmg4QixFQUFJMmQsb0JBQXFCMk4sRUFBTXJmLEdBQVMsR0FDeEN3VCxFQUFTakYsT0FBUXhhLEVBQUt5bkIsU0FTM0IsSUFBSXRWLEdBQVd0VSxFQUFPc1UsU0FFbEJ4UyxHQUFRLENBQUV1RixLQUFNc0IsS0FBSzJpQixPQUVyQjhTLEdBQVMsS0FLYm43QixFQUFPbzdCLFNBQVcsU0FBVTVjLEdBQzNCLElBQUl0TyxFQUFLbXJCLEVBQ1QsSUFBTTdjLEdBQXdCLGlCQUFUQSxFQUNwQixPQUFPLEtBS1IsSUFDQ3RPLEdBQU0sSUFBTW5ULEVBQU91K0IsV0FBY0MsZ0JBQWlCL2MsRUFBTSxZQUN2RCxNQUFRdlYsSUFZVixPQVZBb3lCLEVBQWtCbnJCLEdBQU9BLEVBQUlwRyxxQkFBc0IsZUFBaUIsR0FDOURvRyxJQUFPbXJCLEdBQ1pyN0IsRUFBT29ELE1BQU8saUJBQ2JpNEIsRUFDQ3I3QixFQUFPb0IsSUFBS2k2QixFQUFnQnJ5QixZQUFZLFNBQVVnQyxHQUNqRCxPQUFPQSxFQUFHOEQsZUFDUHpFLEtBQU0sTUFDVm1VLElBR0l0TyxHQUlSLElBQ0NzckIsR0FBVyxRQUNYQyxHQUFRLFNBQ1JDLEdBQWtCLHdDQUNsQkMsR0FBZSxxQ0FFaEIsU0FBU0MsR0FBYTdJLEVBQVF6MEIsRUFBS3U5QixFQUFheGtCLEdBQy9DLElBQUloVixFQUVKLEdBQUtPLE1BQU1DLFFBQVN2RSxHQUduQjBCLEVBQU9rQixLQUFNNUMsR0FBSyxTQUFVYSxFQUFHOFksR0FDekI0akIsR0FBZUwsR0FBU3Z4QixLQUFNOG9CLEdBR2xDMWIsRUFBSzBiLEVBQVE5YSxHQUtiMmpCLEdBQ0M3SSxFQUFTLEtBQXFCLGlCQUFOOWEsR0FBdUIsTUFBTEEsRUFBWTlZLEVBQUksSUFBTyxJQUNqRThZLEVBQ0E0akIsRUFDQXhrQixXQUtHLEdBQU13a0IsR0FBaUMsV0FBbEIvN0IsRUFBUXhCLEdBVW5DK1ksRUFBSzBiLEVBQVF6MEIsUUFQYixJQUFNK0QsS0FBUS9ELEVBQ2JzOUIsR0FBYTdJLEVBQVMsSUFBTTF3QixFQUFPLElBQUsvRCxFQUFLK0QsR0FBUXc1QixFQUFheGtCLEdBWXJFclgsRUFBTzg3QixNQUFRLFNBQVUxMUIsRUFBR3kxQixHQUMzQixJQUFJOUksRUFDSGdKLEVBQUksR0FDSjFrQixFQUFNLFNBQVUxTSxFQUFLcXhCLEdBR3BCLElBQUk3M0IsRUFBUTlGLEVBQVkyOUIsR0FDdkJBLElBQ0FBLEVBRURELEVBQUdBLEVBQUV6N0IsUUFBVzI3QixtQkFBb0J0eEIsR0FBUSxJQUMzQ3N4QixtQkFBNkIsTUFBVDkzQixFQUFnQixHQUFLQSxJQUc1QyxHQUFVLE1BQUxpQyxFQUNKLE1BQU8sR0FJUixHQUFLeEQsTUFBTUMsUUFBU3VELElBQVNBLEVBQUU1RixTQUFXUixFQUFPMkMsY0FBZXlELEdBRy9EcEcsRUFBT2tCLEtBQU1rRixHQUFHLFdBQ2ZpUixFQUFLcmEsS0FBS3FGLEtBQU1yRixLQUFLbUgsZUFPdEIsSUFBTTR1QixLQUFVM3NCLEVBQ2Z3MUIsR0FBYTdJLEVBQVEzc0IsRUFBRzJzQixHQUFVOEksRUFBYXhrQixHQUtqRCxPQUFPMGtCLEVBQUUxeEIsS0FBTSxNQUdoQnJLLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCKzVCLFVBQVcsV0FDVixPQUFPbDhCLEVBQU84N0IsTUFBTzkrQixLQUFLbS9CLG1CQUUzQkEsZUFBZ0IsV0FDZixPQUFPbi9CLEtBQUtvRSxLQUFLLFdBR2hCLElBQUlrTixFQUFXdE8sRUFBT3llLEtBQU16aEIsS0FBTSxZQUNsQyxPQUFPc1IsRUFBV3RPLEVBQU8yRCxVQUFXMkssR0FBYXRSLFFBQzlDOFAsUUFBUSxXQUNYLElBQUluTyxFQUFPM0IsS0FBSzJCLEtBR2hCLE9BQU8zQixLQUFLcUYsT0FBU3JDLEVBQVFoRCxNQUFPNlksR0FBSSxjQUN2QzhsQixHQUFhMXhCLEtBQU1qTixLQUFLNkwsWUFBZTZ5QixHQUFnQnp4QixLQUFNdEwsS0FDM0QzQixLQUFLMFUsVUFBWW9RLEdBQWU3WCxLQUFNdEwsT0FDdEN5QyxLQUFLLFNBQVVvRCxFQUFJbkQsR0FDdEIsSUFBSWpDLEVBQU1ZLEVBQVFoRCxNQUFPb0MsTUFFekIsT0FBWSxNQUFQQSxFQUNHLEtBR0h3RCxNQUFNQyxRQUFTekQsR0FDWlksRUFBT29CLElBQUtoQyxHQUFLLFNBQVVBLEdBQ2pDLE1BQU8sQ0FBRWlELEtBQU1oQixFQUFLZ0IsS0FBTThCLE1BQU8vRSxFQUFJOEQsUUFBU3U0QixHQUFPLFlBSWhELENBQUVwNUIsS0FBTWhCLEVBQUtnQixLQUFNOEIsTUFBTy9FLEVBQUk4RCxRQUFTdTRCLEdBQU8sWUFDbEQ5NkIsU0FLTixJQUNDeTdCLEdBQU0sT0FDTkMsR0FBUSxPQUNSQyxHQUFhLGdCQUNiQyxHQUFXLDZCQUlYQyxHQUFhLGlCQUNiQyxHQUFZLFFBV1pwSCxHQUFhLEdBT2JxSCxHQUFhLEdBR2JDLEdBQVcsS0FBS2ovQixPQUFRLEtBR3hCay9CLEdBQWVoZ0MsRUFBUzBDLGNBQWUsS0FLeEMsU0FBU3U5QixHQUE2QkMsR0FHckMsT0FBTyxTQUFVQyxFQUFvQi9pQixHQUVELGlCQUF2QitpQixJQUNYL2lCLEVBQU8raUIsRUFDUEEsRUFBcUIsS0FHdEIsSUFBSUMsRUFDSDc5QixFQUFJLEVBQ0o4OUIsRUFBWUYsRUFBbUJ0NEIsY0FBYzZFLE1BQU95TyxJQUFtQixHQUV4RSxHQUFLMVosRUFBWTJiLEdBR2hCLEtBQVVnakIsRUFBV0MsRUFBVzk5QixNQUdSLE1BQWxCNjlCLEVBQVUsSUFDZEEsRUFBV0EsRUFBUzEvQixNQUFPLElBQU8sS0FDaEN3L0IsRUFBV0UsR0FBYUYsRUFBV0UsSUFBYyxJQUFLNXVCLFFBQVM0TCxLQUkvRDhpQixFQUFXRSxHQUFhRixFQUFXRSxJQUFjLElBQUtwL0IsS0FBTW9jLElBUW5FLFNBQVNrakIsR0FBK0JKLEVBQVcxNkIsRUFBU3d6QixFQUFpQnVILEdBRTVFLElBQUlDLEVBQVksR0FDZkMsRUFBcUJQLElBQWNKLEdBRXBDLFNBQVNZLEVBQVNOLEdBQ2pCLElBQUlyckIsRUFjSixPQWJBeXJCLEVBQVdKLElBQWEsRUFDeEJoOUIsRUFBT2tCLEtBQU00N0IsRUFBV0UsSUFBYyxJQUFJLFNBQVVsa0IsRUFBR3lrQixHQUN0RCxJQUFJQyxFQUFzQkQsRUFBb0JuN0IsRUFBU3d6QixFQUFpQnVILEdBQ3hFLE1BQW9DLGlCQUF4QkssR0FDVkgsR0FBcUJELEVBQVdJLEdBS3RCSCxJQUNEMXJCLEVBQVc2ckIsUUFEZixHQUhOcDdCLEVBQVE2NkIsVUFBVTd1QixRQUFTb3ZCLEdBQzNCRixFQUFTRSxJQUNGLE1BS0Y3ckIsRUFHUixPQUFPMnJCLEVBQVNsN0IsRUFBUTY2QixVQUFXLE1BQVVHLEVBQVcsTUFBU0UsRUFBUyxLQU0zRSxTQUFTRyxHQUFZaDdCLEVBQVE3RCxHQUM1QixJQUFJK0wsRUFBS2pJLEVBQ1JnN0IsRUFBYzE5QixFQUFPMjlCLGFBQWFELGFBQWUsR0FFbEQsSUFBTS95QixLQUFPL0wsT0FDUWtFLElBQWZsRSxFQUFLK0wsTUFDUCt5QixFQUFhL3lCLEdBQVFsSSxFQUFXQyxJQUFVQSxFQUFPLEtBQVVpSSxHQUFRL0wsRUFBSytMLElBTzVFLE9BSktqSSxHQUNKMUMsRUFBT21DLFFBQVEsRUFBTU0sRUFBUUMsR0FHdkJELEVBL0VSbTZCLEdBQWFwckIsS0FBT0gsR0FBU0csS0FnUDdCeFIsRUFBT21DLE9BQVEsQ0FHZHk3QixPQUFRLEVBR1JDLGFBQWMsR0FDZEMsS0FBTSxHQUVOSCxhQUFjLENBQ2JJLElBQUsxc0IsR0FBU0csS0FDZDdTLEtBQU0sTUFDTnEvQixRQXhSZ0IsNERBd1JRL3pCLEtBQU1vSCxHQUFTNHNCLFVBQ3ZDdGhDLFFBQVEsRUFDUnVoQyxhQUFhLEVBQ2JDLE9BQU8sRUFDUEMsWUFBYSxtREFjYkMsUUFBUyxDQUNSLElBQUsxQixHQUNMcDlCLEtBQU0sYUFDTm1zQixLQUFNLFlBQ054YixJQUFLLDRCQUNMb3VCLEtBQU0scUNBR1AxbkIsU0FBVSxDQUNUMUcsSUFBSyxVQUNMd2IsS0FBTSxTQUNONFMsS0FBTSxZQUdQQyxlQUFnQixDQUNmcnVCLElBQUssY0FDTDNRLEtBQU0sZUFDTisrQixLQUFNLGdCQUtQRSxXQUFZLENBR1gsU0FBVXQyQixPQUdWLGFBQWEsRUFHYixZQUFhOFcsS0FBS0MsTUFHbEIsV0FBWWpmLEVBQU9vN0IsVUFPcEJzQyxZQUFhLENBQ1pLLEtBQUssRUFDTDc5QixTQUFTLElBT1h1K0IsVUFBVyxTQUFVaDhCLEVBQVFpOEIsR0FDNUIsT0FBT0EsRUFHTmpCLEdBQVlBLEdBQVloN0IsRUFBUXpDLEVBQU8yOUIsY0FBZ0JlLEdBR3ZEakIsR0FBWXo5QixFQUFPMjlCLGFBQWNsN0IsSUFHbkNrOEIsY0FBZTlCLEdBQTZCeEgsSUFDNUN1SixjQUFlL0IsR0FBNkJILElBRzVDbUMsS0FBTSxTQUFVZCxFQUFLMzdCLEdBR0EsaUJBQVIyN0IsSUFDWDM3QixFQUFVMjdCLEVBQ1ZBLE9BQU1qN0IsR0FJUFYsRUFBVUEsR0FBVyxHQUVyQixJQUFJMDhCLEVBR0hDLEVBR0FDLEVBQ0FDLEVBR0FDLEVBR0FDLEVBR0F2aUIsRUFHQXdpQixFQUdBamdDLEVBR0FrZ0MsRUFHQXRELEVBQUkvN0IsRUFBT3krQixVQUFXLEdBQUlyOEIsR0FHMUJrOUIsRUFBa0J2RCxFQUFFNzdCLFNBQVc2N0IsRUFHL0J3RCxFQUFxQnhELEVBQUU3N0IsVUFDcEJvL0IsRUFBZ0IvZ0MsVUFBWStnQyxFQUFnQjkrQixRQUM5Q1IsRUFBUXMvQixHQUNSdC9CLEVBQU95a0IsTUFHUnJLLEVBQVdwYSxFQUFPK1osV0FDbEJ5bEIsRUFBbUJ4L0IsRUFBTzRZLFVBQVcsZUFHckM2bUIsRUFBYTFELEVBQUUwRCxZQUFjLEdBRzdCQyxFQUFpQixHQUNqQkMsRUFBc0IsR0FHdEJDLEVBQVcsV0FHWHpDLEVBQVEsQ0FDUGxnQixXQUFZLEVBR1o0aUIsa0JBQW1CLFNBQVVsMUIsR0FDNUIsSUFBSXJCLEVBQ0osR0FBS3NULEVBQVksQ0FDaEIsSUFBTXFpQixFQUVMLElBREFBLEVBQWtCLEdBQ1IzMUIsRUFBUWl6QixHQUFTNXlCLEtBQU1xMUIsSUFDaENDLEVBQWlCMzFCLEVBQU8sR0FBSTdFLGNBQWdCLE1BQ3pDdzZCLEVBQWlCMzFCLEVBQU8sR0FBSTdFLGNBQWdCLE1BQVMsSUFDckQvRyxPQUFRNEwsRUFBTyxJQUdwQkEsRUFBUTIxQixFQUFpQnQwQixFQUFJbEcsY0FBZ0IsS0FFOUMsT0FBZ0IsTUFBVDZFLEVBQWdCLEtBQU9BLEVBQU1lLEtBQU0sT0FJM0N5MUIsc0JBQXVCLFdBQ3RCLE9BQU9sakIsRUFBWW9pQixFQUF3QixNQUk1Q2UsaUJBQWtCLFNBQVUxOUIsRUFBTThCLEdBTWpDLE9BTGtCLE1BQWJ5WSxJQUNKdmEsRUFBT3M5QixFQUFxQnQ5QixFQUFLb0MsZUFDaENrN0IsRUFBcUJ0OUIsRUFBS29DLGdCQUFtQnBDLEVBQzlDcTlCLEVBQWdCcjlCLEdBQVM4QixHQUVuQm5ILE1BSVJnakMsaUJBQWtCLFNBQVVyaEMsR0FJM0IsT0FIa0IsTUFBYmllLElBQ0ptZixFQUFFa0UsU0FBV3RoQyxHQUVQM0IsTUFJUnlpQyxXQUFZLFNBQVVyK0IsR0FDckIsSUFBSXBDLEVBQ0osR0FBS29DLEVBQ0osR0FBS3diLEVBR0p1Z0IsRUFBTWhqQixPQUFRL1ksRUFBSys3QixFQUFNK0MsY0FJekIsSUFBTWxoQyxLQUFRb0MsRUFDYnErQixFQUFZemdDLEdBQVMsQ0FBRXlnQyxFQUFZemdDLEdBQVFvQyxFQUFLcEMsSUFJbkQsT0FBT2hDLE1BSVJtakMsTUFBTyxTQUFVQyxHQUNoQixJQUFJQyxFQUFZRCxHQUFjUixFQUs5QixPQUpLZCxHQUNKQSxFQUFVcUIsTUFBT0UsR0FFbEJ4NkIsRUFBTSxFQUFHdzZCLEdBQ0ZyakMsT0FvQlYsR0FmQW9kLEVBQVMzQixRQUFTMGtCLEdBS2xCcEIsRUFBRWdDLE1BQVVBLEdBQU9oQyxFQUFFZ0MsS0FBTzFzQixHQUFTRyxNQUFTLElBQzVDdE8sUUFBU3U1QixHQUFXcHJCLEdBQVM0c0IsU0FBVyxNQUcxQ2xDLEVBQUVwOUIsS0FBT3lELEVBQVFvVyxRQUFVcFcsRUFBUXpELE1BQVFvOUIsRUFBRXZqQixRQUFVdWpCLEVBQUVwOUIsS0FHekRvOUIsRUFBRWtCLFdBQWNsQixFQUFFaUIsVUFBWSxLQUFNdjRCLGNBQWM2RSxNQUFPeU8sSUFBbUIsQ0FBRSxJQUd4RCxNQUFqQmdrQixFQUFFdUUsWUFBc0IsQ0FDNUJuQixFQUFZdmlDLEVBQVMwQyxjQUFlLEtBS3BDLElBQ0M2L0IsRUFBVTN0QixLQUFPdXFCLEVBQUVnQyxJQUluQm9CLEVBQVUzdEIsS0FBTzJ0QixFQUFVM3RCLEtBQzNCdXFCLEVBQUV1RSxZQUFjMUQsR0FBYXFCLFNBQVcsS0FBT3JCLEdBQWEyRCxNQUMzRHBCLEVBQVVsQixTQUFXLEtBQU9rQixFQUFVb0IsS0FDdEMsTUFBUXQzQixHQUlUOHlCLEVBQUV1RSxhQUFjLEdBYWxCLEdBUkt2RSxFQUFFdmQsTUFBUXVkLEVBQUVtQyxhQUFpQyxpQkFBWG5DLEVBQUV2ZCxPQUN4Q3VkLEVBQUV2ZCxLQUFPeGUsRUFBTzg3QixNQUFPQyxFQUFFdmQsS0FBTXVkLEVBQUVGLGNBSWxDcUIsR0FBK0I3SCxHQUFZMEcsRUFBRzM1QixFQUFTKzZCLEdBR2xEdmdCLEVBQ0osT0FBT3VnQixFQThFUixJQUFNaCtCLEtBekVOaWdDLEVBQWNwL0IsRUFBT3lrQixPQUFTc1gsRUFBRXAvQixTQUdRLEdBQXBCcUQsRUFBTzQ5QixVQUMxQjU5QixFQUFPeWtCLE1BQU1VLFFBQVMsYUFJdkI0VyxFQUFFcDlCLEtBQU9vOUIsRUFBRXA5QixLQUFLbWYsY0FHaEJpZSxFQUFFeUUsWUFBY2hFLEdBQVd2eUIsS0FBTTh4QixFQUFFcDlCLE1BS25Db2dDLEVBQVdoRCxFQUFFZ0MsSUFBSTc2QixRQUFTbTVCLEdBQU8sSUFHM0JOLEVBQUV5RSxXQXdCSXpFLEVBQUV2ZCxNQUFRdWQsRUFBRW1DLGFBQ29ELEtBQXpFbkMsRUFBRXFDLGFBQWUsSUFBS3ZnQyxRQUFTLHVDQUNqQ2srQixFQUFFdmQsS0FBT3VkLEVBQUV2ZCxLQUFLdGIsUUFBU2s1QixHQUFLLE9BdkI5QmlELEVBQVd0RCxFQUFFZ0MsSUFBSXpnQyxNQUFPeWhDLEVBQVN6K0IsUUFHNUJ5N0IsRUFBRXZkLE9BQVV1ZCxFQUFFbUMsYUFBaUMsaUJBQVhuQyxFQUFFdmQsUUFDMUN1Z0IsSUFBYzVELEdBQU9seEIsS0FBTTgwQixHQUFhLElBQU0sS0FBUWhELEVBQUV2ZCxZQUdqRHVkLEVBQUV2ZCxPQUlPLElBQVp1ZCxFQUFFcnhCLFFBQ05xMEIsRUFBV0EsRUFBUzc3QixRQUFTbzVCLEdBQVksTUFDekMrQyxHQUFhbEUsR0FBT2x4QixLQUFNODBCLEdBQWEsSUFBTSxLQUFRLEtBQVNsZ0MsR0FBTXVGLE9BQ25FaTdCLEdBSUZ0RCxFQUFFZ0MsSUFBTWdCLEVBQVdNLEdBU2Z0RCxFQUFFMEUsYUFDRHpnQyxFQUFPNjlCLGFBQWNrQixJQUN6QjVCLEVBQU00QyxpQkFBa0Isb0JBQXFCLy9CLEVBQU82OUIsYUFBY2tCLElBRTlELytCLEVBQU84OUIsS0FBTWlCLElBQ2pCNUIsRUFBTTRDLGlCQUFrQixnQkFBaUIvL0IsRUFBTzg5QixLQUFNaUIsTUFLbkRoRCxFQUFFdmQsTUFBUXVkLEVBQUV5RSxhQUFnQyxJQUFsQnpFLEVBQUVxQyxhQUF5Qmg4QixFQUFRZzhCLGNBQ2pFakIsRUFBTTRDLGlCQUFrQixlQUFnQmhFLEVBQUVxQyxhQUkzQ2pCLEVBQU00QyxpQkFDTCxTQUNBaEUsRUFBRWtCLFVBQVcsSUFBT2xCLEVBQUVzQyxRQUFTdEMsRUFBRWtCLFVBQVcsSUFDM0NsQixFQUFFc0MsUUFBU3RDLEVBQUVrQixVQUFXLEtBQ0EsTUFBckJsQixFQUFFa0IsVUFBVyxHQUFjLEtBQU9OLEdBQVcsV0FBYSxJQUM3RFosRUFBRXNDLFFBQVMsTUFJRnRDLEVBQUUyRSxRQUNadkQsRUFBTTRDLGlCQUFrQjVnQyxFQUFHNDhCLEVBQUUyRSxRQUFTdmhDLElBSXZDLEdBQUs0OEIsRUFBRTRFLGNBQytDLElBQW5ENUUsRUFBRTRFLFdBQVdsakMsS0FBTTZoQyxFQUFpQm5DLEVBQU9wQixJQUFpQm5mLEdBRzlELE9BQU91Z0IsRUFBTWdELFFBZWQsR0FYQVAsRUFBVyxRQUdYSixFQUFpQm5vQixJQUFLMGtCLEVBQUUvRixVQUN4Qm1ILEVBQU10M0IsS0FBTWsyQixFQUFFNkUsU0FDZHpELEVBQU16a0IsS0FBTXFqQixFQUFFMzRCLE9BR2QwN0IsRUFBWTVCLEdBQStCUixHQUFZWCxFQUFHMzVCLEVBQVMrNkIsR0FLNUQsQ0FTTixHQVJBQSxFQUFNbGdCLFdBQWEsRUFHZG1pQixHQUNKRyxFQUFtQnBhLFFBQVMsV0FBWSxDQUFFZ1ksRUFBT3BCLElBSTdDbmYsRUFDSixPQUFPdWdCLEVBSUhwQixFQUFFb0MsT0FBU3BDLEVBQUUzRCxRQUFVLElBQzNCOEcsRUFBZW5pQyxFQUFPNmUsWUFBWSxXQUNqQ3VoQixFQUFNZ0QsTUFBTyxhQUNYcEUsRUFBRTNELFVBR04sSUFDQ3hiLEdBQVksRUFDWmtpQixFQUFVK0IsS0FBTW5CLEVBQWdCNzVCLEdBQy9CLE1BQVFvRCxHQUdULEdBQUsyVCxFQUNKLE1BQU0zVCxFQUlQcEQsR0FBTyxFQUFHb0QsU0FoQ1hwRCxHQUFPLEVBQUcsZ0JBcUNYLFNBQVNBLEVBQU1xNkIsRUFBUVksRUFBa0JDLEVBQVdMLEdBQ25ELElBQUlNLEVBQVdKLEVBQVN4OUIsRUFBTzY5QixFQUFVQyxFQUN4Q2QsRUFBYVUsRUFHVGxrQixJQUlMQSxHQUFZLEVBR1BzaUIsR0FDSm5pQyxFQUFPczdCLGFBQWM2RyxHQUt0QkosT0FBWWg4QixFQUdaazhCLEVBQXdCMEIsR0FBVyxHQUduQ3ZELEVBQU1sZ0IsV0FBYWlqQixFQUFTLEVBQUksRUFBSSxFQUdwQ2MsRUFBWWQsR0FBVSxLQUFPQSxFQUFTLEtBQWtCLE1BQVhBLEVBR3hDYSxJQUNKRSxFQTdsQkosU0FBOEJsRixFQUFHb0IsRUFBTzRELEdBT3ZDLElBTEEsSUFBSUksRUFBSXhpQyxFQUFNeWlDLEVBQWVDLEVBQzVCenFCLEVBQVdtbEIsRUFBRW5sQixTQUNicW1CLEVBQVlsQixFQUFFa0IsVUFHWSxNQUFuQkEsRUFBVyxJQUNsQkEsRUFBVXB5QixhQUNFL0gsSUFBUHErQixJQUNKQSxFQUFLcEYsRUFBRWtFLFVBQVk5QyxFQUFNMEMsa0JBQW1CLGlCQUs5QyxHQUFLc0IsRUFDSixJQUFNeGlDLEtBQVFpWSxFQUNiLEdBQUtBLEVBQVVqWSxJQUFVaVksRUFBVWpZLEdBQU9zTCxLQUFNazNCLEdBQU8sQ0FDdERsRSxFQUFVN3VCLFFBQVN6UCxHQUNuQixNQU1ILEdBQUtzK0IsRUFBVyxLQUFPOEQsRUFDdEJLLEVBQWdCbkUsRUFBVyxPQUNyQixDQUdOLElBQU10K0IsS0FBUW9pQyxFQUFZLENBQ3pCLElBQU05RCxFQUFXLElBQU9sQixFQUFFeUMsV0FBWTcvQixFQUFPLElBQU1zK0IsRUFBVyxJQUFRLENBQ3JFbUUsRUFBZ0J6aUMsRUFDaEIsTUFFSzBpQyxJQUNMQSxFQUFnQjFpQyxHQUtsQnlpQyxFQUFnQkEsR0FBaUJDLEVBTWxDLEdBQUtELEVBSUosT0FIS0EsSUFBa0JuRSxFQUFXLElBQ2pDQSxFQUFVN3VCLFFBQVNnekIsR0FFYkwsRUFBV0ssR0EwaUJMRSxDQUFxQnZGLEVBQUdvQixFQUFPNEQsS0FJckNDLEdBQ0xoaEMsRUFBTzZELFFBQVMsU0FBVWs0QixFQUFFa0IsWUFBZSxHQUMzQ2o5QixFQUFPNkQsUUFBUyxPQUFRazRCLEVBQUVrQixXQUFjLElBQ3hDbEIsRUFBRXlDLFdBQVksZUFBa0IsY0FJakN5QyxFQTlpQkgsU0FBc0JsRixFQUFHa0YsRUFBVTlELEVBQU82RCxHQUN6QyxJQUFJTyxFQUFPQyxFQUFTQyxFQUFNdDBCLEVBQUswSixFQUM5QjJuQixFQUFhLEdBR2J2QixFQUFZbEIsRUFBRWtCLFVBQVUzL0IsUUFHekIsR0FBSzIvQixFQUFXLEdBQ2YsSUFBTXdFLEtBQVExRixFQUFFeUMsV0FDZkEsRUFBWWlELEVBQUtoOUIsZUFBa0JzM0IsRUFBRXlDLFdBQVlpRCxHQU9uRCxJQUhBRCxFQUFVdkUsRUFBVXB5QixRQUdaMjJCLEdBY1AsR0FaS3pGLEVBQUV3QyxlQUFnQmlELEtBQ3RCckUsRUFBT3BCLEVBQUV3QyxlQUFnQmlELElBQWNQLElBSWxDcHFCLEdBQVFtcUIsR0FBYWpGLEVBQUUyRixhQUM1QlQsRUFBV2xGLEVBQUUyRixXQUFZVCxFQUFVbEYsRUFBRWlCLFdBR3RDbm1CLEVBQU8ycUIsRUFDUEEsRUFBVXZFLEVBQVVweUIsUUFLbkIsR0FBaUIsTUFBWjIyQixFQUVKQSxFQUFVM3FCLE9BR0osR0FBYyxNQUFUQSxHQUFnQkEsSUFBUzJxQixFQUFVLENBTTlDLEtBSEFDLEVBQU9qRCxFQUFZM25CLEVBQU8sSUFBTTJxQixJQUFhaEQsRUFBWSxLQUFPZ0QsSUFJL0QsSUFBTUQsS0FBUy9DLEVBSWQsSUFEQXJ4QixFQUFNbzBCLEVBQU1oOUIsTUFBTyxNQUNULEtBQVFpOUIsSUFHakJDLEVBQU9qRCxFQUFZM25CLEVBQU8sSUFBTTFKLEVBQUssS0FDcENxeEIsRUFBWSxLQUFPcnhCLEVBQUssS0FDYixFQUdHLElBQVRzMEIsRUFDSkEsRUFBT2pELEVBQVkrQyxJQUdnQixJQUF4Qi9DLEVBQVkrQyxLQUN2QkMsRUFBVXIwQixFQUFLLEdBQ2Y4dkIsRUFBVTd1QixRQUFTakIsRUFBSyxLQUV6QixNQU9KLElBQWMsSUFBVHMwQixFQUdKLEdBQUtBLEdBQVExRixFQUFFNEYsT0FDZFYsRUFBV1EsRUFBTVIsUUFFakIsSUFDQ0EsRUFBV1EsRUFBTVIsR0FDaEIsTUFBUWg0QixHQUNULE1BQU8sQ0FDTmlSLE1BQU8sY0FDUDlXLE1BQU9xK0IsRUFBT3g0QixFQUFJLHNCQUF3QjROLEVBQU8sT0FBUzJxQixJQVNqRSxNQUFPLENBQUV0bkIsTUFBTyxVQUFXc0UsS0FBTXlpQixHQWlkcEJXLENBQWE3RixFQUFHa0YsRUFBVTlELEVBQU82RCxHQUd2Q0EsR0FHQ2pGLEVBQUUwRSxjQUNOUyxFQUFXL0QsRUFBTTBDLGtCQUFtQixvQkFFbkM3L0IsRUFBTzY5QixhQUFja0IsR0FBYW1DLElBRW5DQSxFQUFXL0QsRUFBTTBDLGtCQUFtQixXQUVuQzcvQixFQUFPODlCLEtBQU1pQixHQUFhbUMsSUFLWixNQUFYaEIsR0FBNkIsU0FBWG5FLEVBQUVwOUIsS0FDeEJ5aEMsRUFBYSxZQUdTLE1BQVhGLEVBQ1hFLEVBQWEsZUFJYkEsRUFBYWEsRUFBUy9tQixNQUN0QjBtQixFQUFVSyxFQUFTemlCLEtBRW5Cd2lCLElBREE1OUIsRUFBUTY5QixFQUFTNzlCLFVBTWxCQSxFQUFRZzlCLEdBQ0hGLEdBQVdFLElBQ2ZBLEVBQWEsUUFDUkYsRUFBUyxJQUNiQSxFQUFTLEtBTVovQyxFQUFNK0MsT0FBU0EsRUFDZi9DLEVBQU1pRCxZQUFlVSxHQUFvQlYsR0FBZSxHQUduRFksRUFDSjVtQixFQUFTa0IsWUFBYWdrQixFQUFpQixDQUFFc0IsRUFBU1IsRUFBWWpELElBRTlEL2lCLEVBQVNzQixXQUFZNGpCLEVBQWlCLENBQUVuQyxFQUFPaUQsRUFBWWg5QixJQUk1RCs1QixFQUFNc0MsV0FBWUEsR0FDbEJBLE9BQWEzOEIsRUFFUnM4QixHQUNKRyxFQUFtQnBhLFFBQVM2YixFQUFZLGNBQWdCLFlBQ3ZELENBQUU3RCxFQUFPcEIsRUFBR2lGLEVBQVlKLEVBQVV4OUIsSUFJcENvOEIsRUFBaUIxbEIsU0FBVXdsQixFQUFpQixDQUFFbkMsRUFBT2lELElBRWhEaEIsSUFDSkcsRUFBbUJwYSxRQUFTLGVBQWdCLENBQUVnWSxFQUFPcEIsTUFHM0MvN0IsRUFBTzQ5QixRQUNoQjU5QixFQUFPeWtCLE1BQU1VLFFBQVMsY0FLekIsT0FBT2dZLEdBR1IwRSxRQUFTLFNBQVU5RCxFQUFLdmYsRUFBTXJkLEdBQzdCLE9BQU9uQixFQUFPVyxJQUFLbzlCLEVBQUt2ZixFQUFNcmQsRUFBVSxTQUd6QzJnQyxVQUFXLFNBQVUvRCxFQUFLNThCLEdBQ3pCLE9BQU9uQixFQUFPVyxJQUFLbzlCLE9BQUtqN0IsRUFBVzNCLEVBQVUsYUFJL0NuQixFQUFPa0IsS0FBTSxDQUFFLE1BQU8sU0FBVSxTQUFVc0QsRUFBSWdVLEdBQzdDeFksRUFBUXdZLEdBQVcsU0FBVXVsQixFQUFLdmYsRUFBTXJkLEVBQVV4QyxHQVVqRCxPQVBLTixFQUFZbWdCLEtBQ2hCN2YsRUFBT0EsR0FBUXdDLEVBQ2ZBLEVBQVdxZCxFQUNYQSxPQUFPMWIsR0FJRDlDLEVBQU82K0IsS0FBTTcrQixFQUFPbUMsT0FBUSxDQUNsQzQ3QixJQUFLQSxFQUNMcC9CLEtBQU02WixFQUNOd2tCLFNBQVVyK0IsRUFDVjZmLEtBQU1BLEVBQ05vaUIsUUFBU3ovQixHQUNQbkIsRUFBTzJDLGNBQWVvN0IsSUFBU0EsUUFJcEMvOUIsRUFBTzIrQixlQUFlLFNBQVU1QyxHQUMvQixJQUFJNThCLEVBQ0osSUFBTUEsS0FBSzQ4QixFQUFFMkUsUUFDYSxpQkFBcEJ2aEMsRUFBRXNGLGdCQUNOczNCLEVBQUVxQyxZQUFjckMsRUFBRTJFLFFBQVN2aEMsSUFBTyxPQU1yQ2EsRUFBTzJyQixTQUFXLFNBQVVvUyxFQUFLMzdCLEVBQVNsRCxHQUN6QyxPQUFPYyxFQUFPNitCLEtBQU0sQ0FDbkJkLElBQUtBLEVBR0xwL0IsS0FBTSxNQUNOcStCLFNBQVUsU0FDVnR5QixPQUFPLEVBQ1B5ekIsT0FBTyxFQUNQeGhDLFFBQVEsRUFLUjZoQyxXQUFZLENBQ1gsY0FBZSxjQUVoQmtELFdBQVksU0FBVVQsR0FDckJqaEMsRUFBTzBELFdBQVl1OUIsRUFBVTcrQixFQUFTbEQsT0FNekNjLEVBQU9HLEdBQUdnQyxPQUFRLENBQ2pCNC9CLFFBQVMsU0FBVXJXLEdBQ2xCLElBQUlqSSxFQXlCSixPQXZCS3ptQixLQUFNLEtBQ0xxQixFQUFZcXRCLEtBQ2hCQSxFQUFPQSxFQUFLanVCLEtBQU1ULEtBQU0sS0FJekJ5bUIsRUFBT3pqQixFQUFRMHJCLEVBQU0xdUIsS0FBTSxHQUFJME0sZUFBZ0JsSSxHQUFJLEdBQUlnQixPQUFPLEdBRXpEeEYsS0FBTSxHQUFJNEMsWUFDZDZqQixFQUFLNkksYUFBY3R2QixLQUFNLElBRzFCeW1CLEVBQUtyaUIsS0FBSyxXQUdULElBRkEsSUFBSUMsRUFBT3JFLEtBRUhxRSxFQUFLMmdDLG1CQUNaM2dDLEVBQU9BLEVBQUsyZ0Msa0JBR2IsT0FBTzNnQyxLQUNKK3FCLE9BQVFwdkIsT0FHTkEsTUFHUmlsQyxVQUFXLFNBQVV2VyxHQUNwQixPQUFLcnRCLEVBQVlxdEIsR0FDVDF1QixLQUFLa0UsTUFBTSxTQUFVL0IsR0FDM0JhLEVBQVFoRCxNQUFPaWxDLFVBQVd2VyxFQUFLanVCLEtBQU1ULEtBQU1tQyxPQUl0Q25DLEtBQUtrRSxNQUFNLFdBQ2pCLElBQUl4RSxFQUFPc0QsRUFBUWhELE1BQ2xCNFosRUFBV2xhLEVBQUtrYSxXQUVaQSxFQUFTdFcsT0FDYnNXLEVBQVNtckIsUUFBU3JXLEdBR2xCaHZCLEVBQUswdkIsT0FBUVYsT0FLaEJqSSxLQUFNLFNBQVVpSSxHQUNmLElBQUl3VyxFQUFpQjdqQyxFQUFZcXRCLEdBRWpDLE9BQU8xdUIsS0FBS2tFLE1BQU0sU0FBVS9CLEdBQzNCYSxFQUFRaEQsTUFBTytrQyxRQUFTRyxFQUFpQnhXLEVBQUtqdUIsS0FBTVQsS0FBTW1DLEdBQU11c0IsT0FJbEV5VyxPQUFRLFNBQVVsaUMsR0FJakIsT0FIQWpELEtBQUt1VCxPQUFRdFEsR0FBV29XLElBQUssUUFBU25WLE1BQU0sV0FDM0NsQixFQUFRaEQsTUFBT3l2QixZQUFhenZCLEtBQUtnTSxlQUUzQmhNLFFBS1RnRCxFQUFPcU8sS0FBS3hILFFBQVEydEIsT0FBUyxTQUFVbnpCLEdBQ3RDLE9BQVFyQixFQUFPcU8sS0FBS3hILFFBQVF1N0IsUUFBUy9nQyxJQUV0Q3JCLEVBQU9xTyxLQUFLeEgsUUFBUXU3QixRQUFVLFNBQVUvZ0MsR0FDdkMsU0FBV0EsRUFBSzB0QixhQUFlMXRCLEVBQUs2dUIsY0FBZ0I3dUIsRUFBSzJ3QixpQkFBaUIxeEIsU0FNM0VOLEVBQU8yOUIsYUFBYTBFLElBQU0sV0FDekIsSUFDQyxPQUFPLElBQUl0bEMsRUFBT3VsQyxlQUNqQixNQUFRcjVCLE1BR1gsSUFBSXM1QixHQUFtQixDQUdyQixFQUFHLElBSUgsS0FBTSxLQUVQQyxHQUFleGlDLEVBQU8yOUIsYUFBYTBFLE1BRXBDamtDLEVBQVFxa0MsT0FBU0QsSUFBa0Isb0JBQXFCQSxHQUN4RHBrQyxFQUFReWdDLEtBQU8yRCxLQUFpQkEsR0FFaEN4aUMsRUFBTzQrQixlQUFlLFNBQVV4OEIsR0FDL0IsSUFBSWpCLEVBQVV1aEMsRUFHZCxHQUFLdGtDLEVBQVFxa0MsTUFBUUQsS0FBaUJwZ0MsRUFBUWsrQixZQUM3QyxNQUFPLENBQ05PLEtBQU0sU0FBVUgsRUFBUzFLLEdBQ3hCLElBQUk3MkIsRUFDSGtqQyxFQUFNamdDLEVBQVFpZ0MsTUFXZixHQVRBQSxFQUFJTSxLQUNIdmdDLEVBQVF6RCxLQUNSeUQsRUFBUTI3QixJQUNSMzdCLEVBQVErN0IsTUFDUi83QixFQUFRd2dDLFNBQ1J4Z0MsRUFBUTZQLFVBSUo3UCxFQUFReWdDLFVBQ1osSUFBTTFqQyxLQUFLaUQsRUFBUXlnQyxVQUNsQlIsRUFBS2xqQyxHQUFNaUQsRUFBUXlnQyxVQUFXMWpDLEdBbUJoQyxJQUFNQSxLQWREaUQsRUFBUTY5QixVQUFZb0MsRUFBSXJDLGtCQUM1QnFDLEVBQUlyQyxpQkFBa0I1OUIsRUFBUTY5QixVQVF6Qjc5QixFQUFRaytCLGFBQWdCSSxFQUFTLHNCQUN0Q0EsRUFBUyxvQkFBdUIsa0JBSXRCQSxFQUNWMkIsRUFBSXRDLGlCQUFrQjVnQyxFQUFHdWhDLEVBQVN2aEMsSUFJbkNnQyxFQUFXLFNBQVV4QyxHQUNwQixPQUFPLFdBQ0R3QyxJQUNKQSxFQUFXdWhDLEVBQWdCTCxFQUFJUyxPQUM5QlQsRUFBSVUsUUFBVVYsRUFBSVcsUUFBVVgsRUFBSVksVUFDL0JaLEVBQUlhLG1CQUFxQixLQUViLFVBQVR2a0MsRUFDSjBqQyxFQUFJbEMsUUFDZ0IsVUFBVHhoQyxFQUtnQixpQkFBZjBqQyxFQUFJbkMsT0FDZmxLLEVBQVUsRUFBRyxTQUViQSxFQUdDcU0sRUFBSW5DLE9BQ0ptQyxFQUFJakMsWUFJTnBLLEVBQ0N1TSxHQUFrQkYsRUFBSW5DLFNBQVltQyxFQUFJbkMsT0FDdENtQyxFQUFJakMsV0FLK0IsVUFBakNpQyxFQUFJYyxjQUFnQixTQUNNLGlCQUFyQmQsRUFBSWUsYUFDVixDQUFFQyxPQUFRaEIsRUFBSXBCLFVBQ2QsQ0FBRTFoQyxLQUFNOGlDLEVBQUllLGNBQ2JmLEVBQUl2Qyw0QkFRVHVDLEVBQUlTLE9BQVMzaEMsSUFDYnVoQyxFQUFnQkwsRUFBSVUsUUFBVVYsRUFBSVksVUFBWTloQyxFQUFVLGNBS25DMkIsSUFBaEJ1L0IsRUFBSVcsUUFDUlgsRUFBSVcsUUFBVU4sRUFFZEwsRUFBSWEsbUJBQXFCLFdBR0EsSUFBbkJiLEVBQUlwbEIsWUFNUmxnQixFQUFPNmUsWUFBWSxXQUNiemEsR0FDSnVoQyxRQVFMdmhDLEVBQVdBLEVBQVUsU0FFckIsSUFHQ2toQyxFQUFJeEIsS0FBTXorQixFQUFRbytCLFlBQWNwK0IsRUFBUW9jLE1BQVEsTUFDL0MsTUFBUXZWLEdBR1QsR0FBSzlILEVBQ0osTUFBTThILElBS1RrM0IsTUFBTyxXQUNEaC9CLEdBQ0pBLFNBV0xuQixFQUFPMitCLGVBQWUsU0FBVTVDLEdBQzFCQSxFQUFFdUUsY0FDTnZFLEVBQUVubEIsU0FBU3ZYLFFBQVMsTUFLdEJXLEVBQU95K0IsVUFBVyxDQUNqQkosUUFBUyxDQUNSaC9CLE9BQVEsNkZBR1R1WCxTQUFVLENBQ1R2WCxPQUFRLDJCQUVUbS9CLFdBQVksQ0FDWCxjQUFlLFNBQVVqL0IsR0FFeEIsT0FEQVMsRUFBTzBELFdBQVluRSxHQUNaQSxNQU1WUyxFQUFPMitCLGNBQWUsVUFBVSxTQUFVNUMsUUFDeEJqNUIsSUFBWmk1QixFQUFFcnhCLFFBQ05xeEIsRUFBRXJ4QixPQUFRLEdBRU5xeEIsRUFBRXVFLGNBQ052RSxFQUFFcDlCLEtBQU8sVUFLWHFCLEVBQU80K0IsY0FBZSxVQUFVLFNBQVU3QyxHQUl4QyxJQUFJMThCLEVBQVE4QixFQURiLEdBQUs0NkIsRUFBRXVFLGFBQWV2RSxFQUFFdUgsWUFFdkIsTUFBTyxDQUNOekMsS0FBTSxTQUFVL25CLEVBQUdrZCxHQUNsQjMyQixFQUFTVyxFQUFRLFlBQ2Z1TyxLQUFNd3RCLEVBQUV1SCxhQUFlLElBQ3ZCN2tCLEtBQU0sQ0FBRThrQixRQUFTeEgsRUFBRXlILGNBQWU1a0MsSUFBS205QixFQUFFZ0MsTUFDekMxWixHQUFJLGFBQWNsakIsRUFBVyxTQUFVc2lDLEdBQ3ZDcGtDLEVBQU9xYSxTQUNQdlksRUFBVyxLQUNOc2lDLEdBQ0p6TixFQUF1QixVQUFieU4sRUFBSTlrQyxLQUFtQixJQUFNLElBQUs4a0MsRUFBSTlrQyxRQUtuRC9CLEVBQVM4QyxLQUFLQyxZQUFhTixFQUFRLEtBRXBDOGdDLE1BQU8sV0FDRGgvQixHQUNKQSxTQVVMLElBcUdLb2dCLEdBckdEbWlCLEdBQWUsR0FDbEJDLEdBQVMsb0JBR1YzakMsRUFBT3krQixVQUFXLENBQ2pCbUYsTUFBTyxXQUNQQyxjQUFlLFdBQ2QsSUFBSTFpQyxFQUFXdWlDLEdBQWFwOUIsT0FBV3RHLEVBQU8rQyxRQUFVLElBQVFsRSxHQUFNdUYsT0FFdEUsT0FEQXBILEtBQU1tRSxJQUFhLEVBQ1pBLEtBS1RuQixFQUFPMitCLGNBQWUsY0FBYyxTQUFVNUMsRUFBRytILEVBQWtCM0csR0FFbEUsSUFBSTRHLEVBQWNDLEVBQWFDLEVBQzlCQyxHQUF1QixJQUFabkksRUFBRTZILFFBQXFCRCxHQUFPMTVCLEtBQU04eEIsRUFBRWdDLEtBQ2hELE1BQ2tCLGlCQUFYaEMsRUFBRXZkLE1BRTZDLEtBRG5EdWQsRUFBRXFDLGFBQWUsSUFDakJ2Z0MsUUFBUyxzQ0FDWDhsQyxHQUFPMTVCLEtBQU04eEIsRUFBRXZkLE9BQVUsUUFJNUIsR0FBSzBsQixHQUFpQyxVQUFyQm5JLEVBQUVrQixVQUFXLEdBOEQ3QixPQTNEQThHLEVBQWVoSSxFQUFFOEgsY0FBZ0J4bEMsRUFBWTA5QixFQUFFOEgsZUFDOUM5SCxFQUFFOEgsZ0JBQ0Y5SCxFQUFFOEgsY0FHRUssRUFDSm5JLEVBQUdtSSxHQUFhbkksRUFBR21JLEdBQVdoaEMsUUFBU3lnQyxHQUFRLEtBQU9JLElBQy9CLElBQVpoSSxFQUFFNkgsUUFDYjdILEVBQUVnQyxNQUFTNUMsR0FBT2x4QixLQUFNOHhCLEVBQUVnQyxLQUFRLElBQU0sS0FBUWhDLEVBQUU2SCxNQUFRLElBQU1HLEdBSWpFaEksRUFBRXlDLFdBQVksZUFBa0IsV0FJL0IsT0FITXlGLEdBQ0xqa0MsRUFBT29ELE1BQU8yZ0MsRUFBZSxtQkFFdkJFLEVBQW1CLElBSTNCbEksRUFBRWtCLFVBQVcsR0FBTSxPQUduQitHLEVBQWNqbkMsRUFBUWduQyxHQUN0QmhuQyxFQUFRZ25DLEdBQWlCLFdBQ3hCRSxFQUFvQjNpQyxXQUlyQjY3QixFQUFNaGpCLFFBQVEsZ0JBR1FyWCxJQUFoQmtoQyxFQUNKaGtDLEVBQVFqRCxHQUFTdThCLFdBQVl5SyxHQUk3QmhuQyxFQUFRZ25DLEdBQWlCQyxFQUlyQmpJLEVBQUdnSSxLQUdQaEksRUFBRThILGNBQWdCQyxFQUFpQkQsY0FHbkNILEdBQWE5bEMsS0FBTW1tQyxJQUlmRSxHQUFxQjVsQyxFQUFZMmxDLElBQ3JDQSxFQUFhQyxFQUFtQixJQUdqQ0EsRUFBb0JELE9BQWNsaEMsS0FJNUIsWUFZVDFFLEVBQVErbEMscUJBQ0g1aUIsR0FBTzNrQixFQUFTd25DLGVBQWVELG1CQUFvQixJQUFLNWlCLE1BQ3ZEbFUsVUFBWSw2QkFDaUIsSUFBM0JrVSxHQUFLdlksV0FBVzFJLFFBUXhCTixFQUFPdVcsVUFBWSxTQUFVaUksRUFBTXRlLEVBQVNta0MsR0FDM0MsTUFBcUIsaUJBQVQ3bEIsRUFDSixJQUVnQixrQkFBWnRlLElBQ1hta0MsRUFBY25rQyxFQUNkQSxHQUFVLEdBS0xBLElBSUE5QixFQUFRK2xDLHFCQU1aNXhCLEdBTEFyUyxFQUFVdEQsRUFBU3duQyxlQUFlRCxtQkFBb0IsS0FLdkM3a0MsY0FBZSxTQUN6QmtTLEtBQU81VSxFQUFTeVUsU0FBU0csS0FDOUJ0UixFQUFRUixLQUFLQyxZQUFhNFMsSUFFMUJyUyxFQUFVdEQsR0FLWjBtQixHQUFXK2dCLEdBQWUsSUFEMUJDLEVBQVNwdUIsRUFBV3ZNLEtBQU02VSxJQUtsQixDQUFFdGUsRUFBUVosY0FBZWdsQyxFQUFRLE1BR3pDQSxFQUFTamhCLEdBQWUsQ0FBRTdFLEdBQVF0ZSxFQUFTb2pCLEdBRXRDQSxHQUFXQSxFQUFRaGpCLFFBQ3ZCTixFQUFRc2pCLEdBQVU1SixTQUdaMVosRUFBT2dCLE1BQU8sR0FBSXNqQyxFQUFPdDdCLGNBbENoQyxJQUFJdUosRUFBTSt4QixFQUFRaGhCLEdBeUNuQnRqQixFQUFPRyxHQUFHd25CLEtBQU8sU0FBVW9XLEVBQUt3RyxFQUFRcGpDLEdBQ3ZDLElBQUlsQixFQUFVdEIsRUFBTXNpQyxFQUNuQnZrQyxFQUFPTSxLQUNQMG5CLEVBQU1xWixFQUFJbGdDLFFBQVMsS0FzRHBCLE9BcERLNm1CLEdBQU8sSUFDWHprQixFQUFXazVCLEdBQWtCNEUsRUFBSXpnQyxNQUFPb25CLElBQ3hDcVosRUFBTUEsRUFBSXpnQyxNQUFPLEVBQUdvbkIsSUFJaEJybUIsRUFBWWttQyxJQUdoQnBqQyxFQUFXb2pDLEVBQ1hBLE9BQVN6aEMsR0FHRXloQyxHQUE0QixpQkFBWEEsSUFDNUI1bEMsRUFBTyxRQUlIakMsRUFBSzRELE9BQVMsR0FDbEJOLEVBQU82K0IsS0FBTSxDQUNaZCxJQUFLQSxFQUtMcC9CLEtBQU1BLEdBQVEsTUFDZHErQixTQUFVLE9BQ1Z4ZSxLQUFNK2xCLElBQ0gxK0IsTUFBTSxTQUFVdTlCLEdBR25CbkMsRUFBVzMvQixVQUVYNUUsRUFBS2d2QixLQUFNenJCLEVBSVZELEVBQVEsU0FBVW9zQixPQUFRcHNCLEVBQU91VyxVQUFXNnNCLElBQWlCcDJCLEtBQU0vTSxHQUduRW1qQyxNQUtFanBCLE9BQVFoWixHQUFZLFNBQVVnOEIsRUFBTytDLEdBQ3hDeGpDLEVBQUt3RSxNQUFNLFdBQ1ZDLEVBQVN4RCxNQUFPWCxLQUFNaWtDLEdBQVksQ0FBRTlELEVBQU1pRyxhQUFjbEQsRUFBUS9DLFNBSzVEbmdDLE1BTVJnRCxFQUFPcU8sS0FBS3hILFFBQVEyOUIsU0FBVyxTQUFVbmpDLEdBQ3hDLE9BQU9yQixFQUFPMkIsS0FBTTNCLEVBQU93M0IsUUFBUSxTQUFVcjNCLEdBQzVDLE9BQU9rQixJQUFTbEIsRUFBR2tCLFFBQ2hCZixRQU1MTixFQUFPeWtDLE9BQVMsQ0FDZkMsVUFBVyxTQUFVcmpDLEVBQU1lLEVBQVNqRCxHQUNuQyxJQUFJd2xDLEVBQWFDLEVBQVNDLEVBQVdDLEVBQVFDLEVBQVdDLEVBQ3ZEblcsRUFBVzd1QixFQUFPeWdCLElBQUtwZixFQUFNLFlBQzdCNGpDLEVBQVVqbEMsRUFBUXFCLEdBQ2xCMm1CLEVBQVEsR0FHUyxXQUFiNkcsSUFDSnh0QixFQUFLa2YsTUFBTXNPLFNBQVcsWUFHdkJrVyxFQUFZRSxFQUFRUixTQUNwQkksRUFBWTdrQyxFQUFPeWdCLElBQUtwZixFQUFNLE9BQzlCMmpDLEVBQWFobEMsRUFBT3lnQixJQUFLcGYsRUFBTSxTQUNJLGFBQWJ3dEIsR0FBd0MsVUFBYkEsS0FDOUNnVyxFQUFZRyxHQUFhbm5DLFFBQVMsU0FBWSxHQU1oRGluQyxHQURBSCxFQUFjTSxFQUFRcFcsWUFDRHRpQixJQUNyQnE0QixFQUFVRCxFQUFZaFMsT0FHdEJtUyxFQUFTNVYsV0FBWTJWLElBQWUsRUFDcENELEVBQVUxVixXQUFZOFYsSUFBZ0IsR0FHbEMzbUMsRUFBWStELEtBR2hCQSxFQUFVQSxFQUFRM0UsS0FBTTRELEVBQU1sQyxFQUFHYSxFQUFPbUMsT0FBUSxHQUFJNGlDLEtBR2pDLE1BQWYzaUMsRUFBUW1LLE1BQ1p5YixFQUFNemIsSUFBUW5LLEVBQVFtSyxJQUFNdzRCLEVBQVV4NEIsSUFBUXU0QixHQUUxQixNQUFoQjFpQyxFQUFRdXdCLE9BQ1ozSyxFQUFNMkssS0FBU3Z3QixFQUFRdXdCLEtBQU9vUyxFQUFVcFMsS0FBU2lTLEdBRzdDLFVBQVd4aUMsRUFDZkEsRUFBUThpQyxNQUFNem5DLEtBQU00RCxFQUFNMm1CLEdBRzFCaWQsRUFBUXhrQixJQUFLdUgsS0FLaEJob0IsRUFBT0csR0FBR2dDLE9BQVEsQ0FHakJzaUMsT0FBUSxTQUFVcmlDLEdBR2pCLEdBQUtkLFVBQVVoQixPQUNkLFlBQW1Cd0MsSUFBWlYsRUFDTnBGLEtBQ0FBLEtBQUtrRSxNQUFNLFNBQVUvQixHQUNwQmEsRUFBT3lrQyxPQUFPQyxVQUFXMW5DLEtBQU1vRixFQUFTakQsTUFJM0MsSUFBSWdtQyxFQUFNQyxFQUNUL2pDLEVBQU9yRSxLQUFNLEdBRWQsT0FBTXFFLEVBUUFBLEVBQUsyd0IsaUJBQWlCMXhCLFFBSzVCNmtDLEVBQU85akMsRUFBS294Qix3QkFDWjJTLEVBQU0vakMsRUFBS3FJLGNBQWM0QyxZQUNsQixDQUNOQyxJQUFLNDRCLEVBQUs1NEIsSUFBTTY0QixFQUFJQyxZQUNwQjFTLEtBQU13UyxFQUFLeFMsS0FBT3lTLEVBQUlFLGNBUmYsQ0FBRS80QixJQUFLLEVBQUdvbUIsS0FBTSxRQVR4QixHQXVCRDlELFNBQVUsV0FDVCxHQUFNN3hCLEtBQU0sR0FBWixDQUlBLElBQUl1b0MsRUFBY2QsRUFBUXZsQyxFQUN6Qm1DLEVBQU9yRSxLQUFNLEdBQ2J3b0MsRUFBZSxDQUFFajVCLElBQUssRUFBR29tQixLQUFNLEdBR2hDLEdBQXdDLFVBQW5DM3lCLEVBQU95Z0IsSUFBS3BmLEVBQU0sWUFHdEJvakMsRUFBU3BqQyxFQUFLb3hCLDRCQUVSLENBT04sSUFOQWdTLEVBQVN6bkMsS0FBS3luQyxTQUlkdmxDLEVBQU1tQyxFQUFLcUksY0FDWDY3QixFQUFlbGtDLEVBQUtra0MsY0FBZ0JybUMsRUFBSWlOLGdCQUNoQ281QixJQUNMQSxJQUFpQnJtQyxFQUFJcWlCLE1BQVFna0IsSUFBaUJybUMsRUFBSWlOLGtCQUNULFdBQTNDbk0sRUFBT3lnQixJQUFLOGtCLEVBQWMsYUFFMUJBLEVBQWVBLEVBQWEzbEMsV0FFeEIybEMsR0FBZ0JBLElBQWlCbGtDLEdBQWtDLElBQTFCa2tDLEVBQWFobkMsWUFHMURpbkMsRUFBZXhsQyxFQUFRdWxDLEdBQWVkLFVBQ3pCbDRCLEtBQU92TSxFQUFPeWdCLElBQUs4a0IsRUFBYyxrQkFBa0IsR0FDaEVDLEVBQWE3UyxNQUFRM3lCLEVBQU95Z0IsSUFBSzhrQixFQUFjLG1CQUFtQixJQUtwRSxNQUFPLENBQ05oNUIsSUFBS2s0QixFQUFPbDRCLElBQU1pNUIsRUFBYWo1QixJQUFNdk0sRUFBT3lnQixJQUFLcGYsRUFBTSxhQUFhLEdBQ3BFc3hCLEtBQU04UixFQUFPOVIsS0FBTzZTLEVBQWE3UyxLQUFPM3lCLEVBQU95Z0IsSUFBS3BmLEVBQU0sY0FBYyxNQWMxRWtrQyxhQUFjLFdBQ2IsT0FBT3ZvQyxLQUFLb0UsS0FBSyxXQUdoQixJQUZBLElBQUlta0MsRUFBZXZvQyxLQUFLdW9DLGFBRWhCQSxHQUEyRCxXQUEzQ3ZsQyxFQUFPeWdCLElBQUs4a0IsRUFBYyxhQUNqREEsRUFBZUEsRUFBYUEsYUFHN0IsT0FBT0EsR0FBZ0JwNUIsU0FNMUJuTSxFQUFPa0IsS0FBTSxDQUFFMnlCLFdBQVksY0FBZUQsVUFBVyxnQkFBaUIsU0FBVXBiLEVBQVFpRyxHQUN2RixJQUFJbFMsRUFBTSxnQkFBa0JrUyxFQUU1QnplLEVBQU9HLEdBQUlxWSxHQUFXLFNBQVVwWixHQUMvQixPQUFPK2QsRUFBUW5nQixNQUFNLFNBQVVxRSxFQUFNbVgsRUFBUXBaLEdBRzVDLElBQUlnbUMsRUFPSixHQU5LM21DLEVBQVU0QyxHQUNkK2pDLEVBQU0vakMsRUFDdUIsSUFBbEJBLEVBQUs5QyxXQUNoQjZtQyxFQUFNL2pDLEVBQUtpTCxrQkFHQ3hKLElBQVIxRCxFQUNKLE9BQU9nbUMsRUFBTUEsRUFBSzNtQixHQUFTcGQsRUFBTW1YLEdBRzdCNHNCLEVBQ0pBLEVBQUlLLFNBQ0ZsNUIsRUFBWTY0QixFQUFJRSxZQUFWbG1DLEVBQ1BtTixFQUFNbk4sRUFBTWdtQyxFQUFJQyxhQUlqQmhrQyxFQUFNbVgsR0FBV3BaLElBRWhCb1osRUFBUXBaLEVBQUtrQyxVQUFVaEIsWUFVNUJOLEVBQU9rQixLQUFNLENBQUUsTUFBTyxTQUFVLFNBQVVzRCxFQUFJaWEsR0FDN0N6ZSxFQUFPbXlCLFNBQVUxVCxHQUFTc1AsR0FBYzN2QixFQUFRbXhCLGVBQy9DLFNBQVVsdUIsRUFBTW9zQixHQUNmLEdBQUtBLEVBSUosT0FIQUEsRUFBV0QsR0FBUW5zQixFQUFNb2QsR0FHbEJ3TyxHQUFVaGpCLEtBQU13akIsR0FDdEJ6dEIsRUFBUXFCLEdBQU93dEIsV0FBWXBRLEdBQVMsS0FDcENnUCxRQVFMenRCLEVBQU9rQixLQUFNLENBQUV3a0MsT0FBUSxTQUFVQyxNQUFPLFVBQVcsU0FBVXRqQyxFQUFNMUQsR0FDbEVxQixFQUFPa0IsS0FBTSxDQUNaMnhCLFFBQVMsUUFBVXh3QixFQUNuQndWLFFBQVNsWixFQUNULEdBQUksUUFBVTBELElBQ1osU0FBVXVqQyxFQUFjQyxHQUcxQjdsQyxFQUFPRyxHQUFJMGxDLEdBQWEsU0FBVWpULEVBQVF6dUIsR0FDekMsSUFBSWlaLEVBQVk5YixVQUFVaEIsU0FBWXNsQyxHQUFrQyxrQkFBWGhULEdBQzVEbEIsRUFBUWtVLEtBQTZCLElBQVhoVCxJQUE2QixJQUFWenVCLEVBQWlCLFNBQVcsVUFFMUUsT0FBT2daLEVBQVFuZ0IsTUFBTSxTQUFVcUUsRUFBTTFDLEVBQU13RixHQUMxQyxJQUFJakYsRUFFSixPQUFLVCxFQUFVNEMsR0FHeUIsSUFBaEN3a0MsRUFBU2hvQyxRQUFTLFNBQ3hCd0QsRUFBTSxRQUFVZ0IsR0FDaEJoQixFQUFLekUsU0FBU3VQLGdCQUFpQixTQUFXOUosR0FJckIsSUFBbEJoQixFQUFLOUMsVUFDVFcsRUFBTW1DLEVBQUs4SyxnQkFJSm5KLEtBQUttdUIsSUFDWDl2QixFQUFLa2dCLEtBQU0sU0FBV2xmLEdBQVFuRCxFQUFLLFNBQVdtRCxHQUM5Q2hCLEVBQUtrZ0IsS0FBTSxTQUFXbGYsR0FBUW5ELEVBQUssU0FBV21ELEdBQzlDbkQsRUFBSyxTQUFXbUQsVUFJRFMsSUFBVnFCLEVBR05uRSxFQUFPeWdCLElBQUtwZixFQUFNMUMsRUFBTSt5QixHQUd4QjF4QixFQUFPdWdCLE1BQU9sZixFQUFNMUMsRUFBTXdGLEVBQU91dEIsS0FDaEMveUIsRUFBTXllLEVBQVl3VixPQUFTOXZCLEVBQVdzYSxVQU01Q3BkLEVBQU9rQixLQUFNLENBQ1osWUFDQSxXQUNBLGVBQ0EsWUFDQSxjQUNBLGFBQ0UsU0FBVXNELEVBQUk3RixHQUNoQnFCLEVBQU9HLEdBQUl4QixHQUFTLFNBQVV3QixHQUM3QixPQUFPbkQsS0FBS3FuQixHQUFJMWxCLEVBQU13QixPQU94QkgsRUFBT0csR0FBR2dDLE9BQVEsQ0FFakI0ekIsS0FBTSxTQUFVelIsRUFBTzlGLEVBQU1yZSxHQUM1QixPQUFPbkQsS0FBS3FuQixHQUFJQyxFQUFPLEtBQU05RixFQUFNcmUsSUFFcEMybEMsT0FBUSxTQUFVeGhCLEVBQU9ua0IsR0FDeEIsT0FBT25ELEtBQUswbkIsSUFBS0osRUFBTyxLQUFNbmtCLElBRy9CNGxDLFNBQVUsU0FBVTlsQyxFQUFVcWtCLEVBQU85RixFQUFNcmUsR0FDMUMsT0FBT25ELEtBQUtxbkIsR0FBSUMsRUFBT3JrQixFQUFVdWUsRUFBTXJlLElBRXhDNmxDLFdBQVksU0FBVS9sQyxFQUFVcWtCLEVBQU9ua0IsR0FHdEMsT0FBNEIsSUFBckJtQixVQUFVaEIsT0FDaEJ0RCxLQUFLMG5CLElBQUt6a0IsRUFBVSxNQUNwQmpELEtBQUswbkIsSUFBS0osRUFBT3JrQixHQUFZLEtBQU1FLElBR3JDOGxDLE1BQU8sU0FBVUMsRUFBUUMsR0FDeEIsT0FBT25wQyxLQUFLb3RCLFdBQVk4YixHQUFTN2IsV0FBWThiLEdBQVNELE1BSXhEbG1DLEVBQU9rQixLQUNOLHdMQUU0RHFELE1BQU8sTUFDbkUsU0FBVUMsRUFBSW5DLEdBR2JyQyxFQUFPRyxHQUFJa0MsR0FBUyxTQUFVbWMsRUFBTXJlLEdBQ25DLE9BQU9tQixVQUFVaEIsT0FBUyxFQUN6QnRELEtBQUtxbkIsR0FBSWhpQixFQUFNLEtBQU1tYyxFQUFNcmUsR0FDM0JuRCxLQUFLbW9CLFFBQVM5aUIsT0FVbEIsSUFBSTJFLEdBQVEscUNBTVpoSCxFQUFPb21DLE1BQVEsU0FBVWptQyxFQUFJRCxHQUM1QixJQUFJaU4sRUFBS3lELEVBQU13MUIsRUFVZixHQVJ3QixpQkFBWmxtQyxJQUNYaU4sRUFBTWhOLEVBQUlELEdBQ1ZBLEVBQVVDLEVBQ1ZBLEVBQUtnTixHQUtBOU8sRUFBWThCLEdBYWxCLE9BUkF5USxFQUFPdFQsRUFBTUcsS0FBTTZELFVBQVcsR0FDOUI4a0MsRUFBUSxXQUNQLE9BQU9qbUMsRUFBR3hDLE1BQU91QyxHQUFXbEQsS0FBTTRULEVBQUtsVCxPQUFRSixFQUFNRyxLQUFNNkQsY0FJNUQ4a0MsRUFBTWhpQyxLQUFPakUsRUFBR2lFLEtBQU9qRSxFQUFHaUUsTUFBUXBFLEVBQU9vRSxPQUVsQ2dpQyxHQUdScG1DLEVBQU9xbUMsVUFBWSxTQUFVQyxHQUN2QkEsRUFDSnRtQyxFQUFPK2MsWUFFUC9jLEVBQU93VyxPQUFPLElBR2hCeFcsRUFBTzZDLFFBQVVELE1BQU1DLFFBQ3ZCN0MsRUFBT3VtQyxVQUFZdm5CLEtBQUtDLE1BQ3hCamYsRUFBTzZJLFNBQVdBLEVBQ2xCN0ksRUFBTzNCLFdBQWFBLEVBQ3BCMkIsRUFBT3ZCLFNBQVdBLEVBQ2xCdUIsRUFBTytkLFVBQVlBLEVBQ25CL2QsRUFBT3JCLEtBQU9tQixFQUVkRSxFQUFPcW9CLElBQU0zaUIsS0FBSzJpQixJQUVsQnJvQixFQUFPd21DLFVBQVksU0FBVWxvQyxHQUs1QixJQUFJSyxFQUFPcUIsRUFBT3JCLEtBQU1MLEdBQ3hCLE9BQWtCLFdBQVRLLEdBQThCLFdBQVRBLEtBSzVCOG5DLE1BQU9ub0MsRUFBTTR3QixXQUFZNXdCLEtBRzVCMEIsRUFBTzBtQyxLQUFPLFNBQVVubkMsR0FDdkIsT0FBZSxNQUFSQSxFQUNOLElBQ0VBLEVBQU8sSUFBSzJELFFBQVM4RCxHQUFPLFVBcUI5QixLQUZxQixFQUFGLFdBQ25CLE9BQU9oSCxHQUNQLFFBRmlCLE9BRWpCLGFBTUYsSUFHQzJtQyxHQUFVNXBDLEVBQU9pRCxPQUdqQjRtQyxHQUFLN3BDLEVBQU84cEMsRUF3QmIsT0F0QkE3bUMsRUFBTzhtQyxXQUFhLFNBQVVwa0MsR0FTN0IsT0FSSzNGLEVBQU84cEMsSUFBTTdtQyxJQUNqQmpELEVBQU84cEMsRUFBSUQsSUFHUGxrQyxHQUFRM0YsRUFBT2lELFNBQVdBLElBQzlCakQsRUFBT2lELE9BQVMybUMsSUFHVjNtQyxRQU1pQixJQUFiL0MsSUFDWEYsRUFBT2lELE9BQVNqRCxFQUFPOHBDLEVBQUk3bUMsR0FNckJBLGVDbG5WTmtJLE9BQU8zSCxVQUFVd21DLFlBQWMsV0FDNUIsT0FBTy9wQyxLQUFLa0csUUFBUSx1QkFBdUIsU0FBUzhqQyxFQUFNN3ZCLEdBQ3RELE9BQWlCLElBQVZBLEVBQWM2dkIsRUFBS3ZpQyxjQUFnQnVpQyxFQUFLbHBCLGlCQUM5QzVhLFFBQVEsT0FBUSxLQVF6QmdGLE9BQU8zSCxVQUFVMG1DLGFBQWUsV0FDNUIsT0FBT2pxQyxLQUFLa0csUUFBUSx1QkFBdUIsU0FBUzhqQyxFQUFNN3ZCLEdBQ3RELE9BQWlCLElBQVZBLEVBQWM2dkIsRUFBS2xwQixjQUFnQmtwQixFQUFLdmlDLGlCQUM5Q3ZCLFFBQVEsT0FBUSxLQUd6QmdGLE9BQU8zSCxVQUFVMm1DLGlCQUFtQixXQUNoQyxPQUFPbHFDLEtBQUtrRyxRQUFRLHVCQUF1QixTQUFTOGpDLEVBQU03dkIsR0FDdEQsT0FBaUIsSUFBVkEsRUFBYzZ2QixFQUFLbHBCLGNBQWdCa3BCLEtBQ3pDOWpDLFFBQVEsT0FBUSxLQUdwQmdGLE9BQU8zSCxVQUFVNG1DLFNBQ3BCai9CLE9BQU8zSCxVQUFVNG1DLE9BQVMsV0FDeEIsSUFBSXYyQixFQUFPdFAsVUFDWCxPQUFPdEUsS0FBS2tHLFFBQVEsWUFBWSxTQUFTb0csRUFBTzg5QixHQUM5QyxZQUE4QixJQUFoQngyQixFQUFLdzJCLEdBQ2Z4MkIsRUFBS3cyQixHQUNMOTlCLFNDekNOKzlCLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ6a0MsSUFBakIwa0MsRUFDSCxPQUFPQSxFQUFhbHJDLFFBR3JCLElBQUlDLEVBQVM4cUMsRUFBeUJFLEdBQVksQ0FHakRqckMsUUFBUyxJQU9WLE9BSEFtckMsRUFBb0JGLEdBQVU5cEMsS0FBS2xCLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNnckMsR0FHcEUvcUMsRUFBT0QsUUNwQmZnckMsRUFBb0JJLEVBQUksQ0FBQ3ByQyxFQUFTcXJDLEtBQ2pDLElBQUksSUFBSWg5QixLQUFPZzlCLEVBQ1hMLEVBQW9CTSxFQUFFRCxFQUFZaDlCLEtBQVMyOEIsRUFBb0JNLEVBQUV0ckMsRUFBU3FPLElBQzVFdk4sT0FBT2loQixlQUFlL2hCLEVBQVNxTyxFQUFLLENBQUU2YyxZQUFZLEVBQU03bUIsSUFBS2duQyxFQUFXaDlCLE1DSjNFMjhCLEVBQW9CTSxFQUFJLENBQUN0cEMsRUFBS21nQixJQUFVcmhCLE9BQU9tRCxVQUFVdEMsZUFBZVIsS0FBS2EsRUFBS21nQixHQ0NsRjZvQixFQUFvQk8sRUFBS3ZyQyxJQUNILG9CQUFYK0gsUUFBMEJBLE9BQU95akMsYUFDMUMxcUMsT0FBT2loQixlQUFlL2hCLEVBQVMrSCxPQUFPeWpDLFlBQWEsQ0FBRTNqQyxNQUFPLFdBRTdEL0csT0FBT2loQixlQUFlL2hCLEVBQVMsYUFBYyxDQUFFNkgsT0FBTyx1ckRDTGhELElBQUksRUFBTSxNQUNONGpDLEVBQVMsU0FDVHJaLEVBQVEsUUFDUmlFLEVBQU8sT0FDUHFWLEVBQU8sT0FDUEMsRUFBaUIsQ0FBQyxFQUFLRixFQUFRclosRUFBT2lFLEdBQ3RDcmlCLEVBQVEsUUFDUnRPLEVBQU0sTUFDTmttQyxFQUFrQixrQkFDbEJDLEVBQVcsV0FDWEMsRUFBUyxTQUNUQyxFQUFZLFlBQ1pDLEVBQW1DTCxFQUFlTSxRQUFPLFNBQVVDLEVBQUtDLEdBQ2pGLE9BQU9ELEVBQUk5cUMsT0FBTyxDQUFDK3FDLEVBQVksSUFBTW40QixFQUFPbTRCLEVBQVksSUFBTXptQyxNQUM3RCxJQUNRLEVBQTBCLEdBQUd0RSxPQUFPdXFDLEVBQWdCLENBQUNELElBQU9PLFFBQU8sU0FBVUMsRUFBS0MsR0FDM0YsT0FBT0QsRUFBSTlxQyxPQUFPLENBQUMrcUMsRUFBV0EsRUFBWSxJQUFNbjRCLEVBQU9tNEIsRUFBWSxJQUFNem1DLE1BQ3hFLElBRVEwbUMsRUFBYSxhQUNiQyxFQUFPLE9BQ1BDLEVBQVksWUFFWkMsRUFBYSxhQUNiQyxFQUFPLE9BQ1BDLEVBQVksWUFFWkMsRUFBYyxjQUNkQyxFQUFRLFFBQ1JDLEVBQWEsYUFDYkMsRUFBaUIsQ0FBQ1QsRUFBWUMsRUFBTUMsRUFBV0MsRUFBWUMsRUFBTUMsRUFBV0MsRUFBYUMsRUFBT0MsR0M5QjVGLFNBQVNFLEVBQVlDLEdBQ2xDLE9BQU9BLEdBQVdBLEVBQVF4Z0MsVUFBWSxJQUFJcEUsY0FBZ0IsS0NEN0MsU0FBUzZrQyxFQUFVcnFDLEdBQ2hDLEdBQVksTUFBUkEsRUFDRixPQUFPbEMsT0FHVCxHQUF3QixvQkFBcEJrQyxFQUFLbEIsV0FBa0MsQ0FDekMsSUFBSTJMLEVBQWdCekssRUFBS3lLLGNBQ3pCLE9BQU9BLEdBQWdCQSxFQUFjNEMsYUFBd0J2UCxPQUcvRCxPQUFPa0MsRUNSVCxTQUFTc3FDLEVBQVV0cUMsR0FFakIsT0FBT0EsYUFEVXFxQyxFQUFVcnFDLEdBQU11cUMsU0FDSXZxQyxhQUFnQnVxQyxRQUd2RCxTQUFTQyxFQUFjeHFDLEdBRXJCLE9BQU9BLGFBRFVxcUMsRUFBVXJxQyxHQUFNeXFDLGFBQ0l6cUMsYUFBZ0J5cUMsWUFHdkQsU0FBU0MsRUFBYTFxQyxHQUVwQixNQUEwQixvQkFBZjJxQyxhQUtKM3FDLGFBRFVxcUMsRUFBVXJxQyxHQUFNMnFDLFlBQ0kzcUMsYUFBZ0IycUMsWUN5RHZELFNBQ0V2bkMsS0FBTSxjQUNOd25DLFNBQVMsRUFDVEMsTUFBTyxRQUNQM3BDLEdBNUVGLFNBQXFCNHBDLEdBQ25CLElBQUk3dkIsRUFBUTZ2QixFQUFLN3ZCLE1BQ2pCOWMsT0FBT3FOLEtBQUt5UCxFQUFNNUwsVUFBVTA3QixTQUFRLFNBQVUzbkMsR0FDNUMsSUFBSWtlLEVBQVFyRyxFQUFNc1gsT0FBT252QixJQUFTLEdBQzlCdUUsRUFBYXNULEVBQU10VCxXQUFXdkUsSUFBUyxHQUN2Q2duQyxFQUFVbnZCLEVBQU01TCxTQUFTak0sR0FFeEJvbkMsRUFBY0osSUFBYUQsRUFBWUMsS0FPNUNqc0MsT0FBTzZzQyxPQUFPWixFQUFROW9CLE1BQU9BLEdBQzdCbmpCLE9BQU9xTixLQUFLN0QsR0FBWW9qQyxTQUFRLFNBQVUzbkMsR0FDeEMsSUFBSThCLEVBQVF5QyxFQUFXdkUsSUFFVCxJQUFWOEIsRUFDRmtsQyxFQUFRNytCLGdCQUFnQm5JLEdBRXhCZ25DLEVBQVE1cEMsYUFBYTRDLEdBQWdCLElBQVY4QixFQUFpQixHQUFLQSxXQXdEdkQrbEMsT0FsREYsU0FBZ0JDLEdBQ2QsSUFBSWp3QixFQUFRaXdCLEVBQU1qd0IsTUFDZGt3QixFQUFnQixDQUNsQmhDLE9BQVEsQ0FDTnZaLFNBQVUzVSxFQUFNOVgsUUFBUWlvQyxTQUN4QjFYLEtBQU0sSUFDTnBtQixJQUFLLElBQ0xxbUIsT0FBUSxLQUVWMFgsTUFBTyxDQUNMemIsU0FBVSxZQUVad1osVUFBVyxJQVNiLE9BUEFqckMsT0FBTzZzQyxPQUFPL3ZCLEVBQU01TCxTQUFTODVCLE9BQU83bkIsTUFBTzZwQixFQUFjaEMsUUFDekRsdUIsRUFBTXNYLE9BQVM0WSxFQUVYbHdCLEVBQU01TCxTQUFTZzhCLE9BQ2pCbHRDLE9BQU82c0MsT0FBTy92QixFQUFNNUwsU0FBU2c4QixNQUFNL3BCLE1BQU82cEIsRUFBY0UsT0FHbkQsV0FDTGx0QyxPQUFPcU4sS0FBS3lQLEVBQU01TCxVQUFVMDdCLFNBQVEsU0FBVTNuQyxHQUM1QyxJQUFJZ25DLEVBQVVudkIsRUFBTTVMLFNBQVNqTSxHQUN6QnVFLEVBQWFzVCxFQUFNdFQsV0FBV3ZFLElBQVMsR0FHdkNrZSxFQUZrQm5qQixPQUFPcU4sS0FBS3lQLEVBQU1zWCxPQUFPdnpCLGVBQWVvRSxHQUFRNlgsRUFBTXNYLE9BQU9udkIsR0FBUStuQyxFQUFjL25DLElBRTdFa21DLFFBQU8sU0FBVWhvQixFQUFPZ3FCLEdBRWxELE9BREFocUIsRUFBTWdxQixHQUFZLEdBQ1hocUIsSUFDTixJQUVFa3BCLEVBQWNKLElBQWFELEVBQVlDLEtBSTVDanNDLE9BQU82c0MsT0FBT1osRUFBUTlvQixNQUFPQSxHQUM3Qm5qQixPQUFPcU4sS0FBSzdELEdBQVlvakMsU0FBUSxTQUFVUSxHQUN4Q25CLEVBQVE3K0IsZ0JBQWdCZ2dDLFlBYTlCQyxTQUFVLENBQUMsa0JDakZFLFNBQVNDLEVBQWlCakMsR0FDdkMsT0FBT0EsRUFBVWxrQyxNQUFNLEtBQUssR0NGdkIsSUFBSSxFQUFNdkIsS0FBS211QixJQUNYLEVBQU1udUIsS0FBSzJuQyxJQUNYMWIsRUFBUWpzQixLQUFLaXNCLE1DQVQsU0FBU3dELEVBQXNCNFcsRUFBU3VCLFFBQ2hDLElBQWpCQSxJQUNGQSxHQUFlLEdBR2pCLElBQUl6RixFQUFPa0UsRUFBUTVXLHdCQUNmb1ksRUFBUyxFQUNUQyxFQUFTLEVBRWIsR0FBSXJCLEVBQWNKLElBQVl1QixFQUFjLENBQzFDLElBQUkxYSxFQUFlbVosRUFBUW5aLGFBQ3ZCbkIsRUFBY3NhLEVBQVF0YSxZQUd0QkEsRUFBYyxJQUNoQjhiLEVBQVM1YixFQUFNa1csRUFBS3pYLE9BQVNxQixHQUFlLEdBRzFDbUIsRUFBZSxJQUNqQjRhLEVBQVM3YixFQUFNa1csRUFBS3JWLFFBQVVJLEdBQWdCLEdBSWxELE1BQU8sQ0FDTHhDLE1BQU95WCxFQUFLelgsTUFBUW1kLEVBQ3BCL2EsT0FBUXFWLEVBQUtyVixPQUFTZ2IsRUFDdEJ2K0IsSUFBSzQ0QixFQUFLNTRCLElBQU11K0IsRUFDaEJwYyxNQUFPeVcsRUFBS3pXLE1BQVFtYyxFQUNwQjlDLE9BQVE1QyxFQUFLNEMsT0FBUytDLEVBQ3RCblksS0FBTXdTLEVBQUt4UyxLQUFPa1ksRUFDbEJFLEVBQUc1RixFQUFLeFMsS0FBT2tZLEVBQ2ZHLEVBQUc3RixFQUFLNTRCLElBQU11K0IsR0M5QkgsU0FBU0csRUFBYzVCLEdBQ3BDLElBQUk2QixFQUFhelksRUFBc0I0VyxHQUduQzNiLEVBQVEyYixFQUFRdGEsWUFDaEJlLEVBQVN1WixFQUFRblosYUFVckIsT0FSSWx0QixLQUFLbW9DLElBQUlELEVBQVd4ZCxNQUFRQSxJQUFVLElBQ3hDQSxFQUFRd2QsRUFBV3hkLE9BR2pCMXFCLEtBQUttb0MsSUFBSUQsRUFBV3BiLE9BQVNBLElBQVcsSUFDMUNBLEVBQVNvYixFQUFXcGIsUUFHZixDQUNMaWIsRUFBRzFCLEVBQVErQixXQUNYSixFQUFHM0IsRUFBUWdDLFVBQ1gzZCxNQUFPQSxFQUNQb0MsT0FBUUEsR0NyQkcsU0FBU3JxQixFQUFTOEssRUFBUSs2QixHQUN2QyxJQUFJQyxFQUFXRCxFQUFNanJCLGFBQWVpckIsRUFBTWpyQixjQUUxQyxHQUFJOVAsRUFBTzlLLFNBQVM2bEMsR0FDbEIsT0FBTyxFQUVKLEdBQUlDLEdBQVk1QixFQUFhNEIsR0FBVyxDQUN6QyxJQUFJeGlDLEVBQU91aUMsRUFFWCxFQUFHLENBQ0QsR0FBSXZpQyxHQUFRd0gsRUFBT2k3QixXQUFXemlDLEdBQzVCLE9BQU8sRUFJVEEsRUFBT0EsRUFBS25KLFlBQWNtSixFQUFLdzNCLFdBQ3hCeDNCLEdBSWIsT0FBTyxFQ3BCTSxTQUFTLEVBQWlCc2dDLEdBQ3ZDLE9BQU9DLEVBQVVELEdBQVNqYyxpQkFBaUJpYyxHQ0Q5QixTQUFTb0MsRUFBZXBDLEdBQ3JDLE1BQU8sQ0FBQyxRQUFTLEtBQU0sTUFBTXhyQyxRQUFRdXJDLEVBQVlDLEtBQWEsRUNEakQsU0FBU3FDLEVBQW1CckMsR0FFekMsUUFBU0UsRUFBVUYsR0FBV0EsRUFBUTMvQixjQUN0QzIvQixFQUFRenNDLFdBQWFHLE9BQU9ILFVBQVV1UCxnQkNEekIsU0FBU3cvQixFQUFjdEMsR0FDcEMsTUFBNkIsU0FBekJELEVBQVlDLEdBQ1BBLEVBTVBBLEVBQVF1QyxjQUNSdkMsRUFBUXpwQyxhQUNSK3BDLEVBQWFOLEdBQVdBLEVBQVE5SSxLQUFPLE9BRXZDbUwsRUFBbUJyQyxHQ1J2QixTQUFTd0MsRUFBb0J4QyxHQUMzQixPQUFLSSxFQUFjSixJQUNvQixVQUF2QyxFQUFpQkEsR0FBU3hhLFNBSW5Cd2EsRUFBUTlELGFBSE4sS0F3Q0ksU0FBU3VHLEVBQWdCekMsR0FJdEMsSUFIQSxJQUFJdHNDLEVBQVN1c0MsRUFBVUQsR0FDbkI5RCxFQUFlc0csRUFBb0J4QyxHQUVoQzlELEdBQWdCa0csRUFBZWxHLElBQTZELFdBQTVDLEVBQWlCQSxHQUFjMVcsVUFDcEYwVyxFQUFlc0csRUFBb0J0RyxHQUdyQyxPQUFJQSxJQUErQyxTQUE5QjZELEVBQVk3RCxJQUEwRCxTQUE5QjZELEVBQVk3RCxJQUF3RSxXQUE1QyxFQUFpQkEsR0FBYzFXLFVBQzNIOXhCLEVBR0Z3b0MsR0E1Q1QsU0FBNEI4RCxHQUMxQixJQUFJMEMsR0FBc0UsSUFBMURDLFVBQVVDLFVBQVV4bkMsY0FBYzVHLFFBQVEsV0FHMUQsSUFGdUQsSUFBNUNtdUMsVUFBVUMsVUFBVXB1QyxRQUFRLFlBRTNCNHJDLEVBQWNKLElBSUksVUFGWCxFQUFpQkEsR0FFbkJ4YSxTQUNiLE9BQU8sS0FNWCxJQUZBLElBQUlxZCxFQUFjUCxFQUFjdEMsR0FFekJJLEVBQWN5QyxJQUFnQixDQUFDLE9BQVEsUUFBUXJ1QyxRQUFRdXJDLEVBQVk4QyxJQUFnQixHQUFHLENBQzNGLElBQUl6ckIsRUFBTSxFQUFpQnlyQixHQUkzQixHQUFzQixTQUFsQnpyQixFQUFJMHJCLFdBQTRDLFNBQXBCMXJCLEVBQUkyckIsYUFBMEMsVUFBaEIzckIsRUFBSTRyQixVQUFpRixJQUExRCxDQUFDLFlBQWEsZUFBZXh1QyxRQUFRNGlCLEVBQUk2ckIsYUFBc0JQLEdBQWdDLFdBQW5CdHJCLEVBQUk2ckIsWUFBMkJQLEdBQWF0ckIsRUFBSTNULFFBQXlCLFNBQWYyVCxFQUFJM1QsT0FDak8sT0FBT28vQixFQUVQQSxFQUFjQSxFQUFZdHNDLFdBSTlCLE9BQU8sS0FpQmdCMnNDLENBQW1CbEQsSUFBWXRzQyxFQzlEekMsU0FBU3l2QyxFQUF5Qi9ELEdBQy9DLE1BQU8sQ0FBQyxNQUFPLFVBQVU1cUMsUUFBUTRxQyxJQUFjLEVBQUksSUFBTSxJQ0FwRCxTQUFTZ0UsRUFBTzlCLEVBQUt4bUMsRUFBT2d0QixHQUNqQyxPQUFPLEVBQVF3WixFQUFLLEVBQVF4bUMsRUFBT2d0QixJQ0R0QixTQUFTdWIsRUFBbUJDLEdBQ3pDLE9BQU92dkMsT0FBTzZzQyxPQUFPLEdDRGQsQ0FDTDE5QixJQUFLLEVBQ0xtaUIsTUFBTyxFQUNQcVosT0FBUSxFQUNScFYsS0FBTSxHREh1Q2dhLEdFRmxDLFNBQVNDLEVBQWdCem9DLEVBQU9zRyxHQUM3QyxPQUFPQSxFQUFLODlCLFFBQU8sU0FBVXNFLEVBQVNsaUMsR0FFcEMsT0FEQWtpQyxFQUFRbGlDLEdBQU94RyxFQUNSMG9DLElBQ04sSUN3RkwsU0FDRXhxQyxLQUFNLFFBQ053bkMsU0FBUyxFQUNUQyxNQUFPLE9BQ1AzcEMsR0E5RUYsU0FBZTRwQyxHQUNiLElBQUkrQyxFQUVBNXlCLEVBQVE2dkIsRUFBSzd2QixNQUNiN1gsRUFBTzBuQyxFQUFLMW5DLEtBQ1pELEVBQVUybkMsRUFBSzNuQyxRQUNmMnFDLEVBQWU3eUIsRUFBTTVMLFNBQVNnOEIsTUFDOUIwQyxFQUFnQjl5QixFQUFNK3lCLGNBQWNELGNBQ3BDRSxFQUFnQnhDLEVBQWlCeHdCLEVBQU11dUIsV0FDdkMwRSxFQUFPWCxFQUF5QlUsR0FFaENwckMsRUFEYSxDQUFDNndCLEVBQU1qRSxHQUFPN3dCLFFBQVFxdkMsSUFBa0IsRUFDbEMsU0FBVyxRQUVsQyxHQUFLSCxHQUFpQkMsRUFBdEIsQ0FJQSxJQUFJTCxFQXhCZ0IsU0FBeUI5WixFQUFTM1ksR0FJdEQsT0FBT3d5QixFQUFzQyxpQkFIN0M3WixFQUE2QixtQkFBWkEsRUFBeUJBLEVBQVF6MUIsT0FBTzZzQyxPQUFPLEdBQUkvdkIsRUFBTWt6QixNQUFPLENBQy9FM0UsVUFBV3Z1QixFQUFNdXVCLGFBQ2I1VixHQUNrREEsRUFBVStaLEVBQWdCL1osRUFBU29WLElBb0J2RW9GLENBQWdCanJDLEVBQVF5d0IsUUFBUzNZLEdBQ2pEb3pCLEVBQVlyQyxFQUFjOEIsR0FDMUJRLEVBQW1CLE1BQVRKLEVBQWUsRUFBTXhhLEVBQy9CNmEsRUFBbUIsTUFBVEwsRUFBZXBGLEVBQVNyWixFQUNsQytlLEVBQVV2ekIsRUFBTWt6QixNQUFNL0UsVUFBVXZtQyxHQUFPb1ksRUFBTWt6QixNQUFNL0UsVUFBVThFLEdBQVFILEVBQWNHLEdBQVFqekIsRUFBTWt6QixNQUFNaEYsT0FBT3RtQyxHQUM5RzRyQyxFQUFZVixFQUFjRyxHQUFRanpCLEVBQU1rekIsTUFBTS9FLFVBQVU4RSxHQUN4RFEsRUFBb0I3QixFQUFnQmlCLEdBQ3BDYSxFQUFhRCxFQUE2QixNQUFUUixFQUFlUSxFQUFrQkUsY0FBZ0IsRUFBSUYsRUFBa0JHLGFBQWUsRUFBSSxFQUMzSEMsRUFBb0JOLEVBQVUsRUFBSUMsRUFBWSxFQUc5Qy9DLEVBQU1nQyxFQUFjWSxHQUNwQnBjLEVBQU15YyxFQUFhTixFQUFVeHJDLEdBQU82cUMsRUFBY2EsR0FDbERRLEVBQVNKLEVBQWEsRUFBSU4sRUFBVXhyQyxHQUFPLEVBQUlpc0MsRUFDL0N0SixFQUFTZ0ksRUFBTzlCLEVBQUtxRCxFQUFRN2MsR0FFN0I4YyxFQUFXZCxFQUNmanpCLEVBQU0reUIsY0FBYzVxQyxLQUFTeXFDLEVBQXdCLElBQTBCbUIsR0FBWXhKLEVBQVFxSSxFQUFzQm9CLGFBQWV6SixFQUFTdUosRUFBUWxCLEtBNkN6SjVDLE9BMUNGLFNBQWdCQyxHQUNkLElBQUlqd0IsRUFBUWl3QixFQUFNandCLE1BRWRpMEIsRUFEVWhFLEVBQU0vbkMsUUFDV2luQyxRQUMzQjBELE9BQW9DLElBQXJCb0IsRUFBOEIsc0JBQXdCQSxFQUVyRCxNQUFoQnBCLElBS3dCLGlCQUFqQkEsSUFDVEEsRUFBZTd5QixFQUFNNUwsU0FBUzg1QixPQUFPZ0csY0FBY3JCLE1BYWhEdG5DLEVBQVN5VSxFQUFNNUwsU0FBUzg1QixPQUFRMkUsS0FRckM3eUIsRUFBTTVMLFNBQVNnOEIsTUFBUXlDLElBVXZCdEMsU0FBVSxDQUFDLGlCQUNYNEQsaUJBQWtCLENBQUMsb0JDbkdOLFNBQVNDLEVBQWE3RixHQUNuQyxPQUFPQSxFQUFVbGtDLE1BQU0sS0FBSyxHQ1E5QixJQUFJZ3FDLEVBQWEsQ0FDZmhpQyxJQUFLLE9BQ0xtaUIsTUFBTyxPQUNQcVosT0FBUSxPQUNScFYsS0FBTSxRQWdCRCxTQUFTNmIsRUFBWXJFLEdBQzFCLElBQUlzRSxFQUVBckcsRUFBUytCLEVBQU0vQixPQUNmc0csRUFBYXZFLEVBQU11RSxXQUNuQmpHLEVBQVkwQixFQUFNMUIsVUFDbEJrRyxFQUFZeEUsRUFBTXdFLFVBQ2xCQyxFQUFVekUsRUFBTXlFLFFBQ2hCL2YsRUFBV3NiLEVBQU10YixTQUNqQmdnQixFQUFrQjFFLEVBQU0wRSxnQkFDeEJDLEVBQVczRSxFQUFNMkUsU0FDakJDLEVBQWU1RSxFQUFNNEUsYUFDckJDLEVBQVU3RSxFQUFNNkUsUUFDaEJDLEVBQWFMLEVBQVE3RCxFQUNyQkEsT0FBbUIsSUFBZmtFLEVBQXdCLEVBQUlBLEVBQ2hDQyxFQUFhTixFQUFRNUQsRUFDckJBLE9BQW1CLElBQWZrRSxFQUF3QixFQUFJQSxFQUVoQ0MsRUFBZ0MsbUJBQWpCSixFQUE4QkEsRUFBYSxDQUM1RGhFLEVBQUdBLEVBQ0hDLEVBQUdBLElBQ0EsQ0FDSEQsRUFBR0EsRUFDSEMsRUFBR0EsR0FHTEQsRUFBSW9FLEVBQU1wRSxFQUNWQyxFQUFJbUUsRUFBTW5FLEVBQ1YsSUFBSW9FLEVBQU9SLEVBQVEzd0MsZUFBZSxLQUM5Qm94QyxFQUFPVCxFQUFRM3dDLGVBQWUsS0FDOUJxeEMsRUFBUTNjLEVBQ1I0YyxFQUFRLEVBQ1JuSyxFQUFNcm9DLE9BRVYsR0FBSSt4QyxFQUFVLENBQ1osSUFBSXZKLEVBQWV1RyxFQUFnQjFELEdBQy9Cb0gsRUFBYSxlQUNiQyxFQUFZLGNBRVpsSyxJQUFpQitELEVBQVVsQixJQUdtQixXQUE1QyxFQUZKN0MsRUFBZW1HLEVBQW1CdEQsSUFFQ3ZaLFVBQXNDLGFBQWJBLElBQzFEMmdCLEVBQWEsZUFDYkMsRUFBWSxlQUtoQmxLLEVBQWVBLEdBRVhrRCxJQUFjLElBQVFBLElBQWM5VixHQUFROFYsSUFBYy9aLElBQVVpZ0IsSUFBYzNzQyxLQUNwRnV0QyxFQUFReEgsRUFHUmlELElBRmNnRSxHQUFXNUosRUFBSXNLLGVBQWlCdEssRUFBSXNLLGVBQWU1ZixPQUNqRXlWLEVBQWFpSyxJQUNFZCxFQUFXNWUsT0FDMUJrYixHQUFLNkQsRUFBa0IsR0FBSyxHQUcxQnBHLElBQWM5VixJQUFTOFYsSUFBYyxHQUFPQSxJQUFjVixHQUFXNEcsSUFBYzNzQyxLQUNyRnN0QyxFQUFRNWdCLEVBR1JxYyxJQUZjaUUsR0FBVzVKLEVBQUlzSyxlQUFpQnRLLEVBQUlzSyxlQUFlaGlCLE1BQ2pFNlgsRUFBYWtLLElBQ0VmLEVBQVdoaEIsTUFDMUJxZCxHQUFLOEQsRUFBa0IsR0FBSyxHQUloQyxJQWdCTWMsRUFoQkZDLEVBQWV4eUMsT0FBTzZzQyxPQUFPLENBQy9CcGIsU0FBVUEsR0FDVGlnQixHQUFZUCxHQUVYc0IsR0FBeUIsSUFBakJkLEVBbkZkLFNBQTJCaEYsR0FDekIsSUFBSWdCLEVBQUloQixFQUFLZ0IsRUFDVEMsRUFBSWpCLEVBQUtpQixFQUVUOEUsRUFETS95QyxPQUNJZ3pDLGtCQUFvQixFQUNsQyxNQUFPLENBQ0xoRixFQUFHOWIsRUFBTThiLEVBQUkrRSxHQUFPQSxHQUFPLEVBQzNCOUUsRUFBRy9iLEVBQU0rYixFQUFJOEUsR0FBT0EsR0FBTyxHQTRFT0UsQ0FBa0IsQ0FDcERqRixFQUFHQSxFQUNIQyxFQUFHQSxJQUNBLENBQ0hELEVBQUdBLEVBQ0hDLEVBQUdBLEdBTUwsT0FIQUQsRUFBSThFLEVBQU05RSxFQUNWQyxFQUFJNkUsRUFBTTdFLEVBRU42RCxFQUdLenhDLE9BQU82c0MsT0FBTyxHQUFJMkYsSUFBZUQsRUFBaUIsSUFBbUJKLEdBQVNGLEVBQU8sSUFBTSxHQUFJTSxFQUFlTCxHQUFTRixFQUFPLElBQU0sR0FBSU8sRUFBZXhELFdBQWEvRyxFQUFJMkssa0JBQW9CLElBQU0sRUFBSSxhQUFlaEYsRUFBSSxPQUFTQyxFQUFJLE1BQVEsZUFBaUJELEVBQUksT0FBU0MsRUFBSSxTQUFVMkUsSUFHNVJ2eUMsT0FBTzZzQyxPQUFPLEdBQUkyRixJQUFlbkIsRUFBa0IsSUFBb0JjLEdBQVNGLEVBQU9yRSxFQUFJLEtBQU8sR0FBSXlELEVBQWdCYSxHQUFTRixFQUFPckUsRUFBSSxLQUFPLEdBQUkwRCxFQUFnQnRDLFVBQVksR0FBSXNDLElBd0Q5TCxVQUNFcHNDLEtBQU0sZ0JBQ053bkMsU0FBUyxFQUNUQyxNQUFPLGNBQ1AzcEMsR0F6REYsU0FBdUI4dkMsR0FDckIsSUFBSS8xQixFQUFRKzFCLEVBQU0vMUIsTUFDZDlYLEVBQVU2dEMsRUFBTTd0QyxRQUNoQjh0QyxFQUF3Qjl0QyxFQUFReXNDLGdCQUNoQ0EsT0FBNEMsSUFBMUJxQixHQUEwQ0EsRUFDNURDLEVBQW9CL3RDLEVBQVEwc0MsU0FDNUJBLE9BQWlDLElBQXRCcUIsR0FBc0NBLEVBQ2pEQyxFQUF3Qmh1QyxFQUFRMnNDLGFBQ2hDQSxPQUF5QyxJQUExQnFCLEdBQTBDQSxFQVl6RFIsRUFBZSxDQUNqQm5ILFVBQVdpQyxFQUFpQnh3QixFQUFNdXVCLFdBQ2xDa0csVUFBV0wsRUFBYXAwQixFQUFNdXVCLFdBQzlCTCxPQUFRbHVCLEVBQU01TCxTQUFTODVCLE9BQ3ZCc0csV0FBWXgwQixFQUFNa3pCLE1BQU1oRixPQUN4QnlHLGdCQUFpQkEsRUFDakJHLFFBQW9DLFVBQTNCOTBCLEVBQU05WCxRQUFRaW9DLFVBR2dCLE1BQXJDbndCLEVBQU0reUIsY0FBY0QsZ0JBQ3RCOXlCLEVBQU1zWCxPQUFPNFcsT0FBU2hyQyxPQUFPNnNDLE9BQU8sR0FBSS92QixFQUFNc1gsT0FBTzRXLE9BQVFvRyxFQUFZcHhDLE9BQU82c0MsT0FBTyxHQUFJMkYsRUFBYyxDQUN2R2hCLFFBQVMxMEIsRUFBTSt5QixjQUFjRCxjQUM3Qm5lLFNBQVUzVSxFQUFNOVgsUUFBUWlvQyxTQUN4QnlFLFNBQVVBLEVBQ1ZDLGFBQWNBLE9BSWUsTUFBN0I3MEIsRUFBTSt5QixjQUFjM0MsUUFDdEJwd0IsRUFBTXNYLE9BQU84WSxNQUFRbHRDLE9BQU82c0MsT0FBTyxHQUFJL3ZCLEVBQU1zWCxPQUFPOFksTUFBT2tFLEVBQVlweEMsT0FBTzZzQyxPQUFPLEdBQUkyRixFQUFjLENBQ3JHaEIsUUFBUzEwQixFQUFNK3lCLGNBQWMzQyxNQUM3QnpiLFNBQVUsV0FDVmlnQixVQUFVLEVBQ1ZDLGFBQWNBLE9BSWxCNzBCLEVBQU10VCxXQUFXd2hDLE9BQVNockMsT0FBTzZzQyxPQUFPLEdBQUkvdkIsRUFBTXRULFdBQVd3aEMsT0FBUSxDQUNuRSx3QkFBeUJsdUIsRUFBTXV1QixhQVVqQ2pxQixLQUFNLElDakxSLElBQUk2eEIsR0FBVSxDQUNaQSxTQUFTLEdBc0NYLFVBQ0VodUMsS0FBTSxpQkFDTnduQyxTQUFTLEVBQ1RDLE1BQU8sUUFDUDNwQyxHQUFJLGFBQ0orcEMsT0F4Q0YsU0FBZ0JILEdBQ2QsSUFBSTd2QixFQUFRNnZCLEVBQUs3dkIsTUFDYm8yQixFQUFXdkcsRUFBS3VHLFNBQ2hCbHVDLEVBQVUybkMsRUFBSzNuQyxRQUNmbXVDLEVBQWtCbnVDLEVBQVFvdUMsT0FDMUJBLE9BQTZCLElBQXBCRCxHQUFvQ0EsRUFDN0NFLEVBQWtCcnVDLEVBQVFzdUMsT0FDMUJBLE9BQTZCLElBQXBCRCxHQUFvQ0EsRUFDN0MxekMsRUFBU3VzQyxFQUFVcHZCLEVBQU01TCxTQUFTODVCLFFBQ2xDdUksRUFBZ0IsR0FBR2p6QyxPQUFPd2MsRUFBTXkyQixjQUFjdEksVUFBV251QixFQUFNeTJCLGNBQWN2SSxRQVlqRixPQVZJb0ksR0FDRkcsRUFBYzNHLFNBQVEsU0FBVTRHLEdBQzlCQSxFQUFhcGtDLGlCQUFpQixTQUFVOGpDLEVBQVNPLE9BQVFSLE9BSXpESyxHQUNGM3pDLEVBQU95UCxpQkFBaUIsU0FBVThqQyxFQUFTTyxPQUFRUixJQUc5QyxXQUNERyxHQUNGRyxFQUFjM0csU0FBUSxTQUFVNEcsR0FDOUJBLEVBQWEvekIsb0JBQW9CLFNBQVV5ekIsRUFBU08sT0FBUVIsT0FJNURLLEdBQ0YzekMsRUFBTzhmLG9CQUFvQixTQUFVeXpCLEVBQVNPLE9BQVFSLE1BWTFEN3hCLEtBQU0sSUMvQ1IsSUFBSXBOLEdBQU8sQ0FDVHVoQixLQUFNLFFBQ05qRSxNQUFPLE9BQ1BxWixPQUFRLE1BQ1J4N0IsSUFBSyxVQUVRLFNBQVN1a0MsR0FBcUJySSxHQUMzQyxPQUFPQSxFQUFVdmxDLFFBQVEsMEJBQTBCLFNBQVU2TixHQUMzRCxPQUFPSyxHQUFLTCxNQ1JoQixJQUFJLEdBQU8sQ0FDVFQsTUFBTyxNQUNQdE8sSUFBSyxTQUVRLFNBQVMrdUMsR0FBOEJ0SSxHQUNwRCxPQUFPQSxFQUFVdmxDLFFBQVEsY0FBYyxTQUFVNk4sR0FDL0MsT0FBTyxHQUFLQSxNQ0xELFNBQVNpZ0MsR0FBZ0IveEMsR0FDdEMsSUFBSW1tQyxFQUFNa0UsRUFBVXJxQyxHQUdwQixNQUFPLENBQ0w0MEIsV0FIZXVSLEVBQUlFLFlBSW5CMVIsVUFIY3dSLEVBQUlDLGFDRFAsU0FBUzRMLEdBQW9CNUgsR0FRMUMsT0FBTzVXLEVBQXNCaVosRUFBbUJyQyxJQUFVMVcsS0FBT3FlLEdBQWdCM0gsR0FBU3hWLFdDVjdFLFNBQVNxZCxHQUFlN0gsR0FFckMsSUFBSThILEVBQW9CLEVBQWlCOUgsR0FDckMzUyxFQUFXeWEsRUFBa0J6YSxTQUM3QkMsRUFBWXdhLEVBQWtCeGEsVUFDOUJDLEVBQVl1YSxFQUFrQnZhLFVBRWxDLE1BQU8sNkJBQTZCM3NCLEtBQUt5c0IsRUFBV0UsRUFBWUQsR0NKbkQsU0FBU3lhLEdBQWdCbnlDLEdBQ3RDLE1BQUksQ0FBQyxPQUFRLE9BQVEsYUFBYXBCLFFBQVF1ckMsRUFBWW5xQyxLQUFVLEVBRXZEQSxFQUFLeUssY0FBYzZYLEtBR3hCa29CLEVBQWN4cUMsSUFBU2l5QyxHQUFlanlDLEdBQ2pDQSxFQUdGbXlDLEdBQWdCekYsRUFBYzFzQyxJQ0h4QixTQUFTb3lDLEdBQWtCaEksRUFBUzdpQyxHQUNqRCxJQUFJOHFDLE9BRVMsSUFBVDlxQyxJQUNGQSxFQUFPLElBR1QsSUFBSW9xQyxFQUFlUSxHQUFnQi9ILEdBQy9Ca0ksRUFBU1gsS0FBcUUsT0FBbERVLEVBQXdCakksRUFBUTMvQixvQkFBeUIsRUFBUzRuQyxFQUFzQi92QixNQUNwSDZqQixFQUFNa0UsRUFBVXNILEdBQ2hCbnVDLEVBQVM4dUMsRUFBUyxDQUFDbk0sR0FBSzFuQyxPQUFPMG5DLEVBQUlzSyxnQkFBa0IsR0FBSXdCLEdBQWVOLEdBQWdCQSxFQUFlLElBQU1BLEVBQzdHWSxFQUFjaHJDLEVBQUs5SSxPQUFPK0UsR0FDOUIsT0FBTzh1QyxFQUFTQyxFQUNoQkEsRUFBWTl6QyxPQUFPMnpDLEdBQWtCMUYsRUFBY2xwQyxLQ3hCdEMsU0FBU2d2QyxHQUFpQnRNLEdBQ3ZDLE9BQU8vbkMsT0FBTzZzQyxPQUFPLEdBQUk5RSxFQUFNLENBQzdCeFMsS0FBTXdTLEVBQUs0RixFQUNYeCtCLElBQUs0NEIsRUFBSzZGLEVBQ1Z0YyxNQUFPeVcsRUFBSzRGLEVBQUk1RixFQUFLelgsTUFDckJxYSxPQUFRNUMsRUFBSzZGLEVBQUk3RixFQUFLclYsU0N1QjFCLFNBQVM0aEIsR0FBMkJySSxFQUFTc0ksR0FDM0MsT0FBT0EsSUFBbUJ4SixFQUFXc0osR0MxQnhCLFNBQXlCcEksR0FDdEMsSUFBSWpFLEVBQU1rRSxFQUFVRCxHQUNoQjNkLEVBQU9nZ0IsRUFBbUJyQyxHQUMxQnFHLEVBQWlCdEssRUFBSXNLLGVBQ3JCaGlCLEVBQVFoQyxFQUFLb2lCLFlBQ2JoZSxFQUFTcEUsRUFBS21pQixhQUNkOUMsRUFBSSxFQUNKQyxFQUFJLEVBdUJSLE9BakJJMEUsSUFDRmhpQixFQUFRZ2lCLEVBQWVoaUIsTUFDdkJvQyxFQUFTNGYsRUFBZTVmLE9BU25CLGlDQUFpQzdsQixLQUFLK2hDLFVBQVVDLGFBQ25EbEIsRUFBSTJFLEVBQWV0RSxXQUNuQkosRUFBSTBFLEVBQWVyRSxZQUloQixDQUNMM2QsTUFBT0EsRUFDUG9DLE9BQVFBLEVBQ1JpYixFQUFHQSxFQUFJa0csR0FBb0I1SCxHQUMzQjJCLEVBQUdBLEdEUmlENEcsQ0FBZ0J2SSxJQUFZRSxFQUFVb0ksR0FkOUYsU0FBb0N0SSxHQUNsQyxJQUFJbEUsRUFBTzFTLEVBQXNCNFcsR0FTakMsT0FSQWxFLEVBQUs1NEIsSUFBTTQ0QixFQUFLNTRCLElBQU04OEIsRUFBUXdJLFVBQzlCMU0sRUFBS3hTLEtBQU93UyxFQUFLeFMsS0FBTzBXLEVBQVF5SSxXQUNoQzNNLEVBQUs0QyxPQUFTNUMsRUFBSzU0QixJQUFNODhCLEVBQVF3RSxhQUNqQzFJLEVBQUt6VyxNQUFReVcsRUFBS3hTLEtBQU8wVyxFQUFReUUsWUFDakMzSSxFQUFLelgsTUFBUTJiLEVBQVF5RSxZQUNyQjNJLEVBQUtyVixPQUFTdVosRUFBUXdFLGFBQ3RCMUksRUFBSzRGLEVBQUk1RixFQUFLeFMsS0FDZHdTLEVBQUs2RixFQUFJN0YsRUFBSzU0QixJQUNQNDRCLEVBSXVHNE0sQ0FBMkJKLEdBQWtCRixHRXRCOUksU0FBeUJwSSxHQUN0QyxJQUFJaUksRUFFQTVsQixFQUFPZ2dCLEVBQW1CckMsR0FDMUIySSxFQUFZaEIsR0FBZ0IzSCxHQUM1QjluQixFQUEwRCxPQUFsRCt2QixFQUF3QmpJLEVBQVEzL0Isb0JBQXlCLEVBQVM0bkMsRUFBc0IvdkIsS0FDaEdtTSxFQUFRLEVBQUloQyxFQUFLdW1CLFlBQWF2bUIsRUFBS29pQixZQUFhdnNCLEVBQU9BLEVBQUswd0IsWUFBYyxFQUFHMXdCLEVBQU9BLEVBQUt1c0IsWUFBYyxHQUN2R2hlLEVBQVMsRUFBSXBFLEVBQUt3bUIsYUFBY3htQixFQUFLbWlCLGFBQWN0c0IsRUFBT0EsRUFBSzJ3QixhQUFlLEVBQUczd0IsRUFBT0EsRUFBS3NzQixhQUFlLEdBQzVHOUMsR0FBS2lILEVBQVVuZSxXQUFhb2QsR0FBb0I1SCxHQUNoRDJCLEdBQUtnSCxFQUFVcGUsVUFNbkIsTUFKaUQsUUFBN0MsRUFBaUJyUyxHQUFRbUssR0FBTXltQixZQUNqQ3BILEdBQUssRUFBSXJmLEVBQUtvaUIsWUFBYXZzQixFQUFPQSxFQUFLdXNCLFlBQWMsR0FBS3BnQixHQUdyRCxDQUNMQSxNQUFPQSxFQUNQb0MsT0FBUUEsRUFDUmliLEVBQUdBLEVBQ0hDLEVBQUdBLEdGR3VLb0gsQ0FBZ0IxRyxFQUFtQnJDLEtHekJsTSxTQUFTZ0osR0FBZXRJLEdBQ3JDLElBT0k2RSxFQVBBdkcsRUFBWTBCLEVBQUsxQixVQUNqQmdCLEVBQVVVLEVBQUtWLFFBQ2ZaLEVBQVlzQixFQUFLdEIsVUFDakJ5RSxFQUFnQnpFLEVBQVlpQyxFQUFpQmpDLEdBQWEsS0FDMURrRyxFQUFZbEcsRUFBWTZGLEVBQWE3RixHQUFhLEtBQ2xENkosRUFBVWpLLEVBQVUwQyxFQUFJMUMsRUFBVTNhLE1BQVEsRUFBSTJiLEVBQVEzYixNQUFRLEVBQzlENmtCLEVBQVVsSyxFQUFVMkMsRUFBSTNDLEVBQVV2WSxPQUFTLEVBQUl1WixFQUFRdlosT0FBUyxFQUdwRSxPQUFRb2QsR0FDTixLQUFLLEVBQ0gwQixFQUFVLENBQ1I3RCxFQUFHdUgsRUFDSHRILEVBQUczQyxFQUFVMkMsRUFBSTNCLEVBQVF2WixRQUUzQixNQUVGLEtBQUtpWSxFQUNINkcsRUFBVSxDQUNSN0QsRUFBR3VILEVBQ0h0SCxFQUFHM0MsRUFBVTJDLEVBQUkzQyxFQUFVdlksUUFFN0IsTUFFRixLQUFLcEIsRUFDSGtnQixFQUFVLENBQ1I3RCxFQUFHMUMsRUFBVTBDLEVBQUkxQyxFQUFVM2EsTUFDM0JzZCxFQUFHdUgsR0FFTCxNQUVGLEtBQUs1ZixFQUNIaWMsRUFBVSxDQUNSN0QsRUFBRzFDLEVBQVUwQyxFQUFJMUIsRUFBUTNiLE1BQ3pCc2QsRUFBR3VILEdBRUwsTUFFRixRQUNFM0QsRUFBVSxDQUNSN0QsRUFBRzFDLEVBQVUwQyxFQUNiQyxFQUFHM0MsRUFBVTJDLEdBSW5CLElBQUl3SCxFQUFXdEYsRUFBZ0JWLEVBQXlCVSxHQUFpQixLQUV6RSxHQUFnQixNQUFac0YsRUFBa0IsQ0FDcEIsSUFBSTF3QyxFQUFtQixNQUFiMHdDLEVBQW1CLFNBQVcsUUFFeEMsT0FBUTdELEdBQ04sS0FBS3IrQixFQUNIcytCLEVBQVE0RCxHQUFZNUQsRUFBUTRELElBQWFuSyxFQUFVdm1DLEdBQU8sRUFBSXVuQyxFQUFRdm5DLEdBQU8sR0FDN0UsTUFFRixLQUFLRSxFQUNINHNDLEVBQVE0RCxHQUFZNUQsRUFBUTRELElBQWFuSyxFQUFVdm1DLEdBQU8sRUFBSXVuQyxFQUFRdm5DLEdBQU8sSUFPbkYsT0FBTzhzQyxFQzFETSxTQUFTNkQsR0FBZXY0QixFQUFPOVgsUUFDNUIsSUFBWkEsSUFDRkEsRUFBVSxJQUdaLElBQUlzd0MsRUFBV3R3QyxFQUNYdXdDLEVBQXFCRCxFQUFTakssVUFDOUJBLE9BQW1DLElBQXZCa0ssRUFBZ0N6NEIsRUFBTXV1QixVQUFZa0ssRUFDOURDLEVBQW9CRixFQUFTRyxTQUM3QkEsT0FBaUMsSUFBdEJELEVBQStCMUssRUFBa0IwSyxFQUM1REUsRUFBd0JKLEVBQVNLLGFBQ2pDQSxPQUF5QyxJQUExQkQsRUFBbUMzSyxFQUFXMkssRUFDN0RFLEVBQXdCTixFQUFTTyxlQUNqQ0EsT0FBMkMsSUFBMUJELEVBQW1DNUssRUFBUzRLLEVBQzdERSxFQUF1QlIsRUFBU1MsWUFDaENBLE9BQXVDLElBQXpCRCxHQUEwQ0EsRUFDeERFLEVBQW1CVixFQUFTN2YsUUFDNUJBLE9BQStCLElBQXJCdWdCLEVBQThCLEVBQUlBLEVBQzVDekcsRUFBZ0JELEVBQXNDLGlCQUFaN1osRUFBdUJBLEVBQVUrWixFQUFnQi9aLEVBQVNvVixJQUNwR29MLEVBQWFKLElBQW1CN0ssRUFBU0MsRUFBWUQsRUFDckRzRyxFQUFheDBCLEVBQU1rekIsTUFBTWhGLE9BQ3pCaUIsRUFBVW52QixFQUFNNUwsU0FBUzZrQyxFQUFjRSxFQUFhSixHQUNwREssRUpvQlMsU0FBeUJqSyxFQUFTd0osRUFBVUUsR0FDekQsSUFBSVEsRUFBbUMsb0JBQWJWLEVBbEI1QixTQUE0QnhKLEdBQzFCLElBQUluQixFQUFrQm1KLEdBQWtCMUYsRUFBY3RDLElBRWxEbUssRUFEb0IsQ0FBQyxXQUFZLFNBQVMzMUMsUUFBUSxFQUFpQndyQyxHQUFTeGEsV0FBYSxHQUNuRDRhLEVBQWNKLEdBQVd5QyxFQUFnQnpDLEdBQVdBLEVBRTlGLE9BQUtFLEVBQVVpSyxHQUtSdEwsRUFBZ0JwN0IsUUFBTyxTQUFVNmtDLEdBQ3RDLE9BQU9wSSxFQUFVb0ksSUFBbUJsc0MsRUFBU2tzQyxFQUFnQjZCLElBQW1ELFNBQWhDcEssRUFBWXVJLE1BTHJGLEdBWWtEOEIsQ0FBbUJwSyxHQUFXLEdBQUczckMsT0FBT20xQyxHQUMvRjNLLEVBQWtCLEdBQUd4cUMsT0FBTzYxQyxFQUFxQixDQUFDUixJQUNsRFcsRUFBc0J4TCxFQUFnQixHQUN0Q3lMLEVBQWV6TCxFQUFnQkssUUFBTyxTQUFVcUwsRUFBU2pDLEdBQzNELElBQUl4TSxFQUFPdU0sR0FBMkJySSxFQUFTc0ksR0FLL0MsT0FKQWlDLEVBQVFybkMsSUFBTSxFQUFJNDRCLEVBQUs1NEIsSUFBS3FuQyxFQUFRcm5DLEtBQ3BDcW5DLEVBQVFsbEIsTUFBUSxFQUFJeVcsRUFBS3pXLE1BQU9rbEIsRUFBUWxsQixPQUN4Q2tsQixFQUFRN0wsT0FBUyxFQUFJNUMsRUFBSzRDLE9BQVE2TCxFQUFRN0wsUUFDMUM2TCxFQUFRamhCLEtBQU8sRUFBSXdTLEVBQUt4UyxLQUFNaWhCLEVBQVFqaEIsTUFDL0JpaEIsSUFDTmxDLEdBQTJCckksRUFBU3FLLElBS3ZDLE9BSkFDLEVBQWFqbUIsTUFBUWltQixFQUFhamxCLE1BQVFpbEIsRUFBYWhoQixLQUN2RGdoQixFQUFhN2pCLE9BQVM2akIsRUFBYTVMLE9BQVM0TCxFQUFhcG5DLElBQ3pEb25DLEVBQWE1SSxFQUFJNEksRUFBYWhoQixLQUM5QmdoQixFQUFhM0ksRUFBSTJJLEVBQWFwbkMsSUFDdkJvbkMsRUlwQ2tCRSxDQUFnQnRLLEVBQVVGLEdBQVdBLEVBQVVBLEVBQVF5SyxnQkFBa0JwSSxFQUFtQnh4QixFQUFNNUwsU0FBUzg1QixRQUFTeUssRUFBVUUsR0FDbkpnQixFQUFzQnRoQixFQUFzQnZZLEVBQU01TCxTQUFTKzVCLFdBQzNEMkUsRUFBZ0JxRixHQUFlLENBQ2pDaEssVUFBVzBMLEVBQ1gxSyxRQUFTcUYsRUFDVHJFLFNBQVUsV0FDVjVCLFVBQVdBLElBRVR1TCxFQUFtQnZDLEdBQWlCcjBDLE9BQU82c0MsT0FBTyxHQUFJeUUsRUFBWTFCLElBQ2xFaUgsRUFBb0JoQixJQUFtQjdLLEVBQVM0TCxFQUFtQkQsRUFHbkVHLEVBQWtCLENBQ3BCM25DLElBQUsrbUMsRUFBbUIvbUMsSUFBTTBuQyxFQUFrQjFuQyxJQUFNb2dDLEVBQWNwZ0MsSUFDcEV3N0IsT0FBUWtNLEVBQWtCbE0sT0FBU3VMLEVBQW1CdkwsT0FBUzRFLEVBQWM1RSxPQUM3RXBWLEtBQU0yZ0IsRUFBbUIzZ0IsS0FBT3NoQixFQUFrQnRoQixLQUFPZ2EsRUFBY2hhLEtBQ3ZFakUsTUFBT3VsQixFQUFrQnZsQixNQUFRNGtCLEVBQW1CNWtCLE1BQVFpZSxFQUFjamUsT0FFeEV5bEIsRUFBYWo2QixFQUFNK3lCLGNBQWN4SSxPQUVyQyxHQUFJd08sSUFBbUI3SyxHQUFVK0wsRUFBWSxDQUMzQyxJQUFJMVAsRUFBUzBQLEVBQVcxTCxHQUN4QnJyQyxPQUFPcU4sS0FBS3lwQyxHQUFpQmxLLFNBQVEsU0FBVXIvQixHQUM3QyxJQUFJeXBDLEVBQVcsQ0FBQzFsQixFQUFPcVosR0FBUWxxQyxRQUFROE0sSUFBUSxFQUFJLEdBQUssRUFDcER3aUMsRUFBTyxDQUFDLEVBQUtwRixHQUFRbHFDLFFBQVE4TSxJQUFRLEVBQUksSUFBTSxJQUNuRHVwQyxFQUFnQnZwQyxJQUFRODVCLEVBQU8wSSxHQUFRaUgsS0FJM0MsT0FBT0YsRUM0RVQsVUFDRTd4QyxLQUFNLE9BQ053bkMsU0FBUyxFQUNUQyxNQUFPLE9BQ1AzcEMsR0E1SEYsU0FBYzRwQyxHQUNaLElBQUk3dkIsRUFBUTZ2QixFQUFLN3ZCLE1BQ2I5WCxFQUFVMm5DLEVBQUszbkMsUUFDZkMsRUFBTzBuQyxFQUFLMW5DLEtBRWhCLElBQUk2WCxFQUFNK3lCLGNBQWM1cUMsR0FBTWd5QyxNQUE5QixDQW9DQSxJQWhDQSxJQUFJQyxFQUFvQmx5QyxFQUFRb3dDLFNBQzVCK0IsT0FBc0MsSUFBdEJELEdBQXNDQSxFQUN0REUsRUFBbUJweUMsRUFBUXF5QyxRQUMzQkMsT0FBb0MsSUFBckJGLEdBQXFDQSxFQUNwREcsRUFBOEJ2eUMsRUFBUXd5QyxtQkFDdEMvaEIsRUFBVXp3QixFQUFReXdCLFFBQ2xCZ2dCLEVBQVd6d0MsRUFBUXl3QyxTQUNuQkUsRUFBZTN3QyxFQUFRMndDLGFBQ3ZCSSxFQUFjL3dDLEVBQVErd0MsWUFDdEIwQixFQUF3Qnp5QyxFQUFRMHlDLGVBQ2hDQSxPQUEyQyxJQUExQkQsR0FBMENBLEVBQzNERSxFQUF3QjN5QyxFQUFRMnlDLHNCQUNoQ0MsRUFBcUI5NkIsRUFBTTlYLFFBQVFxbUMsVUFDbkN5RSxFQUFnQnhDLEVBQWlCc0ssR0FFakNKLEVBQXFCRCxJQURIekgsSUFBa0I4SCxHQUNxQ0YsRUFqQy9FLFNBQXVDck0sR0FDckMsR0FBSWlDLEVBQWlCakMsS0FBZVQsRUFDbEMsTUFBTyxHQUdULElBQUlpTixFQUFvQm5FLEdBQXFCckksR0FDN0MsTUFBTyxDQUFDc0ksR0FBOEJ0SSxHQUFZd00sRUFBbUJsRSxHQUE4QmtFLElBMkJ3Q0MsQ0FBOEJGLEdBQTNFLENBQUNsRSxHQUFxQmtFLEtBQ2hIRyxFQUFhLENBQUNILEdBQW9CdDNDLE9BQU9rM0MsR0FBb0JyTSxRQUFPLFNBQVVDLEVBQUtDLEdBQ3JGLE9BQU9ELEVBQUk5cUMsT0FBT2d0QyxFQUFpQmpDLEtBQWVULEVDdkN2QyxTQUE4Qjl0QixFQUFPOVgsUUFDbEMsSUFBWkEsSUFDRkEsRUFBVSxJQUdaLElBQUlzd0MsRUFBV3R3QyxFQUNYcW1DLEVBQVlpSyxFQUFTakssVUFDckJvSyxFQUFXSCxFQUFTRyxTQUNwQkUsRUFBZUwsRUFBU0ssYUFDeEJsZ0IsRUFBVTZmLEVBQVM3ZixRQUNuQmlpQixFQUFpQnBDLEVBQVNvQyxlQUMxQk0sRUFBd0IxQyxFQUFTcUMsc0JBQ2pDQSxPQUFrRCxJQUExQkssRUFBbUMsRUFBZ0JBLEVBQzNFekcsRUFBWUwsRUFBYTdGLEdBQ3pCME0sRUFBYXhHLEVBQVltRyxFQUFpQnhNLEVBQXNCQSxFQUFvQng3QixRQUFPLFNBQVUyN0IsR0FDdkcsT0FBTzZGLEVBQWE3RixLQUFla0csS0FDaEMxRyxFQUNEb04sRUFBb0JGLEVBQVdyb0MsUUFBTyxTQUFVMjdCLEdBQ2xELE9BQU9zTSxFQUFzQmwzQyxRQUFRNHFDLElBQWMsS0FHcEIsSUFBN0I0TSxFQUFrQi8wQyxTQUNwQiswQyxFQUFvQkYsR0FRdEIsSUFBSUcsRUFBWUQsRUFBa0I5TSxRQUFPLFNBQVVDLEVBQUtDLEdBT3RELE9BTkFELEVBQUlDLEdBQWFnSyxHQUFldjRCLEVBQU8sQ0FDckN1dUIsVUFBV0EsRUFDWG9LLFNBQVVBLEVBQ1ZFLGFBQWNBLEVBQ2RsZ0IsUUFBU0EsSUFDUjZYLEVBQWlCakMsSUFDYkQsSUFDTixJQUNILE9BQU9wckMsT0FBT3FOLEtBQUs2cUMsR0FBV3J6QyxNQUFLLFNBQVVtRSxFQUFHQyxHQUM5QyxPQUFPaXZDLEVBQVVsdkMsR0FBS2t2QyxFQUFVanZDLE1ERHlCa3ZDLENBQXFCcjdCLEVBQU8sQ0FDbkZ1dUIsVUFBV0EsRUFDWG9LLFNBQVVBLEVBQ1ZFLGFBQWNBLEVBQ2RsZ0IsUUFBU0EsRUFDVGlpQixlQUFnQkEsRUFDaEJDLHNCQUF1QkEsSUFDcEJ0TSxLQUNKLElBQ0MrTSxFQUFnQnQ3QixFQUFNa3pCLE1BQU0vRSxVQUM1QnFHLEVBQWF4MEIsRUFBTWt6QixNQUFNaEYsT0FDekJxTixFQUFZLElBQUlDLElBQ2hCQyxHQUFxQixFQUNyQkMsRUFBd0JULEVBQVcsR0FFOUJoMkMsRUFBSSxFQUFHQSxFQUFJZzJDLEVBQVc3MEMsT0FBUW5CLElBQUssQ0FDMUMsSUFBSXNwQyxFQUFZME0sRUFBV2gyQyxHQUV2QjAyQyxFQUFpQm5MLEVBQWlCakMsR0FFbENxTixFQUFtQnhILEVBQWE3RixLQUFlbjRCLEVBQy9DeWxDLEVBQWEsQ0FBQyxFQUFLaE8sR0FBUWxxQyxRQUFRZzRDLElBQW1CLEVBQ3REL3pDLEVBQU1pMEMsRUFBYSxRQUFVLFNBQzdCcmYsRUFBVytiLEdBQWV2NEIsRUFBTyxDQUNuQ3V1QixVQUFXQSxFQUNYb0ssU0FBVUEsRUFDVkUsYUFBY0EsRUFDZEksWUFBYUEsRUFDYnRnQixRQUFTQSxJQUVQbWpCLEVBQW9CRCxFQUFhRCxFQUFtQnBuQixFQUFRaUUsRUFBT21qQixFQUFtQi9OLEVBQVMsRUFFL0Z5TixFQUFjMXpDLEdBQU80c0MsRUFBVzVzQyxLQUNsQ2swQyxFQUFvQmxGLEdBQXFCa0YsSUFHM0MsSUFBSUMsRUFBbUJuRixHQUFxQmtGLEdBQ3hDRSxFQUFTLEdBVWIsR0FSSTNCLEdBQ0YyQixFQUFPdDRDLEtBQUs4NEIsRUFBU21mLElBQW1CLEdBR3RDbkIsR0FDRndCLEVBQU90NEMsS0FBSzg0QixFQUFTc2YsSUFBc0IsRUFBR3RmLEVBQVN1ZixJQUFxQixHQUcxRUMsRUFBT0MsT0FBTSxTQUFVem1DLEdBQ3pCLE9BQU9BLEtBQ0wsQ0FDRmttQyxFQUF3Qm5OLEVBQ3hCa04sR0FBcUIsRUFDckIsTUFHRkYsRUFBVWwzQixJQUFJa3FCLEVBQVd5TixHQUczQixHQUFJUCxFQXFCRixJQW5CQSxJQUVJUyxFQUFRLFNBQWU1eEMsR0FDekIsSUFBSTZ4QyxFQUFtQmxCLEVBQVdub0MsTUFBSyxTQUFVeTdCLEdBQy9DLElBQUl5TixFQUFTVCxFQUFVOTBDLElBQUk4bkMsR0FFM0IsR0FBSXlOLEVBQ0YsT0FBT0EsRUFBTzU0QyxNQUFNLEVBQUdrSCxHQUFJMnhDLE9BQU0sU0FBVXptQyxHQUN6QyxPQUFPQSxRQUtiLEdBQUkybUMsRUFFRixPQURBVCxFQUF3QlMsRUFDakIsU0FJRjd4QyxFQW5CWXN3QyxFQUFpQixFQUFJLEVBbUJadHdDLEVBQUssR0FHcEIsVUFGRjR4QyxFQUFNNXhDLEdBRG1CQSxLQU9wQzBWLEVBQU11dUIsWUFBY21OLElBQ3RCMTdCLEVBQU0reUIsY0FBYzVxQyxHQUFNZ3lDLE9BQVEsRUFDbENuNkIsRUFBTXV1QixVQUFZbU4sRUFDbEIxN0IsRUFBTTlILE9BQVEsS0FVaEJpOEIsaUJBQWtCLENBQUMsVUFDbkI3dkIsS0FBTSxDQUNKNjFCLE9BQU8sSUU3SVgsU0FBU2lDLEdBQWU1ZixFQUFVeU8sRUFBTW9SLEdBUXRDLFlBUHlCLElBQXJCQSxJQUNGQSxFQUFtQixDQUNqQnhMLEVBQUcsRUFDSEMsRUFBRyxJQUlBLENBQ0x6K0IsSUFBS21xQixFQUFTbnFCLElBQU00NEIsRUFBS3JWLE9BQVN5bUIsRUFBaUJ2TCxFQUNuRHRjLE1BQU9nSSxFQUFTaEksTUFBUXlXLEVBQUt6WCxNQUFRNm9CLEVBQWlCeEwsRUFDdERoRCxPQUFRclIsRUFBU3FSLE9BQVM1QyxFQUFLclYsT0FBU3ltQixFQUFpQnZMLEVBQ3pEclksS0FBTStELEVBQVMvRCxLQUFPd1MsRUFBS3pYLE1BQVE2b0IsRUFBaUJ4TCxHQUl4RCxTQUFTeUwsR0FBc0I5ZixHQUM3QixNQUFPLENBQUMsRUFBS2hJLEVBQU9xWixFQUFRcFYsR0FBTThqQixNQUFLLFNBQVVDLEdBQy9DLE9BQU9oZ0IsRUFBU2dnQixJQUFTLEtBaUM3QixVQUNFcjBDLEtBQU0sT0FDTnduQyxTQUFTLEVBQ1RDLE1BQU8sT0FDUHVFLGlCQUFrQixDQUFDLG1CQUNuQmx1QyxHQWxDRixTQUFjNHBDLEdBQ1osSUFBSTd2QixFQUFRNnZCLEVBQUs3dkIsTUFDYjdYLEVBQU8wbkMsRUFBSzFuQyxLQUNabXpDLEVBQWdCdDdCLEVBQU1rekIsTUFBTS9FLFVBQzVCcUcsRUFBYXgwQixFQUFNa3pCLE1BQU1oRixPQUN6Qm1PLEVBQW1CcjhCLEVBQU0reUIsY0FBYzBKLGdCQUN2Q0MsRUFBb0JuRSxHQUFldjRCLEVBQU8sQ0FDNUMrNEIsZUFBZ0IsY0FFZDRELEVBQW9CcEUsR0FBZXY0QixFQUFPLENBQzVDaTVCLGFBQWEsSUFFWDJELEVBQTJCUixHQUFlTSxFQUFtQnBCLEdBQzdEdUIsRUFBc0JULEdBQWVPLEVBQW1CbkksRUFBWTZILEdBQ3BFUyxFQUFvQlIsR0FBc0JNLEdBQzFDRyxFQUFtQlQsR0FBc0JPLEdBQzdDNzhCLEVBQU0reUIsY0FBYzVxQyxHQUFRLENBQzFCeTBDLHlCQUEwQkEsRUFDMUJDLG9CQUFxQkEsRUFDckJDLGtCQUFtQkEsRUFDbkJDLGlCQUFrQkEsR0FFcEIvOEIsRUFBTXRULFdBQVd3aEMsT0FBU2hyQyxPQUFPNnNDLE9BQU8sR0FBSS92QixFQUFNdFQsV0FBV3doQyxPQUFRLENBQ25FLCtCQUFnQzRPLEVBQ2hDLHNCQUF1QkMsTUNGM0IsSUFDRTUwQyxLQUFNLFNBQ053bkMsU0FBUyxFQUNUQyxNQUFPLE9BQ1BXLFNBQVUsQ0FBQyxpQkFDWHRxQyxHQTVCRixTQUFnQmdxQyxHQUNkLElBQUlqd0IsRUFBUWl3QixFQUFNandCLE1BQ2Q5WCxFQUFVK25DLEVBQU0vbkMsUUFDaEJDLEVBQU84bkMsRUFBTTluQyxLQUNiNjBDLEVBQWtCOTBDLEVBQVFxaUMsT0FDMUJBLE9BQTZCLElBQXBCeVMsRUFBNkIsQ0FBQyxFQUFHLEdBQUtBLEVBQy9DMTRCLEVBQU8sVUFBa0IsU0FBVWdxQixFQUFLQyxHQUUxQyxPQURBRCxFQUFJQyxHQTVCRCxTQUFpQ0EsRUFBVzJFLEVBQU8zSSxHQUN4RCxJQUFJeUksRUFBZ0J4QyxFQUFpQmpDLEdBQ2pDME8sRUFBaUIsQ0FBQ3hrQixFQUFNLEdBQUs5MEIsUUFBUXF2QyxJQUFrQixHQUFLLEVBQUksRUFFaEVuRCxFQUF5QixtQkFBWHRGLEVBQXdCQSxFQUFPcm5DLE9BQU82c0MsT0FBTyxHQUFJbUQsRUFBTyxDQUN4RTNFLFVBQVdBLEtBQ1BoRSxFQUNGMlMsRUFBV3JOLEVBQUssR0FDaEJzTixFQUFXdE4sRUFBSyxHQUlwQixPQUZBcU4sRUFBV0EsR0FBWSxFQUN2QkMsR0FBWUEsR0FBWSxHQUFLRixFQUN0QixDQUFDeGtCLEVBQU1qRSxHQUFPN3dCLFFBQVFxdkMsSUFBa0IsRUFBSSxDQUNqRG5DLEVBQUdzTSxFQUNIck0sRUFBR29NLEdBQ0QsQ0FDRnJNLEVBQUdxTSxFQUNIcE0sRUFBR3FNLEdBV2NDLENBQXdCN08sRUFBV3Z1QixFQUFNa3pCLE1BQU8zSSxHQUMxRCtELElBQ04sSUFDQytPLEVBQXdCLzRCLEVBQUt0RSxFQUFNdXVCLFdBQ25Dc0MsRUFBSXdNLEVBQXNCeE0sRUFDMUJDLEVBQUl1TSxFQUFzQnZNLEVBRVcsTUFBckM5d0IsRUFBTSt5QixjQUFjRCxnQkFDdEI5eUIsRUFBTSt5QixjQUFjRCxjQUFjakMsR0FBS0EsRUFDdkM3d0IsRUFBTSt5QixjQUFjRCxjQUFjaEMsR0FBS0EsR0FHekM5d0IsRUFBTSt5QixjQUFjNXFDLEdBQVFtYyxJQ3pCOUIsSUFDRW5jLEtBQU0sZ0JBQ053bkMsU0FBUyxFQUNUQyxNQUFPLE9BQ1AzcEMsR0FwQkYsU0FBdUI0cEMsR0FDckIsSUFBSTd2QixFQUFRNnZCLEVBQUs3dkIsTUFDYjdYLEVBQU8wbkMsRUFBSzFuQyxLQUtoQjZYLEVBQU0reUIsY0FBYzVxQyxHQUFRZ3dDLEdBQWUsQ0FDekNoSyxVQUFXbnVCLEVBQU1rekIsTUFBTS9FLFVBQ3ZCZ0IsUUFBU252QixFQUFNa3pCLE1BQU1oRixPQUNyQmlDLFNBQVUsV0FDVjVCLFVBQVd2dUIsRUFBTXV1QixhQVVuQmpxQixLQUFNLElDZ0hSLElBQ0VuYyxLQUFNLGtCQUNOd25DLFNBQVMsRUFDVEMsTUFBTyxPQUNQM3BDLEdBL0hGLFNBQXlCNHBDLEdBQ3ZCLElBQUk3dkIsRUFBUTZ2QixFQUFLN3ZCLE1BQ2I5WCxFQUFVMm5DLEVBQUszbkMsUUFDZkMsRUFBTzBuQyxFQUFLMW5DLEtBQ1ppeUMsRUFBb0JseUMsRUFBUW93QyxTQUM1QitCLE9BQXNDLElBQXRCRCxHQUFzQ0EsRUFDdERFLEVBQW1CcHlDLEVBQVFxeUMsUUFDM0JDLE9BQW9DLElBQXJCRixHQUFzQ0EsRUFDckQzQixFQUFXendDLEVBQVF5d0MsU0FDbkJFLEVBQWUzd0MsRUFBUTJ3QyxhQUN2QkksRUFBYy93QyxFQUFRK3dDLFlBQ3RCdGdCLEVBQVV6d0IsRUFBUXl3QixRQUNsQjJrQixFQUFrQnAxQyxFQUFRcTFDLE9BQzFCQSxPQUE2QixJQUFwQkQsR0FBb0NBLEVBQzdDRSxFQUF3QnQxQyxFQUFRdTFDLGFBQ2hDQSxPQUF5QyxJQUExQkQsRUFBbUMsRUFBSUEsRUFDdERoaEIsRUFBVytiLEdBQWV2NEIsRUFBTyxDQUNuQzI0QixTQUFVQSxFQUNWRSxhQUFjQSxFQUNkbGdCLFFBQVNBLEVBQ1RzZ0IsWUFBYUEsSUFFWGpHLEVBQWdCeEMsRUFBaUJ4d0IsRUFBTXV1QixXQUN2Q2tHLEVBQVlMLEVBQWFwMEIsRUFBTXV1QixXQUMvQm1QLEdBQW1CakosRUFDbkI2RCxFQUFXaEcsRUFBeUJVLEdBQ3BDdUgsRUNyQ1ksTURxQ1NqQyxFQ3JDSCxJQUFNLElEc0N4QnhGLEVBQWdCOXlCLEVBQU0reUIsY0FBY0QsY0FDcEN3SSxFQUFnQnQ3QixFQUFNa3pCLE1BQU0vRSxVQUM1QnFHLEVBQWF4MEIsRUFBTWt6QixNQUFNaEYsT0FDekJ5UCxFQUE0QyxtQkFBakJGLEVBQThCQSxFQUFhdjZDLE9BQU82c0MsT0FBTyxHQUFJL3ZCLEVBQU1rekIsTUFBTyxDQUN2RzNFLFVBQVd2dUIsRUFBTXV1QixhQUNia1AsRUFDRkcsRUFBMkQsaUJBQXRCRCxFQUFpQyxDQUN4RXJGLFNBQVVxRixFQUNWcEQsUUFBU29ELEdBQ1B6NkMsT0FBTzZzQyxPQUFPLENBQ2hCdUksU0FBVSxFQUNWaUMsUUFBUyxHQUNSb0QsR0FDQ0UsRUFBc0I3OUIsRUFBTSt5QixjQUFjeEksT0FBU3ZxQixFQUFNK3lCLGNBQWN4SSxPQUFPdnFCLEVBQU11dUIsV0FBYSxLQUNqR2pxQixFQUFPLENBQ1R1c0IsRUFBRyxFQUNIQyxFQUFHLEdBR0wsR0FBS2dDLEVBQUwsQ0FJQSxHQUFJdUgsRUFBZSxDQUNqQixJQUFJeUQsRUFFQUMsRUFBd0IsTUFBYnpGLEVBQW1CLEVBQU03ZixFQUNwQ3VsQixFQUF1QixNQUFiMUYsRUFBbUJ6SyxFQUFTclosRUFDdEM1c0IsRUFBbUIsTUFBYjB3QyxFQUFtQixTQUFXLFFBQ3BDL04sRUFBU3VJLEVBQWN3RixHQUN2QjdILEVBQU1sRyxFQUFTL04sRUFBU3VoQixHQUN4QjltQixFQUFNc1QsRUFBUy9OLEVBQVN3aEIsR0FDeEJDLEVBQVdWLEdBQVUvSSxFQUFXNXNDLEdBQU8sRUFBSSxFQUMzQ3MyQyxFQUFTekosSUFBY3IrQixFQUFRa2xDLEVBQWMxekMsR0FBTzRzQyxFQUFXNXNDLEdBQy9EdTJDLEVBQVMxSixJQUFjcitCLEdBQVNvK0IsRUFBVzVzQyxJQUFRMHpDLEVBQWMxekMsR0FHakVpckMsRUFBZTd5QixFQUFNNUwsU0FBU2c4QixNQUM5QmdELEVBQVltSyxHQUFVMUssRUFBZTlCLEVBQWM4QixHQUFnQixDQUNyRXJmLE1BQU8sRUFDUG9DLE9BQVEsR0FFTndvQixHQUFxQnArQixFQUFNK3lCLGNBQWMsb0JBQXNCL3lCLEVBQU0reUIsY0FBYyxvQkFBb0JwYSxReEJoRnRHLENBQ0x0bUIsSUFBSyxFQUNMbWlCLE1BQU8sRUFDUHFaLE9BQVEsRUFDUnBWLEtBQU0sR3dCNkVGNGxCLEdBQWtCRCxHQUFtQkwsR0FDckNPLEdBQWtCRixHQUFtQkosR0FNckNPLEdBQVdoTSxFQUFPLEVBQUcrSSxFQUFjMXpDLEdBQU13ckMsRUFBVXhyQyxJQUNuRDQyQyxHQUFZZCxFQUFrQnBDLEVBQWMxekMsR0FBTyxFQUFJcTJDLEVBQVdNLEdBQVdGLEdBQWtCVCxFQUE0QnRGLFNBQVc0RixFQUFTSyxHQUFXRixHQUFrQlQsRUFBNEJ0RixTQUN4TW1HLEdBQVlmLEdBQW1CcEMsRUFBYzF6QyxHQUFPLEVBQUlxMkMsRUFBV00sR0FBV0QsR0FBa0JWLEVBQTRCdEYsU0FBVzZGLEVBQVNJLEdBQVdELEdBQWtCVixFQUE0QnRGLFNBQ3pNN0UsR0FBb0J6ekIsRUFBTTVMLFNBQVNnOEIsT0FBU3dCLEVBQWdCNXhCLEVBQU01TCxTQUFTZzhCLE9BQzNFc08sR0FBZWpMLEdBQWlDLE1BQWI2RSxFQUFtQjdFLEdBQWtCa0UsV0FBYSxFQUFJbEUsR0FBa0JtRSxZQUFjLEVBQUksRUFDN0grRyxHQUF3SCxPQUFqR2IsRUFBK0MsTUFBdkJELE9BQThCLEVBQVNBLEVBQW9CdkYsSUFBcUJ3RixFQUF3QixFQUV2SmMsR0FBWXJVLEVBQVNrVSxHQUFZRSxHQUNqQ0UsR0FBa0J0TSxFQUFPZ0wsRUFBUyxFQUFROU0sRUFGOUJsRyxFQUFTaVUsR0FBWUcsR0FBc0JELElBRUtqTyxFQUFLbEcsRUFBUWdULEVBQVMsRUFBUXRtQixFQUFLMm5CLElBQWEzbkIsR0FDaEg2YixFQUFjd0YsR0FBWXVHLEdBQzFCdjZCLEVBQUtnMEIsR0FBWXVHLEdBQWtCdFUsRUFHckMsR0FBSWlRLEVBQWMsQ0FDaEIsSUFBSXNFLEdBRUFDLEdBQXlCLE1BQWJ6RyxFQUFtQixFQUFNN2YsRUFFckN1bUIsR0FBd0IsTUFBYjFHLEVBQW1CekssRUFBU3JaLEVBRXZDeXFCLEdBQVVuTSxFQUFjeUgsR0FFeEIyRSxHQUFtQixNQUFaM0UsRUFBa0IsU0FBVyxRQUVwQzRFLEdBQU9GLEdBQVV6aUIsRUFBU3VpQixJQUUxQkssR0FBT0gsR0FBVXppQixFQUFTd2lCLElBRTFCSyxJQUF1RCxJQUF4QyxDQUFDLEVBQUs1bUIsR0FBTTkwQixRQUFRcXZDLEdBRW5Dc00sR0FBeUgsT0FBakdSLEdBQWdELE1BQXZCakIsT0FBOEIsRUFBU0EsRUFBb0J0RCxJQUFvQnVFLEdBQXlCLEVBRXpKUyxHQUFhRixHQUFlRixHQUFPRixHQUFVM0QsRUFBYzRELElBQVExSyxFQUFXMEssSUFBUUksR0FBdUIxQixFQUE0QnJELFFBRXpJaUYsR0FBYUgsR0FBZUosR0FBVTNELEVBQWM0RCxJQUFRMUssRUFBVzBLLElBQVFJLEdBQXVCMUIsRUFBNEJyRCxRQUFVNkUsR0FFNUlLLEdBQW1CbEMsR0FBVThCLEcxQnpIOUIsU0FBd0I1TyxFQUFLeG1DLEVBQU9ndEIsR0FDekMsSUFBSWxaLEVBQUl3MEIsRUFBTzlCLEVBQUt4bUMsRUFBT2d0QixHQUMzQixPQUFPbFosRUFBSWtaLEVBQU1BLEVBQU1sWixFMEJ1SDJCMmhDLENBQWVILEdBQVlOLEdBQVNPLElBQWNqTixFQUFPZ0wsRUFBU2dDLEdBQWFKLEdBQU1GLEdBQVMxQixFQUFTaUMsR0FBYUosSUFFcEt0TSxFQUFjeUgsR0FBV2tGLEdBQ3pCbjdCLEVBQUtpMkIsR0FBV2tGLEdBQW1CUixHQUdyQ2ovQixFQUFNK3lCLGNBQWM1cUMsR0FBUW1jLElBUzVCNnZCLGlCQUFrQixDQUFDLFdFMUhOLFNBQVN3TCxHQUFpQkMsRUFBeUJ2VSxFQUFjeUosUUFDOUQsSUFBWkEsSUFDRkEsR0FBVSxHQUdaLElDbkJvQy92QyxFQ0pPb3FDLEVGdUJ2QzBRLEVBQTBCdFEsRUFBY2xFLEdBQ3hDeVUsRUFBdUJ2USxFQUFjbEUsSUFmM0MsU0FBeUI4RCxHQUN2QixJQUFJbEUsRUFBT2tFLEVBQVE1Vyx3QkFDZm9ZLEVBQVM1YixFQUFNa1csRUFBS3pYLE9BQVMyYixFQUFRdGEsYUFBZSxFQUNwRCtiLEVBQVM3YixFQUFNa1csRUFBS3JWLFFBQVV1WixFQUFRblosY0FBZ0IsRUFDMUQsT0FBa0IsSUFBWDJhLEdBQTJCLElBQVhDLEVBV21DbVAsQ0FBZ0IxVSxHQUN0RXA1QixFQUFrQnUvQixFQUFtQm5HLEdBQ3JDSixFQUFPMVMsRUFBc0JxbkIsRUFBeUJFLEdBQ3REeEosRUFBUyxDQUNYM2MsV0FBWSxFQUNaRCxVQUFXLEdBRVRnYixFQUFVLENBQ1o3RCxFQUFHLEVBQ0hDLEVBQUcsR0FrQkwsT0FmSStPLElBQTRCQSxJQUE0Qi9LLE1BQ3hCLFNBQTlCNUYsRUFBWTdELElBQ2hCMkwsR0FBZS9rQyxNQUNicWtDLEdDbkNnQ3Z4QyxFRG1DVHNtQyxLQ2xDZCtELEVBQVVycUMsSUFBVXdxQyxFQUFjeHFDLEdDSnhDLENBQ0w0MEIsWUFGeUN3VixFRFFicHFDLEdDTlI0MEIsV0FDcEJELFVBQVd5VixFQUFRelYsV0RHWm9kLEdBQWdCL3hDLElEb0NuQndxQyxFQUFjbEUsS0FDaEJxSixFQUFVbmMsRUFBc0I4UyxHQUFjLElBQ3RDd0YsR0FBS3hGLEVBQWF1TSxXQUMxQmxELEVBQVE1RCxHQUFLekYsRUFBYXNNLFdBQ2pCMWxDLElBQ1R5aUMsRUFBUTdELEVBQUlrRyxHQUFvQjlrQyxLQUk3QixDQUNMNCtCLEVBQUc1RixFQUFLeFMsS0FBTzZkLEVBQU8zYyxXQUFhK2EsRUFBUTdELEVBQzNDQyxFQUFHN0YsRUFBSzU0QixJQUFNaWtDLEVBQU81YyxVQUFZZ2IsRUFBUTVELEVBQ3pDdGQsTUFBT3lYLEVBQUt6WCxNQUNab0MsT0FBUXFWLEVBQUtyVixRR3JEakIsU0FBU29xQixHQUFNQyxHQUNiLElBQUkvNEMsRUFBTSxJQUFJczBDLElBQ1YwRSxFQUFVLElBQUlDLElBQ2QxcUMsRUFBUyxHQUtiLFNBQVMxTixFQUFLcTRDLEdBQ1pGLEVBQVEvaUMsSUFBSWlqQyxFQUFTajRDLE1BQ04sR0FBRzNFLE9BQU80OEMsRUFBUzdQLFVBQVksR0FBSTZQLEVBQVNqTSxrQkFBb0IsSUFDdEVyRSxTQUFRLFNBQVV1USxHQUN6QixJQUFLSCxFQUFRcmpDLElBQUl3akMsR0FBTSxDQUNyQixJQUFJQyxFQUFjcDVDLEVBQUlULElBQUk0NUMsR0FFdEJDLEdBQ0Z2NEMsRUFBS3U0QyxPQUlYN3FDLEVBQU8vUixLQUFLMDhDLEdBU2QsT0F6QkFILEVBQVVuUSxTQUFRLFNBQVVzUSxHQUMxQmw1QyxFQUFJbWQsSUFBSSs3QixFQUFTajRDLEtBQU1pNEMsTUFrQnpCSCxFQUFVblEsU0FBUSxTQUFVc1EsR0FDckJGLEVBQVFyakMsSUFBSXVqQyxFQUFTajRDLE9BRXhCSixFQUFLcTRDLE1BR0YzcUMsRUNqQlQsSUFFSThxQyxHQUFrQixDQUNwQmhTLFVBQVcsU0FDWDBSLFVBQVcsR0FDWDlQLFNBQVUsWUFHWixTQUFTcVEsS0FDUCxJQUFLLElBQUl0QixFQUFPOTNDLFVBQVVoQixPQUFRc1EsRUFBTyxJQUFJaE8sTUFBTXcyQyxHQUFPNTdCLEVBQU8sRUFBR0EsRUFBTzQ3QixFQUFNNTdCLElBQy9FNU0sRUFBSzRNLEdBQVFsYyxVQUFVa2MsR0FHekIsT0FBUTVNLEVBQUs2bEMsTUFBSyxTQUFVcE4sR0FDMUIsUUFBU0EsR0FBb0QsbUJBQWxDQSxFQUFRNVcsMEJBSWhDLFNBQVNrb0IsR0FBZ0JDLFFBQ0wsSUFBckJBLElBQ0ZBLEVBQW1CLElBR3JCLElBQUlDLEVBQW9CRCxFQUNwQkUsRUFBd0JELEVBQWtCRSxpQkFDMUNBLE9BQTZDLElBQTFCRCxFQUFtQyxHQUFLQSxFQUMzREUsRUFBeUJILEVBQWtCSSxlQUMzQ0EsT0FBNEMsSUFBM0JELEVBQW9DUCxHQUFrQk8sRUFDM0UsT0FBTyxTQUFzQjNTLEVBQVdELEVBQVFobUMsUUFDOUIsSUFBWkEsSUFDRkEsRUFBVTY0QyxHQUdaLElDL0M2Qjk2QyxFQUMzQis2QyxFRDhDRWhoQyxFQUFRLENBQ1Z1dUIsVUFBVyxTQUNYMFMsaUJBQWtCLEdBQ2xCLzRDLFFBQVNoRixPQUFPNnNDLE9BQU8sR0FBSXdRLEdBQWlCUSxHQUM1Q2hPLGNBQWUsR0FDZjMrQixTQUFVLENBQ1IrNUIsVUFBV0EsRUFDWEQsT0FBUUEsR0FFVnhoQyxXQUFZLEdBQ1o0cUIsT0FBUSxJQUVONHBCLEVBQW1CLEdBQ25CQyxHQUFjLEVBQ2QvSyxFQUFXLENBQ2JwMkIsTUFBT0EsRUFDUG9oQyxXQUFZLFNBQW9CQyxHQUM5QixJQUFJbjVDLEVBQXNDLG1CQUFyQm01QyxFQUFrQ0EsRUFBaUJyaEMsRUFBTTlYLFNBQVdtNUMsRUFDekZDLElBQ0F0aEMsRUFBTTlYLFFBQVVoRixPQUFPNnNDLE9BQU8sR0FBSWdSLEVBQWdCL2dDLEVBQU05WCxRQUFTQSxHQUNqRThYLEVBQU15MkIsY0FBZ0IsQ0FDcEJ0SSxVQUFXa0IsRUFBVWxCLEdBQWFnSixHQUFrQmhKLEdBQWFBLEVBQVV5TCxlQUFpQnpDLEdBQWtCaEosRUFBVXlMLGdCQUFrQixHQUMxSTFMLE9BQVFpSixHQUFrQmpKLElBSTVCLElFekU0QitSLEVBQzlCc0IsRUZ3RU1OLEVEdkNHLFNBQXdCaEIsR0FFckMsSUFBSWdCLEVBQW1CakIsR0FBTUMsR0FFN0IsT0FBT2hSLEVBQWVaLFFBQU8sU0FBVUMsRUFBS3NCLEdBQzFDLE9BQU90QixFQUFJOXFDLE9BQU95OUMsRUFBaUJydUMsUUFBTyxTQUFVd3RDLEdBQ2xELE9BQU9BLEVBQVN4USxRQUFVQSxRQUUzQixJQytCMEI0UixFRXpFS3ZCLEVGeUVzQixHQUFHejhDLE9BQU9xOUMsRUFBa0I3Z0MsRUFBTTlYLFFBQVErM0MsV0V4RTlGc0IsRUFBU3RCLEVBQVU1UixRQUFPLFNBQVVrVCxFQUFRamEsR0FDOUMsSUFBSW1hLEVBQVdGLEVBQU9qYSxFQUFRbi9CLE1BSzlCLE9BSkFvNUMsRUFBT2phLEVBQVFuL0IsTUFBUXM1QyxFQUFXditDLE9BQU82c0MsT0FBTyxHQUFJMFIsRUFBVW5hLEVBQVMsQ0FDckVwL0IsUUFBU2hGLE9BQU82c0MsT0FBTyxHQUFJMFIsRUFBU3Y1QyxRQUFTby9CLEVBQVFwL0IsU0FDckRvYyxLQUFNcGhCLE9BQU82c0MsT0FBTyxHQUFJMFIsRUFBU245QixLQUFNZ2pCLEVBQVFoakIsUUFDNUNnakIsRUFDRWlhLElBQ04sSUFFSXIrQyxPQUFPcU4sS0FBS2d4QyxHQUFRcjZDLEtBQUksU0FBVXVKLEdBQ3ZDLE9BQU84d0MsRUFBTzl3QyxRRnVHVixPQXZDQXVQLEVBQU1paEMsaUJBQW1CQSxFQUFpQnJ1QyxRQUFPLFNBQVUxRCxHQUN6RCxPQUFPQSxFQUFFeWdDLFdBcUpiM3ZCLEVBQU1paEMsaUJBQWlCblIsU0FBUSxTQUFVbUYsR0FDdkMsSUFBSTlzQyxFQUFPOHNDLEVBQU05c0MsS0FDYnU1QyxFQUFnQnpNLEVBQU0vc0MsUUFDdEJBLE9BQTRCLElBQWxCdzVDLEVBQTJCLEdBQUtBLEVBQzFDMVIsRUFBU2lGLEVBQU1qRixPQUVuQixHQUFzQixtQkFBWEEsRUFBdUIsQ0FDaEMsSUFBSTJSLEVBQVkzUixFQUFPLENBQ3JCaHdCLE1BQU9BLEVBQ1A3WCxLQUFNQSxFQUNOaXVDLFNBQVVBLEVBQ1ZsdUMsUUFBU0EsSUFLWGc1QyxFQUFpQng5QyxLQUFLaStDLEdBRlQsa0JBN0hSdkwsRUFBU08sVUFPbEJpTCxZQUFhLFdBQ1gsSUFBSVQsRUFBSixDQUlBLElBQUlVLEVBQWtCN2hDLEVBQU01TCxTQUN4Qis1QixFQUFZMFQsRUFBZ0IxVCxVQUM1QkQsRUFBUzJULEVBQWdCM1QsT0FHN0IsR0FBS3NTLEdBQWlCclMsRUFBV0QsR0FBakMsQ0FTQWx1QixFQUFNa3pCLE1BQVEsQ0FDWi9FLFVBQVd3UixHQUFpQnhSLEVBQVd5RCxFQUFnQjFELEdBQW9DLFVBQTNCbHVCLEVBQU05WCxRQUFRaW9DLFVBQzlFakMsT0FBUTZDLEVBQWM3QyxJQU94Qmx1QixFQUFNOUgsT0FBUSxFQUNkOEgsRUFBTXV1QixVQUFZdnVCLEVBQU05WCxRQUFRcW1DLFVBS2hDdnVCLEVBQU1paEMsaUJBQWlCblIsU0FBUSxTQUFVc1EsR0FDdkMsT0FBT3BnQyxFQUFNK3lCLGNBQWNxTixFQUFTajRDLE1BQVFqRixPQUFPNnNDLE9BQU8sR0FBSXFRLEVBQVM5N0IsU0FJekUsSUFGQSxJQUVTckgsRUFBUSxFQUFHQSxFQUFRK0MsRUFBTWloQyxpQkFBaUI3NkMsT0FBUTZXLElBVXpELElBQW9CLElBQWhCK0MsRUFBTTlILE1BQVYsQ0FNQSxJQUFJNHBDLEVBQXdCOWhDLEVBQU1paEMsaUJBQWlCaGtDLEdBQy9DaFgsRUFBSzY3QyxFQUFzQjc3QyxHQUMzQjg3QyxFQUF5QkQsRUFBc0I1NUMsUUFDL0Nzd0MsT0FBc0MsSUFBM0J1SixFQUFvQyxHQUFLQSxFQUNwRDU1QyxFQUFPMjVDLEVBQXNCMzVDLEtBRWYsbUJBQVBsQyxJQUNUK1osRUFBUS9aLEVBQUcsQ0FDVCtaLE1BQU9BLEVBQ1A5WCxRQUFTc3dDLEVBQ1Ryd0MsS0FBTUEsRUFDTml1QyxTQUFVQSxLQUNOcDJCLFFBakJOQSxFQUFNOUgsT0FBUSxFQUNkK0UsR0FBUyxLQXNCZjA1QixRQ2xNMkIxd0MsRURrTVYsV0FDZixPQUFPLElBQUkrN0MsU0FBUSxTQUFVN2pDLEdBQzNCaTRCLEVBQVN3TCxjQUNUempDLEVBQVE2QixPQ25NVCxXQVVMLE9BVEtnaEMsSUFDSEEsRUFBVSxJQUFJZ0IsU0FBUSxTQUFVN2pDLEdBQzlCNmpDLFFBQVE3akMsVUFBVU0sTUFBSyxXQUNyQnVpQyxPQUFVcDRDLEVBQ1Z1VixFQUFRbFksWUFLUCs2QyxJRDRMTGlCLFFBQVMsV0FDUFgsSUFDQUgsR0FBYyxJQUlsQixJQUFLWCxHQUFpQnJTLEVBQVdELEdBSy9CLE9BQU9rSSxFQW1DVCxTQUFTa0wsSUFDUEosRUFBaUJwUixTQUFRLFNBQVU3cEMsR0FDakMsT0FBT0EsT0FFVGk3QyxFQUFtQixHQUdyQixPQXZDQTlLLEVBQVNnTCxXQUFXbDVDLEdBQVN1VyxNQUFLLFNBQVV1QixJQUNyQ21oQyxHQUFlajVDLEVBQVFnNkMsZUFDMUJoNkMsRUFBUWc2QyxjQUFjbGlDLE1BcUNuQm8yQixHQUdKLElBQUkrTCxHQUE0QjFCLEtHclBuQyxHQUE0QkEsR0FBZ0IsQ0FDOUNJLGlCQUZxQixDQUFDdUIsR0FBZ0IsR0FBZSxHQUFlLEVBQWEsR0FBUSxHQUFNLEdBQWlCLEVBQU8sTUNKckgsR0FBNEIzQixHQUFnQixDQUM5Q0ksaUJBRnFCLENBQUN1QixHQUFnQixHQUFlLEdBQWUsS0NRdEUsTUFFTUMsR0FBaUIsZ0JBd0JqQkMsR0FBY25ULElBQ2xCLElBQUlwcEMsRUFBV29wQyxFQUFRN3BDLGFBQWEsa0JBRXBDLElBQUtTLEdBQXlCLE1BQWJBLEVBQWtCLENBQ2pDLElBQUl3OEMsRUFBV3BULEVBQVE3cEMsYUFBYSxRQUtwQyxJQUFLaTlDLElBQWFBLEVBQVNDLFNBQVMsT0FBU0QsRUFBU0UsV0FBVyxLQUMvRCxPQUFPLEtBSUxGLEVBQVNDLFNBQVMsT0FBU0QsRUFBU0UsV0FBVyxPQUNqREYsRUFBVyxJQUFJQSxFQUFTbDRDLE1BQU0sS0FBSyxNQUdyQ3RFLEVBQVd3OEMsR0FBeUIsTUFBYkEsRUFBbUJBLEVBQVMvVixPQUFTLEtBRzlELE9BQU96bUMsR0FHSDI4QyxHQUF5QnZULElBQzdCLE1BQU1wcEMsRUFBV3U4QyxHQUFZblQsR0FFN0IsT0FBSXBwQyxHQUNLckQsU0FBU3d4QyxjQUFjbnVDLEdBQVlBLEVBR3JDLE1BR0g0OEMsR0FBeUJ4VCxJQUM3QixNQUFNcHBDLEVBQVd1OEMsR0FBWW5ULEdBQzdCLE9BQU9wcEMsRUFBV3JELFNBQVN3eEMsY0FBY251QyxHQUFZLE1BMEJqRDY4QyxHQUF1QnpULElBQzNCQSxFQUFRMFQsY0FBYyxJQUFJMzNCLE1BQU1tM0IsTUFHNUIsR0FBWWorQyxNQUNYQSxHQUFzQixpQkFBUkEsVUFJTyxJQUFmQSxFQUFJa0MsU0FDYmxDLEVBQU1BLEVBQUksU0FHbUIsSUFBakJBLEVBQUlDLFVBR2R5K0MsR0FBYTErQyxHQUNiLEdBQVVBLEdBRUxBLEVBQUlrQyxPQUFTbEMsRUFBSSxHQUFLQSxFQUdaLGlCQUFSQSxHQUFvQkEsRUFBSWdDLE9BQVMsRUFDbkMxRCxTQUFTd3hDLGNBQWM5dkMsR0FHekIsS0FHSDIrQyxHQUFrQixDQUFDQyxFQUFlQyxFQUFRQyxLQUM5Q2hnRCxPQUFPcU4sS0FBSzJ5QyxHQUFhcFQsU0FBUU8sSUFDL0IsTUFBTThTLEVBQWdCRCxFQUFZN1MsR0FDNUJwbUMsRUFBUWc1QyxFQUFPNVMsR0FDZitTLEVBQVluNUMsR0FBUyxHQUFVQSxHQUFTLFVBcEg1QzdGLE9BRFNBLEVBcUhzRDZGLEdBbkgxRCxHQUFHN0YsSUFHTCxHQUFHUCxTQUFTTixLQUFLYSxHQUFLZ0wsTUFBTSxlQUFlLEdBQUc3RSxjQUx4Q25HLElBQUFBLEVBdUhYLElBQUssSUFBSXlJLE9BQU9zMkMsR0FBZXB6QyxLQUFLcXpDLEdBQ2xDLE1BQU0sSUFBSWxpQyxVQUFVLEdBQUc4aEMsRUFBY3AvQiwwQkFBMEJ5c0IscUJBQTRCK1MseUJBQWlDRCxXQUs1SEUsR0FBWWxVLE1BQ1gsR0FBVUEsSUFBZ0QsSUFBcENBLEVBQVFyWCxpQkFBaUIxeEIsU0FJZ0IsWUFBN0Q4c0IsaUJBQWlCaWMsR0FBU3hiLGlCQUFpQixjQUc5Q2hpQixHQUFhdzlCLElBQ1pBLEdBQVdBLEVBQVE5cUMsV0FBYWkvQyxLQUFLQyxnQkFJdENwVSxFQUFRcVUsVUFBVWo0QyxTQUFTLG1CQUlDLElBQXJCNGpDLEVBQVF6Z0MsU0FDVnlnQyxFQUFRemdDLFNBR1Z5Z0MsRUFBUXNVLGFBQWEsYUFBb0QsVUFBckN0VSxFQUFRN3BDLGFBQWEsYUFHNURvK0MsR0FBaUJ2VSxJQUNyQixJQUFLenNDLFNBQVN1UCxnQkFBZ0IweEMsYUFDNUIsT0FBTyxLQUlULEdBQW1DLG1CQUF4QnhVLEVBQVFocEIsWUFBNEIsQ0FDN0MsTUFBTWprQixFQUFPaXRDLEVBQVFocEIsY0FDckIsT0FBT2prQixhQUFnQnd0QyxXQUFheHRDLEVBQU8sS0FHN0MsT0FBSWl0QyxhQUFtQk8sV0FDZFAsRUFJSkEsRUFBUXpwQyxXQUlOZytDLEdBQWV2VSxFQUFRenBDLFlBSHJCLE1BTUwwRCxHQUFPLE9BV1B3NkMsR0FBU3pVLElBRWJBLEVBQVFuWixjQUdKNnRCLEdBQVksS0FDaEIsTUFBTSxPQUNKLzlDLEdBQ0VqRCxPQUVKLE9BQUlpRCxJQUFXcEQsU0FBUzJrQixLQUFLbzhCLGFBQWEscUJBQ2pDMzlDLEVBR0YsTUFHSGcrQyxHQUE0QixHQWlCNUJDLEdBQVEsSUFBdUMsUUFBakNyaEQsU0FBU3VQLGdCQUFnQnJELElBRXZDbzFDLEdBQXFCQyxJQWpCQWg5QyxJQUFBQSxFQUFBQSxFQWtCTixLQUNqQixNQUFNMGxDLEVBQUlrWCxLQUdWLEdBQUlsWCxFQUFHLENBQ0wsTUFBTXhrQyxFQUFPODdDLEVBQU9DLEtBQ2RDLEVBQXFCeFgsRUFBRTFtQyxHQUFHa0MsR0FDaEN3a0MsRUFBRTFtQyxHQUFHa0MsR0FBUTg3QyxFQUFPRyxnQkFDcEJ6WCxFQUFFMW1DLEdBQUdrQyxHQUFNazhDLFlBQWNKLEVBRXpCdFgsRUFBRTFtQyxHQUFHa0MsR0FBTXlrQyxXQUFhLEtBQ3RCRCxFQUFFMW1DLEdBQUdrQyxHQUFRZzhDLEVBQ05GLEVBQU9HLG1CQTdCUSxZQUF4QjFoRCxTQUFTcWdCLFlBRU4rZ0MsR0FBMEIxOUMsUUFDN0IxRCxTQUFTNFAsaUJBQWlCLG9CQUFvQixLQUM1Q3d4QyxHQUEwQmhVLFNBQVE3b0MsR0FBWUEsU0FJbEQ2OEMsR0FBMEJwZ0QsS0FBS3VELElBRS9CQSxLQXlCRXE5QyxHQUFVcjlDLElBQ1UsbUJBQWJBLEdBQ1RBLEtBSUVzOUMsR0FBeUIsQ0FBQ3Q5QyxFQUFVdTlDLEVBQW1CQyxHQUFvQixLQUMvRSxJQUFLQSxFQUVILFlBREFILEdBQVFyOUMsR0FJVixNQUNNeTlDLEVBOUxpQ3ZWLENBQUFBLElBQ3ZDLElBQUtBLEVBQ0gsT0FBTyxFQUlULElBQUksbUJBQ0Z3VixFQUFrQixnQkFDbEJDLEdBQ0UvaEQsT0FBT3F3QixpQkFBaUJpYyxHQUM1QixNQUFNMFYsRUFBMEJDLE9BQU85dkIsV0FBVzJ2QixHQUM1Q0ksRUFBdUJELE9BQU85dkIsV0FBVzR2QixHQUUvQyxPQUFLQyxHQUE0QkUsR0FLakNKLEVBQXFCQSxFQUFtQnQ2QyxNQUFNLEtBQUssR0FDbkR1NkMsRUFBa0JBLEVBQWdCdjZDLE1BQU0sS0FBSyxHQW5GZixLQW9GdEJ5NkMsT0FBTzl2QixXQUFXMnZCLEdBQXNCRyxPQUFPOXZCLFdBQVc0dkIsS0FOekQsR0FnTGdCSSxDQUFpQ1IsR0FEbEMsRUFFeEIsSUFBSVMsR0FBUyxFQUViLE1BQU1oMEMsRUFBVSxFQUNkMUksT0FBQUEsTUFFSUEsSUFBV2k4QyxJQUlmUyxHQUFTLEVBQ1RULEVBQWtCN2hDLG9CQUFvQjAvQixHQUFnQnB4QyxHQUN0RHF6QyxHQUFRcjlDLEtBR1Z1OUMsRUFBa0JseUMsaUJBQWlCK3ZDLEdBQWdCcHhDLEdBQ25EeVEsWUFBVyxLQUNKdWpDLEdBQ0hyQyxHQUFxQjRCLEtBRXRCRSxJQWFDUSxHQUF1QixDQUFDNTRDLEVBQU04SyxFQUFlK3RDLEVBQWVDLEtBQ2hFLElBQUlub0MsRUFBUTNRLEVBQUszSSxRQUFReVQsR0FFekIsSUFBZSxJQUFYNkYsRUFDRixPQUFPM1EsR0FBTTY0QyxHQUFpQkMsRUFBaUI5NEMsRUFBS2xHLE9BQVMsRUFBSSxHQUduRSxNQUFNaS9DLEVBQWEvNEMsRUFBS2xHLE9BT3hCLE9BTkE2VyxHQUFTa29DLEVBQWdCLEdBQUssRUFFMUJDLElBQ0Zub0MsR0FBU0EsRUFBUW9vQyxHQUFjQSxHQUcxQi80QyxFQUFLeEQsS0FBS211QixJQUFJLEVBQUdudUIsS0FBSzJuQyxJQUFJeHpCLEVBQU9vb0MsRUFBYSxNQWVqREMsR0FBaUIscUJBQ2pCQyxHQUFpQixPQUNqQkMsR0FBZ0IsU0FDaEJDLEdBQWdCLEdBRXRCLElBQUlDLEdBQVcsRUFDZixNQUFNQyxHQUFlLENBQ25CejFCLFdBQVksWUFDWkMsV0FBWSxZQUVSeTFCLEdBQW9CLDRCQUNwQkMsR0FBZSxJQUFJMUYsSUFBSSxDQUFDLFFBQVMsV0FBWSxVQUFXLFlBQWEsY0FBZSxhQUFjLGlCQUFrQixZQUFhLFdBQVksWUFBYSxjQUFlLFlBQWEsVUFBVyxXQUFZLFFBQVMsb0JBQXFCLGFBQWMsWUFBYSxXQUFZLGNBQWUsY0FBZSxjQUFlLFlBQWEsZUFBZ0IsZ0JBQWlCLGVBQWdCLGdCQUFpQixhQUFjLFFBQVMsT0FBUSxTQUFVLFFBQVMsU0FBVSxTQUFVLFVBQVcsV0FBWSxPQUFRLFNBQVUsZUFBZ0IsU0FBVSxPQUFRLG1CQUFvQixtQkFBb0IsUUFBUyxRQUFTLFdBTy9sQixTQUFTMkYsR0FBWTNXLEVBQVNqckIsR0FDNUIsT0FBT0EsR0FBTyxHQUFHQSxNQUFRd2hDLFFBQWdCdlcsRUFBUXVXLFVBQVlBLEtBRy9ELFNBQVNLLEdBQVM1VyxHQUNoQixNQUFNanJCLEVBQU00aEMsR0FBWTNXLEdBR3hCLE9BRkFBLEVBQVF1VyxTQUFXeGhDLEVBQ25CdWhDLEdBQWN2aEMsR0FBT3VoQyxHQUFjdmhDLElBQVEsR0FDcEN1aEMsR0FBY3ZoQyxHQXdDdkIsU0FBUzhoQyxHQUFZMzZCLEVBQVFwYSxFQUFTZzFDLEVBQXFCLE1BQ3pELE1BQU1DLEVBQWVoakQsT0FBT3FOLEtBQUs4YSxHQUVqQyxJQUFLLElBQUlwbUIsRUFBSSxFQUFHMkMsRUFBTXMrQyxFQUFhOS9DLE9BQVFuQixFQUFJMkMsRUFBSzNDLElBQUssQ0FDdkQsTUFBTXNsQixFQUFRYyxFQUFPNjZCLEVBQWFqaEQsSUFFbEMsR0FBSXNsQixFQUFNNDdCLGtCQUFvQmwxQyxHQUFXc1osRUFBTTA3QixxQkFBdUJBLEVBQ3BFLE9BQU8xN0IsRUFJWCxPQUFPLEtBR1QsU0FBUzY3QixHQUFnQkMsRUFBbUJwMUMsRUFBU3ExQyxHQUNuRCxNQUFNQyxFQUFnQyxpQkFBWnQxQyxFQUNwQmsxQyxFQUFrQkksRUFBYUQsRUFBZXIxQyxFQUNwRCxJQUFJdTFDLEVBQVlDLEdBQWFKLEdBTzdCLE9BTmlCUixHQUFhaHBDLElBQUkycEMsS0FHaENBLEVBQVlILEdBR1AsQ0FBQ0UsRUFBWUosRUFBaUJLLEdBR3ZDLFNBQVNFLEdBQVd2WCxFQUFTa1gsRUFBbUJwMUMsRUFBU3ExQyxFQUFjSyxHQUNyRSxHQUFpQyxpQkFBdEJOLElBQW1DbFgsRUFDNUMsT0FVRixHQVBLbCtCLElBQ0hBLEVBQVVxMUMsRUFDVkEsRUFBZSxNQUtiVixHQUFrQjcxQyxLQUFLczJDLEdBQW9CLENBQzdDLE1BQU1PLEVBQVMzZ0QsR0FDTixTQUFVc2tCLEdBQ2YsSUFBS0EsRUFBTTBELGVBQWlCMUQsRUFBTTBELGdCQUFrQjFELEVBQU1tQyxpQkFBbUJuQyxFQUFNbUMsZUFBZW5oQixTQUFTZ2YsRUFBTTBELGVBQy9HLE9BQU9ob0IsRUFBRzFDLEtBQUtULEtBQU15bkIsSUFLdkIrN0IsRUFDRkEsRUFBZU0sRUFBT04sR0FFdEJyMUMsRUFBVTIxQyxFQUFPMzFDLEdBSXJCLE1BQU9zMUMsRUFBWUosRUFBaUJLLEdBQWFKLEdBQWdCQyxFQUFtQnAxQyxFQUFTcTFDLEdBQ3ZGajdCLEVBQVMwNkIsR0FBUzVXLEdBQ2xCM2pCLEVBQVdILEVBQU9tN0IsS0FBZW43QixFQUFPbTdCLEdBQWEsSUFDckRLLEVBQWFiLEdBQVl4NkIsRUFBVTI2QixFQUFpQkksRUFBYXQxQyxFQUFVLE1BRWpGLEdBQUk0MUMsRUFFRixZQURBQSxFQUFXRixPQUFTRSxFQUFXRixRQUFVQSxHQUkzQyxNQUFNemlDLEVBQU00aEMsR0FBWUssRUFBaUJFLEVBQWtCcjlDLFFBQVFzOEMsR0FBZ0IsS0FDN0VyL0MsRUFBS3NnRCxFQTNGYixTQUFvQ3BYLEVBQVNwcEMsRUFBVUUsR0FDckQsT0FBTyxTQUFTZ0wsRUFBUXNaLEdBQ3RCLE1BQU11OEIsRUFBYzNYLEVBQVEvK0IsaUJBQWlCckssR0FFN0MsSUFBSyxJQUFJLE9BQ1B3QyxHQUNFZ2lCLEVBQU9oaUIsR0FBVUEsSUFBV3pGLEtBQU15RixFQUFTQSxFQUFPN0MsV0FDcEQsSUFBSyxJQUFJVCxFQUFJNmhELEVBQVkxZ0QsT0FBUW5CLEtBQy9CLEdBQUk2aEQsRUFBWTdoRCxLQUFPc0QsRUFPckIsT0FOQWdpQixFQUFNbUMsZUFBaUJua0IsRUFFbkIwSSxFQUFRMDFDLFFBQ1ZJLEdBQWF2OEIsSUFBSTJrQixFQUFTNWtCLEVBQU05bEIsS0FBTXNCLEVBQVVFLEdBRzNDQSxFQUFHeEMsTUFBTThFLEVBQVEsQ0FBQ2dpQixJQU0vQixPQUFPLE1Bc0VleThCLENBQTJCN1gsRUFBU2wrQixFQUFTcTFDLEdBdkd2RSxTQUEwQm5YLEVBQVNscEMsR0FDakMsT0FBTyxTQUFTZ0wsRUFBUXNaLEdBT3RCLE9BTkFBLEVBQU1tQyxlQUFpQnlpQixFQUVuQmwrQixFQUFRMDFDLFFBQ1ZJLEdBQWF2OEIsSUFBSTJrQixFQUFTNWtCLEVBQU05bEIsS0FBTXdCLEdBR2pDQSxFQUFHeEMsTUFBTTByQyxFQUFTLENBQUM1a0IsS0ErRnlEMDhCLENBQWlCOVgsRUFBU2wrQixHQUMvR2hMLEVBQUdnZ0QsbUJBQXFCTSxFQUFhdDFDLEVBQVUsS0FDL0NoTCxFQUFHa2dELGdCQUFrQkEsRUFDckJsZ0QsRUFBRzBnRCxPQUFTQSxFQUNaMWdELEVBQUd5L0MsU0FBV3hoQyxFQUNkc0gsRUFBU3RILEdBQU9qZSxFQUNoQmtwQyxFQUFRNzhCLGlCQUFpQmswQyxFQUFXdmdELEVBQUlzZ0QsR0FHMUMsU0FBU1csR0FBYy9YLEVBQVM5akIsRUFBUW03QixFQUFXdjFDLEVBQVNnMUMsR0FDMUQsTUFBTWhnRCxFQUFLKy9DLEdBQVkzNkIsRUFBT203QixHQUFZdjFDLEVBQVNnMUMsR0FFOUNoZ0QsSUFJTGtwQyxFQUFReHNCLG9CQUFvQjZqQyxFQUFXdmdELEVBQUlraEQsUUFBUWxCLFdBQzVDNTZCLEVBQU9tN0IsR0FBV3ZnRCxFQUFHeS9DLFdBYTlCLFNBQVNlLEdBQWFsOEIsR0FHcEIsT0FEQUEsRUFBUUEsRUFBTXZoQixRQUFRdThDLEdBQWdCLElBQy9CSSxHQUFhcDdCLElBQVVBLEVBR2hDLE1BQU13OEIsR0FBZSxDQUNuQjU4QixHQUFHZ2xCLEVBQVM1a0IsRUFBT3RaLEVBQVNxMUMsR0FDMUJJLEdBQVd2WCxFQUFTNWtCLEVBQU90WixFQUFTcTFDLEdBQWMsSUFHcERqOEIsSUFBSThrQixFQUFTNWtCLEVBQU90WixFQUFTcTFDLEdBQzNCSSxHQUFXdlgsRUFBUzVrQixFQUFPdFosRUFBU3ExQyxHQUFjLElBR3BEOTdCLElBQUkya0IsRUFBU2tYLEVBQW1CcDFDLEVBQVNxMUMsR0FDdkMsR0FBaUMsaUJBQXRCRCxJQUFtQ2xYLEVBQzVDLE9BR0YsTUFBT29YLEVBQVlKLEVBQWlCSyxHQUFhSixHQUFnQkMsRUFBbUJwMUMsRUFBU3ExQyxHQUN2RmMsRUFBY1osSUFBY0gsRUFDNUJoN0IsRUFBUzA2QixHQUFTNVcsR0FDbEJrWSxFQUFjaEIsRUFBa0I1RCxXQUFXLEtBRWpELFFBQStCLElBQXBCMEQsRUFBaUMsQ0FFMUMsSUFBSzk2QixJQUFXQSxFQUFPbTdCLEdBQ3JCLE9BSUYsWUFEQVUsR0FBYy9YLEVBQVM5akIsRUFBUW03QixFQUFXTCxFQUFpQkksRUFBYXQxQyxFQUFVLE1BSWhGbzJDLEdBQ0Zua0QsT0FBT3FOLEtBQUs4YSxHQUFReWtCLFNBQVF3WCxLQTlDbEMsU0FBa0NuWSxFQUFTOWpCLEVBQVFtN0IsRUFBV3owQyxHQUM1RCxNQUFNdzFDLEVBQW9CbDhCLEVBQU9tN0IsSUFBYyxHQUMvQ3RqRCxPQUFPcU4sS0FBS2czQyxHQUFtQnpYLFNBQVEwWCxJQUNyQyxHQUFJQSxFQUFXaEYsU0FBU3p3QyxHQUFZLENBQ2xDLE1BQU13WSxFQUFRZzlCLEVBQWtCQyxHQUNoQ04sR0FBYy9YLEVBQVM5akIsRUFBUW03QixFQUFXajhCLEVBQU00N0IsZ0JBQWlCNTdCLEVBQU0wN0Isd0JBMENyRXdCLENBQXlCdFksRUFBUzlqQixFQUFRaThCLEVBQWNqQixFQUFrQmpqRCxNQUFNLE9BSXBGLE1BQU1ta0QsRUFBb0JsOEIsRUFBT203QixJQUFjLEdBQy9DdGpELE9BQU9xTixLQUFLZzNDLEdBQW1CelgsU0FBUTRYLElBQ3JDLE1BQU1GLEVBQWFFLEVBQVkxK0MsUUFBUXc4QyxHQUFlLElBRXRELElBQUs0QixHQUFlZixFQUFrQjdELFNBQVNnRixHQUFhLENBQzFELE1BQU1qOUIsRUFBUWc5QixFQUFrQkcsR0FDaENSLEdBQWMvWCxFQUFTOWpCLEVBQVFtN0IsRUFBV2o4QixFQUFNNDdCLGdCQUFpQjU3QixFQUFNMDdCLHlCQUs3RWg3QixRQUFRa2tCLEVBQVM1a0IsRUFBTzdULEdBQ3RCLEdBQXFCLGlCQUFWNlQsSUFBdUI0a0IsRUFDaEMsT0FBTyxLQUdULE1BQU14QyxFQUFJa1gsS0FDSjJDLEVBQVlDLEdBQWFsOEIsR0FDekI2OEIsRUFBYzc4QixJQUFVaThCLEVBQ3hCbUIsRUFBVzlCLEdBQWFocEMsSUFBSTJwQyxHQUNsQyxJQUFJb0IsRUFDQXQ1QixHQUFVLEVBQ1Z1NUIsR0FBaUIsRUFDakI3NUIsR0FBbUIsRUFDbkJ1YixFQUFNLEtBNENWLE9BMUNJNmQsR0FBZXphLElBQ2pCaWIsRUFBY2piLEVBQUV6aEIsTUFBTVgsRUFBTzdULEdBQzdCaTJCLEVBQUV3QyxHQUFTbGtCLFFBQVEyOEIsR0FDbkJ0NUIsR0FBV3M1QixFQUFZaDdCLHVCQUN2Qmk3QixHQUFrQkQsRUFBWTk2QixnQ0FDOUJrQixFQUFtQjQ1QixFQUFZNzVCLHNCQUc3QjQ1QixHQUNGcGUsRUFBTTdtQyxTQUFTb2xELFlBQVksY0FDM0J2ZSxFQUFJd2UsVUFBVXZCLEVBQVdsNEIsR0FBUyxJQUVsQ2liLEVBQU0sSUFBSXllLFlBQVl6OUIsRUFBTyxDQUMzQitELFFBQUFBLEVBQ0FDLFlBQVksU0FLSSxJQUFUN1gsR0FDVHhULE9BQU9xTixLQUFLbUcsR0FBTW81QixTQUFRci9CLElBQ3hCdk4sT0FBT2loQixlQUFlb2xCLEVBQUs5NEIsRUFBSyxDQUM5QmhLLElBQUcsSUFDTWlRLEVBQUtqRyxRQU9oQnVkLEdBQ0Z1YixFQUFJdmUsaUJBR0Y2OEIsR0FDRjFZLEVBQVEwVCxjQUFjdFosR0FHcEJBLEVBQUl2Yix1QkFBMkMsSUFBaEI0NUIsR0FDakNBLEVBQVk1OEIsaUJBR1B1ZSxJQWlCTDBlLEdBQWEsSUFBSXpNLElBQ2pCdjNCLEdBQU8sQ0FDWEksSUFBSThxQixFQUFTMStCLEVBQUsybEMsR0FDWDZSLEdBQVdwckMsSUFBSXN5QixJQUNsQjhZLEdBQVc1akMsSUFBSThxQixFQUFTLElBQUlxTSxLQUc5QixNQUFNME0sRUFBY0QsR0FBV3hoRCxJQUFJMG9DLEdBRzlCK1ksRUFBWXJyQyxJQUFJcE0sSUFBNkIsSUFBckJ5M0MsRUFBWUMsS0FNekNELEVBQVk3akMsSUFBSTVULEVBQUsybEMsR0FKbkIvekIsUUFBUW5aLE1BQU0sK0VBQStFUixNQUFNMC9DLEtBQUtGLEVBQVkzM0MsUUFBUSxRQU9oSTlKLElBQUcsQ0FBQzBvQyxFQUFTMStCLElBQ1B3M0MsR0FBV3ByQyxJQUFJc3lCLElBQ1Y4WSxHQUFXeGhELElBQUkwb0MsR0FBUzFvQyxJQUFJZ0ssSUFHOUIsS0FHVCtPLE9BQU8ydkIsRUFBUzErQixHQUNkLElBQUt3M0MsR0FBV3ByQyxJQUFJc3lCLEdBQ2xCLE9BR0YsTUFBTStZLEVBQWNELEdBQVd4aEQsSUFBSTBvQyxHQUNuQytZLEVBQVlHLE9BQU81M0MsR0FFTSxJQUFyQnkzQyxFQUFZQyxNQUNkRixHQUFXSSxPQUFPbFosS0FvQnhCLE1BQU1tWixHQUNKL2hELFlBQVk0b0MsSUFDVkEsRUFBVTJULEdBQVczVCxNQU1yQnJzQyxLQUFLeWxELFNBQVdwWixFQUNoQmxyQixHQUFLSSxJQUFJdmhCLEtBQUt5bEQsU0FBVXpsRCxLQUFLeUQsWUFBWWlpRCxTQUFVMWxELE9BR3JEMmxELFVBQ0V4a0MsR0FBS3pFLE9BQU8xYyxLQUFLeWxELFNBQVV6bEQsS0FBS3lELFlBQVlpaUQsVUFDNUN6QixHQUFhdjhCLElBQUkxbkIsS0FBS3lsRCxTQUFVemxELEtBQUt5RCxZQUFZbWlELFdBQ2pEeGxELE9BQU95bEQsb0JBQW9CN2xELE1BQU1ndEMsU0FBUThZLElBQ3ZDOWxELEtBQUs4bEQsR0FBZ0IsUUFJekJDLGVBQWU1aEQsRUFBVWtvQyxFQUFTMlosR0FBYSxHQUM3Q3ZFLEdBQXVCdDlDLEVBQVVrb0MsRUFBUzJaLEdBSzVDQyxtQkFBbUI1WixHQUNqQixPQUFPbHJCLEdBQUt4ZCxJQUFJcThDLEdBQVczVCxHQUFVcnNDLEtBQUswbEQsVUFHNUNPLDJCQUEyQjVaLEVBQVM4VCxFQUFTLElBQzNDLE9BQU9uZ0QsS0FBS2ttRCxZQUFZN1osSUFBWSxJQUFJcnNDLEtBQUtxc0MsRUFBMkIsaUJBQVg4VCxFQUFzQkEsRUFBUyxNQUduRmdHLHFCQUNULE1BckNZLFFBd0NIL0Usa0JBQ1QsTUFBTSxJQUFJdGhELE1BQU0sdUVBR1A0bEQsc0JBQ1QsTUFBTyxNQUFNMWxELEtBQUtvaEQsT0FHVHdFLHVCQUNULE1BQU8sSUFBSTVsRCxLQUFLMGxELFlBWXBCLE1BQU1VLEdBQXVCLENBQUNDLEVBQVc3cUMsRUFBUyxVQUNoRCxNQUFNOHFDLEVBQWEsZ0JBQWdCRCxFQUFVVCxZQUN2Q3ZnRCxFQUFPZ2hELEVBQVVqRixLQUN2QjZDLEdBQWE1OEIsR0FBR3puQixTQUFVMG1ELEVBQVkscUJBQXFCamhELE9BQVUsU0FBVW9pQixHQUs3RSxHQUpJLENBQUMsSUFBSyxRQUFRaTRCLFNBQVMxL0MsS0FBS3VtRCxVQUM5QjkrQixFQUFNUyxpQkFHSnJaLEdBQVc3TyxNQUNiLE9BR0YsTUFBTXlGLEVBQVNvNkMsR0FBdUI3L0MsT0FBU0EsS0FBS2thLFFBQVEsSUFBSTdVLEtBQy9DZ2hELEVBQVVHLG9CQUFvQi9nRCxHQUV0QytWLFNBNkJiLE1BQU1pckMsV0FBY2pCLEdBRVBwRSxrQkFDVCxNQWhCVyxRQW9CYnNGLFFBR0UsR0FGbUJ6QyxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQWxCN0Isa0JBb0JEdjZCLGlCQUNiLE9BR0ZsckIsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQXJCRixRQXVCdEIsTUFBTXNwQyxFQUFhaG1ELEtBQUt5bEQsU0FBUy9FLFVBQVVqNEMsU0F4QnJCLFFBMEJ0QnpJLEtBQUsrbEQsZ0JBQWUsSUFBTS9sRCxLQUFLMm1ELG1CQUFtQjNtRCxLQUFLeWxELFNBQVVPLEdBSW5FVyxrQkFDRTNtRCxLQUFLeWxELFNBQVMvb0MsU0FFZHVuQyxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQWxDVCxtQkFtQ2pCemxELEtBQUsybEQsVUFJUE0sdUJBQXVCOUYsR0FDckIsT0FBT25nRCxLQUFLa0UsTUFBSyxXQUNmLE1BQU1zZCxFQUFPaWxDLEdBQU1ELG9CQUFvQnhtRCxNQUV2QyxHQUFzQixpQkFBWG1nRCxFQUFYLENBSUEsUUFBcUJyNkMsSUFBakIwYixFQUFLMitCLElBQXlCQSxFQUFPUixXQUFXLE1BQW1CLGdCQUFYUSxFQUMxRCxNQUFNLElBQUkvaEMsVUFBVSxvQkFBb0IraEMsTUFHMUMzK0IsRUFBSzIrQixHQUFRbmdELFdBWW5Cb21ELEdBQXFCSyxHQUFPLFNBUTVCdkYsR0FBbUJ1RixJQWNuQixNQUtNRyxHQUF5Qiw0QkFRL0IsTUFBTUMsV0FBZXJCLEdBRVJwRSxrQkFDVCxNQWhCVyxTQW9CYng4QixTQUVFNWtCLEtBQUt5bEQsU0FBU2hqRCxhQUFhLGVBQWdCekMsS0FBS3lsRCxTQUFTL0UsVUFBVTk3QixPQWxCM0MsV0FzQjFCcWhDLHVCQUF1QjlGLEdBQ3JCLE9BQU9uZ0QsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBT3FsQyxHQUFPTCxvQkFBb0J4bUQsTUFFekIsV0FBWG1nRCxHQUNGMytCLEVBQUsyK0IsU0FrQ2IsU0FBUzJHLEdBQWMxa0QsR0FDckIsTUFBWSxTQUFSQSxHQUlRLFVBQVJBLElBSUFBLElBQVE0L0MsT0FBTzUvQyxHQUFLckIsV0FDZmloRCxPQUFPNS9DLEdBR0osS0FBUkEsR0FBc0IsU0FBUkEsRUFDVCxLQUdGQSxHQUdULFNBQVMya0QsR0FBaUJwNUMsR0FDeEIsT0FBT0EsRUFBSXpILFFBQVEsVUFBVThnRCxHQUFPLElBQUlBLEVBQUl2L0Msa0JBMUM5Q3c4QyxHQUFhNThCLEdBQUd6bkIsU0F0Q2UsMkJBc0NtQmduRCxJQUF3Qm4vQixJQUN4RUEsRUFBTVMsaUJBQ04sTUFBTW1DLEVBQVM1QyxFQUFNaGlCLE9BQU95VSxRQUFRMHNDLElBQ3ZCQyxHQUFPTCxvQkFBb0JuOEIsR0FDbkN6RixZQVNQczhCLEdBQW1CMkYsSUFnQ25CLE1BQU1JLEdBQWMsQ0FDbEJDLGlCQUFpQjdhLEVBQVMxK0IsRUFBS3hHLEdBQzdCa2xDLEVBQVE1cEMsYUFBYSxXQUFXc2tELEdBQWlCcDVDLEtBQVF4RyxJQUczRGdnRCxvQkFBb0I5YSxFQUFTMStCLEdBQzNCMCtCLEVBQVE3K0IsZ0JBQWdCLFdBQVd1NUMsR0FBaUJwNUMsT0FHdER5NUMsa0JBQWtCL2EsR0FDaEIsSUFBS0EsRUFDSCxNQUFPLEdBR1QsTUFBTXppQyxFQUFhLEdBTW5CLE9BTEF4SixPQUFPcU4sS0FBSzQrQixFQUFRZ2IsU0FBU3YzQyxRQUFPbkMsR0FBT0EsRUFBSWd5QyxXQUFXLFFBQU8zUyxTQUFRci9CLElBQ3ZFLElBQUkyNUMsRUFBVTM1QyxFQUFJekgsUUFBUSxNQUFPLElBQ2pDb2hELEVBQVVBLEVBQVFDLE9BQU8sR0FBRzkvQyxjQUFnQjYvQyxFQUFRaG5ELE1BQU0sRUFBR2duRCxFQUFRaGtELFFBQ3JFc0csRUFBVzA5QyxHQUFXUixHQUFjemEsRUFBUWdiLFFBQVExNUMsT0FFL0MvRCxHQUdUNDlDLGlCQUFnQixDQUFDbmIsRUFBUzErQixJQUNqQm01QyxHQUFjemEsRUFBUTdwQyxhQUFhLFdBQVd1a0QsR0FBaUJwNUMsT0FHeEU4NUIsT0FBTzRFLEdBQ0wsTUFBTWxFLEVBQU9rRSxFQUFRNVcsd0JBQ3JCLE1BQU8sQ0FDTGxtQixJQUFLNDRCLEVBQUs1NEIsSUFBTXhQLE9BQU9zb0MsWUFDdkIxUyxLQUFNd1MsRUFBS3hTLEtBQU81MUIsT0FBT3VvQyxjQUk3QnpXLFNBQVN3YSxJQUNBLENBQ0w5OEIsSUFBSzg4QixFQUFRZ0MsVUFDYjFZLEtBQU0wVyxFQUFRK0IsY0FhZHFaLEdBQWlCLENBQ3JCejNDLEtBQUksQ0FBQy9NLEVBQVVvcEMsRUFBVXpzQyxTQUFTdVAsa0JBQ3pCLEdBQUd6TyxVQUFVOHJDLFFBQVFqcEMsVUFBVStKLGlCQUFpQjdNLEtBQUs0ckMsRUFBU3BwQyxJQUd2RXlrRCxRQUFPLENBQUN6a0QsRUFBVW9wQyxFQUFVenNDLFNBQVN1UCxrQkFDNUJxOUIsUUFBUWpwQyxVQUFVNnRDLGNBQWMzd0MsS0FBSzRyQyxFQUFTcHBDLEdBR3ZEMFcsU0FBUSxDQUFDMHlCLEVBQVNwcEMsSUFDVCxHQUFHdkMsVUFBVTJyQyxFQUFRMXlCLFVBQVU3SixRQUFPdytCLEdBQVNBLEVBQU10bkMsUUFBUS9ELEtBR3RFc1gsUUFBUTh4QixFQUFTcHBDLEdBQ2YsTUFBTXNYLEVBQVUsR0FDaEIsSUFBSW90QyxFQUFXdGIsRUFBUXpwQyxXQUV2QixLQUFPK2tELEdBQVlBLEVBQVNwbUQsV0FBYWkvQyxLQUFLQyxjQWxCaEMsSUFrQmdEa0gsRUFBU3BtRCxVQUNqRW9tRCxFQUFTM2dELFFBQVEvRCxJQUNuQnNYLEVBQVEzWixLQUFLK21ELEdBR2ZBLEVBQVdBLEVBQVMva0QsV0FHdEIsT0FBTzJYLEdBR1RWLEtBQUt3eUIsRUFBU3BwQyxHQUNaLElBQUkya0QsRUFBV3ZiLEVBQVF3Yix1QkFFdkIsS0FBT0QsR0FBVSxDQUNmLEdBQUlBLEVBQVM1Z0QsUUFBUS9ELEdBQ25CLE1BQU8sQ0FBQzJrRCxHQUdWQSxFQUFXQSxFQUFTQyx1QkFHdEIsTUFBTyxJQUdUOTdDLEtBQUtzZ0MsRUFBU3BwQyxHQUNaLElBQUk4SSxFQUFPc2dDLEVBQVF5YixtQkFFbkIsS0FBTy83QyxHQUFNLENBQ1gsR0FBSUEsRUFBSy9FLFFBQVEvRCxHQUNmLE1BQU8sQ0FBQzhJLEdBR1ZBLEVBQU9BLEVBQUsrN0MsbUJBR2QsTUFBTyxJQUdUQyxrQkFBa0IxYixHQUNoQixNQUFNMmIsRUFBYSxDQUFDLElBQUssU0FBVSxRQUFTLFdBQVksU0FBVSxVQUFXLGFBQWMsNEJBQTRCNWpELEtBQUluQixHQUFZLEdBQUdBLDJCQUFpQ29LLEtBQUssTUFDaEwsT0FBT3JOLEtBQUtnUSxLQUFLZzRDLEVBQVkzYixHQUFTdjhCLFFBQU85QixJQUFPYSxHQUFXYixJQUFPdXlDLEdBQVV2eUMsT0FpQjlFaTZDLEdBQVMsV0FTVEMsR0FBWSxDQUNoQnh3QixTQUFVLElBQ1Z5d0IsVUFBVSxFQUNWQyxPQUFPLEVBQ1BDLE1BQU8sUUFDUDVoQyxNQUFNLEVBQ042aEMsT0FBTyxHQUVIQyxHQUFnQixDQUNwQjd3QixTQUFVLG1CQUNWeXdCLFNBQVUsVUFDVkMsTUFBTyxtQkFDUEMsTUFBTyxtQkFDUDVoQyxLQUFNLFVBQ042aEMsTUFBTyxXQUVIRSxHQUFhLE9BQ2JDLEdBQWEsT0FDYkMsR0FBaUIsT0FDakJDLEdBQWtCLFFBQ2xCQyxHQUFtQixDQUN2QixVQUFrQkQsR0FDbEIsV0FBbUJELElBR2ZHLEdBQWEsbUJBYWJDLEdBQXNCLFNBUXRCQyxHQUF1Qix3QkFnQjdCLE1BQU1DLFdBQWlCeEQsR0FDckIvaEQsWUFBWTRvQyxFQUFTOFQsR0FDbkI4SSxNQUFNNWMsR0FDTnJzQyxLQUFLa3BELE9BQVMsS0FDZGxwRCxLQUFLbXBELFVBQVksS0FDakJucEQsS0FBS29wRCxlQUFpQixLQUN0QnBwRCxLQUFLcXBELFdBQVksRUFDakJycEQsS0FBS3NwRCxZQUFhLEVBQ2xCdHBELEtBQUt1cEQsYUFBZSxLQUNwQnZwRCxLQUFLd3BELFlBQWMsRUFDbkJ4cEQsS0FBS3lwRCxZQUFjLEVBQ25CenBELEtBQUswcEQsUUFBVTFwRCxLQUFLMnBELFdBQVd4SixHQUMvQm5nRCxLQUFLNHBELG1CQUFxQm5DLEdBQWVDLFFBeEJqQix1QkF3QjhDMW5ELEtBQUt5bEQsVUFDM0V6bEQsS0FBSzZwRCxnQkFBa0IsaUJBQWtCanFELFNBQVN1UCxpQkFBbUI2L0IsVUFBVThhLGVBQWlCLEVBQ2hHOXBELEtBQUsrcEQsY0FBZ0IxRixRQUFRdGtELE9BQU9pcUQsY0FFcENocUQsS0FBS2lxRCxxQkFJSUMscUJBQ1QsT0FBT2hDLEdBR0U5RyxrQkFDVCxPQUFPNkcsR0FJVGw4QyxPQUNFL0wsS0FBS21xRCxPQUFPM0IsSUFHZDRCLG1CQUdPeHFELFNBQVM0M0IsUUFBVStvQixHQUFVdmdELEtBQUt5bEQsV0FDckN6bEQsS0FBSytMLE9BSVQ4TixPQUNFN1osS0FBS21xRCxPQUFPMUIsSUFHZEosTUFBTTVnQyxHQUNDQSxJQUNIem5CLEtBQUtxcEQsV0FBWSxHQUdmNUIsR0FBZUMsUUEvREksMkNBK0R3QjFuRCxLQUFLeWxELFlBQ2xEM0YsR0FBcUI5L0MsS0FBS3lsRCxVQUMxQnpsRCxLQUFLcXFELE9BQU0sSUFHYkMsY0FBY3RxRCxLQUFLbXBELFdBQ25CbnBELEtBQUttcEQsVUFBWSxLQUduQmtCLE1BQU01aUMsR0FDQ0EsSUFDSHpuQixLQUFLcXBELFdBQVksR0FHZnJwRCxLQUFLbXBELFlBQ1BtQixjQUFjdHFELEtBQUttcEQsV0FDbkJucEQsS0FBS21wRCxVQUFZLE1BR2ZucEQsS0FBSzBwRCxTQUFXMXBELEtBQUswcEQsUUFBUWh5QixXQUFhMTNCLEtBQUtxcEQsWUFDakRycEQsS0FBS3VxRCxrQkFFTHZxRCxLQUFLbXBELFVBQVlxQixhQUFhNXFELFNBQVM2cUQsZ0JBQWtCenFELEtBQUtvcUQsZ0JBQWtCcHFELEtBQUsrTCxNQUFNZ3RCLEtBQUsvNEIsTUFBT0EsS0FBSzBwRCxRQUFRaHlCLFdBSXhId0MsR0FBRy9mLEdBQ0RuYSxLQUFLb3BELGVBQWlCM0IsR0FBZUMsUUFBUXFCLEdBQXNCL29ELEtBQUt5bEQsVUFFeEUsTUFBTWlGLEVBQWMxcUQsS0FBSzJxRCxjQUFjM3FELEtBQUtvcEQsZ0JBRTVDLEdBQUlqdkMsRUFBUW5hLEtBQUtrcEQsT0FBTzVsRCxPQUFTLEdBQUs2VyxFQUFRLEVBQzVDLE9BR0YsR0FBSW5hLEtBQUtzcEQsV0FFUCxZQURBckYsR0FBYTE4QixJQUFJdm5CLEtBQUt5bEQsU0FBVW9ELElBQVksSUFBTTdvRCxLQUFLazZCLEdBQUcvZixLQUk1RCxHQUFJdXdDLElBQWdCdndDLEVBR2xCLE9BRkFuYSxLQUFLcW9ELGFBQ0xyb0QsS0FBS3FxRCxRQUlQLE1BQU1uTixFQUFRL2lDLEVBQVF1d0MsRUFBY2xDLEdBQWFDLEdBRWpEem9ELEtBQUttcUQsT0FBT2pOLEVBQU9sOUMsS0FBS2twRCxPQUFPL3VDLElBSWpDd3ZDLFdBQVd4SixHQU1ULE9BTEFBLEVBQVMsSUFBSytILE1BQ1RqQixHQUFZRyxrQkFBa0JwbkQsS0FBS3lsRCxhQUNoQixpQkFBWHRGLEVBQXNCQSxFQUFTLElBRTVDRixHQUFnQmdJLEdBQVE5SCxFQUFRb0ksSUFDekJwSSxFQUdUeUssZUFDRSxNQUFNQyxFQUFZN2tELEtBQUttb0MsSUFBSW51QyxLQUFLeXBELGFBRWhDLEdBQUlvQixHQWpMZ0IsR0FrTGxCLE9BR0YsTUFBTTFWLEVBQVkwVixFQUFZN3FELEtBQUt5cEQsWUFDbkN6cEQsS0FBS3lwRCxZQUFjLEVBRWR0VSxHQUlMbjFDLEtBQUttcUQsT0FBT2hWLEVBQVksRUFBSXdULEdBQWtCRCxJQUdoRHVCLHFCQUNNanFELEtBQUswcEQsUUFBUXZCLFVBQ2ZsRSxHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQXRLTCx1QkFzSzhCaCtCLEdBQVN6bkIsS0FBSzhxRCxTQUFTcmpDLEtBRzVDLFVBQXZCem5CLEtBQUswcEQsUUFBUXJCLFFBQ2ZwRSxHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQXpLRiwwQkF5SzhCaCtCLEdBQVN6bkIsS0FBS3FvRCxNQUFNNWdDLEtBQ3JFdzhCLEdBQWE1OEIsR0FBR3JuQixLQUFLeWxELFNBektGLDBCQXlLOEJoK0IsR0FBU3puQixLQUFLcXFELE1BQU01aUMsTUFHbkV6bkIsS0FBSzBwRCxRQUFRcEIsT0FBU3RvRCxLQUFLNnBELGlCQUM3QjdwRCxLQUFLK3FELDBCQUlUQSwwQkFDRSxNQUFNQyxFQUFxQnZqQyxHQUNsQnpuQixLQUFLK3BELGdCQXhKTyxRQXdKV3RpQyxFQUFNa0YsYUF6SmYsVUF5Sm1EbEYsRUFBTWtGLGFBRzFFclosRUFBUW1VLElBQ1J1akMsRUFBbUJ2akMsR0FDckJ6bkIsS0FBS3dwRCxZQUFjL2hDLEVBQU02RSxRQUNmdHNCLEtBQUsrcEQsZ0JBQ2YvcEQsS0FBS3dwRCxZQUFjL2hDLEVBQU11RixRQUFRLEdBQUdWLFVBSWxDMitCLEVBQU94akMsSUFFWHpuQixLQUFLeXBELFlBQWNoaUMsRUFBTXVGLFNBQVd2RixFQUFNdUYsUUFBUTFwQixPQUFTLEVBQUksRUFBSW1rQixFQUFNdUYsUUFBUSxHQUFHVixRQUFVdHNCLEtBQUt3cEQsYUFHL0Z4a0QsRUFBTXlpQixJQUNOdWpDLEVBQW1CdmpDLEtBQ3JCem5CLEtBQUt5cEQsWUFBY2hpQyxFQUFNNkUsUUFBVXRzQixLQUFLd3BELGFBRzFDeHBELEtBQUs0cUQsZUFFc0IsVUFBdkI1cUQsS0FBSzBwRCxRQUFRckIsUUFRZnJvRCxLQUFLcW9ELFFBRURyb0QsS0FBS3VwRCxjQUNQbHVCLGFBQWFyN0IsS0FBS3VwRCxjQUdwQnZwRCxLQUFLdXBELGFBQWUzcUMsWUFBVzZJLEdBQVN6bkIsS0FBS3FxRCxNQUFNNWlDLElBdlA1QixJQXVQNkR6bkIsS0FBSzBwRCxRQUFRaHlCLFlBSXJHK3ZCLEdBQWV6M0MsS0F4TU8scUJBd01pQmhRLEtBQUt5bEQsVUFBVXpZLFNBQVFrZSxJQUM1RGpILEdBQWE1OEIsR0FBRzZqQyxFQXZORyx5QkF1TndCempDLEdBQVNBLEVBQU1TLHNCQUd4RGxvQixLQUFLK3BELGVBQ1A5RixHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQTdORCwyQkE2TjhCaCtCLEdBQVNuVSxFQUFNbVUsS0FDakV3OEIsR0FBYTU4QixHQUFHcm5CLEtBQUt5bEQsU0E3TkgseUJBNk44QmgrQixHQUFTemlCLEVBQUl5aUIsS0FFN0R6bkIsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQXBORyxtQkFzTjNCNHBDLEdBQWE1OEIsR0FBR3JuQixLQUFLeWxELFNBck9GLDBCQXFPOEJoK0IsR0FBU25VLEVBQU1tVSxLQUNoRXc4QixHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQXJPSCx5QkFxTzhCaCtCLEdBQVN3akMsRUFBS3hqQyxLQUM5RHc4QixHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQXJPSix3QkFxTzhCaCtCLEdBQVN6aUIsRUFBSXlpQixNQUloRXFqQyxTQUFTcmpDLEdBQ1AsR0FBSSxrQkFBa0J4YSxLQUFLd2EsRUFBTWhpQixPQUFPOGdELFNBQ3RDLE9BR0YsTUFBTXBSLEVBQVl5VCxHQUFpQm5oQyxFQUFNOVosS0FFckN3bkMsSUFDRjF0QixFQUFNUyxpQkFFTmxvQixLQUFLbXFELE9BQU9oVixJQUloQndWLGNBQWN0ZSxHQUVaLE9BREFyc0MsS0FBS2twRCxPQUFTN2MsR0FBV0EsRUFBUXpwQyxXQUFhNmtELEdBQWV6M0MsS0F4TzNDLGlCQXdPK0RxOEIsRUFBUXpwQyxZQUFjLEdBQ2hHNUMsS0FBS2twRCxPQUFPcm9ELFFBQVF3ckMsR0FHN0I4ZSxnQkFBZ0JqTyxFQUFPNW9DLEdBQ3JCLE1BQU04MkMsRUFBU2xPLElBQVVzTCxHQUN6QixPQUFPcEcsR0FBcUJwaUQsS0FBS2twRCxPQUFRNTBDLEVBQWU4MkMsRUFBUXByRCxLQUFLMHBELFFBQVFqakMsTUFHL0U0a0MsbUJBQW1CbGdDLEVBQWVtZ0MsR0FDaEMsTUFBTUMsRUFBY3ZyRCxLQUFLMnFELGNBQWN4L0IsR0FFakNxZ0MsRUFBWXhyRCxLQUFLMnFELGNBQWNsRCxHQUFlQyxRQUFRcUIsR0FBc0Ivb0QsS0FBS3lsRCxXQUV2RixPQUFPeEIsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0E3UWpCLG9CQTZRd0MsQ0FDdER0NkIsY0FBQUEsRUFDQWdxQixVQUFXbVcsRUFDWGhHLEtBQU1rRyxFQUNOdHhCLEdBQUlxeEIsSUFJUkUsMkJBQTJCcGYsR0FDekIsR0FBSXJzQyxLQUFLNHBELG1CQUFvQixDQUMzQixNQUFNOEIsRUFBa0JqRSxHQUFlQyxRQWxRbkIsVUFrUThDMW5ELEtBQUs0cEQsb0JBQ3ZFOEIsRUFBZ0JoTCxVQUFVaGtDLE9BQU9vc0MsSUFDakM0QyxFQUFnQmwrQyxnQkFBZ0IsZ0JBQ2hDLE1BQU1tK0MsRUFBYWxFLEdBQWV6M0MsS0EvUGIsbUJBK1BzQ2hRLEtBQUs0cEQsb0JBRWhFLElBQUssSUFBSXpuRCxFQUFJLEVBQUdBLEVBQUl3cEQsRUFBV3JvRCxPQUFRbkIsSUFDckMsR0FBSTYvQyxPQUFPanZCLFNBQVM0NEIsRUFBV3hwRCxHQUFHSyxhQUFhLG9CQUFxQixNQUFReEMsS0FBSzJxRCxjQUFjdGUsR0FBVSxDQUN2R3NmLEVBQVd4cEQsR0FBR3UrQyxVQUFVcm1DLElBQUl5dUMsSUFDNUI2QyxFQUFXeHBELEdBQUdNLGFBQWEsZUFBZ0IsUUFDM0MsUUFNUjhuRCxrQkFDRSxNQUFNbGUsRUFBVXJzQyxLQUFLb3BELGdCQUFrQjNCLEdBQWVDLFFBQVFxQixHQUFzQi9vRCxLQUFLeWxELFVBRXpGLElBQUtwWixFQUNILE9BR0YsTUFBTXVmLEVBQWtCNUosT0FBT2p2QixTQUFTc1osRUFBUTdwQyxhQUFhLG9CQUFxQixJQUU5RW9wRCxHQUNGNXJELEtBQUswcEQsUUFBUW1DLGdCQUFrQjdyRCxLQUFLMHBELFFBQVFtQyxpQkFBbUI3ckQsS0FBSzBwRCxRQUFRaHlCLFNBQzVFMTNCLEtBQUswcEQsUUFBUWh5QixTQUFXazBCLEdBRXhCNXJELEtBQUswcEQsUUFBUWh5QixTQUFXMTNCLEtBQUswcEQsUUFBUW1DLGlCQUFtQjdyRCxLQUFLMHBELFFBQVFoeUIsU0FJekV5eUIsT0FBTzJCLEVBQWtCemYsR0FDdkIsTUFBTTZRLEVBQVFsOUMsS0FBSytyRCxrQkFBa0JELEdBRS9CeDNDLEVBQWdCbXpDLEdBQWVDLFFBQVFxQixHQUFzQi9vRCxLQUFLeWxELFVBRWxFdUcsRUFBcUJoc0QsS0FBSzJxRCxjQUFjcjJDLEdBRXhDMjNDLEVBQWM1ZixHQUFXcnNDLEtBQUttckQsZ0JBQWdCak8sRUFBTzVvQyxHQUVyRDQzQyxFQUFtQmxzRCxLQUFLMnFELGNBQWNzQixHQUV0Q0UsRUFBWTlILFFBQVFya0QsS0FBS21wRCxXQUN6QmlDLEVBQVNsTyxJQUFVc0wsR0FDbkI0RCxFQUF1QmhCLEVBblRSLHNCQURGLG9CQXFUYmlCLEVBQWlCakIsRUFuVEgscUJBQ0EscUJBb1RkRSxFQUFxQnRyRCxLQUFLc3NELGtCQUFrQnBQLEdBRWxELEdBQUkrTyxHQUFlQSxFQUFZdkwsVUFBVWo0QyxTQUFTcWdELElBRWhELFlBREE5b0QsS0FBS3NwRCxZQUFhLEdBSXBCLEdBQUl0cEQsS0FBS3NwRCxXQUNQLE9BS0YsR0FGbUJ0cEQsS0FBS3FyRCxtQkFBbUJZLEVBQWFYLEdBRXpDcGdDLGlCQUNiLE9BR0YsSUFBSzVXLElBQWtCMjNDLEVBRXJCLE9BR0Zqc0QsS0FBS3NwRCxZQUFhLEVBRWQ2QyxHQUNGbnNELEtBQUtxb0QsUUFHUHJvRCxLQUFLeXJELDJCQUEyQlEsR0FFaENqc0QsS0FBS29wRCxlQUFpQjZDLEVBRXRCLE1BQU1NLEVBQW1CLEtBQ3ZCdEksR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0FBVW9ELEdBQVksQ0FDOUMxOUIsY0FBZThnQyxFQUNmOVcsVUFBV21XLEVBQ1hoRyxLQUFNMEcsRUFDTjl4QixHQUFJZ3lCLEtBSVIsR0FBSWxzRCxLQUFLeWxELFNBQVMvRSxVQUFVajRDLFNBaldQLFNBaVdtQyxDQUN0RHdqRCxFQUFZdkwsVUFBVXJtQyxJQUFJZ3lDLEdBQzFCdkwsR0FBT21MLEdBQ1AzM0MsRUFBY29zQyxVQUFVcm1DLElBQUkreEMsR0FDNUJILEVBQVl2TCxVQUFVcm1DLElBQUkreEMsR0FFMUIsTUFBTUksRUFBbUIsS0FDdkJQLEVBQVl2TCxVQUFVaGtDLE9BQU8wdkMsRUFBc0JDLEdBQ25ESixFQUFZdkwsVUFBVXJtQyxJQUFJeXVDLElBQzFCeDBDLEVBQWNvc0MsVUFBVWhrQyxPQUFPb3NDLEdBQXFCdUQsRUFBZ0JELEdBQ3BFcHNELEtBQUtzcEQsWUFBYSxFQUNsQjFxQyxXQUFXMnRDLEVBQWtCLElBRy9CdnNELEtBQUsrbEQsZUFBZXlHLEVBQWtCbDRDLEdBQWUsUUFFckRBLEVBQWNvc0MsVUFBVWhrQyxPQUFPb3NDLElBQy9CbUQsRUFBWXZMLFVBQVVybUMsSUFBSXl1QyxJQUMxQjlvRCxLQUFLc3BELFlBQWEsRUFDbEJpRCxJQUdFSixHQUNGbnNELEtBQUtxcUQsUUFJVDBCLGtCQUFrQjVXLEdBQ2hCLE1BQUssQ0FBQ3dULEdBQWlCRCxJQUFnQmhKLFNBQVN2SyxHQUk1QzhMLEtBQ0s5TCxJQUFjdVQsR0FBaUJELEdBQWFELEdBRzlDclQsSUFBY3VULEdBQWlCRixHQUFhQyxHQVAxQ3RULEVBVVhtWCxrQkFBa0JwUCxHQUNoQixNQUFLLENBQUNzTCxHQUFZQyxJQUFZL0ksU0FBU3hDLEdBSW5DK0QsS0FDSy9ELElBQVV1TCxHQUFhQyxHQUFpQkMsR0FHMUN6TCxJQUFVdUwsR0FBYUUsR0FBa0JELEdBUHZDeEwsRUFXWCtJLHlCQUF5QjVaLEVBQVM4VCxHQUNoQyxNQUFNMytCLEVBQU93bkMsR0FBU3hDLG9CQUFvQm5hLEVBQVM4VCxHQUNuRCxJQUFJLFFBQ0Z1SixHQUNFbG9DLEVBRWtCLGlCQUFYMitCLElBQ1R1SixFQUFVLElBQUtBLEtBQ1Z2SixJQUlQLE1BQU1zTSxFQUEyQixpQkFBWHRNLEVBQXNCQSxFQUFTdUosRUFBUXRCLE1BRTdELEdBQXNCLGlCQUFYakksRUFDVDMrQixFQUFLMFksR0FBR2ltQixRQUNILEdBQXNCLGlCQUFYc00sRUFBcUIsQ0FDckMsUUFBNEIsSUFBakJqckMsRUFBS2lyQyxHQUNkLE1BQU0sSUFBSXJ1QyxVQUFVLG9CQUFvQnF1QyxNQUcxQ2pyQyxFQUFLaXJDLFVBQ0kvQyxFQUFRaHlCLFVBQVlneUIsRUFBUWdELE9BQ3JDbHJDLEVBQUs2bUMsUUFDTDdtQyxFQUFLNm9DLFNBSVRwRSx1QkFBdUI5RixHQUNyQixPQUFPbmdELEtBQUtrRSxNQUFLLFdBQ2Y4a0QsR0FBUzJELGtCQUFrQjNzRCxLQUFNbWdELE1BSXJDOEYsMkJBQTJCeCtCLEdBQ3pCLE1BQU1oaUIsRUFBU282QyxHQUF1QjcvQyxNQUV0QyxJQUFLeUYsSUFBV0EsRUFBT2k3QyxVQUFVajRDLFNBNWJULFlBNmJ0QixPQUdGLE1BQU0wM0MsRUFBUyxJQUFLOEcsR0FBWUcsa0JBQWtCM2hELE1BQzdDd2hELEdBQVlHLGtCQUFrQnBuRCxPQUU3QjRzRCxFQUFhNXNELEtBQUt3QyxhQUFhLG9CQUVqQ29xRCxJQUNGek0sRUFBT3pvQixVQUFXLEdBR3BCc3hCLEdBQVMyRCxrQkFBa0JsbkQsRUFBUTA2QyxHQUUvQnlNLEdBQ0Y1RCxHQUFTOUMsWUFBWXpnRCxHQUFReTBCLEdBQUcweUIsR0FHbENubEMsRUFBTVMsa0JBV1YrN0IsR0FBYTU4QixHQUFHem5CLFNBM2RlLDZCQWdCSCxzQ0EyYzJDb3BELEdBQVM2RCxxQkFDaEY1SSxHQUFhNThCLEdBQUd0bkIsT0E3ZGMsNkJBNmRpQixLQUM3QyxNQUFNK3NELEVBQVlyRixHQUFlejNDLEtBNWNSLDZCQThjekIsSUFBSyxJQUFJN04sRUFBSSxFQUFHMkMsRUFBTWdvRCxFQUFVeHBELE9BQVFuQixFQUFJMkMsRUFBSzNDLElBQy9DNm1ELEdBQVMyRCxrQkFBa0JHLEVBQVUzcUQsR0FBSTZtRCxHQUFTOUMsWUFBWTRHLEVBQVUzcUQsUUFVNUUrK0MsR0FBbUI4SCxJQWNuQixNQUFNK0QsR0FBUyxXQUlUQyxHQUFZLENBQ2hCcG9DLFFBQVEsRUFDUnJSLE9BQVEsTUFFSjA1QyxHQUFnQixDQUNwQnJvQyxPQUFRLFVBQ1JyUixPQUFRLGtCQU9KMjVDLEdBQW9CLE9BQ3BCQyxHQUFzQixXQUN0QkMsR0FBd0IsYUFDeEJDLEdBQXVCLFlBQ3ZCQyxHQUE2Qiw2QkFLN0JDLEdBQXlCLDhCQU8vQixNQUFNQyxXQUFpQmhJLEdBQ3JCL2hELFlBQVk0b0MsRUFBUzhULEdBQ25COEksTUFBTTVjLEdBQ05yc0MsS0FBS3l0RCxrQkFBbUIsRUFDeEJ6dEQsS0FBSzBwRCxRQUFVMXBELEtBQUsycEQsV0FBV3hKLEdBQy9CbmdELEtBQUswdEQsY0FBZ0IsR0FDckIsTUFBTUMsRUFBYWxHLEdBQWV6M0MsS0FBS3U5QyxJQUV2QyxJQUFLLElBQUlwckQsRUFBSSxFQUFHMkMsRUFBTTZvRCxFQUFXcnFELE9BQVFuQixFQUFJMkMsRUFBSzNDLElBQUssQ0FDckQsTUFBTWtDLEVBQU9zcEQsRUFBV3hyRCxHQUNsQmMsRUFBVzI4QyxHQUF1QnY3QyxHQUNsQ3VwRCxFQUFnQm5HLEdBQWV6M0MsS0FBSy9NLEdBQVU2TSxRQUFPKzlDLEdBQWFBLElBQWM3dEQsS0FBS3lsRCxXQUUxRSxPQUFieGlELEdBQXFCMnFELEVBQWN0cUQsU0FDckN0RCxLQUFLOHRELFVBQVk3cUQsRUFFakJqRCxLQUFLMHRELGNBQWM5c0QsS0FBS3lELElBSTVCckUsS0FBSyt0RCxzQkFFQS90RCxLQUFLMHBELFFBQVFuMkMsUUFDaEJ2VCxLQUFLZ3VELDBCQUEwQmh1RCxLQUFLMHRELGNBQWUxdEQsS0FBS2l1RCxZQUd0RGp1RCxLQUFLMHBELFFBQVE5a0MsUUFDZjVrQixLQUFLNGtCLFNBS0VzbEMscUJBQ1QsT0FBTzhDLEdBR0U1TCxrQkFDVCxPQUFPMkwsR0FJVG5vQyxTQUNNNWtCLEtBQUtpdUQsV0FDUGp1RCxLQUFLMmtCLE9BRUwza0IsS0FBS3lrQixPQUlUQSxPQUNFLEdBQUl6a0IsS0FBS3l0RCxrQkFBb0J6dEQsS0FBS2l1RCxXQUNoQyxPQUdGLElBQ0lDLEVBREFDLEVBQVUsR0FHZCxHQUFJbnVELEtBQUswcEQsUUFBUW4yQyxPQUFRLENBQ3ZCLE1BQU1vRyxFQUFXOHRDLEdBQWV6M0MsS0FBS3M5QyxHQUE0QnR0RCxLQUFLMHBELFFBQVFuMkMsUUFDOUU0NkMsRUFBVTFHLEdBQWV6M0MsS0FuRU4sdUNBbUU2QmhRLEtBQUswcEQsUUFBUW4yQyxRQUFRekQsUUFBT3pMLElBQVNzVixFQUFTK2xDLFNBQVNyN0MsS0FHekcsTUFBTThzQixFQUFZczJCLEdBQWVDLFFBQVExbkQsS0FBSzh0RCxXQUU5QyxHQUFJSyxFQUFRN3FELE9BQVEsQ0FDbEIsTUFBTThxRCxFQUFpQkQsRUFBUW4rQyxNQUFLM0wsR0FBUThzQixJQUFjOXNCLElBRzFELEdBRkE2cEQsRUFBY0UsRUFBaUJaLEdBQVN0SCxZQUFZa0ksR0FBa0IsS0FFbEVGLEdBQWVBLEVBQVlULGlCQUM3QixPQU1KLEdBRm1CeEosR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0E5RjVCLG9CQWdHRnY2QixpQkFDYixPQUdGaWpDLEVBQVFuaEIsU0FBUXFoQixJQUNWbDlCLElBQWNrOUIsR0FDaEJiLEdBQVNoSCxvQkFBb0I2SCxFQUFZLENBQ3ZDenBDLFFBQVEsSUFDUEQsT0FHQXVwQyxHQUNIL3NDLEdBQUtJLElBQUk4c0MsRUF2SEUsY0F1SHNCLFNBSXJDLE1BQU1oNkIsRUFBWXIwQixLQUFLc3VELGdCQUV2QnR1RCxLQUFLeWxELFNBQVMvRSxVQUFVaGtDLE9BQU95d0MsSUFFL0JudEQsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQUFJK3lDLElBRTVCcHRELEtBQUt5bEQsU0FBU2xpQyxNQUFNOFEsR0FBYSxFQUVqQ3IwQixLQUFLZ3VELDBCQUEwQmh1RCxLQUFLMHRELGVBQWUsR0FFbkQxdEQsS0FBS3l0RCxrQkFBbUIsRUFFeEIsTUFZTWMsRUFBYSxTQURVbDZCLEVBQVUsR0FBR3ZULGNBQWdCdVQsRUFBVS96QixNQUFNLEtBRzFFTixLQUFLK2xELGdCQWRZLEtBQ2YvbEQsS0FBS3l0RCxrQkFBbUIsRUFFeEJ6dEQsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPMHdDLElBRS9CcHRELEtBQUt5bEQsU0FBUy9FLFVBQVVybUMsSUFBSTh5QyxHQUFxQkQsSUFFakRsdEQsS0FBS3lsRCxTQUFTbGlDLE1BQU04USxHQUFhLEdBQ2pDNHZCLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBbklWLHVCQXlJWXpsRCxLQUFLeWxELFVBQVUsR0FFN0N6bEQsS0FBS3lsRCxTQUFTbGlDLE1BQU04USxHQUFhLEdBQUdyMEIsS0FBS3lsRCxTQUFTOEksT0FHcEQ1cEMsT0FDRSxHQUFJM2tCLEtBQUt5dEQsbUJBQXFCenRELEtBQUtpdUQsV0FDakMsT0FLRixHQUZtQmhLLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBbEo1QixvQkFvSkZ2NkIsaUJBQ2IsT0FHRixNQUFNbUosRUFBWXIwQixLQUFLc3VELGdCQUV2QnR1RCxLQUFLeWxELFNBQVNsaUMsTUFBTThRLEdBQWEsR0FBR3IwQixLQUFLeWxELFNBQVNod0Isd0JBQXdCcEIsT0FDMUV5c0IsR0FBTzlnRCxLQUFLeWxELFVBRVp6bEQsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQUFJK3lDLElBRTVCcHRELEtBQUt5bEQsU0FBUy9FLFVBQVVoa0MsT0FBT3l3QyxHQUFxQkQsSUFFcEQsTUFBTXNCLEVBQXFCeHVELEtBQUswdEQsY0FBY3BxRCxPQUU5QyxJQUFLLElBQUluQixFQUFJLEVBQUdBLEVBQUlxc0QsRUFBb0Jyc0QsSUFBSyxDQUMzQyxNQUFNZ21CLEVBQVVub0IsS0FBSzB0RCxjQUFjdnJELEdBQzdCa0MsRUFBT3c3QyxHQUF1QjEzQixHQUVoQzlqQixJQUFTckUsS0FBS2l1RCxTQUFTNXBELElBQ3pCckUsS0FBS2d1RCwwQkFBMEIsQ0FBQzdsQyxJQUFVLEdBSTlDbm9CLEtBQUt5dEQsa0JBQW1CLEVBWXhCenRELEtBQUt5bEQsU0FBU2xpQyxNQUFNOFEsR0FBYSxHQUVqQ3IwQixLQUFLK2xELGdCQVpZLEtBQ2YvbEQsS0FBS3l0RCxrQkFBbUIsRUFFeEJ6dEQsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPMHdDLElBRS9CcHRELEtBQUt5bEQsU0FBUy9FLFVBQVVybUMsSUFBSTh5QyxJQUU1QmxKLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBcExULHdCQXlMV3psRCxLQUFLeWxELFVBQVUsR0FHL0N3SSxTQUFTNWhCLEVBQVVyc0MsS0FBS3lsRCxVQUN0QixPQUFPcFosRUFBUXFVLFVBQVVqNEMsU0FBU3lrRCxJQUlwQ3ZELFdBQVd4SixHQVNULE9BUkFBLEVBQVMsSUFBSzZNLE1BQ1QvRixHQUFZRyxrQkFBa0JwbkQsS0FBS3lsRCxhQUNuQ3RGLElBRUV2N0IsT0FBU3kvQixRQUFRbEUsRUFBT3Y3QixRQUUvQnU3QixFQUFPNXNDLE9BQVN5c0MsR0FBV0csRUFBTzVzQyxRQUNsQzBzQyxHQUFnQjhNLEdBQVE1TSxFQUFROE0sSUFDekI5TSxFQUdUbU8sZ0JBQ0UsT0FBT3R1RCxLQUFLeWxELFNBQVMvRSxVQUFVajRDLFNBdk1MLHVCQUNoQixRQUNDLFNBd01ic2xELHNCQUNFLElBQUsvdEQsS0FBSzBwRCxRQUFRbjJDLE9BQ2hCLE9BR0YsTUFBTW9HLEVBQVc4dEMsR0FBZXozQyxLQUFLczlDLEdBQTRCdHRELEtBQUswcEQsUUFBUW4yQyxRQUM5RWswQyxHQUFlejNDLEtBQUt1OUMsR0FBd0J2dEQsS0FBSzBwRCxRQUFRbjJDLFFBQVF6RCxRQUFPekwsSUFBU3NWLEVBQVMrbEMsU0FBU3I3QyxLQUFPMm9DLFNBQVFYLElBQ2hILE1BQU0xM0IsRUFBV2tyQyxHQUF1QnhULEdBRXBDMTNCLEdBQ0YzVSxLQUFLZ3VELDBCQUEwQixDQUFDM2hCLEdBQVVyc0MsS0FBS2l1RCxTQUFTdDVDLE9BSzlEcTVDLDBCQUEwQlMsRUFBY0MsR0FDakNELEVBQWFuckQsUUFJbEJtckQsRUFBYXpoQixTQUFRM29DLElBQ2ZxcUQsRUFDRnJxRCxFQUFLcThDLFVBQVVoa0MsT0FBTzJ3QyxJQUV0QmhwRCxFQUFLcThDLFVBQVVybUMsSUFBSWd6QyxJQUdyQmhwRCxFQUFLNUIsYUFBYSxnQkFBaUJpc0QsTUFLdkN6SSx1QkFBdUI5RixHQUNyQixPQUFPbmdELEtBQUtrRSxNQUFLLFdBQ2YsTUFBTXdsRCxFQUFVLEdBRU0saUJBQVh2SixHQUF1QixZQUFZbHpDLEtBQUtrekMsS0FDakR1SixFQUFROWtDLFFBQVMsR0FHbkIsTUFBTXBELEVBQU9nc0MsR0FBU2hILG9CQUFvQnhtRCxLQUFNMHBELEdBRWhELEdBQXNCLGlCQUFYdkosRUFBcUIsQ0FDOUIsUUFBNEIsSUFBakIzK0IsRUFBSzIrQixHQUNkLE1BQU0sSUFBSS9oQyxVQUFVLG9CQUFvQitoQyxNQUcxQzMrQixFQUFLMitCLFVBYWI4RCxHQUFhNThCLEdBQUd6bkIsU0E1UWUsNkJBNFFtQjJ0RCxJQUF3QixTQUFVOWxDLElBRXJELE1BQXpCQSxFQUFNaGlCLE9BQU84Z0QsU0FBbUI5K0IsRUFBTW1DLGdCQUFtRCxNQUFqQ25DLEVBQU1tQyxlQUFlMjhCLFVBQy9FOStCLEVBQU1TLGlCQUdSLE1BQU1qbEIsRUFBVzI4QyxHQUF1QjUvQyxNQUNmeW5ELEdBQWV6M0MsS0FBSy9NLEdBQzVCK3BDLFNBQVFYLElBQ3ZCbWhCLEdBQVNoSCxvQkFBb0JuYSxFQUFTLENBQ3BDem5CLFFBQVEsSUFDUEEsZUFVUHM4QixHQUFtQnNNLElBY25CLE1BQU1tQixHQUFTLFdBSVRDLEdBQWUsU0FDZkMsR0FBWSxRQUVaQyxHQUFlLFVBQ2ZDLEdBQWlCLFlBR2pCQyxHQUFpQixJQUFJamxELE9BQU8sNEJBSzVCa2xELEdBQXlCLDZCQUN6QkMsR0FBeUIsK0JBRXpCQyxHQUFvQixPQUtwQkMsR0FBeUIsOEJBQ3pCQyxHQUFnQixpQkFHaEJDLEdBQWdCck8sS0FBVSxVQUFZLFlBQ3RDc08sR0FBbUJ0TyxLQUFVLFlBQWMsVUFDM0N1TyxHQUFtQnZPLEtBQVUsYUFBZSxlQUM1Q3dPLEdBQXNCeE8sS0FBVSxlQUFpQixhQUNqRHlPLEdBQWtCek8sS0FBVSxhQUFlLGNBQzNDME8sR0FBaUIxTyxLQUFVLGNBQWdCLGFBQzNDMk8sR0FBWSxDQUNoQm5vQixPQUFRLENBQUMsRUFBRyxHQUNab08sU0FBVSxrQkFDVnhLLFVBQVcsU0FDWDduQixRQUFTLFVBQ1Rxc0MsYUFBYyxLQUNkQyxXQUFXLEdBRVBDLEdBQWdCLENBQ3BCdG9CLE9BQVEsMEJBQ1JvTyxTQUFVLG1CQUNWeEssVUFBVywwQkFDWDduQixRQUFTLFNBQ1Rxc0MsYUFBYyx5QkFDZEMsVUFBVyxvQkFRYixNQUFNRSxXQUFpQnhLLEdBQ3JCL2hELFlBQVk0b0MsRUFBUzhULEdBQ25COEksTUFBTTVjLEdBQ05yc0MsS0FBS2l3RCxRQUFVLEtBQ2Zqd0QsS0FBSzBwRCxRQUFVMXBELEtBQUsycEQsV0FBV3hKLEdBQy9CbmdELEtBQUtrd0QsTUFBUWx3RCxLQUFLbXdELGtCQUNsQm53RCxLQUFLb3dELFVBQVlwd0QsS0FBS3F3RCxnQkFJYm5HLHFCQUNULE9BQU8wRixHQUdFVSx5QkFDVCxPQUFPUCxHQUdFM08sa0JBQ1QsT0FBT3VOLEdBSVQvcEMsU0FDRSxPQUFPNWtCLEtBQUtpdUQsV0FBYWp1RCxLQUFLMmtCLE9BQVMza0IsS0FBS3lrQixPQUc5Q0EsT0FDRSxHQUFJNVYsR0FBVzdPLEtBQUt5bEQsV0FBYXpsRCxLQUFLaXVELFNBQVNqdUQsS0FBS2t3RCxPQUNsRCxPQUdGLE1BQU0va0MsRUFBZ0IsQ0FDcEJBLGNBQWVuckIsS0FBS3lsRCxVQUl0QixHQUZrQnhCLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBN0UzQixtQkE2RW1EdDZCLEdBRXRERCxpQkFDWixPQUdGLE1BQU0zWCxFQUFTeThDLEdBQVNPLHFCQUFxQnZ3RCxLQUFLeWxELFVBRTlDemxELEtBQUtvd0QsVUFDUG5KLEdBQVlDLGlCQUFpQmxuRCxLQUFLa3dELE1BQU8sU0FBVSxRQUVuRGx3RCxLQUFLd3dELGNBQWNqOUMsR0FPakIsaUJBQWtCM1QsU0FBU3VQLGtCQUFvQm9FLEVBQU8yRyxRQW5GbEMsZ0JBb0Z0QixHQUFHeFosVUFBVWQsU0FBUzJrQixLQUFLNUssVUFBVXF6QixTQUFRM29DLEdBQVE0L0MsR0FBYTU4QixHQUFHaGpCLEVBQU0sWUFBYWlDLE1BRzFGdEcsS0FBS3lsRCxTQUFTdjRCLFFBRWRsdEIsS0FBS3lsRCxTQUFTaGpELGFBQWEsaUJBQWlCLEdBRTVDekMsS0FBS2t3RCxNQUFNeFAsVUFBVXJtQyxJQUFJODBDLElBRXpCbnZELEtBQUt5bEQsU0FBUy9FLFVBQVVybUMsSUFBSTgwQyxJQUU1QmxMLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBMUdSLG9CQTBHaUN0NkIsR0FHckR4RyxPQUNFLEdBQUk5VixHQUFXN08sS0FBS3lsRCxZQUFjemxELEtBQUtpdUQsU0FBU2p1RCxLQUFLa3dELE9BQ25ELE9BR0YsTUFBTS9rQyxFQUFnQixDQUNwQkEsY0FBZW5yQixLQUFLeWxELFVBR3RCemxELEtBQUt5d0QsY0FBY3RsQyxHQUdyQnc2QixVQUNNM2xELEtBQUtpd0QsU0FDUGp3RCxLQUFLaXdELFFBQVE5USxVQUdmOEosTUFBTXRELFVBR1I5UixTQUNFN3pDLEtBQUtvd0QsVUFBWXB3RCxLQUFLcXdELGdCQUVsQnJ3RCxLQUFLaXdELFNBQ1Bqd0QsS0FBS2l3RCxRQUFRcGMsU0FLakI0YyxjQUFjdGxDLEdBQ004NEIsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0E5STNCLG1CQThJbUR0NkIsR0FFdERELG1CQU1WLGlCQUFrQnRyQixTQUFTdVAsaUJBQzdCLEdBQUd6TyxVQUFVZCxTQUFTMmtCLEtBQUs1SyxVQUFVcXpCLFNBQVEzb0MsR0FBUTQvQyxHQUFhdjhCLElBQUlyakIsRUFBTSxZQUFhaUMsTUFHdkZ0RyxLQUFLaXdELFNBQ1Bqd0QsS0FBS2l3RCxRQUFROVEsVUFHZm4vQyxLQUFLa3dELE1BQU14UCxVQUFVaGtDLE9BQU95eUMsSUFFNUJudkQsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPeXlDLElBRS9CbnZELEtBQUt5bEQsU0FBU2hqRCxhQUFhLGdCQUFpQixTQUU1Q3drRCxHQUFZRSxvQkFBb0JubkQsS0FBS2t3RCxNQUFPLFVBQzVDak0sR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0FwS1AscUJBb0tpQ3Q2QixJQUd0RHcrQixXQUFXeEosR0FPVCxHQU5BQSxFQUFTLElBQUtuZ0QsS0FBS3lELFlBQVl5bUQsV0FDMUJqRCxHQUFZRyxrQkFBa0JwbkQsS0FBS3lsRCxhQUNuQ3RGLEdBRUxGLEdBQWdCME8sR0FBUXhPLEVBQVFuZ0QsS0FBS3lELFlBQVk2c0QsYUFFakIsaUJBQXJCblEsRUFBTzlVLFlBQTJCLEdBQVU4VSxFQUFPOVUsWUFBZ0UsbUJBQTNDOFUsRUFBTzlVLFVBQVU1VixzQkFFbEcsTUFBTSxJQUFJclgsVUFBVSxHQUFHdXdDLEdBQU83dEMsK0dBR2hDLE9BQU9xL0IsRUFHVHFRLGNBQWNqOUMsR0FDWixRQUFzQixJQUFYLEVBQ1QsTUFBTSxJQUFJNkssVUFBVSxnRUFHdEIsSUFBSXN5QyxFQUFtQjF3RCxLQUFLeWxELFNBRUcsV0FBM0J6bEQsS0FBSzBwRCxRQUFRcmUsVUFDZnFsQixFQUFtQm45QyxFQUNWLEdBQVV2VCxLQUFLMHBELFFBQVFyZSxXQUNoQ3FsQixFQUFtQjFRLEdBQVdoZ0QsS0FBSzBwRCxRQUFRcmUsV0FDQSxpQkFBM0JyckMsS0FBSzBwRCxRQUFRcmUsWUFDN0JxbEIsRUFBbUIxd0QsS0FBSzBwRCxRQUFRcmUsV0FHbEMsTUFBTXdrQixFQUFlN3ZELEtBQUsyd0QsbUJBRXBCQyxFQUFrQmYsRUFBYTFTLFVBQVVudEMsTUFBS3N0QyxHQUE4QixnQkFBbEJBLEVBQVNqNEMsT0FBK0MsSUFBckJpNEMsRUFBU3pRLFVBQzVHN3NDLEtBQUtpd0QsUUFBVSxHQUFvQlMsRUFBa0Ixd0QsS0FBS2t3RCxNQUFPTCxHQUU3RGUsR0FDRjNKLEdBQVlDLGlCQUFpQmxuRCxLQUFLa3dELE1BQU8sU0FBVSxVQUl2RGpDLFNBQVM1aEIsRUFBVXJzQyxLQUFLeWxELFVBQ3RCLE9BQU9wWixFQUFRcVUsVUFBVWo0QyxTQUFTMG1ELElBR3BDZ0Isa0JBQ0UsT0FBTzFJLEdBQWUxN0MsS0FBSy9MLEtBQUt5bEQsU0FBVTRKLElBQWUsR0FHM0R3QixnQkFDRSxNQUFNQyxFQUFpQjl3RCxLQUFLeWxELFNBQVM3aUQsV0FFckMsR0FBSWt1RCxFQUFlcFEsVUFBVWo0QyxTQWxOTixXQW1OckIsT0FBT2luRCxHQUdULEdBQUlvQixFQUFlcFEsVUFBVWo0QyxTQXJOSixhQXNOdkIsT0FBT2tuRCxHQUlULE1BQU1vQixFQUFrRixRQUExRTNnQyxpQkFBaUJwd0IsS0FBS2t3RCxPQUFPci9CLGlCQUFpQixpQkFBaUI2WSxPQUU3RSxPQUFJb25CLEVBQWVwUSxVQUFVajRDLFNBOU5QLFVBK05ic29ELEVBQVF4QixHQUFtQkQsR0FHN0J5QixFQUFRdEIsR0FBc0JELEdBR3ZDYSxnQkFDRSxPQUEwRCxPQUFuRHJ3RCxLQUFLeWxELFNBQVN2ckMsUUFBUSxXQUcvQjgyQyxhQUNFLE1BQU0sT0FDSnZwQixHQUNFem5DLEtBQUswcEQsUUFFVCxNQUFzQixpQkFBWGppQixFQUNGQSxFQUFPbGdDLE1BQU0sS0FBS25ELEtBQUloQyxHQUFPNC9DLE9BQU9qdkIsU0FBUzN3QixFQUFLLE1BR3JDLG1CQUFYcWxDLEVBQ0Z3cEIsR0FBY3hwQixFQUFPd3BCLEVBQVlqeEQsS0FBS3lsRCxVQUd4Q2hlLEVBR1RrcEIsbUJBQ0UsTUFBTU8sRUFBd0IsQ0FDNUJ6bEIsVUFBV3pyQyxLQUFLNndELGdCQUNoQjFULFVBQVcsQ0FBQyxDQUNWOTNDLEtBQU0sa0JBQ05ELFFBQVMsQ0FDUHl3QyxTQUFVNzFDLEtBQUswcEQsUUFBUTdULFdBRXhCLENBQ0R4d0MsS0FBTSxTQUNORCxRQUFTLENBQ1BxaUMsT0FBUXpuQyxLQUFLZ3hELGlCQVluQixNQVA2QixXQUF6Qmh4RCxLQUFLMHBELFFBQVFsbUMsVUFDZjB0QyxFQUFzQi9ULFVBQVksQ0FBQyxDQUNqQzkzQyxLQUFNLGNBQ053bkMsU0FBUyxLQUlOLElBQUtxa0IsS0FDK0IsbUJBQTlCbHhELEtBQUswcEQsUUFBUW1HLGFBQThCN3ZELEtBQUswcEQsUUFBUW1HLGFBQWFxQixHQUF5Qmx4RCxLQUFLMHBELFFBQVFtRyxjQUkxSHNCLGlCQUFnQixJQUNkeGpELEVBQUcsT0FDSGxJLElBRUEsTUFBTTJyRCxFQUFRM0osR0FBZXozQyxLQWxSRiw4REFrUitCaFEsS0FBS2t3RCxPQUFPcGdELE9BQU95d0MsSUFFeEU2USxFQUFNOXRELFFBTVg4K0MsR0FBcUJnUCxFQUFPM3JELEVBQVFrSSxJQUFRb2hELElBQWlCcUMsRUFBTTFSLFNBQVNqNkMsSUFBU3luQixRQUl2Ris0Qix1QkFBdUI5RixHQUNyQixPQUFPbmdELEtBQUtrRSxNQUFLLFdBQ2YsTUFBTXNkLEVBQU93dUMsR0FBU3hKLG9CQUFvQnhtRCxLQUFNbWdELEdBRWhELEdBQXNCLGlCQUFYQSxFQUFYLENBSUEsUUFBNEIsSUFBakIzK0IsRUFBSzIrQixHQUNkLE1BQU0sSUFBSS9oQyxVQUFVLG9CQUFvQitoQyxNQUcxQzMrQixFQUFLMitCLFNBSVQ4RixrQkFBa0J4K0IsR0FDaEIsR0FBSUEsSUFqVW1CLElBaVVUQSxFQUFNNEMsUUFBZ0QsVUFBZjVDLEVBQU05bEIsTUFwVTdDLFFBb1VpRThsQixFQUFNOVosS0FDbkYsT0FHRixNQUFNMGpELEVBQVU1SixHQUFlejNDLEtBQUtvL0MsSUFFcEMsSUFBSyxJQUFJanRELEVBQUksRUFBRzJDLEVBQU11c0QsRUFBUS90RCxPQUFRbkIsRUFBSTJDLEVBQUszQyxJQUFLLENBQ2xELE1BQU1lLEVBQVU4c0QsR0FBUzlKLFlBQVltTCxFQUFRbHZELElBRTdDLElBQUtlLElBQXlDLElBQTlCQSxFQUFRd21ELFFBQVFvRyxVQUM5QixTQUdGLElBQUs1c0QsRUFBUStxRCxXQUNYLFNBR0YsTUFBTTlpQyxFQUFnQixDQUNwQkEsY0FBZWpvQixFQUFRdWlELFVBR3pCLEdBQUloK0IsRUFBTyxDQUNULE1BQU02cEMsRUFBZTdwQyxFQUFNNnBDLGVBQ3JCQyxFQUFlRCxFQUFhNVIsU0FBU3g4QyxFQUFRZ3RELE9BRW5ELEdBQUlvQixFQUFhNVIsU0FBU3g4QyxFQUFRdWlELFdBQTJDLFdBQTlCdmlELEVBQVF3bUQsUUFBUW9HLFlBQTJCeUIsR0FBOEMsWUFBOUJydUQsRUFBUXdtRCxRQUFRb0csV0FBMkJ5QixFQUNuSixTQUlGLEdBQUlydUQsRUFBUWd0RCxNQUFNem5ELFNBQVNnZixFQUFNaGlCLFVBQTJCLFVBQWZnaUIsRUFBTTlsQixNQWxXekMsUUFrVzZEOGxCLEVBQU05WixLQUFxQixxQ0FBcUNWLEtBQUt3YSxFQUFNaGlCLE9BQU84Z0QsVUFDdkosU0FHaUIsVUFBZjkrQixFQUFNOWxCLE9BQ1J3cEIsRUFBY203QixXQUFhNytCLEdBSS9CdmtCLEVBQVF1dEQsY0FBY3RsQyxJQUkxQjg2Qiw0QkFBNEI1WixHQUMxQixPQUFPd1QsR0FBdUJ4VCxJQUFZQSxFQUFRenBDLFdBR3BEcWpELDZCQUE2QngrQixHQVEzQixHQUFJLGtCQUFrQnhhLEtBQUt3YSxFQUFNaGlCLE9BQU84Z0QsU0FBVzkrQixFQUFNOVosTUFBUWtoRCxJQUFhcG5DLEVBQU05WixNQUFRaWhELEtBQWlCbm5DLEVBQU05WixNQUFRb2hELElBQWtCdG5DLEVBQU05WixNQUFRbWhELElBQWdCcm5DLEVBQU1oaUIsT0FBT3lVLFFBQVFtMUMsTUFBbUJMLEdBQWUvaEQsS0FBS3dhLEVBQU05WixLQUMzTyxPQUdGLE1BQU02akQsRUFBV3h4RCxLQUFLMGdELFVBQVVqNEMsU0FBUzBtRCxJQUV6QyxJQUFLcUMsR0FBWS9wQyxFQUFNOVosTUFBUWloRCxHQUM3QixPQU1GLEdBSEFubkMsRUFBTVMsaUJBQ05ULEVBQU1PLGtCQUVGblosR0FBVzdPLE1BQ2IsT0FHRixNQUFNeXhELEVBQWtCenhELEtBQUtnSCxRQUFRb29ELElBQTBCcHZELEtBQU95bkQsR0FBZTV0QyxLQUFLN1osS0FBTW92RCxJQUF3QixHQUNsSDliLEVBQVcwYyxHQUFTeEosb0JBQW9CaUwsR0FFOUMsR0FBSWhxQyxFQUFNOVosTUFBUWloRCxHQUtsQixPQUFJbm5DLEVBQU05WixNQUFRbWhELElBQWdCcm5DLEVBQU05WixNQUFRb2hELElBQ3pDeUMsR0FDSGxlLEVBQVM3dUIsWUFHWDZ1QixFQUFTNmQsZ0JBQWdCMXBDLFNBS3RCK3BDLEdBQVkvcEMsRUFBTTlaLE1BQVFraEQsSUFDN0JtQixHQUFTMEIsY0FmVHBlLEVBQVMzdUIsUUEyQmZzL0IsR0FBYTU4QixHQUFHem5CLFNBQVVzdkQsR0FBd0JFLEdBQXdCWSxHQUFTMkIsdUJBQ25GMU4sR0FBYTU4QixHQUFHem5CLFNBQVVzdkQsR0FBd0JHLEdBQWVXLEdBQVMyQix1QkFDMUUxTixHQUFhNThCLEdBQUd6bkIsU0FBVXF2RCxHQUF3QmUsR0FBUzBCLFlBQzNEek4sR0FBYTU4QixHQUFHem5CLFNBbGFhLDZCQWthbUJvd0QsR0FBUzBCLFlBQ3pEek4sR0FBYTU4QixHQUFHem5CLFNBQVVxdkQsR0FBd0JHLElBQXdCLFNBQVUzbkMsR0FDbEZBLEVBQU1TLGlCQUNOOG5DLEdBQVN4SixvQkFBb0J4bUQsTUFBTTRrQixZQVNyQ3M4QixHQUFtQjhPLElBUW5CLE1BQU00QixHQUF5QixvREFDekJDLEdBQTBCLGNBRWhDLE1BQU1DLEdBQ0pydUQsY0FDRXpELEtBQUt5bEQsU0FBVzdsRCxTQUFTMmtCLEtBRzNCd3RDLFdBRUUsTUFBTUMsRUFBZ0JweUQsU0FBU3VQLGdCQUFnQjJoQyxZQUMvQyxPQUFPOXFDLEtBQUttb0MsSUFBSXB1QyxPQUFPa3lELFdBQWFELEdBR3RDcnRDLE9BQ0UsTUFBTStMLEVBQVExd0IsS0FBSyt4RCxXQUVuQi94RCxLQUFLa3lELG1CQUdMbHlELEtBQUtteUQsc0JBQXNCbnlELEtBQUt5bEQsU0FBVSxnQkFBZ0IyTSxHQUFtQkEsRUFBa0IxaEMsSUFHL0Yxd0IsS0FBS215RCxzQkFBc0JQLEdBQXdCLGdCQUFnQlEsR0FBbUJBLEVBQWtCMWhDLElBRXhHMXdCLEtBQUtteUQsc0JBQXNCTixHQUF5QixlQUFlTyxHQUFtQkEsRUFBa0IxaEMsSUFHMUd3aEMsbUJBQ0VseUQsS0FBS3F5RCxzQkFBc0JyeUQsS0FBS3lsRCxTQUFVLFlBRTFDemxELEtBQUt5bEQsU0FBU2xpQyxNQUFNbVcsU0FBVyxTQUdqQ3k0QixzQkFBc0JsdkQsRUFBVXF2RCxFQUFXbnVELEdBQ3pDLE1BQU1vdUQsRUFBaUJ2eUQsS0FBSyt4RCxXQWE1Qi94RCxLQUFLd3lELDJCQUEyQnZ2RCxHQVhIb3BDLElBQzNCLEdBQUlBLElBQVlyc0MsS0FBS3lsRCxVQUFZMWxELE9BQU9reUQsV0FBYTVsQixFQUFReUUsWUFBY3loQixFQUN6RSxPQUdGdnlELEtBQUtxeUQsc0JBQXNCaG1CLEVBQVNpbUIsR0FFcEMsTUFBTUYsRUFBa0JyeUQsT0FBT3F3QixpQkFBaUJpYyxHQUFTaW1CLEdBQ3pEam1CLEVBQVE5b0IsTUFBTSt1QyxHQUFhLEdBQUdudUQsRUFBUzY5QyxPQUFPOXZCLFdBQVdrZ0MsV0FNN0RoOUMsUUFDRXBWLEtBQUt5eUQsd0JBQXdCenlELEtBQUt5bEQsU0FBVSxZQUU1Q3psRCxLQUFLeXlELHdCQUF3Qnp5RCxLQUFLeWxELFNBQVUsZ0JBRTVDemxELEtBQUt5eUQsd0JBQXdCYixHQUF3QixnQkFFckQ1eEQsS0FBS3l5RCx3QkFBd0JaLEdBQXlCLGVBR3hEUSxzQkFBc0JobUIsRUFBU2ltQixHQUM3QixNQUFNSSxFQUFjcm1CLEVBQVE5b0IsTUFBTSt1QyxHQUU5QkksR0FDRnpMLEdBQVlDLGlCQUFpQjdhLEVBQVNpbUIsRUFBV0ksR0FJckRELHdCQUF3Qnh2RCxFQUFVcXZELEdBWWhDdHlELEtBQUt3eUQsMkJBQTJCdnZELEdBWEhvcEMsSUFDM0IsTUFBTWxsQyxFQUFROC9DLEdBQVlPLGlCQUFpQm5iLEVBQVNpbUIsUUFFL0IsSUFBVm5yRCxFQUNUa2xDLEVBQVE5b0IsTUFBTW92QyxlQUFlTCxJQUU3QnJMLEdBQVlFLG9CQUFvQjlhLEVBQVNpbUIsR0FDekNqbUIsRUFBUTlvQixNQUFNK3VDLEdBQWFuckQsTUFPakNxckQsMkJBQTJCdnZELEVBQVUydkQsR0FDL0IsR0FBVTN2RCxHQUNaMnZELEVBQVMzdkQsR0FFVHdrRCxHQUFlejNDLEtBQUsvTSxFQUFVakQsS0FBS3lsRCxVQUFVelksUUFBUTRsQixHQUl6REMsZ0JBQ0UsT0FBTzd5RCxLQUFLK3hELFdBQWEsR0FXN0IsTUFBTWUsR0FBWSxDQUNoQnBqRCxVQUFXLGlCQUNYNndDLFdBQVcsRUFFWHlGLFlBQVksRUFDWitNLFlBQWEsT0FFYkMsY0FBZSxNQUVYQyxHQUFnQixDQUNwQnZqRCxVQUFXLFNBQ1g2d0MsVUFBVyxVQUNYeUYsV0FBWSxVQUNaK00sWUFBYSxtQkFDYkMsY0FBZSxtQkFJWEUsR0FBb0IsT0FDcEJDLEdBQWtCLHdCQUV4QixNQUFNQyxHQUNKM3ZELFlBQVkwOEMsR0FDVm5nRCxLQUFLMHBELFFBQVUxcEQsS0FBSzJwRCxXQUFXeEosR0FDL0JuZ0QsS0FBS3F6RCxhQUFjLEVBQ25CcnpELEtBQUt5bEQsU0FBVyxLQUdsQmhoQyxLQUFLdGdCLEdBQ0VuRSxLQUFLMHBELFFBQVFuSixXQUtsQnZnRCxLQUFLc3pELFVBRUR0ekQsS0FBSzBwRCxRQUFRMUQsWUFDZmxGLEdBQU85Z0QsS0FBS3V6RCxlQUdkdnpELEtBQUt1ekQsY0FBYzdTLFVBQVVybUMsSUFBSTY0QyxJQUVqQ2x6RCxLQUFLd3pELG1CQUFrQixLQUNyQmhTLEdBQVFyOUMsT0FiUnE5QyxHQUFRcjlDLEdBaUJad2dCLEtBQUt4Z0IsR0FDRW5FLEtBQUswcEQsUUFBUW5KLFdBS2xCdmdELEtBQUt1ekQsY0FBYzdTLFVBQVVoa0MsT0FBT3cyQyxJQUVwQ2x6RCxLQUFLd3pELG1CQUFrQixLQUNyQnh6RCxLQUFLMmxELFVBQ0xuRSxHQUFRcjlDLE9BUlJxOUMsR0FBUXI5QyxHQWFab3ZELGNBQ0UsSUFBS3Z6RCxLQUFLeWxELFNBQVUsQ0FDbEIsTUFBTWdPLEVBQVc3ekQsU0FBUzBDLGNBQWMsT0FDeENteEQsRUFBUy9qRCxVQUFZMVAsS0FBSzBwRCxRQUFRaDZDLFVBRTlCMVAsS0FBSzBwRCxRQUFRMUQsWUFDZnlOLEVBQVMvUyxVQUFVcm1DLElBbkRELFFBc0RwQnJhLEtBQUt5bEQsU0FBV2dPLEVBR2xCLE9BQU96ekQsS0FBS3lsRCxTQUdka0UsV0FBV3hKLEdBT1QsT0FOQUEsRUFBUyxJQUFLMlMsTUFDVSxpQkFBWDNTLEVBQXNCQSxFQUFTLEtBR3JDNFMsWUFBYy9TLEdBQVdHLEVBQU80UyxhQUN2QzlTLEdBbkVXLFdBbUVhRSxFQUFROFMsSUFDekI5UyxFQUdUbVQsVUFDTXR6RCxLQUFLcXpELGNBSVRyekQsS0FBSzBwRCxRQUFRcUosWUFBWTNqQyxPQUFPcHZCLEtBQUt1ekQsZUFFckN0UCxHQUFhNThCLEdBQUdybkIsS0FBS3V6RCxjQUFlSixJQUFpQixLQUNuRDNSLEdBQVF4aEQsS0FBSzBwRCxRQUFRc0osa0JBRXZCaHpELEtBQUtxekQsYUFBYyxHQUdyQjFOLFVBQ08zbEQsS0FBS3F6RCxjQUlWcFAsR0FBYXY4QixJQUFJMW5CLEtBQUt5bEQsU0FBVTBOLElBRWhDbnpELEtBQUt5bEQsU0FBUy9vQyxTQUVkMWMsS0FBS3F6RCxhQUFjLEdBR3JCRyxrQkFBa0JydkQsR0FDaEJzOUMsR0FBdUJ0OUMsRUFBVW5FLEtBQUt1ekQsY0FBZXZ6RCxLQUFLMHBELFFBQVExRCxhQVd0RSxNQUFNME4sR0FBWSxDQUNoQkMsWUFBYSxLQUViQyxXQUFXLEdBRVBDLEdBQWdCLENBQ3BCRixZQUFhLFVBQ2JDLFVBQVcsV0FJUEUsR0FBYyxnQkFLZEMsR0FBbUIsV0FFekIsTUFBTUMsR0FDSnZ3RCxZQUFZMDhDLEdBQ1ZuZ0QsS0FBSzBwRCxRQUFVMXBELEtBQUsycEQsV0FBV3hKLEdBQy9CbmdELEtBQUtpMEQsV0FBWSxFQUNqQmowRCxLQUFLazBELHFCQUF1QixLQUc5QkMsV0FDRSxNQUFNLFlBQ0pSLEVBQVcsVUFDWEMsR0FDRTV6RCxLQUFLMHBELFFBRUwxcEQsS0FBS2kwRCxZQUlMTCxHQUNGRCxFQUFZem1DLFFBR2QrMkIsR0FBYXY4QixJQUFJOW5CLFNBQVVrMEQsSUFFM0I3UCxHQUFhNThCLEdBQUd6bkIsU0E3Qkksd0JBNkJ1QjZuQixHQUFTem5CLEtBQUtvMEQsZUFBZTNzQyxLQUN4RXc4QixHQUFhNThCLEdBQUd6bkIsU0E3Qk0sNEJBNkJ1QjZuQixHQUFTem5CLEtBQUtxMEQsZUFBZTVzQyxLQUMxRXpuQixLQUFLaTBELFdBQVksR0FHbkJLLGFBQ090MEQsS0FBS2kwRCxZQUlWajBELEtBQUtpMEQsV0FBWSxFQUNqQmhRLEdBQWF2OEIsSUFBSTluQixTQUFVazBELEtBSTdCTSxlQUFlM3NDLEdBQ2IsTUFBTSxPQUNKaGlCLEdBQ0VnaUIsR0FDRSxZQUNKa3NDLEdBQ0UzekQsS0FBSzBwRCxRQUVULEdBQUlqa0QsSUFBVzdGLFVBQVk2RixJQUFXa3VELEdBQWVBLEVBQVlsckQsU0FBU2hELEdBQ3hFLE9BR0YsTUFBTTZMLEVBQVdtMkMsR0FBZU0sa0JBQWtCNEwsR0FFMUIsSUFBcEJyaUQsRUFBU2hPLE9BQ1hxd0QsRUFBWXptQyxRQUNIbHRCLEtBQUtrMEQsdUJBQXlCSCxHQUN2Q3ppRCxFQUFTQSxFQUFTaE8sT0FBUyxHQUFHNHBCLFFBRTlCNWIsRUFBUyxHQUFHNGIsUUFJaEJtbkMsZUFBZTVzQyxHQWpFRCxRQWtFUkEsRUFBTTlaLE1BSVYzTixLQUFLazBELHFCQUF1QnpzQyxFQUFNd0UsU0FBVzhuQyxHQXJFekIsV0F3RXRCcEssV0FBV3hKLEdBS1QsT0FKQUEsRUFBUyxJQUFLdVQsTUFDVSxpQkFBWHZULEVBQXNCQSxFQUFTLElBRTVDRixHQWxGVyxZQWtGYUUsRUFBUTBULElBQ3pCMVQsR0FpQlgsTUFBTW9VLEdBQVMsUUFJVEMsR0FBZSxTQUNmQyxHQUFZLENBQ2hCaEIsVUFBVSxFQUNWdEwsVUFBVSxFQUNWajdCLE9BQU8sR0FFSHduQyxHQUFnQixDQUNwQmpCLFNBQVUsbUJBQ1Z0TCxTQUFVLFVBQ1ZqN0IsTUFBTyxXQUlIeW5DLEdBQWlCLGtCQUNqQkMsR0FBZSxnQkFFZkMsR0FBZSxrQkFDZkMsR0FBc0IseUJBQ3RCQyxHQUEwQiwyQkFFMUJDLEdBQTBCLDZCQUUxQkMsR0FBa0IsYUFFbEJDLEdBQW9CLE9BQ3BCQyxHQUFvQixlQVcxQixNQUFNQyxXQUFjNVAsR0FDbEIvaEQsWUFBWTRvQyxFQUFTOFQsR0FDbkI4SSxNQUFNNWMsR0FDTnJzQyxLQUFLMHBELFFBQVUxcEQsS0FBSzJwRCxXQUFXeEosR0FDL0JuZ0QsS0FBS3ExRCxRQUFVNU4sR0FBZUMsUUFiVixnQkFhbUMxbkQsS0FBS3lsRCxVQUM1RHpsRCxLQUFLczFELFVBQVl0MUQsS0FBS3UxRCxzQkFDdEJ2MUQsS0FBS3cxRCxXQUFheDFELEtBQUt5MUQsdUJBQ3ZCejFELEtBQUtpdUQsVUFBVyxFQUNoQmp1RCxLQUFLMDFELHNCQUF1QixFQUM1QjExRCxLQUFLeXRELGtCQUFtQixFQUN4Qnp0RCxLQUFLMjFELFdBQWEsSUFBSTdELEdBSWI1SCxxQkFDVCxPQUFPdUssR0FHRXJULGtCQUNULE9BQU9tVCxHQUlUM3ZDLE9BQU91RyxHQUNMLE9BQU9uckIsS0FBS2l1RCxTQUFXanVELEtBQUsya0IsT0FBUzNrQixLQUFLeWtCLEtBQUswRyxHQUdqRDFHLEtBQUswRyxHQUNDbnJCLEtBQUtpdUQsVUFBWWp1RCxLQUFLeXRELGtCQUlSeEosR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0FBVW1QLEdBQWMsQ0FDbEV6cEMsY0FBQUEsSUFHWUQsbUJBSWRsckIsS0FBS2l1RCxVQUFXLEVBRVpqdUQsS0FBSzQxRCxnQkFDUDUxRCxLQUFLeXRELGtCQUFtQixHQUcxQnp0RCxLQUFLMjFELFdBQVdoeEMsT0FFaEIva0IsU0FBUzJrQixLQUFLbThCLFVBQVVybUMsSUFBSTQ2QyxJQUU1QmoxRCxLQUFLNjFELGdCQUVMNzFELEtBQUs4MUQsa0JBRUw5MUQsS0FBSysxRCxrQkFFTDlSLEdBQWE1OEIsR0FBR3JuQixLQUFLcTFELFFBQVNMLElBQXlCLEtBQ3JEL1EsR0FBYTE4QixJQUFJdm5CLEtBQUt5bEQsU0ExRUUsNEJBMEUrQmgrQixJQUNqREEsRUFBTWhpQixTQUFXekYsS0FBS3lsRCxXQUN4QnpsRCxLQUFLMDFELHNCQUF1QixTQUtsQzExRCxLQUFLZzJELGVBQWMsSUFBTWgyRCxLQUFLaTJELGFBQWE5cUMsTUFHN0N4RyxPQUNFLElBQUsza0IsS0FBS2l1RCxVQUFZanVELEtBQUt5dEQsaUJBQ3pCLE9BS0YsR0FGa0J4SixHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQWpHM0IsaUJBbUdIdjZCLGlCQUNaLE9BR0ZsckIsS0FBS2l1RCxVQUFXLEVBRWhCLE1BQU1qSSxFQUFhaG1ELEtBQUs0MUQsY0FFcEI1UCxJQUNGaG1ELEtBQUt5dEQsa0JBQW1CLEdBRzFCenRELEtBQUs4MUQsa0JBRUw5MUQsS0FBSysxRCxrQkFFTC8xRCxLQUFLdzFELFdBQVdsQixhQUVoQnQwRCxLQUFLeWxELFNBQVMvRSxVQUFVaGtDLE9BQU93NEMsSUFFL0JqUixHQUFhdjhCLElBQUkxbkIsS0FBS3lsRCxTQUFVcVAsSUFDaEM3USxHQUFhdjhCLElBQUkxbkIsS0FBS3ExRCxRQUFTTCxJQUUvQmgxRCxLQUFLK2xELGdCQUFlLElBQU0vbEQsS0FBS2syRCxjQUFjbDJELEtBQUt5bEQsU0FBVU8sR0FHOURMLFVBQ0UsQ0FBQzVsRCxPQUFRQyxLQUFLcTFELFNBQVNyb0IsU0FBUW1wQixHQUFlbFMsR0FBYXY4QixJQUFJeXVDLEVBM0kvQyxlQTZJaEJuMkQsS0FBS3MxRCxVQUFVM1AsVUFFZjNsRCxLQUFLdzFELFdBQVdsQixhQUVoQnJMLE1BQU10RCxVQUdSeVEsZUFDRXAyRCxLQUFLNjFELGdCQUlQTixzQkFDRSxPQUFPLElBQUluQyxHQUFTLENBQ2xCN1MsVUFBVzhELFFBQVFya0QsS0FBSzBwRCxRQUFRK0osVUFFaEN6TixXQUFZaG1ELEtBQUs0MUQsZ0JBSXJCSCx1QkFDRSxPQUFPLElBQUl6QixHQUFVLENBQ25CTCxZQUFhM3pELEtBQUt5bEQsV0FJdEJrRSxXQUFXeEosR0FNVCxPQUxBQSxFQUFTLElBQUtzVSxNQUNUeE4sR0FBWUcsa0JBQWtCcG5ELEtBQUt5bEQsYUFDaEIsaUJBQVh0RixFQUFzQkEsRUFBUyxJQUU1Q0YsR0FBZ0JzVSxHQUFRcFUsRUFBUXVVLElBQ3pCdlUsRUFHVDhWLGFBQWE5cUMsR0FDWCxNQUFNNjZCLEVBQWFobUQsS0FBSzQxRCxjQUVsQlMsRUFBWTVPLEdBQWVDLFFBckpULGNBcUpzQzFuRCxLQUFLcTFELFNBRTlEcjFELEtBQUt5bEQsU0FBUzdpRCxZQUFjNUMsS0FBS3lsRCxTQUFTN2lELFdBQVdyQixXQUFhaS9DLEtBQUtDLGNBRTFFN2dELFNBQVMya0IsS0FBSzZLLE9BQU9wdkIsS0FBS3lsRCxVQUc1QnpsRCxLQUFLeWxELFNBQVNsaUMsTUFBTUMsUUFBVSxRQUU5QnhqQixLQUFLeWxELFNBQVNqNEMsZ0JBQWdCLGVBRTlCeE4sS0FBS3lsRCxTQUFTaGpELGFBQWEsY0FBYyxHQUV6Q3pDLEtBQUt5bEQsU0FBU2hqRCxhQUFhLE9BQVEsVUFFbkN6QyxLQUFLeWxELFNBQVM3dUIsVUFBWSxFQUV0QnkvQixJQUNGQSxFQUFVei9CLFVBQVksR0FHcEJvdkIsR0FDRmxGLEdBQU85Z0QsS0FBS3lsRCxVQUdkemxELEtBQUt5bEQsU0FBUy9FLFVBQVVybUMsSUFBSTY2QyxJQWE1QmwxRCxLQUFLK2xELGdCQVhzQixLQUNyQi9sRCxLQUFLMHBELFFBQVF4OEIsT0FDZmx0QixLQUFLdzFELFdBQVdyQixXQUdsQm4wRCxLQUFLeXRELGtCQUFtQixFQUN4QnhKLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBbk1WLGlCQW1NbUMsQ0FDakR0NkIsY0FBQUEsTUFJb0NuckIsS0FBS3ExRCxRQUFTclAsR0FHeEQ4UCxrQkFDTTkxRCxLQUFLaXVELFNBQ1BoSyxHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQUFVc1AsSUFBeUJ0dEMsSUFDbER6bkIsS0FBSzBwRCxRQUFRdkIsVUFBWTFnQyxFQUFNOVosTUFBUTZtRCxJQUN6Qy9zQyxFQUFNUyxpQkFDTmxvQixLQUFLMmtCLFFBQ0sza0IsS0FBSzBwRCxRQUFRdkIsVUFBWTFnQyxFQUFNOVosTUFBUTZtRCxJQUNqRHgwRCxLQUFLczJELGdDQUlUclMsR0FBYXY4QixJQUFJMW5CLEtBQUt5bEQsU0FBVXNQLElBSXBDZ0Isa0JBQ00vMUQsS0FBS2l1RCxTQUNQaEssR0FBYTU4QixHQUFHdG5CLE9BQVE4MEQsSUFBYyxJQUFNNzBELEtBQUs2MUQsa0JBRWpENVIsR0FBYXY4QixJQUFJM25CLE9BQVE4MEQsSUFJN0JxQixhQUNFbDJELEtBQUt5bEQsU0FBU2xpQyxNQUFNQyxRQUFVLE9BRTlCeGpCLEtBQUt5bEQsU0FBU2hqRCxhQUFhLGVBQWUsR0FFMUN6QyxLQUFLeWxELFNBQVNqNEMsZ0JBQWdCLGNBRTlCeE4sS0FBS3lsRCxTQUFTajRDLGdCQUFnQixRQUU5QnhOLEtBQUt5dEQsa0JBQW1CLEVBRXhCenRELEtBQUtzMUQsVUFBVTN3QyxNQUFLLEtBQ2xCL2tCLFNBQVMya0IsS0FBS204QixVQUFVaGtDLE9BQU91NEMsSUFFL0JqMUQsS0FBS3UyRCxvQkFFTHYyRCxLQUFLMjFELFdBQVd2Z0QsUUFFaEI2dUMsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0FBVWtQLE9BSXhDcUIsY0FBYzd4RCxHQUNaOC9DLEdBQWE1OEIsR0FBR3JuQixLQUFLeWxELFNBQVVxUCxJQUFxQnJ0QyxJQUM5Q3puQixLQUFLMDFELHFCQUNQMTFELEtBQUswMUQsc0JBQXVCLEVBSTFCanVDLEVBQU1oaUIsU0FBV2dpQixFQUFNc0MsaUJBSUcsSUFBMUIvcEIsS0FBSzBwRCxRQUFRK0osU0FDZnp6RCxLQUFLMmtCLE9BQzhCLFdBQTFCM2tCLEtBQUswcEQsUUFBUStKLFVBQ3RCenpELEtBQUtzMkQsaUNBSVR0MkQsS0FBS3MxRCxVQUFVN3dDLEtBQUt0Z0IsR0FHdEJ5eEQsY0FDRSxPQUFPNTFELEtBQUt5bEQsU0FBUy9FLFVBQVVqNEMsU0F0UVQsUUF5UXhCNnRELDZCQUdFLEdBRmtCclMsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0FyUm5CLDBCQXVSWHY2QixpQkFDWixPQUdGLE1BQU0sVUFDSncxQixFQUFTLGFBQ1R4TCxFQUFZLE1BQ1ozeEIsR0FDRXZqQixLQUFLeWxELFNBQ0grUSxFQUFxQnRoQixFQUFldDFDLFNBQVN1UCxnQkFBZ0IwaEMsY0FFOUQybEIsR0FBMEMsV0FBcEJqekMsRUFBTXFXLFdBQTBCOG1CLEVBQVVqNEMsU0FBUzBzRCxNQUl6RXFCLElBQ0hqekMsRUFBTXFXLFVBQVksVUFHcEI4bUIsRUFBVXJtQyxJQUFJODZDLElBRWRuMUQsS0FBSytsRCxnQkFBZSxLQUNsQnJGLEVBQVVoa0MsT0FBT3k0QyxJQUVacUIsR0FDSHgyRCxLQUFLK2xELGdCQUFlLEtBQ2xCeGlDLEVBQU1xVyxVQUFZLEtBQ2pCNTVCLEtBQUtxMUQsV0FFVHIxRCxLQUFLcTFELFNBRVJyMUQsS0FBS3lsRCxTQUFTdjRCLFNBTWhCMm9DLGdCQUNFLE1BQU1XLEVBQXFCeDJELEtBQUt5bEQsU0FBU3ZRLGFBQWV0MUMsU0FBU3VQLGdCQUFnQjBoQyxhQUUzRTBoQixFQUFpQnZ5RCxLQUFLMjFELFdBQVc1RCxXQUVqQzBFLEVBQW9CbEUsRUFBaUIsSUFFdENrRSxHQUFxQkQsSUFBdUJ2VixNQUFXd1YsSUFBc0JELEdBQXNCdlYsUUFDdEdqaEQsS0FBS3lsRCxTQUFTbGlDLE1BQU1tekMsWUFBYyxHQUFHbkUsUUFHbkNrRSxJQUFzQkQsSUFBdUJ2VixPQUFZd1YsR0FBcUJELEdBQXNCdlYsUUFDdEdqaEQsS0FBS3lsRCxTQUFTbGlDLE1BQU1vekMsYUFBZSxHQUFHcEUsT0FJMUNnRSxvQkFDRXYyRCxLQUFLeWxELFNBQVNsaUMsTUFBTW16QyxZQUFjLEdBQ2xDMTJELEtBQUt5bEQsU0FBU2xpQyxNQUFNb3pDLGFBQWUsR0FJckMxUSx1QkFBdUI5RixFQUFRaDFCLEdBQzdCLE9BQU9uckIsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBTzR6QyxHQUFNNU8sb0JBQW9CeG1ELEtBQU1tZ0QsR0FFN0MsR0FBc0IsaUJBQVhBLEVBQVgsQ0FJQSxRQUE0QixJQUFqQjMrQixFQUFLMitCLEdBQ2QsTUFBTSxJQUFJL2hDLFVBQVUsb0JBQW9CK2hDLE1BRzFDMytCLEVBQUsyK0IsR0FBUWgxQixRQVluQjg0QixHQUFhNThCLEdBQUd6bkIsU0FqV2UsMEJBUUEsNEJBeVYyQyxTQUFVNm5CLEdBQ2xGLE1BQU1oaUIsRUFBU282QyxHQUF1QjcvQyxNQUVsQyxDQUFDLElBQUssUUFBUTAvQyxTQUFTMS9DLEtBQUt1bUQsVUFDOUI5K0IsRUFBTVMsaUJBR1IrN0IsR0FBYTE4QixJQUFJOWhCLEVBQVFtdkQsSUFBY2dDLElBQ2pDQSxFQUFVMXJDLGtCQUtkKzRCLEdBQWExOEIsSUFBSTloQixFQUFRa3ZELElBQWdCLEtBQ25DcFUsR0FBVXZnRCxPQUNaQSxLQUFLa3RCLGNBS1gsTUFBTTJwQyxFQUFlcFAsR0FBZUMsUUFoWGQsZUFrWGxCbVAsR0FDRnpCLEdBQU1sUCxZQUFZMlEsR0FBY2x5QyxPQUdyQnl3QyxHQUFNNU8sb0JBQW9CL2dELEdBQ2xDbWYsT0FBTzVrQixTQUVkb21ELEdBQXFCZ1AsSUFRckJsVSxHQUFtQmtVLElBY25CLE1BQU0wQixHQUFTLFlBTVRDLEdBQVksQ0FDaEJ0RCxVQUFVLEVBQ1Z0TCxVQUFVLEVBQ1YzVSxRQUFRLEdBRUp3akIsR0FBZ0IsQ0FDcEJ2RCxTQUFVLFVBQ1Z0TCxTQUFVLFVBQ1YzVSxPQUFRLFdBRUp5akIsR0FBb0IsT0FFcEJDLEdBQWdCLGtCQUloQkMsR0FBaUIsc0JBVXZCLE1BQU1DLFdBQWtCNVIsR0FDdEIvaEQsWUFBWTRvQyxFQUFTOFQsR0FDbkI4SSxNQUFNNWMsR0FDTnJzQyxLQUFLMHBELFFBQVUxcEQsS0FBSzJwRCxXQUFXeEosR0FDL0JuZ0QsS0FBS2l1RCxVQUFXLEVBQ2hCanVELEtBQUtzMUQsVUFBWXQxRCxLQUFLdTFELHNCQUN0QnYxRCxLQUFLdzFELFdBQWF4MUQsS0FBS3kxRCx1QkFFdkJ6MUQsS0FBS2lxRCxxQkFJSTdJLGtCQUNULE9BQU8wVixHQUdFNU0scUJBQ1QsT0FBTzZNLEdBSVRueUMsT0FBT3VHLEdBQ0wsT0FBT25yQixLQUFLaXVELFNBQVdqdUQsS0FBSzJrQixPQUFTM2tCLEtBQUt5a0IsS0FBSzBHLEdBR2pEMUcsS0FBSzBHLEdBQ0NuckIsS0FBS2l1RCxVQUlTaEssR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0EzQzNCLG9CQTJDbUQsQ0FDbEV0NkIsY0FBQUEsSUFHWUQsbUJBSWRsckIsS0FBS2l1RCxVQUFXLEVBQ2hCanVELEtBQUt5bEQsU0FBU2xpQyxNQUFNc1EsV0FBYSxVQUVqQzd6QixLQUFLczFELFVBQVU3d0MsT0FFVnprQixLQUFLMHBELFFBQVFsVyxTQUNoQixJQUFJc2UsSUFBa0JudEMsT0FHeEIza0IsS0FBS3lsRCxTQUFTajRDLGdCQUFnQixlQUU5QnhOLEtBQUt5bEQsU0FBU2hqRCxhQUFhLGNBQWMsR0FFekN6QyxLQUFLeWxELFNBQVNoakQsYUFBYSxPQUFRLFVBRW5DekMsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQUFJNDhDLElBWTVCajNELEtBQUsrbEQsZ0JBVm9CLEtBQ2xCL2xELEtBQUswcEQsUUFBUWxXLFFBQ2hCeHpDLEtBQUt3MUQsV0FBV3JCLFdBR2xCbFEsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0F4RVYscUJBd0VtQyxDQUNqRHQ2QixjQUFBQSxNQUlrQ25yQixLQUFLeWxELFVBQVUsSUFHdkQ5Z0MsT0FDTzNrQixLQUFLaXVELFdBSVFoSyxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQXBGM0IscUJBc0ZIdjZCLG1CQUlkbHJCLEtBQUt3MUQsV0FBV2xCLGFBRWhCdDBELEtBQUt5bEQsU0FBU3Q0QixPQUVkbnRCLEtBQUtpdUQsVUFBVyxFQUVoQmp1RCxLQUFLeWxELFNBQVMvRSxVQUFVaGtDLE9BQU91NkMsSUFFL0JqM0QsS0FBS3MxRCxVQUFVM3dDLE9Ba0JmM2tCLEtBQUsrbEQsZ0JBaEJvQixLQUN2Qi9sRCxLQUFLeWxELFNBQVNoakQsYUFBYSxlQUFlLEdBRTFDekMsS0FBS3lsRCxTQUFTajRDLGdCQUFnQixjQUU5QnhOLEtBQUt5bEQsU0FBU2o0QyxnQkFBZ0IsUUFFOUJ4TixLQUFLeWxELFNBQVNsaUMsTUFBTXNRLFdBQWEsU0FFNUI3ekIsS0FBSzBwRCxRQUFRbFcsU0FDaEIsSUFBSXNlLElBQWtCMThDLFFBR3hCNnVDLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBQVUwUixNQUdBbjNELEtBQUt5bEQsVUFBVSxLQUd2REUsVUFDRTNsRCxLQUFLczFELFVBQVUzUCxVQUVmM2xELEtBQUt3MUQsV0FBV2xCLGFBRWhCckwsTUFBTXRELFVBSVJnRSxXQUFXeEosR0FNVCxPQUxBQSxFQUFTLElBQUs0VyxNQUNUOVAsR0FBWUcsa0JBQWtCcG5ELEtBQUt5bEQsYUFDaEIsaUJBQVh0RixFQUFzQkEsRUFBUyxJQUU1Q0YsR0FBZ0I2VyxHQUFRM1csRUFBUTZXLElBQ3pCN1csRUFHVG9WLHNCQUNFLE9BQU8sSUFBSW5DLEdBQVMsQ0FDbEIxakQsVUEvSXNCLHFCQWdKdEI2d0MsVUFBV3ZnRCxLQUFLMHBELFFBQVErSixTQUN4QnpOLFlBQVksRUFDWitNLFlBQWEveUQsS0FBS3lsRCxTQUFTN2lELFdBQzNCb3dELGNBQWUsSUFBTWh6RCxLQUFLMmtCLFNBSTlCOHdDLHVCQUNFLE9BQU8sSUFBSXpCLEdBQVUsQ0FDbkJMLFlBQWEzekQsS0FBS3lsRCxXQUl0QndFLHFCQUNFaEcsR0FBYTU4QixHQUFHcm5CLEtBQUt5bEQsU0F2SkssZ0NBdUo0QmgrQixJQUNoRHpuQixLQUFLMHBELFFBQVF2QixVQTNLSixXQTJLZ0IxZ0MsRUFBTTlaLEtBQ2pDM04sS0FBSzJrQixVQU1Yc2hDLHVCQUF1QjlGLEdBQ3JCLE9BQU9uZ0QsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBTzQxQyxHQUFVNVEsb0JBQW9CeG1ELEtBQU1tZ0QsR0FFakQsR0FBc0IsaUJBQVhBLEVBQVgsQ0FJQSxRQUFxQnI2QyxJQUFqQjBiLEVBQUsyK0IsSUFBeUJBLEVBQU9SLFdBQVcsTUFBbUIsZ0JBQVhRLEVBQzFELE1BQU0sSUFBSS9oQyxVQUFVLG9CQUFvQitoQyxNQUcxQzMrQixFQUFLMitCLEdBQVFuZ0QsV0FZbkJpa0QsR0FBYTU4QixHQUFHem5CLFNBeExlLDhCQUVBLGdDQXNMMkMsU0FBVTZuQixHQUNsRixNQUFNaGlCLEVBQVNvNkMsR0FBdUI3L0MsTUFNdEMsR0FKSSxDQUFDLElBQUssUUFBUTAvQyxTQUFTMS9DLEtBQUt1bUQsVUFDOUI5K0IsRUFBTVMsaUJBR0pyWixHQUFXN08sTUFDYixPQUdGaWtELEdBQWExOEIsSUFBSTloQixFQUFRMHhELElBQWdCLEtBRW5DNVcsR0FBVXZnRCxPQUNaQSxLQUFLa3RCLFdBSVQsTUFBTTJwQyxFQUFlcFAsR0FBZUMsUUFBUXdQLElBRXhDTCxHQUFnQkEsSUFBaUJweEQsR0FDbkMyeEQsR0FBVWxSLFlBQVkyUSxHQUFjbHlDLE9BR3pCeXlDLEdBQVU1USxvQkFBb0IvZ0QsR0FDdENtZixPQUFPNWtCLFNBRWRpa0QsR0FBYTU4QixHQUFHdG5CLE9BdE9jLDhCQXNPaUIsSUFBTTBuRCxHQUFlejNDLEtBQUtrbkQsSUFBZWxxQixTQUFRaC9CLEdBQU1vcEQsR0FBVTVRLG9CQUFvQng0QyxHQUFJeVcsV0FDeEkyaEMsR0FBcUJnUixJQU9yQmxXLEdBQW1Ca1csSUFRbkIsTUFBTUMsR0FBZ0IsSUFBSWhhLElBQUksQ0FBQyxhQUFjLE9BQVEsT0FBUSxXQUFZLFdBQVksU0FBVSxNQUFPLGVBUWhHaWEsR0FBbUIsaUVBT25CQyxHQUFtQixxSUFFbkJDLEdBQW1CLENBQUNocUIsRUFBV2lxQixLQUNuQyxNQUFNQyxFQUFnQmxxQixFQUFVM2hDLFNBQVNwRSxjQUV6QyxHQUFJZ3dELEVBQXFCL1gsU0FBU2dZLEdBQ2hDLE9BQUlMLEdBQWN0OUMsSUFBSTI5QyxJQUNiclQsUUFBUWlULEdBQWlCcnFELEtBQUt1Z0MsRUFBVXg3QixZQUFjdWxELEdBQWlCdHFELEtBQUt1Z0MsRUFBVXg3QixZQU1qRyxNQUFNMmxELEVBQVNGLEVBQXFCM25ELFFBQU84bkQsR0FBa0JBLGFBQTBCN3RELFNBRXZGLElBQUssSUFBSTVILEVBQUksRUFBRzJDLEVBQU02eUQsRUFBT3IwRCxPQUFRbkIsRUFBSTJDLEVBQUszQyxJQUM1QyxHQUFJdzFELEVBQU94MUQsR0FBRzhLLEtBQUt5cUQsR0FDakIsT0FBTyxFQUlYLE9BQU8sR0FvQ1QsU0FBU0csR0FBYUMsRUFBWUMsRUFBV0MsR0FDM0MsSUFBS0YsRUFBV3gwRCxPQUNkLE9BQU93MEQsRUFHVCxHQUFJRSxHQUFvQyxtQkFBZkEsRUFDdkIsT0FBT0EsRUFBV0YsR0FHcEIsTUFDTUcsR0FEWSxJQUFJbDRELE9BQU91K0IsV0FDS0MsZ0JBQWdCdTVCLEVBQVksYUFDeER4bUQsRUFBVyxHQUFHNVEsVUFBVXUzRCxFQUFnQjF6QyxLQUFLalgsaUJBQWlCLE1BRXBFLElBQUssSUFBSW5MLEVBQUksRUFBRzJDLEVBQU13TSxFQUFTaE8sT0FBUW5CLEVBQUkyQyxFQUFLM0MsSUFBSyxDQUNuRCxNQUFNa3FDLEVBQVUvNkIsRUFBU25QLEdBQ25CKzFELEVBQWM3ckIsRUFBUXhnQyxTQUFTcEUsY0FFckMsSUFBS3JILE9BQU9xTixLQUFLc3FELEdBQVdyWSxTQUFTd1ksR0FBYyxDQUNqRDdyQixFQUFRM3ZCLFNBQ1IsU0FHRixNQUFNeTdDLEVBQWdCLEdBQUd6M0QsVUFBVTJyQyxFQUFRemlDLFlBQ3JDd3VELEVBQW9CLEdBQUcxM0QsT0FBT3EzRCxFQUFVLE1BQVEsR0FBSUEsRUFBVUcsSUFBZ0IsSUFDcEZDLEVBQWNuckIsU0FBUVEsSUFDZmdxQixHQUFpQmhxQixFQUFXNHFCLElBQy9CL3JCLEVBQVE3K0IsZ0JBQWdCZ2dDLEVBQVUzaEMsYUFLeEMsT0FBT29zRCxFQUFnQjF6QyxLQUFLbFUsVUFlOUIsTUFBTWdvRCxHQUFTLFVBSVRDLEdBQXdCLElBQUlqYixJQUFJLENBQUMsV0FBWSxZQUFhLGVBQzFEa2IsR0FBZ0IsQ0FDcEJ2Z0MsVUFBVyxVQUNYd2dDLFNBQVUsU0FDVkMsTUFBTyw0QkFDUHR3QyxRQUFTLFNBQ1QrUyxNQUFPLGtCQUNQeE0sS0FBTSxVQUNOenJCLFNBQVUsbUJBQ1Z3b0MsVUFBVyxvQkFDWGhFLE9BQVEsMEJBQ1J0VyxVQUFXLDJCQUNYeW1CLG1CQUFvQixRQUNwQi9CLFNBQVUsbUJBQ1Y2aUIsWUFBYSxvQkFDYkMsU0FBVSxVQUNWWCxXQUFZLGtCQUNaRCxVQUFXLFNBQ1hsSSxhQUFjLDBCQUVWK0ksR0FBZ0IsQ0FDcEJDLEtBQU0sT0FDTkMsSUFBSyxNQUNMQyxNQUFPOVgsS0FBVSxPQUFTLFFBQzFCK1gsT0FBUSxTQUNSQyxLQUFNaFksS0FBVSxRQUFVLFFBRXRCaVksR0FBWSxDQUNoQmxoQyxXQUFXLEVBQ1h3Z0MsU0FBVSwrR0FDVnJ3QyxRQUFTLGNBQ1Rzd0MsTUFBTyxHQUNQdjlCLE1BQU8sRUFDUHhNLE1BQU0sRUFDTnpyQixVQUFVLEVBQ1Z3b0MsVUFBVyxNQUNYaEUsT0FBUSxDQUFDLEVBQUcsR0FDWnRXLFdBQVcsRUFDWHltQixtQkFBb0IsQ0FBQyxNQUFPLFFBQVMsU0FBVSxRQUMvQy9CLFNBQVUsa0JBQ1Y2aUIsWUFBYSxHQUNiQyxVQUFVLEVBQ1ZYLFdBQVksS0FDWkQsVUE5SHVCLENBRXZCLElBQUssQ0FBQyxRQUFTLE1BQU8sS0FBTSxPQUFRLE9BeENQLGtCQXlDN0IzdUQsRUFBRyxDQUFDLFNBQVUsT0FBUSxRQUFTLE9BQy9CK3ZELEtBQU0sR0FDTjl2RCxFQUFHLEdBQ0grdkQsR0FBSSxHQUNKNXpDLElBQUssR0FDTHhqQixLQUFNLEdBQ042aUIsSUFBSyxHQUNMdzBDLEdBQUksR0FDSkMsR0FBSSxHQUNKQyxHQUFJLEdBQ0pDLEdBQUksR0FDSkMsR0FBSSxHQUNKQyxHQUFJLEdBQ0pDLEdBQUksR0FDSkMsR0FBSSxHQUNKejNELEVBQUcsR0FDSDAzRCxJQUFLLENBQUMsTUFBTyxTQUFVLE1BQU8sUUFBUyxRQUFTLFVBQ2hEQyxHQUFJLEdBQ0pDLEdBQUksR0FDSmhqQyxFQUFHLEdBQ0hpakMsSUFBSyxHQUNMajdCLEVBQUcsR0FDSGs3QixNQUFPLEdBQ1BDLEtBQU0sR0FDTkMsSUFBSyxHQUNMQyxJQUFLLEdBQ0xDLE9BQVEsR0FDUkMsRUFBRyxHQUNIQyxHQUFJLElBZ0dKMUssYUFBYyxNQUVWMkssR0FBVSxDQUNkQyxLQUFNLGtCQUNOQyxPQUFRLG9CQUNSQyxLQUFNLGtCQUNOQyxNQUFPLG1CQUNQQyxTQUFVLHNCQUNWQyxNQUFPLG1CQUNQQyxRQUFTLHFCQUNUQyxTQUFVLHNCQUNWQyxXQUFZLHdCQUNaQyxXQUFZLHlCQUVSQyxHQUFvQixPQUVwQkMsR0FBb0IsT0FDcEJDLEdBQW1CLE9BQ25CQyxHQUFrQixNQUNsQkMsR0FBeUIsaUJBQ3pCQyxHQUFpQixTQUNqQkMsR0FBbUIsZ0JBQ25CQyxHQUFnQixRQUNoQkMsR0FBZ0IsUUFTdEIsTUFBTUMsV0FBZ0JwVyxHQUNwQi9oRCxZQUFZNG9DLEVBQVM4VCxHQUNuQixRQUFzQixJQUFYLEVBQ1QsTUFBTSxJQUFJL2hDLFVBQVUsK0RBR3RCNnFDLE1BQU01YyxHQUVOcnNDLEtBQUs2N0QsWUFBYSxFQUNsQjc3RCxLQUFLODdELFNBQVcsRUFDaEI5N0QsS0FBSys3RCxZQUFjLEdBQ25CLzdELEtBQUtnOEQsZUFBaUIsR0FDdEJoOEQsS0FBS2l3RCxRQUFVLEtBRWZqd0QsS0FBSzBwRCxRQUFVMXBELEtBQUsycEQsV0FBV3hKLEdBQy9CbmdELEtBQUtpOEQsSUFBTSxLQUVYajhELEtBQUtrOEQsZ0JBSUloUyxxQkFDVCxPQUFPZ1AsR0FHRTlYLGtCQUNULE9BQU9pWCxHQUdFandDLG1CQUNULE9BQU9veUMsR0FHRWxLLHlCQUNULE9BQU9pSSxHQUlUNEQsU0FDRW44RCxLQUFLNjdELFlBQWEsRUFHcEJqL0MsVUFDRTVjLEtBQUs2N0QsWUFBYSxFQUdwQk8sZ0JBQ0VwOEQsS0FBSzY3RCxZQUFjNzdELEtBQUs2N0QsV0FHMUJqM0MsT0FBTzZDLEdBQ0wsR0FBS3puQixLQUFLNjdELFdBSVYsR0FBSXAwQyxFQUFPLENBQ1QsTUFBTXZrQixFQUFVbEQsS0FBS3E4RCw2QkFBNkI1MEMsR0FFbER2a0IsRUFBUTg0RCxlQUFlbnhDLE9BQVMzbkIsRUFBUTg0RCxlQUFlbnhDLE1BRW5EM25CLEVBQVFvNUQsdUJBQ1ZwNUQsRUFBUXE1RCxPQUFPLEtBQU1yNUQsR0FFckJBLEVBQVFzNUQsT0FBTyxLQUFNdDVELE9BRWxCLENBQ0wsR0FBSWxELEtBQUt5OEQsZ0JBQWdCL2IsVUFBVWo0QyxTQUFTMnlELElBRzFDLFlBRkFwN0QsS0FBS3c4RCxPQUFPLEtBQU14OEQsTUFLcEJBLEtBQUt1OEQsT0FBTyxLQUFNdjhELE9BSXRCMmxELFVBQ0V0cUIsYUFBYXI3QixLQUFLODdELFVBQ2xCN1gsR0FBYXY4QixJQUFJMW5CLEtBQUt5bEQsU0FBU3ZyQyxRQUFRc2hELElBQWlCQyxHQUFrQno3RCxLQUFLMDhELG1CQUUzRTE4RCxLQUFLaThELEtBQ1BqOEQsS0FBS2k4RCxJQUFJdi9DLFNBR1gxYyxLQUFLMjhELGlCQUVMMVQsTUFBTXRELFVBR1JsaEMsT0FDRSxHQUFvQyxTQUFoQ3prQixLQUFLeWxELFNBQVNsaUMsTUFBTUMsUUFDdEIsTUFBTSxJQUFJMWpCLE1BQU0sdUNBR2xCLElBQU1FLEtBQUs0OEQsa0JBQW1CNThELEtBQUs2N0QsV0FDakMsT0FHRixNQUFNakYsRUFBWTNTLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBQVV6bEQsS0FBS3lELFlBQVkya0IsTUFBTXV5QyxNQUN2RWtDLEVBQWFqYyxHQUFlNWdELEtBQUt5bEQsVUFDakNxWCxFQUE0QixPQUFmRCxFQUFzQjc4RCxLQUFLeWxELFNBQVMvNEMsY0FBY3lDLGdCQUFnQjFHLFNBQVN6SSxLQUFLeWxELFVBQVlvWCxFQUFXcDBELFNBQVN6SSxLQUFLeWxELFVBRXhJLEdBQUltUixFQUFVMXJDLG1CQUFxQjR4QyxFQUNqQyxPQUs0QixZQUExQjk4RCxLQUFLeUQsWUFBWTI5QyxNQUFzQnBoRCxLQUFLaThELEtBQU9qOEQsS0FBSys4RCxhQUFlLzhELEtBQUtpOEQsSUFBSTdxQixjQUFjbXFCLElBQXdCbHJELFlBQ3hIclEsS0FBSzI4RCxpQkFFTDM4RCxLQUFLaThELElBQUl2L0MsU0FDVDFjLEtBQUtpOEQsSUFBTSxNQUdiLE1BQU1BLEVBQU1qOEQsS0FBS3k4RCxnQkFDWE8sRUEzbUhLam5DLENBQUFBLElBQ2IsR0FDRUEsR0FBVS92QixLQUFLaTNELE1BcEJILElBb0JTajNELEtBQUtDLGdCQUNuQnJHLFNBQVNnTixlQUFlbXBCLElBRWpDLE9BQU9BLEdBc21IU21uQyxDQUFPbDlELEtBQUt5RCxZQUFZMjlDLE1BQ3RDNmEsRUFBSXg1RCxhQUFhLEtBQU11NkQsR0FFdkJoOUQsS0FBS3lsRCxTQUFTaGpELGFBQWEsbUJBQW9CdTZELEdBRTNDaDlELEtBQUswcEQsUUFBUTF4QixXQUNmaWtDLEVBQUl2YixVQUFVcm1DLElBQUk4Z0QsSUFHcEIsTUFBTTF2QixFQUE4QyxtQkFBM0J6ckMsS0FBSzBwRCxRQUFRamUsVUFBMkJ6ckMsS0FBSzBwRCxRQUFRamUsVUFBVWhyQyxLQUFLVCxLQUFNaThELEVBQUtqOEQsS0FBS3lsRCxVQUFZemxELEtBQUswcEQsUUFBUWplLFVBRWhJMHhCLEVBQWFuOUQsS0FBS285RCxlQUFlM3hCLEdBRXZDenJDLEtBQUtxOUQsb0JBQW9CRixHQUV6QixNQUFNLFVBQ0poc0MsR0FDRW54QixLQUFLMHBELFFBQ1R2b0MsR0FBS0ksSUFBSTA2QyxFQUFLajhELEtBQUt5RCxZQUFZaWlELFNBQVUxbEQsTUFFcENBLEtBQUt5bEQsU0FBUy80QyxjQUFjeUMsZ0JBQWdCMUcsU0FBU3pJLEtBQUtpOEQsT0FDN0Q5cUMsRUFBVS9CLE9BQU82c0MsR0FDakJoWSxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQUFVemxELEtBQUt5RCxZQUFZMmtCLE1BQU15eUMsV0FHekQ3NkQsS0FBS2l3RCxRQUNQandELEtBQUtpd0QsUUFBUXBjLFNBRWI3ekMsS0FBS2l3RCxRQUFVLEdBQW9CandELEtBQUt5bEQsU0FBVXdXLEVBQUtqOEQsS0FBSzJ3RCxpQkFBaUJ3TSxJQUcvRWxCLEVBQUl2YixVQUFVcm1DLElBQUkrZ0QsSUFFbEIsTUFBTTFDLEVBQWMxNEQsS0FBS3M5RCx5QkFBeUJ0OUQsS0FBSzBwRCxRQUFRZ1AsYUFFM0RBLEdBQ0Z1RCxFQUFJdmIsVUFBVXJtQyxPQUFPcStDLEVBQVlueEQsTUFBTSxNQU9yQyxpQkFBa0IzSCxTQUFTdVAsaUJBQzdCLEdBQUd6TyxVQUFVZCxTQUFTMmtCLEtBQUs1SyxVQUFVcXpCLFNBQVFYLElBQzNDNFgsR0FBYTU4QixHQUFHZ2xCLEVBQVMsWUFBYS9sQyxPQUkxQyxNQVVNMC9DLEVBQWFobUQsS0FBS2k4RCxJQUFJdmIsVUFBVWo0QyxTQUFTMHlELElBRS9DbjdELEtBQUsrbEQsZ0JBWlksS0FDZixNQUFNd1gsRUFBaUJ2OUQsS0FBSys3RCxZQUM1Qi83RCxLQUFLKzdELFlBQWMsS0FDbkI5WCxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQUFVemxELEtBQUt5RCxZQUFZMmtCLE1BQU13eUMsT0FFdkQyQyxJQUFtQmpDLElBQ3JCdDdELEtBQUt3OEQsT0FBTyxLQUFNeDhELFFBTVFBLEtBQUtpOEQsSUFBS2pXLEdBRzFDcmhDLE9BQ0UsSUFBSzNrQixLQUFLaXdELFFBQ1IsT0FHRixNQUFNZ00sRUFBTWo4RCxLQUFLeThELGdCQXNCakIsR0FGa0J4WSxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQUFVemxELEtBQUt5RCxZQUFZMmtCLE1BQU1xeUMsTUFFL0R2dkMsaUJBQ1osT0FHRit3QyxFQUFJdmIsVUFBVWhrQyxPQUFPMCtDLElBR2pCLGlCQUFrQng3RCxTQUFTdVAsaUJBQzdCLEdBQUd6TyxVQUFVZCxTQUFTMmtCLEtBQUs1SyxVQUFVcXpCLFNBQVFYLEdBQVc0WCxHQUFhdjhCLElBQUkya0IsRUFBUyxZQUFhL2xDLE1BR2pHdEcsS0FBS2c4RCxlQUE0QixPQUFJLEVBQ3JDaDhELEtBQUtnOEQsZUFBNEIsT0FBSSxFQUNyQ2g4RCxLQUFLZzhELGVBQTRCLE9BQUksRUFDckMsTUFBTWhXLEVBQWFobUQsS0FBS2k4RCxJQUFJdmIsVUFBVWo0QyxTQUFTMHlELElBRS9DbjdELEtBQUsrbEQsZ0JBcENZLEtBQ1gvbEQsS0FBS3M4RCx5QkFJTHQ4RCxLQUFLKzdELGNBQWdCVixJQUN2QlksRUFBSXYvQyxTQUdOMWMsS0FBS3c5RCxpQkFFTHg5RCxLQUFLeWxELFNBQVNqNEMsZ0JBQWdCLG9CQUU5QnkyQyxHQUFhOTdCLFFBQVFub0IsS0FBS3lsRCxTQUFVemxELEtBQUt5RCxZQUFZMmtCLE1BQU1zeUMsUUFFM0QxNkQsS0FBSzI4RCxvQkFxQnVCMzhELEtBQUtpOEQsSUFBS2pXLEdBRXhDaG1ELEtBQUsrN0QsWUFBYyxHQUdyQmxvQixTQUN1QixPQUFqQjd6QyxLQUFLaXdELFNBQ1Bqd0QsS0FBS2l3RCxRQUFRcGMsU0FLakIrb0IsZ0JBQ0UsT0FBT3ZZLFFBQVFya0QsS0FBSys4RCxZQUd0Qk4sZ0JBQ0UsR0FBSXo4RCxLQUFLaThELElBQ1AsT0FBT2o4RCxLQUFLaThELElBR2QsTUFBTTV2QixFQUFVenNDLFNBQVMwQyxjQUFjLE9BQ3ZDK3BDLEVBQVFoOEIsVUFBWXJRLEtBQUswcEQsUUFBUThPLFNBQ2pDLE1BQU15RCxFQUFNNXZCLEVBQVExeUIsU0FBUyxHQUk3QixPQUhBM1osS0FBS3k5RCxXQUFXeEIsR0FDaEJBLEVBQUl2YixVQUFVaGtDLE9BQU95K0MsR0FBbUJDLElBQ3hDcDdELEtBQUtpOEQsSUFBTUEsRUFDSmo4RCxLQUFLaThELElBR2R3QixXQUFXeEIsR0FDVGo4RCxLQUFLMDlELHVCQUF1QnpCLEVBQUtqOEQsS0FBSys4RCxXQUFZeEIsSUFHcERtQyx1QkFBdUJsRixFQUFVMzlDLEVBQVM1WCxHQUN4QyxNQUFNMDZELEVBQWtCbFcsR0FBZUMsUUFBUXprRCxFQUFVdTFELEdBRXBEMzlDLElBQVc4aUQsRUFNaEIzOUQsS0FBSzQ5RCxrQkFBa0JELEVBQWlCOWlELEdBTHRDOGlELEVBQWdCamhELFNBUXBCa2hELGtCQUFrQnZ4QixFQUFTeHhCLEdBQ3pCLEdBQWdCLE9BQVp3eEIsRUFJSixPQUFJLEdBQVV4eEIsSUFDWkEsRUFBVW1sQyxHQUFXbmxDLFFBRWpCN2EsS0FBSzBwRCxRQUFRaDdCLEtBQ1g3VCxFQUFRalksYUFBZXlwQyxJQUN6QkEsRUFBUWg4QixVQUFZLEdBQ3BCZzhCLEVBQVFqZCxPQUFPdlUsSUFHakJ3eEIsRUFBUXY2QixZQUFjK0ksRUFBUS9JLG1CQU05QjlSLEtBQUswcEQsUUFBUWg3QixNQUNYMXVCLEtBQUswcEQsUUFBUWlQLFdBQ2Y5OUMsRUFBVWc5QyxHQUFhaDlDLEVBQVM3YSxLQUFLMHBELFFBQVFxTyxVQUFXLzNELEtBQUswcEQsUUFBUXNPLGFBR3ZFM3JCLEVBQVFoOEIsVUFBWXdLLEdBRXBCd3hCLEVBQVF2NkIsWUFBYytJLEdBSTFCa2lELFdBQ0UsTUFBTXRFLEVBQVF6NEQsS0FBS3lsRCxTQUFTampELGFBQWEsMkJBQTZCeEMsS0FBSzBwRCxRQUFRK08sTUFFbkYsT0FBT3o0RCxLQUFLczlELHlCQUF5QjdFLEdBR3ZDb0YsaUJBQWlCVixHQUNmLE1BQW1CLFVBQWZBLEVBQ0ssTUFHVSxTQUFmQSxFQUNLLFFBR0ZBLEVBSVRkLDZCQUE2QjUwQyxFQUFPdmtCLEdBQ2xDLE9BQU9BLEdBQVdsRCxLQUFLeUQsWUFBWStpRCxvQkFBb0IvK0IsRUFBTW1DLGVBQWdCNXBCLEtBQUs4OUQsc0JBR3BGOU0sYUFDRSxNQUFNLE9BQ0p2cEIsR0FDRXpuQyxLQUFLMHBELFFBRVQsTUFBc0IsaUJBQVhqaUIsRUFDRkEsRUFBT2xnQyxNQUFNLEtBQUtuRCxLQUFJaEMsR0FBTzQvQyxPQUFPanZCLFNBQVMzd0IsRUFBSyxNQUdyQyxtQkFBWHFsQyxFQUNGd3BCLEdBQWN4cEIsRUFBT3dwQixFQUFZanhELEtBQUt5bEQsVUFHeENoZSxFQUdUNjFCLHlCQUF5QnppRCxHQUN2QixNQUEwQixtQkFBWkEsRUFBeUJBLEVBQVFwYSxLQUFLVCxLQUFLeWxELFVBQVk1cUMsRUFHdkU4MUMsaUJBQWlCd00sR0FDZixNQUFNak0sRUFBd0IsQ0FDNUJ6bEIsVUFBVzB4QixFQUNYaGdCLFVBQVcsQ0FBQyxDQUNWOTNDLEtBQU0sT0FDTkQsUUFBUyxDQUNQd3lDLG1CQUFvQjUzQyxLQUFLMHBELFFBQVE5UixxQkFFbEMsQ0FDRHZ5QyxLQUFNLFNBQ05ELFFBQVMsQ0FDUHFpQyxPQUFRem5DLEtBQUtneEQsZUFFZCxDQUNEM3JELEtBQU0sa0JBQ05ELFFBQVMsQ0FDUHl3QyxTQUFVNzFDLEtBQUswcEQsUUFBUTdULFdBRXhCLENBQ0R4d0MsS0FBTSxRQUNORCxRQUFTLENBQ1BpbkMsUUFBUyxJQUFJcnNDLEtBQUt5RCxZQUFZMjlDLGVBRS9CLENBQ0QvN0MsS0FBTSxXQUNOd25DLFNBQVMsRUFDVEMsTUFBTyxhQUNQM3BDLEdBQUlxZSxHQUFReGhCLEtBQUsrOUQsNkJBQTZCdjhDLEtBRWhENDlCLGNBQWU1OUIsSUFDVEEsRUFBS3BjLFFBQVFxbUMsWUFBY2pxQixFQUFLaXFCLFdBQ2xDenJDLEtBQUsrOUQsNkJBQTZCdjhDLEtBSXhDLE1BQU8sSUFBSzB2QyxLQUMrQixtQkFBOUJseEQsS0FBSzBwRCxRQUFRbUcsYUFBOEI3dkQsS0FBSzBwRCxRQUFRbUcsYUFBYXFCLEdBQXlCbHhELEtBQUswcEQsUUFBUW1HLGNBSTFId04sb0JBQW9CRixHQUNsQm45RCxLQUFLeThELGdCQUFnQi9iLFVBQVVybUMsSUFBSSxHQUFHcmEsS0FBS2crRCwwQkFBMEJoK0QsS0FBSzY5RCxpQkFBaUJWLE1BRzdGQyxlQUFlM3hCLEdBQ2IsT0FBT210QixHQUFjbnRCLEVBQVUzcUIsZUFHakNvN0MsZ0JBQ21CbDhELEtBQUswcEQsUUFBUXZoQyxRQUFRNWdCLE1BQU0sS0FFbkN5bEMsU0FBUTdrQixJQUNmLEdBQWdCLFVBQVpBLEVBQ0Y4N0IsR0FBYTU4QixHQUFHcm5CLEtBQUt5bEQsU0FBVXpsRCxLQUFLeUQsWUFBWTJrQixNQUFNMHlDLE1BQU85NkQsS0FBSzBwRCxRQUFRem1ELFVBQVV3a0IsR0FBU3puQixLQUFLNGtCLE9BQU82QyxVQUNwRyxHQXBaVSxXQW9aTlUsRUFBNEIsQ0FDckMsTUFBTTgxQyxFQUFVOTFDLElBQVl1ekMsR0FBZ0IxN0QsS0FBS3lELFlBQVkya0IsTUFBTTZ5QyxXQUFhajdELEtBQUt5RCxZQUFZMmtCLE1BQU0yeUMsUUFDakdtRCxFQUFXLzFDLElBQVl1ekMsR0FBZ0IxN0QsS0FBS3lELFlBQVkya0IsTUFBTTh5QyxXQUFhbDdELEtBQUt5RCxZQUFZMmtCLE1BQU00eUMsU0FDeEcvVyxHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQUFVd1ksRUFBU2orRCxLQUFLMHBELFFBQVF6bUQsVUFBVXdrQixHQUFTem5CLEtBQUt1OEQsT0FBTzkwQyxLQUNwRnc4QixHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQUFVeVksRUFBVWwrRCxLQUFLMHBELFFBQVF6bUQsVUFBVXdrQixHQUFTem5CLEtBQUt3OEQsT0FBTy8wQyxTQUl6RnpuQixLQUFLMDhELGtCQUFvQixLQUNuQjE4RCxLQUFLeWxELFVBQ1B6bEQsS0FBSzJrQixRQUlUcy9CLEdBQWE1OEIsR0FBR3JuQixLQUFLeWxELFNBQVN2ckMsUUFBUXNoRCxJQUFpQkMsR0FBa0J6N0QsS0FBSzA4RCxtQkFFMUUxOEQsS0FBSzBwRCxRQUFRem1ELFNBQ2ZqRCxLQUFLMHBELFFBQVUsSUFBSzFwRCxLQUFLMHBELFFBQ3ZCdmhDLFFBQVMsU0FDVGxsQixTQUFVLElBR1pqRCxLQUFLbStELFlBSVRBLFlBQ0UsTUFBTTFGLEVBQVF6NEQsS0FBS3lsRCxTQUFTampELGFBQWEsU0FFbkM0N0QsU0FBMkJwK0QsS0FBS3lsRCxTQUFTampELGFBQWEsMkJBRXhEaTJELEdBQStCLFdBQXRCMkYsS0FDWHArRCxLQUFLeWxELFNBQVNoakQsYUFBYSx5QkFBMEJnMkQsR0FBUyxLQUUxREEsR0FBVXo0RCxLQUFLeWxELFNBQVNqakQsYUFBYSxlQUFrQnhDLEtBQUt5bEQsU0FBUzN6QyxhQUN2RTlSLEtBQUt5bEQsU0FBU2hqRCxhQUFhLGFBQWNnMkQsR0FHM0N6NEQsS0FBS3lsRCxTQUFTaGpELGFBQWEsUUFBUyxLQUl4Qzg1RCxPQUFPOTBDLEVBQU92a0IsR0FDWkEsRUFBVWxELEtBQUtxOEQsNkJBQTZCNTBDLEVBQU92a0IsR0FFL0N1a0IsSUFDRnZrQixFQUFRODRELGVBQThCLFlBQWZ2MEMsRUFBTTlsQixLQUFxQmc2RCxHQUFnQkQsS0FBaUIsR0FHakZ4NEQsRUFBUXU1RCxnQkFBZ0IvYixVQUFVajRDLFNBQVMyeUQsS0FBc0JsNEQsRUFBUTY0RCxjQUFnQlYsR0FDM0ZuNEQsRUFBUTY0RCxZQUFjVixJQUl4QmhnQyxhQUFhbjRCLEVBQVE0NEQsVUFDckI1NEQsRUFBUTY0RCxZQUFjVixHQUVqQm40RCxFQUFRd21ELFFBQVF4dUIsT0FBVWg0QixFQUFRd21ELFFBQVF4dUIsTUFBTXpXLEtBS3JEdmhCLEVBQVE0NEQsU0FBV2w5QyxZQUFXLEtBQ3hCMWIsRUFBUTY0RCxjQUFnQlYsSUFDMUJuNEQsRUFBUXVoQixTQUVUdmhCLEVBQVF3bUQsUUFBUXh1QixNQUFNelcsTUFSdkJ2aEIsRUFBUXVoQixRQVdaKzNDLE9BQU8vMEMsRUFBT3ZrQixHQUNaQSxFQUFVbEQsS0FBS3E4RCw2QkFBNkI1MEMsRUFBT3ZrQixHQUUvQ3VrQixJQUNGdmtCLEVBQVE4NEQsZUFBOEIsYUFBZnYwQyxFQUFNOWxCLEtBQXNCZzZELEdBQWdCRCxJQUFpQng0RCxFQUFRdWlELFNBQVNoOUMsU0FBU2dmLEVBQU0wRCxnQkFHbEhqb0IsRUFBUW81RCx5QkFJWmpoQyxhQUFhbjRCLEVBQVE0NEQsVUFDckI1NEQsRUFBUTY0RCxZQUFjVCxHQUVqQnA0RCxFQUFRd21ELFFBQVF4dUIsT0FBVWg0QixFQUFRd21ELFFBQVF4dUIsTUFBTXZXLEtBS3JEemhCLEVBQVE0NEQsU0FBV2w5QyxZQUFXLEtBQ3hCMWIsRUFBUTY0RCxjQUFnQlQsSUFDMUJwNEQsRUFBUXloQixTQUVUemhCLEVBQVF3bUQsUUFBUXh1QixNQUFNdlcsTUFSdkJ6aEIsRUFBUXloQixRQVdaMjNDLHVCQUNFLElBQUssTUFBTW4wQyxLQUFXbm9CLEtBQUtnOEQsZUFDekIsR0FBSWg4RCxLQUFLZzhELGVBQWU3ekMsR0FDdEIsT0FBTyxFQUlYLE9BQU8sRUFHVHdoQyxXQUFXeEosR0FDVCxNQUFNa2UsRUFBaUJwWCxHQUFZRyxrQkFBa0JwbkQsS0FBS3lsRCxVQWlDMUQsT0FoQ0FybEQsT0FBT3FOLEtBQUs0d0QsR0FBZ0JyeEIsU0FBUWpyQixJQUM5QnUyQyxHQUFzQnYrQyxJQUFJZ0ksV0FDckJzOEMsRUFBZXQ4QyxPQUcxQm8rQixFQUFTLElBQUtuZ0QsS0FBS3lELFlBQVl5bUQsV0FDMUJtVSxLQUNtQixpQkFBWGxlLEdBQXVCQSxFQUFTQSxFQUFTLEtBRS9DaHZCLFdBQWlDLElBQXJCZ3ZCLEVBQU9odkIsVUFBc0J2eEIsU0FBUzJrQixLQUFPeTdCLEdBQVdHLEVBQU9odkIsV0FFdEQsaUJBQWpCZ3ZCLEVBQU9qbEIsUUFDaEJpbEIsRUFBT2psQixNQUFRLENBQ2J6VyxLQUFNMDdCLEVBQU9qbEIsTUFDYnZXLEtBQU13N0IsRUFBT2psQixRQUlXLGlCQUFqQmlsQixFQUFPc1ksUUFDaEJ0WSxFQUFPc1ksTUFBUXRZLEVBQU9zWSxNQUFNMTNELFlBR0EsaUJBQW5Cby9DLEVBQU90bEMsVUFDaEJzbEMsRUFBT3RsQyxRQUFVc2xDLEVBQU90bEMsUUFBUTlaLFlBR2xDay9DLEdBQWdCb1ksR0FBUWxZLEVBQVFuZ0QsS0FBS3lELFlBQVk2c0QsYUFFN0NuUSxFQUFPd1ksV0FDVHhZLEVBQU9xWSxTQUFXWCxHQUFhMVgsRUFBT3FZLFNBQVVyWSxFQUFPNFgsVUFBVzVYLEVBQU82WCxhQUdwRTdYLEVBR1QyZCxxQkFDRSxNQUFNM2QsRUFBUyxHQUVmLElBQUssTUFBTXh5QyxLQUFPM04sS0FBSzBwRCxRQUNqQjFwRCxLQUFLeUQsWUFBWXltRCxRQUFRdjhDLEtBQVMzTixLQUFLMHBELFFBQVEvN0MsS0FDakR3eUMsRUFBT3h5QyxHQUFPM04sS0FBSzBwRCxRQUFRLzdDLElBTy9CLE9BQU93eUMsRUFHVHFkLGlCQUNFLE1BQU12QixFQUFNajhELEtBQUt5OEQsZ0JBQ1g2QixFQUF3QixJQUFJdjBELE9BQU8sVUFBVS9KLEtBQUtnK0QsNkJBQThCLEtBQ2hGTyxFQUFXdEMsRUFBSXo1RCxhQUFhLFNBQVM4SixNQUFNZ3lELEdBRWhDLE9BQWJDLEdBQXFCQSxFQUFTajdELE9BQVMsR0FDekNpN0QsRUFBU242RCxLQUFJZ1UsR0FBU0EsRUFBTXN4QixTQUFRc0QsU0FBUXd4QixHQUFVdkMsRUFBSXZiLFVBQVVoa0MsT0FBTzhoRCxLQUkvRVIsdUJBQ0UsTUFsb0JtQixhQXFvQnJCRCw2QkFBNkI5TSxHQUMzQixNQUFNLE1BQ0ovekMsR0FDRSt6QyxFQUVDL3pDLElBSUxsZCxLQUFLaThELElBQU0vK0MsRUFBTTVMLFNBQVM4NUIsT0FFMUJwckMsS0FBS3c5RCxpQkFFTHg5RCxLQUFLcTlELG9CQUFvQnI5RCxLQUFLbzlELGVBQWVsZ0QsRUFBTXV1QixhQUdyRGt4QixpQkFDTTM4RCxLQUFLaXdELFVBQ1Bqd0QsS0FBS2l3RCxRQUFROVEsVUFFYm4vQyxLQUFLaXdELFFBQVUsTUFLbkJoSyx1QkFBdUI5RixHQUNyQixPQUFPbmdELEtBQUtrRSxNQUFLLFdBQ2YsTUFBTXNkLEVBQU9vNkMsR0FBUXBWLG9CQUFvQnhtRCxLQUFNbWdELEdBRS9DLEdBQXNCLGlCQUFYQSxFQUFxQixDQUM5QixRQUE0QixJQUFqQjMrQixFQUFLMitCLEdBQ2QsTUFBTSxJQUFJL2hDLFVBQVUsb0JBQW9CK2hDLE1BRzFDMytCLEVBQUsyK0IsVUFjYmUsR0FBbUIwYSxJQWNuQixNQUlNNkMsR0FBWSxJQUFLN0MsR0FBUTFSLFFBQzdCemUsVUFBVyxRQUNYaEUsT0FBUSxDQUFDLEVBQUcsR0FDWnRmLFFBQVMsUUFDVHROLFFBQVMsR0FDVDI5QyxTQUFVLCtJQUVOa0csR0FBZ0IsSUFBSzlDLEdBQVF0TCxZQUNqQ3oxQyxRQUFTLDZCQUVMOGpELEdBQVUsQ0FDZGxFLEtBQU0sa0JBQ05DLE9BQVEsb0JBQ1JDLEtBQU0sa0JBQ05DLE1BQU8sbUJBQ1BDLFNBQVUsc0JBQ1ZDLE1BQU8sbUJBQ1BDLFFBQVMscUJBQ1RDLFNBQVUsc0JBQ1ZDLFdBQVksd0JBQ1pDLFdBQVkseUJBVWQsTUFBTTBELFdBQWdCaEQsR0FFVDFSLHFCQUNULE9BQU91VSxHQUdFcmQsa0JBQ1QsTUF6Q1csVUE0Q0ZoNUIsbUJBQ1QsT0FBT3UyQyxHQUdFck8seUJBQ1QsT0FBT29PLEdBSVQ5QixnQkFDRSxPQUFPNThELEtBQUsrOEQsWUFBYy84RCxLQUFLNitELGNBR2pDcEIsV0FBV3hCLEdBQ1RqOEQsS0FBSzA5RCx1QkFBdUJ6QixFQUFLajhELEtBQUsrOEQsV0FoQ25CLG1CQWtDbkIvOEQsS0FBSzA5RCx1QkFBdUJ6QixFQUFLajhELEtBQUs2K0QsY0FqQ2pCLGlCQXFDdkJBLGNBQ0UsT0FBTzcrRCxLQUFLczlELHlCQUF5QnQ5RCxLQUFLMHBELFFBQVE3dUMsU0FHcERtakQsdUJBQ0UsTUFsRWlCLGFBc0VuQi9YLHVCQUF1QjlGLEdBQ3JCLE9BQU9uZ0QsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBT285QyxHQUFRcFksb0JBQW9CeG1ELEtBQU1tZ0QsR0FFL0MsR0FBc0IsaUJBQVhBLEVBQXFCLENBQzlCLFFBQTRCLElBQWpCMytCLEVBQUsyK0IsR0FDZCxNQUFNLElBQUkvaEMsVUFBVSxvQkFBb0IraEMsTUFHMUMzK0IsRUFBSzIrQixVQWNiZSxHQUFtQjBkLElBY25CLE1BQU1FLEdBQVMsWUFJVEMsR0FBWSxDQUNoQnQzQixPQUFRLEdBQ1Jqc0IsT0FBUSxPQUNSL1YsT0FBUSxJQUVKdTVELEdBQWdCLENBQ3BCdjNCLE9BQVEsU0FDUmpzQixPQUFRLFNBQ1IvVixPQUFRLG9CQU1KdzVELEdBQXNCLFNBTXRCQyxHQUFzQiw4Q0FJdEJDLEdBQWtCLFdBT3hCLE1BQU1DLFdBQWtCNVosR0FDdEIvaEQsWUFBWTRvQyxFQUFTOFQsR0FDbkI4SSxNQUFNNWMsR0FDTnJzQyxLQUFLcS9ELGVBQTJDLFNBQTFCci9ELEtBQUt5bEQsU0FBU2MsUUFBcUJ4bUQsT0FBU0MsS0FBS3lsRCxTQUN2RXpsRCxLQUFLMHBELFFBQVUxcEQsS0FBSzJwRCxXQUFXeEosR0FDL0JuZ0QsS0FBS3MvRCxTQUFXLEdBQ2hCdC9ELEtBQUt1L0QsU0FBVyxHQUNoQnYvRCxLQUFLdy9ELGNBQWdCLEtBQ3JCeC9ELEtBQUt5L0QsY0FBZ0IsRUFDckJ4YixHQUFhNThCLEdBQUdybkIsS0FBS3EvRCxlQTdCSix1QkE2QmtDLElBQU1yL0QsS0FBSzAvRCxhQUM5RDEvRCxLQUFLMi9ELFVBRUwzL0QsS0FBSzAvRCxXQUlJeFYscUJBQ1QsT0FBTzZVLEdBR0UzZCxrQkFDVCxPQUFPMGQsR0FJVGEsVUFDRSxNQUFNQyxFQUFhNS9ELEtBQUtxL0QsaUJBQW1Cci9ELEtBQUtxL0QsZUFBZXQvRCxPQWxDN0MsU0FrQ3NFby9ELEdBQ2xGVSxFQUF1QyxTQUF4QjcvRCxLQUFLMHBELFFBQVFsdUMsT0FBb0Jva0QsRUFBYTUvRCxLQUFLMHBELFFBQVFsdUMsT0FDMUVza0QsRUFBYUQsSUFBaUJWLEdBQWtCbi9ELEtBQUsrL0QsZ0JBQWtCLEVBQzdFLy9ELEtBQUtzL0QsU0FBVyxHQUNoQnQvRCxLQUFLdS9ELFNBQVcsR0FDaEJ2L0QsS0FBS3kvRCxjQUFnQnovRCxLQUFLZ2dFLG1CQUNWdlksR0FBZXozQyxLQUFLa3ZELEdBQXFCbC9ELEtBQUswcEQsUUFBUWprRCxRQUM5RHJCLEtBQUlpb0MsSUFDVixNQUFNNHpCLEVBQWlCcmdCLEdBQXVCdlQsR0FDeEM1bUMsRUFBU3c2RCxFQUFpQnhZLEdBQWVDLFFBQVF1WSxHQUFrQixLQUV6RSxHQUFJeDZELEVBQVEsQ0FDVixNQUFNeTZELEVBQVl6NkQsRUFBT2d3Qix3QkFFekIsR0FBSXlxQyxFQUFVeHZDLE9BQVN3dkMsRUFBVXB0QyxPQUMvQixNQUFPLENBQUNtMEIsR0FBWTRZLEdBQWNwNkQsR0FBUThKLElBQU11d0QsRUFBWUcsR0FJaEUsT0FBTyxRQUNObndELFFBQU90TyxHQUFRQSxJQUFNeUQsTUFBSyxDQUFDbUUsRUFBR0MsSUFBTUQsRUFBRSxHQUFLQyxFQUFFLEtBQUkyakMsU0FBUXhyQyxJQUMxRHhCLEtBQUtzL0QsU0FBUzErRCxLQUFLWSxFQUFLLElBRXhCeEIsS0FBS3UvRCxTQUFTMytELEtBQUtZLEVBQUssT0FJNUJta0QsVUFDRTFCLEdBQWF2OEIsSUFBSTFuQixLQUFLcS9ELGVBdkZOLGlCQXdGaEJwVyxNQUFNdEQsVUFJUmdFLFdBQVd4SixHQU9ULE9BTkFBLEVBQVMsSUFBSzRlLE1BQ1Q5WCxHQUFZRyxrQkFBa0JwbkQsS0FBS3lsRCxhQUNoQixpQkFBWHRGLEdBQXVCQSxFQUFTQSxFQUFTLEtBRS9DMTZDLE9BQVN1NkMsR0FBV0csRUFBTzE2QyxTQUFXN0YsU0FBU3VQLGdCQUN0RDh3QyxHQUFnQjZlLEdBQVEzZSxFQUFRNmUsSUFDekI3ZSxFQUdUNGYsZ0JBQ0UsT0FBTy8vRCxLQUFLcS9ELGlCQUFtQnQvRCxPQUFTQyxLQUFLcS9ELGVBQWVoM0IsWUFBY3JvQyxLQUFLcS9ELGVBQWV6b0MsVUFHaEdvcEMsbUJBQ0UsT0FBT2hnRSxLQUFLcS9ELGVBQWVucUIsY0FBZ0JsdkMsS0FBS211QixJQUFJdjBCLFNBQVMya0IsS0FBSzJ3QixhQUFjdDFDLFNBQVN1UCxnQkFBZ0IrbEMsY0FHM0dpckIsbUJBQ0UsT0FBT25nRSxLQUFLcS9ELGlCQUFtQnQvRCxPQUFTQSxPQUFPcWdFLFlBQWNwZ0UsS0FBS3EvRCxlQUFlNXBDLHdCQUF3QjNDLE9BRzNHNHNDLFdBQ0UsTUFBTTlvQyxFQUFZNTJCLEtBQUsrL0QsZ0JBQWtCLy9ELEtBQUswcEQsUUFBUWppQixPQUVoRHlOLEVBQWVsMUMsS0FBS2dnRSxtQkFFcEJLLEVBQVlyZ0UsS0FBSzBwRCxRQUFRamlCLE9BQVN5TixFQUFlbDFDLEtBQUttZ0UsbUJBTTVELEdBSkluZ0UsS0FBS3kvRCxnQkFBa0J2cUIsR0FDekJsMUMsS0FBSzIvRCxVQUdIL29DLEdBQWF5cEMsRUFBakIsQ0FDRSxNQUFNNTZELEVBQVN6RixLQUFLdS9ELFNBQVN2L0QsS0FBS3UvRCxTQUFTajhELE9BQVMsR0FFaER0RCxLQUFLdy9ELGdCQUFrQi81RCxHQUN6QnpGLEtBQUtzZ0UsVUFBVTc2RCxPQUpuQixDQVVBLEdBQUl6RixLQUFLdy9ELGVBQWlCNW9DLEVBQVk1MkIsS0FBS3MvRCxTQUFTLElBQU10L0QsS0FBS3MvRCxTQUFTLEdBQUssRUFLM0UsT0FKQXQvRCxLQUFLdy9ELGNBQWdCLFVBRXJCeC9ELEtBQUt1Z0UsU0FLUCxJQUFLLElBQUlwK0QsRUFBSW5DLEtBQUtzL0QsU0FBU2g4RCxPQUFRbkIsS0FDVm5DLEtBQUt3L0QsZ0JBQWtCeC9ELEtBQUt1L0QsU0FBU3A5RCxJQUFNeTBCLEdBQWE1MkIsS0FBS3MvRCxTQUFTbjlELFVBQXVDLElBQXpCbkMsS0FBS3MvRCxTQUFTbjlELEVBQUksSUFBc0J5MEIsRUFBWTUyQixLQUFLcy9ELFNBQVNuOUQsRUFBSSxLQUcvS25DLEtBQUtzZ0UsVUFBVXRnRSxLQUFLdS9ELFNBQVNwOUQsS0FLbkNtK0QsVUFBVTc2RCxHQUNSekYsS0FBS3cvRCxjQUFnQi81RCxFQUVyQnpGLEtBQUt1Z0UsU0FFTCxNQUFNQyxFQUFVdEIsR0FBb0IzM0QsTUFBTSxLQUFLbkQsS0FBSW5CLEdBQVksR0FBR0EscUJBQTRCd0MsT0FBWXhDLFdBQWtCd0MsUUFDdEhnN0QsRUFBT2haLEdBQWVDLFFBQVE4WSxFQUFRbnpELEtBQUssS0FBTXJOLEtBQUswcEQsUUFBUWprRCxRQUNwRWc3RCxFQUFLL2YsVUFBVXJtQyxJQUFJNGtELElBRWZ3QixFQUFLL2YsVUFBVWo0QyxTQWxKVSxpQkFtSjNCZy9DLEdBQWVDLFFBMUljLG1CQTBJc0IrWSxFQUFLdm1ELFFBM0lsQyxjQTJJZ0V3bUMsVUFBVXJtQyxJQUFJNGtELElBRXBHeFgsR0FBZWx0QyxRQUFRa21ELEVBbEpLLHFCQWtKNEJ6ekIsU0FBUTB6QixJQUc5RGpaLEdBQWU1dEMsS0FBSzZtRCxFQUFXLCtCQUFpRDF6QixTQUFReHJDLEdBQVFBLEVBQUtrL0MsVUFBVXJtQyxJQUFJNGtELE1BRW5IeFgsR0FBZTV0QyxLQUFLNm1ELEVBckpELGFBcUpnQzF6QixTQUFRMnpCLElBQ3pEbFosR0FBZTl0QyxTQUFTZ25ELEVBdkpQLGFBdUpvQzN6QixTQUFReHJDLEdBQVFBLEVBQUtrL0MsVUFBVXJtQyxJQUFJNGtELFlBSzlGaGIsR0FBYTk3QixRQUFRbm9CLEtBQUtxL0QsZUFuS1Asd0JBbUt1QyxDQUN4RGwwQyxjQUFlMWxCLElBSW5CODZELFNBQ0U5WSxHQUFlejNDLEtBQUtrdkQsR0FBcUJsL0QsS0FBSzBwRCxRQUFRamtELFFBQVFxSyxRQUFPN04sR0FBUUEsRUFBS3krQyxVQUFVajRDLFNBQVN3MkQsTUFBc0JqeUIsU0FBUS9xQyxHQUFRQSxFQUFLeStDLFVBQVVoa0MsT0FBT3VpRCxNQUluS2haLHVCQUF1QjlGLEdBQ3JCLE9BQU9uZ0QsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBTzQ5QyxHQUFVNVksb0JBQW9CeG1ELEtBQU1tZ0QsR0FFakQsR0FBc0IsaUJBQVhBLEVBQVgsQ0FJQSxRQUE0QixJQUFqQjMrQixFQUFLMitCLEdBQ2QsTUFBTSxJQUFJL2hDLFVBQVUsb0JBQW9CK2hDLE1BRzFDMytCLEVBQUsyK0IsVUFZWDhELEdBQWE1OEIsR0FBR3RuQixPQW5NWSw4QkFtTWlCLEtBQzNDMG5ELEdBQWV6M0MsS0FqTVMsMEJBaU1lZzlCLFNBQVE0ekIsR0FBTyxJQUFJeEIsR0FBVXdCLFFBU3RFMWYsR0FBbUJrZSxJQWNuQixNQVVNeUIsR0FBb0IsU0FDcEJDLEdBQW9CLE9BQ3BCQyxHQUFvQixPQUdwQkMsR0FBa0IsVUFDbEJDLEdBQXFCLHdCQVUzQixNQUFNQyxXQUFZMWIsR0FFTHBFLGtCQUNULE1BN0JXLE1BaUNiMzhCLE9BQ0UsR0FBSXprQixLQUFLeWxELFNBQVM3aUQsWUFBYzVDLEtBQUt5bEQsU0FBUzdpRCxXQUFXckIsV0FBYWkvQyxLQUFLQyxjQUFnQnpnRCxLQUFLeWxELFNBQVMvRSxVQUFVajRDLFNBQVNvNEQsSUFDMUgsT0FHRixJQUFJalosRUFDSixNQUFNbmlELEVBQVNvNkMsR0FBdUI3L0MsS0FBS3lsRCxVQUVyQzBiLEVBQWNuaEUsS0FBS3lsRCxTQUFTdnJDLFFBM0JOLHFCQTZCNUIsR0FBSWluRCxFQUFhLENBQ2YsTUFBTUMsRUFBd0MsT0FBekJELEVBQVl0MUQsVUFBOEMsT0FBekJzMUQsRUFBWXQxRCxTQUFvQm8xRCxHQUFxQkQsR0FDM0dwWixFQUFXSCxHQUFlejNDLEtBQUtveEQsRUFBY0QsR0FDN0N2WixFQUFXQSxFQUFTQSxFQUFTdGtELE9BQVMsR0FHeEMsTUFBTSs5RCxFQUFZelosRUFBVzNELEdBQWE5N0IsUUFBUXkvQixFQTdDakMsY0E2Q3lELENBQ3hFejhCLGNBQWVuckIsS0FBS3lsRCxXQUNqQixLQUtMLEdBSmtCeEIsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0E5QzNCLGNBOENtRCxDQUNsRXQ2QixjQUFleThCLElBR0gxOEIsa0JBQWtDLE9BQWRtMkMsR0FBc0JBLEVBQVVuMkMsaUJBQ2hFLE9BR0ZsckIsS0FBS3NnRSxVQUFVdGdFLEtBQUt5bEQsU0FBVTBiLEdBRTlCLE1BQU1ub0MsRUFBVyxLQUNmaXJCLEdBQWE5N0IsUUFBUXkvQixFQTFESixnQkEwRDhCLENBQzdDejhCLGNBQWVuckIsS0FBS3lsRCxXQUV0QnhCLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBM0RWLGVBMkRtQyxDQUNqRHQ2QixjQUFleThCLEtBSWZuaUQsRUFDRnpGLEtBQUtzZ0UsVUFBVTc2RCxFQUFRQSxFQUFPN0MsV0FBWW8yQixHQUUxQ0EsSUFLSnNuQyxVQUFVajBCLEVBQVNsYixFQUFXaHRCLEdBQzVCLE1BQ015OEIsSUFEaUJ6UCxHQUFxQyxPQUF2QkEsRUFBVXRsQixVQUE0QyxPQUF2QnNsQixFQUFVdGxCLFNBQTBFNDdDLEdBQWU5dEMsU0FBU3dYLEVBQVc2dkMsSUFBeEZ2WixHQUFlejNDLEtBQUtpeEQsR0FBb0I5dkMsSUFDN0csR0FDeEJtd0MsRUFBa0JuOUQsR0FBWXk4QixHQUFVQSxFQUFPOGYsVUFBVWo0QyxTQUFTcTRELElBRWxFOW5DLEVBQVcsSUFBTWg1QixLQUFLdWhFLG9CQUFvQmwxQixFQUFTekwsRUFBUXo4QixHQUU3RHk4QixHQUFVMGdDLEdBQ1oxZ0MsRUFBTzhmLFVBQVVoa0MsT0FBT3FrRCxJQUV4Qi9nRSxLQUFLK2xELGVBQWUvc0IsRUFBVXFULEdBQVMsSUFFdkNyVCxJQUlKdW9DLG9CQUFvQmwxQixFQUFTekwsRUFBUXo4QixHQUNuQyxHQUFJeThCLEVBQVEsQ0FDVkEsRUFBTzhmLFVBQVVoa0MsT0FBT21rRCxJQUN4QixNQUFNVyxFQUFnQi9aLEdBQWVDLFFBL0VKLGtDQStFNEM5bUIsRUFBT2grQixZQUVoRjQrRCxHQUNGQSxFQUFjOWdCLFVBQVVoa0MsT0FBT21rRCxJQUdHLFFBQWhDamdDLEVBQU9wK0IsYUFBYSxTQUN0Qm8rQixFQUFPbitCLGFBQWEsaUJBQWlCLEdBSXpDNHBDLEVBQVFxVSxVQUFVcm1DLElBQUl3bUQsSUFFZSxRQUFqQ3gwQixFQUFRN3BDLGFBQWEsU0FDdkI2cEMsRUFBUTVwQyxhQUFhLGlCQUFpQixHQUd4Q3ErQyxHQUFPelUsR0FFSEEsRUFBUXFVLFVBQVVqNEMsU0FBU3E0RCxLQUM3QnowQixFQUFRcVUsVUFBVXJtQyxJQUFJMG1ELElBR3hCLElBQUl4dEQsRUFBUzg0QixFQUFRenBDLFdBTXJCLEdBSkkyUSxHQUE4QixPQUFwQkEsRUFBTzFILFdBQ25CMEgsRUFBU0EsRUFBTzNRLFlBR2QyUSxHQUFVQSxFQUFPbXRDLFVBQVVqNEMsU0F0SEYsaUJBc0hzQyxDQUNqRSxNQUFNZzVELEVBQWtCcDFCLEVBQVFueUIsUUFuSFosYUFxSGhCdW5ELEdBQ0ZoYSxHQUFlejNDLEtBakhVLG1CQWlIcUJ5eEQsR0FBaUJ6MEIsU0FBUTAwQixHQUFZQSxFQUFTaGhCLFVBQVVybUMsSUFBSXdtRCxNQUc1R3gwQixFQUFRNXBDLGFBQWEsaUJBQWlCLEdBR3BDMEIsR0FDRkEsSUFLSjhoRCx1QkFBdUI5RixHQUNyQixPQUFPbmdELEtBQUtrRSxNQUFLLFdBQ2YsTUFBTXNkLEVBQU8wL0MsR0FBSTFhLG9CQUFvQnhtRCxNQUVyQyxHQUFzQixpQkFBWG1nRCxFQUFxQixDQUM5QixRQUE0QixJQUFqQjMrQixFQUFLMitCLEdBQ2QsTUFBTSxJQUFJL2hDLFVBQVUsb0JBQW9CK2hDLE1BRzFDMytCLEVBQUsyK0IsVUFhYjhELEdBQWE1OEIsR0FBR3puQixTQTdKYSx3QkFTQSw0RUFvSnlDLFNBQVU2bkIsR0FDMUUsQ0FBQyxJQUFLLFFBQVFpNEIsU0FBUzEvQyxLQUFLdW1ELFVBQzlCOStCLEVBQU1TLGlCQUdKclosR0FBVzdPLE9BSUZraEUsR0FBSTFhLG9CQUFvQnhtRCxNQUNoQ3lrQixVQVNQeThCLEdBQW1CZ2dCLElBY25CLE1BQU05ZixHQUFPLFFBWVB1Z0IsR0FBa0IsT0FFbEJDLEdBQWtCLE9BQ2xCQyxHQUFxQixVQUNyQnZSLEdBQWMsQ0FDbEJ0NEIsVUFBVyxVQUNYOHBDLFNBQVUsVUFDVjVtQyxNQUFPLFVBRUhndkIsR0FBVSxDQUNkbHlCLFdBQVcsRUFDWDhwQyxVQUFVLEVBQ1Y1bUMsTUFBTyxLQVFULE1BQU02bUMsV0FBY3ZjLEdBQ2xCL2hELFlBQVk0b0MsRUFBUzhULEdBQ25COEksTUFBTTVjLEdBQ05yc0MsS0FBSzBwRCxRQUFVMXBELEtBQUsycEQsV0FBV3hKLEdBQy9CbmdELEtBQUs4N0QsU0FBVyxLQUNoQjk3RCxLQUFLZ2lFLHNCQUF1QixFQUM1QmhpRSxLQUFLaWlFLHlCQUEwQixFQUUvQmppRSxLQUFLazhELGdCQUlJNUwseUJBQ1QsT0FBT0EsR0FHRXBHLHFCQUNULE9BQU9BLEdBR0U5SSxrQkFDVCxPQUFPQSxHQUlUMzhCLE9BQ29Cdy9CLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBakQ3QixpQkFtRER2NkIsbUJBSWRsckIsS0FBS2tpRSxnQkFFRGxpRSxLQUFLMHBELFFBQVExeEIsV0FDZmg0QixLQUFLeWxELFNBQVMvRSxVQUFVcm1DLElBeEROLFFBbUVwQnJhLEtBQUt5bEQsU0FBUy9FLFVBQVVoa0MsT0FBT2lsRCxJQUcvQjdnQixHQUFPOWdELEtBQUt5bEQsVUFFWnpsRCxLQUFLeWxELFNBQVMvRSxVQUFVcm1DLElBQUl1bkQsSUFFNUI1aEUsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQUFJd25ELElBRTVCN2hFLEtBQUsrbEQsZ0JBakJZLEtBQ2YvbEQsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPbWxELElBRS9CNWQsR0FBYTk3QixRQUFRbm9CLEtBQUt5bEQsU0EvRFosa0JBaUVkemxELEtBQUttaUUsdUJBWXVCbmlFLEtBQUt5bEQsU0FBVXpsRCxLQUFLMHBELFFBQVExeEIsWUFHNURyVCxPQUNPM2tCLEtBQUt5bEQsU0FBUy9FLFVBQVVqNEMsU0FBU201RCxNQUlwQjNkLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBeEY3QixpQkEwRkR2NkIsbUJBZWRsckIsS0FBS3lsRCxTQUFTL0UsVUFBVXJtQyxJQUFJd25ELElBRTVCN2hFLEtBQUsrbEQsZ0JBYlksS0FDZi9sRCxLQUFLeWxELFNBQVMvRSxVQUFVcm1DLElBQUlzbkQsSUFHNUIzaEUsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPbWxELElBRS9CN2hFLEtBQUt5bEQsU0FBUy9FLFVBQVVoa0MsT0FBT2tsRCxJQUUvQjNkLEdBQWE5N0IsUUFBUW5vQixLQUFLeWxELFNBckdYLHFCQTBHYXpsRCxLQUFLeWxELFNBQVV6bEQsS0FBSzBwRCxRQUFRMXhCLGFBRzVEMnRCLFVBQ0UzbEQsS0FBS2tpRSxnQkFFRGxpRSxLQUFLeWxELFNBQVMvRSxVQUFVajRDLFNBQVNtNUQsS0FDbkM1aEUsS0FBS3lsRCxTQUFTL0UsVUFBVWhrQyxPQUFPa2xELElBR2pDM1ksTUFBTXRELFVBSVJnRSxXQUFXeEosR0FNVCxPQUxBQSxFQUFTLElBQUsrSixNQUNUakQsR0FBWUcsa0JBQWtCcG5ELEtBQUt5bEQsYUFDaEIsaUJBQVh0RixHQUF1QkEsRUFBU0EsRUFBUyxJQUV0REYsR0FBZ0JtQixHQUFNakIsRUFBUW5nRCxLQUFLeUQsWUFBWTZzRCxhQUN4Q25RLEVBR1RnaUIscUJBQ09uaUUsS0FBSzBwRCxRQUFRb1ksV0FJZDloRSxLQUFLZ2lFLHNCQUF3QmhpRSxLQUFLaWlFLDBCQUl0Q2ppRSxLQUFLODdELFNBQVdsOUMsWUFBVyxLQUN6QjVlLEtBQUsya0IsU0FDSjNrQixLQUFLMHBELFFBQVF4dUIsU0FHbEJrbkMsZUFBZTM2QyxFQUFPNDZDLEdBQ3BCLE9BQVE1NkMsRUFBTTlsQixNQUNaLElBQUssWUFDTCxJQUFLLFdBQ0gzQixLQUFLZ2lFLHFCQUF1QkssRUFDNUIsTUFFRixJQUFLLFVBQ0wsSUFBSyxXQUNIcmlFLEtBQUtpaUUsd0JBQTBCSSxFQUluQyxHQUFJQSxFQUdGLFlBRkFyaUUsS0FBS2tpRSxnQkFLUCxNQUFNalcsRUFBY3hrQyxFQUFNMEQsY0FFdEJuckIsS0FBS3lsRCxXQUFhd0csR0FBZWpzRCxLQUFLeWxELFNBQVNoOUMsU0FBU3dqRCxJQUk1RGpzRCxLQUFLbWlFLHFCQUdQakcsZ0JBQ0VqWSxHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQWpMRCxzQkFpTDRCaCtCLEdBQVN6bkIsS0FBS29pRSxlQUFlMzZDLEdBQU8sS0FDcEZ3OEIsR0FBYTU4QixHQUFHcm5CLEtBQUt5bEQsU0FqTEYscUJBaUw0QmgrQixHQUFTem5CLEtBQUtvaUUsZUFBZTM2QyxHQUFPLEtBQ25GdzhCLEdBQWE1OEIsR0FBR3JuQixLQUFLeWxELFNBakxILG9CQWlMNEJoK0IsR0FBU3puQixLQUFLb2lFLGVBQWUzNkMsR0FBTyxLQUNsRnc4QixHQUFhNThCLEdBQUdybkIsS0FBS3lsRCxTQWpMRixxQkFpTDRCaCtCLEdBQVN6bkIsS0FBS29pRSxlQUFlMzZDLEdBQU8sS0FHckZ5NkMsZ0JBQ0U3bUMsYUFBYXI3QixLQUFLODdELFVBQ2xCOTdELEtBQUs4N0QsU0FBVyxLQUlsQjdWLHVCQUF1QjlGLEdBQ3JCLE9BQU9uZ0QsS0FBS2tFLE1BQUssV0FDZixNQUFNc2QsRUFBT3VnRCxHQUFNdmIsb0JBQW9CeG1ELEtBQU1tZ0QsR0FFN0MsR0FBc0IsaUJBQVhBLEVBQXFCLENBQzlCLFFBQTRCLElBQWpCMytCLEVBQUsyK0IsR0FDZCxNQUFNLElBQUkvaEMsVUFBVSxvQkFBb0IraEMsTUFHMUMzK0IsRUFBSzIrQixHQUFRbmdELFdBT3JCb21ELEdBQXFCMmIsSUFRckI3Z0IsR0FBbUI2Z0Isd09DdDFKTk8sR0FBZSxJQXhDNUIseUJBc0NBLE9BckNJLFlBQUEzK0QsSUFBQSxTQUFJMEIsR0FDQSxJQUFJazlELEVBQUkzaUUsU0FBUzRpRSxPQUFPbDJELE1BQU0sd0JBQWlCakgsRUFBSSwwQkFBeUIsR0FDNUUsR0FBSWs5RCxFQUFHLE9BQU9FLG1CQUFtQkYsSUFHckMsWUFBQWhoRCxJQUFBLFNBQUlsYyxFQUFjOEIsRUFBWXN4QixRQUFBLElBQUFBLElBQUFBLEVBQUEsSUFFdEJBLEVBQUtpcUMsT0FDTGpxQyxFQUFLLFdBQXlCLEdBQVpBLEVBQUtpcUMsS0FBWSxHQUFLLFVBR2pDanFDLEVBQUtpcUMsTUFJaEJqcUMsRUFBT3I0QixPQUFPdWlFLFFBQVFscUMsR0FBTThTLFFBQ3hCLFNBQUNxM0IsRUFBZ0IsT0FBQ0MsRUFBQyxLQUFFNW5ELEVBQUMsS0FBTSxnQkFBRzJuRCxFQUFjLGFBQUtDLEVBQUMsWUFBSTVuRCxLQUFLLElBSWhFcmIsU0FBUzRpRSxPQUFTbjlELEVBQU8sSUFBTTQ1QixtQkFBbUI5M0IsR0FBU3N4QixHQUcvRCxZQUFBOHNCLE9BQUEsU0FBT2xnRCxFQUFjb3pCLEdBQ2pCejRCLEtBQUt1aEIsSUFBSWxjLEVBQU0sR0FBSSxHQUFGLENBQUksV0FBWSxHQUFNb3pCLEtBSTNDLFlBQUFvTSxRQUFBLFNBQVF4L0IsR0FDSixJQUFJc04sRUFBUzNTLEtBQUsyRCxJQUFJMEIsR0FDdEIsT0FBS3NOLEVBQ0VxUCxLQUFLQyxNQUFNdFAsR0FERSxJQUl4QixZQUFBbXdELFFBQUEsU0FBUXo5RCxFQUFjOEIsRUFBWXN4QixHQUM5Qno0QixLQUFLdWhCLElBQUlsYyxFQUFNMmMsS0FBSytnRCxVQUFVNTdELEdBQVFzeEIsSUFFOUMsRUF0Q0EsSUNEQSw0QkFLQSxPQUptQixFQUFBdXFDLFlBQWMsY0FDZCxFQUFBQyxZQUFjLGNBQ2QsRUFBQUMsY0FBZ0IsZ0JBQ2hCLEVBQUFDLFlBQWMsY0FDakMsRUFMQSxHQVVBLDRCQXlCQSxPQXZCbUIsRUFBQUMsVUFBWSxZQUNaLEVBQUFDLGVBQWlCLGlCQUNqQixFQUFBQyxlQUFpQixpQkFDakIsRUFBQUMsZUFBaUIsaUJBQ2pCLEVBQUFDLGlCQUFtQixtQkFDbkIsRUFBQUMsZUFBaUIsaUJBQ2pCLEVBQUFDLGdCQUFrQixrQkFDbEIsRUFBQUMsY0FBZ0IsZ0JBQ2hCLEVBQUFDLGdCQUFrQixrQkFDbEIsRUFBQUMsc0JBQXdCLHdCQUN4QixFQUFBQyxxQkFBdUIsdUJBQ3ZCLEVBQUFDLDJCQUE2Qiw2QkFDN0IsRUFBQUMscUJBQXVCLHVCQUN2QixFQUFBQyxnQkFBa0Isa0JBQ2xCLEVBQUFDLGNBQWdCLGdCQUNoQixFQUFBQyxxQkFBdUIsdUJBQ3ZCLEVBQUFDLGtCQUFvQixvQkFDcEIsRUFBQUMsbUJBQXFCLHFCQUNyQixFQUFBQyx1QkFBeUIseUJBQ3pCLEVBQUFDLGNBQWdCLGdCQUNoQixFQUFBQyxlQUFpQixpQkFDakIsRUFBQUMsaUJBQW1CLG1CQUNuQixFQUFBQyxzQkFBd0Isd0JBQzNDLEVBekJBLEdDeUNhQyxHQUFvQixJQW5EakMsV0FFSSxhQUNJM2tFLEtBQUs0a0UsVUFBWSxHQUNqQjVrRSxLQUFLNmtFLHNCQTZDYixPQXpDSSxZQUFBQSxvQkFBQSxzQkFDSTlrRSxPQUFPK2tFLFdBQWEsU0FBQzc0RCxHQUNqQixHQUFJQSxFQUFFaVIsT0FBU2pSLEVBQUVpUixNQUFNNm5ELFVBQVcsQ0FDOUJ4bEQsUUFBUXlsRCxJQUFJLzRELEVBQUVpUixPQUNkLElBQUkrbkQsRUFBb0IsQ0FBRUMsVUFBV2o1RCxFQUFFaVIsTUFBTTZuRCxVQUFXSSxVQUFVLEVBQU1DLGVBQWdCLElBQ3hGLEVBQUtDLEtBQUtDLEdBQWMxQixnQkFBaUI3akUsT0FBUWtsRSxNQUs3RCxZQUFBSSxLQUFBLFNBQUtFLEVBQW1CdmlELEVBQWF3aUQsR0FDakMsR0FBS0QsRUFDTCxJQUNJdmxFLEtBQUs0a0UsVUFBVTUzQixTQUFRLFNBQUN5NEIsR0FDaEJBLEVBQUdDLFlBQWNILEdBQWNFLEVBQUdMLGlCQUFtQkksRUFBVUosaUJBQThDLElBQTVCSyxFQUFHRSxzQkFDeEZGLEVBQUdHLFNBQVM1aUQsRUFBUXdpRCxNQUcxQixNQUFPcC9ELEdBQ0xtWixRQUFRblosTUFBTUEsS0FJdEIsWUFBQXkvRCxZQUFBLFNBQVlDLEdBRVIsSUFBSUMsRUFBVy9sRSxLQUFLNGtFLFVBQ2Y5MEQsUUFBTyxTQUFDMjFELEdBQU8sUUFBRUEsRUFBR08sTUFBUUYsRUFBTUUsS0FDNUJQLEVBQUdDLFlBQWNJLEVBQU1KLFdBQ3ZCRCxFQUFHTCxpQkFBbUJVLEVBQU1WLG1CQUV2Q3BsRSxLQUFLNGtFLFVBQVltQixHQUlyQixZQUFBRSxVQUFBLFNBQVVILEdBSURBLEVBQU1KLFdBQ1gxbEUsS0FBSzRrRSxVQUFVaGtFLEtBQUtrbEUsSUFFNUIsRUFqREEsSUNKQSxjQUNJLGFBQ0l2bUQsUUFBUXlsRCxJQUFJLGtDQXlHcEIsT0F0R0ksWUFBQWtCLFFBQUEsU0FBUXY0RCxFQUFLeEcsRUFBT2cvRCxHQU1oQixJQUFJcDRCLEVBQUksQ0FBRTVtQyxNQUFPQSxFQUFPeEYsS0FBTSxPQUFRd2tFLE9BQVFBLEVBQU9DLFdBRWhDLGlCQUFWai9ELFFBQWdDckIsSUFBVnFCLElBQzdCNG1DLEVBQUVwc0MsS0FBTyxVQUdiMGtFLGVBQWVDLFFBQVEzNEQsRUFBS3FVLEtBQUsrZ0QsVUFBVWgxQixLQUcvQyxZQUFBdzRCLFdBQUEsU0FBVzU0RCxFQUFLNjRELEdBQ1osSUFDSSxJQUFJaGxFLEVBQU94QixLQUFLeW1FLFdBQVc5NEQsR0FDM0IsR0FBSW5NLEVBQU0sQ0FDTixJQUFJa2xFLEVBQVdGLEVBQWNobEUsRUFBSzJGLE9BQ2xDbkgsS0FBS2ttRSxRQUFRdjRELEVBQUsrNEQsRUFBVSxJQUFJaCtELEtBQUtsSCxFQUFLMmtFLFVBRWhELE1BQU8vL0QsR0FDTG1aLFFBQVFuWixNQUFNQSxLQUl0QixZQUFBdWdFLGdCQUFBLFNBQWdCaDVELEdBQ1osT0FBT0EsRUFBTSxXQUdqQixZQUFBODRELFdBQUEsU0FBVzk0RCxHQUNQLElBQUlpNUQsRUFBUVAsZUFBZVEsUUFBUWw1RCxHQUNuQyxHQUFJaTVELEVBQU8sQ0FFUCxJQUFJNzRCLEVBQUkvckIsS0FBS0MsTUFBTTJrRCxHQUVmVCxFQUFTcDRCLEVBQUVvNEIsT0FDZixPQUFJejlELEtBQUsyaUIsTUFBUTBILFNBQVNvekMsSUFDdEJubUUsS0FBSzhtRSxXQUFXbjVELFFBQ2hCNFIsUUFBUXlsRCxJQUFJLGlDQUFrQ2ozQixJQUkzQ0EsRUFFWCxPQUFPLE1BR1gsWUFBQTg0QixRQUFBLFNBQVFsNUQsR0FDSixJQUFJaTVELEVBQVFQLGVBQWVRLFFBQVFsNUQsR0FDbkMsR0FBSWk1RCxFQUFPLENBRVAsSUFBSTc0QixFQUFJL3JCLEtBQUtDLE1BQU0ya0QsR0FFZlQsRUFBU3A0QixFQUFFbzRCLE9BQ2YsT0FBSXo5RCxLQUFLMmlCLE1BQVEwSCxTQUFTb3pDLFFBQ3RCbm1FLEtBQUs4bUUsV0FBV241RCxHQUlib2dDLEVBQUU1bUMsTUFFYixPQUFPLE1BR1gsWUFBQTIvRCxXQUFBLFNBQVduNUQsR0FDUDA0RCxlQUFlUyxXQUFXbjVELElBUzlCLFlBQUFvNUQsVUFBQSxTQUFVaHhDLEdBRU4sR0FBS0EsRUFBTCxDQU1BLElBQUl6eUIsRUFBUytpRSxlQUFlL2lFLE9BQzVCLEtBQUlBLEdBQVUsR0FBZCxDQUtBLElBRkEsSUFBSW1LLEVBQWlCLEdBRVowTSxFQUFRLEVBQUdBLEVBQVE3VyxFQUFRNlcsS0FDNUJ4TSxFQUFNMDRELGVBQWUxNEQsSUFBSXdNLElBQ3BCd2xDLFdBQVc1cEIsSUFFcEJ0b0IsRUFBSzdNLEtBQUsrTSxHQUdkLElBQVN3TSxFQUFRLEVBQUdBLEVBQVExTSxFQUFLbkssT0FBUTZXLElBQVMsQ0FDOUMsSUFBSXhNLEVBQU1GLEVBQUswTSxHQUNma3NELGVBQWVTLFdBQVduNUQsVUFwQjFCMDRELGVBQWVVLGFBdUIzQixFQTNHQSxHQzZDTUMsR0FBOEIsSUF0Q3BDLHlCQStCQSxPQTNCSSxZQUFBQyxJQUFBLFNBQUlDLEdBQ0FsbkUsS0FBS21uRSxXQUFXdm1FLEtBQUtzbUUsSUFHekIsWUFBQUUsT0FBQSxXQUNJLElBQUl6MEQsRUFBNEIsR0FRaEMsT0FQQTNTLEtBQUttbkUsV0FBV242QixTQUFRLFNBQUNxNkIsR0FDckIsSUFBSUEsRUFBR0MsV0FBUCxDQUVBLElBQUl4QixFQUF5QixDQUFFVixlQUFnQmlDLEVBQUdFLGVBQWdCcG1ELEtBQU1rbUQsRUFBR0csU0FDM0U3MEQsRUFBTy9SLEtBQUtrbEUsT0FHVG56RCxHQU9YLFlBQUE4MEQsWUFBQSxTQUFZQyxHQUNSLElBQUkxM0QsRUFBT2hRLEtBQUttbkUsV0FBV24zRCxNQUFLLFNBQUNxM0QsR0FBTyxPQUFBQSxFQUFHRSxpQkFBbUJHLEtBQzlELEdBQUkxM0QsRUFDQSxNQUFPLENBQUVvMUQsZUFBZ0JwMUQsRUFBS3UzRCxlQUFnQnBtRCxLQUFNblIsRUFBS3czRCxVQUlyRSxFQS9CQSxJQ0ZBLGNBUUksYUFDSXhuRSxLQUFLd0QsT0FBUyxHQUNkeEQsS0FBSzJaLFNBQVcsR0FDaEIzWixLQUFLc2xFLGNBQWdCQSxHQUNyQnRsRSxLQUFLMm5FLFdBQWFBLEdBa0wxQixPQS9LSSxZQUFBQyxnQkFBQSxTQUFnQkMsRUFBbUJDLEdBQy9CbkQsR0FBa0JVLEtBQUt3QyxFQUFXN25FLEtBQU04bkUsSUFHNUMsWUFBQUMsZ0JBQUEsU0FBZ0JDLEdBQ1osSUFLSSxPQUhtQjFGLEdBQWF6OUIsUUFBUW1qQyxHQUsxQyxNQUFPNWhFLEdBRUwsWUFEQW1aLFFBQVF5bEQsSUFBSTUrRCxLQU9wQixzQkFBSSw2QkFBYyxLQUFsQixXQUNJLE9BQU9wRyxLQUFLaW9FLHFCQUdoQixTQUFtQmh0RCxHQUNmamIsS0FBS2lvRSxnQkFBa0JodEQsbUNBSTNCLHNCQUFJLHlCQUFVLEtBQWQsV0FDSSxPQUFPamIsS0FBS2tvRSxpQkFHaEIsU0FBZWp0RCxHQUNYamIsS0FBS2tvRSxZQUFjanRELG1DQUd2QixzQkFBSSxzQkFBTyxLQUFYLFdBQ0ksTUFBTyxvQ0FHWCxzQkFBSSxvQkFBSyxLQUFULFdBQ0ksT0FBT2piLEtBQUtxc0MsUUFBUTVvQixJQUFJLGNBRTVCLFNBQVVpTixHQUNOMXdCLEtBQUtxc0MsUUFBUTVvQixJQUFJLFFBQVNpTixvQ0FHOUIsc0JBQUksc0JBQU8sS0FBWCxXQUNJLE9BQU8xd0IsS0FBS3FzQyxRQUFReHpCLEdBQUcsaUJBRTNCLFNBQVl6VyxJQUNJLElBQVJBLEVBQ0FwQyxLQUFLcXNDLFFBQVExbkIsT0FFYjNrQixLQUFLcXNDLFFBQVE1bkIsd0NBR3JCLFlBQUEwakQsT0FBQSxTQUFPMy9DLEdBQ0gsT0FBT3hvQixLQUFLcXNDLFFBQVE1b0IsSUFBSStFLElBRzVCLFlBQUE0L0MsT0FBQSxTQUFPdkYsRUFBRzVuRCxHQUNOamIsS0FBS3FzQyxRQUFRNW9CLElBQUlvL0MsRUFBRzVuRCxJQUd4QixzQkFBSSxrQkFBRyxLQUFQLFNBQVF3SSxHQUNKempCLEtBQUtxc0MsUUFBUTVvQixJQUFJQSxvQ0FPckIsWUFBQXVILE1BQUEsU0FBTUEsR0FDRixJQUFJcTlDLEVBQVFyb0UsS0FDWmdyQixFQUFNZ2lCLFNBQVEsU0FBQ2pXLEdBQU0sT0FBQXN4QyxFQUFNNW1ELEtBQUtzVixFQUFFcHBCLElBQUtvcEIsRUFBRTV2QixXQUc3QyxZQUFBc2EsS0FBQSxTQUFLOVQsRUFBYXhHLEdBQ2QsT0FBT25ILEtBQUtxc0MsUUFBUTk2QixLQUFLNUQsRUFBS3hHLElBR2xDLFlBQUFtaEUsUUFBQSxTQUFRMzZELEdBQ0osT0FBTzNOLEtBQUtxc0MsUUFBUTk2QixLQUFLNUQsSUFHN0IsWUFBQXFDLEtBQUEsU0FBSy9NLEdBQ0QsT0FBT2pELEtBQUtxc0MsUUFBUXI4QixLQUFLL00sSUFHN0IsWUFBQXc1QixTQUFBLFNBQVM4ckMsR0FFTCxPQURBdm9FLEtBQUtxc0MsUUFBUTVQLFNBQVM4ckMsR0FDZnZvRSxNQUdYLFlBQUE4OEIsWUFBQSxTQUFZeXJDLEdBRVIsT0FEQXZvRSxLQUFLcXNDLFFBQVF2UCxZQUFZeXJDLEdBQ2xCdm9FLE1BR1gsWUFBQW05QixTQUFBLFNBQVNvckMsR0FDTCxPQUFPdm9FLEtBQUtxc0MsUUFBUWxQLFNBQVNvckMsSUFHakMsWUFBQUMsUUFBQSxTQUFRQyxHQUVKLE9BREF6b0UsS0FBS3FzQyxRQUFROXBDLEtBQUtrbUUsR0FDWHpvRSxNQUdYLFlBQUE0SCxRQUFBLFdBQ0ksT0FBTzVILEtBQUtxc0MsUUFBUTlwQyxRQU94QixZQUFBNnNCLE9BQUEsU0FBTy9xQixFQUFNcWtFLEdBT1QsWUFQUyxJQUFBQSxJQUFBQSxHQUFBLEdBRUxBLEdBQ0Exb0UsS0FBSzJaLFNBQVMvWSxLQUFLeUQsR0FHdkJyRSxLQUFLcXNDLFFBQVFqZCxPQUFPL3FCLEVBQUtnb0MsU0FDbEJyc0MsTUFHWCxZQUFBa3RCLE1BQUEsV0FDSWx0QixLQUFLcXNDLFFBQVFuZixTQUdqQixZQUFBeTdDLFdBQUEsU0FBV3JuRSxHQUNQLE9BQW1DLElBQTVCbEIsT0FBT3FOLEtBQUtuTSxHQUFLZ0MsUUFHNUIsc0JBQUksaUJBQUUsS0FBTixXQUNJLE9BQU90RCxLQUFLc29FLFFBQVEsV0FHeEIsU0FBT3J0RCxHQUNIamIsS0FBS3loQixLQUFLLEtBQU14RyxvQ0FHcEIsWUFBQXpWLE1BQUEsV0FFSSxJQUFJKzhELEVBQUksSUFBSXFHLEVBRVI3NkIsRUFBSS90QyxLQUFLcXNDLFFBQVEsR0FBR2xuQixZQU14QixHQUxJNG9CLGFBQWFyQixjQUNiNjFCLEVBQUVsMkIsUUFBVXJzQyxLQUFLd0QsT0FBT3VxQyxJQUl4Qi90QyxLQUFLMlosU0FBU3JXLE9BQVMsRUFBRyxDQUMxQixJQUFJa0csRUFBT3hKLEtBQUsyWixTQUFTdlYsS0FBSSxTQUFDNlcsR0FDMUIsSUFBSTR0RCxFQUFLNXRELEVBQUV6VixRQUVYLE9BREErOEQsRUFBRWwyQixRQUFRamQsT0FBT3k1QyxFQUFHeDhCLFNBQ2J3OEIsS0FFWHRHLEVBQUU1b0QsU0FBV25RLEVBR2pCLE9BQU8rNEQsR0FRWCxZQUFBdUcsUUFBQSxTQUFReG5FLEdBQ0osT0FBS0EsRUFDRWxCLE9BQU82c0MsT0FBTzdzQyxPQUFPMG9CLE9BQU8xb0IsT0FBT0MsZUFBZWlCLElBQU9BLEdBRC9DQSxHQUd6QixFQTlMQSxHQzJHQSxXQVVJLFNBQVlpQixFQUFjNEUsRUFBZTRoRSxRQUFBLElBQUFBLElBQUFBLEdBQUEsR0FDckMvb0UsS0FBS3VDLEtBQU9BLEVBQ1p2QyxLQUFLbUgsTUFBUUEsRUFDYm5ILEtBQUsrb0UsV0FBYUEsSUFLMUIsR0F3QkksU0FBWTFqRSxFQUFlMjZCLEVBQW1CdFAsRUFBZ0JzNEMsRUFBbUJDLEVBQzdFQyxFQUEwQ0MsRUFBa0JDLEVBQzVEQyxFQUFpQ0MsR0FDakN0cEUsS0FBS3VwRSxLQUFPbGtFLEVBQ1pyRixLQUFLd3BFLFNBQVd4cEMsRUFDaEJoZ0MsS0FBSzJvQyxNQUFRalksRUFDYjF3QixLQUFLeXBFLFNBQVdULEVBQ2hCaHBFLEtBQUswcEUsTUFBUVQsRUFDYmpwRSxLQUFLMnBFLFdBQWFULEVBQ2xCbHBFLEtBQUs0cEUsUUFBVVQsRUFDZm5wRSxLQUFLNnBFLFFBQVVULEVBQ2ZwcEUsS0FBSzhwRSxlQUFpQlQsRUFDdEJycEUsS0FBSytwRSxhQUFlVCxHQW1CNUIsR0FlSSxTQUFZamtFLEVBQWMya0UsRUFDdEJDLEVBQW1CbHBDLEVBQTJDbXBDLFFBQTNDLElBQUFucEMsSUFBQUEsRUFBQSxTQUF1Qm9wQyxXQUFvQixJQUFBRCxJQUFBQSxPQUFBLEdBQzlEbHFFLEtBQUtxRixLQUFPQSxFQUNackYsS0FBS3doQixLQUFPd29ELEVBQ1pocUUsS0FBS2lxRSxTQUFXQSxFQUNoQmpxRSxLQUFLK2dDLElBQU1BLEVBQ1gvZ0MsS0FBS29xRSxpQkFBbUJGLEdBS2hDLEdBaUJJLFNBQVlsQyxFQUFnQnFDLEVBQ3hCQyxFQUEyQ3BCLEVBQW1DcUIsUUFBQSxJQUFBQSxJQUFBQSxHQUFBLEdBQzlFdnFFLEtBQUtnb0UsT0FBU0EsRUFDZGhvRSxLQUFLcXFFLFlBQWNBLEVBQ25CcnFFLEtBQUtzcUUsY0FBZ0JBLEVBQ3JCdHFFLEtBQUtrcEUsV0FBYUEsRUFDbEJscEUsS0FBS3VxRSxXQUFhQSxFQUNsQnZxRSxLQUFLd3FFLHNCQUF1QixFQUM1QnhxRSxLQUFLeXFFLGdCQUFpQixHQUk5QixHQVVJLFNBQVlDLEVBQXVCQyxFQUF1QkMsUUFBOUMsSUFBQUYsSUFBQUEsRUFBQSxRQUF1QixJQUFBQyxJQUFBQSxFQUFBLFNBQXVCLElBQUFDLElBQUFBLEVBQUEsSUFDdEQ1cUUsS0FBSzBxRSxVQUFZQSxFQUNqQjFxRSxLQUFLMnFFLFVBQVlBLEdBQVlBLEdBQVksRUFBSSxHQUFLQSxFQUNsRDNxRSxLQUFLNHFFLGFBQWVBLEVBQ3BCNXFFLEtBQUs2cUUsV0FBYTdrRSxLQUFLNHVCLEtBQUs1MEIsS0FBSzRxRSxhQUFlNXFFLEtBQUsycUUsV0FLN0QsR0FTSSxTQUFZakQsRUFBZ0JvRCxFQUEyQ0MsUUFBQSxJQUFBQSxJQUFBQSxFQUFBLFNBQW9CWixNQUN2Rm5xRSxLQUFLMG5FLE9BQVNBLEVBQ2QxbkUsS0FBSzhxRSxlQUFpQkEsRUFDdEI5cUUsS0FBSytxRSxpQkFBbUJBLEdBS2hDLEdBWUksU0FBWWhxQyxFQUFhdmxCLEVBQWdCa29CLEVBQStCc25DLFFBQS9CLElBQUF0bkMsSUFBQUEsT0FBQSxRQUErQixJQUFBc25DLElBQUFBLE9BQUEsR0FDcEVockUsS0FBSytnQyxJQUFNQSxFQUNYL2dDLEtBQUt3YixPQUFTQSxFQUNkeGIsS0FBSzBqQyxRQUFVQSxFQUNmMWpDLEtBQUtnckUsU0FBV0EsR0FLeEIsR0FXSSxTQUFZdDZDLEVBQWUwVSxFQUFrQm5nQyxFQUFjNHNCLEdBQ3ZEN3hCLEtBQUswd0IsTUFBUUEsRUFDYjF3QixLQUFLb2xDLFFBQVVBLEVBQ2ZwbEMsS0FBS2lGLEtBQU9BLEVBQ1pqRixLQUFLNnhCLFNBQVdBLDJjQ3JUeEIsZUFXSSxXQUFZenNCLEVBQW1DNmxFLFFBQUEsSUFBQUEsSUFBQUEsR0FBQSxHQUEvQyxNQUNJLGNBQU8sWUFDUCxFQUFLN2xFLFFBQVVBLEdBQVcsSUFBSThsRSxHQUM5QixFQUFLRCxTQUFXQSxFQUNoQixFQUFLRSxXQTJCYixPQTFDcUMsUUFrQmpDLFlBQUFBLE9BQUEsV0FDSSxJQUFJL0IsRUFBVXBwRSxLQUFLb0YsUUFBVXBGLEtBQUtvRixRQUFReWtFLGFBQVUvakUsRUFDaERxakUsRUFBVW5wRSxLQUFLb0YsUUFBVXBGLEtBQUtvRixRQUFRd2tFLGFBQVU5akUsRUFFcEQ5RixLQUFLcXNDLFNBQ2lCLElBQWxCcnNDLEtBQUtpckUsU0FDQ2pyRSxLQUFLd0QsT0FBTyxvQ0FDWnhELEtBQUt3RCxPQUFPLGFBRWxCNGxFLEdBQ0FwcEUsS0FBS3FzQyxRQUFROTZCLEtBQUssVUFBVzYzRCxHQUU3QkQsR0FDQW5wRSxLQUFLcXNDLFFBQVE5NkIsS0FBSyxVQUFXNDNELElBR3JDLFlBQUEzakUsTUFBQSxXQUVJLElBQUk0bEUsRUFBSyxZQUFNNWxFLE1BQUssV0FDaEIrOEQsRUFBSSxJQUFJOEksRUFBZ0JyckUsS0FBSzhvRSxRQUFROW9FLEtBQUtvRixTQUFVcEYsS0FBS2lyRSxVQUc3RCxPQUZBMUksRUFBRTVvRCxTQUFXeXhELEVBQUd6eEQsU0FDaEI0b0QsRUFBRWwyQixRQUFVKytCLEVBQUcvK0IsUUFDUmsyQixHQUVmLEVBMUNBLENBQXFDcUcsK2RDQXJDLGVBR0ksV0FBWXhqRSxHQUFaLE1BQ0ksY0FBTyxZQUNQLEVBQUtBLFFBQVVBLElBaUZ2QixPQXRGK0IsUUFRM0IsWUFBQStsRSxPQUFBLFdBQ21DLFdBQTNCbnJFLEtBQUtvRixRQUFRa21FLFlBQ2J0ckUsS0FBS3FzQyxRQUFVcnNDLEtBQUt3RCxPQUFPLHNCQUNBLFdBQTNCeEQsS0FBS29GLFFBQVFrbUUsVUFDYnRyRSxLQUFLcXNDLFFBQVVyc0MsS0FBS3dELE9BQU8sbUVBRTNCeEQsS0FBS3FzQyxRQUFVcnNDLEtBQUt3RCxPQUFPLHVCQUFnQnhELEtBQUtvRixRQUFRa21FLFVBQVMsV0FHekUsc0JBQUksa0JBQUcsS0FBUCxXQUNJLE1BQStCLFNBQTNCdHJFLEtBQUtvRixRQUFRa21FLFdBQXdCdHJFLEtBQUtxc0MsUUFBUWpxQyxNQUMzQyxJQUFJc0csS0FBSzFJLEtBQUtxc0MsUUFBUWpxQyxNQUFNckIsWUFBWUEsV0FFNUNmLEtBQUtxc0MsUUFBUWpxQyxXQUd4QixTQUFRNlksR0FDSmpiLEtBQUtxc0MsUUFBUWpxQyxJQUFJNlksb0NBUXJCLHNCQUFJLHFCQUFNLEtBQVYsU0FBV0EsR0FDUGpiLEtBQUtxc0MsUUFBUWpxQyxJQUFJNlksR0FDakJqYixLQUFLcXNDLFFBQVFrL0IsMENBR2pCLHNCQUFJLHdCQUFTLEtBQWIsV0FDSSxPQUFPdnJFLEtBQUtzb0UsUUFBUSxzQkFHeEIsU0FBY3J0RCxHQUNWamIsS0FBS3loQixLQUFLLGdCQUFpQnhHLG9DQUcvQixzQkFBSSx1QkFBUSxLQUFaLFdBQ0ksT0FBT2piLEtBQUtxc0MsUUFBUXh6QixHQUFHLGlCQUczQixTQUFhb0MsR0FDVCxJQUFJN1ksR0FBWSxJQUFONlksRUFBYSxPQUFTLFFBQ2hDamIsS0FBS3FzQyxRQUFROTZCLEtBQUssV0FBWW5QLG9DQUdsQyxzQkFBSSx1QkFBUSxLQUFaLFdBQ0ksT0FBT3BDLEtBQUtxc0MsUUFBUXh6QixHQUFHLGlCQUczQixTQUFhb0MsR0FDVCxJQUFJN1ksR0FBWSxJQUFONlksRUFBYSxPQUFTLFFBQ2hDamIsS0FBS3FzQyxRQUFROTZCLEtBQUssV0FBWW5QLG9DQUdsQyxzQkFBSSxvQkFBSyxLQUFULFdBQ0ksTUFBMEMsU0FBbkNwQyxLQUFLc29FLFFBQVEsdUJBSXhCLFNBQVVydEQsR0FDTmpiLEtBQUt5aEIsS0FBSyxpQkFBa0J4RyxvQ0FHaEMsWUFBQXpWLE1BQUEsV0FDSSxPQUFPLFlBQU1BLE1BQUssWUFHdEIsWUFBQWdtRSxvQkFBQSxzQkFDSXhyRSxLQUFLcXNDLFFBQVFobEIsR0FBRyxZQUFZLFNBQUNwYixHQUN6QixFQUFLMjdELGdCQUFnQixFQUFLdEMsY0FBY1osc0JBQXVCLENBQUVRLFVBQVcsQ0FBRTk4QyxNQUFPbmMsR0FBS201RCxlQUFnQixFQUFLaGdFLFFBQVFnZ0UscUJBSS9ILFlBQUFtRyxPQUFBLFdBQ0l2ckUsS0FBS3FzQyxRQUFRay9CLFVBRXJCLEVBdEZBLENBQStCM0MsK2RDQS9CLGVBQ0ksV0FBWXJCLEdBQVosV0FDUW5pRSxFQUEwQixDQUFFZ2dFLGVBQWdCbUMsRUFBZ0IrRCxVQUFXLG1CQUMzRSxjQUFNbG1FLElBQVEsTUFDVCtsRSxXQXVCYixPQTNCeUMsUUFPckMsc0JBQUksa0JBQUcsS0FBUCxXQUVJLE9BQWUsSUFETG5yRSxLQUFLcXNDLFFBQVF4ekIsR0FBRyxZQUNKLE9BQVMsYUFNbkMsU0FBUW9DLEdBQ0pqYixLQUFLcXNDLFFBQVFqcUMsSUFBSTZZLG9DQUdyQixZQUFBelYsTUFBQSxXQUNJLElBQUk0bEUsRUFBSyxZQUFNNWxFLE1BQUssV0FDaEIrOEQsRUFBSSxJQUFJa0osRUFBb0J6ckUsS0FBSzhvRSxRQUFROW9FLEtBQUtvRixVQUlsRCxPQUhBbTlELEVBQUVsMkIsUUFBVSsrQixFQUFHLytCLFFBQ2ZrMkIsRUFBRTVvRCxTQUFXeXhELEVBQUd6eEQsU0FDaEIzWixLQUFLd3JFLHNCQUNFakosR0FFZixFQTNCQSxDQUF5Q21KLCtkQ0N6QyxlQUlJLFdBQVlyRixFQUF1Q2tCLEdBQW5ELE1BQ0ksY0FBTyxZQUNQLEVBQUtqQyxjQUFnQkEsR0FDckIsRUFBS2UsZUFBaUJBLEVBQ3RCLEVBQUtrQixlQUFpQkEsRUFDdEIsRUFBS2tELGdCQUFpQixJQTZDOUIsT0F0RDJDLFFBZ0J2QyxZQUFBOW1FLElBQUEsU0FBSXlCLEdBRUEsSUFBSWlqRSxFQUFRcm9FLEtBQ1IwTixFQUFRMjZELEVBQU1vQyxlQUNsQixJQUFjLElBQVYvOEQsRUFBZ0IsQ0FDaEIsSUFBSUMsRUFBTXFVLEtBQUsrZ0QsVUFBVTM5RCxHQUNyQitCLEVBQVFuSCxLQUFLcW1FLGVBQWVRLFFBQVFsNUQsR0FDeEMsR0FBSXhHLEVBRUEsWUFEQWtoRSxFQUFNc0QsZUFBZXhrRSxHQUs3QixJQUFJeWtFLEVBQWMsQ0FDZDdxQyxJQUFLMzdCLEVBQVEyN0IsSUFDYnZsQixPQUFRLE1BQ1Jrb0IsUUFBU3QrQixFQUFRcytCLFFBQVV0K0IsRUFBUXMrQixRQUFVLElBRWpEMWpDLEtBQUt3RCxPQUFPcStCLEtBQUsrcEMsR0FBYWp3RCxNQUFLLFNBQWNzb0IsSUFDL0IsSUFBVnYyQixHQUNBMjZELEVBQU1oQyxlQUFlSCxRQUFRdjRELEVBQUtzMkIsRUFBVSxJQUFJdjdCLEtBQUtBLEtBQUsyaUIsTUFBUSxNQUV0RWc5QyxFQUFNc0QsZUFBZTFuQyxNQUV0QixTQUFlNzlCLEdBQ2RpaUUsRUFBTXdELFlBQVl6bEUsRUFBT2hCLE9BS2pDLFlBQUF1bUUsZUFBQSxTQUFlMW5DLEdBQ1hqa0MsS0FBSzRuRSxnQkFBZ0I1bkUsS0FBS3NsRSxjQUFjeEIscUJBQXNCLENBQUVzQixlQUFnQnBsRSxLQUFLdW5FLGVBQWdCckMsVUFBVyxDQUFFOThDLE1BQU82YixNQUc3SCxZQUFBNG5DLFlBQUEsU0FBWXpsRSxFQUEwQmhCLEdBQ2xDLElBQUkwbUUsRUFBb0MsQ0FBRTFHLGVBQWdCcGxFLEtBQUt1bkUsZUFBZ0JyQyxVQUFXLENBQUU5OEMsTUFBT2hpQixFQUFPMmxFLFNBQVUzbUUsRUFBUTRsRSxXQUM1SGhyRSxLQUFLNG5FLGdCQUFnQjVuRSxLQUFLc2xFLGNBQWN2QiwyQkFBNEIrSCxJQUU1RSxFQXREQSxDQUEyQ2xELCtkQ0QzQyxlQVFJLFdBQVl4akUsR0FBWixNQUNJLGNBQU8sWUFDUCxFQUFLQSxRQUFVQSxFQUNmLEVBQUs0bUUsT0FBUyxrQkFBVyxFQUFLNW1FLFFBQVFzaUUsUUFDdEMsRUFBSzJDLFlBQWMsdUJBQWdCLEVBQUtqbEUsUUFBUXNpRSxVQXFDeEQsT0FqRDJDLFFBZXZDLFlBQUF5RCxPQUFBLHNCQUNRbnJFLEtBQUtxc0MsU0FDTHJzQyxLQUFLcXNDLFFBQVEzdkIsU0FFakIxYyxLQUFLcXNDLFFBQ0Ryc0MsS0FBS3dELE9BQ0QseUNBQWtDeEQsS0FBS3FxRSxZQUFXLDZKQU8xRCxJQUZBLElBQUk0QixFQUFXanNFLEtBQUt3RCxPQUFPLHlEQUFrRHhELEtBQUtnc0UsT0FBTSxZQUUvRTd4RCxFQUFRLEVBQUdBLEdBQVNuYSxLQUFLb0YsUUFBUTBsRSxlQUFlRCxZQUFjMXdELEdBQVMsRUFBR0EsSUFBUyxDQUN4RixJQUFJMi9DLEVBQUs5NUQsS0FBS3dELE9BQU8sK0JBQ2pCaTlELEVBQU96Z0UsS0FBS3dELE9BQU8sc0RBQStDMlcsRUFBSyxhQUFLQSxFQUFLLFNBQ3JGMi9DLEVBQUcxcUMsT0FBT3F4QyxHQUNWd0wsRUFBUzc4QyxPQUFPMHFDLEdBRWhCMkcsRUFBS3A1QyxHQUFHLFNBQVMsU0FBQ3BiLEdBQ2RBLEVBQUVpYyxpQkFDRixJQUFJL04sRUFBUSxFQUFLM1csT0FBT3lJLEVBQUV4RyxRQUFROEwsS0FBSyxnQkFFbkMsRUFBS25NLFFBQVEybEUsa0JBQ2IsRUFBSzNsRSxRQUFRMmxFLGlCQUFpQmg0QyxTQUFTNVksT0FJbkRuYSxLQUFLcXNDLFFBQVFyOEIsS0FBSyxPQUFPb2YsT0FBTzY4QyxJQUdwQyxZQUFBQyxNQUFBLFdBQ0lsc0UsS0FBS3dELE9BQU8sSUFBTXhELEtBQUtnc0UsUUFBUXJ5RCxTQUFTLE1BQU0rQyxVQUV0RCxFQWpEQSxDQUEyQ2tzRCwrZENDM0MsZUF1QkksV0FBWXhqRSxHQUFaLE1BQ0ksY0FBTyxZQUNQLEVBQUsrbUUsWUFBYy9tRSxFQUFRK21FLFlBQzNCLEVBQUtDLFdBQWFobkUsRUFBUWduRSxXQUUxQixFQUFLQyxPQUFTLEtBQ2QsRUFBS0MsU0FBVyxLQUNoQixFQUFLN21FLE9BQVMsS0FHZCxFQUFLOG1FLFlBQWMsRUFDbkIsRUFBS3ZDLFNBQVcsS0FDaEIsRUFBS3dDLGFBQWUsS0FDcEIsRUFBS3pCLGlCQUFtQixPQXlEaEMsT0E3RitDLFFBNEMzQyxZQUFBMEIsV0FBQSxTQUFXOUosRUFBc0MrSixJQUdoQixJQUZqQi9KLEVBQVEsR0FFVmdLLGdCQU9GM3NFLEtBQUt1c0UsWUFBY3ZzRSxLQUFLd3NFLGFBQWEzQixhQUNyQ3RyRCxRQUFReWxELElBQUkseUNBQTBDaGxFLEtBQUt1c0UsWUFBYyxHQUN6RXZzRSxLQUFLdXNFLGNBQ0x2c0UsS0FBSytxRSxpQkFBaUIvcUUsS0FBS3VzRSxlQUt2QyxZQUFBSyxRQUFBLFNBQVE1K0QsR0FDSmhPLEtBQUt5RixPQUFTdUksRUFDZGhPLEtBQUtzc0UsU0FBU00sUUFBUTUrRCxJQUcxQixZQUFBNitELFVBQUEsV0FDSTdzRSxLQUFLc3NFLFNBQVNPLFVBQVU3c0UsS0FBS3lGLFNBR2pDLFlBQUEwMkQsT0FBQSxzQkFDSW44RCxLQUFLcXNFLE9BQVMsZUFBaUJyc0UsS0FBS21zRSxZQUFZNTZELEtBQUssTUFDckQsSUFBSXU3RCxFQUFhOXNFLEtBQUt3RCxPQUFPLHlDQUFrQ3hELEtBQUtxc0UsT0FBTSx5REFDMUVyc0UsS0FBS21zRSxZQUFZMWxELEtBQUtxbUQsR0FHdEIsSUFBSTFuRSxFQUFVLENBRVZoRyxLQUFNWSxLQUFLd0QsT0FBTyxXQUFJeEQsS0FBS3FzRSxTQUFVLEdBQ3JDVSxXQUFZLE1BQ1pDLFVBQVcsR0FDWEMsaUJBQWlCLEdBR3JCanRFLEtBQUtzc0UsU0FBVyxJQUFJWSxzQkFBcUIsU0FBQ3ZLLEVBQVMrSixHQUFXLFNBQUtELFdBQVc5SixFQUFTK0osS0FBU3RuRSxHQUVoRyxJQUFJK25FLEVBQU9udEUsS0FBS21zRSxZQUFZbjhELEtBQUssTUFFN0J2SyxFQURVMG5FLEVBQUtBLEVBQUs3cEUsT0FBUyxHQUdqQ3RELEtBQUs0c0UsUUFBUW5uRSxJQUVyQixFQTdGQSxDQUErQ21qRSwrZENEL0MsZUFLSSxtQkFDSSxjQUFPLFlBQ1AsRUFBS3hYLE1BQVEsS0FrQnJCLE9BekJ5RCxRQWFyRCxZQUFBLzJDLElBQUEsU0FBSTdZLEdBQ0t4QixLQUFLZ1EsS0FBS3hPLEVBQUs0RCxRQUFRNGpFLFdBQ3hCaHBFLEtBQUtveEQsTUFBTXh3RCxLQUFLWSxJQU94QixZQUFBNHJFLGFBQUEsU0FBYXBFLEdBQ1QsT0FBT2hwRSxLQUFLb3hELE1BQU1waEQsTUFBSyxTQUFDeE8sR0FBUyxPQUFBQSxFQUFLNEQsUUFBUTRqRSxXQUFhQSxNQUVuRSxFQXpCQSxDQUF5REosK2RDRHpELGVBQ0ksbUJBQ0ksY0FBTyxZQUNQLEVBQUt1QyxXQVViLE9BYnVDLFFBTW5DLFlBQUFBLE9BQUEsV0FDSW5yRSxLQUFLcXNDLFFBQVVyc0MsS0FBS3dELE9BQU8saURBRy9CLFlBQUFnQyxNQUFBLFdBQ0ksT0FBTyxZQUFNQSxNQUFLLFlBRTFCLEVBYkEsQ0FBdUNvakUsK2RDQXZDLGVBRUksbUJBQ0ksY0FBTyxZQUNQLEVBQUt1QyxXQXVDYixPQTNDd0MsUUFPcEMsWUFBQUEsT0FBQSxXQUNJbnJFLEtBQUtxc0MsUUFBVXJzQyxLQUFLd0QsT0FBTyw4Q0FNL0IsWUFBQTZwRSxnQkFBQSxTQUFnQmxwRSxHQUNaLElBQUltcEUsRUFBTXR0RSxLQUFLd0QsT0FBTyxpSkFDeUJ4RCxLQUFLdW5FLGVBQWMsNkVBSWxFLE9BRkErRixFQUFJam1ELEdBQUcsUUFBU2xqQixHQUNoQm5FLEtBQUtxc0MsUUFBUWpkLE9BQU9rK0MsR0FDYnR0RSxNQU1YLFlBQUF1dEUsbUJBQUEsU0FBbUJwcEUsR0FDZixJQUFJbXBFLEVBQU10dEUsS0FBS3dELE9BQU8sK0lBQ3NCeEQsS0FBS3VuRSxlQUFjLHFGQUkvRCxPQUZBK0YsRUFBSWptRCxHQUFHLFFBQVNsakIsR0FDaEJuRSxLQUFLcXNDLFFBQVFqZCxPQUFPaytDLEdBQ2J0dEUsTUFHWCxZQUFBd3RFLHNCQUFBLFdBQ0ksSUFBSUYsRUFBTXR0RSxLQUFLd0QsT0FBTyx3TEFDK0R4RCxLQUFLdW5FLGVBQWMsbUVBQzFEdm5FLEtBQUt1bkUsZUFBYyw0RUFHakUsT0FEQXZuRSxLQUFLcXNDLFFBQVFqZCxPQUFPaytDLEdBQ2J0dEUsTUFFZixFQTNDQSxDQUF3QzRvRSwrZENDeEMsZUFDSSxXQUFZckIsRUFBd0JrRyxRQUFBLElBQUFBLElBQUFBLEVBQUEsUUFBcEMsV0FDUXJvRSxFQUEwQixDQUFFZ2dFLGVBQWdCbUMsRUFBZ0IrRCxVQUFXbUMsVUFDM0UsY0FBTXJvRSxJQUFRLE1BQ1QrbEUsV0FXYixPQWYwQyxRQU90QyxZQUFBM2xFLE1BQUEsV0FDSSxJQUFJNGxFLEVBQUssWUFBTTVsRSxNQUFLLFdBQ2hCKzhELEVBQUksSUFBSW1MLEVBQXFCMXRFLEtBQUs4b0UsUUFBUTlvRSxLQUFLb0YsVUFJbkQsT0FIQW05RCxFQUFFbDJCLFFBQVUrK0IsRUFBRy8rQixRQUNmazJCLEVBQUU1b0QsU0FBV3l4RCxFQUFHenhELFNBQ2hCNG9ELEVBQUVpSixzQkFDS2pKLEdBRWYsRUFmQSxDQUEwQ21KLCtkQ0ExQyxlQU9JLFdBQVl0bUUsR0FBWixNQUNJLGNBQU8sWUFDUCxFQUFLQSxRQUFVQSxFQUNmLEVBQUsrbEUsV0FpQmIsT0EzQjZDLFFBYXpDLFlBQUFBLE9BQUEsV0FDSW5yRSxLQUFLcXNDLFFBQVVyc0MsS0FBS3dELE9BQU8scUJBQzNCeEQsS0FBS3FzQyxRQUFRanFDLElBQUlwQyxLQUFLb0YsUUFBUStCLE9BQzlCbkgsS0FBS3FzQyxRQUFROXBDLEtBQUt2QyxLQUFLb0YsUUFBUTdDLE1BRTNCdkMsS0FBS29GLFFBQVEyakUsWUFDYi9vRSxLQUFLcXNDLFFBQVE5NkIsS0FBSyxXQUFZLGFBR3RDLFlBQUEvTCxNQUFBLFdBQ0ksSUFBSUEsRUFBUSxZQUFNQSxNQUFLLFdBRXZCLE9BREFBLEVBQU1nakUsUUFBUXhvRSxLQUFLcXNDLFFBQVE5cEMsUUFDcEJpRCxHQUVmLEVBM0JBLENBQTZDb2pFLCtkQ0E3QyxlQUNJLFdBQVlyQixHQUFaLFdBQ1FuaUUsRUFBMEIsQ0FBRWdnRSxlQUFnQm1DLEVBQWdCK0QsVUFBVyxpQkFDM0UsY0FBTWxtRSxJQUFRLE1BQ1QrbEUsV0FxQmIsT0F6QnVDLFFBT25DLHNCQUFJLGtCQUFHLEtBS1AsV0FDSSxPQUFPbnJFLEtBQUtxc0MsUUFBUWpxQyxXQU54QixTQUFRNlksR0FDSmpiLEtBQUtxc0MsUUFBUWpxQyxJQUFJNlksR0FDakJqYixLQUFLcXNDLFFBQVFrL0IsMENBT2pCLFlBQUEvbEUsTUFBQSxXQUNJLElBQUk0bEUsRUFBSyxZQUFNNWxFLE1BQUssV0FDaEIrOEQsRUFBSSxJQUFJb0wsRUFBa0IzdEUsS0FBSzhvRSxRQUFROW9FLEtBQUtvRixVQUtoRCxPQUpBbTlELEVBQUVsMkIsUUFBVSsrQixFQUFHLytCLFFBQ2ZrMkIsRUFBRTVvRCxTQUFXeXhELEVBQUd6eEQsU0FDaEIzWixLQUFLd3JFLHNCQUVFakosR0FFZixFQXpCQSxDQUF1Q21KLCtkQ0F2QyxlQUlJLFdBQVl0bUUsR0FBWixNQUNJLFlBQU1BLElBQVEsWUFDZCxFQUFLQSxRQUFVQSxFQUNmLEVBQUsrbEUsV0FzQmIsT0E3QnVDLFFBVW5DLFlBQUFBLE9BQUEsV0FDSSxZQUFNQSxPQUFNLFdBQ1osSUFBSXlDLEVBQU81dEUsS0FBS29GLFFBQVF5b0UsS0FBTywwQkFBbUI3dEUsS0FBS29GLFFBQVF5b0UsS0FBSSxVQUFXLEdBQzlFN3RFLEtBQUtxc0MsUUFBUWpkLE9BQU93K0MsR0FDaEI1dEUsS0FBS29GLFFBQVEwb0UsU0FDYjl0RSxLQUFLK3RFLG1CQUdiLFlBQUFBLGdCQUFBLHNCQUNJL3RFLEtBQUtxc0MsUUFBUWhsQixHQUFHLFNBQVMsU0FBQ3BiLEdBQU0sU0FBSzdHLFFBQVEwb0UsUUFBUTdoRSxPQUd6RCxZQUFBekcsTUFBQSxXQUNJLElBQUk0bEUsRUFBSyxZQUFNNWxFLE1BQUssV0FDaEI4bkUsRUFBTSxJQUFJVSxFQUFrQmh1RSxLQUFLOG9FLFFBQVE5b0UsS0FBS29GLFVBR2xELE9BRkFrb0UsRUFBSTN6RCxTQUFXeXhELEVBQUd6eEQsU0FFWDJ6RCxHQUVmLEVBN0JBLENBQXVDNUIsK2RDR3ZDLGVBYUksV0FBWXRtRSxHQUFaLE1BQ0ksWUFBTUEsSUFBUSxZQUNkLEVBQUtBLFFBQVVBLEVBQ2YsRUFBSytsRSxXQWtEYixPQWxFeUMsUUF1QnJDLFlBQUE4QyxlQUFBLFNBQWV2QixFQUFtQ3pnRSxHQUU5Q3NULFFBQVF5bEQsSUFBSSxlQUFnQjBILEVBQU93QixLQUFLM3BELEtBQUs0cEQsa0JBRTdDLElBQ0lDLEVBRE0xQixFQUFPd0IsS0FBSzNwRCxLQUFLNHBELGlCQUNIRSxZQUFZcitELE1BQUssU0FBQ0ksR0FBVSxPQUFBQSxFQUFNNjRELFNBQ3REbUYsSUFHQXB1RSxLQUFLc3VFLFdBQVdsc0UsSUFBTWdzRSxFQUFjaHNFLElBQ3BDcEMsS0FBS3N1RSxXQUFXL0MsVUFFcEJtQixFQUFPNkIsY0FBYzVwRCxRQUd6QixZQUFBd21ELE9BQUEsc0JBRUluckUsS0FBS3N1RSxXQUFhLElBQUlaLEdBQXFCMXRFLEtBQUtvRixRQUFRZ2dFLGdCQUN4RHBsRSxLQUFLc3VFLFdBQ0E3eEMsU0FBU3o4QixLQUFLb0YsUUFBUW9wRSxVQUN0QnhqRCxNQUFNLENBQUMsQ0FBRXJkLElBQUssS0FBTXhHLE1BQU9uSCxLQUFLb0YsUUFBUXFwRSxXQUN6QyxDQUFFOWdFLElBQUssY0FBZXhHLE1BQU9uSCxLQUFLb0YsUUFBUXNwRSxhQUMxQyxDQUFFL2dFLElBQUssZ0JBQWlCeEcsTUFBT25ILEtBQUtvRixRQUFRcWtFLFlBRWhEenBFLEtBQUsydUUsV0FBYSxJQUFJWCxHQUFrQixDQUNwQzFDLFVBQVcsU0FDWGxHLGVBQWdCcGxFLEtBQUtvRixRQUFRZ2dFLGVBQzdCeUksS0FBTSxTQUNOQyxRQUFTLFNBQUM3aEUsR0FBTSxTQUFLN0csUUFBUXdwRSxTQUFTLEVBQU0zaUUsTUFHaEQsSUFBSTRpRSxFQUFVN3VFLEtBQUt3RCxPQUFPLGtEQUMxQnhELEtBQUtxc0MsUUFBVXdpQyxFQUFRei9DLE9BQU9wdkIsS0FBS3N1RSxXQUFXamlDLFNBQVNqZCxPQUFPcHZCLEtBQUsydUUsV0FBV3RpQyxVQUdsRixZQUFBN21DLE1BQUEsV0FFSSxJQUFJNGxFLEVBQUssWUFBTTVsRSxNQUFLLFdBQ2hCKzhELEVBQUksSUFBSXVNLEVBQW9COXVFLEtBQUs4b0UsUUFBUTlvRSxLQUFLb0YsVUFHbEQsT0FGQW05RCxFQUFFNW9ELFNBQVd5eEQsRUFBR3p4RCxTQUVUNG9ELEdBRWYsRUFsRUEsQ0FBeUNtSiwrZENBekMsZUFlSSxXQUFZdG1FLEdBQVosTUFDSSxjQUFPLFlBQ1AsRUFBS0EsUUFBVUEsRUFDZixFQUFLMnBFLGtCQUFvQixFQUFLM3BFLFFBQVFpbEUsWUFDdEMsRUFBSzJFLFFBQVUsVUFBRyxFQUFLRCxrQkFBaUIsZUFBTyxFQUFLM3BFLFFBQVE0akUsVUFDNUQsRUFBS2lHLGFBQWUsVUFBRyxFQUFLRixrQkFBaUIsZ0JBQVEsRUFBSzNwRSxRQUFRNGpFLFVBQ2xFLEVBQUtxQixZQUFjLFVBQUcsRUFBSzBFLGtCQUFpQixnQkFBUSxFQUFLM3BFLFFBQVE0akUsVUFDakUsRUFBS2hCLE9BQVMsVUFBRyxFQUFLK0csa0JBQWlCLGNBQU0sRUFBSzNwRSxRQUFRNGpFLFVBQzFELEVBQUttQyxTQUNMLEVBQUsrQyxLQUFPLEVBQUtnQixhQUNqQixFQUFLakIsZUFBaUIsU0FBNEJ2QixFQUF3Q3pnRSxHQUFhc1QsUUFBUXlsRCxTQWtGdkgsT0EzRytDLFFBNkIzQyxZQUFBbUcsT0FBQSxzQkFFUW43RCxFQUFPaFEsS0FBS3dELE9BQU8sSUFBTXhELEtBQUsrdUUsbUJBQW1CLytELEtBQUssSUFBTWhRLEtBQUtndkUsU0FDckUsR0FBSWgvRCxHQUF3QixJQUFoQkEsRUFBSzFNLE9BQ2J0RCxLQUFLcXNDLFFBQVVyOEIsRUFDZmhRLEtBQUt1dUUsY0FBZ0JuWixHQUFNNU8sb0JBQW9CeDJDLEVBQUssUUFFbkQsQ0FDRCxJQUFJbS9ELEVBQWdCLGlDQUEwQm52RSxLQUFLZ3ZFLFFBQU8sZ1JBSUpodkUsS0FBS2l2RSxhQUFZLG1UQUlwQ2p2RSxLQUFLcXFFLFlBQVcsbVpBV25EcnFFLEtBQUtxc0MsUUFBVXJzQyxLQUFLd0QsT0FBTzJyRSxHQUMzQm52RSxLQUFLd0QsT0FBTyxJQUFNeEQsS0FBSyt1RSxtQkFBbUIzL0MsT0FBT3B2QixLQUFLcXNDLFNBRXREcnNDLEtBQUt1dUUsY0FBZ0IsSUFBSW5aLEdBQU1wMUQsS0FBS3FzQyxRQUFRLElBRTVDcnNDLEtBQUtxc0MsUUFBUSxHQUFHNzhCLGlCQUFpQixrQkFBa0IsU0FBQ3ZELEdBQ2hELEVBQUtpaUUsS0FBS2tCLFlBQ1YsRUFBS2xCLEtBQUttQixpQkFBaUI5QyxZQUFjLEVBQ3pDLEVBQUsyQixLQUFLb0IsY0FBYyxRQUtwQyxZQUFBN3FELEtBQUEsV0FDSXprQixLQUFLdXVFLGNBQWM5cEQsUUFHdkIsWUFBQXlxRCxXQUFBLFdBSUksSUFBSWhHLEVBQWEsSUFBSXFHLEdBQXNCLGFBQ3ZDLENBQ0l2RixTQUFVLEdBQ1Z3RixjQUFVMXBFLElBRWQsRUFDQTlGLEtBQUtvRixRQUFRcXFFLE9BR2JDLEVBQUssSUFBSUMsR0FBbUIzdkUsS0FBS2dvRSxPQUFRaG9FLEtBQUtxcUUsWUFBYXJxRSxLQUFLb0YsUUFBUXdxRSxTQUFVMUcsR0FBWSxHQUU5RmdGLEVBQU8sSUFBSTJCLEdBQVlILEdBaUIzQixPQWhCQXhCLEVBQUs0QixvQkFNTDVCLEVBQUs5cEIsY0FBY3BrRCxLQUFLc2xFLGNBQWNsQyxXQUN0QzhLLEVBQUs5cEIsY0FBY3BrRCxLQUFLc2xFLGNBQWMzQixlQUN0Q3VLLEVBQUs5cEIsY0FBY3BrRCxLQUFLc2xFLGNBQWMxQixpQkFDdENzSyxFQUFLOXBCLGNBQWNwa0QsS0FBS3NsRSxjQUFjL0IsZ0JBQ3RDMkssRUFBSzlwQixjQUFjcGtELEtBQUtzbEUsY0FBY3BCLGVBRXRDZ0ssRUFBSy9DLFNBR0wrQyxFQUFLNkIsWUFBWTNxQyxTQUFVLEVBQ3BCOG9DLEdBRWYsRUEzR0EsQ0FBK0N0RiwrZENNL0MsZUFXSSxXQUFZeGpFLEdBQVosTUFJSSxjQUFPLFlBVlgsRUFBQTRxRSxNQUEyQixHQVd2QixFQUFLNXFFLFFBQVVBLEVBQ2YsRUFBSytsRSxXQTZOYixPQTlPb0MsUUFvQmhDLHNCQUFJLDBCQUFXLEtBQWYsV0FDSSxPQUFPbnJFLEtBQUtxc0MsUUFBUTVxQixLQUFLLHlCQUc3QixTQUFnQnhHLEdBQ1pqYixLQUFLcXNDLFFBQVE1cUIsS0FBSyxtQkFBb0J4RyxvQ0FPMUMsWUFBQWcxRCxRQUFBLFNBQVFDLEdBQ0psd0UsS0FBS3FzQyxRQUFRamQsT0FBTzhnRCxFQUFLN2pDLFNBQ3pCcnNDLEtBQUtnd0UsTUFBTXB2RSxLQUFLc3ZFLElBTXBCLFlBQUFDLFNBQUEsU0FBU0gsR0FBVCxXQUNJQSxFQUFNaGpDLFNBQVEsU0FBQ2tqQyxHQUFTLFNBQUtELFFBQVFDLE9BR3pDLFlBQUEvRSxPQUFBLFdBQ1NuckUsS0FBS3FzQyxVQUNOcnNDLEtBQUtxc0MsUUFBVXJzQyxLQUFLd0QsT0FBTyxlQU9uQyxZQUFBZ0MsTUFBQSxXQUtJLElBQUk0cUUsRUFBYyxZQUFNNXFFLE1BQUssV0FFekI2cUUsRUFBV3J3RSxLQUFLOG9FLFFBQVE5b0UsS0FBS29GLFNBQ2pDaXJFLEVBQVNDLGVBQWdCLEVBQ3pCLElBQUlDLEVBQVcsSUFBSUMsRUFBZUgsR0FTbEMsT0FSQUUsRUFBU2xrQyxRQUFVK2pDLEVBQVkvakMsUUFDL0Jra0MsRUFBUzUyRCxTQUFXeTJELEVBQVl6MkQsU0FDaEM0MkQsRUFBU1AsTUFBUWh3RSxLQUFLZ3dFLE1BQU01ckUsS0FBSSxTQUFDNlcsR0FDN0IsSUFBSXcxRCxFQUFZeDFELEVBQUV6VixRQUVsQixPQURBK3FFLEVBQVNsa0MsUUFBUWpkLE9BQU9xaEQsRUFBVXBrQyxTQUMzQm9rQyxLQUdKRixHQUdYLFlBQUFHLFNBQUEsV0FDSTF3RSxLQUFLODhCLFlBQVksZ0JBQWdCTCxTQUFTLGlCQUc5QyxZQUFBNHhDLFVBQUEsV0FJSSxJQUFJc0MsRUFBUyxHQWdCYixPQWJBM3dFLEtBQUtnd0UsTUFBTWhqQyxTQUFRLFNBQUM1cUMsRUFBSzBSLEdBQ3JCLElBQUk2RixFQUFXdlgsRUFBSXVYLFNBQ2ZBLEVBQVNyVyxPQUFTLEdBQ2xCcVcsRUFBU3F6QixTQUFRLFNBQUMveEIsRUFBRzlZLEdBQ2I4WSxhQUFhNnpELEdBQ2I2QixFQUFPL3ZFLEtBQUtxYSxFQUFFcXpELFlBQ1RyekQsYUFBYXl3RCxJQUNsQmlGLEVBQU8vdkUsS0FBS3FhLFNBTXJCMDFELEdBU1gsWUFBQUMsZUFBQSxTQUFlOUssRUFBaUNvSSxHQUFoRCxXQUNRMkMsRUFBSzd3RSxLQUFLb0YsUUFBUW1pRSxlQUNsQnVKLEVBQU05d0UsS0FBS29GLFFBQVE0aUUsT0FFbkI1M0QsRUFBUSxLQUdaLEdBQXVCLFdBQW5CMDFELEVBQU0wRCxTQUNOcDVELEVBQVEsSUFBSXU5RCxHQUFrQmtELEdBQzlCL0ssRUFBTTZELFdBQ0QzOEIsU0FBUSxTQUFDalQsR0FBUSxPQUFBM3BCLEVBQU1nZixPQUFPLElBQUkyaEQsR0FBd0JoM0MsT0FDL0QzcEIsRUFBTXFzQixTQUFTLG1DQUVkLEdBQXVCLGFBQW5CcXBDLEVBQU0wRCxTQUNYcDVELEVBQVEsSUFBSXE3RCxHQUFvQm9GLFFBRS9CLEdBQXVCLGFBQW5CL0ssRUFBTTBELFNBQXlCLENBRXBDLElBQUl3SCxFQUFVLElBQUlDLEdBQTBCLENBQ3hDakksU0FBVWxELEVBQU0yRCxTQUNoQlksWUFBYXJxRSxLQUFLb0YsUUFBUWlsRSxZQUMxQm9GLE1BQU8zSixFQUFNZ0UsZUFDYjhGLFNBQVU5SixFQUFNaUUsZUFHcEJtRSxFQUFLajhELFVBQVVvSSxJQUFJMjJELEdBRW5CNWdFLEVBQVEsSUFBSTArRCxHQUFvQixDQUM1QjFKLGVBQWdCeUwsRUFDaEJwSCxTQUFVM0QsRUFBTTJELFNBQ2hCeUgsTUFBTyxPQUFTSixFQUFNLGlCQUFtQmhMLEVBQU0yRCxTQUMvQytFLFNBQVUsK0JBQ1ZDLFVBQVdxQyxFQUFNLGlCQUFtQmhMLEVBQU0yRCxTQUMxQzZCLFVBQVcsT0FDWG9ELFlBQWE1SSxFQUFNeUQsS0FDbkJxRixTQUFVLFNBQUNsQyxFQUE2QnpnRSxHQUNwQytrRSxFQUFROUMsS0FBSzlwQixjQUFjLEVBQUtraEIsY0FBY1osdUJBQzlDc00sRUFBUTlDLEtBQUt0cUIsV0FBVyxFQUFLMGhCLGNBQWNaLHVCQUF1QixTQUFDM2xDLEVBQUdrbUMsR0FBTyxPQUFBeUgsRUFBT3VCLGVBQWUrQyxFQUFTL0wsTUFDNUcrTCxFQUFRdnNELGVBTWhCclUsRUFBUSxJQUFJczlELEdBQXFCbUQsRUFBSS9LLEVBQU0wRCxXQUNyQy9zQyxTQUFTLGdDQUdJLGFBQW5CcXBDLEVBQU0wRCxVQUNOcDVELEVBQU00YSxNQUFNLENBQ1IsQ0FBRXJkLElBQUssZ0JBQWlCeEcsTUFBTzIrRCxFQUFNMkQsVUFDckMsQ0FBRTk3RCxJQUFLLFFBQVN4RyxNQUFPMitELEVBQU15RCxNQUM3QixDQUFFNTdELElBQUssS0FBTXhHLE1BQU8ycEUsRUFBTSxpQkFBbUJoTCxFQUFNMkQsVUFDbkQsQ0FBRTk3RCxJQUFLLGNBQWV4RyxNQUFPMitELEVBQU15RCxTQUd2QixJQUFoQnpELEVBQU00RCxRQUNOdDVELEVBQU0rZ0UsVUFBVyxFQUNqQi9nRSxFQUFNNjRELE9BQVEsSUFHYyxJQUE1QmlGLEVBQUs5b0UsUUFBUW1sRSxhQUNibjZELEVBQU0rZ0UsVUFBVyxFQUNqQi9nRSxFQUFNZzRELE9BQU8sU0FBVSxXQUN2Qmg0RCxFQUFNZzRELE9BQU8sY0FBZSxTQUdoQyxJQUFJMWlELEVBQUssSUFBSTJsRCxHQUFnQixJQUFJSCxJQUVqQyxPQURBeGxELEVBQUcwSixPQUFPaGYsR0FDSHNWLEdBT1gsWUFBQTByRCxnQkFBQSxTQUFnQnRMLEdBQ1osSUFBSTMvQyxFQUFLLElBQUlrbEQsR0FBZ0J2RixHQUFPLEdBSXBDLE9BSEEzL0MsRUFBR3NXLFNBQVMsV0FBV0EsU0FBUyxVQUNoQ3RXLEVBQUdxaUQsUUFBUTFDLEVBQU15RCxNQUNqQnBqRCxFQUFHMUUsS0FBSyxtQkFBb0Jxa0QsRUFBTTJELFVBQzNCdGpELEdBR1gsWUFBQWtyRCxpQkFBQSxXQUVJLE9BRGFyeEUsS0FBS3F1RSxZQUNKditELFFBQU8sU0FBQ00sR0FBVSxPQUFrQixJQUFsQkEsRUFBTWcxQixZQU8xQyxZQUFBa3NDLGNBQUEsV0FDSSxJQUFJQyxFQUFZdnhFLEtBQUtxdUUsWUFDakJtRCxFQUFTLEdBS2IsT0FKQUQsRUFBVXZrQyxTQUFRLFNBQUN5a0MsRUFBVXR2RSxHQUN6QixJQUFJdXZFLEVBQWVELEVBQVNFLFVBQzVCSCxFQUFPRSxHQUFnQkQsS0FFcEJELEdBR1gsWUFBQUksWUFBQSxXQUNJLElBQUlDLEVBQVc3eEUsS0FBS3NvRSxRQUFRLGlCQUM1QixPQUFPdjFDLFNBQVM4K0MsSUFPcEIsWUFBQUMsV0FBQSxXQUNJLElBQUlQLEVBQVl2eEUsS0FBS3F1RSxZQUNqQndELEVBQVc3eEUsS0FBSzR4RSxjQUNoQkosRUFBUyxHQUNUTyxFQUFTL3hFLEtBQUtneUUsWUFTbEIsT0FSQVIsRUFBb0IsWUFBSU8sRUFFeEJSLEVBQVV2a0MsU0FBUSxTQUFDeWtDLEVBQVV0dkUsR0FDekIsSUFBSXV2RSxFQUFlRCxFQUFTRSxVQUM1QkgsRUFBT0UsR0FBZ0JELEVBQVNydkUsT0FFcENvdkUsRUFBd0IsZ0JBQUlLLEVBRXJCTCxHQUdYLFlBQUFTLFdBQUEsV0FDSSxNQUF3QyxTQUFqQ2p5RSxLQUFLc29FLFFBQVEsaUJBRTVCLEVBOU9BLENBQW9DTSwrZENUcEMsZUFNSSxtQkFDSSxjQUFPLFlBSFgsRUFBQXVFLEtBQXlCLEtBbUM3QixPQXZDOEMsUUFjMUMsWUFBQStFLE9BQUEsU0FBT0MsR0FDSG55RSxLQUFLcXNDLFFBQVFqZCxPQUFPK2lELEVBQUk5bEMsU0FDeEIsSUFBSWx5QixFQUFRbmEsS0FBS295RSxrQkFDakJELEVBQUkxd0QsS0FBSyxnQkFBaUJ0SCxHQUUxQixJQUFJazRELEdBQW1DLElBQTNCRixFQUFJL3NFLFFBQVFrdEUsV0FBc0IsT0FBUyxPQUd2RCxPQUZBSCxFQUFJMXdELEtBQUssS0FBTSxVQUFHMHdELEVBQUkvc0UsUUFBUTRpRSxPQUFNLFlBQUlxSyxFQUFLLFlBQUlsNEQsSUFDakRuYSxLQUFLbXRFLEtBQUt2c0UsS0FBS3V4RSxHQUNSbnlFLE1BR1gsWUFBQXV5RSxlQUFBLFdBQ0ksT0FBT3Z5RSxLQUFLbXRFLEtBQUtyOUQsUUFBTyxTQUFDcWlFLEdBQVEsT0FBZ0IsSUFBaEJBLEVBQUkvc0MsWUFHekMsWUFBQWd0QyxnQkFBQSxXQUNJLE9BQU9weUUsS0FBS210RSxLQUFLN3BFLE9BQVMsR0FNOUIsWUFBQWt2RSxpQkFBQSxXQUNJLE9BQU94eUUsS0FBS210RSxLQUFLbjlELE1BQUssU0FBQ21pRSxHQUFRLE9BQTJCLElBQTNCQSxFQUFJL3NFLFFBQVFrdEUsZUFFbkQsRUF2Q0EsQ0FBOEMxSiwrZENEOUMsZUFHSSxtQkFDSSxjQUFPLFlBQ1AsRUFBS3VDLFdBTWIsT0FYdUMsUUFRbkMsWUFBQUEsT0FBQSxXQUNJbnJFLEtBQUtxc0MsUUFBVXJzQyxLQUFLd0QsT0FBTyx3Q0FFbkMsRUFYQSxDQUF1Q2l2RSwrZENDdkMsZUFFSSxtQkFDSSxjQUFPLFlBQ1AsRUFBS3RILFdBbUdiLE9BdkdxQyxRQU9qQyxZQUFBQSxPQUFBLFdBQ0luckUsS0FBS3FzQyxRQUFVcnNDLEtBQUt3RCxPQUFPLG9CQU0vQixZQUFBa3ZFLFlBQUEsU0FBWVAsR0FDUixPQUFPbnlFLEtBQUttdEUsS0FBS3I5RCxRQUFPLFNBQUNtTCxFQUFHOVksR0FDeEIsR0FBSThZLElBQU1rM0QsRUFDTixPQUFPbDNELE1BT25CLFlBQUF5MUQsU0FBQSxTQUFTeUIsR0FDTEEsRUFBSXIxQyxZQUFZLGdCQUFnQkwsU0FBUyxnQkFDMUJ6OEIsS0FBSzB5RSxZQUFZUCxHQUN2Qm5sQyxTQUFRLFNBQUMveEIsRUFBRzlZLEdBQU0sT0FBQThZLEVBQUU2aEIsWUFBWSxvQkFLN0MsWUFBQTYxQyxlQUFBLFdBQ0ksSUFBSWhnRSxFQUFTM1MsS0FBS210RSxLQUFLcjlELFFBQU8sU0FBVW1MLEdBQ3BDLElBQWdDLElBQTVCQSxFQUFFN1YsUUFBUWtyRSxjQUNWLE9BQU9yMUQsS0FHZixHQUFJdEksR0FBVUEsRUFBT3JQLE9BQVMsRUFDMUIsT0FBT3FQLEVBQU8sSUFHdEIsWUFBQWlnRSxhQUFBLFdBRUksT0FEVzV5RSxLQUFLbXRFLEtBQUtyOUQsUUFBTyxTQUFDbUwsRUFBRzlZLEdBQU0sT0FBQThZLEVBQUVnM0QsaUJBSTVDLFlBQUFZLGdCQUFBLFdBQ0ksSUFBSUMsRUFBWTl5RSxLQUFLNHlFLGVBRXJCLEdBQXlCLElBQXJCRSxFQUFVeHZFLE9BQ1YsTUFBTyxHQUVYLElBQUlra0UsRUFBVSxHQUtkLE9BSkFzTCxFQUFVOWxDLFNBQVEsU0FBQ21sQyxFQUFLaHdFLEdBQ3BCcWxFLEVBQVE1bUUsS0FBS3V4RSxFQUFJTCxpQkFHZHRLLEdBR1gsWUFBQTJHLGVBQUEsV0FDSSxPQUFPbnVFLEtBQUttdEUsS0FBS245RCxNQUFLLFNBQUNpTCxFQUFHOVksR0FBTSxPQUFBOFksRUFBRWtpQixTQUFTLG9CQUkvQyxZQUFBNDFDLFlBQUEsV0FDSSxJQUFJWixFQUFNbnlFLEtBQUttdUUsaUJBQ2YsR0FBS2dFLEVBQUwsQ0FHQSxJQUFJcjVELEVBQVc5WSxLQUFLMHlFLFlBQVlQLEdBQzVCYSxFQUFjbDZELEVBQVNBLEVBQVN4VixPQUFTLEdBQzdDNnVFLEVBQUlyMUMsWUFBWSxnQkFDaEJxMUMsRUFBSTF3RCxLQUFLLGVBQWdCLFFBQ3pCMHdELEVBQUkxdUQsSUFBTSxDQUFFLFFBQVcsUUFFdkIsSUFBSXN1RCxFQUFTSSxFQUFJSCxZQUViRyxFQUFJSCxZQURPLFVBQVhELEVBQ2tCLGdCQUdBLFVBR3RCL3hFLEtBQUs0bkUsZ0JBQWdCNW5FLEtBQUtzbEUsY0FBY3JCLGdCQUFpQixDQUFFbUIsZUFBZ0IrTSxFQUFJL3NFLFFBQVFtaUUsZUFBZ0JyQyxVQUFXLENBQUU5OEMsTUFBTytwRCxLQUUzSG55RSxLQUFLMHdFLFNBQVNzQyxLQU9sQixZQUFBQyxVQUFBLFNBQVVkLEdBR05BLEVBQUk5bEMsUUFBUTN2QixTQUVaLElBQUl2QyxFQUFRbmEsS0FBS210RSxLQUFLdHNFLFFBQVFzeEUsR0FDMUJoNEQsR0FBUyxHQUNUbmEsS0FBS210RSxLQUFLam9FLE9BQU9pVixFQUFPLElBRXBDLEVBdkdBLENBQXFDczRELGtxQkM0QnJDLGVBYUksV0FBWXJ0RSxHQUFaLE1BQ0ksY0FBTyxZQUVQLEVBQUtBLFFBQVVBLEVBQ2YsRUFBSzFDLEtBQU8sSUFBSXd3RSxHQUNoQixFQUFLM3VELEtBQU8sSUFBSTR1RCxHQUNoQixFQUFLbGhFLFVBQVksSUFBSW1oRSxHQUNyQixFQUFLQyxVQUFZLElBQUlDLEdBQ2pCLElBQUlDLEdBQTZCLEVBQUtudUUsUUFBUThqRSxXQUFXN2pFLEtBQ3JELElBQUltdUUsSUFDSixTQUFDckosR0FBUyxTQUFLc0osa0JBQWtCdEosT0FFekMsRUFBS3VKLGFBQWUsSUFBSUMsR0FDeEIsRUFBS3ZILFdBQWEsSUFBSXdILEdBQXNCLEVBQUtGLGFBQWMsRUFBS3R1RSxRQUFROGpFLFdBQVc3akUsTUFDdkYsRUFBSyttRSxXQUFXM0IsZUFBaUIsRUFBS3JsRSxRQUFRcWxFLGVBRTlDLEVBQUs0RSxpQkFBbUIsS0FDeEIsRUFBS1UsWUFBYyxLQUNuQixFQUFLOEQsY0FBZSxJQTB2QzVCLE9BenhDaUMsR0FBQWhFLEVBQUEsR0FrQzdCLFlBQUFpRSxnQkFBQSxXQUNJOU0sR0FBNEJDLElBQUlqbkUsT0FHcEMsc0JBQUksNkJBQWMsS0FBbEIsV0FDSSxPQUFPQSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLHNDQUduQyxzQkFBSSx5QkFBVSxLQUFkLFdBQ0ksT0FBT3JGLEtBQUtvRixRQUFRbWxFLDRDQUd4QixzQkFBSSxzQkFBTyxLQUFYLFdBQ0ksT0FBT3ZxRSxLQUFLdWtCLEtBQUtzdUQsbURBTXJCLFlBQUFZLGtCQUFBLFNBQWtCdEosR0FFZG5xRSxLQUFLc3ZFLGNBQWNuRixJQUd2QixZQUFBNEosVUFBQSxXQUNJL3pFLEtBQUtxc0MsUUFBUWpkLE9BQU9wdkIsS0FBSzBDLEtBQUsycEMsVUFHbEMsWUFBQTJuQyxRQUFBLFdBQ0loMEUsS0FBS3FzQyxRQUFRamQsT0FBT3B2QixLQUFLdWtCLEtBQUs4bkIsVUFHbEMsWUFBQTgrQixPQUFBLHNCQUVJbnJFLEtBQUtxc0MsUUFBVXJzQyxLQUFLd0QsT0FBTyx3R0FFM0J4RCxLQUFLNk0sR0FBSzdNLEtBQUtvRixRQUFRNGlFLE9BQ3ZCaG9FLEtBQUt5aEIsS0FBSyxrQkFBbUJ6aEIsS0FBS29GLFFBQVE4akUsV0FBVzdqRSxNQUVyRCxJQUFJcThCLEVBQVcxaEMsS0FBSytuRSxnQkFBZ0IvbkUsS0FBS29GLFFBQVE0aUUsU0FBVyxHQUM1RGhvRSxLQUFLeWpCLElBQU0sQ0FBRSxNQUFTLFdBRXRCLElBQUl3d0QsRUFBZ0IsSUFBSXpELEdBQWUsQ0FDbkNqSixlQUFnQnZuRSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBQ3hDMmlFLE9BQVFob0UsS0FBS29GLFFBQVE0aUUsT0FDckJzSyxZQUFZLElBRWhCMkIsRUFBY3gzQyxTQUFTLGFBQWFBLFNBQVMsYUFFN0MsSUFBSXkzQyxFQUFjLElBQUkxRCxHQUFlLENBQ2pDRixlQUFlLEVBQ2YvSSxlQUFnQnZuRSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBQ3hDMmlFLE9BQVFob0UsS0FBS29GLFFBQVE0aUUsT0FDckJxQyxZQUFhcnFFLEtBQUtvRixRQUFRaWxFLGNBRTlCNkosRUFBWXozQyxTQUFTLGFBRXJCeTNDLEVBQVl6d0QsSUFBTSxDQUFFLFFBQVcsUUFFL0IsSUFBSTB3RCxFQUFjbjBFLEtBQUtvMEUsZ0JBQWdCMXlDLEdBS25DMnlDLEVBQUssSUFBSWhKLEdBQWdCLElBQUlILElBQTRCLEdBRXpEb0osRUFBUyxJQUFJQyxHQUNiQyxFQUFLLElBQUluSixHQUFnQixJQUFJSCxJQUNqQ3NKLEVBQUdwbEQsT0FBT2tsRCxHQUVWTCxFQUFjaEUsUUFBUW9FLEdBQ3RCSCxFQUFZakUsUUFBUXVFLEdBR3BCTCxFQUFZbm5DLFNBQVEsU0FBQ3luQyxHQU1qQixJQUFJQyxFQUFjaHpDLEVBQVMreUMsRUFBR3pMLFdBQWEsR0FFdkM3aUQsRUFBSzh0RCxFQUFjN0MsZ0JBQWdCcUQsR0FDbkMvdUQsRUFBS3d1RCxFQUFZdEQsZUFBZTZELEVBQUksR0FLeEMsRUFBS0UsV0FBV3h1RCxHQUNoQixFQUFLeXVELGlCQUFpQnp1RCxFQUFJdXVELEdBQzFCLEVBQUtFLGlCQUFpQmx2RCxFQUFJZ3ZELEdBQzFCVCxFQUFjaEUsUUFBUTlwRCxHQUN0Qit0RCxFQUFZakUsUUFBUXZxRCxNQUd4QjFsQixLQUFLMEMsS0FBS3d2RSxPQUFPK0IsR0FDakJqMEUsS0FBS3VrQixLQUFLMnRELE9BQU9nQyxHQUtqQmwwRSxLQUFLNjBFLGFBS0w3MEUsS0FBSyt6RSxZQUNML3pFLEtBQUtnMEUsVUFLTGgwRSxLQUFLd0QsT0FBTyxJQUFNeEQsS0FBS29GLFFBQVFpbEUsYUFBYWo3QyxPQUFPcHZCLEtBQUsrdkUsWUFBWTFqQyxTQUtwRXJzQyxLQUFLd0QsT0FBTyxJQUFNeEQsS0FBS29GLFFBQVFpbEUsYUFBYWo3QyxPQUFPcHZCLEtBQUtxc0MsU0FLeERyc0MsS0FBSzgwRSxvQkFLTCxJQUFJdHpELEVBQU94aEIsS0FBS29GLFFBQVE4akUsV0FBVzFuRCxLQUFLd29ELFNBQ3BDK0ssRUFBUS8wRSxLQUFLb0YsUUFBUThqRSxXQUFXMW5ELEtBQUtndUQsU0FHckN3RixFQUFxQyxDQUNyQzVQLGVBQWdCcGxFLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FBTTYvRCxVQUFXLENBQ3JEL2pELEtBQU1LLEVBQ055ekQsU0FBVUYsSUFHbEIvMEUsS0FBSzRuRSxnQkFBZ0I1bkUsS0FBS3NsRSxjQUFjeEIscUJBQXNCa1IsR0FLOURoMUUsS0FBSzRuRSxnQkFBZ0I1bkUsS0FBS3NsRSxjQUFjakIsbUJBQ3BDLENBQ0llLGVBQWdCcGxFLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FDeEM2L0QsVUFBVyxNQUdPLElBQXRCbGxFLEtBQUs2ekUsY0FDTDd6RSxLQUFLOHpFLG1CQUliLFlBQUFnQixrQkFBQSx1QkFDOEMsSUFBdEM5MEUsS0FBS29GLFFBQVFvbEUsdUJBQ2J4cUUsS0FBS3F2RSxpQkFBbUIsSUFBSTZGLEdBQTBCLENBQUUvSSxZQUFhbnNFLEtBQUtxc0MsUUFBUysvQixXQUFZcHNFLEtBQUtvc0UsYUFDcEdwc0UsS0FBS3F2RSxpQkFBaUJ0RSxpQkFBbUIsU0FBQ1osR0FBUyxTQUFLc0osa0JBQWtCdEosSUFDMUVucUUsS0FBS3F2RSxpQkFBaUJsVCxXQUk5QixZQUFBMFksV0FBQSxzQkFDSTcwRSxLQUFLK3ZFLFlBQWMsSUFBSW9GLEdBQ3ZCbjFFLEtBQUsrdkUsWUFBWXhJLGVBQWlCdm5FLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FDMURyRixLQUFLK3ZFLFlBQVl4QyxvQkFBbUIsU0FBQ3RoRSxHQUFNLFNBQUttcEUsaUJBQzNDL0gsaUJBQWdCLFNBQUNwaEUsR0FBTSxTQUFLc1ksS0FBS3d1RCxpQkFDakN2Rix5QkFNVCxZQUFBbUgsV0FBQSxTQUFXeHVELEdBSVAsSUFBSWtpRCxFQUFRcm9FLEtBQ1ptbUIsRUFBR2ttQixRQUFRaGxCLEdBQUcsU0FBUyxTQUFVcGIsR0FFN0IsSUFBSW9wRSxHQUFNLEVBQ05sdkQsRUFBR2dYLFNBQVMsZ0JBQ1poWCxFQUFHMlcsWUFBWSxlQUFlTCxTQUFTLGdCQUN2QzQ0QyxHQUFNLEdBR05sdkQsRUFBRzJXLFlBQVksZ0JBQWdCTCxTQUFTLGVBTTVDdFcsRUFBR2ttQixRQUFRdnpCLFNBQVMsTUFBTWdrQixZQUFZLGVBQWVBLFlBQVksZ0JBS2pFLElBS0lyVixFQUErQixDQUFFeTlDLFVBQVcsQ0FBRTk4QyxNQUFPbmMsRUFBR3c5RCxTQUxqRHRqRCxFQUFHbWlELFFBQVEsb0JBS3NEZ04sSUFBS0QsR0FBT2pRLGVBQWdCaUQsRUFBTWpqRSxRQUFROGpFLFdBQVc3akUsTUFFakk4Z0IsRUFBR3loRCxnQkFBZ0J6aEQsRUFBR20vQyxjQUFjbkIscUJBQXNCMThDLE9BS2xFLFlBQUEybkQsVUFBQSxXQUNJcHZFLEtBQUtnUSxLQUFLLGFBQWEwTSxTQUd2QixJQUFJNjRELEVBQWN2MUUsS0FBS3VrQixLQUFLb3VELGlCQUM1QjN5RSxLQUFLdWtCLEtBQUs0b0QsS0FBTyxDQUFDb0ksSUFTdEIsWUFBQVgsaUJBQUEsU0FBaUJwdkQsRUFBc0JrYyxHQUUvQjFoQyxLQUFLMm9FLFdBQVdqbkMsTUFFSyxJQUFyQkEsRUFBUzBELFNBQ1Q1ZixFQUFJNm1CLFFBQVExbkIsT0FHWitjLEVBQVNoUixRQUNUbEwsRUFBSS9CLElBQU0sQ0FBRSxTQUFZLFdBQVksTUFBU2llLEVBQVNoUixVQVU5RCxZQUFBMGpELGdCQUFBLFNBQWdCMXlDLEdBRVosSUFBS0EsR0FBWTFoQyxLQUFLMm9FLFdBQVdqbkMsR0FBVyxPQUFPMWhDLEtBQUtvRixRQUFRa2xFLGNBQ2hFLElBQUlrTCxFQUFhLEdBT2pCLE9BTEF4MUUsS0FBS29GLFFBQVFrbEUsY0FBY3Q5QixTQUFRLFNBQUMveEIsRUFBRzlZLEdBQ25DLElBQUlvZixFQUFNbWdCLEVBQVN6bUIsRUFBRXd1RCxVQUNyQitMLEVBQVdqMEQsRUFBSXNRLFVBQVk1VyxLQUd4QnU2RCxHQVFYLFlBQUFDLGVBQUEsU0FBZWowRCxFQUFnQmd1RCxHQUEvQixXQUdJLEdBQUtodUQsS0FBUUEsRUFBS2xlLFFBQVUsR0FBNUIsQ0FFQSxJQUFJb3lFLEVBQVlsMEQsR0FDeUIsSUFBckN4aEIsS0FBS29GLFFBQVE4akUsV0FBV2UsV0FDeEJ5TCxFQUFZMTFFLEtBQUtvRixRQUFROGpFLFdBQVdrQixpQkFBaUJvRixFQUFTOUUsVUFBVzFxRSxLQUFLb0YsUUFBUThqRSxXQUFXMW5ELEtBQUt3b0QsU0FBVXdGLElBTXBILElBQUltRyxFQUEwQixLQUM5QkQsRUFBVTFvQyxTQUFRLFNBQUMveEIsRUFBRzlZLEdBQ2xCLElBQUlnd0UsRUFBTSxFQUFLeUQsVUFBVTM2RCxHQUFHLEdBQzVCazNELEVBQUlILFlBQWMsV0FDbEIyRCxFQUFVeEQsS0FNMkIsR0FBckNueUUsS0FBS29GLFFBQVFvbEUscUJBQ2J4cUUsS0FBSzYxRSxjQUFjckcsSUFFbkJ4dkUsS0FBS3F2RSxpQkFBaUI3QyxhQUFlZ0QsRUFDckN4dkUsS0FBS3F2RSxpQkFBaUJyRixTQUFXMEwsRUFDN0JDLElBRUEzMUUsS0FBS3F2RSxpQkFBaUJ4QyxZQUN0QjdzRSxLQUFLcXZFLGlCQUFpQnpDLFFBQVErSSxFQUFRdHBDLFFBQVEsUUFTMUQsWUFBQXdwQyxjQUFBLFNBQWNDLFFBQUEsSUFBQUEsSUFBQUEsRUFBQSxJQUFpRHRDLElBQzNEeHpFLEtBQUtxekUsVUFBVWp1RSxRQUFRMGxFLGVBQWlCZ0wsRUFDeEM5MUUsS0FBS3F6RSxVQUFVbEksU0FDZm5yRSxLQUFLd0QsT0FBTyxJQUFNeEQsS0FBS29GLFFBQVFpbEUsYUFBYWo3QyxPQUFPcHZCLEtBQUtxekUsVUFBVWhuQyxVQU90RSxZQUFBdXBDLFVBQUEsU0FBVUcsRUFBaUJDLEdBQTNCLFdBQ1FDLEVBQVlqMkUsS0FBS3VrQixLQUFLNnRELGtCQUN0QkQsRUFBTW55RSxLQUFLdWtCLEtBQUtvdUQsaUJBQWlCbnRFLFFBQ3JDMnNFLEVBQUkvc0UsUUFBUWtyRSxlQUFnQixFQUU1QjZCLEVBQUkxMUMsU0FBUyxZQUNiMDFDLEVBQUkxdUQsSUFBTSxDQUFFLFFBQVcsYUFFdkIsSUFBSTRrRCxFQUFRcm9FLEtBRUNteUUsRUFBSTlELFlBSVZyaEMsU0FBUSxTQUFVL3hCLEVBQUc5WSxHQUN4QixJQUFJaU8sRUFBUTZLLEVBRVJpN0QsRUFBUTlsRSxFQUFNdkQsR0FDbEJ1RCxFQUFNdkQsR0FBS3FwRSxFQUFRLElBQU1ELEVBRXpCLElBQUl2RSxFQUFldGhFLEVBQU11aEUsVUFHckJ3RSxFQUFVSixFQUFRckUsR0FFdEIsR0FBZ0MsU0FBNUJ0aEUsRUFBTWhMLFFBQVFrbUUsV0FBd0I2SyxFQUFTLENBQy9DLElBQUlDLEVBQU8sSUFBSTF0RSxLQUFLeXRFLEdBRXBCL2xFLEVBQU1oTyxJQUFNaW1FLEVBQU1nTyxvQkFBb0JELFFBRWpDaG1FLGFBQWlCcTdELEtBQ04sU0FBWjBLLEdBQWtDLFNBQVpBLElBQWtDLElBQVpBLEdBQ2hEL2xFLEVBQU1xUixLQUFLLFVBQVcsZ0JBRUwzYixJQUFacXdFLElBQ0wvbEUsRUFBTWhPLElBQU0rekUsSUFJUyxJQUFyQkgsSUFDQTVsRSxFQUFNeEUsVUFBVyxFQUNqQndFLEVBQU0rZ0UsVUFBVyxHQUdyQi9nRSxFQUFNaThCLFFBQVFobEIsR0FBRyxVQUFVLFNBQUNwYixHQUV4QmttRSxFQUFJMXdELEtBQUssZ0JBQWdCLEdBR1YsVUFERjB3RCxFQUFJSCxjQUViRyxFQUFJSCxZQUFjLFdBSXRCNWhFLEVBQU0wc0IsWUFBWSxjQUFjcmIsS0FBSyxRQUFTLElBRTlDLElBQUk2MEQsRUFBVTFhLEdBQVExVixZQUFZajZDLEVBQUV4RyxRQUNoQzZ3RSxHQUNBQSxFQUFRM3dCLFVBRVosSUFBSW93QixFQUFVNUQsRUFBSWIsZ0JBQ2RULEVBQUt4SSxFQUFNampFLFFBQVE4akUsV0FBVzdqRSxLQUU5Qmt4RSxFQUFzQyxDQUFFclIsVUFBVyxDQUFFOThDLE1BQU9uYyxFQUFHdXFFLEtBQU1uTyxHQUFTakQsZUFBZ0J5TCxHQUM5RjRGLEVBQXFDLENBQUV2UixVQUFXLENBQUU5OEMsTUFBT25jLEVBQUd5cUUsSUFBS1gsR0FBVzNRLGVBQWdCeUwsR0FDOUY4RixFQUF3QyxDQUFFelIsVUFBVyxDQUFFOThDLE1BQU9uYyxFQUFHeXFFLElBQUtYLEVBQVNhLE1BQU94bUUsR0FBU2cxRCxlQUFnQnlMLEdBR25Ic0IsRUFBSXZLLGdCQUFnQlMsRUFBTS9DLGNBQWNyQixnQkFBaUJzUyxHQUN6RHBFLEVBQUl2SyxnQkFBZ0JTLEVBQU0vQyxjQUFjYixpQkFBa0JrUyxHQUMxRHhFLEVBQUl2SyxnQkFBZ0JTLEVBQU0vQyxjQUFjZCxlQUFnQmlTLE1BSTVEcm1FLEVBQU1pOEIsUUFBUWhsQixHQUFHLFNBQVMsU0FBVXBiLEdBQ2hDbzhELEVBQU05akQsS0FBS21zRCxTQUFTeUIsU0FJNUJBLEVBQUk5bEMsUUFBUWhsQixHQUFHLFNBQVMsU0FBVXBiLEdBQzlCbzhELEVBQU05akQsS0FBS21zRCxTQUFTeUIsTUFHeEJueUUsS0FBS3VrQixLQUFLMnRELE9BQU9DLEdBRWpCLElBQUkwRSxFQUFnQjFFLEVBQUlkLG1CQVF4QixPQU5Jd0YsRUFBY3Z6RSxPQUFTLEdBQ1B1ekUsRUFBY0EsRUFBY3Z6RSxPQUFTLEdBRTNDK29DLFFBQVFobEIsR0FBRyxXQUFXLFNBQUNwYixHQUFNLFNBQUs2cUUsZUFBZTNFLEVBQUtsbUUsTUFHN0RrbUUsR0FJWCxZQUFBa0Usb0JBQUEsU0FBb0JELEdBRWhCLElBQUlXLEVBQU1YLEVBQUtZLFVBQ1hDLEVBQVFiLEVBQUtjLFdBQWEsRUFNOUIsT0FMV2QsRUFBS2UsY0FLRixLQUhFRixFQUFRLEdBQUssSUFBTSxJQUFNQSxFQUdWLEtBRmpCRixFQUFNLEdBQUssSUFBTSxJQUFNQSxHQUt6QyxZQUFBSyxvQkFBQSxTQUFvQmhCLEdBQ2hCLElBQUlpQixFQUFPakIsRUFBS2tCLFdBQ1ozcEMsRUFBTXlvQyxFQUFLbUIsYUFLZixPQUhlRixFQUFPLEdBQUssSUFBTSxJQUFNQSxFQUd0QixLQUZIMXBDLEVBQU0sR0FBSyxJQUFNLElBQU1BLEdBV3pDLFlBQUFtcEMsZUFBQSxTQUFlM0UsRUFBcUJsbUUsR0FNaEMsR0FBZ0IsSUFBWkEsRUFBRWdoQixRQUE4QixJQUFmaGhCLEVBQUVnZ0IsU0FBdkIsQ0FFQSxJQUFJdXJELEVBQWN4M0UsS0FBS3VrQixLQUFLZ3VELGlCQUN4QmlGLEVBQVlsMEUsUUFBVSxHQUNQazBFLEVBQVlBLEVBQVlsMEUsT0FBUyxHQUFHc3VFLGdCQUNyQ08sRUFBSVAsZUFJUDV4RSxLQUFLbzFFLGdCQUl4QixZQUFBQSxZQUFBLFdBRUksSUFBSXFDLEVBQVd6M0UsS0FBSzQxRSxVQUFVNTFFLEtBQUswM0Usc0JBQXNCLEdBRXJEL0csRUFBUzhHLEVBQVNwRyxtQkFDbEJWLEVBQU9ydEUsT0FBUyxHQUNoQnF0RSxFQUFPLEdBQUd6akQsUUFHZHVxRCxFQUFTekYsWUFBYyxRQUN2QnlGLEVBQVNoMkQsS0FBSyxlQUFnQixRQUU5QixJQUFJODBELEVBQXNDLENBQUVyUixVQUFXLENBQUVzUixLQUFNeDJFLEtBQU1vb0IsTUFBT3F2RCxHQUFZclMsZUFBZ0JwbEUsS0FBS29GLFFBQVE4akUsV0FBVzdqRSxNQU1oSSxPQUxBckYsS0FBSzRuRSxnQkFBZ0I1bkUsS0FBS3NsRSxjQUFjckIsZ0JBQWlCc1MsR0FFekR2MkUsS0FBS3F2RSxpQkFBaUJ4QyxZQUN0QjdzRSxLQUFLcXZFLGlCQUFpQnpDLFFBQVE2SyxFQUFTcHJDLFFBQVEsSUFFeENvckMsR0FHWCxZQUFBQyxtQkFBQSxXQUNJLElBQUlsRyxFQUFTLEdBR2IsT0FGQXh4RSxLQUFLb0YsUUFBUWtsRSxjQUFjdDlCLFNBQVEsU0FBQy94QixFQUFHOVksR0FBUXF2RSxFQUFPdjJELEVBQUV3dUQsZUFBWTNqRSxLQUU3RDByRSxHQUdYLFlBQUFtRyxhQUFBLFNBQWFuUyxFQUFvQm9TLEdBRXhCcFMsR0FBY0EsRUFBVU4sWUFHN0JsbEUsS0FBSzYzRSxlQUNMNzNFLEtBQUtvdkUsWUFDTHB2RSxLQUFLcXpFLFVBQVVuSCxTQUVHLElBQWQwTCxJQUlKNTNFLEtBQUtzdkUsY0FBYyxJQUV1QixJQUF0Q3R2RSxLQUFLb0YsUUFBUW9sRSx1QkFDYnhxRSxLQUFLcXZFLGlCQUFpQjlDLFlBQWMsTUFPNUMsWUFBQStDLGNBQUEsU0FBYzVFLEdBRVYsSUFBeUMsSUFBckMxcUUsS0FBS29GLFFBQVE4akUsV0FBV2UsU0FBbUIsQ0FDM0MsSUFBSWxwQyxFQUFNL2dDLEtBQUtvRixRQUFROGpFLFdBQVdub0MsSUFBSTJwQyxHQUN0QyxJQUFLM3BDLEVBQUssT0FFVixJQUFJMzdCLEVBQVUsSUFBSTB5RSxHQUE2Qi8yQyxFQUFLLE9BRXBEL2dDLEtBQUtvc0UsV0FBV3pvRSxJQUFJeUIsT0FFbkIsQ0FDRCxJQUFJb2MsRUFBT3hoQixLQUFLb0YsUUFBUThqRSxXQUFXMW5ELEtBQUt3b0QsU0FDcEMrSyxFQUFRLzBFLEtBQUtvRixRQUFROGpFLFdBQVcxbkQsS0FBS2d1RCxTQUdyQ3VJLEVBQXVDLENBQ3ZDM1MsZUFBZ0JwbEUsS0FBS29GLFFBQVE4akUsV0FBVzdqRSxLQUN4QzYvRCxVQUFXLENBQ1AvakQsS0FBTUssRUFDTnl6RCxTQUFVLElBQUl6QixHQUEwQjlJLEVBQVdxSyxFQUFNcEssU0FBVW9LLEVBQU1uSyxnQkFHakY1cUUsS0FBSzRuRSxnQkFBZ0I1bkUsS0FBS3NsRSxjQUFjeEIscUJBQXNCaVUsS0FNdEUsWUFBQUMsYUFBQSxTQUFheFMsR0FBYixXQVlJeGxFLEtBQUt1a0IsS0FBSzRvRCxLQUNMcjlELFFBQU8sU0FBQ21MLEdBQU0sTUFBa0IsWUFBbEJBLEVBQUUrMkQsYUFBK0Msa0JBQWxCLzJELEVBQUUrMkQsZUFDL0NobEMsU0FBUSxTQUFDL3hCLEdBQU0sU0FBS3NKLEtBQUswdUQsVUFBVWg0RCxNQUt4Q2piLEtBQUt1a0IsS0FBSzRvRCxLQUFLbmdDLFNBQVEsU0FBQy94QixHQUdwQkEsRUFBRSsyRCxZQUFjLFdBR2hCLzJELEVBQUVvekQsWUFBWXYrRCxRQUFPLFNBQUNpK0IsR0FBTSxPQUFBQSxFQUFFazdCLFNBQU9qOEIsU0FBUSxTQUFDaXJDLEdBQVNBLEVBQUdyc0UsVUFBVyxTQUk3RSxZQUFBc3NFLFlBQUEsU0FBWTFTLEdBb0JSLEdBQUtBLEdBQWNBLEVBQVVOLFdBQWNNLEVBQVVOLFVBQVU5OEMsTUFBTSt2RCxhQU1yRSxJQUxBLElBQUlDLEVBQVM1UyxFQUFVTixVQUFVOThDLE1BQU0rdkQsYUFDbkN6USxFQUFTMW5FLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FFakN5dEUsRUFBWTl5RSxLQUFLdWtCLEtBQUtxdUQsZUFFakJ6d0UsRUFBSSxFQUFHQSxFQUFJMndFLEVBQVV4dkUsT0FBUW5CLElBQUssQ0FFdkMsSUFDSWsyRSxFQUFLRCxFQURPMVEsRUFBUyxJQUFNdmxFLEVBQUksS0FFbkMsR0FBSWsyRSxHQUFNQSxFQUFHLzBFLE9BQVMsRUFBRyxDQUNyQixJQUFJZzFFLEVBQWNELEVBQUcsR0FDakJFLEVBQWNwMkUsRUFFZHEyRSxFQUFXeDRFLEtBQUt5NEUsY0FBYzFsRCxTQUFTdWxELElBQzNDLElBQUtFLEVBQVUsU0FFZng0RSxLQUFLb0YsUUFBUWtsRSxjQUFjdDlCLFNBQVEsU0FBQ3huQixFQUFLcmpCLEdBRXJDLElBQUk2bUUsRUFBV3hqRCxFQUFJaWtELFNBQVN2L0IsbUJBQ3hCd3VDLEVBQWFOLEVBQU8xUSxFQUFTLElBQU02USxFQUFjLEtBQU92UCxHQUM1RCxHQUFJMFAsR0FBY0EsRUFBV3AxRSxPQUFTLEVBQUcsQ0FDckMsSUFBSThNLEVBQVFvb0UsRUFBU3hvRSxLQUFLLHVCQUF5QndWLEVBQUlpa0QsU0FBVyxLQU9sRSxLQUxLcjVELEdBQVNBLEVBQU05TSxRQUFVLEtBQzFCOE0sRUFBUW9vRSxFQUFTeG9FLEtBQUssd0JBQTBCd1YsRUFBSWlrRCxTQUFXLEtBQy9EbHFELFFBQVF5bEQsSUFBSSxpQkFHWjUwRCxHQUFTQSxFQUFNOU0sT0FBUyxFQUFHLENBQzNCOE0sRUFBTXFzQixTQUFTLGNBRWYsSUFBSWs4QyxFQUFZLEdBQ2hCL3lFLE1BQU0wL0MsS0FBS296QixHQUFZMXJDLFNBQVEsU0FBVTRyQyxHQUNyQ0QsR0FBYUMsRUFBSyxPQUV0QnhvRSxFQUFNbUIsS0FBSyxRQUFTb25FLEdBQ04sSUFBSS9jLEdBQVF4ckQsRUFBTSxHQUFJLENBQUVzb0QsWUFBYSwwQkFVM0UsWUFBQStmLGNBQUEsU0FBY3QrRCxHQUNWLE9BQU9uYSxLQUFLdWtCLEtBQUs0b0QsS0FBS245RCxNQUFLLFNBQUNpTCxFQUFHOVksR0FBTSxPQUFBOFksRUFBRTIyRCxnQkFBa0J6M0QsTUFPN0QsWUFBQTArRCxVQUFBLFNBQVUxeUQsRUFBcUIyeUQsR0FBL0IsSUFjbURobEUsRUFBNEJ1aEUsRUFkL0UsT0FHVTBELEVBQWUsU0FBK0J0ekQsRUFBMEIzUixHQUMxRSxJQUFJdzZCLEVBQVE3b0IsRUFBR3VxRCxNQUFNbDhELEdBQUt1NEIsUUFJMUIsT0FGV2lDLEVBQU10K0IsS0FBSyxpQkFBaUI2SSxHQUFHLGFBQWV5MUIsRUFBTXQrQixLQUFLLGlCQUFpQjVOLE9BQVNrc0MsRUFBTS9yQyxRQStCcEdzdUUsRUFBSzd3RSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBRXRCckYsS0FBS3VrQixLQUFLNG9ELEtBQUtsb0UsTUF6QnFCNk8sRUF5QlA5VCxLQUFLMEMsS0FBSzh2RSxtQkFBbUJ4QyxNQUFNbnZFLFFBQVFzbEIsR0F6QlJrdkQsRUF5QmF5RCxHQUFRQSxFQXRCckYsU0FBd0MxdkUsRUFBaUNDLEdBTTVFLE9BQWlCMnZFLEVBTWZELEVBQWExRCxFQUFNanNFLEVBQUlDLEVBQUd5SyxHQU5QbWxFLEVBTWFGLEVBQWExRCxFQUFNaHNFLEVBQUlELEVBQUcwSyxHQUh6QyxLQUFQa2xFLEdBQW9CLEtBQVBDLEdBQWN4dkMsTUFBTXV2QyxJQUFRdnZDLE1BQU13dkMsR0FFakRELEVBQUdqNEUsV0FBV200RSxjQUFjRCxHQUQ1QkQsRUFBS0MsRUFKUixJQUFVRCxFQUFJQyxLQWtCeEJqc0MsU0FBUSxTQUFBdm5CLEdBQU0sU0FBS2xCLEtBQUs2SyxPQUFPM0osR0FBSSxNQUd4QyxJQUFJMHpELEVBQWtDLENBQUVqVSxVQUFXLENBQUVrVSxXQUFZanpELEVBQUlrekQsT0FBUTFSLEdBQVczRSxhQUFlb0MsZUFBZ0J5TCxHQUNuSHlJLEVBQXdDLENBQUVwVSxVQUFXLENBQUVrVSxXQUFZanpELEVBQUltdkQsSUFBS3dELEdBQVExVCxlQUFnQnlMLEdBQ3hHN3dFLEtBQUs0bkUsZ0JBQWdCdEMsR0FBY2xCLGtCQUFtQmtWLEdBRXREdDVFLEtBQUs0bkUsZ0JBQWdCNW5FLEtBQUtzbEUsY0FBY2hCLHVCQUF3QjZVLElBSXBFLFlBQUFJLGlCQUFBLFNBQWlCL1QsR0FHYixJQUFJZ1UsRUFBVXg1RSxLQUFLd0QsT0FBT2dpRSxFQUFVTixVQUFVOThDLE1BQU0zaUIsUUFJcEQsR0FGcUQsT0FBMUMrekUsRUFBUS8zRCxLQUFLLFdBQVdoYSxjQUV4QixDQUNQLElBQUkwZSxFQUFLcXpELEVBQVFqL0QsUUFBUSxNQUN6QixJQUFLNEwsR0FBb0IsSUFBZEEsRUFBRzdpQixPQUFjLE9BRTVCa2lFLEVBQVVOLFVBQVU5OEMsTUFBTTNpQixPQUFTMGdCLEVBQUcsR0FJMUMsSUFBSXN6RCxFQUFNejVFLEtBQUswQyxLQUFLOHZFLG1CQUFtQnhDLE1BQU1oZ0UsTUFBSyxTQUFDaUwsRUFBRzlZLEdBQU0sT0FBQThZLEVBQUVveEIsUUFBUSxLQUFPbTVCLEVBQVVOLFVBQVU5OEMsTUFBTTNpQixVQUV2R3pGLEtBQUs2NEUsVUFBVVksRUFBS2pVLEVBQVVOLFVBQVVvUSxNQUc1QyxZQUFBdUMsYUFBQSxXQUVJNzNFLEtBQUswQyxLQUFLeXFFLEtBQUtuZ0MsU0FBUSxTQUFDL3hCLEVBQUc5WSxHQUNuQjhZLEVBQUVraUIsU0FBUyxpQkFDWGxpQixFQUFFNmhCLFlBQVksZUFBZUEsWUFBWSxvQkFLckQsWUFBQTQ4QyxnQkFBQSxTQUFnQmxVLEdBQWhCLFdBS2V4bEUsS0FJTnVrQixLQUFLNG9ELEtBQUtuZ0MsU0FBUSxTQUFDbWxDLEVBQUtod0UsR0FDWmd3RSxFQUFJOUQsWUFDVnJoQyxTQUFRLFNBQUMyc0MsR0FBVUEsRUFBSXR0QyxRQUFRM2tCLElBQUksY0FDMUMsSUFBSW12RCxFQUFnQjFFLEVBQUlkLG1CQUNwQndGLEVBQWN2ekUsUUFBVSxHQUNadXpFLEVBQWNBLEVBQWN2ekUsT0FBUyxHQUMzQytvQyxRQUFRaGxCLEdBQUcsV0FBVyxTQUFDcGIsR0FBUSxFQUFLNnFFLGVBQWUzRSxFQUFLbG1FLFVBSzFFLFlBQUEyM0MsV0FBQSxTQUFXMmhCLEVBQW1CcGhFLEVBQTBCeTFFLFFBQUEsSUFBQUEsSUFBQUEsR0FBQSxHQUNwRCxJQUFJOVQsRUFBZ0MsQ0FDaENFLElBQUtobUUsS0FBS29GLFFBQVE0aUUsT0FDbEJ0QyxVQUFXSCxFQUNYSyxTQUFVemhFLEVBQ1ZpaEUsZUFBZ0JwbEUsS0FBS29GLFFBQVE4akUsV0FBVzdqRSxLQUN4Q3NnRSxxQkFBc0JpVSxHQUUxQmpWLEdBQWtCc0IsVUFBVUgsSUFHaEMsWUFBQTFoQixjQUFBLFNBQWNtaEIsR0FDVixJQUFJTyxFQUFnQyxDQUNoQ0UsSUFBS2htRSxLQUFLb0YsUUFBUTRpRSxPQUNsQnRDLFVBQVdILEVBQ1hILGVBQWdCcGxFLEtBQUtvRixRQUFROGpFLFdBQVc3akUsTUFFNUNzL0QsR0FBa0JrQixZQUFZQyxJQUdsQyxZQUFBK1QsWUFBQSxTQUFZclUsSUFPa0MsSUFBdEN4bEUsS0FBS29GLFFBQVFvbEUsc0JBQ2J4cUUsS0FBS292RSxZQUNULElBQUkwSyxFQUFLdFUsRUFBVU4sVUFBVStQLFNBQ3hCNkUsR0FDTDk1RSxLQUFLeTFFLGVBQWVqUSxFQUFVTixVQUFVL2pELEtBQU0sSUFBSXF5RCxHQUEwQnNHLEVBQUdwUCxVQUFXb1AsRUFBR25QLFNBQVVtUCxFQUFHbFAsZ0JBRzlHLFlBQUFtUCxpQkFBQSxTQUFpQnZVLEtBSWpCLFlBQUFzSyxrQkFBQSxTQUFrQjhKLEdBQWxCLGdCQUFrQixJQUFBQSxJQUFBQSxHQUFBLEdBRUw1NUUsS0FBS29GLFFBQVE0aUUsT0FDYmhvRSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBS2pDckYsS0FBSzRqRCxXQUFXMGhCLEdBQWNsQyxXQUFXLFNBQUNzSixFQUFRekgsR0FBTyxTQUFLMWdELEtBQUtzdUQscUJBQ25FN3lFLEtBQUs0akQsV0FBVzBoQixHQUFjM0IsZUFBZSxTQUFDK0ksRUFBUXpILEdBQU8sU0FBSzBTLGFBQWExUyxHQUFJLE1BQ25GamxFLEtBQUs0akQsV0FBVzBoQixHQUFjMUIsaUJBQWlCLFNBQUM4SSxFQUFRekgsR0FBTyxTQUFLMFMsYUFBYTFTLEdBQUksTUFDckZqbEUsS0FBSzRqRCxXQUFXMGhCLEdBQWMvQixnQkFBZ0IsU0FBQ21KLEVBQVF6SCxHQUFPLFNBQUsrUyxhQUFhL1MsTUFDaEZqbEUsS0FBSzRqRCxXQUFXMGhCLEdBQWNwQixlQUFlLFNBQUN3SSxFQUFRekgsR0FBTyxTQUFLaVQsWUFBWWpULE1BSzlFamxFLEtBQUs0akQsV0FBVzBoQixHQUFjbkIsc0JBQXNCLFNBQUN1SSxFQUFRekgsR0FBTyxTQUFLc1UsaUJBQWlCdFUsS0FBSzJVLEdBQy9GNTVFLEtBQUs0akQsV0FBVzBoQixHQUFjbEIsbUJBQW1CLFNBQUNzSSxFQUFRekgsR0FBTyxTQUFLeVUsZ0JBQWdCelUsS0FBSzJVLEdBQzNGNTVFLEtBQUs0akQsV0FBVzBoQixHQUFjaEIsd0JBQXdCLFNBQUNvSSxFQUFRekgsR0FBTyxTQUFLK1UsMkJBQTJCL1UsS0FBSzJVLEdBQzNHNTVFLEtBQUs0akQsV0FBVzBoQixHQUFjakIsb0JBQW9CLFNBQUNxSSxFQUFRekgsR0FBTyxTQUFLZ1YsZ0JBQWdCaFYsS0FBSzJVLEdBQzVGNTVFLEtBQUs0akQsV0FBVzBoQixHQUFjeEIsc0JBQXNCLFNBQUM0SSxFQUFRekgsR0FBTyxTQUFLNFUsWUFBWTVVLEtBQUsyVSxHQUMxRjU1RSxLQUFLNGpELFdBQVcwaEIsR0FBY3ZCLDRCQUE0QixTQUFDMkksRUFBUXpILEdBQU8sU0FBSzhVLGlCQUFpQjlVLEtBQUsyVSxJQUd6RyxZQUFBTSxpQkFBQSxzQkFFUXgyQyxFQUFVMWpDLEtBQUswQyxLQUFLOHZFLG1CQUFtQnhDLE1BQ3ZDekksRUFBaUJ2bkUsS0FBS29GLFFBQVE4akUsV0FBVzdqRSxLQU96QzhwRSxFQUNBLG1IQUM2Q252RSxLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBQUksMllBS1ByRixLQUFLb0YsUUFBUThqRSxXQUFXN2pFLEtBQUksOG9CQWU5RjgwRSxFQUFZbjZFLEtBQUt3RCxPQUFPMnJFLEdBQzVCbnZFLEtBQUt3RCxPQUFPLElBQU14RCxLQUFLb0YsUUFBUWlsRSxhQUFhajdDLE9BQU8rcUQsR0FHbkQsSUFBSUMsRUFBV0QsRUFBVW5xRSxLQUFLLHFCQUM5QjB6QixFQUFRc0osU0FBUSxTQUFDcXRDLEVBQVFsZ0UsR0FFckIsSUFBSTZ1RCxFQUFXcVIsRUFBTy9SLFFBQVEsb0JBQzlCLEdBQUtVLEVBQUwsQ0FFQSxJQUFJc1IsRUFBZSxFQUFLOTJFLE9BQU8scUNBRTNCKzJFLEVBQU0sRUFBSy8yRSxPQUFPLG9FQUNsQmczRSxFQUFRLGtCQUFvQnhSLEVBQ2hDdVIsRUFBSWhwRSxLQUFLLEtBQU1pcEUsR0FDZkQsRUFBSWhwRSxLQUFLLHVCQUF3QnkzRCxJQUNWLElBQW5CcVIsRUFBT2oxQyxTQUNQbTFDLEVBQUlocEUsS0FBSyxVQUFXLFdBR3hCLElBQUlrcEUsRUFBUyxFQUFLajNFLE9BQU8sZUFBaUJnM0UsRUFBUSxjQUVsREMsRUFBT2w0RSxLQUFLODNFLEVBQU96eUUsV0FFbkIweUUsRUFBYWxyRCxPQUFPbXJELEdBQ3BCRCxFQUFhbHJELE9BQU9xckQsR0FDcEJMLEVBQVNockQsT0FBT2tyRCxHQUVoQkMsRUFBSWx6RCxHQUFHLFNBQVMsU0FBQ3BiLEdBQ2IsSUFBSXl1RSxFQUFPLEVBQUtsM0UsT0FBT3lJLEVBQUV4RyxRQUNyQmdjLEVBQU9pNUQsRUFBS25wRSxLQUFLLHdCQUNyQixHQUFLa1EsRUFBTCxDQUVBLElBQUlrNUQsRUFBWSxFQUFLajRFLEtBQUs4dkUsbUJBRXRCaHRELEVBQU1tMUQsRUFBVTNLLE1BQU1oZ0UsTUFBSyxTQUFDa2dFLEdBQVMsT0FBQUEsRUFBSzVILFFBQVEsc0JBQXdCN21ELEtBQzlFLEdBQUsrRCxFQUFMLENBRUEsSUFBSW8xRCxFQUFXLEVBQUtyMkQsS0FBSzRvRCxLQUVyQkEsRUFBTyxHQUFILE1BQU95TixHQUFVLEdBQUYsQ0FBRUQsSUFBUyxHQU05QnhnRSxFQUFRd2dFLEVBQVUzSyxNQUFNbnZFLFFBQVEya0IsR0FDcEMsS0FBSXJMLEVBQVEsR0FBWixDQUVBZ3pELEVBQUtuZ0MsU0FBUSxTQUFDbWxDLEdBRVYsSUFBSWpDLEVBQU9pQyxFQUFJbkMsTUFBTTcxRCxHQUVoQisxRCxLQUV1QixJQUF4QndLLEVBQUs3aEUsR0FBRyxZQUVScTNELEVBQUs5cUMsU0FBVSxFQUlmOHFDLEVBQUs5cUMsU0FBVSxNQUl2QixFQUFLd2lDLGdCQUFnQnRDLEdBQWNsQixrQkFBbUIsQ0FDbERnQixlQUFnQm1DLEVBQ2hCckMsVUFBVyxDQUFFOThDLE1BQU9uYyxLQUd4QixJQUFJa3RFLEVBQWtDLENBQUVqVSxVQUFXLENBQUU5OEMsTUFBT25jLEVBQUdvdEUsT0FBUTFSLEdBQVd6RSxlQUFpQmtDLGVBQWdCbUMsR0FDbkgsRUFBS0ssZ0JBQWdCdEMsR0FBY2hCLHVCQUF3QjZVLGNBTXZFLFlBQUEwQixjQUFBLFdBR0ksSUFBSXRULEVBQWlCdm5FLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FFekN5MUUsRUFBTzk2RSxLQUFLMEMsS0FBSzh2RSxtQkFBbUJ4QyxNQUN4Q2h3RSxLQUFLeWpCLElBQU0sR0FFWHpqQixLQUFLb29FLE9BQU8sV0FBWSxVQUl4QixJQUZBLElBQUkyUyxFQUFjLzZFLEtBQUtxc0MsUUFBUSxHQUFHblosYUFFekIvd0IsRUFBSSxFQUFHQSxFQUFJMjRFLEVBQUt4M0UsT0FBUW5CLElBQUssQ0FDbEMsSUFBSTBpQixFQUFNbTJELEVBQVVELEdBQ3BCRCxFQUFLMzRFLEdBQUdrcUMsUUFBUWpkLE9BQU92SyxHQUN2QmkyRCxFQUFLMzRFLEdBQUdpbUUsT0FBTyxXQUFZLFlBQzNCNlMsRUFBYXAyRCxFQUFLaTJELEVBQUszNEUsR0FBSW5DLE1BUS9CLFNBQVNpN0UsRUFBYXAyRCxFQUFLVyxFQUFLbU4sR0FDNUIsSUFBSTVHLEVBQTBDbXZELEVBQVFDLEVBQTBCQyxFQUVoRnYyRCxFQUFJclYsaUJBQWlCLGFBQWEsU0FBVXZELEdBRXhDbXZFLEVBQWF6b0QsRUFBTTBaLFFBQVEsR0FBR3RhLFlBRTlCbXBELEVBQVMxMUQsRUFBSTZtQixRQUFRLEdBQ3JCdGdCLEVBQVE5ZixFQUFFOGYsTUFFVixJQUFJOEosRUEwRFosU0FBcUJyUSxHQUVqQixHQUFzQyxjQUFsQzYxRCxFQUFZNzFELEVBQUssY0FDakIsT0FBTyxFQUdYLElBQUk4MUQsRUFBVUQsRUFBWTcxRCxFQUFLLGdCQUMzQisxRCxFQUFXRixFQUFZNzFELEVBQUssaUJBQ2hDLE9BQVF1TixTQUFTdW9ELEdBQVd2b0QsU0FBU3dvRCxHQWxFbkJDLENBQVlOLEdBRTFCQyxFQUFjRCxFQUFPbnBELFlBQWM4RCxLQUd2Q2hSLEVBQUlyVixpQkFBaUIsYUFBYSxTQUFVdkQsR0FDeENqTSxLQUFLdWpCLE1BQU1rNEQsWUFBYyx1QkFHN0I1MkQsRUFBSXJWLGlCQUFpQixZQUFZLFNBQVV2RCxHQUN2Q2pNLEtBQUt1akIsTUFBTWs0RCxZQUFjLE1BRzdCNzdFLFNBQVM0UCxpQkFBaUIsYUFBYSxTQUFVdkQsR0FDN0MsR0FBSWl2RSxFQUFRLENBQ1IsSUFBSVEsRUFBUXp2RSxFQUFFOGYsTUFBUUEsRUFFdEJtdkQsRUFBTzMzRCxNQUFNbU4sTUFBU3lxRCxFQUFjTyxFQUFTLEtBQzdDL29ELEVBQU0wWixRQUFRLEdBQUc5b0IsTUFBTW1OLE1BQVEwcUQsRUFBYU0sRUFBUSxTQUs1RDk3RSxTQUFTNFAsaUJBQWlCLFdBQVcsU0FBVXZELEdBRXZDaXZFLEdBQ0F2b0QsRUFBTWkxQyxnQkFBZ0J0QyxHQUFjaEIsdUJBQ2hDLENBQ0lpRCxlQUFnQkEsRUFDaEJ4QyxVQUFXLENBQUU5NEQsRUFBR2l2RSxPQUFNLEdBQ3RCbDRELE9BQVEyUCxFQUNSODVCLE9BQVFrYixHQUFXMUUsY0FLL0JpWSxPQUFTcDFFLEVBQ1RpbUIsT0FBUWptQixFQUVScTFFLE9BQWNyMUUsS0FPdEIsU0FBU2sxRSxFQUFVbG9ELEdBQ2YsSUFBSWpPLEVBQU1qbEIsU0FBUzBDLGNBQWMsT0FRakMsT0FQQXVpQixFQUFJdEIsTUFBTWhVLElBQU0sSUFDaEJzVixFQUFJdEIsTUFBTW1PLE1BQVEsSUFDbEI3TSxFQUFJdEIsTUFBTW1OLE1BQVEsTUFDbEI3TCxFQUFJdEIsTUFBTXNPLFNBQVcsV0FDckJoTixFQUFJdEIsTUFBTW80RCxPQUFTLGFBQ25COTJELEVBQUl0QixNQUFNcTRELFdBQWEsT0FDdkIvMkQsRUFBSXRCLE1BQU11UCxPQUFTQSxFQUFTLEtBQ3JCak8sRUFlWCxTQUFTdzJELEVBQVlRLEVBQUtwNEQsR0FDdEIsT0FBUTFqQixPQUFPcXdCLGlCQUFpQnlyRCxFQUFLLE1BQU1ockQsaUJBQWlCcE4sS0FLcEUsWUFBQXE0RCx1QkFBQSxXQUlJLElBb0NJQyxFQXBDQXhVLEVBQWlCdm5FLEtBQUtvRixRQUFROGpFLFdBQVc3akUsS0FDekMyMkUsRUFBS2g4RSxLQUFLd0QsT0FDVjZrRSxFQUFRcm9FLEtBZ0JSaThFLEVBQVNELEVBQUcsb0RBRVpyQixFQUFZdFMsRUFBTTNsRSxLQUFLOHZFLG1CQUN2QnhDLEVBQVEySyxFQUFVM0ssTUFFdEJBLEVBQU1oakMsU0FBUSxTQUFDa2pDLEdBQ1gsSUFBSWdNLEVBQVNoTSxFQUFLN2pDLFFBQVExeUIsV0FDMUIsR0FBc0IsSUFBbEJ1aUUsRUFBTzU0RSxPQUFjLENBQ3JCLElBQUltbEUsRUFBTXlILEVBQUs3akMsUUFBUTlwQyxPQUN2QjJ0RSxFQUFLN2pDLFFBQVE5cEMsS0FBSyxJQUNsQjI1RSxFQUFTRixFQUFHLGVBQWV6NUUsS0FBS2ttRSxHQUNoQ3lILEVBQUs3akMsUUFBUWpkLE9BQU84c0QsR0FFeEJGLEVBQUdFLEdBQVF6MUQsS0FBS3cxRCxNQVFwQjVULEVBQU1yNEQsS0FBSyxnQkFBZ0JxWCxHQUFHLENBQzFCODBELFVBQVcsU0FBVWx3RSxHQUNaK3ZFLEVBQUdoOEUsTUFBTW05QixTQUFTLGdCQUt2QjQrQyxFQUFhOXZFLEVBQUV4RyxPQUNmdTJFLEVBQUdoOEUsTUFBTXlqQixJQUFJLFVBQVcsUUFMcEJzNEQsT0FBYWoyRSxHQU9yQnMyRSxVQUFXLFNBQVVud0UsR0FDakJBLEVBQUVpYyxpQkFDRzZ6RCxHQUVBQyxFQUFHaDhFLE1BQU1tOUIsU0FBUyxnQkFDdkI2K0MsRUFBR2g4RSxNQUFNODhCLFlBQVksU0FFekJ1L0MsVUFBVyxTQUFVcHdFLEdBQ2pCQSxFQUFFaWMsaUJBQ0c2ekQsR0FFQUMsRUFBR2g4RSxNQUFNbTlCLFNBQVMsZ0JBQ3ZCNitDLEVBQUdoOEUsTUFBTXk4QixTQUFTLFNBR3RCNi9DLFNBQVUsU0FBVXJ3RSxHQUNoQkEsRUFBRWljLGlCQUNHNnpELEdBRUFDLEVBQUdoOEUsTUFBTW05QixTQUFTLGdCQUN2QjYrQyxFQUFHaDhFLE1BQU15OEIsU0FBUyxTQUl0QjgvQyxRQUFTLFNBQVV0d0UsR0FDZkEsRUFBRWljLGlCQUNHNnpELEdBQ0xDLEVBQUdoOEUsTUFBTXlqQixJQUFJLFVBQVcsTUFFNUIrNEQsS0FBTSxTQUFVdndFLEdBRVosR0FEQUEsRUFBRWljLGlCQUNHNnpELEVBQUwsQ0FDQSxJQUFJVSxFQUFRVCxFQUFHaDhFLE1BQ2Z5OEUsRUFBTTMvQyxZQUFZLFFBQ2xCLElBQUk0L0MsRUFBY3p3RSxFQUFFeEcsT0FDcEIsR0FBS2czRSxFQUFNdC9DLFNBQVMsZ0JBQ2hCNCtDLElBQWVXLEVBQW5CLENBS0EsSUFBSUMsRUFBYUYsRUFBTWxpRSxRQUFRLE1BQy9CLEdBQUtvaUUsS0FBY0EsRUFBV3I1RSxRQUFVLEdBQXhDLENBR0EsSUFBSXM1RSxFQUFnQjVNLEVBQU1oZ0UsTUFBSyxTQUFDaEMsR0FBTyxPQUFBQSxFQUFHcStCLFFBQVEsS0FBT3N3QyxFQUFXLE1BQ3BFLEdBQUtDLEVBQUwsQ0FFQSxJQUFJQyxFQUFVN00sRUFBTW52RSxRQUFRKzdFLEdBR3hCRSxFQUFZZCxFQUFHRCxHQUFZeGhFLFFBQVEsTUFDdkMsR0FBS3VpRSxLQUFhQSxFQUFVeDVFLFFBQVUsR0FBdEMsQ0FHQSxJQUFJeTVFLEVBQWdCL00sRUFBTWhnRSxNQUFLLFNBQUNoQyxHQUFPLE9BQUFBLEVBQUdxK0IsUUFBUSxLQUFPeXdDLEVBQVUsTUFDbkUsR0FBS0YsRUFBTCxDQUVBLElBQUlweEIsRUFBWXdrQixFQUFNbnZFLFFBQVFrOEUsR0FJOUIsR0FBSUYsR0FBV3J4QixFQUFmLENBS0F3eEIsRUFBUXJDLEVBQVczSyxFQUFPeGtCLEVBQVdxeEIsR0FFckMsSUFBSTFQLEVBQU85RSxFQUFNOWpELEtBQUs0b0QsS0FNdEJ2dUQsWUFBVyxXQUVQLElBQUssSUFBSXpFLEVBQVEsRUFBR0EsRUFBUWd6RCxFQUFLN3BFLE9BQVE2VyxJQUFTLENBRTlDLElBQUlnNEQsRUFBTWhGLEVBQUtoekQsR0FDWDYxRCxFQUFRbUMsRUFBSW5DLE1BQ2hCLEdBQUk2TSxHQUFXcnhCLEVBQVcsT0FDMUJ3eEIsRUFBUTdLLEVBQUtuQyxFQUFPeGtCLEVBQVdxeEIsR0FPbkN4VSxFQUFNVCxnQkFBZ0J0QyxHQUFjbEIsa0JBQ2hDLENBQUVnQixlQUFnQm1DLEVBQWdCckMsVUFBVyxDQUFFOThDLE1BQU9uYyxLQUUxRCxJQUFJa3RFLEVBQWtDLENBQUVqVSxVQUFXLENBQUU5OEMsTUFBT25jLEVBQUdvdEUsT0FBUTFSLEdBQVd4RSxhQUFlaUMsZUFBZ0JtQyxHQUNqSGMsRUFBTVQsZ0JBQWdCdEMsR0FBY2hCLHVCQUF3QjZVLEtBRzdELGVBS1gsSUFBSTZELEVBQVUsU0FBd0M3SyxFQUFzQ25DLEVBQTZCeGtCLEVBQWlDcXhCLEdBR3RKLEdBQUlyeEIsR0FBYXF4QixFQUFqQixDQUVBLElBQUkvd0UsRUFBTW14RSxFQUFXQyxJQUVqQjF4QixFQUFZcXhCLElBQ1ovd0UsRUFBTW14RSxFQUFXRSxLQUdqQnJ4RSxJQUFRbXhFLEVBQVdFLElBQ25CQyxFQUFRcE4sRUFBT3hrQixFQUFXcXhCLEdBRzFCUSxFQUFRck4sRUFBT3hrQixFQUFXcXhCLEdBSTlCMUssRUFBSW5DLE1BQVEsR0FDWm1DLEVBQUloQyxTQUFTSCxLQUtib04sRUFBVSxTQUEyQ3BOLEVBQTZCeGtCLEVBQWlDcXhCLEdBQ25ILElBQUssSUFBSTE2RSxFQUFJcXBELEVBQVdycEQsRUFBSTA2RSxFQUFTMTZFLElBQ2pDa3VCLEVBQUsyL0MsRUFBTzd0RSxFQUFHQSxFQUFJLElBSXZCazdFLEVBQVUsU0FBMkNyTixFQUE2QnhrQixFQUFpQ3F4QixHQUNuSCxJQUFLLElBQUkxNkUsRUFBSXFwRCxFQUFXcnBELEVBQUkwNkUsRUFBUzE2RSxJQUNqQ2t1QixFQUFLMi9DLEVBQU83dEUsRUFBR0EsRUFBSSxJQUl2Qmt1QixFQUFPLFNBQTJDbndCLEVBQTJCbzlFLEVBQTBCQyxHQUN2RyxJQUFJam5FLEVBQU9wVyxFQUFJbzlFLEdBQ2ZwOUUsRUFBSW85RSxHQUFNcDlFLEVBQUlxOUUsR0FDZHI5RSxFQUFJcTlFLEdBQU1qbkUsR0FHVjJtRSxFQUFhLENBQUVFLElBQUssZ0JBQWlCRCxJQUFLLGtCQUdsRCxZQUFBbEQsMkJBQUEsU0FBMkJ4VSxHQUtWQSxFQUFVTixVQUFVbVUsT0FBakMsSUFDSXJSLEVBQVNob0UsS0FBS29GLFFBQVE0aUUsT0FFdEI4UyxFQUFPOTZFLEtBQUswQyxLQUFLOHZFLG1CQUFtQnhDLE1BRXBDd04sRUFBVSxHQUNkMUMsRUFBSzl0QyxTQUFRLFNBQUN4bkIsRUFBS3JMLEdBRWYsSUFBSWxWLEVBQU8sTUFDUHVnQixFQUFJMlgsU0FBUyxrQkFDYmw0QixFQUFPLFFBRVgsSUFBSXdjLEVBQU8rRCxFQUFJOGlELFFBQVEsb0JBRW5CbVYsRUFBVSxJQUFJQyxHQUF1Qmw0RCxFQUFJMmlELE9BQU8sU0FBVTNpRCxFQUFJNGYsUUFBU25nQyxFQUFNa1YsR0FFakZxakUsRUFBUS83RCxHQUFRZzhELEtBS3BCbmIsR0FBQSxPQUFvQjBGLEdBQ3BCcHBELFlBQVcsV0FFUDBqRCxHQUFhUSxRQUFRa0YsRUFBUXdWLEVBQVMsQ0FBRTlhLEtBQU0sR0FBSWliLFFBQVEsRUFBTUMsU0FBVSxhQUMzRSxNQUdQLFlBQUEzRCxnQkFBQSxTQUFnQnpVLEdBT1p4bEUsS0FBS2s2RSxtQkFLTGw2RSxLQUFLODdFLHlCQUtMOTdFLEtBQUs2NkUsaUJBRWIsRUF6eENBLENBQWlDalMsK2RDNUJqQyxlQUVJLFdBQVl4akUsR0FBWixNQUNJLFlBQU1BLElBQVEsWUFDZCxFQUFLQSxRQUFVQSxFQUNmLEVBQUsrbEUsV0FNYixPQVhzQyxRQVFsQyxZQUFBQSxPQUFBLFdBQ0luckUsS0FBS3FzQyxRQUFVcnNDLEtBQUt3RCxPQUFPLFdBQUl4RCxLQUFLb0YsUUFBUXFwRSxhQUVwRCxFQVhBLENBQXNDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL3NlcnZpY2VzL3N0cmluZy5leHRlbnNpb25zLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JzZGF0YXRhYmxlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JzZGF0YXRhYmxlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRSZWN0LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2hpZGUuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci1saXRlLmpzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5lc20uanMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvc2VydmljZXMvQ29va2llSGVscGVyLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL3NlcnZpY2VzL2RhdGEtZXZlbnRzLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL3NlcnZpY2VzL2RhdGEtZXZlbnRzLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvc2VydmljZXMvc2Vzc2lvbi1zdG9yYWdlLXNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvc2VydmljZXMvZGF0YS10YWJsZS1kaXNjb3Zlcnktc2VydmljZS50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlQmFzZS50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21tb25UeXBlcy9jb21tb24tdHlwZXMudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZUNlbGwudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZUlucHV0LnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVDaGVja0JveC50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlSHR0cENsaWVudC50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlUGFnaW5hdGlvbi50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlSW5maW5pdGVTY3JvbGwudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93Q29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlTWFya2VyLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVBY3Rpb25zLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVUZXh0SW5wdXQudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZVNlbGVjdE9wdGlvbi50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlU2VsZWN0LnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVCdXR0b24udHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZVNlbGVjdG9yLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdy50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTRGF0YVRhYmxlUm93LnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVSb3dDb2xsZWN0aW9uLnRzIiwid2VicGFjazovL2JzZGF0YXRhYmxlLy4vc3JjL2NvbXBvbmVudHMvQlNEYXRhVGFibGVIZWFkZXIudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZUJvZHkudHMiLCJ3ZWJwYWNrOi8vYnNkYXRhdGFibGUvLi9zcmMvY29tcG9uZW50cy9CU0RhdGFUYWJsZS50cyIsIndlYnBhY2s6Ly9ic2RhdGF0YWJsZS8uL3NyYy9jb21wb25lbnRzL0JTVGV4dElucHV0RXh0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImJzZGF0YXRhYmxlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImJzZGF0YXRhYmxlXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCJcclxuaW50ZXJmYWNlIFN0cmluZyB7XHJcbiAgICB0b0NhbWFsQ2FzZSgpOiBzdHJpbmc7XHJcbiAgICB0b1Bhc2NhbENhc2UoKTogc3RyaW5nO1xyXG4gICAgdG9QYXNjYWxDYXNlSnNvbigpOiBzdHJpbmc7XHJcbiAgICBmb3JtYXQoKTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHN0cmluZyB0byBjYW1hbCBjYXNpbmdcclxuICogQHJldHVybnMgY2FtZWxDYXNpbmcgb2YgdGhlIHN0cmluZ1xyXG4gKi9cclxuIFN0cmluZy5wcm90b3R5cGUudG9DYW1hbENhc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oPzpeXFx3fFtBLVpdfFxcYlxcdykvZywgZnVuY3Rpb24od29yZCwgaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gaW5kZXggPT09IDAgPyB3b3JkLnRvTG93ZXJDYXNlKCkgOiB3b3JkLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgIH0pLnJlcGxhY2UoL1xccysvZywgJycpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gcGFzY2FsIGNhc2luZ1xyXG4gKiBAcmV0dXJucyBQYXNjYWxDYXNpbmcgb2YgdGhlIHN0cmluZ1xyXG4gKi9cclxuU3RyaW5nLnByb3RvdHlwZS50b1Bhc2NhbENhc2UgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyg/Ol5cXHd8W0EtWl18XFxiXFx3KS9nLCBmdW5jdGlvbih3b3JkLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHdvcmQudG9VcHBlckNhc2UoKSA6IHdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgfSkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnRvUGFzY2FsQ2FzZUpzb24gPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyg/Ol5cXHd8W0EtWl18XFxiXFx3KS9nLCBmdW5jdGlvbih3b3JkLCBpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IHdvcmQudG9VcHBlckNhc2UoKSA6IHdvcmQ7XHJcbiAgICAgIH0pLnJlcGxhY2UoL1xccysvZywgJycpO1xyXG59O1xyXG5cclxuaWYgKCFTdHJpbmcucHJvdG90eXBlLmZvcm1hdCkge1xyXG4gIFN0cmluZy5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL3soXFxkKyl9L2csIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIpIHsgXHJcbiAgICAgIHJldHVybiB0eXBlb2YgYXJnc1tudW1iZXJdICE9ICd1bmRlZmluZWQnXHJcbiAgICAgICAgPyBhcmdzW251bWJlcl1cclxuICAgICAgICA6IG1hdGNoXHJcbiAgICAgIDtcclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxuZXhwb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfTsiLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwiaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaXNIVE1MRWxlbWVudChlbGVtZW50KSAmJiBpbmNsdWRlU2NhbGUpIHtcbiAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIG9mZnNldFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDsgLy8gRG8gbm90IGF0dGVtcHQgdG8gZGl2aWRlIGJ5IDAsIG90aGVyd2lzZSB3ZSBnZXQgYEluZmluaXR5YCBhcyBzY2FsZVxuICAgIC8vIEZhbGxiYWNrIHRvIDEgaW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgYDBgXG5cbiAgICBpZiAob2Zmc2V0V2lkdGggPiAwKSB7XG4gICAgICBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIG9mZnNldFdpZHRoIHx8IDE7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldEhlaWdodCA+IDApIHtcbiAgICAgIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIG9mZnNldEhlaWdodCB8fCAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGggLyBzY2FsZVgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCAvIHNjYWxlWSxcbiAgICB0b3A6IHJlY3QudG9wIC8gc2NhbGVZLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC8gc2NhbGVYLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLyBzY2FsZVksXG4gICAgbGVmdDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHg6IHJlY3QubGVmdCAvIHNjYWxlWCxcbiAgICB5OiByZWN0LnRvcCAvIHNjYWxlWVxuICB9O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tIFwiLi9pc1RhYmxlRWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMTtcbiAgdmFyIGlzSUUgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSAhPT0gLTE7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluTWF4Q2xhbXAobWluLCB2YWx1ZSwgbWF4KSB7XG4gIHZhciB2ID0gd2l0aGluKG1pbiwgdmFsdWUsIG1heCk7XG4gIHJldHVybiB2ID4gbWF4ID8gbWF4IDogdjtcbn0iLCJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHVuc2V0U2lkZXMgPSB7XG4gIHRvcDogJ2F1dG8nLFxuICByaWdodDogJ2F1dG8nLFxuICBib3R0b206ICdhdXRvJyxcbiAgbGVmdDogJ2F1dG8nXG59OyAvLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuXG5mdW5jdGlvbiByb3VuZE9mZnNldHNCeURQUihfcmVmKSB7XG4gIHZhciB4ID0gX3JlZi54LFxuICAgICAgeSA9IF9yZWYueTtcbiAgdmFyIHdpbiA9IHdpbmRvdztcbiAgdmFyIGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHJldHVybiB7XG4gICAgeDogcm91bmQoeCAqIGRwcikgLyBkcHIgfHwgMCxcbiAgICB5OiByb3VuZCh5ICogZHByKSAvIGRwciB8fCAwXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIHZhcmlhdGlvbiA9IF9yZWYyLnZhcmlhdGlvbixcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHMsXG4gICAgICBpc0ZpeGVkID0gX3JlZjIuaXNGaXhlZDtcbiAgdmFyIF9vZmZzZXRzJHggPSBvZmZzZXRzLngsXG4gICAgICB4ID0gX29mZnNldHMkeCA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHgsXG4gICAgICBfb2Zmc2V0cyR5ID0gb2Zmc2V0cy55LFxuICAgICAgeSA9IF9vZmZzZXRzJHkgPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR5O1xuXG4gIHZhciBfcmVmMyA9IHR5cGVvZiByb3VuZE9mZnNldHMgPT09ICdmdW5jdGlvbicgPyByb3VuZE9mZnNldHMoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KSA6IHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcblxuICB4ID0gX3JlZjMueDtcbiAgeSA9IF9yZWYzLnk7XG4gIHZhciBoYXNYID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneCcpO1xuICB2YXIgaGFzWSA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3knKTtcbiAgdmFyIHNpZGVYID0gbGVmdDtcbiAgdmFyIHNpZGVZID0gdG9wO1xuICB2YXIgd2luID0gd2luZG93O1xuXG4gIGlmIChhZGFwdGl2ZSkge1xuICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKTtcbiAgICB2YXIgaGVpZ2h0UHJvcCA9ICdjbGllbnRIZWlnaHQnO1xuICAgIHZhciB3aWR0aFByb3AgPSAnY2xpZW50V2lkdGgnO1xuXG4gICAgaWYgKG9mZnNldFBhcmVudCA9PT0gZ2V0V2luZG93KHBvcHBlcikpIHtcbiAgICAgIG9mZnNldFBhcmVudCA9IGdldERvY3VtZW50RWxlbWVudChwb3BwZXIpO1xuXG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uICE9PSAnc3RhdGljJyAmJiBwb3NpdGlvbiA9PT0gJ2Fic29sdXRlJykge1xuICAgICAgICBoZWlnaHRQcm9wID0gJ3Njcm9sbEhlaWdodCc7XG4gICAgICAgIHdpZHRoUHJvcCA9ICdzY3JvbGxXaWR0aCc7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYXN0XTogZm9yY2UgdHlwZSByZWZpbmVtZW50LCB3ZSBjb21wYXJlIG9mZnNldFBhcmVudCB3aXRoIHdpbmRvdyBhYm92ZSwgYnV0IEZsb3cgZG9lc24ndCBkZXRlY3QgaXRcblxuXG4gICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gdG9wIHx8IChwbGFjZW1lbnQgPT09IGxlZnQgfHwgcGxhY2VtZW50ID09PSByaWdodCkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVZID0gYm90dG9tO1xuICAgICAgdmFyIG9mZnNldFkgPSBpc0ZpeGVkICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC5oZWlnaHQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFtoZWlnaHRQcm9wXTtcbiAgICAgIHkgLT0gb2Zmc2V0WSAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCAocGxhY2VtZW50ID09PSB0b3AgfHwgcGxhY2VtZW50ID09PSBib3R0b20pICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0O1xuICAgICAgdmFyIG9mZnNldFggPSBpc0ZpeGVkICYmIHdpbi52aXN1YWxWaWV3cG9ydCA/IHdpbi52aXN1YWxWaWV3cG9ydC53aWR0aCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W3dpZHRoUHJvcF07XG4gICAgICB4IC09IG9mZnNldFggLSBwb3BwZXJSZWN0LndpZHRoO1xuICAgICAgeCAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9LCBhZGFwdGl2ZSAmJiB1bnNldFNpZGVzKTtcblxuICB2YXIgX3JlZjQgPSByb3VuZE9mZnNldHMgPT09IHRydWUgPyByb3VuZE9mZnNldHNCeURQUih7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmNC54O1xuICB5ID0gX3JlZjQueTtcblxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uKSB7XG4gICAgdmFyIF9PYmplY3QkYXNzaWduO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW3NpZGVZXSA9IGhhc1kgPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ25bc2lkZVhdID0gaGFzWCA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbi50cmFuc2Zvcm0gPSAod2luLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPD0gMSA/IFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIgOiBcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIDApXCIsIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24yID0ge30sIF9PYmplY3QkYXNzaWduMltzaWRlWV0gPSBoYXNZID8geSArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjJbc2lkZVhdID0gaGFzWCA/IHggKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yLnRyYW5zZm9ybSA9ICcnLCBfT2JqZWN0JGFzc2lnbjIpKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVN0eWxlcyhfcmVmNSkge1xuICB2YXIgc3RhdGUgPSBfcmVmNS5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmNS5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID0gb3B0aW9ucy5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRncHVBY2NlbGVyYXQsXG4gICAgICBfb3B0aW9ucyRhZGFwdGl2ZSA9IG9wdGlvbnMuYWRhcHRpdmUsXG4gICAgICBhZGFwdGl2ZSA9IF9vcHRpb25zJGFkYXB0aXZlID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWRhcHRpdmUsXG4gICAgICBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPSBvcHRpb25zLnJvdW5kT2Zmc2V0cyxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJvdW5kT2Zmc2V0cztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgdmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoYWRhcHRpdmUgJiYgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMDtcbiAgICB9KSkge1xuICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBEZXRlY3RlZCBDU1MgdHJhbnNpdGlvbnMgb24gYXQgbGVhc3Qgb25lIG9mIHRoZSBmb2xsb3dpbmcnLCAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJywgJ1xcblxcbicsICdEaXNhYmxlIHRoZSBcImNvbXB1dGVTdHlsZXNcIiBtb2RpZmllclxcJ3MgYGFkYXB0aXZlYCBvcHRpb24gdG8gYWxsb3cnLCAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJywgJ3RyYW5zaXRpb24gZGVjbGFyYXRpb24gb24gdGhlIHBvcHBlciBlbGVtZW50IGlmIG9ubHkgdHJhbnNpdGlvbmluZycsICdvcGFjaXR5IG9yIGJhY2tncm91bmQtY29sb3IgZm9yIGV4YW1wbGUuJywgJ1xcblxcbicsICdXZSByZWNvbW1lbmQgdXNpbmcgdGhlIHBvcHBlciBlbGVtZW50IGFzIGEgd3JhcHBlciBhcm91bmQgYW4gaW5uZXInLCAnZWxlbWVudCB0aGF0IGNhbiBoYXZlIGFueSBDU1MgcHJvcGVydHkgdHJhbnNpdGlvbmVkIGZvciBhbmltYXRpb25zLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbW1vblN0eWxlcyA9IHtcbiAgICBwbGFjZW1lbnQ6IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KSxcbiAgICB2YXJpYXRpb246IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHBvcHBlcjogc3RhdGUuZWxlbWVudHMucG9wcGVyLFxuICAgIHBvcHBlclJlY3Q6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBncHVBY2NlbGVyYXRpb246IGdwdUFjY2VsZXJhdGlvbixcbiAgICBpc0ZpeGVkOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCJpbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7XG4gIGlmIChbJ2h0bWwnLCAnYm9keScsICcjZG9jdW1lbnQnXS5pbmRleE9mKGdldE5vZGVOYW1lKG5vZGUpKSA+PSAwKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChpc0hUTUxFbGVtZW50KG5vZGUpICYmIGlzU2Nyb2xsUGFyZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUobm9kZSkpO1xufSIsImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCJpbXBvcnQgeyB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZpZXdwb3J0UmVjdCBmcm9tIFwiLi9nZXRWaWV3cG9ydFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSBcIi4vZ2V0RG9jdW1lbnRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgbWF4LCBtaW4gfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuICByZWN0LnRvcCA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRUb3A7XG4gIHJlY3QubGVmdCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50TGVmdDtcbiAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC53aWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3QuaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QueCA9IHJlY3QubGVmdDtcbiAgcmVjdC55ID0gcmVjdC50b3A7XG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkpIDogaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50KSA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufSAvLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcblxuXG5mdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkge1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gbGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG4gIHZhciBjYW5Fc2NhcGVDbGlwcGluZyA9IFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIHZhciBjbGlwcGVyRWxlbWVudCA9IGNhbkVzY2FwZUNsaXBwaW5nICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMTQxNFxuXG5cbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50cy5maWx0ZXIoZnVuY3Rpb24gKGNsaXBwaW5nUGFyZW50KSB7XG4gICAgcmV0dXJuIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiYgY29udGFpbnMoY2xpcHBpbmdQYXJlbnQsIGNsaXBwZXJFbGVtZW50KSAmJiBnZXROb2RlTmFtZShjbGlwcGluZ1BhcmVudCkgIT09ICdib2R5JztcbiAgfSk7XG59IC8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDbGlwcGluZ1JlY3QoZWxlbWVudCwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCkpO1xuICBjbGlwcGluZ1JlY3Qud2lkdGggPSBjbGlwcGluZ1JlY3QucmlnaHQgLSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LmhlaWdodCA9IGNsaXBwaW5nUmVjdC5ib3R0b20gLSBjbGlwcGluZ1JlY3QudG9wO1xuICBjbGlwcGluZ1JlY3QueCA9IGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QueSA9IGNsaXBwaW5nUmVjdC50b3A7XG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwOyAvLyBOQjogVGhpcyBpc24ndCBzdXBwb3J0ZWQgb24gaU9TIDw9IDEyLiBJZiB0aGUga2V5Ym9hcmQgaXMgb3BlbiwgdGhlIHBvcHBlclxuICAvLyBjYW4gYmUgb2JzY3VyZWQgdW5kZXJuZWF0aCBpdC5cbiAgLy8gQWxzbywgYGh0bWwuY2xpZW50SGVpZ2h0YCBhZGRzIHRoZSBib3R0b20gYmFyIGhlaWdodCBpbiBTYWZhcmkgaU9TLCBldmVuXG4gIC8vIGlmIGl0IGlzbid0IG9wZW4sIHNvIGlmIHRoaXMgaXNuJ3QgYXZhaWxhYmxlLCB0aGUgcG9wcGVyIHdpbGwgYmUgZGV0ZWN0ZWRcbiAgLy8gdG8gb3ZlcmZsb3cgdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIHRvbyBlYXJseS5cblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDsgLy8gVXNlcyBMYXlvdXQgVmlld3BvcnQgKGxpa2UgQ2hyb21lOyBTYWZhcmkgZG9lcyBub3QgY3VycmVudGx5KVxuICAgIC8vIEluIENocm9tZSwgaXQgcmV0dXJucyBhIHZhbHVlIHZlcnkgY2xvc2UgdG8gMCAoKy8tKSBidXQgY29udGFpbnMgcm91bmRpbmdcbiAgICAvLyBlcnJvcnMgZHVlIHRvIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIHNvIHdlIG5lZWQgdG8gY2hlY2sgcHJlY2lzaW9uLlxuICAgIC8vIFNhZmFyaSByZXR1cm5zIGEgbnVtYmVyIDw9IDAsIHVzdWFsbHkgPCAtMSB3aGVuIHBpbmNoLXpvb21lZFxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcblxuICAgIGlmICghL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgeCA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQ7XG4gICAgICB5ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHggKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpLFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciByZWZlcmVuY2UgPSBfcmVmLnJlZmVyZW5jZSxcbiAgICAgIGVsZW1lbnQgPSBfcmVmLmVsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQgPyBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50ID8gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgOiBudWxsO1xuICB2YXIgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICB2YXIgY29tbW9uWSA9IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodCAvIDIgLSBlbGVtZW50LmhlaWdodCAvIDI7XG4gIHZhciBvZmZzZXRzO1xuXG4gIHN3aXRjaCAoYmFzZVBsYWNlbWVudCkge1xuICAgIGNhc2UgdG9wOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBlbGVtZW50LmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBib3R0b206XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBsZWZ0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggLSBlbGVtZW50LndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLngsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55XG4gICAgICB9O1xuICB9XG5cbiAgdmFyIG1haW5BeGlzID0gYmFzZVBsYWNlbWVudCA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KSA6IG51bGw7XG5cbiAgaWYgKG1haW5BeGlzICE9IG51bGwpIHtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHN3aXRjaCAodmFyaWF0aW9uKSB7XG4gICAgICBjYXNlIHN0YXJ0OlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBlbmQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufSIsImltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVBdXRvUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgYm90dG9tLCB0b3AsIHN0YXJ0LCByaWdodCwgbGVmdCwgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZnVuY3Rpb24gZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgb3Bwb3NpdGVQbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICByZXR1cm4gW2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCksIG9wcG9zaXRlUGxhY2VtZW50LCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChvcHBvc2l0ZVBsYWNlbWVudCldO1xufVxuXG5mdW5jdGlvbiBmbGlwKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzID0gb3B0aW9ucy5mYWxsYmFja1BsYWNlbWVudHMsXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPSBvcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucyRmbGlwVmFyaWF0aW8gPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRmbGlwVmFyaWF0aW8sXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBvcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cztcbiAgdmFyIHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KTtcbiAgdmFyIGlzQmFzZVBsYWNlbWVudCA9IGJhc2VQbGFjZW1lbnQgPT09IHByZWZlcnJlZFBsYWNlbWVudDtcbiAgdmFyIGZhbGxiYWNrUGxhY2VtZW50cyA9IHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyB8fCAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9ucyA/IFtnZXRPcHBvc2l0ZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpXSA6IGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHByZWZlcnJlZFBsYWNlbWVudCkpO1xuICB2YXIgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnRdLmNvbmNhdChmYWxsYmFja1BsYWNlbWVudHMpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8gPyBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9uczogZmxpcFZhcmlhdGlvbnMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHM6IGFsbG93ZWRBdXRvUGxhY2VtZW50c1xuICAgIH0pIDogcGxhY2VtZW50KTtcbiAgfSwgW10pO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICB2YXIgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcGxhY2VtZW50ID0gcGxhY2VtZW50c1tpXTtcblxuICAgIHZhciBfYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBpc1N0YXJ0VmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHN0YXJ0O1xuICAgIHZhciBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKF9iYXNlUGxhY2VtZW50KSA+PSAwO1xuICAgIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pO1xuICAgIHZhciBtYWluVmFyaWF0aW9uU2lkZSA9IGlzVmVydGljYWwgPyBpc1N0YXJ0VmFyaWF0aW9uID8gcmlnaHQgOiBsZWZ0IDogaXNTdGFydFZhcmlhdGlvbiA/IGJvdHRvbSA6IHRvcDtcblxuICAgIGlmIChyZWZlcmVuY2VSZWN0W2xlbl0gPiBwb3BwZXJSZWN0W2xlbl0pIHtcbiAgICAgIG1haW5WYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIH1cblxuICAgIHZhciBhbHRWYXJpYXRpb25TaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuICAgIHZhciBjaGVja3MgPSBbXTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1tfYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbbWFpblZhcmlhdGlvblNpZGVdIDw9IDAsIG92ZXJmbG93W2FsdFZhcmlhdGlvblNpZGVdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICByZXR1cm4gY2hlY2s7XG4gICAgfSkpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgdmFyIG51bWJlck9mQ2hlY2tzID0gZmxpcFZhcmlhdGlvbnMgPyAzIDogMTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pKSB7XG4gICAgICB2YXIgZml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHMuZmluZChmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgICAgIHZhciBjaGVja3MgPSBjaGVja3NNYXAuZ2V0KHBsYWNlbWVudCk7XG5cbiAgICAgICAgaWYgKGNoZWNrcykge1xuICAgICAgICAgIHJldHVybiBjaGVja3Muc2xpY2UoMCwgX2kpLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgICAgICAgcmV0dXJuIGNoZWNrO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gZml0dGluZ1BsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kgPSBudW1iZXJPZkNoZWNrczsgX2kgPiAwOyBfaS0tKSB7XG4gICAgICB2YXIgX3JldCA9IF9sb29wKF9pKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLnBsYWNlbWVudCAhPT0gZmlyc3RGaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCA9IHRydWU7XG4gICAgc3RhdGUucGxhY2VtZW50ID0gZmlyc3RGaXR0aW5nUGxhY2VtZW50O1xuICAgIHN0YXRlLnJlc2V0ID0gdHJ1ZTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZmxpcCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBmbGlwLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxuICBkYXRhOiB7XG4gICAgX3NraXA6IGZhbHNlXG4gIH1cbn07IiwiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsImltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMuanNcIjtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59OyIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gXCIuLi91dGlscy9nZXRBbHRBeGlzLmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4sIHdpdGhpbk1heENsYW1wIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWluIGFzIG1hdGhNaW4sIG1heCBhcyBtYXRoTWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0VmFsdWUgPT09ICdudW1iZXInID8ge1xuICAgIG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSxcbiAgICBhbHRBeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZVxuICB9IDogT2JqZWN0LmFzc2lnbih7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgYWx0QXhpczogMFxuICB9LCB0ZXRoZXJPZmZzZXRWYWx1ZSk7XG4gIHZhciBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdIDogbnVsbDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkO1xuXG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IG9mZnNldCAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW21haW5BeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJCA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IG9mZnNldCArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDI7XG5cbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX2xlbiA9IGFsdEF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICB2YXIgaXNPcmlnaW5TaWRlID0gW3RvcCwgbGVmdF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICB2YXIgX29mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkMiA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbYWx0QXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIDogMDtcblxuICAgIHZhciBfdGV0aGVyTWluID0gaXNPcmlnaW5TaWRlID8gX21pbiA6IF9vZmZzZXQgLSByZWZlcmVuY2VSZWN0W19sZW5dIC0gcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXM7XG5cbiAgICB2YXIgX3RldGhlck1heCA9IGlzT3JpZ2luU2lkZSA/IF9vZmZzZXQgKyByZWZlcmVuY2VSZWN0W19sZW5dICsgcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXMgOiBfbWF4O1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlID8gd2l0aGluTWF4Q2xhbXAoX3RldGhlck1pbiwgX29mZnNldCwgX3RldGhlck1heCkgOiB3aXRoaW4odGV0aGVyID8gX3RldGhlck1pbiA6IF9taW4sIF9vZmZzZXQsIHRldGhlciA/IF90ZXRoZXJNYXggOiBfbWF4KTtcblxuICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5zY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBzb3VyY2U6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5ODc1MjU1XG5cbmZ1bmN0aW9uIG9yZGVyKG1vZGlmaWVycykge1xuICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICB2YXIgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBtYXAuc2V0KG1vZGlmaWVyLm5hbWUsIG1vZGlmaWVyKTtcbiAgfSk7IC8vIE9uIHZpc2l0aW5nIG9iamVjdCwgY2hlY2sgZm9yIGl0cyBkZXBlbmRlbmNpZXMgYW5kIHZpc2l0IHRoZW0gcmVjdXJzaXZlbHlcblxuICBmdW5jdGlvbiBzb3J0KG1vZGlmaWVyKSB7XG4gICAgdmlzaXRlZC5hZGQobW9kaWZpZXIubmFtZSk7XG4gICAgdmFyIHJlcXVpcmVzID0gW10uY29uY2F0KG1vZGlmaWVyLnJlcXVpcmVzIHx8IFtdLCBtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzIHx8IFtdKTtcbiAgICByZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmICghdmlzaXRlZC5oYXMoZGVwKSkge1xuICAgICAgICB2YXIgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHQucHVzaChtb2RpZmllcik7XG4gIH1cblxuICBtb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9yZGVyTW9kaWZpZXJzKG1vZGlmaWVycykge1xuICAvLyBvcmRlciBiYXNlZCBvbiBkZXBlbmRlbmNpZXNcbiAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcihtb2RpZmllcnMpOyAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuXG4gIHJldHVybiBtb2RpZmllclBoYXNlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGhhc2UpIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2U7XG4gICAgfSkpO1xuICB9LCBbXSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhzZXRPcHRpb25zQWN0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHNldE9wdGlvbnNBY3Rpb24gPT09ICdmdW5jdGlvbicgPyBzZXRPcHRpb25zQWN0aW9uKHN0YXRlLm9wdGlvbnMpIDogc2V0T3B0aW9uc0FjdGlvbjtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHN0YXRlLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5leHBvcnQgdmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZywgY3VycmVudCwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucywgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIGN1cnJlbnQuZGF0YSlcbiAgICB9KSA6IGN1cnJlbnQ7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pOyAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhtZXJnZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFtrZXldO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbmltcG9ydCBvZmZzZXQgZnJvbSBcIi4vbW9kaWZpZXJzL29mZnNldC5qc1wiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIi4vbW9kaWZpZXJzL2ZsaXAuanNcIjtcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSBcIi4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGFycm93IGZyb20gXCIuL21vZGlmaWVycy9hcnJvdy5qc1wiO1xuaW1wb3J0IGhpZGUgZnJvbSBcIi4vbW9kaWZpZXJzL2hpZGUuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlcywgb2Zmc2V0LCBmbGlwLCBwcmV2ZW50T3ZlcmZsb3csIGFycm93LCBoaWRlXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyIsImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IiwiLyohXG4gICogQm9vdHN0cmFwIHY1LjEuMyAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDIxIFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICovXG5pbXBvcnQgKiBhcyBQb3BwZXIgZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgTUFYX1VJRCA9IDEwMDAwMDA7XG5jb25zdCBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7XG5jb25zdCBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJzsgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuXG5jb25zdCB0b1R5cGUgPSBvYmogPT4ge1xuICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGAke29ian1gO1xuICB9XG5cbiAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTtcbn07XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQdWJsaWMgVXRpbCBBcGlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5jb25zdCBnZXRVSUQgPSBwcmVmaXggPT4ge1xuICBkbyB7XG4gICAgcHJlZml4ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpO1xuICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcblxuICByZXR1cm4gcHJlZml4O1xufTtcblxuY29uc3QgZ2V0U2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgbGV0IHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtdGFyZ2V0Jyk7XG5cbiAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgbGV0IGhyZWZBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTsgLy8gVGhlIG9ubHkgdmFsaWQgY29udGVudCB0aGF0IGNvdWxkIGRvdWJsZSBhcyBhIHNlbGVjdG9yIGFyZSBJRHMgb3IgY2xhc3NlcyxcbiAgICAvLyBzbyBldmVyeXRoaW5nIHN0YXJ0aW5nIHdpdGggYCNgIG9yIGAuYC4gSWYgYSBcInJlYWxcIiBVUkwgaXMgdXNlZCBhcyB0aGUgc2VsZWN0b3IsXG4gICAgLy8gYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JgIHdpbGwgcmlnaHRmdWxseSBjb21wbGFpbiBpdCBpcyBpbnZhbGlkLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzMyMjczXG5cbiAgICBpZiAoIWhyZWZBdHRyIHx8ICFocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gSnVzdCBpbiBjYXNlIHNvbWUgQ01TIHB1dHMgb3V0IGEgZnVsbCBVUkwgd2l0aCB0aGUgYW5jaG9yIGFwcGVuZGVkXG5cblxuICAgIGlmIChocmVmQXR0ci5pbmNsdWRlcygnIycpICYmICFocmVmQXR0ci5zdGFydHNXaXRoKCcjJykpIHtcbiAgICAgIGhyZWZBdHRyID0gYCMke2hyZWZBdHRyLnNwbGl0KCcjJylbMV19YDtcbiAgICB9XG5cbiAgICBzZWxlY3RvciA9IGhyZWZBdHRyICYmIGhyZWZBdHRyICE9PSAnIycgPyBocmVmQXR0ci50cmltKCkgOiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufTtcblxuY29uc3QgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpO1xuXG4gIGlmIChzZWxlY3Rvcikge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgZ2V0RWxlbWVudEZyb21TZWxlY3RvciA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpO1xuICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGw7XG59O1xuXG5jb25zdCBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gMDtcbiAgfSAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxuXG5cbiAgbGV0IHtcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgdHJhbnNpdGlvbkRlbGF5XG4gIH0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICBjb25zdCBmbG9hdFRyYW5zaXRpb25EZWxheSA9IE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSk7IC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcblxuICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgIHJldHVybiAwO1xuICB9IC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcblxuXG4gIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xuICB0cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXkuc3BsaXQoJywnKVswXTtcbiAgcmV0dXJuIChOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbn07XG5cbmNvbnN0IHRyaWdnZXJUcmFuc2l0aW9uRW5kID0gZWxlbWVudCA9PiB7XG4gIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoVFJBTlNJVElPTl9FTkQpKTtcbn07XG5cbmNvbnN0IGlzRWxlbWVudCA9IG9iaiA9PiB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmouanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG9iaiA9IG9ialswXTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSAndW5kZWZpbmVkJztcbn07XG5cbmNvbnN0IGdldEVsZW1lbnQgPSBvYmogPT4ge1xuICBpZiAoaXNFbGVtZW50KG9iaikpIHtcbiAgICAvLyBpdCdzIGEgalF1ZXJ5IG9iamVjdCBvciBhIG5vZGUgZWxlbWVudFxuICAgIHJldHVybiBvYmouanF1ZXJ5ID8gb2JqWzBdIDogb2JqO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnICYmIG9iai5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob2JqKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgdHlwZUNoZWNrQ29uZmlnID0gKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpID0+IHtcbiAgT2JqZWN0LmtleXMoY29uZmlnVHlwZXMpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgY29uc3QgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHZhbHVlICYmIGlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpO1xuXG4gICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gKTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3QgaXNWaXNpYmxlID0gZWxlbWVudCA9PiB7XG4gIGlmICghaXNFbGVtZW50KGVsZW1lbnQpIHx8IGVsZW1lbnQuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCd2aXNpYmlsaXR5JykgPT09ICd2aXNpYmxlJztcbn07XG5cbmNvbnN0IGlzRGlzYWJsZWQgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFlbGVtZW50IHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5kaXNhYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZWxlbWVudC5kaXNhYmxlZDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSAhPT0gJ2ZhbHNlJztcbn07XG5cbmNvbnN0IGZpbmRTaGFkb3dSb290ID0gZWxlbWVudCA9PiB7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuXG5cbiAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3Qgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICByZXR1cm4gcm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyByb290IDogbnVsbDtcbiAgfVxuXG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9IC8vIHdoZW4gd2UgZG9uJ3QgZmluZCBhIHNoYWRvdyByb290XG5cblxuICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZpbmRTaGFkb3dSb290KGVsZW1lbnQucGFyZW50Tm9kZSk7XG59O1xuXG5jb25zdCBub29wID0gKCkgPT4ge307XG4vKipcbiAqIFRyaWNrIHRvIHJlc3RhcnQgYW4gZWxlbWVudCdzIGFuaW1hdGlvblxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4gdm9pZFxuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cuY2hhcmlzdGhlby5pby9ibG9nLzIwMjEvMDIvcmVzdGFydC1hLWNzcy1hbmltYXRpb24td2l0aC1qYXZhc2NyaXB0LyNyZXN0YXJ0aW5nLWEtY3NzLWFuaW1hdGlvblxuICovXG5cblxuY29uc3QgcmVmbG93ID0gZWxlbWVudCA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG59O1xuXG5jb25zdCBnZXRqUXVlcnkgPSAoKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBqUXVlcnlcbiAgfSA9IHdpbmRvdztcblxuICBpZiAoalF1ZXJ5ICYmICFkb2N1bWVudC5ib2R5Lmhhc0F0dHJpYnV0ZSgnZGF0YS1icy1uby1qcXVlcnknKSkge1xuICAgIHJldHVybiBqUXVlcnk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MgPSBbXTtcblxuY29uc3Qgb25ET01Db250ZW50TG9hZGVkID0gY2FsbGJhY2sgPT4ge1xuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgLy8gYWRkIGxpc3RlbmVyIG9uIHRoZSBmaXJzdCBjYWxsIHdoZW4gdGhlIGRvY3VtZW50IGlzIGluIGxvYWRpbmcgc3RhdGVcbiAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgICAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn07XG5cbmNvbnN0IGlzUlRMID0gKCkgPT4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciA9PT0gJ3J0bCc7XG5cbmNvbnN0IGRlZmluZUpRdWVyeVBsdWdpbiA9IHBsdWdpbiA9PiB7XG4gIG9uRE9NQ29udGVudExvYWRlZCgoKSA9PiB7XG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gICAgaWYgKCQpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBwbHVnaW4uTkFNRTtcbiAgICAgIGNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bbmFtZV07XG4gICAgICAkLmZuW25hbWVdID0gcGx1Z2luLmpRdWVyeUludGVyZmFjZTtcbiAgICAgICQuZm5bbmFtZV0uQ29uc3RydWN0b3IgPSBwbHVnaW47XG5cbiAgICAgICQuZm5bbmFtZV0ubm9Db25mbGljdCA9ICgpID0+IHtcbiAgICAgICAgJC5mbltuYW1lXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBleGVjdXRlID0gY2FsbGJhY2sgPT4ge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2soKTtcbiAgfVxufTtcblxuY29uc3QgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiA9IChjYWxsYmFjaywgdHJhbnNpdGlvbkVsZW1lbnQsIHdhaXRGb3JUcmFuc2l0aW9uID0gdHJ1ZSkgPT4ge1xuICBpZiAoIXdhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNTtcbiAgY29uc3QgZW11bGF0ZWREdXJhdGlvbiA9IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRyYW5zaXRpb25FbGVtZW50KSArIGR1cmF0aW9uUGFkZGluZztcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhbmRsZXIgPSAoe1xuICAgIHRhcmdldFxuICB9KSA9PiB7XG4gICAgaWYgKHRhcmdldCAhPT0gdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHRyYW5zaXRpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpO1xuICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICB9O1xuXG4gIHRyYW5zaXRpb25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkVsZW1lbnQpO1xuICAgIH1cbiAgfSwgZW11bGF0ZWREdXJhdGlvbik7XG59O1xuLyoqXG4gKiBSZXR1cm4gdGhlIHByZXZpb3VzL25leHQgZWxlbWVudCBvZiBhIGxpc3QuXG4gKlxuICogQHBhcmFtIHthcnJheX0gbGlzdCAgICBUaGUgbGlzdCBvZiBlbGVtZW50c1xuICogQHBhcmFtIGFjdGl2ZUVsZW1lbnQgICBUaGUgYWN0aXZlIGVsZW1lbnRcbiAqIEBwYXJhbSBzaG91bGRHZXROZXh0ICAgQ2hvb3NlIHRvIGdldCBuZXh0IG9yIHByZXZpb3VzIGVsZW1lbnRcbiAqIEBwYXJhbSBpc0N5Y2xlQWxsb3dlZFxuICogQHJldHVybiB7RWxlbWVudHxlbGVtfSBUaGUgcHJvcGVyIGVsZW1lbnRcbiAqL1xuXG5cbmNvbnN0IGdldE5leHRBY3RpdmVFbGVtZW50ID0gKGxpc3QsIGFjdGl2ZUVsZW1lbnQsIHNob3VsZEdldE5leHQsIGlzQ3ljbGVBbGxvd2VkKSA9PiB7XG4gIGxldCBpbmRleCA9IGxpc3QuaW5kZXhPZihhY3RpdmVFbGVtZW50KTsgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGlmIGN5Y2xlIGlzIGFsbG93ZWRcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuIGxpc3RbIXNob3VsZEdldE5leHQgJiYgaXNDeWNsZUFsbG93ZWQgPyBsaXN0Lmxlbmd0aCAtIDEgOiAwXTtcbiAgfVxuXG4gIGNvbnN0IGxpc3RMZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgaW5kZXggKz0gc2hvdWxkR2V0TmV4dCA/IDEgOiAtMTtcblxuICBpZiAoaXNDeWNsZUFsbG93ZWQpIHtcbiAgICBpbmRleCA9IChpbmRleCArIGxpc3RMZW5ndGgpICUgbGlzdExlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBsaXN0W01hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCBsaXN0TGVuZ3RoIC0gMSkpXTtcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL2V2ZW50LWhhbmRsZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgbmFtZXNwYWNlUmVnZXggPSAvW14uXSooPz1cXC4uKilcXC58LiovO1xuY29uc3Qgc3RyaXBOYW1lUmVnZXggPSAvXFwuLiovO1xuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskLztcbmNvbnN0IGV2ZW50UmVnaXN0cnkgPSB7fTsgLy8gRXZlbnRzIHN0b3JhZ2VcblxubGV0IHVpZEV2ZW50ID0gMTtcbmNvbnN0IGN1c3RvbUV2ZW50cyA9IHtcbiAgbW91c2VlbnRlcjogJ21vdXNlb3ZlcicsXG4gIG1vdXNlbGVhdmU6ICdtb3VzZW91dCdcbn07XG5jb25zdCBjdXN0b21FdmVudHNSZWdleCA9IC9eKG1vdXNlZW50ZXJ8bW91c2VsZWF2ZSkvaTtcbmNvbnN0IG5hdGl2ZUV2ZW50cyA9IG5ldyBTZXQoWydjbGljaycsICdkYmxjbGljaycsICdtb3VzZXVwJywgJ21vdXNlZG93bicsICdjb250ZXh0bWVudScsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZW1vdmUnLCAnc2VsZWN0c3RhcnQnLCAnc2VsZWN0ZW5kJywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnb3JpZW50YXRpb25jaGFuZ2UnLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnLCAncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJsZWF2ZScsICdwb2ludGVyY2FuY2VsJywgJ2dlc3R1cmVzdGFydCcsICdnZXN0dXJlY2hhbmdlJywgJ2dlc3R1cmVlbmQnLCAnZm9jdXMnLCAnYmx1cicsICdjaGFuZ2UnLCAncmVzZXQnLCAnc2VsZWN0JywgJ3N1Ym1pdCcsICdmb2N1c2luJywgJ2ZvY3Vzb3V0JywgJ2xvYWQnLCAndW5sb2FkJywgJ2JlZm9yZXVubG9hZCcsICdyZXNpemUnLCAnbW92ZScsICdET01Db250ZW50TG9hZGVkJywgJ3JlYWR5c3RhdGVjaGFuZ2UnLCAnZXJyb3InLCAnYWJvcnQnLCAnc2Nyb2xsJ10pO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFByaXZhdGUgbWV0aG9kc1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZnVuY3Rpb24gZ2V0VWlkRXZlbnQoZWxlbWVudCwgdWlkKSB7XG4gIHJldHVybiB1aWQgJiYgYCR7dWlkfTo6JHt1aWRFdmVudCsrfWAgfHwgZWxlbWVudC51aWRFdmVudCB8fCB1aWRFdmVudCsrO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudChlbGVtZW50KSB7XG4gIGNvbnN0IHVpZCA9IGdldFVpZEV2ZW50KGVsZW1lbnQpO1xuICBlbGVtZW50LnVpZEV2ZW50ID0gdWlkO1xuICBldmVudFJlZ2lzdHJ5W3VpZF0gPSBldmVudFJlZ2lzdHJ5W3VpZF0gfHwge307XG4gIHJldHVybiBldmVudFJlZ2lzdHJ5W3VpZF07XG59XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoaGFuZGxlci5vbmVPZmYpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgZm4pO1xuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgc2VsZWN0b3IsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgZG9tRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChsZXQge1xuICAgICAgdGFyZ2V0XG4gICAgfSA9IGV2ZW50OyB0YXJnZXQgJiYgdGFyZ2V0ICE9PSB0aGlzOyB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZSkge1xuICAgICAgZm9yIChsZXQgaSA9IGRvbUVsZW1lbnRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudHNbaV0gPT09IHRhcmdldCkge1xuICAgICAgICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XG4gICAgICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsIGV2ZW50LnR5cGUsIHNlbGVjdG9yLCBmbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRhcmdldCwgW2V2ZW50XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIFRvIHBsZWFzZSBFU0xpbnRcblxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRIYW5kbGVyKGV2ZW50cywgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yID0gbnVsbCkge1xuICBjb25zdCB1aWRFdmVudExpc3QgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB1aWRFdmVudExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1t1aWRFdmVudExpc3RbaV1dO1xuXG4gICAgaWYgKGV2ZW50Lm9yaWdpbmFsSGFuZGxlciA9PT0gaGFuZGxlciAmJiBldmVudC5kZWxlZ2F0aW9uU2VsZWN0b3IgPT09IGRlbGVnYXRpb25TZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJhbXMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICBjb25zdCBkZWxlZ2F0aW9uID0gdHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnO1xuICBjb25zdCBvcmlnaW5hbEhhbmRsZXIgPSBkZWxlZ2F0aW9uID8gZGVsZWdhdGlvbkZuIDogaGFuZGxlcjtcbiAgbGV0IHR5cGVFdmVudCA9IGdldFR5cGVFdmVudChvcmlnaW5hbFR5cGVFdmVudCk7XG4gIGNvbnN0IGlzTmF0aXZlID0gbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpO1xuXG4gIGlmICghaXNOYXRpdmUpIHtcbiAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudDtcbiAgfVxuXG4gIHJldHVybiBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdO1xufVxuXG5mdW5jdGlvbiBhZGRIYW5kbGVyKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIG9uZU9mZikge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsVHlwZUV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaGFuZGxlcikge1xuICAgIGhhbmRsZXIgPSBkZWxlZ2F0aW9uRm47XG4gICAgZGVsZWdhdGlvbkZuID0gbnVsbDtcbiAgfSAvLyBpbiBjYXNlIG9mIG1vdXNlZW50ZXIgb3IgbW91c2VsZWF2ZSB3cmFwIHRoZSBoYW5kbGVyIHdpdGhpbiBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGZvciBpdHMgRE9NIHBvc2l0aW9uXG4gIC8vIHRoaXMgcHJldmVudHMgdGhlIGhhbmRsZXIgZnJvbSBiZWluZyBkaXNwYXRjaGVkIHRoZSBzYW1lIHdheSBhcyBtb3VzZW92ZXIgb3IgbW91c2VvdXQgZG9lc1xuXG5cbiAgaWYgKGN1c3RvbUV2ZW50c1JlZ2V4LnRlc3Qob3JpZ2luYWxUeXBlRXZlbnQpKSB7XG4gICAgY29uc3Qgd3JhcEZuID0gZm4gPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBpZiAoZGVsZWdhdGlvbkZuKSB7XG4gICAgICBkZWxlZ2F0aW9uRm4gPSB3cmFwRm4oZGVsZWdhdGlvbkZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlciA9IHdyYXBGbihoYW5kbGVyKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pO1xuICBjb25zdCBldmVudHMgPSBnZXRFdmVudChlbGVtZW50KTtcbiAgY29uc3QgaGFuZGxlcnMgPSBldmVudHNbdHlwZUV2ZW50XSB8fCAoZXZlbnRzW3R5cGVFdmVudF0gPSB7fSk7XG4gIGNvbnN0IHByZXZpb3VzRm4gPSBmaW5kSGFuZGxlcihoYW5kbGVycywgb3JpZ2luYWxIYW5kbGVyLCBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGwpO1xuXG4gIGlmIChwcmV2aW91c0ZuKSB7XG4gICAgcHJldmlvdXNGbi5vbmVPZmYgPSBwcmV2aW91c0ZuLm9uZU9mZiAmJiBvbmVPZmY7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdWlkID0gZ2V0VWlkRXZlbnQob3JpZ2luYWxIYW5kbGVyLCBvcmlnaW5hbFR5cGVFdmVudC5yZXBsYWNlKG5hbWVzcGFjZVJlZ2V4LCAnJykpO1xuICBjb25zdCBmbiA9IGRlbGVnYXRpb24gPyBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIDogYm9vdHN0cmFwSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyKTtcbiAgZm4uZGVsZWdhdGlvblNlbGVjdG9yID0gZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsO1xuICBmbi5vcmlnaW5hbEhhbmRsZXIgPSBvcmlnaW5hbEhhbmRsZXI7XG4gIGZuLm9uZU9mZiA9IG9uZU9mZjtcbiAgZm4udWlkRXZlbnQgPSB1aWQ7XG4gIGhhbmRsZXJzW3VpZF0gPSBmbjtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIGRlbGVnYXRpb24pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpIHtcbiAgY29uc3QgZm4gPSBmaW5kSGFuZGxlcihldmVudHNbdHlwZUV2ZW50XSwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKTtcblxuICBpZiAoIWZuKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIEJvb2xlYW4oZGVsZWdhdGlvblNlbGVjdG9yKSk7XG4gIGRlbGV0ZSBldmVudHNbdHlwZUV2ZW50XVtmbi51aWRFdmVudF07XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyhlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgbmFtZXNwYWNlKSB7XG4gIGNvbnN0IHN0b3JlRWxlbWVudEV2ZW50ID0gZXZlbnRzW3R5cGVFdmVudF0gfHwge307XG4gIE9iamVjdC5rZXlzKHN0b3JlRWxlbWVudEV2ZW50KS5mb3JFYWNoKGhhbmRsZXJLZXkgPT4ge1xuICAgIGlmIChoYW5kbGVyS2V5LmluY2x1ZGVzKG5hbWVzcGFjZSkpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gc3RvcmVFbGVtZW50RXZlbnRbaGFuZGxlcktleV07XG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5vcmlnaW5hbEhhbmRsZXIsIGV2ZW50LmRlbGVnYXRpb25TZWxlY3Rvcik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUV2ZW50KGV2ZW50KSB7XG4gIC8vIGFsbG93IHRvIGdldCB0aGUgbmF0aXZlIGV2ZW50cyBmcm9tIG5hbWVzcGFjZWQgZXZlbnRzICgnY2xpY2suYnMuYnV0dG9uJyAtLT4gJ2NsaWNrJylcbiAgZXZlbnQgPSBldmVudC5yZXBsYWNlKHN0cmlwTmFtZVJlZ2V4LCAnJyk7XG4gIHJldHVybiBjdXN0b21FdmVudHNbZXZlbnRdIHx8IGV2ZW50O1xufVxuXG5jb25zdCBFdmVudEhhbmRsZXIgPSB7XG4gIG9uKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIGZhbHNlKTtcbiAgfSxcblxuICBvbmUoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xuICAgIGFkZEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GbiwgdHJ1ZSk7XG4gIH0sXG5cbiAgb2ZmKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsVHlwZUV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IFtkZWxlZ2F0aW9uLCBvcmlnaW5hbEhhbmRsZXIsIHR5cGVFdmVudF0gPSBub3JtYWxpemVQYXJhbXMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbik7XG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSB0eXBlRXZlbnQgIT09IG9yaWdpbmFsVHlwZUV2ZW50O1xuICAgIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50KGVsZW1lbnQpO1xuICAgIGNvbnN0IGlzTmFtZXNwYWNlID0gb3JpZ2luYWxUeXBlRXZlbnQuc3RhcnRzV2l0aCgnLicpO1xuXG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbEhhbmRsZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBTaW1wbGVzdCBjYXNlOiBoYW5kbGVyIGlzIHBhc3NlZCwgcmVtb3ZlIHRoYXQgbGlzdGVuZXIgT05MWS5cbiAgICAgIGlmICghZXZlbnRzIHx8ICFldmVudHNbdHlwZUV2ZW50XSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIG9yaWdpbmFsSGFuZGxlciwgZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOYW1lc3BhY2UpIHtcbiAgICAgIE9iamVjdC5rZXlzKGV2ZW50cykuZm9yRWFjaChlbGVtZW50RXZlbnQgPT4ge1xuICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCBlbGVtZW50RXZlbnQsIG9yaWdpbmFsVHlwZUV2ZW50LnNsaWNlKDEpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlRWxlbWVudEV2ZW50ID0gZXZlbnRzW3R5cGVFdmVudF0gfHwge307XG4gICAgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmZvckVhY2goa2V5SGFuZGxlcnMgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlcktleSA9IGtleUhhbmRsZXJzLnJlcGxhY2Uoc3RyaXBVaWRSZWdleCwgJycpO1xuXG4gICAgICBpZiAoIWluTmFtZXNwYWNlIHx8IG9yaWdpbmFsVHlwZUV2ZW50LmluY2x1ZGVzKGhhbmRsZXJLZXkpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gc3RvcmVFbGVtZW50RXZlbnRba2V5SGFuZGxlcnNdO1xuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5vcmlnaW5hbEhhbmRsZXIsIGV2ZW50LmRlbGVnYXRpb25TZWxlY3Rvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpZ2dlcihlbGVtZW50LCBldmVudCwgYXJncykge1xuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCAkID0gZ2V0alF1ZXJ5KCk7XG4gICAgY29uc3QgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KGV2ZW50KTtcbiAgICBjb25zdCBpbk5hbWVzcGFjZSA9IGV2ZW50ICE9PSB0eXBlRXZlbnQ7XG4gICAgY29uc3QgaXNOYXRpdmUgPSBuYXRpdmVFdmVudHMuaGFzKHR5cGVFdmVudCk7XG4gICAgbGV0IGpRdWVyeUV2ZW50O1xuICAgIGxldCBidWJibGVzID0gdHJ1ZTtcbiAgICBsZXQgbmF0aXZlRGlzcGF0Y2ggPSB0cnVlO1xuICAgIGxldCBkZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgbGV0IGV2dCA9IG51bGw7XG5cbiAgICBpZiAoaW5OYW1lc3BhY2UgJiYgJCkge1xuICAgICAgalF1ZXJ5RXZlbnQgPSAkLkV2ZW50KGV2ZW50LCBhcmdzKTtcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihqUXVlcnlFdmVudCk7XG4gICAgICBidWJibGVzID0gIWpRdWVyeUV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7XG4gICAgICBuYXRpdmVEaXNwYXRjaCA9ICFqUXVlcnlFdmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpO1xuICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGpRdWVyeUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgIH1cblxuICAgIGlmIChpc05hdGl2ZSkge1xuICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgIGV2dC5pbml0RXZlbnQodHlwZUV2ZW50LCBidWJibGVzLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgIGJ1YmJsZXMsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gLy8gbWVyZ2UgY3VzdG9tIGluZm9ybWF0aW9uIGluIG91ciBldmVudFxuXG5cbiAgICBpZiAodHlwZW9mIGFyZ3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldnQsIGtleSwge1xuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmdzW2tleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChuYXRpdmVEaXNwYXRjaCkge1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuXG4gICAgaWYgKGV2dC5kZWZhdWx0UHJldmVudGVkICYmIHR5cGVvZiBqUXVlcnlFdmVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGpRdWVyeUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2dDtcbiAgfVxuXG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGRvbS9kYXRhLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNvbnN0IGVsZW1lbnRNYXAgPSBuZXcgTWFwKCk7XG5jb25zdCBEYXRhID0ge1xuICBzZXQoZWxlbWVudCwga2V5LCBpbnN0YW5jZSkge1xuICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIGVsZW1lbnRNYXAuc2V0KGVsZW1lbnQsIG5ldyBNYXAoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KTsgLy8gbWFrZSBpdCBjbGVhciB3ZSBvbmx5IHdhbnQgb25lIGluc3RhbmNlIHBlciBlbGVtZW50XG4gICAgLy8gY2FuIGJlIHJlbW92ZWQgbGF0ZXIgd2hlbiBtdWx0aXBsZSBrZXkvaW5zdGFuY2VzIGFyZSBmaW5lIHRvIGJlIHVzZWRcblxuICAgIGlmICghaW5zdGFuY2VNYXAuaGFzKGtleSkgJiYgaW5zdGFuY2VNYXAuc2l6ZSAhPT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEJvb3RzdHJhcCBkb2Vzbid0IGFsbG93IG1vcmUgdGhhbiBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnQuIEJvdW5kIGluc3RhbmNlOiAke0FycmF5LmZyb20oaW5zdGFuY2VNYXAua2V5cygpKVswXX0uYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2VNYXAuc2V0KGtleSwgaW5zdGFuY2UpO1xuICB9LFxuXG4gIGdldChlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50TWFwLmdldChlbGVtZW50KS5nZXQoa2V5KSB8fCBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIHJlbW92ZShlbGVtZW50LCBrZXkpIHtcbiAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2VNYXAgPSBlbGVtZW50TWFwLmdldChlbGVtZW50KTtcbiAgICBpbnN0YW5jZU1hcC5kZWxldGUoa2V5KTsgLy8gZnJlZSB1cCBlbGVtZW50IHJlZmVyZW5jZXMgaWYgdGhlcmUgYXJlIG5vIGluc3RhbmNlcyBsZWZ0IGZvciBhbiBlbGVtZW50XG5cbiAgICBpZiAoaW5zdGFuY2VNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgZWxlbWVudE1hcC5kZWxldGUoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogYmFzZS1jb21wb25lbnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgVkVSU0lPTiA9ICc1LjEuMyc7XG5cbmNsYXNzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgZWxlbWVudCA9IGdldEVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICBEYXRhLnNldCh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgRGF0YS5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4ge1xuICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIF9xdWV1ZUNhbGxiYWNrKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkID0gdHJ1ZSkge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIGVsZW1lbnQsIGlzQW5pbWF0ZWQpO1xuICB9XG4gIC8qKiBTdGF0aWMgKi9cblxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIERhdGEuZ2V0KGdldEVsZW1lbnQoZWxlbWVudCksIHRoaXMuREFUQV9LRVkpO1xuICB9XG5cbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fCBuZXcgdGhpcyhlbGVtZW50LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGwpO1xuICB9XG5cbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgIHJldHVybiBWRVJTSU9OO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IGhhdmUgdG8gaW1wbGVtZW50IHRoZSBzdGF0aWMgbWV0aG9kIFwiTkFNRVwiLCBmb3IgZWFjaCBjb21wb25lbnQhJyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgIHJldHVybiBgYnMuJHt0aGlzLk5BTUV9YDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRVZFTlRfS0VZKCkge1xuICAgIHJldHVybiBgLiR7dGhpcy5EQVRBX0tFWX1gO1xuICB9XG5cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL2NvbXBvbmVudC1mdW5jdGlvbnMuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBlbmFibGVEaXNtaXNzVHJpZ2dlciA9IChjb21wb25lbnQsIG1ldGhvZCA9ICdoaWRlJykgPT4ge1xuICBjb25zdCBjbGlja0V2ZW50ID0gYGNsaWNrLmRpc21pc3Mke2NvbXBvbmVudC5FVkVOVF9LRVl9YDtcbiAgY29uc3QgbmFtZSA9IGNvbXBvbmVudC5OQU1FO1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIGNsaWNrRXZlbnQsIGBbZGF0YS1icy1kaXNtaXNzPVwiJHtuYW1lfVwiXWAsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpIHx8IHRoaXMuY2xvc2VzdChgLiR7bmFtZX1gKTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldCk7IC8vIE1ldGhvZCBhcmd1bWVudCBpcyBsZWZ0LCBmb3IgQWxlcnQgYW5kIG9ubHksIGFzIGl0IGRvZXNuJ3QgaW1wbGVtZW50IHRoZSAnaGlkZScgbWV0aG9kXG5cbiAgICBpbnN0YW5jZVttZXRob2RdKCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBhbGVydC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJGQgPSAnYWxlcnQnO1xuY29uc3QgREFUQV9LRVkkYyA9ICdicy5hbGVydCc7XG5jb25zdCBFVkVOVF9LRVkkYyA9IGAuJHtEQVRBX0tFWSRjfWA7XG5jb25zdCBFVkVOVF9DTE9TRSA9IGBjbG9zZSR7RVZFTlRfS0VZJGN9YDtcbmNvbnN0IEVWRU5UX0NMT1NFRCA9IGBjbG9zZWQke0VWRU5UX0tFWSRjfWA7XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkNSA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQ4ID0gJ3Nob3cnO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIEFsZXJ0IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGQ7XG4gIH0gLy8gUHVibGljXG5cblxuICBjbG9zZSgpIHtcbiAgICBjb25zdCBjbG9zZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xPU0UpO1xuXG4gICAgaWYgKGNsb3NlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckOCk7XG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDUpO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9kZXN0cm95RWxlbWVudCgpLCB0aGlzLl9lbGVtZW50LCBpc0FuaW1hdGVkKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZGVzdHJveUVsZW1lbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcblxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFRCk7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IEFsZXJ0LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKEFsZXJ0LCAnY2xvc2UnKTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5BbGVydCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihBbGVydCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogYnV0dG9uLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkYyA9ICdidXR0b24nO1xuY29uc3QgREFUQV9LRVkkYiA9ICdicy5idXR0b24nO1xuY29uc3QgRVZFTlRfS0VZJGIgPSBgLiR7REFUQV9LRVkkYn1gO1xuY29uc3QgREFUQV9BUElfS0VZJDcgPSAnLmRhdGEtYXBpJztcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFJDMgPSAnYWN0aXZlJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFJDUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJztcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJJDYgPSBgY2xpY2ske0VWRU5UX0tFWSRifSR7REFUQV9BUElfS0VZJDd9YDtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgLy8gR2V0dGVyc1xuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkYztcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHRvZ2dsZSgpIHtcbiAgICAvLyBUb2dnbGUgY2xhc3MgYW5kIHN5bmMgdGhlIGBhcmlhLXByZXNzZWRgIGF0dHJpYnV0ZSB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGAudG9nZ2xlKClgIG1ldGhvZFxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoQ0xBU1NfTkFNRV9BQ1RJVkUkMykpO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBCdXR0b24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcblxuICAgICAgaWYgKGNvbmZpZyA9PT0gJ3RvZ2dsZScpIHtcbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNiwgU0VMRUNUT1JfREFUQV9UT0dHTEUkNSwgZXZlbnQgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQuY2xvc2VzdChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1KTtcbiAgY29uc3QgZGF0YSA9IEJ1dHRvbi5nZXRPckNyZWF0ZUluc3RhbmNlKGJ1dHRvbik7XG4gIGRhdGEudG9nZ2xlKCk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5CdXR0b24gdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQnV0dG9uKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBkb20vbWFuaXB1bGF0b3IuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh2YWwpIHtcbiAgaWYgKHZhbCA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsID09PSAnZmFsc2UnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHZhbCA9PT0gTnVtYmVyKHZhbCkudG9TdHJpbmcoKSkge1xuICAgIHJldHVybiBOdW1iZXIodmFsKTtcbiAgfVxuXG4gIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJ251bGwnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhS2V5KGtleSkge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoL1tBLVpdL2csIGNociA9PiBgLSR7Y2hyLnRvTG93ZXJDYXNlKCl9YCk7XG59XG5cbmNvbnN0IE1hbmlwdWxhdG9yID0ge1xuICBzZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gLCB2YWx1ZSk7XG4gIH0sXG5cbiAgcmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKTtcbiAgfSxcblxuICBnZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGVsZW1lbnQuZGF0YXNldCkuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnYnMnKSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgbGV0IHB1cmVLZXkgPSBrZXkucmVwbGFjZSgvXmJzLywgJycpO1xuICAgICAgcHVyZUtleSA9IHB1cmVLZXkuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBwdXJlS2V5LnNsaWNlKDEsIHB1cmVLZXkubGVuZ3RoKTtcbiAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfSxcblxuICBnZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgIHJldHVybiBub3JtYWxpemVEYXRhKGVsZW1lbnQuZ2V0QXR0cmlidXRlKGBkYXRhLWJzLSR7bm9ybWFsaXplRGF0YUtleShrZXkpfWApKTtcbiAgfSxcblxuICBvZmZzZXQoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0XG4gICAgfTtcbiAgfSxcblxuICBwb3NpdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogZWxlbWVudC5vZmZzZXRUb3AsXG4gICAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnRcbiAgICB9O1xuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL3NlbGVjdG9yLWVuZ2luZS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBOT0RFX1RFWFQgPSAzO1xuY29uc3QgU2VsZWN0b3JFbmdpbmUgPSB7XG4gIGZpbmQoc2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLkVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3JBbGwuY2FsbChlbGVtZW50LCBzZWxlY3RvcikpO1xuICB9LFxuXG4gIGZpbmRPbmUoc2VsZWN0b3IsIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3Rvci5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTtcbiAgfSxcblxuICBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHJldHVybiBbXS5jb25jYXQoLi4uZWxlbWVudC5jaGlsZHJlbikuZmlsdGVyKGNoaWxkID0+IGNoaWxkLm1hdGNoZXMoc2VsZWN0b3IpKTtcbiAgfSxcblxuICBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgY29uc3QgcGFyZW50cyA9IFtdO1xuICAgIGxldCBhbmNlc3RvciA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIHdoaWxlIChhbmNlc3RvciAmJiBhbmNlc3Rvci5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgYW5jZXN0b3Iubm9kZVR5cGUgIT09IE5PREVfVEVYVCkge1xuICAgICAgaWYgKGFuY2VzdG9yLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHBhcmVudHMucHVzaChhbmNlc3Rvcik7XG4gICAgICB9XG5cbiAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50cztcbiAgfSxcblxuICBwcmV2KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgbGV0IHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHByZXZpb3VzKSB7XG4gICAgICBpZiAocHJldmlvdXMubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIFtwcmV2aW91c107XG4gICAgICB9XG5cbiAgICAgIHByZXZpb3VzID0gcHJldmlvdXMucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH0sXG5cbiAgbmV4dChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGxldCBuZXh0ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG5cbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIFtuZXh0XTtcbiAgICAgIH1cblxuICAgICAgbmV4dCA9IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfSxcblxuICBmb2N1c2FibGVDaGlsZHJlbihlbGVtZW50KSB7XG4gICAgY29uc3QgZm9jdXNhYmxlcyA9IFsnYScsICdidXR0b24nLCAnaW5wdXQnLCAndGV4dGFyZWEnLCAnc2VsZWN0JywgJ2RldGFpbHMnLCAnW3RhYmluZGV4XScsICdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXSddLm1hcChzZWxlY3RvciA9PiBgJHtzZWxlY3Rvcn06bm90KFt0YWJpbmRleF49XCItXCJdKWApLmpvaW4oJywgJyk7XG4gICAgcmV0dXJuIHRoaXMuZmluZChmb2N1c2FibGVzLCBlbGVtZW50KS5maWx0ZXIoZWwgPT4gIWlzRGlzYWJsZWQoZWwpICYmIGlzVmlzaWJsZShlbCkpO1xuICB9XG5cbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogY2Fyb3VzZWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSRiID0gJ2Nhcm91c2VsJztcbmNvbnN0IERBVEFfS0VZJGEgPSAnYnMuY2Fyb3VzZWwnO1xuY29uc3QgRVZFTlRfS0VZJGEgPSBgLiR7REFUQV9LRVkkYX1gO1xuY29uc3QgREFUQV9BUElfS0VZJDYgPSAnLmRhdGEtYXBpJztcbmNvbnN0IEFSUk9XX0xFRlRfS0VZID0gJ0Fycm93TGVmdCc7XG5jb25zdCBBUlJPV19SSUdIVF9LRVkgPSAnQXJyb3dSaWdodCc7XG5jb25zdCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2hcblxuY29uc3QgU1dJUEVfVEhSRVNIT0xEID0gNDA7XG5jb25zdCBEZWZhdWx0JGEgPSB7XG4gIGludGVydmFsOiA1MDAwLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2xpZGU6IGZhbHNlLFxuICBwYXVzZTogJ2hvdmVyJyxcbiAgd3JhcDogdHJ1ZSxcbiAgdG91Y2g6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSRhID0ge1xuICBpbnRlcnZhbDogJyhudW1iZXJ8Ym9vbGVhbiknLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLFxuICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICB3cmFwOiAnYm9vbGVhbicsXG4gIHRvdWNoOiAnYm9vbGVhbidcbn07XG5jb25zdCBPUkRFUl9ORVhUID0gJ25leHQnO1xuY29uc3QgT1JERVJfUFJFViA9ICdwcmV2JztcbmNvbnN0IERJUkVDVElPTl9MRUZUID0gJ2xlZnQnO1xuY29uc3QgRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0JztcbmNvbnN0IEtFWV9UT19ESVJFQ1RJT04gPSB7XG4gIFtBUlJPV19MRUZUX0tFWV06IERJUkVDVElPTl9SSUdIVCxcbiAgW0FSUk9XX1JJR0hUX0tFWV06IERJUkVDVElPTl9MRUZUXG59O1xuY29uc3QgRVZFTlRfU0xJREUgPSBgc2xpZGUke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9TTElEID0gYHNsaWQke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9LRVlET1dOID0gYGtleWRvd24ke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9NT1VTRUVOVEVSID0gYG1vdXNlZW50ZXIke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9NT1VTRUxFQVZFID0gYG1vdXNlbGVhdmUke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9UT1VDSFNUQVJUID0gYHRvdWNoc3RhcnQke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9UT1VDSE1PVkUgPSBgdG91Y2htb3ZlJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfVE9VQ0hFTkQgPSBgdG91Y2hlbmQke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9QT0lOVEVSRE9XTiA9IGBwb2ludGVyZG93biR7RVZFTlRfS0VZJGF9YDtcbmNvbnN0IEVWRU5UX1BPSU5URVJVUCA9IGBwb2ludGVydXAke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9EUkFHX1NUQVJUID0gYGRyYWdzdGFydCR7RVZFTlRfS0VZJGF9YDtcbmNvbnN0IEVWRU5UX0xPQURfREFUQV9BUEkkMiA9IGBsb2FkJHtFVkVOVF9LRVkkYX0ke0RBVEFfQVBJX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQ1ID0gYGNsaWNrJHtFVkVOVF9LRVkkYX0ke0RBVEFfQVBJX0tFWSQ2fWA7XG5jb25zdCBDTEFTU19OQU1FX0NBUk9VU0VMID0gJ2Nhcm91c2VsJztcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFJDIgPSAnYWN0aXZlJztcbmNvbnN0IENMQVNTX05BTUVfU0xJREUgPSAnc2xpZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9FTkQgPSAnY2Fyb3VzZWwtaXRlbS1lbmQnO1xuY29uc3QgQ0xBU1NfTkFNRV9TVEFSVCA9ICdjYXJvdXNlbC1pdGVtLXN0YXJ0JztcbmNvbnN0IENMQVNTX05BTUVfTkVYVCA9ICdjYXJvdXNlbC1pdGVtLW5leHQnO1xuY29uc3QgQ0xBU1NfTkFNRV9QUkVWID0gJ2Nhcm91c2VsLWl0ZW0tcHJldic7XG5jb25zdCBDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQgPSAncG9pbnRlci1ldmVudCc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkUkMSA9ICcuYWN0aXZlJztcbmNvbnN0IFNFTEVDVE9SX0FDVElWRV9JVEVNID0gJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbSc7XG5jb25zdCBTRUxFQ1RPUl9JVEVNID0gJy5jYXJvdXNlbC1pdGVtJztcbmNvbnN0IFNFTEVDVE9SX0lURU1fSU1HID0gJy5jYXJvdXNlbC1pdGVtIGltZyc7XG5jb25zdCBTRUxFQ1RPUl9ORVhUX1BSRVYgPSAnLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldic7XG5jb25zdCBTRUxFQ1RPUl9JTkRJQ0FUT1JTID0gJy5jYXJvdXNlbC1pbmRpY2F0b3JzJztcbmNvbnN0IFNFTEVDVE9SX0lORElDQVRPUiA9ICdbZGF0YS1icy10YXJnZXRdJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfU0xJREUgPSAnW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b10nO1xuY29uc3QgU0VMRUNUT1JfREFUQV9SSURFID0gJ1tkYXRhLWJzLXJpZGU9XCJjYXJvdXNlbFwiXSc7XG5jb25zdCBQT0lOVEVSX1RZUEVfVE9VQ0ggPSAndG91Y2gnO1xuY29uc3QgUE9JTlRFUl9UWVBFX1BFTiA9ICdwZW4nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIENhcm91c2VsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgdGhpcy50b3VjaFN0YXJ0WCA9IDA7XG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0lORElDQVRPUlMsIHRoaXMuX2VsZW1lbnQpO1xuICAgIHRoaXMuX3RvdWNoU3VwcG9ydGVkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDA7XG4gICAgdGhpcy5fcG9pbnRlckV2ZW50ID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50KTtcblxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JGE7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkYjtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5fc2xpZGUoT1JERVJfTkVYVCk7XG4gIH1cblxuICBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiBpc1Zpc2libGUodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgdGhpcy5fc2xpZGUoT1JERVJfUFJFVik7XG4gIH1cblxuICBwYXVzZShldmVudCkge1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9ORVhUX1BSRVYsIHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgIHRoaXMuY3ljbGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICB9XG5cbiAgY3ljbGUoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZyAmJiB0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl91cGRhdGVJbnRlcnZhbCgpO1xuXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICB0byhpbmRleCkge1xuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KTtcblxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO1xuXG4gICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSUQsICgpID0+IHRoaXMudG8oaW5kZXgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3JkZXIgPSBpbmRleCA+IGFjdGl2ZUluZGV4ID8gT1JERVJfTkVYVCA6IE9SREVSX1BSRVY7XG5cbiAgICB0aGlzLl9zbGlkZShvcmRlciwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCRhLFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9O1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJGIsIGNvbmZpZywgRGVmYXVsdFR5cGUkYSk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9oYW5kbGVTd2lwZSgpIHtcbiAgICBjb25zdCBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcblxuICAgIGlmIChhYnNEZWx0YXggPD0gU1dJUEVfVEhSRVNIT0xEKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWDtcbiAgICB0aGlzLnRvdWNoRGVsdGFYID0gMDtcblxuICAgIGlmICghZGlyZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uID4gMCA/IERJUkVDVElPTl9SSUdIVCA6IERJUkVDVElPTl9MRUZUKTtcbiAgfVxuXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTiwgZXZlbnQgPT4gdGhpcy5fa2V5ZG93bihldmVudCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRUVOVEVSLCBldmVudCA9PiB0aGlzLnBhdXNlKGV2ZW50KSk7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VMRUFWRSwgZXZlbnQgPT4gdGhpcy5jeWNsZShldmVudCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcudG91Y2ggJiYgdGhpcy5fdG91Y2hTdXBwb3J0ZWQpIHtcbiAgICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH1cblxuICBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICBjb25zdCBoYXNQb2ludGVyUGVuVG91Y2ggPSBldmVudCA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fcG9pbnRlckV2ZW50ICYmIChldmVudC5wb2ludGVyVHlwZSA9PT0gUE9JTlRFUl9UWVBFX1BFTiB8fCBldmVudC5wb2ludGVyVHlwZSA9PT0gUE9JTlRFUl9UWVBFX1RPVUNIKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgc3RhcnQgPSBldmVudCA9PiB7XG4gICAgICBpZiAoaGFzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3BvaW50ZXJFdmVudCkge1xuICAgICAgICB0aGlzLnRvdWNoU3RhcnRYID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBtb3ZlID0gZXZlbnQgPT4ge1xuICAgICAgLy8gZW5zdXJlIHN3aXBpbmcgd2l0aCBvbmUgdG91Y2ggYW5kIG5vdCBwaW5jaGluZ1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxID8gMCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFg7XG4gICAgfTtcblxuICAgIGNvbnN0IGVuZCA9IGV2ZW50ID0+IHtcbiAgICAgIGlmIChoYXNQb2ludGVyUGVuVG91Y2goZXZlbnQpKSB7XG4gICAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFuZGxlU3dpcGUoKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gc2V0VGltZW91dChldmVudCA9PiB0aGlzLmN5Y2xlKGV2ZW50KSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSVRFTV9JTUcsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goaXRlbUltZyA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIub24oaXRlbUltZywgRVZFTlRfRFJBR19TVEFSVCwgZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUkRPV04sIGV2ZW50ID0+IHN0YXJ0KGV2ZW50KSk7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUlVQLCBldmVudCA9PiBlbmQoZXZlbnQpKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSFNUQVJULCBldmVudCA9PiBzdGFydChldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNITU9WRSwgZXZlbnQgPT4gbW92ZShldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNIRU5ELCBldmVudCA9PiBlbmQoZXZlbnQpKTtcbiAgICB9XG4gIH1cblxuICBfa2V5ZG93bihldmVudCkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IEtFWV9UT19ESVJFQ1RJT05bZXZlbnQua2V5XTtcblxuICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgdGhpcy5faXRlbXMgPSBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZSA/IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSVRFTSwgZWxlbWVudC5wYXJlbnROb2RlKSA6IFtdO1xuICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICB9XG5cbiAgX2dldEl0ZW1CeU9yZGVyKG9yZGVyLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgY29uc3QgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFQ7XG4gICAgcmV0dXJuIGdldE5leHRBY3RpdmVFbGVtZW50KHRoaXMuX2l0ZW1zLCBhY3RpdmVFbGVtZW50LCBpc05leHQsIHRoaXMuX2NvbmZpZy53cmFwKTtcbiAgfVxuXG4gIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcblxuICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KSk7XG5cbiAgICByZXR1cm4gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJREUsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgIHRvOiB0YXJnZXRJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkge1xuICAgICAgY29uc3QgYWN0aXZlSW5kaWNhdG9yID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkUkMSwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpO1xuICAgICAgYWN0aXZlSW5kaWNhdG9yLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICBhY3RpdmVJbmRpY2F0b3IucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgIGNvbnN0IGluZGljYXRvcnMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lORElDQVRPUiwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKE51bWJlci5wYXJzZUludChpbmRpY2F0b3JzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1icy1zbGlkZS10bycpLCAxMCkgPT09IHRoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KSkge1xuICAgICAgICAgIGluZGljYXRvcnNbaV0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgICAgICBpbmRpY2F0b3JzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3RydWUnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVJbnRlcnZhbCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fYWN0aXZlRWxlbWVudCB8fCBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KTtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRJbnRlcnZhbCA9IE51bWJlci5wYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1pbnRlcnZhbCcpLCAxMCk7XG5cbiAgICBpZiAoZWxlbWVudEludGVydmFsKSB7XG4gICAgICB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSBlbGVtZW50SW50ZXJ2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgIH1cbiAgfVxuXG4gIF9zbGlkZShkaXJlY3Rpb25Pck9yZGVyLCBlbGVtZW50KSB7XG4gICAgY29uc3Qgb3JkZXIgPSB0aGlzLl9kaXJlY3Rpb25Ub09yZGVyKGRpcmVjdGlvbk9yT3JkZXIpO1xuXG4gICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFX0lURU0sIHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgY29uc3QgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgY29uc3QgbmV4dEVsZW1lbnQgPSBlbGVtZW50IHx8IHRoaXMuX2dldEl0ZW1CeU9yZGVyKG9yZGVyLCBhY3RpdmVFbGVtZW50KTtcblxuICAgIGNvbnN0IG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuXG4gICAgY29uc3QgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG4gICAgY29uc3QgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFQ7XG4gICAgY29uc3QgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX1NUQVJUIDogQ0xBU1NfTkFNRV9FTkQ7XG4gICAgY29uc3Qgb3JkZXJDbGFzc05hbWUgPSBpc05leHQgPyBDTEFTU19OQU1FX05FWFQgOiBDTEFTU19OQU1FX1BSRVY7XG5cbiAgICBjb25zdCBldmVudERpcmVjdGlvbk5hbWUgPSB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKTtcblxuICAgIGlmIChuZXh0RWxlbWVudCAmJiBuZXh0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUkMikpIHtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICBpZiAoc2xpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KTtcblxuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBuZXh0RWxlbWVudDtcblxuICAgIGNvbnN0IHRyaWdnZXJTbGlkRXZlbnQgPSAoKSA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxuICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NMSURFKSkge1xuICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChvcmRlckNsYXNzTmFtZSk7XG4gICAgICByZWZsb3cobmV4dEVsZW1lbnQpO1xuICAgICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuXG4gICAgICBjb25zdCBjb21wbGV0ZUNhbGxCYWNrID0gKCkgPT4ge1xuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGRpcmVjdGlvbmFsQ2xhc3NOYW1lLCBvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQyLCBvcmRlckNsYXNzTmFtZSwgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgc2V0VGltZW91dCh0cmlnZ2VyU2xpZEV2ZW50LCAwKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgYWN0aXZlRWxlbWVudCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHRyaWdnZXJTbGlkRXZlbnQoKTtcbiAgICB9XG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgfVxuICB9XG5cbiAgX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uKSB7XG4gICAgaWYgKCFbRElSRUNUSU9OX1JJR0hULCBESVJFQ1RJT05fTEVGVF0uaW5jbHVkZXMoZGlyZWN0aW9uKSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICBpZiAoaXNSVEwoKSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX0xFRlQgPyBPUkRFUl9QUkVWIDogT1JERVJfTkVYVDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWO1xuICB9XG5cbiAgX29yZGVyVG9EaXJlY3Rpb24ob3JkZXIpIHtcbiAgICBpZiAoIVtPUkRFUl9ORVhULCBPUkRFUl9QUkVWXS5pbmNsdWRlcyhvcmRlcikpIHtcbiAgICAgIHJldHVybiBvcmRlcjtcbiAgICB9XG5cbiAgICBpZiAoaXNSVEwoKSkge1xuICAgICAgcmV0dXJuIG9yZGVyID09PSBPUkRFUl9QUkVWID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyID09PSBPUkRFUl9QUkVWID8gRElSRUNUSU9OX1JJR0hUIDogRElSRUNUSU9OX0xFRlQ7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgY2Fyb3VzZWxJbnRlcmZhY2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YSA9IENhcm91c2VsLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnKTtcbiAgICBsZXQge1xuICAgICAgX2NvbmZpZ1xuICAgIH0gPSBkYXRhO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICBfY29uZmlnID0geyAuLi5fY29uZmlnLFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uID0gdHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycgPyBjb25maWcgOiBfY29uZmlnLnNsaWRlO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7YWN0aW9ufVwiYCk7XG4gICAgICB9XG5cbiAgICAgIGRhdGFbYWN0aW9uXSgpO1xuICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCAmJiBfY29uZmlnLnJpZGUpIHtcbiAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgIGRhdGEuY3ljbGUoKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UodGhpcywgY29uZmlnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtcblxuICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQ0FST1VTRUwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0geyAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0YXJnZXQpLFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcylcbiAgICB9O1xuICAgIGNvbnN0IHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1icy1zbGlkZS10bycpO1xuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKHRhcmdldCwgY29uZmlnKTtcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICBDYXJvdXNlbC5nZXRJbnN0YW5jZSh0YXJnZXQpLnRvKHNsaWRlSW5kZXgpO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNSwgU0VMRUNUT1JfREFUQV9TTElERSwgQ2Fyb3VzZWwuZGF0YUFwaUNsaWNrSGFuZGxlcik7XG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJJDIsICgpID0+IHtcbiAgY29uc3QgY2Fyb3VzZWxzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1JJREUpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYXJvdXNlbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBDYXJvdXNlbC5jYXJvdXNlbEludGVyZmFjZShjYXJvdXNlbHNbaV0sIENhcm91c2VsLmdldEluc3RhbmNlKGNhcm91c2Vsc1tpXSkpO1xuICB9XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5DYXJvdXNlbCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihDYXJvdXNlbCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogY29sbGFwc2UuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSRhID0gJ2NvbGxhcHNlJztcbmNvbnN0IERBVEFfS0VZJDkgPSAnYnMuY29sbGFwc2UnO1xuY29uc3QgRVZFTlRfS0VZJDkgPSBgLiR7REFUQV9LRVkkOX1gO1xuY29uc3QgREFUQV9BUElfS0VZJDUgPSAnLmRhdGEtYXBpJztcbmNvbnN0IERlZmF1bHQkOSA9IHtcbiAgdG9nZ2xlOiB0cnVlLFxuICBwYXJlbnQ6IG51bGxcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ5ID0ge1xuICB0b2dnbGU6ICdib29sZWFuJyxcbiAgcGFyZW50OiAnKG51bGx8ZWxlbWVudCknXG59O1xuY29uc3QgRVZFTlRfU0hPVyQ1ID0gYHNob3cke0VWRU5UX0tFWSQ5fWA7XG5jb25zdCBFVkVOVF9TSE9XTiQ1ID0gYHNob3duJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfSElERSQ1ID0gYGhpZGUke0VWRU5UX0tFWSQ5fWA7XG5jb25zdCBFVkVOVF9ISURERU4kNSA9IGBoaWRkZW4ke0VWRU5UX0tFWSQ5fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQ0ID0gYGNsaWNrJHtFVkVOVF9LRVkkOX0ke0RBVEFfQVBJX0tFWSQ1fWA7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckNyA9ICdzaG93JztcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0UgPSAnY29sbGFwc2UnO1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTSU5HID0gJ2NvbGxhcHNpbmcnO1xuY29uc3QgQ0xBU1NfTkFNRV9DT0xMQVBTRUQgPSAnY29sbGFwc2VkJztcbmNvbnN0IENMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOID0gYDpzY29wZSAuJHtDTEFTU19OQU1FX0NPTExBUFNFfSAuJHtDTEFTU19OQU1FX0NPTExBUFNFfWA7XG5jb25zdCBDTEFTU19OQU1FX0hPUklaT05UQUwgPSAnY29sbGFwc2UtaG9yaXpvbnRhbCc7XG5jb25zdCBXSURUSCA9ICd3aWR0aCc7XG5jb25zdCBIRUlHSFQgPSAnaGVpZ2h0JztcbmNvbnN0IFNFTEVDVE9SX0FDVElWRVMgPSAnLmNvbGxhcHNlLnNob3csIC5jb2xsYXBzZS5jb2xsYXBzaW5nJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiY29sbGFwc2VcIl0nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIENvbGxhcHNlIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFtdO1xuICAgIGNvbnN0IHRvZ2dsZUxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW0gPSB0b2dnbGVMaXN0W2ldO1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgY29uc3QgZmlsdGVyRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpLmZpbHRlcihmb3VuZEVsZW0gPT4gZm91bmRFbGVtID09PSB0aGlzLl9lbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdGlhbGl6ZUNoaWxkcmVuKCk7XG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksIHRoaXMuX2lzU2hvd24oKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgfVxuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQ5O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGE7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCB0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgYWN0aXZlcyA9IFtdO1xuICAgIGxldCBhY3RpdmVzRGF0YTtcblxuICAgIGlmICh0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmQoQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4sIHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xuICAgICAgYWN0aXZlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfQUNUSVZFUywgdGhpcy5fY29uZmlnLnBhcmVudCkuZmlsdGVyKGVsZW0gPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKTsgLy8gcmVtb3ZlIGNoaWxkcmVuIGlmIGdyZWF0ZXIgZGVwdGhcbiAgICB9XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHRoaXMuX3NlbGVjdG9yKTtcblxuICAgIGlmIChhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgdGVtcEFjdGl2ZURhdGEgPSBhY3RpdmVzLmZpbmQoZWxlbSA9PiBjb250YWluZXIgIT09IGVsZW0pO1xuICAgICAgYWN0aXZlc0RhdGEgPSB0ZW1wQWN0aXZlRGF0YSA/IENvbGxhcHNlLmdldEluc3RhbmNlKHRlbXBBY3RpdmVEYXRhKSA6IG51bGw7XG5cbiAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQ1KTtcblxuICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhY3RpdmVzLmZvckVhY2goZWxlbUFjdGl2ZSA9PiB7XG4gICAgICBpZiAoY29udGFpbmVyICE9PSBlbGVtQWN0aXZlKSB7XG4gICAgICAgIENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbUFjdGl2ZSwge1xuICAgICAgICAgIHRvZ2dsZTogZmFsc2VcbiAgICAgICAgfSkuaGlkZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgIERhdGEuc2V0KGVsZW1BY3RpdmUsIERBVEFfS0VZJDksIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IDA7XG5cbiAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LCB0cnVlKTtcblxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UsIENMQVNTX05BTUVfU0hPVyQ3KTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQ1KTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICBjb25zdCBzY3JvbGxTaXplID0gYHNjcm9sbCR7Y2FwaXRhbGl6ZWREaW1lbnNpb259YDtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRydWUpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXX1weGA7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFJDUpO1xuXG4gICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dfXB4YDtcbiAgICByZWZsb3codGhpcy5fZWxlbWVudCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICBjb25zdCB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcbiAgICAgIGNvbnN0IGVsZW0gPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRyaWdnZXIpO1xuXG4gICAgICBpZiAoZWxlbSAmJiAhdGhpcy5faXNTaG93bihlbGVtKSkge1xuICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoW3RyaWdnZXJdLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTRSk7XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQ1KTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcbiAgfVxuXG4gIF9pc1Nob3duKGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ3KTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQ5LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgY29uZmlnLnBhcmVudCA9IGdldEVsZW1lbnQoY29uZmlnLnBhcmVudCk7XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkYSwgY29uZmlnLCBEZWZhdWx0VHlwZSQ5KTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2dldERpbWVuc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9IT1JJWk9OVEFMKSA/IFdJRFRIIDogSEVJR0hUO1xuICB9XG5cbiAgX2luaXRpYWxpemVDaGlsZHJlbigpIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmQoQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4sIHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xuICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUkNCwgdGhpcy5fY29uZmlnLnBhcmVudCkuZmlsdGVyKGVsZW0gPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFtlbGVtZW50XSwgdGhpcy5faXNTaG93bihzZWxlY3RlZCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0cmlnZ2VyQXJyYXksIGlzT3Blbikge1xuICAgIGlmICghdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyaWdnZXJBcnJheS5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgaWYgKGlzT3Blbikge1xuICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgIH1cblxuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgIH0pO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IF9jb25maWcgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBfY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQ0LCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0LCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUgPT09ICdBJyB8fCBldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiBldmVudC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuICBjb25zdCBzZWxlY3RvckVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3Rvcik7XG4gIHNlbGVjdG9yRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIHtcbiAgICAgIHRvZ2dsZTogZmFsc2VcbiAgICB9KS50b2dnbGUoKTtcbiAgfSk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Db2xsYXBzZSB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihDb2xsYXBzZSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZHJvcGRvd24uanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQ5ID0gJ2Ryb3Bkb3duJztcbmNvbnN0IERBVEFfS0VZJDggPSAnYnMuZHJvcGRvd24nO1xuY29uc3QgRVZFTlRfS0VZJDggPSBgLiR7REFUQV9LRVkkOH1gO1xuY29uc3QgREFUQV9BUElfS0VZJDQgPSAnLmRhdGEtYXBpJztcbmNvbnN0IEVTQ0FQRV9LRVkkMiA9ICdFc2NhcGUnO1xuY29uc3QgU1BBQ0VfS0VZID0gJ1NwYWNlJztcbmNvbnN0IFRBQl9LRVkkMSA9ICdUYWInO1xuY29uc3QgQVJST1dfVVBfS0VZID0gJ0Fycm93VXAnO1xuY29uc3QgQVJST1dfRE9XTl9LRVkgPSAnQXJyb3dEb3duJztcbmNvbnN0IFJJR0hUX01PVVNFX0JVVFRPTiA9IDI7IC8vIE1vdXNlRXZlbnQuYnV0dG9uIHZhbHVlIGZvciB0aGUgc2Vjb25kYXJ5IGJ1dHRvbiwgdXN1YWxseSB0aGUgcmlnaHQgYnV0dG9uXG5cbmNvbnN0IFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChgJHtBUlJPV19VUF9LRVl9fCR7QVJST1dfRE9XTl9LRVl9fCR7RVNDQVBFX0tFWSQyfWApO1xuY29uc3QgRVZFTlRfSElERSQ0ID0gYGhpZGUke0VWRU5UX0tFWSQ4fWA7XG5jb25zdCBFVkVOVF9ISURERU4kNCA9IGBoaWRkZW4ke0VWRU5UX0tFWSQ4fWA7XG5jb25zdCBFVkVOVF9TSE9XJDQgPSBgc2hvdyR7RVZFTlRfS0VZJDh9YDtcbmNvbnN0IEVWRU5UX1NIT1dOJDQgPSBgc2hvd24ke0VWRU5UX0tFWSQ4fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQzID0gYGNsaWNrJHtFVkVOVF9LRVkkOH0ke0RBVEFfQVBJX0tFWSQ0fWA7XG5jb25zdCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJID0gYGtleWRvd24ke0VWRU5UX0tFWSQ4fSR7REFUQV9BUElfS0VZJDR9YDtcbmNvbnN0IEVWRU5UX0tFWVVQX0RBVEFfQVBJID0gYGtleXVwJHtFVkVOVF9LRVkkOH0ke0RBVEFfQVBJX0tFWSQ0fWA7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckNiA9ICdzaG93JztcbmNvbnN0IENMQVNTX05BTUVfRFJPUFVQID0gJ2Ryb3B1cCc7XG5jb25zdCBDTEFTU19OQU1FX0RST1BFTkQgPSAnZHJvcGVuZCc7XG5jb25zdCBDTEFTU19OQU1FX0RST1BTVEFSVCA9ICdkcm9wc3RhcnQnO1xuY29uc3QgQ0xBU1NfTkFNRV9OQVZCQVIgPSAnbmF2YmFyJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl0nO1xuY29uc3QgU0VMRUNUT1JfTUVOVSA9ICcuZHJvcGRvd24tbWVudSc7XG5jb25zdCBTRUxFQ1RPUl9OQVZCQVJfTkFWID0gJy5uYXZiYXItbmF2JztcbmNvbnN0IFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMgPSAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknO1xuY29uc3QgUExBQ0VNRU5UX1RPUCA9IGlzUlRMKCkgPyAndG9wLWVuZCcgOiAndG9wLXN0YXJ0JztcbmNvbnN0IFBMQUNFTUVOVF9UT1BFTkQgPSBpc1JUTCgpID8gJ3RvcC1zdGFydCcgOiAndG9wLWVuZCc7XG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NID0gaXNSVEwoKSA/ICdib3R0b20tZW5kJyA6ICdib3R0b20tc3RhcnQnO1xuY29uc3QgUExBQ0VNRU5UX0JPVFRPTUVORCA9IGlzUlRMKCkgPyAnYm90dG9tLXN0YXJ0JyA6ICdib3R0b20tZW5kJztcbmNvbnN0IFBMQUNFTUVOVF9SSUdIVCA9IGlzUlRMKCkgPyAnbGVmdC1zdGFydCcgOiAncmlnaHQtc3RhcnQnO1xuY29uc3QgUExBQ0VNRU5UX0xFRlQgPSBpc1JUTCgpID8gJ3JpZ2h0LXN0YXJ0JyA6ICdsZWZ0LXN0YXJ0JztcbmNvbnN0IERlZmF1bHQkOCA9IHtcbiAgb2Zmc2V0OiBbMCwgMl0sXG4gIGJvdW5kYXJ5OiAnY2xpcHBpbmdQYXJlbnRzJyxcbiAgcmVmZXJlbmNlOiAndG9nZ2xlJyxcbiAgZGlzcGxheTogJ2R5bmFtaWMnLFxuICBwb3BwZXJDb25maWc6IG51bGwsXG4gIGF1dG9DbG9zZTogdHJ1ZVxufTtcbmNvbnN0IERlZmF1bHRUeXBlJDggPSB7XG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50fG9iamVjdCknLFxuICBkaXNwbGF5OiAnc3RyaW5nJyxcbiAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gIGF1dG9DbG9zZTogJyhib29sZWFufHN0cmluZyknXG59O1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIERyb3Bkb3duIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCk7XG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcbiAgfSAvLyBHZXR0ZXJzXG5cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQkODtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlJDg7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkOTtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTaG93bigpID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgdGhpcy5faXNTaG93bih0aGlzLl9tZW51KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgfTtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDQsIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gRHJvcGRvd24uZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7IC8vIFRvdGFsbHkgZGlzYWJsZSBQb3BwZXIgZm9yIERyb3Bkb3ducyBpbiBOYXZiYXJcblxuICAgIGlmICh0aGlzLl9pbk5hdmJhcikge1xuICAgICAgTWFuaXB1bGF0b3Iuc2V0RGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJywgJ25vbmUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wcGVyKHBhcmVudCk7XG4gICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbFxuXG5cbiAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICFwYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKSkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbSA9PiBFdmVudEhhbmRsZXIub24oZWxlbSwgJ21vdXNlb3ZlcicsIG5vb3ApKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuXG4gICAgdGhpcy5fbWVudS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQ2KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckNik7XG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQ0LCByZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX2lzU2hvd24odGhpcy5fbWVudSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH07XG5cbiAgICB0aGlzLl9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIudXBkYXRlKCk7XG4gICAgfVxuICB9IC8vIFByaXZhdGVcblxuXG4gIF9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkNCwgcmVsYXRlZFRhcmdldCk7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcblxuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbSA9PiBFdmVudEhhbmRsZXIub2ZmKGVsZW0sICdtb3VzZW92ZXInLCBub29wKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ2KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICBNYW5pcHVsYXRvci5yZW1vdmVEYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInKTtcbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4kNCwgcmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi5jb25maWdcbiAgICB9O1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJDksIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWZlcmVuY2UgPT09ICdvYmplY3QnICYmICFpc0VsZW1lbnQoY29uZmlnLnJlZmVyZW5jZSkgJiYgdHlwZW9mIGNvbmZpZy5yZWZlcmVuY2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBQb3BwZXIgdmlydHVhbCBlbGVtZW50cyByZXF1aXJlIGEgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG1ldGhvZFxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtOQU1FJDkudG9VcHBlckNhc2UoKX06IE9wdGlvbiBcInJlZmVyZW5jZVwiIHByb3ZpZGVkIHR5cGUgXCJvYmplY3RcIiB3aXRob3V0IGEgcmVxdWlyZWQgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIiBtZXRob2QuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9jcmVhdGVQb3BwZXIocGFyZW50KSB7XG4gICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgIH1cblxuICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudDtcbiAgICB9IGVsc2UgaWYgKGlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IGdldEVsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlO1xuICAgIH1cblxuICAgIGNvbnN0IHBvcHBlckNvbmZpZyA9IHRoaXMuX2dldFBvcHBlckNvbmZpZygpO1xuXG4gICAgY29uc3QgaXNEaXNwbGF5U3RhdGljID0gcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5maW5kKG1vZGlmaWVyID0+IG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlcycgJiYgbW9kaWZpZXIuZW5hYmxlZCA9PT0gZmFsc2UpO1xuICAgIHRoaXMuX3BvcHBlciA9IFBvcHBlci5jcmVhdGVQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgcG9wcGVyQ29uZmlnKTtcblxuICAgIGlmIChpc0Rpc3BsYXlTdGF0aWMpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdzdGF0aWMnKTtcbiAgICB9XG4gIH1cblxuICBfaXNTaG93bihlbGVtZW50ID0gdGhpcy5fZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNik7XG4gIH1cblxuICBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLm5leHQodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF07XG4gIH1cblxuICBfZ2V0UGxhY2VtZW50KCkge1xuICAgIGNvbnN0IHBhcmVudERyb3Bkb3duID0gdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BFTkQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX1JJR0hUO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QU1RBUlQpKSB7XG4gICAgICByZXR1cm4gUExBQ0VNRU5UX0xFRlQ7XG4gICAgfSAvLyBXZSBuZWVkIHRvIHRyaW0gdGhlIHZhbHVlIGJlY2F1c2UgY3VzdG9tIHByb3BlcnRpZXMgY2FuIGFsc28gaW5jbHVkZSBzcGFjZXNcblxuXG4gICAgY29uc3QgaXNFbmQgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtcG9zaXRpb24nKS50cmltKCkgPT09ICdlbmQnO1xuXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BVUCkpIHtcbiAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9UT1BFTkQgOiBQTEFDRU1FTlRfVE9QO1xuICAgIH1cblxuICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NO1xuICB9XG5cbiAgX2RldGVjdE5hdmJhcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbG9zZXN0KGAuJHtDTEFTU19OQU1FX05BVkJBUn1gKSAhPT0gbnVsbDtcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgb2Zmc2V0XG4gICAgfSA9IHRoaXMuX2NvbmZpZztcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHBvcHBlckRhdGEgPT4gb2Zmc2V0KHBvcHBlckRhdGEsIHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgIGNvbnN0IGRlZmF1bHRCc1BvcHBlckNvbmZpZyA9IHtcbiAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICBtb2RpZmllcnM6IFt7XG4gICAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICB9XG4gICAgICB9XVxuICAgIH07IC8vIERpc2FibGUgUG9wcGVyIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgZGVmYXVsdEJzUG9wcGVyQ29uZmlnLm1vZGlmaWVycyA9IFt7XG4gICAgICAgIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4geyAuLi5kZWZhdWx0QnNQb3BwZXJDb25maWcsXG4gICAgICAuLi4odHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGRlZmF1bHRCc1BvcHBlckNvbmZpZykgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKVxuICAgIH07XG4gIH1cblxuICBfc2VsZWN0TWVudUl0ZW0oe1xuICAgIGtleSxcbiAgICB0YXJnZXRcbiAgfSkge1xuICAgIGNvbnN0IGl0ZW1zID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9WSVNJQkxFX0lURU1TLCB0aGlzLl9tZW51KS5maWx0ZXIoaXNWaXNpYmxlKTtcblxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxuICAgIC8vIGFsbG93IGN5Y2xpbmcgdG8gZ2V0IHRoZSBsYXN0IGl0ZW0gaW4gY2FzZSBrZXkgZXF1YWxzIEFSUk9XX1VQX0tFWVxuXG5cbiAgICBnZXROZXh0QWN0aXZlRWxlbWVudChpdGVtcywgdGFyZ2V0LCBrZXkgPT09IEFSUk9XX0RPV05fS0VZLCAhaXRlbXMuaW5jbHVkZXModGFyZ2V0KSkuZm9jdXMoKTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgY2xlYXJNZW51cyhldmVudCkge1xuICAgIGlmIChldmVudCAmJiAoZXZlbnQuYnV0dG9uID09PSBSSUdIVF9NT1VTRV9CVVRUT04gfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkkMSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gRHJvcGRvd24uZ2V0SW5zdGFuY2UodG9nZ2xlc1tpXSk7XG5cbiAgICAgIGlmICghY29udGV4dCB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjb250ZXh0Ll9pc1Nob3duKCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IGNvbnRleHQuX2VsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb25zdCBjb21wb3NlZFBhdGggPSBldmVudC5jb21wb3NlZFBhdGgoKTtcbiAgICAgICAgY29uc3QgaXNNZW51VGFyZ2V0ID0gY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX21lbnUpO1xuXG4gICAgICAgIGlmIChjb21wb3NlZFBhdGguaW5jbHVkZXMoY29udGV4dC5fZWxlbWVudCkgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gJ2luc2lkZScgJiYgIWlzTWVudVRhcmdldCB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSAnb3V0c2lkZScgJiYgaXNNZW51VGFyZ2V0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gVGFiIG5hdmlnYXRpb24gdGhyb3VnaCB0aGUgZHJvcGRvd24gbWVudSBvciBldmVudHMgZnJvbSBjb250YWluZWQgaW5wdXRzIHNob3VsZG4ndCBjbG9zZSB0aGUgbWVudVxuXG5cbiAgICAgICAgaWYgKGNvbnRleHQuX21lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXkgPT09IFRBQl9LRVkkMSB8fCAvaW5wdXR8c2VsZWN0fG9wdGlvbnx0ZXh0YXJlYXxmb3JtL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgIHJldHVybiBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKGVsZW1lbnQpIHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHN0YXRpYyBkYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID8gZXZlbnQua2V5ID09PSBTUEFDRV9LRVkgfHwgZXZlbnQua2V5ICE9PSBFU0NBUEVfS0VZJDIgJiYgKGV2ZW50LmtleSAhPT0gQVJST1dfRE9XTl9LRVkgJiYgZXZlbnQua2V5ICE9PSBBUlJPV19VUF9LRVkgfHwgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfTUVOVSkpIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQua2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuXG4gICAgaWYgKCFpc0FjdGl2ZSAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkkMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFRvZ2dsZUJ1dHRvbiA9IHRoaXMubWF0Y2hlcyhTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzKSA/IHRoaXMgOiBTZWxlY3RvckVuZ2luZS5wcmV2KHRoaXMsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMpWzBdO1xuICAgIGNvbnN0IGluc3RhbmNlID0gRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZShnZXRUb2dnbGVCdXR0b24pO1xuXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSQyKSB7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gQVJST1dfVVBfS0VZIHx8IGV2ZW50LmtleSA9PT0gQVJST1dfRE9XTl9LRVkpIHtcbiAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2hvdygpO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZS5fc2VsZWN0TWVudUl0ZW0oZXZlbnQpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFpc0FjdGl2ZSB8fCBldmVudC5rZXkgPT09IFNQQUNFX0tFWSkge1xuICAgICAgRHJvcGRvd24uY2xlYXJNZW51cygpO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpO1xuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9NRU5VLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpO1xuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQzLCBEcm9wZG93bi5jbGVhck1lbnVzKTtcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLmNsZWFyTWVudXMpO1xuRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKS50b2dnbGUoKTtcbn0pO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLkRyb3Bkb3duIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKERyb3Bkb3duKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL3Njcm9sbEJhci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID0gJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnO1xuY29uc3QgU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQgPSAnLnN0aWNreS10b3AnO1xuXG5jbGFzcyBTY3JvbGxCYXJIZWxwZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgcmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnRXaWR0aCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuXG4gICAgdGhpcy5fZGlzYWJsZU92ZXJGbG93KCk7IC8vIGdpdmUgcGFkZGluZyB0byBlbGVtZW50IHRvIGJhbGFuY2UgdGhlIGhpZGRlbiBzY3JvbGxiYXIgd2lkdGhcblxuXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ3BhZGRpbmdSaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aCk7IC8vIHRyaWNrOiBXZSBhZGp1c3QgcG9zaXRpdmUgcGFkZGluZ1JpZ2h0IGFuZCBuZWdhdGl2ZSBtYXJnaW5SaWdodCB0byBzdGlja3ktdG9wIGVsZW1lbnRzIHRvIGtlZXAgc2hvd2luZyBmdWxsd2lkdGhcblxuXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgKyB3aWR0aCk7XG5cbiAgICB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0JywgY2FsY3VsYXRlZFZhbHVlID0+IGNhbGN1bGF0ZWRWYWx1ZSAtIHdpZHRoKTtcbiAgfVxuXG4gIF9kaXNhYmxlT3ZlckZsb3coKSB7XG4gICAgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgJ292ZXJmbG93Jyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gIH1cblxuICBfc2V0RWxlbWVudEF0dHJpYnV0ZXMoc2VsZWN0b3IsIHN0eWxlUHJvcCwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcblxuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBpZiAoZWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxiYXJXaWR0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcCk7XG5cbiAgICAgIGNvbnN0IGNhbGN1bGF0ZWRWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpW3N0eWxlUHJvcF07XG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSBgJHtjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKX1weGA7XG4gICAgfTtcblxuICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgJ292ZXJmbG93Jyk7XG5cbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnKTtcblxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfRklYRURfQ09OVEVOVCwgJ3BhZGRpbmdSaWdodCcpO1xuXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgJ21hcmdpblJpZ2h0Jyk7XG4gIH1cblxuICBfc2F2ZUluaXRpYWxBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKSB7XG4gICAgY29uc3QgYWN0dWFsVmFsdWUgPSBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF07XG5cbiAgICBpZiAoYWN0dWFsVmFsdWUpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wLCBhY3R1YWxWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoc2VsZWN0b3IsIHN0eWxlUHJvcCkge1xuICAgIGNvbnN0IG1hbmlwdWxhdGlvbkNhbGxCYWNrID0gZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShzdHlsZVByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApO1xuICAgICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgbWFuaXB1bGF0aW9uQ2FsbEJhY2spO1xuICB9XG5cbiAgX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIGNhbGxCYWNrKSB7XG4gICAgaWYgKGlzRWxlbWVudChzZWxlY3RvcikpIHtcbiAgICAgIGNhbGxCYWNrKHNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvciwgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChjYWxsQmFjayk7XG4gICAgfVxuICB9XG5cbiAgaXNPdmVyZmxvd2luZygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXaWR0aCgpID4gMDtcbiAgfVxuXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdXRpbC9iYWNrZHJvcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBEZWZhdWx0JDcgPSB7XG4gIGNsYXNzTmFtZTogJ21vZGFsLWJhY2tkcm9wJyxcbiAgaXNWaXNpYmxlOiB0cnVlLFxuICAvLyBpZiBmYWxzZSwgd2UgdXNlIHRoZSBiYWNrZHJvcCBoZWxwZXIgd2l0aG91dCBhZGRpbmcgYW55IGVsZW1lbnQgdG8gdGhlIGRvbVxuICBpc0FuaW1hdGVkOiBmYWxzZSxcbiAgcm9vdEVsZW1lbnQ6ICdib2R5JyxcbiAgLy8gZ2l2ZSB0aGUgY2hvaWNlIHRvIHBsYWNlIGJhY2tkcm9wIHVuZGVyIGRpZmZlcmVudCBlbGVtZW50c1xuICBjbGlja0NhbGxiYWNrOiBudWxsXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkNyA9IHtcbiAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgaXNWaXNpYmxlOiAnYm9vbGVhbicsXG4gIGlzQW5pbWF0ZWQ6ICdib29sZWFuJyxcbiAgcm9vdEVsZW1lbnQ6ICcoZWxlbWVudHxzdHJpbmcpJyxcbiAgY2xpY2tDYWxsYmFjazogJyhmdW5jdGlvbnxudWxsKSdcbn07XG5jb25zdCBOQU1FJDggPSAnYmFja2Ryb3AnO1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFJDQgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckNSA9ICdzaG93JztcbmNvbnN0IEVWRU5UX01PVVNFRE9XTiA9IGBtb3VzZWRvd24uYnMuJHtOQU1FJDh9YDtcblxuY2xhc3MgQmFja2Ryb3Age1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gIH1cblxuICBzaG93KGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9hcHBlbmQoKTtcblxuICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgcmVmbG93KHRoaXMuX2dldEVsZW1lbnQoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDUpO1xuXG4gICAgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKSA9PiB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhpZGUoY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcbiAgICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ1KTtcblxuICAgIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0RWxlbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBiYWNrZHJvcC5jbGFzc05hbWUgPSB0aGlzLl9jb25maWcuY2xhc3NOYW1lO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpIHtcbiAgICAgICAgYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUkNCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBiYWNrZHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0JDcsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9OyAvLyB1c2UgZ2V0RWxlbWVudCgpIHdpdGggdGhlIGRlZmF1bHQgXCJib2R5XCIgdG8gZ2V0IGEgZnJlc2ggRWxlbWVudCBvbiBlYWNoIGluc3RhbnRpYXRpb25cblxuICAgIGNvbmZpZy5yb290RWxlbWVudCA9IGdldEVsZW1lbnQoY29uZmlnLnJvb3RFbGVtZW50KTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ4LCBjb25maWcsIERlZmF1bHRUeXBlJDcpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfYXBwZW5kKCkge1xuICAgIGlmICh0aGlzLl9pc0FwcGVuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY29uZmlnLnJvb3RFbGVtZW50LmFwcGVuZCh0aGlzLl9nZXRFbGVtZW50KCkpO1xuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2dldEVsZW1lbnQoKSwgRVZFTlRfTU9VU0VET1dOLCAoKSA9PiB7XG4gICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKTtcbiAgICB9KTtcbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgaWYgKCF0aGlzLl9pc0FwcGVuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRURPV04pO1xuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcblxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF9lbXVsYXRlQW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgdGhpcy5fZ2V0RWxlbWVudCgpLCB0aGlzLl9jb25maWcuaXNBbmltYXRlZCk7XG4gIH1cblxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvZm9jdXN0cmFwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNvbnN0IERlZmF1bHQkNiA9IHtcbiAgdHJhcEVsZW1lbnQ6IG51bGwsXG4gIC8vIFRoZSBlbGVtZW50IHRvIHRyYXAgZm9jdXMgaW5zaWRlIG9mXG4gIGF1dG9mb2N1czogdHJ1ZVxufTtcbmNvbnN0IERlZmF1bHRUeXBlJDYgPSB7XG4gIHRyYXBFbGVtZW50OiAnZWxlbWVudCcsXG4gIGF1dG9mb2N1czogJ2Jvb2xlYW4nXG59O1xuY29uc3QgTkFNRSQ3ID0gJ2ZvY3VzdHJhcCc7XG5jb25zdCBEQVRBX0tFWSQ3ID0gJ2JzLmZvY3VzdHJhcCc7XG5jb25zdCBFVkVOVF9LRVkkNyA9IGAuJHtEQVRBX0tFWSQ3fWA7XG5jb25zdCBFVkVOVF9GT0NVU0lOJDEgPSBgZm9jdXNpbiR7RVZFTlRfS0VZJDd9YDtcbmNvbnN0IEVWRU5UX0tFWURPV05fVEFCID0gYGtleWRvd24udGFiJHtFVkVOVF9LRVkkN31gO1xuY29uc3QgVEFCX0tFWSA9ICdUYWInO1xuY29uc3QgVEFCX05BVl9GT1JXQVJEID0gJ2ZvcndhcmQnO1xuY29uc3QgVEFCX05BVl9CQUNLV0FSRCA9ICdiYWNrd2FyZCc7XG5cbmNsYXNzIEZvY3VzVHJhcCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbiA9IG51bGw7XG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICB0cmFwRWxlbWVudCxcbiAgICAgIGF1dG9mb2N1c1xuICAgIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAodGhpcy5faXNBY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYXV0b2ZvY3VzKSB7XG4gICAgICB0cmFwRWxlbWVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYoZG9jdW1lbnQsIEVWRU5UX0tFWSQ3KTsgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG5cbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4kMSwgZXZlbnQgPT4gdGhpcy5faGFuZGxlRm9jdXNpbihldmVudCkpO1xuICAgIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9UQUIsIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUtleWRvd24oZXZlbnQpKTtcbiAgICB0aGlzLl9pc0FjdGl2ZSA9IHRydWU7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIEV2ZW50SGFuZGxlci5vZmYoZG9jdW1lbnQsIEVWRU5UX0tFWSQ3KTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfaGFuZGxlRm9jdXNpbihldmVudCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhcmdldFxuICAgIH0gPSBldmVudDtcbiAgICBjb25zdCB7XG4gICAgICB0cmFwRWxlbWVudFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAodGFyZ2V0ID09PSBkb2N1bWVudCB8fCB0YXJnZXQgPT09IHRyYXBFbGVtZW50IHx8IHRyYXBFbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50cyA9IFNlbGVjdG9yRW5naW5lLmZvY3VzYWJsZUNoaWxkcmVuKHRyYXBFbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRyYXBFbGVtZW50LmZvY3VzKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID09PSBUQUJfTkFWX0JBQ0tXQVJEKSB7XG4gICAgICBlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50c1swXS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVLZXlkb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSAhPT0gVEFCX0tFWSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBldmVudC5zaGlmdEtleSA/IFRBQl9OQVZfQkFDS1dBUkQgOiBUQUJfTkFWX0ZPUldBUkQ7XG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQ2LFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ3LCBjb25maWcsIERlZmF1bHRUeXBlJDYpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IG1vZGFsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkNiA9ICdtb2RhbCc7XG5jb25zdCBEQVRBX0tFWSQ2ID0gJ2JzLm1vZGFsJztcbmNvbnN0IEVWRU5UX0tFWSQ2ID0gYC4ke0RBVEFfS0VZJDZ9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQzID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFU0NBUEVfS0VZJDEgPSAnRXNjYXBlJztcbmNvbnN0IERlZmF1bHQkNSA9IHtcbiAgYmFja2Ryb3A6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBmb2N1czogdHJ1ZVxufTtcbmNvbnN0IERlZmF1bHRUeXBlJDUgPSB7XG4gIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gIGZvY3VzOiAnYm9vbGVhbidcbn07XG5jb25zdCBFVkVOVF9ISURFJDMgPSBgaGlkZSR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX0hJREVfUFJFVkVOVEVEID0gYGhpZGVQcmV2ZW50ZWQke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9ISURERU4kMyA9IGBoaWRkZW4ke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9TSE9XJDMgPSBgc2hvdyR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX1NIT1dOJDMgPSBgc2hvd24ke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9SRVNJWkUgPSBgcmVzaXplJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfRElTTUlTUyA9IGBjbGljay5kaXNtaXNzJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfTU9VU0VVUF9ESVNNSVNTID0gYG1vdXNldXAuZGlzbWlzcyR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTID0gYG1vdXNlZG93bi5kaXNtaXNzJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMiA9IGBjbGljayR7RVZFTlRfS0VZJDZ9JHtEQVRBX0FQSV9LRVkkM31gO1xuY29uc3QgQ0xBU1NfTkFNRV9PUEVOID0gJ21vZGFsLW9wZW4nO1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFJDMgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckNCA9ICdzaG93JztcbmNvbnN0IENMQVNTX05BTUVfU1RBVElDID0gJ21vZGFsLXN0YXRpYyc7XG5jb25zdCBPUEVOX1NFTEVDVE9SJDEgPSAnLm1vZGFsLnNob3cnO1xuY29uc3QgU0VMRUNUT1JfRElBTE9HID0gJy5tb2RhbC1kaWFsb2cnO1xuY29uc3QgU0VMRUNUT1JfTU9EQUxfQk9EWSA9ICcubW9kYWwtYm9keSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQyID0gJ1tkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCJdJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBNb2RhbCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9kaWFsb2cgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgdGhpcy5fZWxlbWVudCk7XG4gICAgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKTtcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKCk7XG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9zY3JvbGxCYXIgPSBuZXcgU2Nyb2xsQmFySGVscGVyKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDU7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkNjtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1ckMywge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5faXNBbmltYXRlZCgpKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3Njcm9sbEJhci5oaWRlKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9PUEVOKTtcblxuICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuXG4gICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZGlhbG9nLCBFVkVOVF9NT1VTRURPV05fRElTTUlTUywgKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRVVQX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3Nob3dCYWNrZHJvcCgoKSA9PiB0aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFJDMpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMuX2lzQW5pbWF0ZWQoKTtcblxuICAgIGlmIChpc0FuaW1hdGVkKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckNCk7XG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMSUNLX0RJU01JU1MpO1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZGlhbG9nLCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHRoaXMuX2hpZGVNb2RhbCgpLCB0aGlzLl9lbGVtZW50LCBpc0FuaW1hdGVkKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgW3dpbmRvdywgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKGh0bWxFbGVtZW50ID0+IEV2ZW50SGFuZGxlci5vZmYoaHRtbEVsZW1lbnQsIEVWRU5UX0tFWSQ2KSk7XG5cbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKCk7XG5cbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpO1xuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgaGFuZGxlVXBkYXRlKCkge1xuICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICBpc1Zpc2libGU6IEJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKSxcbiAgICAgIC8vICdzdGF0aWMnIG9wdGlvbiB3aWxsIGJlIHRyYW5zbGF0ZWQgdG8gdHJ1ZSwgYW5kIGJvb2xlYW5zIHdpbGwga2VlcCB0aGVpciB2YWx1ZVxuICAgICAgaXNBbmltYXRlZDogdGhpcy5faXNBbmltYXRlZCgpXG4gICAgfSk7XG4gIH1cblxuICBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh7XG4gICAgICB0cmFwRWxlbWVudDogdGhpcy5fZWxlbWVudFxuICAgIH0pO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkNSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ2LCBjb25maWcsIERlZmF1bHRUeXBlJDUpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9pc0FuaW1hdGVkKCk7XG5cbiAgICBjb25zdCBtb2RhbEJvZHkgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX01PREFMX0JPRFksIHRoaXMuX2RpYWxvZyk7XG5cbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG5cbiAgICBpZiAobW9kYWxCb2R5KSB7XG4gICAgICBtb2RhbEJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNBbmltYXRlZCkge1xuICAgICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckNCk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2ZvY3VzdHJhcC5hY3RpdmF0ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDMsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2sodHJhbnNpdGlvbkNvbXBsZXRlLCB0aGlzLl9kaWFsb2csIGlzQW5pbWF0ZWQpO1xuICB9XG5cbiAgX3NldEVzY2FwZUV2ZW50KCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkkMSkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkkMSkge1xuICAgICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfUkVTSVpFLCAoKSA9PiB0aGlzLl9hZGp1c3REaWFsb2coKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYod2luZG93LCBFVkVOVF9SRVNJWkUpO1xuICAgIH1cbiAgfVxuXG4gIF9oaWRlTW9kYWwoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcblxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9PUEVOKTtcblxuICAgICAgdGhpcy5fcmVzZXRBZGp1c3RtZW50cygpO1xuXG4gICAgICB0aGlzLl9zY3JvbGxCYXIucmVzZXQoKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOJDMpO1xuICAgIH0pO1xuICB9XG5cbiAgX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgdGhpcy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5fYmFja2Ryb3Auc2hvdyhjYWxsYmFjayk7XG4gIH1cblxuICBfaXNBbmltYXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDMpO1xuICB9XG5cbiAgX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSB7XG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERV9QUkVWRU5URUQpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NMaXN0LFxuICAgICAgc2Nyb2xsSGVpZ2h0LFxuICAgICAgc3R5bGVcbiAgICB9ID0gdGhpcy5fZWxlbWVudDtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSBzY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0OyAvLyByZXR1cm4gaWYgdGhlIGZvbGxvd2luZyBiYWNrZ3JvdW5kIHRyYW5zaXRpb24gaGFzbid0IHlldCBjb21wbGV0ZWRcblxuICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nICYmIHN0eWxlLm92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU1RBVElDKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICBzdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcbiAgICB9XG5cbiAgICBjbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU1RBVElDKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NUQVRJQyk7XG5cbiAgICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgIHN0eWxlLm92ZXJmbG93WSA9ICcnO1xuICAgICAgICB9LCB0aGlzLl9kaWFsb2cpO1xuICAgICAgfVxuICAgIH0sIHRoaXMuX2RpYWxvZyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG4gIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblxuICBfYWRqdXN0RGlhbG9nKCkge1xuICAgIGNvbnN0IGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gdGhpcy5fc2Nyb2xsQmFyLmdldFdpZHRoKCk7XG5cbiAgICBjb25zdCBpc0JvZHlPdmVyZmxvd2luZyA9IHNjcm9sbGJhcldpZHRoID4gMDtcblxuICAgIGlmICghaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nICYmICFpc1JUTCgpIHx8IGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgaXNSVEwoKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9IGAke3Njcm9sbGJhcldpZHRofXB4YDtcbiAgICB9XG5cbiAgICBpZiAoaXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSB8fCAhaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nICYmIGlzUlRMKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgO1xuICAgIH1cbiAgfVxuXG4gIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldCk7XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMiwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfU0hPVyQzLCBzaG93RXZlbnQgPT4ge1xuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9ISURERU4kMywgKCkgPT4ge1xuICAgICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pOyAvLyBhdm9pZCBjb25mbGljdCB3aGVuIGNsaWNraW5nIG1vZGRhbCB0b2dnbGVyIHdoaWxlIGFub3RoZXIgb25lIGlzIG9wZW5cblxuICBjb25zdCBhbGxSZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKE9QRU5fU0VMRUNUT1IkMSk7XG5cbiAgaWYgKGFsbFJlYWR5T3Blbikge1xuICAgIE1vZGFsLmdldEluc3RhbmNlKGFsbFJlYWR5T3BlbikuaGlkZSgpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IE1vZGFsLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcbiAgZGF0YS50b2dnbGUodGhpcyk7XG59KTtcbmVuYWJsZURpc21pc3NUcmlnZ2VyKE1vZGFsKTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Nb2RhbCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihNb2RhbCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogb2ZmY2FudmFzLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkNSA9ICdvZmZjYW52YXMnO1xuY29uc3QgREFUQV9LRVkkNSA9ICdicy5vZmZjYW52YXMnO1xuY29uc3QgRVZFTlRfS0VZJDUgPSBgLiR7REFUQV9LRVkkNX1gO1xuY29uc3QgREFUQV9BUElfS0VZJDIgPSAnLmRhdGEtYXBpJztcbmNvbnN0IEVWRU5UX0xPQURfREFUQV9BUEkkMSA9IGBsb2FkJHtFVkVOVF9LRVkkNX0ke0RBVEFfQVBJX0tFWSQyfWA7XG5jb25zdCBFU0NBUEVfS0VZID0gJ0VzY2FwZSc7XG5jb25zdCBEZWZhdWx0JDQgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgc2Nyb2xsOiBmYWxzZVxufTtcbmNvbnN0IERlZmF1bHRUeXBlJDQgPSB7XG4gIGJhY2tkcm9wOiAnYm9vbGVhbicsXG4gIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gIHNjcm9sbDogJ2Jvb2xlYW4nXG59O1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDMgPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX0JBQ0tEUk9QID0gJ29mZmNhbnZhcy1iYWNrZHJvcCc7XG5jb25zdCBPUEVOX1NFTEVDVE9SID0gJy5vZmZjYW52YXMuc2hvdyc7XG5jb25zdCBFVkVOVF9TSE9XJDIgPSBgc2hvdyR7RVZFTlRfS0VZJDV9YDtcbmNvbnN0IEVWRU5UX1NIT1dOJDIgPSBgc2hvd24ke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBFVkVOVF9ISURFJDIgPSBgaGlkZSR7RVZFTlRfS0VZJDV9YDtcbmNvbnN0IEVWRU5UX0hJRERFTiQyID0gYGhpZGRlbiR7RVZFTlRfS0VZJDV9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEgPSBgY2xpY2ske0VWRU5UX0tFWSQ1fSR7REFUQV9BUElfS0VZJDJ9YDtcbmNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyA9IGBrZXlkb3duLmRpc21pc3Mke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQxID0gJ1tkYXRhLWJzLXRvZ2dsZT1cIm9mZmNhbnZhc1wiXSc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgT2ZmY2FudmFzIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xuICAgIHRoaXMuX2ZvY3VzdHJhcCA9IHRoaXMuX2luaXRpYWxpemVGb2N1c1RyYXAoKTtcblxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDU7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQkNDtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgfVxuXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQyLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0XG4gICAgfSk7XG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG5cbiAgICB0aGlzLl9iYWNrZHJvcC5zaG93KCk7XG5cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5zY3JvbGwpIHtcbiAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5oaWRlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDMpO1xuXG4gICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICB0aGlzLl9mb2N1c3RyYXAuYWN0aXZhdGUoKTtcbiAgICAgIH1cblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04kMiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxCYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSQyKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmJsdXIoKTtcblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckMyk7XG5cbiAgICB0aGlzLl9iYWNrZHJvcC5oaWRlKCk7XG5cbiAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5zY3JvbGwpIHtcbiAgICAgICAgbmV3IFNjcm9sbEJhckhlbHBlcigpLnJlc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQyKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxiYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpO1xuXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcblxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQ0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiB7fSlcbiAgICB9O1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJDUsIGNvbmZpZywgRGVmYXVsdFR5cGUkNCk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9pbml0aWFsaXplQmFja0Ryb3AoKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICBjbGFzc05hbWU6IENMQVNTX05BTUVfQkFDS0RST1AsXG4gICAgICBpc1Zpc2libGU6IHRoaXMuX2NvbmZpZy5iYWNrZHJvcCxcbiAgICAgIGlzQW5pbWF0ZWQ6IHRydWUsXG4gICAgICByb290RWxlbWVudDogdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLFxuICAgICAgY2xpY2tDYWxsYmFjazogKCkgPT4gdGhpcy5oaWRlKClcbiAgICB9KTtcbiAgfVxuXG4gIF9pbml0aWFsaXplRm9jdXNUcmFwKCkge1xuICAgIHJldHVybiBuZXcgRm9jdXNUcmFwKHtcbiAgICAgIHRyYXBFbGVtZW50OiB0aGlzLl9lbGVtZW50XG4gICAgfSk7XG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMSwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XG5cbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBFVkVOVF9ISURERU4kMiwgKCkgPT4ge1xuICAgIC8vIGZvY3VzIG9uIHRyaWdnZXIgd2hlbiBpdCBpcyBjbG9zZWRcbiAgICBpZiAoaXNWaXNpYmxlKHRoaXMpKSB7XG4gICAgICB0aGlzLmZvY3VzKCk7XG4gICAgfVxuICB9KTsgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBhIHRvZ2dsZXIgb2YgYW4gb2ZmY2FudmFzLCB3aGlsZSBhbm90aGVyIGlzIG9wZW5cblxuICBjb25zdCBhbGxSZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKE9QRU5fU0VMRUNUT1IpO1xuXG4gIGlmIChhbGxSZWFkeU9wZW4gJiYgYWxsUmVhZHlPcGVuICE9PSB0YXJnZXQpIHtcbiAgICBPZmZjYW52YXMuZ2V0SW5zdGFuY2UoYWxsUmVhZHlPcGVuKS5oaWRlKCk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcbiAgZGF0YS50b2dnbGUodGhpcyk7XG59KTtcbkV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEkkMSwgKCkgPT4gU2VsZWN0b3JFbmdpbmUuZmluZChPUEVOX1NFTEVDVE9SKS5mb3JFYWNoKGVsID0+IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKGVsKS5zaG93KCkpKTtcbmVuYWJsZURpc21pc3NUcmlnZ2VyKE9mZmNhbnZhcyk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oT2ZmY2FudmFzKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL3Nhbml0aXplci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCB1cmlBdHRyaWJ1dGVzID0gbmV3IFNldChbJ2JhY2tncm91bmQnLCAnY2l0ZScsICdocmVmJywgJ2l0ZW10eXBlJywgJ2xvbmdkZXNjJywgJ3Bvc3RlcicsICdzcmMnLCAneGxpbms6aHJlZiddKTtcbmNvbnN0IEFSSUFfQVRUUklCVVRFX1BBVFRFUk4gPSAvXmFyaWEtW1xcdy1dKiQvaTtcbi8qKlxuICogQSBwYXR0ZXJuIHRoYXQgcmVjb2duaXplcyBhIGNvbW1vbmx5IHVzZWZ1bCBzdWJzZXQgb2YgVVJMcyB0aGF0IGFyZSBzYWZlLlxuICpcbiAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzEyLjIueC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICovXG5cbmNvbnN0IFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlfHNtcyk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pO1xuLyoqXG4gKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuXG5jb25zdCBEQVRBX1VSTF9QQVRURVJOID0gL15kYXRhOig/OmltYWdlXFwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1xcLyg/Om1wZWd8bXA0fG9nZ3x3ZWJtKXxhdWRpb1xcLyg/Om1wM3xvZ2F8b2dnfG9wdXMpKTtiYXNlNjQsW1xcZCsvYS16XSs9KiQvaTtcblxuY29uc3QgYWxsb3dlZEF0dHJpYnV0ZSA9IChhdHRyaWJ1dGUsIGFsbG93ZWRBdHRyaWJ1dGVMaXN0KSA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoYWxsb3dlZEF0dHJpYnV0ZUxpc3QuaW5jbHVkZXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICBpZiAodXJpQXR0cmlidXRlcy5oYXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKFNBRkVfVVJMX1BBVFRFUk4udGVzdChhdHRyaWJ1dGUubm9kZVZhbHVlKSB8fCBEQVRBX1VSTF9QQVRURVJOLnRlc3QoYXR0cmlidXRlLm5vZGVWYWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgcmVnRXhwID0gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGF0dHJpYnV0ZVJlZ2V4ID0+IGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKTsgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlZ0V4cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChyZWdFeHBbaV0udGVzdChhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgRGVmYXVsdEFsbG93bGlzdCA9IHtcbiAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgJyonOiBbJ2NsYXNzJywgJ2RpcicsICdpZCcsICdsYW5nJywgJ3JvbGUnLCBBUklBX0FUVFJJQlVURV9QQVRURVJOXSxcbiAgYTogWyd0YXJnZXQnLCAnaHJlZicsICd0aXRsZScsICdyZWwnXSxcbiAgYXJlYTogW10sXG4gIGI6IFtdLFxuICBicjogW10sXG4gIGNvbDogW10sXG4gIGNvZGU6IFtdLFxuICBkaXY6IFtdLFxuICBlbTogW10sXG4gIGhyOiBbXSxcbiAgaDE6IFtdLFxuICBoMjogW10sXG4gIGgzOiBbXSxcbiAgaDQ6IFtdLFxuICBoNTogW10sXG4gIGg2OiBbXSxcbiAgaTogW10sXG4gIGltZzogWydzcmMnLCAnc3Jjc2V0JywgJ2FsdCcsICd0aXRsZScsICd3aWR0aCcsICdoZWlnaHQnXSxcbiAgbGk6IFtdLFxuICBvbDogW10sXG4gIHA6IFtdLFxuICBwcmU6IFtdLFxuICBzOiBbXSxcbiAgc21hbGw6IFtdLFxuICBzcGFuOiBbXSxcbiAgc3ViOiBbXSxcbiAgc3VwOiBbXSxcbiAgc3Ryb25nOiBbXSxcbiAgdTogW10sXG4gIHVsOiBbXVxufTtcbmZ1bmN0aW9uIHNhbml0aXplSHRtbCh1bnNhZmVIdG1sLCBhbGxvd0xpc3QsIHNhbml0aXplRm4pIHtcbiAgaWYgKCF1bnNhZmVIdG1sLmxlbmd0aCkge1xuICAgIHJldHVybiB1bnNhZmVIdG1sO1xuICB9XG5cbiAgaWYgKHNhbml0aXplRm4gJiYgdHlwZW9mIHNhbml0aXplRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gc2FuaXRpemVGbih1bnNhZmVIdG1sKTtcbiAgfVxuXG4gIGNvbnN0IGRvbVBhcnNlciA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCk7XG4gIGNvbnN0IGNyZWF0ZWREb2N1bWVudCA9IGRvbVBhcnNlci5wYXJzZUZyb21TdHJpbmcodW5zYWZlSHRtbCwgJ3RleHQvaHRtbCcpO1xuICBjb25zdCBlbGVtZW50cyA9IFtdLmNvbmNhdCguLi5jcmVhdGVkRG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCcqJykpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICBjb25zdCBlbGVtZW50TmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghT2JqZWN0LmtleXMoYWxsb3dMaXN0KS5pbmNsdWRlcyhlbGVtZW50TmFtZSkpIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVMaXN0ID0gW10uY29uY2F0KC4uLmVsZW1lbnQuYXR0cmlidXRlcyk7XG4gICAgY29uc3QgYWxsb3dlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQoYWxsb3dMaXN0WycqJ10gfHwgW10sIGFsbG93TGlzdFtlbGVtZW50TmFtZV0gfHwgW10pO1xuICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuICAgICAgaWYgKCFhbGxvd2VkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYWxsb3dlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlZERvY3VtZW50LmJvZHkuaW5uZXJIVE1MO1xufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHRvb2x0aXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQ0ID0gJ3Rvb2x0aXAnO1xuY29uc3QgREFUQV9LRVkkNCA9ICdicy50b29sdGlwJztcbmNvbnN0IEVWRU5UX0tFWSQ0ID0gYC4ke0RBVEFfS0VZJDR9YDtcbmNvbnN0IENMQVNTX1BSRUZJWCQxID0gJ2JzLXRvb2x0aXAnO1xuY29uc3QgRElTQUxMT1dFRF9BVFRSSUJVVEVTID0gbmV3IFNldChbJ3Nhbml0aXplJywgJ2FsbG93TGlzdCcsICdzYW5pdGl6ZUZuJ10pO1xuY29uc3QgRGVmYXVsdFR5cGUkMyA9IHtcbiAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gIHRlbXBsYXRlOiAnc3RyaW5nJyxcbiAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgdHJpZ2dlcjogJ3N0cmluZycsXG4gIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcbiAgaHRtbDogJ2Jvb2xlYW4nLFxuICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIG9mZnNldDogJyhhcnJheXxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiAnYXJyYXknLFxuICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICBjdXN0b21DbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gIGFsbG93TGlzdDogJ29iamVjdCcsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknXG59O1xuY29uc3QgQXR0YWNobWVudE1hcCA9IHtcbiAgQVVUTzogJ2F1dG8nLFxuICBUT1A6ICd0b3AnLFxuICBSSUdIVDogaXNSVEwoKSA/ICdsZWZ0JyA6ICdyaWdodCcsXG4gIEJPVFRPTTogJ2JvdHRvbScsXG4gIExFRlQ6IGlzUlRMKCkgPyAncmlnaHQnIDogJ2xlZnQnXG59O1xuY29uc3QgRGVmYXVsdCQzID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+JyArICc8L2Rpdj4nLFxuICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICB0aXRsZTogJycsXG4gIGRlbGF5OiAwLFxuICBodG1sOiBmYWxzZSxcbiAgc2VsZWN0b3I6IGZhbHNlLFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBvZmZzZXQ6IFswLCAwXSxcbiAgY29udGFpbmVyOiBmYWxzZSxcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIGN1c3RvbUNsYXNzOiAnJyxcbiAgc2FuaXRpemU6IHRydWUsXG4gIHNhbml0aXplRm46IG51bGwsXG4gIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgcG9wcGVyQ29uZmlnOiBudWxsXG59O1xuY29uc3QgRXZlbnQkMiA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWSQ0fWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZJDR9YCxcbiAgU0hPVzogYHNob3cke0VWRU5UX0tFWSQ0fWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWSQ0fWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWSQ0fWAsXG4gIENMSUNLOiBgY2xpY2ske0VWRU5UX0tFWSQ0fWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVkkNH1gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVkkNH1gLFxuICBNT1VTRUVOVEVSOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZJDR9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWSQ0fWBcbn07XG5jb25zdCBDTEFTU19OQU1FX0ZBREUkMiA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfTU9EQUwgPSAnbW9kYWwnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDIgPSAnc2hvdyc7XG5jb25zdCBIT1ZFUl9TVEFURV9TSE9XID0gJ3Nob3cnO1xuY29uc3QgSE9WRVJfU1RBVEVfT1VUID0gJ291dCc7XG5jb25zdCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSID0gJy50b29sdGlwLWlubmVyJztcbmNvbnN0IFNFTEVDVE9SX01PREFMID0gYC4ke0NMQVNTX05BTUVfTU9EQUx9YDtcbmNvbnN0IEVWRU5UX01PREFMX0hJREUgPSAnaGlkZS5icy5tb2RhbCc7XG5jb25zdCBUUklHR0VSX0hPVkVSID0gJ2hvdmVyJztcbmNvbnN0IFRSSUdHRVJfRk9DVVMgPSAnZm9jdXMnO1xuY29uc3QgVFJJR0dFUl9DTElDSyA9ICdjbGljayc7XG5jb25zdCBUUklHR0VSX01BTlVBTCA9ICdtYW51YWwnO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gICAgfVxuXG4gICAgc3VwZXIoZWxlbWVudCk7IC8vIHByaXZhdGVcblxuICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgdGhpcy5fdGltZW91dCA9IDA7XG4gICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSB7fTtcbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsOyAvLyBQcm90ZWN0ZWRcblxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMudGlwID0gbnVsbDtcblxuICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQzO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudCQyO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGUkMztcbiAgfSAvLyBQdWJsaWNcblxuXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgfVxuXG4gIHRvZ2dsZShldmVudCkge1xuICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KTtcblxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDIpKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLCBFVkVOVF9NT0RBTF9ISURFLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKTtcblxuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgdGhpcy50aXAucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpO1xuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcbiAgICBjb25zdCBzaGFkb3dSb290ID0gZmluZFNoYWRvd1Jvb3QodGhpcy5fZWxlbWVudCk7XG4gICAgY29uc3QgaXNJblRoZURvbSA9IHNoYWRvd1Jvb3QgPT09IG51bGwgPyB0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpIDogc2hhZG93Um9vdC5jb250YWlucyh0aGlzLl9lbGVtZW50KTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCAhaXNJblRoZURvbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gQSB0cmljayB0byByZWNyZWF0ZSBhIHRvb2x0aXAgaW4gY2FzZSBhIG5ldyB0aXRsZSBpcyBnaXZlbiBieSB1c2luZyB0aGUgTk9UIGRvY3VtZW50ZWQgYGRhdGEtYnMtb3JpZ2luYWwtdGl0bGVgXG4gICAgLy8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgbGF0ZXIgaW4gZmF2b3Igb2YgYSBgc2V0Q29udGVudGAgbWV0aG9kXG5cblxuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLk5BTUUgPT09ICd0b29sdGlwJyAmJiB0aGlzLnRpcCAmJiB0aGlzLmdldFRpdGxlKCkgIT09IHRoaXMudGlwLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfVE9PTFRJUF9JTk5FUikuaW5uZXJIVE1MKSB7XG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKCk7XG5cbiAgICAgIHRoaXMudGlwLnJlbW92ZSgpO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgIGNvbnN0IHRpcElkID0gZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKTtcblxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUkMik7XG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLl9lbGVtZW50KSA6IHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpO1xuXG4gICAgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuXG4gICAgY29uc3Qge1xuICAgICAgY29udGFpbmVyXG4gICAgfSA9IHRoaXMuX2NvbmZpZztcbiAgICBEYXRhLnNldCh0aXAsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xuXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKSkge1xuICAgICAgY29udGFpbmVyLmFwcGVuZCh0aXApO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHRoaXMuX2VsZW1lbnQsIHRpcCwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpKTtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckMik7XG5cbiAgICBjb25zdCBjdXN0b21DbGFzcyA9IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5jdXN0b21DbGFzcyk7XG5cbiAgICBpZiAoY3VzdG9tQ2xhc3MpIHtcbiAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKC4uLmN1c3RvbUNsYXNzLnNwbGl0KCcgJykpO1xuICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHByZXZIb3ZlclN0YXRlID0gdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTik7XG5cbiAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQyKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMudGlwLCBpc0FuaW1hdGVkKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXRlICE9PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIHRpcC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpO1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgIHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQyKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2goZWxlbWVudCA9PiBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0NMSUNLXSA9IGZhbHNlO1xuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9GT0NVU10gPSBmYWxzZTtcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfSE9WRVJdID0gZmFsc2U7XG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUkMik7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgaXNBbmltYXRlZCk7XG5cbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSAvLyBQcm90ZWN0ZWRcblxuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKTtcbiAgfVxuXG4gIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fY29uZmlnLnRlbXBsYXRlO1xuICAgIGNvbnN0IHRpcCA9IGVsZW1lbnQuY2hpbGRyZW5bMF07XG4gICAgdGhpcy5zZXRDb250ZW50KHRpcCk7XG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9GQURFJDIsIENMQVNTX05BTUVfU0hPVyQyKTtcbiAgICB0aGlzLnRpcCA9IHRpcDtcbiAgICByZXR1cm4gdGhpcy50aXA7XG4gIH1cblxuICBzZXRDb250ZW50KHRpcCkge1xuICAgIHRoaXMuX3Nhbml0aXplQW5kU2V0Q29udGVudCh0aXAsIHRoaXMuZ2V0VGl0bGUoKSwgU0VMRUNUT1JfVE9PTFRJUF9JTk5FUik7XG4gIH1cblxuICBfc2FuaXRpemVBbmRTZXRDb250ZW50KHRlbXBsYXRlLCBjb250ZW50LCBzZWxlY3Rvcikge1xuICAgIGNvbnN0IHRlbXBsYXRlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoc2VsZWN0b3IsIHRlbXBsYXRlKTtcblxuICAgIGlmICghY29udGVudCAmJiB0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgIHRlbXBsYXRlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIHdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcblxuXG4gICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnQpO1xuICB9XG5cbiAgc2V0RWxlbWVudENvbnRlbnQoZWxlbWVudCwgY29udGVudCkge1xuICAgIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRWxlbWVudChjb250ZW50KSkge1xuICAgICAgY29udGVudCA9IGdldEVsZW1lbnQoY29udGVudCk7IC8vIGNvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmh0bWwpIHtcbiAgICAgICAgaWYgKGNvbnRlbnQucGFyZW50Tm9kZSAhPT0gZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQoY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50LnRleHRDb250ZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICBpZiAodGhpcy5fY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoY29udGVudCwgdGhpcy5fY29uZmlnLmFsbG93TGlzdCwgdGhpcy5fY29uZmlnLnNhbml0aXplRm4pO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIGdldFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKSB8fCB0aGlzLl9jb25maWcudGl0bGU7XG5cbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGl0bGUpO1xuICB9XG5cbiAgdXBkYXRlQXR0YWNobWVudChhdHRhY2htZW50KSB7XG4gICAgaWYgKGF0dGFjaG1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiAnZW5kJztcbiAgICB9XG5cbiAgICBpZiAoYXR0YWNobWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgICByZXR1cm4gJ3N0YXJ0JztcbiAgICB9XG5cbiAgICByZXR1cm4gYXR0YWNobWVudDtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfaW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQgfHwgdGhpcy5jb25zdHJ1Y3Rvci5nZXRPckNyZWF0ZUluc3RhbmNlKGV2ZW50LmRlbGVnYXRlVGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgfVxuXG4gIF9nZXRPZmZzZXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgb2Zmc2V0XG4gICAgfSA9IHRoaXMuX2NvbmZpZztcblxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcCh2YWwgPT4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMTApKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHBvcHBlckRhdGEgPT4gb2Zmc2V0KHBvcHBlckRhdGEsIHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICBfcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24oY29udGVudCkge1xuICAgIHJldHVybiB0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRlbnQuY2FsbCh0aGlzLl9lbGVtZW50KSA6IGNvbnRlbnQ7XG4gIH1cblxuICBfZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICBtb2RpZmllcnM6IFt7XG4gICAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogdGhpcy5fY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgYm91bmRhcnk6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBlbGVtZW50OiBgLiR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfS1hcnJvd2BcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnb25DaGFuZ2UnLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwaGFzZTogJ2FmdGVyV3JpdGUnLFxuICAgICAgICBmbjogZGF0YSA9PiB0aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSlcbiAgICAgIH1dLFxuICAgICAgb25GaXJzdFVwZGF0ZTogZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLm9wdGlvbnMucGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHsgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxuICAgICAgLi4uKHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhkZWZhdWx0QnNQb3BwZXJDb25maWcpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZylcbiAgICB9O1xuICB9XG5cbiAgX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgdGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmFkZChgJHt0aGlzLl9nZXRCYXNpY0NsYXNzUHJlZml4KCl9LSR7dGhpcy51cGRhdGVBdHRhY2htZW50KGF0dGFjaG1lbnQpfWApO1xuICB9XG5cbiAgX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xuICB9XG5cbiAgX3NldExpc3RlbmVycygpIHtcbiAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuX2NvbmZpZy50cmlnZ2VyLnNwbGl0KCcgJyk7XG5cbiAgICB0cmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4ge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4gdGhpcy50b2dnbGUoZXZlbnQpKTtcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVFJJR0dFUl9NQU5VQUwpIHtcbiAgICAgICAgY29uc3QgZXZlbnRJbiA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFRU5URVIgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47XG4gICAgICAgIGNvbnN0IGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudEluLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHRoaXMuX2VudGVyKGV2ZW50KSk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudE91dCwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLl9sZWF2ZShldmVudCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5faGlkZU1vZGFsSGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX01PREFMKSwgRVZFTlRfTU9EQUxfSElERSwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB7IC4uLnRoaXMuX2NvbmZpZyxcbiAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZml4VGl0bGUoKTtcbiAgICB9XG4gIH1cblxuICBfZml4VGl0bGUoKSB7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKTtcblxuICAgIGNvbnN0IG9yaWdpbmFsVGl0bGVUeXBlID0gdHlwZW9mIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICBpZiAodGl0bGUgfHwgb3JpZ2luYWxUaXRsZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1icy1vcmlnaW5hbC10aXRsZScsIHRpdGxlIHx8ICcnKTtcblxuICAgICAgaWYgKHRpdGxlICYmICF0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpICYmICF0aGlzLl9lbGVtZW50LnRleHRDb250ZW50KSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGl0bGUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCwgY29udGV4dCk7XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQyKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSE9WRVJfU1RBVEVfU0hPVztcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1c7XG5cbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LnNob3cpIHtcbiAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgfVxuICAgIH0sIGNvbnRleHQuX2NvbmZpZy5kZWxheS5zaG93KTtcbiAgfVxuXG4gIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgIGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQsIGNvbnRleHQpO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUl0gPSBjb250ZXh0Ll9lbGVtZW50LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpO1xuICAgIH1cblxuICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX09VVDtcblxuICAgIGlmICghY29udGV4dC5fY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0Ll9jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX09VVCkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LCBjb250ZXh0Ll9jb25maWcuZGVsYXkuaGlkZSk7XG4gIH1cblxuICBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25zdCBkYXRhQXR0cmlidXRlcyA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO1xuICAgIE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKS5mb3JFYWNoKGRhdGFBdHRyID0+IHtcbiAgICAgIGlmIChESVNBTExPV0VEX0FUVFJJQlVURVMuaGFzKGRhdGFBdHRyKSkge1xuICAgICAgICBkZWxldGUgZGF0YUF0dHJpYnV0ZXNbZGF0YUF0dHJdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbmZpZyA9IHsgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICBjb25maWcuY29udGFpbmVyID0gY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogZ2V0RWxlbWVudChjb25maWcuY29udGFpbmVyKTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkNCwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcblxuICAgIGlmIChjb25maWcuc2FuaXRpemUpIHtcbiAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChjb25maWcudGVtcGxhdGUsIGNvbmZpZy5hbGxvd0xpc3QsIGNvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2dldERlbGVnYXRlQ29uZmlnKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY29uZmlnKSB7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuX2NvbmZpZ1trZXldKSB7XG4gICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5fY29uZmlnW2tleV07XG4gICAgICB9XG4gICAgfSAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSByZXBsYWNlZCB3aXRoOlxuICAgIC8vIGNvbnN0IGtleXNXaXRoRGlmZmVyZW50VmFsdWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnKS5maWx0ZXIoZW50cnkgPT4gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2VudHJ5WzBdXSAhPT0gdGhpcy5fY29uZmlnW2VudHJ5WzBdXSlcbiAgICAvLyBgT2JqZWN0LmZyb21FbnRyaWVzKGtleXNXaXRoRGlmZmVyZW50VmFsdWVzKWBcblxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9jbGVhblRpcENsYXNzKCkge1xuICAgIGNvbnN0IHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgIGNvbnN0IGJhc2ljQ2xhc3NQcmVmaXhSZWdleCA9IG5ldyBSZWdFeHAoYChefFxcXFxzKSR7dGhpcy5fZ2V0QmFzaWNDbGFzc1ByZWZpeCgpfVxcXFxTK2AsICdnJyk7XG4gICAgY29uc3QgdGFiQ2xhc3MgPSB0aXAuZ2V0QXR0cmlidXRlKCdjbGFzcycpLm1hdGNoKGJhc2ljQ2xhc3NQcmVmaXhSZWdleCk7XG5cbiAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgdGFiQ2xhc3MubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZm9yRWFjaCh0Q2xhc3MgPT4gdGlwLmNsYXNzTGlzdC5yZW1vdmUodENsYXNzKSk7XG4gICAgfVxuICB9XG5cbiAgX2dldEJhc2ljQ2xhc3NQcmVmaXgoKSB7XG4gICAgcmV0dXJuIENMQVNTX1BSRUZJWCQxO1xuICB9XG5cbiAgX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShwb3BwZXJEYXRhKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3RhdGVcbiAgICB9ID0gcG9wcGVyRGF0YTtcblxuICAgIGlmICghc3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnRpcCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlcjtcblxuICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcblxuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHN0YXRlLnBsYWNlbWVudCkpO1xuICB9XG5cbiAgX2Rpc3Bvc2VQb3BwZXIoKSB7XG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICB9XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRvb2x0aXAuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ub29sdGlwIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVG9vbHRpcCk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogcG9wb3Zlci5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJDMgPSAncG9wb3Zlcic7XG5jb25zdCBEQVRBX0tFWSQzID0gJ2JzLnBvcG92ZXInO1xuY29uc3QgRVZFTlRfS0VZJDMgPSBgLiR7REFUQV9LRVkkM31gO1xuY29uc3QgQ0xBU1NfUFJFRklYID0gJ2JzLXBvcG92ZXInO1xuY29uc3QgRGVmYXVsdCQyID0geyAuLi5Ub29sdGlwLkRlZmF1bHQsXG4gIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgb2Zmc2V0OiBbMCwgOF0sXG4gIHRyaWdnZXI6ICdjbGljaycsXG4gIGNvbnRlbnQ6ICcnLFxuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+JyArICc8L2Rpdj4nXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkMiA9IHsgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcbiAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG59O1xuY29uc3QgRXZlbnQkMSA9IHtcbiAgSElERTogYGhpZGUke0VWRU5UX0tFWSQzfWAsXG4gIEhJRERFTjogYGhpZGRlbiR7RVZFTlRfS0VZJDN9YCxcbiAgU0hPVzogYHNob3cke0VWRU5UX0tFWSQzfWAsXG4gIFNIT1dOOiBgc2hvd24ke0VWRU5UX0tFWSQzfWAsXG4gIElOU0VSVEVEOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWSQzfWAsXG4gIENMSUNLOiBgY2xpY2ske0VWRU5UX0tFWSQzfWAsXG4gIEZPQ1VTSU46IGBmb2N1c2luJHtFVkVOVF9LRVkkM31gLFxuICBGT0NVU09VVDogYGZvY3Vzb3V0JHtFVkVOVF9LRVkkM31gLFxuICBNT1VTRUVOVEVSOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZJDN9YCxcbiAgTU9VU0VMRUFWRTogYG1vdXNlbGVhdmUke0VWRU5UX0tFWSQzfWBcbn07XG5jb25zdCBTRUxFQ1RPUl9USVRMRSA9ICcucG9wb3Zlci1oZWFkZXInO1xuY29uc3QgU0VMRUNUT1JfQ09OVEVOVCA9ICcucG9wb3Zlci1ib2R5Jztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBQb3BvdmVyIGV4dGVuZHMgVG9vbHRpcCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDI7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkMztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgcmV0dXJuIEV2ZW50JDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZSQyO1xuICB9IC8vIE92ZXJyaWRlc1xuXG5cbiAgaXNXaXRoQ29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgfVxuXG4gIHNldENvbnRlbnQodGlwKSB7XG4gICAgdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHRpcCwgdGhpcy5nZXRUaXRsZSgpLCBTRUxFQ1RPUl9USVRMRSk7XG5cbiAgICB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGlwLCB0aGlzLl9nZXRDb250ZW50KCksIFNFTEVDVE9SX0NPTlRFTlQpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY29udGVudCk7XG4gIH1cblxuICBfZ2V0QmFzaWNDbGFzc1ByZWZpeCgpIHtcbiAgICByZXR1cm4gQ0xBU1NfUFJFRklYO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBQb3BvdmVyLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuUG9wb3ZlciB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFBvcG92ZXIpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHNjcm9sbHNweS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJDIgPSAnc2Nyb2xsc3B5JztcbmNvbnN0IERBVEFfS0VZJDIgPSAnYnMuc2Nyb2xsc3B5JztcbmNvbnN0IEVWRU5UX0tFWSQyID0gYC4ke0RBVEFfS0VZJDJ9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQxID0gJy5kYXRhLWFwaSc7XG5jb25zdCBEZWZhdWx0JDEgPSB7XG4gIG9mZnNldDogMTAsXG4gIG1ldGhvZDogJ2F1dG8nLFxuICB0YXJnZXQ6ICcnXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkMSA9IHtcbiAgb2Zmc2V0OiAnbnVtYmVyJyxcbiAgbWV0aG9kOiAnc3RyaW5nJyxcbiAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbn07XG5jb25zdCBFVkVOVF9BQ1RJVkFURSA9IGBhY3RpdmF0ZSR7RVZFTlRfS0VZJDJ9YDtcbmNvbnN0IEVWRU5UX1NDUk9MTCA9IGBzY3JvbGwke0VWRU5UX0tFWSQyfWA7XG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWSQyfSR7REFUQV9BUElfS0VZJDF9YDtcbmNvbnN0IENMQVNTX05BTUVfRFJPUERPV05fSVRFTSA9ICdkcm9wZG93bi1pdGVtJztcbmNvbnN0IENMQVNTX05BTUVfQUNUSVZFJDEgPSAnYWN0aXZlJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfU1BZID0gJ1tkYXRhLWJzLXNweT1cInNjcm9sbFwiXSc7XG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCQxID0gJy5uYXYsIC5saXN0LWdyb3VwJztcbmNvbnN0IFNFTEVDVE9SX05BVl9MSU5LUyA9ICcubmF2LWxpbmsnO1xuY29uc3QgU0VMRUNUT1JfTkFWX0lURU1TID0gJy5uYXYtaXRlbSc7XG5jb25zdCBTRUxFQ1RPUl9MSVNUX0lURU1TID0gJy5saXN0LWdyb3VwLWl0ZW0nO1xuY29uc3QgU0VMRUNUT1JfTElOS19JVEVNUyA9IGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTElTVF9JVEVNU30sIC4ke0NMQVNTX05BTUVfRFJPUERPV05fSVRFTX1gO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV04kMSA9ICcuZHJvcGRvd24nO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEgPSAnLmRyb3Bkb3duLXRvZ2dsZSc7XG5jb25zdCBNRVRIT0RfT0ZGU0VUID0gJ29mZnNldCc7XG5jb25zdCBNRVRIT0RfUE9TSVRJT04gPSAncG9zaXRpb24nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFNjcm9sbFNweSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9zY3JvbGxFbGVtZW50ID0gdGhpcy5fZWxlbWVudC50YWdOYW1lID09PSAnQk9EWScgPyB3aW5kb3cgOiB0aGlzLl9lbGVtZW50O1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9TQ1JPTEwsICgpID0+IHRoaXMuX3Byb2Nlc3MoKSk7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG5cbiAgICB0aGlzLl9wcm9jZXNzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDE7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUUkMjtcbiAgfSAvLyBQdWJsaWNcblxuXG4gIHJlZnJlc2goKSB7XG4gICAgY29uc3QgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gTUVUSE9EX09GRlNFVCA6IE1FVEhPRF9QT1NJVElPTjtcbiAgICBjb25zdCBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICBjb25zdCBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBNRVRIT0RfUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICBjb25zdCB0YXJnZXRzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9MSU5LX0lURU1TLCB0aGlzLl9jb25maWcudGFyZ2V0KTtcbiAgICB0YXJnZXRzLm1hcChlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNlbGVjdG9yID8gU2VsZWN0b3JFbmdpbmUuZmluZE9uZSh0YXJnZXRTZWxlY3RvcikgOiBudWxsO1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBpZiAodGFyZ2V0QkNSLndpZHRoIHx8IHRhcmdldEJDUi5oZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gW01hbmlwdWxhdG9yW29mZnNldE1ldGhvZF0odGFyZ2V0KS50b3AgKyBvZmZzZXRCYXNlLCB0YXJnZXRTZWxlY3Rvcl07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSkuZmlsdGVyKGl0ZW0gPT4gaXRlbSkuc29ydCgoYSwgYikgPT4gYVswXSAtIGJbMF0pLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cbiAgICAgIHRoaXMuX3RhcmdldHMucHVzaChpdGVtWzFdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9LRVkkMik7XG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0JDEsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSlcbiAgICB9O1xuICAgIGNvbmZpZy50YXJnZXQgPSBnZXRFbGVtZW50KGNvbmZpZy50YXJnZXQpIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQyLCBjb25maWcsIERlZmF1bHRUeXBlJDEpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICBfZ2V0U2Nyb2xsSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gIH1cblxuICBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgfVxuXG4gIF9wcm9jZXNzKCkge1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblxuICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuXG4gICAgY29uc3QgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgaWYgKHRoaXMuX3Njcm9sbEhlaWdodCAhPT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcblxuICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgY29uc3QgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pO1xuXG4gICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FjdGl2YXRlKHRhcmdldCkge1xuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldDtcblxuICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICBjb25zdCBxdWVyaWVzID0gU0VMRUNUT1JfTElOS19JVEVNUy5zcGxpdCgnLCcpLm1hcChzZWxlY3RvciA9PiBgJHtzZWxlY3Rvcn1bZGF0YS1icy10YXJnZXQ9XCIke3RhcmdldH1cIl0sJHtzZWxlY3Rvcn1baHJlZj1cIiR7dGFyZ2V0fVwiXWApO1xuICAgIGNvbnN0IGxpbmsgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHF1ZXJpZXMuam9pbignLCcpLCB0aGlzLl9jb25maWcudGFyZ2V0KTtcbiAgICBsaW5rLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG5cbiAgICBpZiAobGluay5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUkMSwgbGluay5jbG9zZXN0KFNFTEVDVE9SX0RST1BET1dOJDEpKS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBTZWxlY3RvckVuZ2luZS5wYXJlbnRzKGxpbmssIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQJDEpLmZvckVhY2gobGlzdEdyb3VwID0+IHtcbiAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZVxuICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIGAke1NFTEVDVE9SX05BVl9MSU5LU30sICR7U0VMRUNUT1JfTElTVF9JVEVNU31gKS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpKTsgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZSB3aGVuIC5uYXYtbGluayBpcyBpbnNpZGUgLm5hdi1pdGVtXG5cbiAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihsaXN0R3JvdXAsIFNFTEVDVE9SX05BVl9JVEVNUykuZm9yRWFjaChuYXZJdGVtID0+IHtcbiAgICAgICAgICBTZWxlY3RvckVuZ2luZS5jaGlsZHJlbihuYXZJdGVtLCBTRUxFQ1RPUl9OQVZfTElOS1MpLmZvckVhY2goaXRlbSA9PiBpdGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0FDVElWQVRFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICB9KTtcbiAgfVxuXG4gIF9jbGVhcigpIHtcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0xJTktfSVRFTVMsIHRoaXMuX2NvbmZpZy50YXJnZXQpLmZpbHRlcihub2RlID0+IG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFJDEpKS5mb3JFYWNoKG5vZGUgPT4gbm9kZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDEpKTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gU2Nyb2xsU3B5LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJLCAoKSA9PiB7XG4gIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9TUFkpLmZvckVhY2goc3B5ID0+IG5ldyBTY3JvbGxTcHkoc3B5KSk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5TY3JvbGxTcHkgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oU2Nyb2xsU3B5KTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB0YWIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQxID0gJ3RhYic7XG5jb25zdCBEQVRBX0tFWSQxID0gJ2JzLnRhYic7XG5jb25zdCBFVkVOVF9LRVkkMSA9IGAuJHtEQVRBX0tFWSQxfWA7XG5jb25zdCBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbmNvbnN0IEVWRU5UX0hJREUkMSA9IGBoaWRlJHtFVkVOVF9LRVkkMX1gO1xuY29uc3QgRVZFTlRfSElEREVOJDEgPSBgaGlkZGVuJHtFVkVOVF9LRVkkMX1gO1xuY29uc3QgRVZFTlRfU0hPVyQxID0gYHNob3cke0VWRU5UX0tFWSQxfWA7XG5jb25zdCBFVkVOVF9TSE9XTiQxID0gYHNob3duJHtFVkVOVF9LRVkkMX1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBgY2xpY2ske0VWRU5UX0tFWSQxfSR7REFUQV9BUElfS0VZfWA7XG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX01FTlUgPSAnZHJvcGRvd24tbWVudSc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9ICdhY3RpdmUnO1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFJDEgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckMSA9ICdzaG93JztcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOID0gJy5kcm9wZG93bic7XG5jb25zdCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkUgPSAnLmFjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVfVUwgPSAnOnNjb3BlID4gbGkgPiAuYWN0aXZlJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtYnMtdG9nZ2xlPVwibGlzdFwiXSc7XG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUgPSAnLmRyb3Bkb3duLXRvZ2dsZSc7XG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQgPSAnOnNjb3BlID4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVGFiIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDE7XG4gIH0gLy8gUHVibGljXG5cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcHJldmlvdXM7XG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzLl9lbGVtZW50KTtcblxuICAgIGNvbnN0IGxpc3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX05BVl9MSVNUX0dST1VQKTtcblxuICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgY29uc3QgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTRUxFQ1RPUl9BQ1RJVkVfVUwgOiBTRUxFQ1RPUl9BQ1RJVkU7XG4gICAgICBwcmV2aW91cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoaXRlbVNlbGVjdG9yLCBsaXN0RWxlbWVudCk7XG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzW3ByZXZpb3VzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IHByZXZpb3VzID8gRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJREUkMSwge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH0pIDogbnVsbDtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDEsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgfSk7XG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgaGlkZUV2ZW50ICE9PSBudWxsICYmIGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihwcmV2aW91cywgRVZFTlRfSElEREVOJDEsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSk7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQxLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpO1xuICAgIH1cbiAgfSAvLyBQcml2YXRlXG5cblxuICBfYWN0aXZhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRzID0gY29udGFpbmVyICYmIChjb250YWluZXIubm9kZU5hbWUgPT09ICdVTCcgfHwgY29udGFpbmVyLm5vZGVOYW1lID09PSAnT0wnKSA/IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfQUNUSVZFX1VMLCBjb250YWluZXIpIDogU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4oY29udGFpbmVyLCBTRUxFQ1RPUl9BQ1RJVkUpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdO1xuICAgIGNvbnN0IGlzVHJhbnNpdGlvbmluZyA9IGNhbGxiYWNrICYmIGFjdGl2ZSAmJiBhY3RpdmUuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQxKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4gdGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuXG4gICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIGFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQxKTtcblxuICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgZWxlbWVudCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG5cbiAgX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGFjdGl2ZSkge1xuICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgY29uc3QgZHJvcGRvd25DaGlsZCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxELCBhY3RpdmUucGFyZW50Tm9kZSk7XG5cbiAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgIGRyb3Bkb3duQ2hpbGQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmUuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKTtcblxuICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZWZsb3coZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDEpKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDEpO1xuICAgIH1cblxuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5ub2RlTmFtZSA9PT0gJ0xJJykge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fTUVOVSkpIHtcbiAgICAgIGNvbnN0IGRyb3Bkb3duRWxlbWVudCA9IGVsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTik7XG5cbiAgICAgIGlmIChkcm9wZG93bkVsZW1lbnQpIHtcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIGRyb3Bkb3duRWxlbWVudCkuZm9yRWFjaChkcm9wZG93biA9PiBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFKSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBUYWIuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcbiAgZGF0YS5zaG93KCk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5UYWIgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oVGFiKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB0b2FzdC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FID0gJ3RvYXN0JztcbmNvbnN0IERBVEFfS0VZID0gJ2JzLnRvYXN0JztcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xuY29uc3QgRVZFTlRfTU9VU0VPVkVSID0gYG1vdXNlb3ZlciR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9NT1VTRU9VVCA9IGBtb3VzZW91dCR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9GT0NVU0lOID0gYGZvY3VzaW4ke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfRk9DVVNPVVQgPSBgZm9jdXNvdXQke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX1NIT1dOID0gYHNob3duJHtFVkVOVF9LRVl9YDtcbmNvbnN0IENMQVNTX05BTUVfRkFERSA9ICdmYWRlJztcbmNvbnN0IENMQVNTX05BTUVfSElERSA9ICdoaWRlJzsgLy8gQGRlcHJlY2F0ZWQgLSBrZXB0IGhlcmUgb25seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnO1xuY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICBhdXRvaGlkZTogJ2Jvb2xlYW4nLFxuICBkZWxheTogJ251bWJlcidcbn07XG5jb25zdCBEZWZhdWx0ID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIGF1dG9oaWRlOiB0cnVlLFxuICBkZWxheTogNTAwMFxufTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUb2FzdCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICB0aGlzLl9oYXNNb3VzZUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGZhbHNlO1xuXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XG4gICAgcmV0dXJuIE5BTUU7XG4gIH0gLy8gUHVibGljXG5cblxuICBzaG93KCkge1xuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1cpO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pO1xuXG4gICAgICB0aGlzLl9tYXliZVNjaGVkdWxlSGlkZSgpO1xuICAgIH07XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9ISURFKTsgLy8gQGRlcHJlY2F0ZWRcblxuXG4gICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfSElERSk7IC8vIEBkZXByZWNhdGVkXG5cblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1cpO1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pO1xuICAgIH07XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgIGlmICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKTtcbiAgICB9XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSlcbiAgICB9O1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfbWF5YmVTY2hlZHVsZUhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiB8fCB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSwgdGhpcy5fY29uZmlnLmRlbGF5KTtcbiAgfVxuXG4gIF9vbkludGVyYWN0aW9uKGV2ZW50LCBpc0ludGVyYWN0aW5nKSB7XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICBjYXNlICdtb3VzZW92ZXInOlxuICAgICAgY2FzZSAnbW91c2VvdXQnOlxuICAgICAgICB0aGlzLl9oYXNNb3VzZUludGVyYWN0aW9uID0gaXNJbnRlcmFjdGluZztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgY2FzZSAnZm9jdXNvdXQnOlxuICAgICAgICB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gaXNJbnRlcmFjdGluZztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGlzSW50ZXJhY3RpbmcpIHtcbiAgICAgIHRoaXMuX2NsZWFyVGltZW91dCgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbmV4dEVsZW1lbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgPT09IG5leHRFbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQuY29udGFpbnMobmV4dEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKTtcbiAgfVxuXG4gIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFT1ZFUiwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgdHJ1ZSkpO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRU9VVCwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgZmFsc2UpKTtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNJTiwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgdHJ1ZSkpO1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9GT0NVU09VVCwgZXZlbnQgPT4gdGhpcy5fb25JbnRlcmFjdGlvbihldmVudCwgZmFsc2UpKTtcbiAgfVxuXG4gIF9jbGVhclRpbWVvdXQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBUb2FzdC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuZW5hYmxlRGlzbWlzc1RyaWdnZXIoVG9hc3QpO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlRvYXN0IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvYXN0KTtcblxuZXhwb3J0IHsgQWxlcnQsIEJ1dHRvbiwgQ2Fyb3VzZWwsIENvbGxhcHNlLCBEcm9wZG93biwgTW9kYWwsIE9mZmNhbnZhcywgUG9wb3ZlciwgU2Nyb2xsU3B5LCBUYWIsIFRvYXN0LCBUb29sdGlwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib290c3RyYXAuZXNtLmpzLm1hcFxuIiwiXHJcbi8qKlxyXG4gKiBzaW1wbGUgdXRpbGl0eSB0byBhZGQvcmVtb3ZlIGNvb2tpZXMgYmFzZWQgb24gRVM3XHJcbiAqIGNyZWRpdDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ4NzA2ODUyXHJcbiAqL1xyXG5jbGFzcyBDb29raWUge1xyXG4gICAgZ2V0KG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBjID0gZG9jdW1lbnQuY29va2llLm1hdGNoKGAoPzooPzpefC4qOyAqKSR7bmFtZX0gKj0gKihbXjtdKikuKiQpfF4uKiRgKVsxXVxyXG4gICAgICAgIGlmIChjKSByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGMpXHJcbiAgICB9XHJcblxyXG4gICAgc2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSwgb3B0czogYW55ID0ge30pIHtcclxuICAgICAgICAvKklmIG9wdGlvbnMgY29udGFpbnMgZGF5cyB0aGVuIHdlJ3JlIGNvbmZpZ3VyaW5nIG1heC1hZ2UqL1xyXG4gICAgICAgIGlmIChvcHRzLmRheXMpIHtcclxuICAgICAgICAgICAgb3B0c1snbWF4LWFnZSddID0gb3B0cy5kYXlzICogNjAgKiA2MCAqIDI0O1xyXG5cclxuICAgICAgICAgICAgLypEZWxldGluZyBkYXlzIGZyb20gb3B0aW9ucyB0byBwYXNzIHJlbWFpbmluZyBvcHRzIHRvIGNvb2tpZSBzZXR0aW5ncyovXHJcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRzLmRheXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qQ29uZmlndXJpbmcgb3B0aW9ucyB0byBjb29raWUgc3RhbmRhcmQgYnkgcmVkdWNpbmcgZWFjaCBwcm9wZXJ0eSovXHJcbiAgICAgICAgb3B0cyA9IE9iamVjdC5lbnRyaWVzKG9wdHMpLnJlZHVjZShcclxuICAgICAgICAgICAgKGFjY3VtdWxhdGVkU3RyLCBbaywgdl0pID0+IGAke2FjY3VtdWxhdGVkU3RyfTsgJHtrfT0ke3Z9YCwgJydcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIC8qRmluYWxseSwgY3JlYXRpbmcgdGhlIGtleSovXHJcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyBvcHRzXHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlKG5hbWU6IHN0cmluZywgb3B0cz86IGFueSkge1xyXG4gICAgICAgIHRoaXMuc2V0KG5hbWUsICcnLCB7ICdtYXgtYWdlJzogLTEsIC4uLm9wdHMgfSlcclxuICAgIH1cclxuXHJcbiAgICAvLyBwYXRoICYgZG9tYWluIG11c3QgbWF0Y2ggY29va2llIGJlaW5nIGRlbGV0ZWQgXHJcbiAgICBnZXRKU09OKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmdldChuYW1lKTtcclxuICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuICcnO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SlNPTihuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIG9wdHM6IGFueSkge1xyXG4gICAgICAgIHRoaXMuc2V0KG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwgb3B0cylcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENvb2tpZUhlbHBlciA9IG5ldyBDb29raWUoKTsiLCJcclxuLy9cclxuLy8gYWN0aW9uIHR5cGVzXHJcbi8vXHJcbmNsYXNzIGFwcEFjdGlvbnMge1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgQ09MX1NPUlRJTkcgPSAnQ09MX1NPUlRJTkcnO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgQ09MX1JFU0laRUQgPSAnQ09MX1JFU0laRUQnO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgQ09MX1NIT1dfSElERSA9ICdDT0xfU0hPV19ISURFJztcclxuICAgc3RhdGljIHJlYWRvbmx5IENPTF9SRU9SREVSID0gJ0NPTF9SRU9SREVSJ1xyXG59XHJcblxyXG4vL1xyXG4vLyBldmVudCB0eXBlc1xyXG4vL1xyXG5jbGFzcyBhcHBEYXRhRXZlbnRzIHtcclxuXHJcbiAgIHN0YXRpYyByZWFkb25seSBHUklEX0RBVEEgPSBcIkdSSURfREFUQVwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fTkVYVF9SRUNPUkQgPSBcIk9OX05FWFRfUkVDT1JEXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9QUkVWX1JFQ09SRCA9IFwiT05fUFJFVl9SRUNPUkRcIjtcclxuICAgc3RhdGljIHJlYWRvbmx5IE9OX1NBVkVfUkVDT1JEID0gXCJPTl9TQVZFX1JFQ09SRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fREVMRVRFX1JFQ09SRCA9IFwiT05fREVMRVRFX1JFQ09SRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fTEFTVF9SRUNPUkQgPSBcIk9OX0xBU1RfUkVDT1JEXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9GSVJTVF9SRUNPUkQgPSBcIk9OX0ZJUlNUX1JFQ09SRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fQUREX1JFQ09SRCA9IFwiT05fQUREX1JFQ09SRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fRkVUQ0hfUkVDT1JEID0gXCJPTl9GRVRDSF9SRUNPUkRcIjtcclxuICAgc3RhdGljIHJlYWRvbmx5IE9OX0ZFVENIX1JFQ09SRF9FUlJPUiA9IFwiT05fRkVUQ0hfUkVDT1JEX0VSUk9SXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9GRVRDSF9HUklEX1JFQ09SRCA9IFwiT05fRkVUQ0hfR1JJRF9SRUNPUkRcIjtcclxuICAgc3RhdGljIHJlYWRvbmx5IE9OX0ZFVENIX0dSSURfUkVDT1JEX0VSUk9SID0gXCJPTl9GRVRDSF9HUklEX1JFQ09SRF9FUlJPUlwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fTkFWSUdBVElOR19SRUNPUkQgPSBcIk9OX05BVklHQVRJTkdfUkVDT1JEXCI7IC8vIHJhaXNlZCB3aGVuIHRoZSBtYWluIHJlY29yZCBpcyBhYm91dCB0byBuYXZpZ2F0ZVxyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fR1JJRF9VUERBVEVEID0gXCJPTl9HUklEX1VQREFURURcIjtcclxuICAgc3RhdGljIHJlYWRvbmx5IE9OX1NBVkVfRVJST1IgPSBcIk9OX1NBVkVfRVJST1JcIjtcclxuICAgc3RhdGljIHJlYWRvbmx5IE9OX1NPUlRJTkdfUkVRVUVTVEVEID0gXCJPTl9TT1JUSU5HX1JFUVVFU1RFRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fQ09MU19SRU9SREVSRUQgPSBcIk9OX0NPTFNfUkVPUkRFUkVEXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9HUklEX0RBVEFfQk9VTkQgPSBcIk9OX0dSSURfREFUQV9CT1VORFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fR1JJRF9DT05GSUdfVVBEQVRFRCA9IFwiT05fR1JJRF9DT05GSUdfVVBEQVRFRFwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fUEFHRV9SRUFEWSA9IFwiT05fUEFHRV9SRUFEWVwiO1xyXG4gICBzdGF0aWMgcmVhZG9ubHkgT05fUk9XX1VQREFURUQgPSBcIk9OX1JPV19VUERBVEVEXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9GSUVMRF9VUERBVEVEID0gXCJPTl9GSUVMRF9VUERBVEVEXCI7XHJcbiAgIHN0YXRpYyByZWFkb25seSBPTl9ST1dfRE9VQkxFX0NMSUNLRUQgPSBcIk9OX1JPV19ET1VCTEVfQ0xJQ0tFRFwiXHJcbn1cclxuXHJcbmV4cG9ydCB7IGFwcEFjdGlvbnMsIGFwcERhdGFFdmVudHMgfVxyXG4iLCJcclxuaW1wb3J0IHsgQlNFdmVudFN1YnNjcmliZXJNb2RlbCwgQlNXaW5Qb3BFdmVudCwgQlNFdmVudCB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuaW1wb3J0IHsgYXBwRGF0YUV2ZW50cyB9IGZyb20gXCIuL2RhdGEtZXZlbnRzXCI7XHJcblxyXG5jbGFzcyBEYXRhRXZlbnRzU2VydmljZSB7XHJcbiAgICBjYWxsYmFja3M6IEJTRXZlbnRTdWJzY3JpYmVyTW9kZWxbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcldpblBvcFN0YXRlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlZ2lzdGVyV2luUG9wU3RhdGUoKSB7XHJcbiAgICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSAoZTogUG9wU3RhdGVFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS5zdGF0ZSAmJiBlLnN0YXRlLmV2ZW50RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZS5zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXY6IEJTV2luUG9wRXZlbnQgPSB7IEV2ZW50RGF0YTogZS5zdGF0ZS5ldmVudERhdGEsIFNraXBQdXNoOiB0cnVlLCBEYXRhU291cmNlTmFtZTogXCJcIiB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5FbWl0KGFwcERhdGFFdmVudHMuT05fRkVUQ0hfUkVDT1JELCB3aW5kb3csIGV2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIEVtaXQoZXZlbnROYW1lOiBzdHJpbmcsIHNvdXJjZTogYW55LCBldmVudEFyZ3M6IEJTRXZlbnQpIHtcclxuICAgICAgICBpZiAoIWV2ZW50TmFtZSkgcmV0dXJuO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGNiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2IuRXZlbnROYW1lICE9PSBldmVudE5hbWUgfHwgKGNiLkRhdGFTb3VyY2VOYW1lICE9PSBldmVudEFyZ3MuRGF0YVNvdXJjZU5hbWUgJiYgY2IuVmVyaWZ5RGF0YVNvdXJjZU5hbWUgPT09IHRydWUpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjYi5DYWxsYmFjayhzb3VyY2UsIGV2ZW50QXJncyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFVuc3Vic2NyaWJlKG1vZGVsOiBCU0V2ZW50U3Vic2NyaWJlck1vZGVsKSB7XHJcblxyXG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IHRoaXMuY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGNiKSA9PiAhKGNiLktleSA9PT0gbW9kZWwuS2V5XHJcbiAgICAgICAgICAgICAgICB8fCBjYi5FdmVudE5hbWUgPT09IG1vZGVsLkV2ZW50TmFtZVxyXG4gICAgICAgICAgICAgICAgfHwgY2IuRGF0YVNvdXJjZU5hbWUgPT09IG1vZGVsLkRhdGFTb3VyY2VOYW1lKSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gZmlsdGVyZWQ7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIFN1YnNjcmliZShtb2RlbDogQlNFdmVudFN1YnNjcmliZXJNb2RlbCkge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gTm8gbmVlZCB0byBkbyBhIGxvb2t1cCBpZiBoYW5kbGVyIGV4aXN0IGZyb20gYmVmb3JlXHJcbiAgICAgICAgLy9cclxuICAgICAgICBpZiAoIW1vZGVsLkV2ZW50TmFtZSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2gobW9kZWwpO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRhdGFFdmVudHNTZXJ2aWNlID0gbmV3IERhdGFFdmVudHNTZXJ2aWNlKCk7IiwiY2xhc3MgU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdTZXNzaW9uIHN0b3JhZ2UgaXMgaW5pdGlhbGl6ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGtleSwgdmFsdWUsIGV4cGlyeSkge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gSGVyZSB3ZSBhcmUgdXNpbmcgc2Vzc2lvblN0b3JhZ2UgaW5zdGVhZCBvZiBsb2NhbFN0b3JhZ2UuXHJcbiAgICAgICAgLy8gVGhlIGxhdGVyIGlzIG5vdCBjbGVhcmVkIGV2ZW4gaWYgdGhlIHVzZXIgY2xvc2VzIHRoZSBicm93c2VyIVxyXG4gICAgICAgIC8vXHJcblxyXG4gICAgICAgIHZhciB4ID0geyB2YWx1ZTogdmFsdWUsIHR5cGU6ICdwcmVtJywgZXhwaXJ5OiBleHBpcnkuZ2V0VGltZSgpIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgeC50eXBlID0gJ29iamVjdCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoeCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGVuZEl0ZW0oa2V5LCBhcHBlbmRGYWN0b3J5KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmdldEl0ZW1SYXcoa2V5KTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGFwcGVuZEZhY3RvcnkoaXRlbS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEl0ZW0oa2V5LCBuZXdWYWx1ZSwgbmV3IERhdGUoaXRlbS5leHBpcnkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVFeHBpcnlLZXkoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGtleSArICctZXhwaXJ5JztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJdGVtUmF3KGtleSkge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICBpZiAoZW50cnkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB4ID0gSlNPTi5wYXJzZShlbnRyeSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZXhwaXJ5ID0geC5leHBpcnk7XHJcbiAgICAgICAgICAgIGlmIChEYXRlLm5vdygpID4gcGFyc2VJbnQoZXhwaXJ5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZW50cnkgZXhwaXJlZCwgd2lsbCBiZSByZW1vdmVkJywgeCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgeCA9IEpTT04ucGFyc2UoZW50cnkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGV4cGlyeSA9IHguZXhwaXJ5O1xyXG4gICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSA+IHBhcnNlSW50KGV4cGlyeSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHgudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGFsbCB0aGUgaXRlbXMgc3RhcnRpbmcgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4IGZyb20gc2Vzc2lvbiBzdG9yYWdlIFxyXG4gICAgICogTm90ZSB0aGF0IGlmIG5vIHByZWZpeCBpcyBwcm92aWRlZCwgaXQgd2lsbCByZW1vdmUgYWxsIHRoZSBrZXlzLlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmc/fSBwcmVmaXggb3B0aW9uYWxcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICByZW1vdmVBbGwocHJlZml4KSB7XHJcblxyXG4gICAgICAgIGlmICghcHJlZml4KSB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHNlc3Npb25TdG9yYWdlLmxlbmd0aDtcclxuICAgICAgICBpZiAobGVuZ3RoIDw9IDApIHJldHVybjtcclxuXHJcblxyXG4gICAgICAgIHZhciBrZXlzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBzZXNzaW9uU3RvcmFnZS5rZXkoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIWtleS5zdGFydHNXaXRoKHByZWZpeCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwga2V5cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1Nlc3Npb25TdG9yYWdlU2VydmljZX0iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUJhc2UgfSBmcm9tIFwiLi4vY29tcG9uZW50c1wiO1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgdXNlZCB0byBkaXNjb3ZlciBkYXRhLXRhYmxlcyBieSBpdHMgaWRlbnRpZnlcclxuICogVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gd2UgaGF2ZSBtYW55IHRhYmxlcyBpbiB0aGUgcGFnZSBhbmQgcXVlcnkgdGhlbSBmb3IgdGhlaXIgZGF0YVxyXG4gKiB0byBiZSBzZW50IGJhY2sgdG8gc2VydmVyIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyB0aGUgc2F2ZS9wZXJzaXN0IGJ1dHRvblxyXG4gKi9cclxuY2xhc3MgQlNEYXRhVGFibGVEaXNjb3ZlcnlTZXJ2aWNlIHtcclxuXHJcbiAgICBEYXRhVGFibGVzOiBCU0RhdGFUYWJsZUJhc2VbXTtcclxuXHJcbiAgICBBZGQoZGF0YXRhYmxlOiBCU0RhdGFUYWJsZUJhc2UpIHtcclxuICAgICAgICB0aGlzLkRhdGFUYWJsZXMucHVzaChkYXRhdGFibGUpO1xyXG4gICAgfVxyXG5cclxuICAgIEdldEFsbCgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0OiBCU0dyaWREYXRhTW9kZWxbXSA9IFtdO1xyXG4gICAgICAgIHRoaXMuRGF0YVRhYmxlcy5mb3JFYWNoKChkdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZHQuaXNSZWFkT25seSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIG1vZGVsOiBCU0dyaWREYXRhTW9kZWwgPSB7IERhdGFTb3VyY2VOYW1lOiBkdC5kYXRhU291cmNlTmFtZSwgRGF0YTogZHQucmVjb3JkcyB9O1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChtb2RlbCk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRzTmFtZSBEYXRhU291cmNlIE5hbWVcclxuICAgICAqL1xyXG4gICAgR2V0QnlEU05hbWUoZHNOYW1lOiBzdHJpbmcpOiBCU0dyaWREYXRhTW9kZWwge1xyXG4gICAgICAgIHZhciBmaW5kID0gdGhpcy5EYXRhVGFibGVzLmZpbmQoKGR0KSA9PiBkdC5kYXRhU291cmNlTmFtZSA9PT0gZHNOYW1lKTtcclxuICAgICAgICBpZiAoZmluZClcclxuICAgICAgICAgICAgcmV0dXJuIHsgRGF0YVNvdXJjZU5hbWU6IGZpbmQuZGF0YVNvdXJjZU5hbWUsIERhdGE6IGZpbmQucmVjb3JkcyB9ICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuaW50ZXJmYWNlIEJTR3JpZERhdGFNb2RlbCB7XHJcbiAgICBEYXRhU291cmNlTmFtZTogc3RyaW5nO1xyXG4gICAgRGF0YTogb2JqZWN0W11cclxufVxyXG5cclxuY29uc3QgYnNEYXRhVGFibGVEaXNjb3ZlcnlTZXJ2aWNlID0gbmV3IEJTRGF0YVRhYmxlRGlzY292ZXJ5U2VydmljZSgpO1xyXG5cclxuZXhwb3J0IHsgYnNEYXRhVGFibGVEaXNjb3ZlcnlTZXJ2aWNlIH0iLCJpbXBvcnQgKiBhcyAkIGZyb20gXCJqcXVlcnlcIlxyXG5pbXBvcnQgeyBDb29raWVIZWxwZXIsIGRhdGFFdmVudHNTZXJ2aWNlLCBhcHBBY3Rpb25zLCBhcHBEYXRhRXZlbnRzIH0gZnJvbSBcIi4uL3NlcnZpY2VzXCI7XHJcbmltcG9ydCB7IEJTRXZlbnQgfSBmcm9tIFwiLi4vY29tbW9uVHlwZXMvY29tbW9uLXR5cGVzXCI7XHJcblxyXG5cclxuY2xhc3MgQlNEYXRhVGFibGVCYXNlIHtcclxuXHJcbiAgICBlbGVtZW50OiBKUXVlcnk7XHJcbiAgICBjaGlsZHJlbjogQlNEYXRhVGFibGVCYXNlW107XHJcbiAgICBqcXVlcnk6IEpRdWVyeVN0YXRpYztcclxuICAgIGFwcERhdGFFdmVudHM6IHR5cGVvZiBhcHBEYXRhRXZlbnRzO1xyXG4gICAgYXBwQWN0aW9uczogdHlwZW9mIGFwcEFjdGlvbnM7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5qcXVlcnkgPSAkO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICB0aGlzLmFwcERhdGFFdmVudHMgPSBhcHBEYXRhRXZlbnRzO1xyXG4gICAgICAgIHRoaXMuYXBwQWN0aW9ucyA9IGFwcEFjdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgbm90aWZ5TGlzdGVuZXJzKGV2ZW50VHlwZTogc3RyaW5nLCBwYXlsb2FkOiBCU0V2ZW50KSB7XHJcbiAgICAgICAgZGF0YUV2ZW50c1NlcnZpY2UuRW1pdChldmVudFR5cGUsIHRoaXMsIHBheWxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdyaWRTZXR0aW5ncyhncmlkSWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICAgICAgdmFyIGdyaWRTZXR0aW5ncyA9IENvb2tpZUhlbHBlci5nZXRKU09OKGdyaWRJZCk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0dyaWRTZXR0aW5ncyBDb29raWU6ICcsIGdyaWRTZXR0aW5ncyA/ICdzZXR0aW5ncyBmb3VuZCcgOiAnbm8gc2V0dGluZ3MgZm91bmQhJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZ3JpZFNldHRpbmdzO1xyXG5cclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfZGF0YVNvdXJjZU5hbWU6IHN0cmluZztcclxuXHJcbiAgICBnZXQgZGF0YVNvdXJjZU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNvdXJjZU5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGRhdGFTb3VyY2VOYW1lKHY6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2RhdGFTb3VyY2VOYW1lID0gdjtcclxuICAgIH1cclxuXHJcbiAgICBfaXNSZWFkT25seTogYm9vbGVhbjtcclxuICAgIGdldCBpc1JlYWRPbmx5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1JlYWRPbmx5O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBpc1JlYWRPbmx5KHY6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9pc1JlYWRPbmx5ID0gdjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVjb3JkcygpOiBvYmplY3RbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNzcygnd2lkdGgnKTtcclxuICAgIH1cclxuICAgIHNldCB3aWR0aCh3aWR0aCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jc3MoJ3dpZHRoJywgd2lkdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2aXNpYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuaXMoJzp2aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgICBzZXQgdmlzaWJsZSh2YWwpIHtcclxuICAgICAgICBpZiAodmFsID09PSBmYWxzZSlcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmhpZGUoKVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDc3ModDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jc3ModCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q3NzKGssIHYpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKGssIHYpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBjc3MoY3NzKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNzcyhjc3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBwcm9wcyBcclxuICAgICAqL1xyXG4gICAgcHJvcHMocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHByb3BzLmZvckVhY2goKHApID0+IF90aGlzLnByb3AocC5rZXksIHAudmFsdWUpKVxyXG4gICAgfVxyXG5cclxuICAgIHByb3Aoa2V5OiBzdHJpbmcsIHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5hdHRyKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3Aoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmF0dHIoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5maW5kKHNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDbGFzcyhjc3NDbGFzcykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRDbGFzcyhjc3NDbGFzcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGhhc0NsYXNzKGNzc0NsYXNzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5oYXNDbGFzcyhjc3NDbGFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGV4dCh0eHQpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQudGV4dCh0eHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC50ZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVCYXNlfSBlbGVtIFxyXG4gICAgICovXHJcbiAgICBhcHBlbmQoZWxlbSwgcHVzaFRvQXJyYXkgPSB0cnVlKSB7XHJcblxyXG4gICAgICAgIGlmIChwdXNoVG9BcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goZWxlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKGVsZW0uZWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZm9jdXMoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmZvY3VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eU9iaihvYmopIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb3AoJ2lkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGlkKHYpIHtcclxuICAgICAgICB0aGlzLnByb3AoJ2lkJywgdik7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKSB7XHJcbiAgICAgICAgLy9kZWJ1Z2dlcjtcclxuICAgICAgICB2YXIgYyA9IG5ldyBCU0RhdGFUYWJsZUJhc2UoKTtcclxuICAgICAgICAvLyBjLmVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuY2xvbmUoKTtcclxuICAgICAgICB2YXIgeCA9IHRoaXMuZWxlbWVudFswXS5jbG9uZU5vZGUoKTtcclxuICAgICAgICBpZiAoeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGMuZWxlbWVudCA9IHRoaXMuanF1ZXJ5KHgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLmNoaWxkcmVuLm1hcCgodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNjID0gdi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgYy5lbGVtZW50LmFwcGVuZChjYy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGMuY2hpbGRyZW4gPSBsaXN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhIHNoYWxsb3cgY2xvbmVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgc2hDbG9uZShvYmopIHtcclxuICAgICAgICBpZiAoIW9iaikgcmV0dXJuIG9iajtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSwgb2JqKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQlNEYXRhVGFibGVCYXNlIH0iLCJcclxuZXhwb3J0IGludGVyZmFjZSBCU0V2ZW50SGFuZGxlciB7IChzZW5kZXI6IG9iamVjdCwgZXZlbnRPYmplY3Q6IEJTRXZlbnQpOiB2b2lkIH1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQlNFdmVudCB7XHJcbiAgICBFdmVudERhdGE/OiB7IEV2ZW50PzogYW55IH07XHJcbiAgICBEYXRhU291cmNlTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTU29ydGluZ1JlcXVlc3RFdmVudCBleHRlbmRzIEJTRXZlbnQge1xyXG4gICAgRXZlbnREYXRhPzoge1xyXG4gICAgICAgIEV2ZW50PzogYW55LFxyXG4gICAgICAgIFByb3BOYW1lPzogc3RyaW5nLFxyXG4gICAgICAgIEFzYz86IGJvb2xlYW5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCU0NvbHNSZW9yZGVyZWRFdmVudCBleHRlbmRzIEJTRXZlbnQge1xyXG4gICAgRXZlbnREYXRhPzoge1xyXG4gICAgICAgIEV2ZW50PzogYW55LFxyXG4gICAgICAgIEN1cnJlbnRDb2w/OiBvYmplY3QsXHJcbiAgICAgICAgQXNjPzogYm9vbGVhblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTQ29uZmlnVXBkYXRlZEV2ZW50IGV4dGVuZHMgQlNFdmVudCB7XHJcbiAgICBFdmVudERhdGE/OiB7XHJcbiAgICAgICAgRXZlbnQ/OiBhbnksXHJcbiAgICAgICAgQWN0aW9uPzogc3RyaW5nLFxyXG4gICAgICAgIEN1cnJlbnRDb2w/OiBvYmplY3QsXHJcbiAgICAgICAgQXNjPzogYm9vbGVhblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTRmV0Y2hSZWNvcmRFcnJvckV2ZW50IGV4dGVuZHMgQlNFdmVudCB7XHJcbiAgICBFdmVudERhdGE/OiB7XHJcbiAgICAgICAgRXZlbnQ/OiBhbnksXHJcbiAgICAgICAgUmVjb3JkSWQ/OiBzdHJpbmdcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCU0ZldGNoUmVjb3JkRXZlbnQgZXh0ZW5kcyBCU0V2ZW50IHtcclxuICAgIEV2ZW50RGF0YT86IHtcclxuICAgICAgICBEYXRhPzogYW55LFxyXG4gICAgICAgIE1ldGFEYXRhPzogQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YVxyXG4gICAgICAgIEV2ZW50PzogYW55XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQlNHcmlkVXBkYXRlZEV2ZW50IGV4dGVuZHMgQlNFdmVudCB7XHJcbiAgICBFdmVudERhdGE/OiB7XHJcbiAgICAgICAgR3JpZD86IG9iamVjdCxcclxuICAgICAgICBFdmVudD86IGFueVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTUm93VXBkYXRlZEV2ZW50IGV4dGVuZHMgQlNFdmVudCB7XHJcbiAgICBFdmVudERhdGE/OiB7XHJcbiAgICAgICAgUm93PzogYW55LFxyXG4gICAgICAgIEV2ZW50PzogYW55XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQlNGaWVsZFVwZGF0ZWRFdmVudCBleHRlbmRzIEJTRXZlbnQge1xyXG4gICAgRXZlbnREYXRhPzoge1xyXG4gICAgICAgIFJvdz86IGFueSxcclxuICAgICAgICBFdmVudD86IGFueSxcclxuICAgICAgICBGaWVsZD86IG9iamVjdFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTV2luUG9wRXZlbnQgZXh0ZW5kcyBCU0V2ZW50IHtcclxuICAgIFNraXBQdXNoOiBib29sZWFuXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBCU0V2ZW50U3Vic2NyaWJlck1vZGVsIHtcclxuICAgIEtleTogc3RyaW5nLFxyXG4gICAgRXZlbnROYW1lOiBzdHJpbmcsXHJcbiAgICBDYWxsYmFjaz86IEJTRXZlbnRIYW5kbGVyLFxyXG4gICAgRGF0YVNvdXJjZU5hbWU6IHN0cmluZyxcclxuICAgIFZlcmlmeURhdGFTb3VyY2VOYW1lPzogYm9vbGVhblxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFVybCBDQiB0eXBlXHJcbiAqIEBjYWxsYmFjayBnZXRVcmxDYWxsYmFja1xyXG4gKiBAcGFyYW0ge251bWJlcn0gcGFnZUluZGV4XHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHVybCB0byBhY2Nlc3MgbmV4dCBwYWdlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIGdldFVybENhbGxiYWNrIHsgKHBhZ2VJbmRleDogbnVtYmVyKTogc3RyaW5nIH07XHJcblxyXG4vLyBUT0RPOiBGaXggdGhlIG9wdGlvbnMgZm9yIHRoZSBiYXNlIGNsYXNzIEJTRGF0YVRhYmxlSW5wdXQgYW5kIGFsbCBpdHMgY2hpbGRzXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJTSW5wdXRPcHRpb25zIHtcclxuICAgIERhdGFTb3VyY2VOYW1lOiBzdHJpbmc7XHJcbiAgICBJbnB1dFR5cGU/OiBzdHJpbmc7XHJcbiAgICBFbGVtZW50SWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQlNCdXR0b25PcHRpb25zIGV4dGVuZHMgQlNJbnB1dE9wdGlvbnMge1xyXG4gICAgSWNvbj86IHN0cmluZztcclxuICAgIEhhbmRsZXI/OiAoYXJnMDogSlF1ZXJ5LkNsaWNrRXZlbnQpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQlNTZWxlY3Rvck9wdGlvbnMgZXh0ZW5kcyBCU0lucHV0T3B0aW9ucyB7XHJcbiAgICBQcm9wTmFtZTogc3RyaW5nLFxyXG4gICAgQ3NzQ2xhc3M6IHN0cmluZyxcclxuICAgIFBsYWNlSG9sZGVyOiBzdHJpbmcsXHJcbiAgICBCdG5JZDogc3RyaW5nLFxyXG4gICAgRWxlbWVudElkOiBzdHJpbmcsXHJcbiAgICBCdG5DbGljazogKHNlbmRlcjogb2JqZWN0LCBlOiBhbnkpID0+IHZvaWRcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlU2VsZWN0TGlzdEl0ZW0ge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzU2VsZWN0ZWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGV4dDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBpc1NlbGVjdGVkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmlzU2VsZWN0ZWQgPSBpc1NlbGVjdGVkO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbiB7XHJcbiAgICBOYW1lOiBzdHJpbmc7XHJcbiAgICBEYXRhVHlwZTogc3RyaW5nO1xyXG4gICAgV2lkdGg6IHN0cmluZztcclxuICAgIFByb3BOYW1lOiBzdHJpbmc7XHJcbiAgICBJc0tleTogYm9vbGVhbjtcclxuICAgIERhdGFTb3VyY2U6IEJTRGF0YVRhYmxlU2VsZWN0TGlzdEl0ZW1bXTtcclxuICAgIENvbFNwYW46IG51bWJlcjtcclxuICAgIFJvd1NwYW46IG51bWJlcjtcclxuICAgIFNlbGVjdG9yRGF0YUNCOiBnZXRVcmxDYWxsYmFjaztcclxuICAgIFNlbGVjdG9yQ29sczogQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW25hbWVdXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2RhdGFUeXBlXVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt3aWR0aF1cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvcE5hbWVdXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0tleV1cclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVTZWxlY3RMaXN0SXRlbVtdfSBbZGF0YVNvdXJjZV1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbY29sU3Bhbl1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcm93U3Bhbl1cclxuICAgICAqIEBwYXJhbSB7Z2V0VXJsQ2FsbGJhY2t9IFtzZWxlY3RvckRhdGFDQl0gLSBhIGNiIHRvIHJldHVybiB0aGUgcGFnZSB1cmxcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW119IFtzZWxlY3RvckNvbHNdIC0gY29scyBkZWYgZm9yIHNlbGVjdG9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU/OiBzdHJpbmcsIGRhdGFUeXBlPzogc3RyaW5nLCB3aWR0aD86IHN0cmluZywgcHJvcE5hbWU/OiBzdHJpbmcsIGlzS2V5PzogYm9vbGVhbixcclxuICAgICAgICBkYXRhU291cmNlPzogQlNEYXRhVGFibGVTZWxlY3RMaXN0SXRlbVtdLCBjb2xTcGFuPzogbnVtYmVyLCByb3dTcGFuPzogbnVtYmVyLFxyXG4gICAgICAgIHNlbGVjdG9yRGF0YUNCPzogZ2V0VXJsQ2FsbGJhY2ssIHNlbGVjdG9yQ29scz86IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbltdKSB7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLkRhdGFUeXBlID0gZGF0YVR5cGU7XHJcbiAgICAgICAgdGhpcy5XaWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuUHJvcE5hbWUgPSBwcm9wTmFtZTtcclxuICAgICAgICB0aGlzLklzS2V5ID0gaXNLZXk7XHJcbiAgICAgICAgdGhpcy5EYXRhU291cmNlID0gZGF0YVNvdXJjZTtcclxuICAgICAgICB0aGlzLkNvbFNwYW4gPSBjb2xTcGFuO1xyXG4gICAgICAgIHRoaXMuUm93U3BhbiA9IHJvd1NwYW47XHJcbiAgICAgICAgdGhpcy5TZWxlY3RvckRhdGFDQiA9IHNlbGVjdG9yRGF0YUNCO1xyXG4gICAgICAgIHRoaXMuU2VsZWN0b3JDb2xzID0gc2VsZWN0b3JDb2xzO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEEgY2FsbGJhY2sgdHlwZSB0byBnZXQgdGhlIG5leHQgcGFnZSBpbiB0aGUgb2ZmbGluZSBtb2RlXHJcbiAqIEBjYWxsYmFjayBnZXROZXh0UGFnZU9mZmxpbmVcclxuICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VJbmRleFxyXG4gKiBAcGFyYW0ge29iamVjdFtdfSBkYXRhIC0gZGF0YXNldFxyXG4gKiBAcGFyYW0ge0JTRGF0YVRhYmxlUGFnaW5nTWV0YURhdGF9IG1ldGFkYXRhIC0gZGF0YXNldGEgbWV0YWRhdGFcclxuICogQHJldHVybnMge29iamVjdFtdfSByZXR1cm5zIHRoZSBkYXRhIG1vZGVsIGZvciB0aGUgcmVxdWVzdCBwYWdlXHJcbiAqL1xyXG5cclxuIGludGVyZmFjZSBnZXROZXh0UGFnZU9mZmxpbmUgeyAocGFnZUluZGV4OiBudW1iZXIsIGRhdGE6IG9iamVjdFtdLCBtZXRhRGF0YTogQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSk6IG9iamVjdFtdIH07XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVEYXRhU291cmNlIHtcclxuICAgIG5hbWU6IGFueTtcclxuICAgIGRhdGE6IGFueTtcclxuICAgIGlzUmVtb3RlOiBhbnk7XHJcbiAgICB1cmw6IChwYWdlOiBhbnkpID0+IGFueTtcclxuICAgIGdldFBhZ2VPZmZsaW5lQ0I6IGFueTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAgICogQHBhcmFtIHt7aW5pdERhdGE6IG9iamVjdFtdO21ldGFEYXRhOiBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhO319IGluaXREYXRhXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUmVtb3RlXHJcbiAgICAgKiBAcGFyYW0ge2dldFVybENhbGxiYWNrfSB1cmwgLSBBIGNiIHRoYXQgd2lsbCBhY2NlcHQgYSBwYWdlIG51bWJlciBhbmQgcmV0dXJucyB0aGUgdXJsIHRvIHRoZSBuZXh0IHBhZ2VcclxuICAgICAqIEBwYXJhbSB7Z2V0TmV4dFBhZ2VPZmZsaW5lfSBnZXRQYWdlT2ZmbGluZSAtIEEgY2FsbGJhY2sgdHlwZSB0byBnZXQgdGhlIG5leHQgcGFnZSBpbiB0aGUgb2ZmbGluZSBtb2RlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgaW5pdERhdGE6IHsgaW5pdERhdGE6IG9iamVjdFtdOyBtZXRhRGF0YTogQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YTsgfSxcclxuICAgICAgICBpc1JlbW90ZTogYm9vbGVhbiwgdXJsOiBnZXRVcmxDYWxsYmFjayA9IChwYWdlKSA9PiB1bmRlZmluZWQsIGdldFBhZ2VPZmZsaW5lOiBnZXROZXh0UGFnZU9mZmxpbmUgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGluaXREYXRhO1xyXG4gICAgICAgIHRoaXMuaXNSZW1vdGUgPSBpc1JlbW90ZTtcclxuICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgICAgICB0aGlzLmdldFBhZ2VPZmZsaW5lQ0IgPSBnZXRQYWdlT2ZmbGluZTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZU9wdGlvbnMge1xyXG4gICAgZ3JpZElkOiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJJZDogc3RyaW5nO1xyXG4gICAgY29sRGVmaW5pdGlvbjogQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW107XHJcbiAgICBkYXRhU291cmNlOiBCU0RhdGFUYWJsZURhdGFTb3VyY2U7XHJcbiAgICBpc1JlYWRvbmx5OiBib29sZWFuO1xyXG4gICAgZW5hYmxlSW5maW5pdGVTY3JvbGw6IGJvb2xlYW47XHJcbiAgICBjYWNoZVJlc3BvbnNlczogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGdyaWRJZCBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250YWluZXJJZFxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUNvbERlZmluaXRpb25bXX0gY29sRGVmaW5pdGlvbiBcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVEYXRhU291cmNlfSBkYXRhU291cmNlIFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1JlYWRvbmx5XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGdyaWRJZDogc3RyaW5nLCBjb250YWluZXJJZDogc3RyaW5nLFxyXG4gICAgICAgIGNvbERlZmluaXRpb246IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbltdLCBkYXRhU291cmNlOiBCU0RhdGFUYWJsZURhdGFTb3VyY2UsIGlzUmVhZG9ubHk6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMuZ3JpZElkID0gZ3JpZElkO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVySWQgPSBjb250YWluZXJJZDtcclxuICAgICAgICB0aGlzLmNvbERlZmluaXRpb24gPSBjb2xEZWZpbml0aW9uO1xyXG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XHJcbiAgICAgICAgdGhpcy5pc1JlYWRvbmx5ID0gaXNSZWFkb25seTtcclxuICAgICAgICB0aGlzLmVuYWJsZUluZmluaXRlU2Nyb2xsID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNhY2hlUmVzcG9uc2VzID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhIHtcclxuICAgIHBhZ2VJbmRleDogbnVtYmVyO1xyXG4gICAgcGFnZVNpemU6IG51bWJlcjtcclxuICAgIHRvdGFsUmVjb3JkczogbnVtYmVyO1xyXG4gICAgdG90YWxQYWdlczogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZUluZGV4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZVNpemVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3RhbFJlY29yZHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocGFnZUluZGV4OiBudW1iZXIgPSAxLCBwYWdlU2l6ZTogbnVtYmVyID0gMTAsIHRvdGFsUmVjb3JkczogbnVtYmVyID0gMTApIHtcclxuICAgICAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDtcclxuICAgICAgICB0aGlzLnBhZ2VTaXplID0gIXBhZ2VTaXplIHx8IHBhZ2VTaXplIDw9IDAgPyAxMCA6IHBhZ2VTaXplO1xyXG4gICAgICAgIHRoaXMudG90YWxSZWNvcmRzID0gdG90YWxSZWNvcmRzO1xyXG4gICAgICAgIHRoaXMudG90YWxQYWdlcyA9IE1hdGguY2VpbCh0aGlzLnRvdGFsUmVjb3JkcyAvIHRoaXMucGFnZVNpemUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlUGFnaW5hdGlvbk9wdGlvbnMge1xyXG4gICAgZHNOYW1lOiBhbnk7XHJcbiAgICBwYWdpbmdNZXRhRGF0YTogYW55O1xyXG4gICAgbmV4dFBhZ2VDYWxsYmFjazogKHBhZ2U6IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkc05hbWVcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YX0gcGFnaW5nTWV0YURhdGFcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZHNOYW1lOiBzdHJpbmcsIHBhZ2luZ01ldGFEYXRhOiBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhLCBuZXh0UGFnZUNhbGxiYWNrID0gKHBhZ2U6IG51bWJlcikgPT4geyB9KSB7XHJcbiAgICAgICAgdGhpcy5kc05hbWUgPSBkc05hbWU7XHJcbiAgICAgICAgdGhpcy5wYWdpbmdNZXRhRGF0YSA9IHBhZ2luZ01ldGFEYXRhO1xyXG4gICAgICAgIHRoaXMubmV4dFBhZ2VDYWxsYmFjayA9IG5leHRQYWdlQ2FsbGJhY2s7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVIdHRwQ2xpZW50T3B0aW9ucyB7XHJcbiAgICB1cmw6IGFueTtcclxuICAgIG1ldGhvZDogYW55O1xyXG4gICAgaGVhZGVyczogYW55O1xyXG4gICAgcmVjb3JkSWQ6IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0W119IGhlYWRlcnNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWNvcmRJZFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih1cmw6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGhlYWRlcnM6IG9iamVjdFtdID0gdW5kZWZpbmVkLCByZWNvcmRJZDogc3RyaW5nID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcclxuICAgICAgICB0aGlzLnJlY29yZElkID0gcmVjb3JkSWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVDb2xTZXR0aW5ncyB7XHJcbiAgICB3aWR0aDogc3RyaW5nO1xyXG4gICAgdmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHNvcnQ6IHN0cmluZztcclxuICAgIHBvc2l0aW9uOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB3aWR0aFxyXG4gICAgICogQHBhcmFtIHtib29sZWFufSB2aXNpYmxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc29ydCBhc2N8ZGVzY1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBzdHJpbmcsIHZpc2libGU6IGJvb2xlYW4sIHNvcnQ6IHN0cmluZywgcG9zaXRpb246IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xyXG4gICAgICAgIHRoaXMuc29ydCA9IHNvcnQ7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uIH0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUJhc2UgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUJhc2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZUNlbGwgZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICBpc0hlYWRlcjogYm9vbGVhbjtcclxuICAgIG9wdGlvbnM6IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUNvbERlZmluaXRpb259IFtvcHRpb25zXVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24sIGlzSGVhZGVyID0gZmFsc2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbmV3IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbigpO1xyXG4gICAgICAgIHRoaXMuaXNIZWFkZXIgPSBpc0hlYWRlcjtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB2YXIgcm93U3BhbiA9IHRoaXMub3B0aW9ucyA/IHRoaXMub3B0aW9ucy5Sb3dTcGFuIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBjb2xTcGFuID0gdGhpcy5vcHRpb25zID8gdGhpcy5vcHRpb25zLkNvbFNwYW4gOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9XHJcbiAgICAgICAgICAgIHRoaXMuaXNIZWFkZXIgPT09IHRydWVcclxuICAgICAgICAgICAgICAgID8gdGhpcy5qcXVlcnkoXCI8dGggY2xhc3M9J3NvcnRpbmcgZHMtY29sJz48L3RoPlwiKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLmpxdWVyeShcIjx0ZD48L3RkPlwiKTtcclxuXHJcbiAgICAgICAgaWYgKHJvd1NwYW4pXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdyb3dTcGFuJywgcm93U3Bhbik7XHJcblxyXG4gICAgICAgIGlmIChjb2xTcGFuKVxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cignY29sU3BhbicsIGNvbFNwYW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgIHZhciBzYyA9IHN1cGVyLmNsb25lKCk7XHJcbiAgICAgICAgdmFyIGMgPSBuZXcgQlNEYXRhVGFibGVDZWxsKHRoaXMuc2hDbG9uZSh0aGlzLm9wdGlvbnMpLCB0aGlzLmlzSGVhZGVyKTtcclxuICAgICAgICBjLmNoaWxkcmVuID0gc2MuY2hpbGRyZW47XHJcbiAgICAgICAgYy5lbGVtZW50ID0gc2MuZWxlbWVudDtcclxuICAgICAgICByZXR1cm4gYztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUJhc2UgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUJhc2VcIjtcclxuaW1wb3J0IHsgQlNJbnB1dE9wdGlvbnMgfSBmcm9tIFwiLi4vY29tbW9uVHlwZXMvY29tbW9uLXR5cGVzXCI7XHJcblxyXG5jbGFzcyBCU0RhdGFUYWJsZUlucHV0IGV4dGVuZHMgQlNEYXRhVGFibGVCYXNlIHtcclxuICAgIG9wdGlvbnM6IEJTSW5wdXRPcHRpb25zXHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogQlNJbnB1dE9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuSW5wdXRUeXBlID09PSAnc2VsZWN0JylcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5qcXVlcnkoXCI8c2VsZWN0Pjwvc2VsZWN0PlwiKTtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLklucHV0VHlwZSA9PT0gJ2J1dHRvbicpXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuanF1ZXJ5KGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1vdXRsaW5lLXByaW1hcnlcIiB0eXBlPVwiYnV0dG9uXCI+PC9idXR0b24+YCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmpxdWVyeShgPGlucHV0IHR5cGU9JyR7dGhpcy5vcHRpb25zLklucHV0VHlwZX0nIC8+IGApO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWwoKTogc3RyaW5nIHwgbnVtYmVyIHwgc3RyaW5nW10ge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuSW5wdXRUeXBlID09PSAnZGF0ZScgJiYgdGhpcy5lbGVtZW50LnZhbCgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5lbGVtZW50LnZhbCgpLnRvU3RyaW5nKCkpLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQudmFsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHZhbCh2OiBzdHJpbmcgfCBudW1iZXIgfCBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC52YWwodik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB3aXRoIGRyb3Bkb3ducyB3aGVyZSBqdXN0IHNldHRpbmcgdGhlIHZhbCBvZiBlbGVtZW50IGlzIG5vdCBlbm91Z2hcclxuICAgICAqIHRoaXMgbWV0aG9kIGVuc3VyZSB0aGF0ICdjaGFuZ2UnIGlzIGNhbGxlZCBhZnRlciAndmFsJyBzbyB0aGF0IHZhbHVlIG9mIHRoZSBzZWxlY3RvciBpcyBzZXQgcHJvcGVybHlcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2IC0gdmFsdWVcclxuICAgICAqL1xyXG4gICAgc2V0IHZhbEV4dCh2KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbCh2KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vZGVsTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9wKCdkYXRhLXByb3BuYW1lJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG1vZGVsTmFtZSh2KSB7XHJcbiAgICAgICAgdGhpcy5wcm9wKCdkYXRhLXByb3BuYW1lJywgdik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlYWRvbmx5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuaXMoXCJyZWFkb25seVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgcmVhZG9ubHkodikge1xyXG4gICAgICAgIHZhciB2YWwgPSB2ID09PSB0cnVlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmF0dHIoJ3JlYWRvbmx5JywgdmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5pcyhcImRpc2FibGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkaXNhYmxlZCh2OiBib29sZWFuKSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IHYgPT09IHRydWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXR0cignZGlzYWJsZWQnLCB2YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0tleSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9wKCdkYXRhLWtleWNvbHVtbicpID09PSAndHJ1ZSc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHNldCBpc0tleSh2KSB7XHJcbiAgICAgICAgdGhpcy5wcm9wKCdkYXRhLWtleWNvbHVtbicsIHYpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5jbG9uZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZERvdWJsZUNsaWNrRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9uKCdkYmxjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9ST1dfRE9VQkxFX0NMSUNLRUQsIHsgRXZlbnREYXRhOiB7IEV2ZW50OiBlIH0sIERhdGFTb3VyY2VOYW1lOiB0aGlzLm9wdGlvbnMuRGF0YVNvdXJjZU5hbWUgfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNoYW5nZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBCU0RhdGFUYWJsZUlucHV0IH0iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUlucHV0IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVJbnB1dFwiO1xyXG5pbXBvcnQgeyBCU0lucHV0T3B0aW9ucyB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZUNoZWNrQm94IGV4dGVuZHMgQlNEYXRhVGFibGVJbnB1dCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhU291cmNlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbnM6IEJTSW5wdXRPcHRpb25zID0geyBEYXRhU291cmNlTmFtZTogZGF0YVNvdXJjZU5hbWUsIElucHV0VHlwZTogXCJjaGVja2JveFwiIH07XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdmFsKCkge1xyXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLmVsZW1lbnQuaXMoJzpjaGVja2VkJyk7XHJcbiAgICAgICAgcmV0dXJuIHZhbCA9PT0gdHJ1ZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZcclxuICAgICAqL1xyXG4gICAgc2V0IHZhbCh2OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQudmFsKHYpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHZhciBzYyA9IHN1cGVyLmNsb25lKCk7XHJcbiAgICAgICAgdmFyIGMgPSBuZXcgQlNEYXRhVGFibGVDaGVja0JveCh0aGlzLnNoQ2xvbmUodGhpcy5vcHRpb25zKSk7XHJcbiAgICAgICAgYy5lbGVtZW50ID0gc2MuZWxlbWVudDtcclxuICAgICAgICBjLmNoaWxkcmVuID0gc2MuY2hpbGRyZW47XHJcbiAgICAgICAgdGhpcy5hZGREb3VibGVDbGlja0V2ZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVCYXNlIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVCYXNlXCI7XHJcbmltcG9ydCB7IFNlc3Npb25TdG9yYWdlU2VydmljZSwgYXBwRGF0YUV2ZW50cyB9IGZyb20gXCIuLi9zZXJ2aWNlc1wiO1xyXG5pbXBvcnQgeyBCU0ZldGNoUmVjb3JkRXJyb3JFdmVudCwgQlNEYXRhVGFibGVIdHRwQ2xpZW50T3B0aW9ucyB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZUh0dHBDbGllbnQgZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG4gICAgc2Vzc2lvblN0b3JhZ2U6IFNlc3Npb25TdG9yYWdlU2VydmljZTtcclxuICAgIGNhY2hlUmVzcG9uc2VzOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNlc3Npb25TdG9yYWdlOiBTZXNzaW9uU3RvcmFnZVNlcnZpY2UsIGRhdGFTb3VyY2VOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuYXBwRGF0YUV2ZW50cyA9IGFwcERhdGFFdmVudHM7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IHNlc3Npb25TdG9yYWdlO1xyXG4gICAgICAgIHRoaXMuZGF0YVNvdXJjZU5hbWUgPSBkYXRhU291cmNlTmFtZTtcclxuICAgICAgICB0aGlzLmNhY2hlUmVzcG9uc2VzID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zfSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGdldChvcHRpb25zOiBCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zKSB7XHJcbiAgICAgICAgLy8gZGVidWdnZXI7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgY2FjaGUgPSBfdGhpcy5jYWNoZVJlc3BvbnNlcztcclxuICAgICAgICBpZiAoY2FjaGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlSZXNwb25zZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhamF4T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybCxcclxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzID8gb3B0aW9ucy5oZWFkZXJzIDoge31cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuanF1ZXJ5LmFqYXgoYWpheE9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gZG9uZShyZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNlc3Npb25TdG9yYWdlLmFkZEl0ZW0oa2V5LCByZXNwb25zZSwgbmV3IERhdGUoRGF0ZS5ub3coKSArICgxMCAqIDYwICogMTAwMCkpKTsgLy8gZXhwaXJlcyBpbiAxMCBtaW51dGVzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMubm90aWZ5UmVzcG9uc2UocmVzcG9uc2UpO1xyXG5cclxuICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvcikge1xyXG4gICAgICAgICAgICBfdGhpcy5ub2ZpZnlFcnJvcihlcnJvciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBub3RpZnlSZXNwb25zZShyZXNwb25zZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0ZFVENIX0dSSURfUkVDT1JELCB7IERhdGFTb3VyY2VOYW1lOiB0aGlzLmRhdGFTb3VyY2VOYW1lLCBFdmVudERhdGE6IHsgRXZlbnQ6IHJlc3BvbnNlIH0gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbm9maWZ5RXJyb3IoZXJyb3I6IEpRdWVyeS5qcVhIUjxhbnk+LCBvcHRpb25zOiBCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGVyckV2ZW50OiBCU0ZldGNoUmVjb3JkRXJyb3JFdmVudCA9IHsgRGF0YVNvdXJjZU5hbWU6IHRoaXMuZGF0YVNvdXJjZU5hbWUsIEV2ZW50RGF0YTogeyBFdmVudDogZXJyb3IsIFJlY29yZElkOiBvcHRpb25zLnJlY29yZElkIH0gfTtcclxuICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkRfRVJST1IsIGVyckV2ZW50KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUJhc2UgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUJhc2VcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVQYWdpbmF0aW9uT3B0aW9ucyB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZVBhZ2luYXRpb24gZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG4gICAgb3B0aW9uczogQlNEYXRhVGFibGVQYWdpbmF0aW9uT3B0aW9ucztcclxuICAgIGxpc3RJZDogc3RyaW5nO1xyXG4gICAgY29udGFpbmVySWQ6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVQYWdpbmF0aW9uT3B0aW9uc30gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBCU0RhdGFUYWJsZVBhZ2luYXRpb25PcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMubGlzdElkID0gYHBnX2xpc3RfJHt0aGlzLm9wdGlvbnMuZHNOYW1lfWA7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJJZCA9IGBwZ19jb250YWluZXJfJHt0aGlzLm9wdGlvbnMuZHNOYW1lfWA7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID1cclxuICAgICAgICAgICAgdGhpcy5qcXVlcnkoXHJcbiAgICAgICAgICAgICAgICBgPGRpdiBjbGFzcz1cImJzLXBhZ2luYXRpb25cIiBpZD1cIiR7dGhpcy5jb250YWluZXJJZH1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG5hdiBhcmlhLWxhYmVsPVwiUGFnZSBuYXZpZ2F0aW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9uYXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YCk7XHJcbiAgICAgICAgdmFyIHBhZ2VMaXN0ID0gdGhpcy5qcXVlcnkoYDx1bCBjbGFzcz1cInBhZ2luYXRpb24ganVzdGlmeS1jb250ZW50LWVuZFwiIGlkPVwiJHt0aGlzLmxpc3RJZH1cIj48L3VsPmApO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDw9IHRoaXMub3B0aW9ucy5wYWdpbmdNZXRhRGF0YS50b3RhbFBhZ2VzICYmIGluZGV4IDw9IDU7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgdmFyIGxpID0gdGhpcy5qcXVlcnkoJzxsaSBjbGFzcz1cInBhZ2UtaXRlbVwiPjwvbGk+Jyk7XHJcbiAgICAgICAgICAgIHZhciBsaW5rID0gdGhpcy5qcXVlcnkoYDxhIGNsYXNzPVwicGFnZS1saW5rXCIgaHJlZj1cIiNcIiBkYXRhLXAtaW5kZXg9XCIke2luZGV4fVwiPiR7aW5kZXh9PC9hPmApO1xyXG4gICAgICAgICAgICBsaS5hcHBlbmQobGluayk7XHJcbiAgICAgICAgICAgIHBhZ2VMaXN0LmFwcGVuZChsaSk7XHJcblxyXG4gICAgICAgICAgICBsaW5rLm9uKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmpxdWVyeShlLnRhcmdldCkuYXR0cignZGF0YS1wLWluZGV4Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uZXh0UGFnZUNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5uZXh0UGFnZUNhbGxiYWNrKHBhcnNlSW50KGluZGV4KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCduYXYnKS5hcHBlbmQocGFnZUxpc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuanF1ZXJ5KCcjJyArIHRoaXMubGlzdElkKS5jaGlsZHJlbignbGknKS5yZW1vdmUoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUJhc2UgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUJhc2VcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVIdHRwQ2xpZW50IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVIdHRwQ2xpZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVJbmZpbml0ZVNjcm9sbCBleHRlbmRzIEJTRGF0YVRhYmxlQmFzZSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7QlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YX0gbWV0YWRhdGFcclxuICAgICAqL1xyXG4gICAgaW5pdE1ldGFEYXRhOiBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgY3VycmVudFBhZ2U6IG51bWJlcjtcclxuXHJcbiAgICBpbml0RGF0YTogb2JqZWN0W107XHJcbiAgICBncmlkRWxlbWVudDogSlF1ZXJ5O1xyXG4gICAgaHR0cENsaWVudDogQlNEYXRhVGFibGVIdHRwQ2xpZW50O1xyXG4gICAgc19hcmVhOiBzdHJpbmc7XHJcbiAgICBvYnNlcnZlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XHJcbiAgICB0YXJnZXQ6IEhUTUxFbGVtZW50O1xyXG4gICAgbmV4dFBhZ2VDYWxsYmFjazogKHBhZ2U6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7eyBncmlkRWxlbWVudDogYW55OyBodHRwQ2xpZW50OiBCU0RhdGFUYWJsZUh0dHBDbGllbnQgfX0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7IGdyaWRFbGVtZW50OiBKUXVlcnk7IGh0dHBDbGllbnQ6IEJTRGF0YVRhYmxlSHR0cENsaWVudDsgfSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5ncmlkRWxlbWVudCA9IG9wdGlvbnMuZ3JpZEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50ID0gb3B0aW9ucy5odHRwQ2xpZW50O1xyXG5cclxuICAgICAgICB0aGlzLnNfYXJlYSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG5cclxuICAgICAgICAvLyB0aGlzLnRvdGFsUGFnZXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgIHRoaXMuaW5pdERhdGEgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5pdE1ldGFEYXRhID0gbnVsbDtcclxuICAgICAgICB0aGlzLm5leHRQYWdlQ2FsbGJhY2sgPSBudWxsO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdfSBlbnRyaWVzXHJcbiAgICAgKiBAcGFyYW0ge0ludGVyc2VjdGlvbk9ic2VydmVyfSBzZW5kZXJcclxuICAgICAqL1xyXG4gICAgb2JzZXJ2ZXJDQihlbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W10sIHNlbmRlcjogSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzWzBdO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGVudHJ5KTtcclxuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ09ic2VydmVyIGlzIGludm9rZWQuIEVudHJ5OiAnLCBlbnRyeSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbml0ZGF0YTogJywgdGhpcy5pbml0RGF0YSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdtZXRhZGF0YTogJywgdGhpcy5pbml0TWV0YURhdGEpO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAvLyBmZXRjaCBuZXh0IHBhZ2UgaWYgd2Ugc3RpbGwgaGF2ZSBtb3JlIHBhZ2VzIHRvIHJlYWRcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPCB0aGlzLmluaXRNZXRhRGF0YS50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5maW5pdGUgc2Nyb2xsOiBmZXRjaGluZyBuZXh0IHBhZ2UjOiAnLCB0aGlzLmN1cnJlbnRQYWdlICsgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlKys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRQYWdlQ2FsbGJhY2sodGhpcy5jdXJyZW50UGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb2JzZXJ2ZShlbDogSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLnRhcmdldCA9IGVsO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5vYnNlcnZlKCkge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKHRoaXMudGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBlbmFibGUoKSB7XHJcbiAgICAgICAgdGhpcy5zX2FyZWEgPSAnc2Nyb2xsX2FyZWFfJyArIHRoaXMuZ3JpZEVsZW1lbnQuYXR0cignaWQnKTtcclxuICAgICAgICB2YXIgc2Nyb2xsQXJlYSA9IHRoaXMuanF1ZXJ5KGA8ZGl2IGNsYXNzPVwicm93IGJzLXNjcm9sbFwiIGlkPVwiJHt0aGlzLnNfYXJlYX1cIiBzdHlsZT1cIm1heC1oZWlnaHQ6IDIwMHB4OyBvdmVyZmxvdy15OiBhdXRvXCI+PC9kaXY+YCk7XHJcbiAgICAgICAgdGhpcy5ncmlkRWxlbWVudC53cmFwKHNjcm9sbEFyZWEpO1xyXG5cclxuICAgICAgICAvLyB2YXIgcm9vdCA9IHRoaXMuanF1ZXJ5LmZpbmQoYCMke3RoaXMuc19hcmVhfWApO1xyXG4gICAgICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICAvLyByb290OiByb290WzBdLFxyXG4gICAgICAgICAgICByb290OiB0aGlzLmpxdWVyeShgIyR7dGhpcy5zX2FyZWF9YClbMF0sXHJcbiAgICAgICAgICAgIHJvb3RNYXJnaW46ICcwcHgnLFxyXG4gICAgICAgICAgICB0aHJlc2hvbGQ6IDAuMyxcclxuICAgICAgICAgICAgdHJhY2tWaXNpYmlsaXR5OiBmYWxzZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMsIHNlbmRlcikgPT4gdGhpcy5vYnNlcnZlckNCKGVudHJpZXMsIHNlbmRlciksIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB2YXIgcm93cyA9IHRoaXMuZ3JpZEVsZW1lbnQuZmluZCgndHInKTtcclxuICAgICAgICB2YXIgbGFzdFJvdyA9IHJvd3Nbcm93cy5sZW5ndGggLSAxXTtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gbGFzdFJvdztcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0YXJnZXQsIHJvb3QpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvd1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3dDb2xsZWN0aW9uIGV4dGVuZHMgQlNEYXRhVGFibGVCYXNlIHtcclxuXHJcbiAgICAvKipAdHlwZSBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93W10gKi9cclxuICAgIGl0ZW1zOiBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93W107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3d9IGl0ZW1cclxuICAgICAqL1xyXG4gICAgYWRkKGl0ZW06IEJTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3cpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmluZChpdGVtLm9wdGlvbnMucHJvcE5hbWUpKVxyXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcE5hbWVcclxuICAgICAqIEByZXR1cm5zIHtCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93fSBJdGVtIHRoYXQgbWF0YWNoZXMgdGhlIHByb3BOYW1lXHJcbiAgICAgKi9cclxuICAgIGZpbmRTZWxlY3Rvcihwcm9wTmFtZTogc3RyaW5nKTogQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5vcHRpb25zLnByb3BOYW1lID09PSBwcm9wTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVCYXNlIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVCYXNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVNYXJrZXIgZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmpxdWVyeShgPGkgY2xhc3M9XCJiaSBiaS1jYXJldC1yaWdodCByb3ctbWFya2VyXCI+PC9pPmApO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5jbG9uZSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlQWN0aW9ucyBleHRlbmRzIEJTRGF0YVRhYmxlQmFzZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmpxdWVyeSgnPGRpdiBjbGFzcz1cInJvdyBhY3Rpb25zLWNvbnRhaW5lclwiPjwvZGl2PicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsoYXJnMDogb2JqZWN0KSA9PiBhbnl9IFtjYWxsYmFja11cclxuICAgICAqL1xyXG4gICAgYWRkRGVsZXRlQWN0aW9uKGNhbGxiYWNrOiAoYXJnMDogb2JqZWN0KSA9PiBhbnkpIHtcclxuICAgICAgICB2YXIgYnRuID0gdGhpcy5qcXVlcnkoYDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1kYW5nZXIgZ3JpZC10b29sYmFyLWFjdGlvblwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImJ0bkRlbGV0ZVJvd18ke3RoaXMuZGF0YVNvdXJjZU5hbWV9XCI+PGkgY2xhc3M9XCJiaSBiaS10cmFzaFwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5gKTtcclxuICAgICAgICBidG4ub24oJ2NsaWNrJywgY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoYnRuKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7KGFyZzA6IG9iamVjdCkgPT4gYW55fSBbY2FsbGJhY2tdXHJcbiAgICAgKi9cclxuICAgIGFkZE5ld1JlY29yZEFjdGlvbihjYWxsYmFjazogKGFyZzA6IG9iamVjdCkgPT4gYW55KSB7XHJcbiAgICAgICAgdmFyIGJ0biA9IHRoaXMuanF1ZXJ5KGA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLW91dGxpbmUtcHJpbWFyeSBncmlkLXRvb2xiYXItYWN0aW9uXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYnRuQWRkUm93XyR7dGhpcy5kYXRhU291cmNlTmFtZX1cIj48aSBjbGFzcz1cImJpIGJpLXBsdXMtY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPidgKTtcclxuICAgICAgICBidG4ub24oJ2NsaWNrJywgY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoYnRuKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGRHcmlkU2V0dGluZ3NBY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGJ0biA9IHRoaXMuanF1ZXJ5KGA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLW91dGxpbmUtcHJpbWFyeSBncmlkLXRvb2xiYXItYWN0aW9uXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdG9nZ2xlPVwibW9kYWxcIiBkYXRhLWJzLXRhcmdldD1cIiNzdGF0aWNCYWNrZHJvcF8ke3RoaXMuZGF0YVNvdXJjZU5hbWV9XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYnRuU2V0dGluZ3NfJHt0aGlzLmRhdGFTb3VyY2VOYW1lfVwiPjxpIGNsYXNzPVwiYmkgYmktZ2VhclwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5gKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKGJ0bik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVJbnB1dCB9IGZyb20gXCIuL0JTRGF0YVRhYmxlSW5wdXRcIjtcclxuaW1wb3J0IHsgQlNJbnB1dE9wdGlvbnMgfSBmcm9tIFwiLi4vY29tbW9uVHlwZXMvY29tbW9uLXR5cGVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVUZXh0SW5wdXQgZXh0ZW5kcyBCU0RhdGFUYWJsZUlucHV0IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGFTb3VyY2VOYW1lOiBzdHJpbmcsIGlucHV0VHlwZTogc3RyaW5nID0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICBsZXQgb3B0aW9uczogQlNJbnB1dE9wdGlvbnMgPSB7IERhdGFTb3VyY2VOYW1lOiBkYXRhU291cmNlTmFtZSwgSW5wdXRUeXBlOiBpbnB1dFR5cGUgfTtcclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHZhciBzYyA9IHN1cGVyLmNsb25lKCk7XHJcbiAgICAgICAgdmFyIGMgPSBuZXcgQlNEYXRhVGFibGVUZXh0SW5wdXQodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO1xyXG4gICAgICAgIGMuZWxlbWVudCA9IHNjLmVsZW1lbnQ7XHJcbiAgICAgICAgYy5jaGlsZHJlbiA9IHNjLmNoaWxkcmVuO1xyXG4gICAgICAgIGMuYWRkRG91YmxlQ2xpY2tFdmVudCgpO1xyXG4gICAgICAgIHJldHVybiBjO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVNlbGVjdExpc3RJdGVtIH0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlU2VsZWN0T3B0aW9uIGV4dGVuZHMgQlNEYXRhVGFibGVCYXNlIHtcclxuICAgIG9wdGlvbnM6IEJTRGF0YVRhYmxlU2VsZWN0TGlzdEl0ZW07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZVNlbGVjdExpc3RJdGVtfSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJTRGF0YVRhYmxlU2VsZWN0TGlzdEl0ZW0pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5qcXVlcnkoXCI8b3B0aW9uPjwvb3B0aW9uPlwiKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQudmFsKHRoaXMub3B0aW9ucy52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnRleHQodGhpcy5vcHRpb25zLnRleHQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlzU2VsZWN0ZWQpXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hdHRyKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IHN1cGVyLmNsb25lKCk7XHJcbiAgICAgICAgY2xvbmUuc2V0VGV4dCh0aGlzLmVsZW1lbnQudGV4dCgpKTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVJbnB1dCB9IGZyb20gXCIuL0JTRGF0YVRhYmxlSW5wdXRcIjtcclxuaW1wb3J0IHsgQlNJbnB1dE9wdGlvbnMgfSBmcm9tIFwiLi4vY29tbW9uVHlwZXMvY29tbW9uLXR5cGVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVTZWxlY3QgZXh0ZW5kcyBCU0RhdGFUYWJsZUlucHV0IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGFTb3VyY2VOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgb3B0aW9uczogQlNJbnB1dE9wdGlvbnMgPSB7IERhdGFTb3VyY2VOYW1lOiBkYXRhU291cmNlTmFtZSwgSW5wdXRUeXBlOiAnc2VsZWN0JyB9O1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHZhbCh2KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnZhbCh2KTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZhbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHZhciBzYyA9IHN1cGVyLmNsb25lKCk7XHJcbiAgICAgICAgdmFyIGMgPSBuZXcgQlNEYXRhVGFibGVTZWxlY3QodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO1xyXG4gICAgICAgIGMuZWxlbWVudCA9IHNjLmVsZW1lbnQ7XHJcbiAgICAgICAgYy5jaGlsZHJlbiA9IHNjLmNoaWxkcmVuO1xyXG4gICAgICAgIHRoaXMuYWRkRG91YmxlQ2xpY2tFdmVudCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gYztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCU0RhdGFUYWJsZUlucHV0IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVJbnB1dFwiO1xyXG5pbXBvcnQgeyBCU0J1dHRvbk9wdGlvbnMgfSBmcm9tIFwiLi4vY29tbW9uVHlwZXMvY29tbW9uLXR5cGVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVCdXR0b24gZXh0ZW5kcyBCU0RhdGFUYWJsZUlucHV0IHtcclxuXHJcbiAgICBvcHRpb25zOiBCU0J1dHRvbk9wdGlvbnM7XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogQlNCdXR0b25PcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICB2YXIgaWNvbiA9IHRoaXMub3B0aW9ucy5JY29uID8gYDxpIGNsYXNzPVwiYmkgYmktJHt0aGlzLm9wdGlvbnMuSWNvbn1cIj48L2k+YCA6ICcnO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoaWNvbik7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5IYW5kbGVyKVxyXG4gICAgICAgICAgICB0aGlzLmFkZENsaWNrSGFuZGxlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZENsaWNrSGFuZGxlcigpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgKGUpID0+IHRoaXMub3B0aW9ucy5IYW5kbGVyKGUpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpIHtcclxuICAgICAgICB2YXIgc2MgPSBzdXBlci5jbG9uZSgpO1xyXG4gICAgICAgIHZhciBidG4gPSBuZXcgQlNEYXRhVGFibGVCdXR0b24odGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO1xyXG4gICAgICAgIGJ0bi5jaGlsZHJlbiA9IHNjLmNoaWxkcmVuO1xyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlSW5wdXQgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUlucHV0XCI7XHJcbmltcG9ydCB7IEJTU2VsZWN0b3JPcHRpb25zIH0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVRleHRJbnB1dCB9IGZyb20gXCIuL0JTRGF0YVRhYmxlVGV4dElucHV0XCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlQnV0dG9uIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVCdXR0b25cIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdyB9IGZyb20gXCIuL0JTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3dcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZVNlbGVjdG9yIGV4dGVuZHMgQlNEYXRhVGFibGVJbnB1dCB7XHJcblxyXG4gICAgb3B0aW9uczogQlNTZWxlY3Rvck9wdGlvbnM7XHJcbiAgICAvKipcclxuICAgICAqIEB0eXBlIHtCU0RhdGFUYWJsZUJ1dHRvbn1cclxuICAgICAqL1xyXG4gICAgYnRuRWxlbWVudDogQlNEYXRhVGFibGVCdXR0b247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSB7QlNEYXRhVGFibGVUZXh0SW5wdXR9XHJcbiAgICAgKi9cclxuICAgIHR4dEVsZW1lbnQ6IEJTRGF0YVRhYmxlVGV4dElucHV0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJTU2VsZWN0b3JPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93fSBzZW5kZXJcclxuICAgICAqIEBwYXJhbSB7YW55fSBlXHJcbiAgICAgKi9cclxuICAgIG9uSXRlbVNlbGVjdGVkKHNlbmRlcjogQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdywgZTogYW55KSB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdyb3cgc2VsZWN0ZWQnLCBzZW5kZXIuZ3JpZC5ib2R5LmdldFNlbGVjdGVkUm93KCkpO1xyXG5cclxuICAgICAgICB2YXIgcm93ID0gc2VuZGVyLmdyaWQuYm9keS5nZXRTZWxlY3RlZFJvdygpO1xyXG4gICAgICAgIHZhciBzZWxlY3RlZElucHV0ID0gcm93LmdldElucHV0cygpLmZpbmQoKGlucHV0KSA9PiBpbnB1dC5pc0tleSk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkSW5wdXQpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1NlbGVjdGVkIHZhbHVlOiAnLCBzZWxlY3RlZElucHV0LnZhbCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzZWxlY3RvcjogJywgdGhpcy50eHRFbGVtZW50LnZhbCk7XHJcbiAgICAgICAgICAgIHRoaXMudHh0RWxlbWVudC52YWwgPSBzZWxlY3RlZElucHV0LnZhbDtcclxuICAgICAgICAgICAgdGhpcy50eHRFbGVtZW50LmNoYW5nZSgpOyAvLyBjYWxsIGNoYW5nZSB0byBmaXJlIHRoZSBjaGFuZ2UgZXZlbnRcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VuZGVyLnNlbGVjdG9yTW9kYWwuaGlkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgdGhpcy50eHRFbGVtZW50ID0gbmV3IEJTRGF0YVRhYmxlVGV4dElucHV0KHRoaXMub3B0aW9ucy5EYXRhU291cmNlTmFtZSk7XHJcbiAgICAgICAgdGhpcy50eHRFbGVtZW50XHJcbiAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuQ3NzQ2xhc3MpXHJcbiAgICAgICAgICAgIC5wcm9wcyhbeyBrZXk6IFwiaWRcIiwgdmFsdWU6IHRoaXMub3B0aW9ucy5FbGVtZW50SWQgfSxcclxuICAgICAgICAgICAgeyBrZXk6IFwicGxhY2VIb2xkZXJcIiwgdmFsdWU6IHRoaXMub3B0aW9ucy5QbGFjZUhvbGRlciB9LFxyXG4gICAgICAgICAgICB7IGtleTogXCJkYXRhLXByb3BuYW1lXCIsIHZhbHVlOiB0aGlzLm9wdGlvbnMuUHJvcE5hbWUgfV0pO1xyXG5cclxuICAgICAgICB0aGlzLmJ0bkVsZW1lbnQgPSBuZXcgQlNEYXRhVGFibGVCdXR0b24oe1xyXG4gICAgICAgICAgICBJbnB1dFR5cGU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICBEYXRhU291cmNlTmFtZTogdGhpcy5vcHRpb25zLkRhdGFTb3VyY2VOYW1lLFxyXG4gICAgICAgICAgICBJY29uOiAnc2VhcmNoJyxcclxuICAgICAgICAgICAgSGFuZGxlcjogKGUpID0+IHRoaXMub3B0aW9ucy5CdG5DbGljayh0aGlzLCBlKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgd3JhcHBlciA9IHRoaXMuanF1ZXJ5KCc8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtc21cIj48L2Rpdj4nKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSB3cmFwcGVyLmFwcGVuZCh0aGlzLnR4dEVsZW1lbnQuZWxlbWVudCkuYXBwZW5kKHRoaXMuYnRuRWxlbWVudC5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpIHtcclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICB2YXIgc2MgPSBzdXBlci5jbG9uZSgpO1xyXG4gICAgICAgIHZhciBjID0gbmV3IEJTRGF0YVRhYmxlU2VsZWN0b3IodGhpcy5zaENsb25lKHRoaXMub3B0aW9ucykpO1xyXG4gICAgICAgIGMuY2hpbGRyZW4gPSBzYy5jaGlsZHJlbjtcclxuICAgICAgICAvLyBjLmFkZERvdWJsZUNsaWNrRXZlbnQoKTsgLy8gVE9ETzogd2h5IGl0IGhhcyB0byBiZSBpbiB0aGUgY2xvbmUgbWV0aG9kPyAgXHJcbiAgICAgICAgcmV0dXJuIGM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTW9kYWwgfSBmcm9tIFwiYm9vdHN0cmFwXCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24sIGdldFVybENhbGxiYWNrLCBCU0RhdGFUYWJsZURhdGFTb3VyY2UsIEJTRGF0YVRhYmxlT3B0aW9ucyB9IGZyb20gXCIuLi9jb21tb25UeXBlcy9jb21tb24tdHlwZXNcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGUgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93IGV4dGVuZHMgQlNEYXRhVGFibGVCYXNlIHtcclxuXHJcbiAgICBzZWxlY3Rvck1vZGFsOiBNb2RhbDtcclxuICAgIGdyaWQ6IEJTRGF0YVRhYmxlO1xyXG4gICAgb3B0aW9uczogeyBwcm9wTmFtZTogc3RyaW5nOyBjb250YWluZXJJZDogc3RyaW5nOyB1cmxDYjogZ2V0VXJsQ2FsbGJhY2s7IGdyaWRDb2xzPzogQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW107IH07XHJcbiAgICBwYXJlbnRDb250YWluZXJJZDogc3RyaW5nO1xyXG4gICAgbW9kYWxJZDogc3RyaW5nO1xyXG4gICAgbW9kYWxUaXRsZUlkOiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJJZDogc3RyaW5nO1xyXG4gICAgZ3JpZElkOiBzdHJpbmc7XHJcbiAgICBvbkl0ZW1TZWxlY3RlZDogKHNlbmRlcjogYW55LCBlOiBhbnkpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3sgcHJvcE5hbWU6IHN0cmluZzsgY29udGFpbmVySWQ6IHN0cmluZzsgdXJsQ2I6IGdldFVybENhbGxiYWNrOyBncmlkQ29sczogQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW119fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgcHJvcE5hbWU6IHN0cmluZzsgY29udGFpbmVySWQ6IHN0cmluZzsgdXJsQ2I6IGdldFVybENhbGxiYWNrOyBncmlkQ29sczogQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uW107IH0pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDb250YWluZXJJZCA9IHRoaXMub3B0aW9ucy5jb250YWluZXJJZDtcclxuICAgICAgICB0aGlzLm1vZGFsSWQgPSBgJHt0aGlzLnBhcmVudENvbnRhaW5lcklkfV9ic18ke3RoaXMub3B0aW9ucy5wcm9wTmFtZX1gO1xyXG4gICAgICAgIHRoaXMubW9kYWxUaXRsZUlkID0gYCR7dGhpcy5wYXJlbnRDb250YWluZXJJZH1fbGJzXyR7dGhpcy5vcHRpb25zLnByb3BOYW1lfWA7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJJZCA9IGAke3RoaXMucGFyZW50Q29udGFpbmVySWR9X2Nic18ke3RoaXMub3B0aW9ucy5wcm9wTmFtZX1gO1xyXG4gICAgICAgIHRoaXMuZ3JpZElkID0gYCR7dGhpcy5wYXJlbnRDb250YWluZXJJZH1fZ18ke3RoaXMub3B0aW9ucy5wcm9wTmFtZX1gO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgdGhpcy5ncmlkID0gdGhpcy5yZW5kZXJHcmlkKCk7XHJcbiAgICAgICAgdGhpcy5vbkl0ZW1TZWxlY3RlZCA9ICgvKiogQHR5cGUge0JTRGF0YVRhYmxlfSAqLyBzZW5kZXI6IEJTRGF0YVRhYmxlLCAvKiogQHR5cGUge2FueX0gKi8gZTogYW55KSA9PiB7IGNvbnNvbGUubG9nKCk7IH07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgdmFyIGZpbmQgPSB0aGlzLmpxdWVyeSgnIycgKyB0aGlzLnBhcmVudENvbnRhaW5lcklkKS5maW5kKCcjJyArIHRoaXMubW9kYWxJZCk7XHJcbiAgICAgICAgaWYgKGZpbmQgJiYgZmluZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZmluZDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rvck1vZGFsID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShmaW5kWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBtb2RlbFRlbXBsYXRlID0gYDxkaXYgY2xhc3M9XCJtb2RhbFwiIGlkPVwiJHt0aGlzLm1vZGFsSWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLXNjcm9sbGFibGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiIGlkPVwiJHt0aGlzLm1vZGFsVGl0bGVJZH1cIj5TZWxlY3QgYSB2YWx1ZTwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiJHt0aGlzLmNvbnRhaW5lcklkfVwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIGRhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCI+T2s8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmpxdWVyeShtb2RlbFRlbXBsYXRlKTtcclxuICAgICAgICAgICAgdGhpcy5qcXVlcnkoJyMnICsgdGhpcy5wYXJlbnRDb250YWluZXJJZCkuYXBwZW5kKHRoaXMuZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9yTW9kYWwgPSBuZXcgTW9kYWwodGhpcy5lbGVtZW50WzBdKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdzaG93bi5icy5tb2RhbCcsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQuY2xlYXJHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQuaW5maW5pdGVTY3JvbGxlci5jdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQuZmV0Y2hHcmlkUGFnZSgxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rvck1vZGFsLnNob3coKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJHcmlkKCkge1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gZ3JpZCBzaG93biBpbiB0aGUgc2VsZWN0b3Igd2luZG93XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgZGF0YVNvdXJjZSA9IG5ldyBCU0RhdGFUYWJsZURhdGFTb3VyY2UoJ2JzU2VsZWN0b3InLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBpbml0RGF0YTogW10sXHJcbiAgICAgICAgICAgICAgICBtZXRhRGF0YTogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy51cmxDYlxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHZhciBicyA9IG5ldyBCU0RhdGFUYWJsZU9wdGlvbnModGhpcy5ncmlkSWQsIHRoaXMuY29udGFpbmVySWQsIHRoaXMub3B0aW9ucy5ncmlkQ29scywgZGF0YVNvdXJjZSwgdHJ1ZSk7XHJcbiAgICAgICAgLy8gYnMuZW5hYmxlSW5maW5pdGVTY3JvbGwgPSBmYWxzZTtcclxuICAgICAgICB2YXIgZ3JpZCA9IG5ldyBCU0RhdGFUYWJsZShicyk7XHJcbiAgICAgICAgZ3JpZC5yZWdpc3RlckNhbGxiYWNrcygpO1xyXG5cclxuICAgICAgICAvLyBncmlkLmFkZEhhbmRsZXIoZ3JpZC5hcHBEYXRhRXZlbnRzLk9OX1JPV19ET1VCTEVfQ0xJQ0tFRCwgdGhpcy5vbkl0ZW1TZWxlY3RlZCk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBmb2xsb3dpbmcgZXZlbnRzIGFyZSBsaW5rZWQgdG8gcGFyZW50IChwcmltYXJ5IHZpZXcvZm9ybSkgYW5kIGFyZSBub3QgbmVlZGVkIGZvciBzZWxlY3RvclxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgZ3JpZC5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5HUklEX0RBVEEpO1xyXG4gICAgICAgIGdyaWQucmVtb3ZlSGFuZGxlcih0aGlzLmFwcERhdGFFdmVudHMuT05fQUREX1JFQ09SRCk7XHJcbiAgICAgICAgZ3JpZC5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9GRVRDSF9SRUNPUkQpO1xyXG4gICAgICAgIGdyaWQucmVtb3ZlSGFuZGxlcih0aGlzLmFwcERhdGFFdmVudHMuT05fU0FWRV9SRUNPUkQpO1xyXG4gICAgICAgIGdyaWQucmVtb3ZlSGFuZGxlcih0aGlzLmFwcERhdGFFdmVudHMuT05fU0FWRV9FUlJPUik7XHJcblxyXG4gICAgICAgIGdyaWQucmVuZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIGhpZGUgYWN0aW9uc1xyXG4gICAgICAgIGdyaWQuZ3JpZEFjdGlvbnMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBncmlkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUlucHV0IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVJbnB1dFwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUNlbGwgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUNlbGxcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVDb2xEZWZpbml0aW9uIH0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVRleHRJbnB1dCB9IGZyb20gXCIuL0JTRGF0YVRhYmxlVGV4dElucHV0XCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlQ2hlY2tCb3ggfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUNoZWNrQm94XCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlU2VsZWN0T3B0aW9uIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVTZWxlY3RPcHRpb25cIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVTZWxlY3QgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZVNlbGVjdFwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVNlbGVjdG9yIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVTZWxlY3RvclwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvd1wiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVSb3cgZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHR5cGUgQlNEYXRhVGFibGVDZWxsW11cclxuICAgICAqL1xyXG4gICAgY2VsbHM6IEJTRGF0YVRhYmxlQ2VsbFtdID0gW107XHJcbiAgICBvcHRpb25zOiBhbnk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3sgZGF0YVNvdXJjZU5hbWU6IHN0cmluZzsgZ3JpZElkOiBzdHJpbmc7IGdyaWRIZWFkZXI/OiBib29sZWFuOyBpc1RlbXBsYXRlUm93PzogYm9vbGVhbjsgY29udGFpbmVySWQ/OnN0cmluZ319IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczoge1xyXG4gICAgICAgIGRhdGFTb3VyY2VOYW1lOiBzdHJpbmc7IGdyaWRJZDogc3RyaW5nO1xyXG4gICAgICAgIGdyaWRIZWFkZXI/OiBib29sZWFuOyBpc1RlbXBsYXRlUm93PzogYm9vbGVhbjsgY29udGFpbmVySWQ/OiBzdHJpbmc7XHJcbiAgICB9KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJvd0NhdGVnb3J5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQucHJvcCgnZGF0YS1yb3djYXRlZ29yeScpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCByb3dDYXRlZ29yeSh2KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnByb3AoJ2RhdGEtcm93Y2F0ZWdvcnknLCB2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICpcclxuICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUNlbGx9IGNlbGxcclxuICAgICovXHJcbiAgICBhZGRDZWxsKGNlbGw6IEJTRGF0YVRhYmxlQ2VsbCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQoY2VsbC5lbGVtZW50KTtcclxuICAgICAgICB0aGlzLmNlbGxzLnB1c2goY2VsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlQ2VsbFtdfSBjZWxsc1xyXG4gICAgICovXHJcbiAgICBhZGRDZWxscyhjZWxsczogYW55W10pIHtcclxuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB0aGlzLmFkZENlbGwoY2VsbCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy5qcXVlcnkoXCI8dHI+PC90cj5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge0JTRGF0YVRhYmxlUm93fVxyXG4gICAgICovXHJcbiAgICBjbG9uZSgpOiBCU0RhdGFUYWJsZVJvdyB7XHJcbiAgICAgICAgLy92YXIgY2xvbmUgPSB0aGlzLmVsZW1lbnQuY2xvbmUoKTtcclxuICAgICAgICAvL3JldHVybiBuZXcgQlNEYXRhVGFibGVSb3coeyBlbGVtZW50OiBjbG9uZSwgZGF0YVNvdXJjZU5hbWU6IHRoaXMuZGF0YVNvdXJjZU5hbWUgfSk7XHJcbiAgICAgICAgLy9sZXQgY2xvbmUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpKSwgdGhpcyk7XHJcbiAgICAgICAgLy9yZXR1cm4gY2xvbmU7XHJcbiAgICAgICAgdmFyIHBhcmVudENsb25lID0gc3VwZXIuY2xvbmUoKTtcclxuICAgICAgICAvL2RlYnVnZ2VyO1xyXG4gICAgICAgIGxldCBvcHRDbG9uZSA9IHRoaXMuc2hDbG9uZSh0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIG9wdENsb25lLmlzVGVtcGxhdGVSb3cgPSBmYWxzZTtcclxuICAgICAgICB2YXIgY2xvbmVSb3cgPSBuZXcgQlNEYXRhVGFibGVSb3cob3B0Q2xvbmUpO1xyXG4gICAgICAgIGNsb25lUm93LmVsZW1lbnQgPSBwYXJlbnRDbG9uZS5lbGVtZW50O1xyXG4gICAgICAgIGNsb25lUm93LmNoaWxkcmVuID0gcGFyZW50Q2xvbmUuY2hpbGRyZW47XHJcbiAgICAgICAgY2xvbmVSb3cuY2VsbHMgPSB0aGlzLmNlbGxzLm1hcCgodikgPT4ge1xyXG4gICAgICAgICAgICB2YXIgY2xvbmVDZWxsID0gdi5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjbG9uZVJvdy5lbGVtZW50LmFwcGVuZChjbG9uZUNlbGwuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUNlbGw7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjbG9uZVJvdztcclxuICAgIH1cclxuXHJcbiAgICBmb2N1c1JvdygpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKCd0YWJsZS1hY3RpdmUnKS5hZGRDbGFzcygndGFibGUtYWN0aXZlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5wdXRzKCk6IEJTRGF0YVRhYmxlSW5wdXRbXSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHR5cGUgQlNEYXRhVGFibGVJbnB1dFtdXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIGlucHV0cyA9IFtdO1xyXG5cclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICB0aGlzLmNlbGxzLmZvckVhY2goKHZhbCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHZhbC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goKHYsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodiBpbnN0YW5jZW9mIEJTRGF0YVRhYmxlU2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKHYudHh0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodiBpbnN0YW5jZW9mIEJTRGF0YVRhYmxlSW5wdXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmICh2IGluc3RhbmNlb2YgQlNEYXRhVGFibGVJbnB1dClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaW5wdXRzLnB1c2godik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBpbnB1dHM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUNvbERlZmluaXRpb259IG1vZGVsXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlfSBncmlkIGluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJucyB7QlNEYXRhVGFibGVDZWxsfSByZXR1cm5zIHRoZSBncmlkIGNlbGwgY29udGFpbmluZyB0aGUgaW5wdXRcclxuICAgICAqL1xyXG4gICAgY3JlYXRlSW5wdXRGb3IobW9kZWw6IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbiwgZ3JpZDogQlNEYXRhVGFibGUpOiBCU0RhdGFUYWJsZUNlbGwge1xyXG4gICAgICAgIHZhciBkcyA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlTmFtZTtcclxuICAgICAgICB2YXIgZ2lkID0gdGhpcy5vcHRpb25zLmdyaWRJZDtcclxuXHJcbiAgICAgICAgdmFyIGlucHV0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgLy9kZWJ1Z2dlcjtcclxuICAgICAgICBpZiAobW9kZWwuRGF0YVR5cGUgPT09ICdzZWxlY3QnKSB7XHJcbiAgICAgICAgICAgIGlucHV0ID0gbmV3IEJTRGF0YVRhYmxlU2VsZWN0KGRzKTtcclxuICAgICAgICAgICAgbW9kZWwuRGF0YVNvdXJjZVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKG9wdCkgPT4gaW5wdXQuYXBwZW5kKG5ldyBCU0RhdGFUYWJsZVNlbGVjdE9wdGlvbihvcHQpKSk7XHJcbiAgICAgICAgICAgIGlucHV0LmFkZENsYXNzKCdmb3JtLXNlbGVjdCBmb3JtLXNlbGVjdC1zbScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChtb2RlbC5EYXRhVHlwZSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICBpbnB1dCA9IG5ldyBCU0RhdGFUYWJsZUNoZWNrQm94KGRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobW9kZWwuRGF0YVR5cGUgPT09ICdzZWxlY3RvcicpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogRml4IHR3byB0eXBlcyBvZiBzZXR0aW5ncyEhIVxyXG4gICAgICAgICAgICB2YXIgc1dpbmRvdyA9IG5ldyBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93KHtcclxuICAgICAgICAgICAgICAgIHByb3BOYW1lOiBtb2RlbC5Qcm9wTmFtZSxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcklkOiB0aGlzLm9wdGlvbnMuY29udGFpbmVySWQsXHJcbiAgICAgICAgICAgICAgICB1cmxDYjogbW9kZWwuU2VsZWN0b3JEYXRhQ0IsXHJcbiAgICAgICAgICAgICAgICBncmlkQ29sczogbW9kZWwuU2VsZWN0b3JDb2xzXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZ3JpZC5zZWxlY3RvcnMuYWRkKHNXaW5kb3cpO1xyXG5cclxuICAgICAgICAgICAgaW5wdXQgPSBuZXcgQlNEYXRhVGFibGVTZWxlY3Rvcih7XHJcbiAgICAgICAgICAgICAgICBEYXRhU291cmNlTmFtZTogZHMsXHJcbiAgICAgICAgICAgICAgICBQcm9wTmFtZTogbW9kZWwuUHJvcE5hbWUsXHJcbiAgICAgICAgICAgICAgICBCdG5JZDogXCJidG5fXCIgKyBnaWQgKyBcIl90ZW1wbGF0ZV9yb3dfXCIgKyBtb2RlbC5Qcm9wTmFtZSxcclxuICAgICAgICAgICAgICAgIENzc0NsYXNzOiBcImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc21cIixcclxuICAgICAgICAgICAgICAgIEVsZW1lbnRJZDogZ2lkICsgXCJfdGVtcGxhdGVfcm93X1wiICsgbW9kZWwuUHJvcE5hbWUsXHJcbiAgICAgICAgICAgICAgICBJbnB1dFR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgICAgICAgUGxhY2VIb2xkZXI6IG1vZGVsLk5hbWUsXHJcbiAgICAgICAgICAgICAgICBCdG5DbGljazogKHNlbmRlcjogQlNEYXRhVGFibGVTZWxlY3RvciwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNXaW5kb3cuZ3JpZC5yZW1vdmVIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9ST1dfRE9VQkxFX0NMSUNLRUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNXaW5kb3cuZ3JpZC5hZGRIYW5kbGVyKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9ST1dfRE9VQkxFX0NMSUNLRUQsIChzLCBldikgPT4gc2VuZGVyLm9uSXRlbVNlbGVjdGVkKHNXaW5kb3csIGV2KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc1dpbmRvdy5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlucHV0ID0gbmV3IEJTRGF0YVRhYmxlVGV4dElucHV0KGRzLCBtb2RlbC5EYXRhVHlwZSk7XHJcbiAgICAgICAgICAgIGlucHV0LmFkZENsYXNzKCdmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRPRE86IEZpeCB0d28gdHlwZXMgb2Ygc2V0dGluZ3MhISFcclxuICAgICAgICBpZiAobW9kZWwuRGF0YVR5cGUgIT09ICdzZWxlY3RvcicpXHJcbiAgICAgICAgICAgIGlucHV0LnByb3BzKFtcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnZGF0YS1wcm9wbmFtZScsIHZhbHVlOiBtb2RlbC5Qcm9wTmFtZSB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0aXRsZScsIHZhbHVlOiBtb2RlbC5OYW1lIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2lkJywgdmFsdWU6IGdpZCArIFwiX3RlbXBsYXRlX3Jvd19cIiArIG1vZGVsLlByb3BOYW1lIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3BsYWNlaG9sZGVyJywgdmFsdWU6IG1vZGVsLk5hbWUgfVxyXG4gICAgICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgaWYgKG1vZGVsLklzS2V5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlucHV0LnJlYWRvbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaW5wdXQuaXNLZXkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGdyaWQub3B0aW9ucy5pc1JlYWRvbmx5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlucHV0LnJlYWRvbmx5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaW5wdXQuc2V0Q3NzKCdjdXJzb3InLCAncG9pbnRlcicpO1xyXG4gICAgICAgICAgICBpbnB1dC5zZXRDc3MoJ3VzZXItc2VsZWN0JywgJ25vbmUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0ZCA9IG5ldyBCU0RhdGFUYWJsZUNlbGwobmV3IEJTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbigpKTtcclxuICAgICAgICB0ZC5hcHBlbmQoaW5wdXQpO1xyXG4gICAgICAgIHJldHVybiB0ZDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlQ29sRGVmaW5pdGlvbn0gbW9kZWxcclxuICAgICAqL1xyXG4gICAgY3JlYXRlSGVhZGVyRm9yKG1vZGVsOiBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgdGggPSBuZXcgQlNEYXRhVGFibGVDZWxsKG1vZGVsLCB0cnVlKTtcclxuICAgICAgICB0aC5hZGRDbGFzcygnc29ydGluZycpLmFkZENsYXNzKCdkcy1jb2wnKTtcclxuICAgICAgICB0aC5zZXRUZXh0KG1vZGVsLk5hbWUpO1xyXG4gICAgICAgIHRoLnByb3AoJ2RhdGEtdGgtcHJvcG5hbWUnLCBtb2RlbC5Qcm9wTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFZpc2libGVJbnB1dHMoKSB7XHJcbiAgICAgICAgdmFyIGlucHV0cyA9IHRoaXMuZ2V0SW5wdXRzKCk7XHJcbiAgICAgICAgcmV0dXJuIGlucHV0cy5maWx0ZXIoKGlucHV0KSA9PiBpbnB1dC52aXNpYmxlID09PSB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcm93IGNvbnRhaW5pbmcgdGhlIGFjdHVhbCBpbnB1dHNcclxuICAgICAqIEByZXR1cm5zIEEgcm93IHJlY29yZCBjb250YWluaW5nIGFjdHVhbCBpbnB1dHNcclxuICAgICAqL1xyXG4gICAgZ2V0Um93RGF0YUV4dCgpIHtcclxuICAgICAgICB2YXIgcm93SW5wdXRzID0gdGhpcy5nZXRJbnB1dHMoKTtcclxuICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgcm93SW5wdXRzLmZvckVhY2goKHJvd0lucHV0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBjZWxsUHJvcE5hbWUgPSByb3dJbnB1dC5tb2RlbE5hbWU7XHJcbiAgICAgICAgICAgIHJlY29yZFtjZWxsUHJvcE5hbWVdID0gcm93SW5wdXQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb3dJbmRleCgpIHtcclxuICAgICAgICB2YXIgcm93SW5kZXggPSB0aGlzLmdldFByb3AoJ2RhdGEtcm93aW5kZXgnKTtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQocm93SW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgdmFsdWVzIG9mIHRoZSBhbGwgdGhlIGlucHV0cyBpbiB0aGUgcm93XHJcbiAgICAgKiBAcmV0dXJucyBSZXR1bnMgYW4gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSB2YWx1ZXMgb2YgdGhlIGlucHV0c1xyXG4gICAgICovXHJcbiAgICBnZXRSb3dEYXRhKCkge1xyXG4gICAgICAgIHZhciByb3dJbnB1dHMgPSB0aGlzLmdldElucHV0cygpO1xyXG4gICAgICAgIHZhciByb3dJbmRleCA9IHRoaXMuZ2V0Um93SW5kZXgoKTtcclxuICAgICAgICB2YXIgcmVjb3JkID0ge307XHJcbiAgICAgICAgdmFyIHJvd0NhdCA9IHRoaXMucm93Q2F0ZWdvcnk7XHJcbiAgICAgICAgcmVjb3JkWydyb3dDYXRlZ29yeSddID0gcm93Q2F0O1xyXG5cclxuICAgICAgICByb3dJbnB1dHMuZm9yRWFjaCgocm93SW5wdXQsIGkpID0+IHtcclxuICAgICAgICAgICAgdmFyIGNlbGxQcm9wTmFtZSA9IHJvd0lucHV0Lm1vZGVsTmFtZTtcclxuICAgICAgICAgICAgcmVjb3JkW2NlbGxQcm9wTmFtZV0gPSByb3dJbnB1dC52YWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVjb3JkW1wiY2xpZW50Um93TnVtYmVyXCJdID0gcm93SW5kZXg7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0dldFJvd0RhdGE6ICcsIHJlY29yZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcclxuICAgIH1cclxuXHJcbiAgICBpc1Jvd0RpcnR5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFByb3AoJ2RhdGEtaXNkaXJ0eScpID09PSAndHJ1ZSc7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQlNEYXRhVGFibGVCYXNlIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVCYXNlXCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlUm93IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVSb3dcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZVJvd0NvbGxlY3Rpb24gZXh0ZW5kcyBCU0RhdGFUYWJsZUJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAdHlwZSBCU0RhdGFUYWJsZVJvd1tdXHJcbiAgICAgKi9cclxuICAgIHJvd3M6IEJTRGF0YVRhYmxlUm93W10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVSb3d9IHJvd1xyXG4gICAgICovXHJcbiAgICBhZGRSb3cocm93OiBCU0RhdGFUYWJsZVJvdykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmQocm93LmVsZW1lbnQpO1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TmV4dFJvd0luZGV4KCk7XHJcbiAgICAgICAgcm93LnByb3AoJ2RhdGEtcm93aW5kZXgnLCBpbmRleCk7XHJcblxyXG4gICAgICAgIHZhciByVHlwZSA9IHJvdy5vcHRpb25zLmdyaWRIZWFkZXIgPT09IHRydWUgPyAnaGVhZCcgOiAnZGF0YSc7XHJcbiAgICAgICAgcm93LnByb3AoJ2lkJywgYCR7cm93Lm9wdGlvbnMuZ3JpZElkfV8ke3JUeXBlfV8ke2luZGV4fWApO1xyXG4gICAgICAgIHRoaXMucm93cy5wdXNoKHJvdyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmlzaWJsZVJvd3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKHJvdykgPT4gcm93LnZpc2libGUgPT09IHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5leHRSb3dJbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dzLmxlbmd0aCArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0QWN0aW9uc1JvdygpIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5yb3dzLmZpbmQoKHJvdykgPT4gcm93Lm9wdGlvbnMuaXNBY3Rpb25zUm93ID09PSB0cnVlKTtcclxuICAgIC8vIH1cclxuICAgIGdldEdyaWRUaXRsZXNSb3coKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5maW5kKChyb3cpID0+IHJvdy5vcHRpb25zLmdyaWRIZWFkZXIgPT09IHRydWUpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlUm93Q29sbGVjdGlvbiB9IGZyb20gXCIuL0JTRGF0YVRhYmxlUm93Q29sbGVjdGlvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJTRGF0YVRhYmxlSGVhZGVyIGV4dGVuZHMgQlNEYXRhVGFibGVSb3dDb2xsZWN0aW9uIHtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmpxdWVyeSgnPHRoZWFkIGNsYXNzPVwidGFibGUtbGlnaHRcIj48L3RoZWFkPicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTRGF0YVRhYmxlUm93IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVSb3dcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVSb3dDb2xsZWN0aW9uIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVSb3dDb2xsZWN0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQlNEYXRhVGFibGVCb2R5IGV4dGVuZHMgQlNEYXRhVGFibGVSb3dDb2xsZWN0aW9uIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuanF1ZXJ5KFwiPHRib2R5PjwvdGJvZHk+XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlUm93fSByb3dcclxuICAgICovXHJcbiAgICByb3dTaWJsaW5ncyhyb3c6IEJTRGF0YVRhYmxlUm93KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKHYsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHYgIT09IHJvdylcclxuICAgICAgICAgICAgICAgIHJldHVybiB2OyAvLyByZXR1cm4gYWxsIGV4Y2VwdCB0aGUgY3VycmVudCByb3dcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVSb3d9IHJvd1xyXG4gICAgICovXHJcbiAgICBmb2N1c1Jvdyhyb3c6IEJTRGF0YVRhYmxlUm93KSB7XHJcbiAgICAgICAgcm93LnJlbW92ZUNsYXNzKCd0YWJsZS1hY3RpdmUnKS5hZGRDbGFzcygndGFibGUtYWN0aXZlJyk7XHJcbiAgICAgICAgdmFyIHNpYmxpbmdzID0gdGhpcy5yb3dTaWJsaW5ncyhyb3cpO1xyXG4gICAgICAgIHNpYmxpbmdzLmZvckVhY2goKHYsIGkpID0+IHYucmVtb3ZlQ2xhc3MoJ3RhYmxlLWFjdGl2ZScpKTtcclxuICAgIH07XHJcblxyXG5cclxuXHJcbiAgICBnZXRUZW1wbGF0ZVJvdygpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5yb3dzLmZpbHRlcihmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICBpZiAodi5vcHRpb25zLmlzVGVtcGxhdGVSb3cgPT09IHRydWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFswXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREaXJ0eVJvd3MoKSB7XHJcbiAgICAgICAgdmFyIHJvd3MgPSB0aGlzLnJvd3MuZmlsdGVyKCh2LCBpKSA9PiB2LmlzUm93RGlydHkoKSk7XHJcbiAgICAgICAgcmV0dXJuIHJvd3M7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGlydHlSZWNvcmRzKCkge1xyXG4gICAgICAgIHZhciBkaXJ0eVJvd3MgPSB0aGlzLmdldERpcnR5Um93cygpO1xyXG5cclxuICAgICAgICBpZiAoZGlydHlSb3dzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWNvcmRzID0gW107XHJcbiAgICAgICAgZGlydHlSb3dzLmZvckVhY2goKHJvdywgaSkgPT4ge1xyXG4gICAgICAgICAgICByZWNvcmRzLnB1c2gocm93LmdldFJvd0RhdGEoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZWNvcmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNlbGVjdGVkUm93KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvd3MuZmluZCgodiwgaSkgPT4gdi5oYXNDbGFzcygndGFibGUtYWN0aXZlJykpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBtYXJrRGVsZXRlZCgpIHtcclxuICAgICAgICB2YXIgcm93ID0gdGhpcy5nZXRTZWxlY3RlZFJvdygpO1xyXG4gICAgICAgIGlmICghcm93KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBzaWJsaW5ncyA9IHRoaXMucm93U2libGluZ3Mocm93KTtcclxuICAgICAgICB2YXIgbGFzdFNpYmxpbmcgPSBzaWJsaW5nc1tzaWJsaW5ncy5sZW5ndGggLSAxXTtcclxuICAgICAgICByb3cucmVtb3ZlQ2xhc3MoJ3RhYmxlLWFjdGl2ZScpO1xyXG4gICAgICAgIHJvdy5wcm9wKCdkYXRhLWlzZGlydHknLCAndHJ1ZScpO1xyXG4gICAgICAgIHJvdy5jc3MgPSB7ICdkaXNwbGF5JzogJ25vbmUnIH07XHJcblxyXG4gICAgICAgIHZhciByb3dDYXQgPSByb3cucm93Q2F0ZWdvcnk7XHJcbiAgICAgICAgaWYgKHJvd0NhdCA9PT0gJ0FEREVEJykge1xyXG4gICAgICAgICAgICByb3cucm93Q2F0ZWdvcnkgPSAnQURERURfREVMRVRFRCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByb3cucm93Q2F0ZWdvcnkgPSAnREVMRVRFRCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyh0aGlzLmFwcERhdGFFdmVudHMuT05fR1JJRF9VUERBVEVELCB7IERhdGFTb3VyY2VOYW1lOiByb3cub3B0aW9ucy5kYXRhU291cmNlTmFtZSwgRXZlbnREYXRhOiB7IEV2ZW50OiByb3cgfSB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5mb2N1c1JvdyhsYXN0U2libGluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSByb3cgZnJvbSByb3dzIGNvbGxlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVSb3d9IHJvd1xyXG4gICAgICovXHJcbiAgICByZW1vdmVSb3cocm93OiBCU0RhdGFUYWJsZVJvdykge1xyXG5cclxuICAgICAgICAvLyB0aGlzLmZpbmQoYHRyW2RhdGEtcm93Y2F0ZWdvcnk9JyR7cm93LnJvd0NhdGVnb3J5fSddYCkucmVtb3ZlKCk7XHJcbiAgICAgICAgcm93LmVsZW1lbnQucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMucm93cy5pbmRleE9mKHJvdyk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgIHRoaXMucm93cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG59XHJcbiIsIlxyXG5pbXBvcnQgeyBUb29sdGlwIH0gZnJvbSBcImJvb3RzdHJhcFwiXHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlQmFzZSB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQmFzZVwiO1xyXG5pbXBvcnQgJy4uL3NlcnZpY2VzL3N0cmluZy5leHRlbnNpb25zJ1xyXG5pbXBvcnQge1xyXG4gICAgU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLCBic0RhdGFUYWJsZURpc2NvdmVyeVNlcnZpY2UsIENvb2tpZUhlbHBlclxyXG4gICAgLCBkYXRhRXZlbnRzU2VydmljZSwgYXBwRGF0YUV2ZW50cywgYXBwQWN0aW9uc1xyXG59IGZyb20gXCIuLi9zZXJ2aWNlc1wiO1xyXG5cclxuaW1wb3J0IHsgQlNEYXRhVGFibGVDZWxsIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVDZWxsXCI7XHJcbmltcG9ydCB7XHJcbiAgICBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24sIEJTRXZlbnRIYW5kbGVyXHJcbiAgICAsIEJTRXZlbnRTdWJzY3JpYmVyTW9kZWwsIEJTU29ydGluZ1JlcXVlc3RFdmVudCwgQlNDb25maWdVcGRhdGVkRXZlbnRcclxuICAgICwgQlNDb2xzUmVvcmRlcmVkRXZlbnRcclxuICAgICwgQlNGZXRjaFJlY29yZEV2ZW50LCBCU0dyaWRVcGRhdGVkRXZlbnQsIEJTUm93VXBkYXRlZEV2ZW50XHJcbiAgICAsIEJTRmllbGRVcGRhdGVkRXZlbnQsIEJTRGF0YVRhYmxlUGFnaW5nTWV0YURhdGEsIEJTRGF0YVRhYmxlUGFnaW5hdGlvbk9wdGlvbnNcclxuICAgICwgQlNEYXRhVGFibGVPcHRpb25zLCBCU0RhdGFUYWJsZUNvbFNldHRpbmdzXHJcbiAgICAsIEJTRGF0YVRhYmxlSHR0cENsaWVudE9wdGlvbnMsIEJTRXZlbnQsIEJTRmV0Y2hSZWNvcmRFcnJvckV2ZW50XHJcbn0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5cclxuaW1wb3J0IHsgQlNEYXRhVGFibGVDaGVja0JveCB9IGZyb20gXCIuL0JTRGF0YVRhYmxlQ2hlY2tCb3hcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVIdHRwQ2xpZW50IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVIdHRwQ2xpZW50XCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlUGFnaW5hdGlvbiB9IGZyb20gXCIuL0JTRGF0YVRhYmxlUGFnaW5hdGlvblwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUluZmluaXRlU2Nyb2xsIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVJbmZpbml0ZVNjcm9sbFwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZVNlbGVjdG9yV2luZG93Q29sbGVjdGlvbiB9IGZyb20gXCIuL0JTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3dDb2xsZWN0aW9uXCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlTWFya2VyIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVNYXJrZXJcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVBY3Rpb25zIH0gZnJvbSBcIi4vQlNEYXRhVGFibGVBY3Rpb25zXCI7XHJcbmltcG9ydCB7IEJTRGF0YVRhYmxlUm93IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVSb3dcIjtcclxuaW1wb3J0IHsgQlNEYXRhVGFibGVIZWFkZXIgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUhlYWRlclwiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUJvZHkgfSBmcm9tIFwiLi9CU0RhdGFUYWJsZUJvZHlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCU0RhdGFUYWJsZSBleHRlbmRzIEJTRGF0YVRhYmxlQmFzZSB7XHJcblxyXG4gICAgb3B0aW9uczogQlNEYXRhVGFibGVPcHRpb25zO1xyXG4gICAgaGVhZDogQlNEYXRhVGFibGVIZWFkZXI7XHJcbiAgICBib2R5OiBCU0RhdGFUYWJsZUJvZHk7XHJcbiAgICBzZWxlY3RvcnM6IEJTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3dDb2xsZWN0aW9uO1xyXG4gICAgcGFnaW5hdG9yOiBCU0RhdGFUYWJsZVBhZ2luYXRpb247XHJcbiAgICBodHRwQ2xpZW50OiBCU0RhdGFUYWJsZUh0dHBDbGllbnQ7XHJcbiAgICBzZXNzaW9uQ2FjaGU6IFNlc3Npb25TdG9yYWdlU2VydmljZTtcclxuICAgIGluZmluaXRlU2Nyb2xsZXI6IEJTRGF0YVRhYmxlSW5maW5pdGVTY3JvbGw7XHJcbiAgICBncmlkQWN0aW9uczogQlNEYXRhVGFibGVBY3Rpb25zO1xyXG4gICAgZGlzY292ZXJhYmxlOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJTRGF0YVRhYmxlT3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5oZWFkID0gbmV3IEJTRGF0YVRhYmxlSGVhZGVyKCk7XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gbmV3IEJTRGF0YVRhYmxlQm9keSgpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0b3JzID0gbmV3IEJTRGF0YVRhYmxlU2VsZWN0b3JXaW5kb3dDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5wYWdpbmF0b3IgPSBuZXcgQlNEYXRhVGFibGVQYWdpbmF0aW9uKFxyXG4gICAgICAgICAgICBuZXcgQlNEYXRhVGFibGVQYWdpbmF0aW9uT3B0aW9ucyh0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgbmV3IEJTRGF0YVRhYmxlUGFnaW5nTWV0YURhdGEoKSxcclxuICAgICAgICAgICAgICAgIChwYWdlKSA9PiB0aGlzLnBhZ2luYXRvckNhbGxiYWNrKHBhZ2UpKSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2Vzc2lvbkNhY2hlID0gbmV3IFNlc3Npb25TdG9yYWdlU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudCA9IG5ldyBCU0RhdGFUYWJsZUh0dHBDbGllbnQodGhpcy5zZXNzaW9uQ2FjaGUsIHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuaHR0cENsaWVudC5jYWNoZVJlc3BvbnNlcyA9IHRoaXMub3B0aW9ucy5jYWNoZVJlc3BvbnNlcztcclxuXHJcbiAgICAgICAgdGhpcy5pbmZpbml0ZVNjcm9sbGVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmdyaWRBY3Rpb25zID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRpc2NvdmVyYWJsZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGlzY292ZXJhYmxlKCkge1xyXG4gICAgICAgIGJzRGF0YVRhYmxlRGlzY292ZXJ5U2VydmljZS5BZGQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRhdGFTb3VyY2VOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUmVhZE9ubHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc1JlYWRvbmx5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZWNvcmRzKCk6IG9iamVjdFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib2R5LmdldERpcnR5UmVjb3JkcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VcclxuICAgICAqL1xyXG4gICAgcGFnaW5hdG9yQ2FsbGJhY2socGFnZTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFBhZ2UuTmJyOiAke3BhZ2V9IGlzIHJlcXVlc3RlZGApO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hHcmlkUGFnZShwYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRIZWFkZXIoKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZCh0aGlzLmhlYWQuZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQm9keSgpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kKHRoaXMuYm9keS5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuanF1ZXJ5KCc8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1ob3ZlciB0YWJsZS1zbSByZXNpemFibGUgbmF2VGFibGUgbm93cmFwIGJzLXRhYmxlXCI+PC90YWJsZT4nKTtcclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMub3B0aW9ucy5ncmlkSWQ7XHJcbiAgICAgICAgdGhpcy5wcm9wKCdkYXRhLWRhdGFzb3VyY2UnLCB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lKTtcclxuXHJcbiAgICAgICAgdmFyIHNldHRpbmdzID0gdGhpcy5nZXRHcmlkU2V0dGluZ3ModGhpcy5vcHRpb25zLmdyaWRJZCkgfHwge307XHJcbiAgICAgICAgdGhpcy5jc3MgPSB7ICd3aWR0aCc6ICdpbmhlcml0JyB9O1xyXG5cclxuICAgICAgICB2YXIgZ3JpZEhlYWRlclJvdyA9IG5ldyBCU0RhdGFUYWJsZVJvdyh7XHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2VOYW1lOiB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLFxyXG4gICAgICAgICAgICBncmlkSWQ6IHRoaXMub3B0aW9ucy5ncmlkSWQsXHJcbiAgICAgICAgICAgIGdyaWRIZWFkZXI6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBncmlkSGVhZGVyUm93LmFkZENsYXNzKCdkcmFnZ2FibGUnKS5hZGRDbGFzcygnZ3JpZC1jb2xzJyk7XHJcblxyXG4gICAgICAgIHZhciBncmlkQm9keVJvdyA9IG5ldyBCU0RhdGFUYWJsZVJvdyh7XHJcbiAgICAgICAgICAgIGlzVGVtcGxhdGVSb3c6IHRydWUsXHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2VOYW1lOiB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLFxyXG4gICAgICAgICAgICBncmlkSWQ6IHRoaXMub3B0aW9ucy5ncmlkSWQsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lcklkOiB0aGlzLm9wdGlvbnMuY29udGFpbmVySWRcclxuICAgICAgICB9KTtcclxuICAgICAgICBncmlkQm9keVJvdy5hZGRDbGFzcygnZ3JpZC1yb3dzJyk7XHJcblxyXG4gICAgICAgIGdyaWRCb2R5Um93LmNzcyA9IHsgJ2Rpc3BsYXknOiAnbm9uZScgfTtcclxuXHJcbiAgICAgICAgdmFyIGdyaWRDb2x1bW5zID0gdGhpcy5hcHBseUNvbFNvcnRpbmcoc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGFkZCByb3cgbWFya2VycyAtIHRoaXMgaGVscHMgdG8gaW1wcm92ZSB0aGUgdmlzdWFsIGFwcGVhcmFuY2Ugb2Ygc2VsZWN0ZWQgcm93XHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgbWggPSBuZXcgQlNEYXRhVGFibGVDZWxsKG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oKSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHZhciBtYXJrZXIgPSBuZXcgQlNEYXRhVGFibGVNYXJrZXIoKTtcclxuICAgICAgICB2YXIgbWIgPSBuZXcgQlNEYXRhVGFibGVDZWxsKG5ldyBCU0RhdGFUYWJsZUNvbERlZmluaXRpb24oKSk7XHJcbiAgICAgICAgbWIuYXBwZW5kKG1hcmtlcik7XHJcblxyXG4gICAgICAgIGdyaWRIZWFkZXJSb3cuYWRkQ2VsbChtaCk7XHJcbiAgICAgICAgZ3JpZEJvZHlSb3cuYWRkQ2VsbChtYik7XHJcblxyXG5cclxuICAgICAgICBncmlkQ29sdW1ucy5mb3JFYWNoKChnYykgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gdGhlIGdyaWQgc3RvcmVzIGEgY29va2llIHdoaWNoIGNvbnRhaW5zIGluZm8gYWJvdXQgdGhlIHZpc2libGl0eSBhbmQgc2l6ZSBvZiB0aGUgY29sdW1uXHJcbiAgICAgICAgICAgIC8vIHdlIHdpbGwgdXNlIHRoaXMgaW5mbyB0byBzaXplIGFuZCB2aXN1YWxpemUgdGhlIGdyaWQgZGF0YVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB2YXIgY29sU2V0dGluZ3MgPSBzZXR0aW5nc1tnYy5wcm9wTmFtZV0gfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgdGggPSBncmlkSGVhZGVyUm93LmNyZWF0ZUhlYWRlckZvcihnYyk7XHJcbiAgICAgICAgICAgIHZhciB0ZCA9IGdyaWRCb2R5Um93LmNyZWF0ZUlucHV0Rm9yKGdjLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIHNvcnRpbmcgb2YgdGhlIGRhdGEgd2hlbiB0aGUgaGVhZGVyIGNlbGwgaXMgY2xpY2tlZFxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNvcnRpbmcodGgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Q29sU2V0dGluZ3ModGgsIGNvbFNldHRpbmdzKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBseUNvbFNldHRpbmdzKHRkLCBjb2xTZXR0aW5ncyk7XHJcbiAgICAgICAgICAgIGdyaWRIZWFkZXJSb3cuYWRkQ2VsbCh0aCk7XHJcbiAgICAgICAgICAgIGdyaWRCb2R5Um93LmFkZENlbGwodGQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmhlYWQuYWRkUm93KGdyaWRIZWFkZXJSb3cpO1xyXG4gICAgICAgIHRoaXMuYm9keS5hZGRSb3coZ3JpZEJvZHlSb3cpXHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gYWRkIGdyaWQgYWN0aW9ucyB0b29sYmFyXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmFkZEFjdGlvbnMoKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBhZGQgaGVhZGVyIGFuZCBib2R5IHRvIHRoZSBncmlkXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmFkZEhlYWRlcigpO1xyXG4gICAgICAgIHRoaXMuYWRkQm9keSgpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGFkZCBhY3Rpb25zIGZvciB0aGUgZ3JpZCB0byB0aGUgY29udGFpbmVyXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmpxdWVyeSgnIycgKyB0aGlzLm9wdGlvbnMuY29udGFpbmVySWQpLmFwcGVuZCh0aGlzLmdyaWRBY3Rpb25zLmVsZW1lbnQpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGFkZCBncmlkIHRvIHRoZSBwcm92aWRlZCBjb250YWluZXJcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuanF1ZXJ5KCcjJyArIHRoaXMub3B0aW9ucy5jb250YWluZXJJZCkuYXBwZW5kKHRoaXMuZWxlbWVudCk7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gZW5hYmxlIGluZmluaXRlIHNjcm9sbFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5hZGRJbmZpbml0ZVNjcm9sbCgpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGFkZCBkYXRhIHRvIHRoZSBncmlkXHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLmRhdGEuaW5pdERhdGE7XHJcbiAgICAgICAgdmFyIG1kYXRhID0gdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UuZGF0YS5tZXRhRGF0YTtcclxuXHJcblxyXG4gICAgICAgIGxldCBmZXRjaERhdGFFdmVudDogQlNGZXRjaFJlY29yZEV2ZW50ID0ge1xyXG4gICAgICAgICAgICBEYXRhU291cmNlTmFtZTogdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSwgRXZlbnREYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBEYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgTWV0YURhdGE6IG1kYXRhXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9GRVRDSF9HUklEX1JFQ09SRCwgZmV0Y2hEYXRhRXZlbnQpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIG5vdGlmeSB0aGF0IGdyaWQgaXMgZGF0YS1ib3VuZFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0dSSURfREFUQV9CT1VORCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgRGF0YVNvdXJjZU5hbWU6IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBFdmVudERhdGE6IHt9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kaXNjb3ZlcmFibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXREaXNjb3ZlcmFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEluZmluaXRlU2Nyb2xsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmZpbml0ZVNjcm9sbGVyID0gbmV3IEJTRGF0YVRhYmxlSW5maW5pdGVTY3JvbGwoeyBncmlkRWxlbWVudDogdGhpcy5lbGVtZW50LCBodHRwQ2xpZW50OiB0aGlzLmh0dHBDbGllbnQgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5maW5pdGVTY3JvbGxlci5uZXh0UGFnZUNhbGxiYWNrID0gKHBhZ2UpID0+IHRoaXMucGFnaW5hdG9yQ2FsbGJhY2socGFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5maW5pdGVTY3JvbGxlci5lbmFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQWN0aW9ucygpIHtcclxuICAgICAgICB0aGlzLmdyaWRBY3Rpb25zID0gbmV3IEJTRGF0YVRhYmxlQWN0aW9ucygpO1xyXG4gICAgICAgIHRoaXMuZ3JpZEFjdGlvbnMuZGF0YVNvdXJjZU5hbWUgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lO1xyXG4gICAgICAgIHRoaXMuZ3JpZEFjdGlvbnMuYWRkTmV3UmVjb3JkQWN0aW9uKChlKSA9PiB0aGlzLmFkZEVtcHR5Um93KCkpXHJcbiAgICAgICAgICAgIC5hZGREZWxldGVBY3Rpb24oKGUpID0+IHRoaXMuYm9keS5tYXJrRGVsZXRlZCgpKVxyXG4gICAgICAgICAgICAuYWRkR3JpZFNldHRpbmdzQWN0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlQ2VsbH0gdGhcclxuICAgICAqL1xyXG4gICAgYWRkU29ydGluZyh0aDogQlNEYXRhVGFibGVDZWxsKSB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBzb3J0aW5nIG9mIHRoZSBkYXRhIHdoZW4gdGhlIGhlYWRlciBjZWxsIGlzIGNsaWNrZWRcclxuICAgICAgICAvL1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGguZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzYyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aC5oYXNDbGFzcygnc29ydGluZ19hc2MnKSkge1xyXG4gICAgICAgICAgICAgICAgdGgucmVtb3ZlQ2xhc3MoJ3NvcnRpbmdfYXNjJykuYWRkQ2xhc3MoJ3NvcnRpbmdfZGVzYycpO1xyXG4gICAgICAgICAgICAgICAgYXNjID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aC5yZW1vdmVDbGFzcygnc29ydGluZ19kZXNjJykuYWRkQ2xhc3MoJ3NvcnRpbmdfYXNjJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIHN1cHBvcnRzIHNvcnRpbmcgb24gb25seSBvbmUgY29sdW1uLlxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aC5lbGVtZW50LnNpYmxpbmdzKCd0aCcpLnJlbW92ZUNsYXNzKCdzb3J0aW5nX2FzYycpLnJlbW92ZUNsYXNzKCdzb3J0aW5nX2Rlc2MnKTtcclxuXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIC8vIG5vdGlmeSB0aGF0IHdlIG5lZWQgc29ydGluZyBvZiB0aGUgY29sdW1uXHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHZhciBwcm9wID0gdGguZ2V0UHJvcCgnZGF0YS10aC1wcm9wbmFtZScpO1xyXG5cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy8gVE9ETzogZml4XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGxldCBldmVudDogQlNTb3J0aW5nUmVxdWVzdEV2ZW50ID0geyBFdmVudERhdGE6IHsgRXZlbnQ6IGUsIFByb3BOYW1lOiBwcm9wLCBBc2M6IGFzYyB9LCBEYXRhU291cmNlTmFtZTogX3RoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUgfTtcclxuXHJcbiAgICAgICAgICAgIHRoLm5vdGlmeUxpc3RlbmVycyh0aC5hcHBEYXRhRXZlbnRzLk9OX1NPUlRJTkdfUkVRVUVTVEVELCBldmVudCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyR3JpZCgpIHtcclxuICAgICAgICB0aGlzLmZpbmQoJy5ncmlkLXJvdycpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgYWxsIGV4Y2VwdCB0aGUgdGVtcGxhdGUgcm93XHJcbiAgICAgICAgdmFyIHRlbXBsYXRlUm93ID0gdGhpcy5ib2R5LmdldFRlbXBsYXRlUm93KCk7XHJcbiAgICAgICAgdGhpcy5ib2R5LnJvd3MgPSBbdGVtcGxhdGVSb3ddO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IHZpc2liaWxpdHkgYW5kIHNpemUgc2V0dGluZ3MgZnJvbSBzdG9yZSBjb29raWUuXHJcbiAgICAgKiBUaGlzIGhlbHBzIHRoZSB1c2VyIG5vdCB0byByZS1hcnJhbmdlIGNvbHMgYmFzZWQgb24gdGhlaXIgbmVlZHMgYWxsIHRoZSB0aW1lIHRoZXkgb3BlbiB0aGUgc2NyZWVuXHJcbiAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlQ2VsbH0gY29sXHJcbiAgICAgKiBAcGFyYW0ge2FueX0gc2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgYXBwbHlDb2xTZXR0aW5ncyhjb2w6IEJTRGF0YVRhYmxlQ2VsbCwgc2V0dGluZ3M6IGFueSkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5T2JqKHNldHRpbmdzKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MudmlzaWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgY29sLmVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLndpZHRoKSB7XHJcbiAgICAgICAgICAgIGNvbC5jc3MgPSB7ICdwb3NpdGlvbic6ICdyZWxhdGl2ZScsICd3aWR0aCc6IHNldHRpbmdzLndpZHRoIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGx5IGNvbHVtbiByZS1vcmRlcmluZyBiYXNlZCBvbiB0aGUgc3RvcmVkIGNvb2tpZVxyXG4gICAgICogVGhpcyBoZWxwcyB0aGUgdXNlciB0byBub3QgcmUtb3JkZXIgdGhlIGNvbHVtbnMgZXZlcnl0aW1lIHRoZXkgb3BlbiB0aGUgc2NyZWVuLlxyXG4gICAgICogQHBhcmFtIHsqfSBzZXR0aW5ncyBcclxuICAgICAqIEByZXR1cm5zIHtCU0RhdGFUYWJsZUNvbERlZmluaXRpb25bXX1cclxuICAgICAqL1xyXG4gICAgYXBwbHlDb2xTb3J0aW5nKHNldHRpbmdzKSB7XHJcblxyXG4gICAgICAgIGlmICghc2V0dGluZ3MgfHwgdGhpcy5pc0VtcHR5T2JqKHNldHRpbmdzKSkgcmV0dXJuIHRoaXMub3B0aW9ucy5jb2xEZWZpbml0aW9uO1xyXG4gICAgICAgIHZhciBzb3J0ZWRDb2xzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb2xEZWZpbml0aW9uLmZvckVhY2goKHYsIGkpID0+IHtcclxuICAgICAgICAgICAgdmFyIHNldCA9IHNldHRpbmdzW3YuUHJvcE5hbWVdO1xyXG4gICAgICAgICAgICBzb3J0ZWRDb2xzW3NldC5wb3NpdGlvbl0gPSB2O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gc29ydGVkQ29scztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0W119IGRhdGFcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YX0gW21ldGFEYXRhXVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgYmluZERhdGFTb3VyY2UoZGF0YTogb2JqZWN0W10sIG1ldGFEYXRhOiBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhKSB7XHJcblxyXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA8PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBwYWdlZERhdGEgPSBkYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5pc1JlbW90ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcGFnZWREYXRhID0gdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UuZ2V0UGFnZU9mZmxpbmVDQihtZXRhRGF0YS5wYWdlSW5kZXgsIHRoaXMub3B0aW9ucy5kYXRhU291cmNlLmRhdGEuaW5pdERhdGEsIG1ldGFEYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0eXBlIHtCU0RhdGFUYWJsZVJvd31cclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgbGFzdFJvdzogQlNEYXRhVGFibGVSb3cgPSBudWxsO1xyXG4gICAgICAgIHBhZ2VkRGF0YS5mb3JFYWNoKCh2LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLmFkZE5ld1Jvdyh2LCB0cnVlKTtcclxuICAgICAgICAgICAgcm93LnJvd0NhdGVnb3J5ID0gJ1BSRVNUSU5FJztcclxuICAgICAgICAgICAgbGFzdFJvdyA9IHJvdztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyB1cGRhdGUgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50XHJcbiAgICAgICAgLy9cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmVuYWJsZUluZmluaXRlU2Nyb2xsID09IGZhbHNlKVxyXG4gICAgICAgICAgICB0aGlzLmJpbmRQYWdpbmF0b3IobWV0YURhdGEpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmluZmluaXRlU2Nyb2xsZXIuaW5pdE1ldGFEYXRhID0gbWV0YURhdGE7XHJcbiAgICAgICAgICAgIHRoaXMuaW5maW5pdGVTY3JvbGxlci5pbml0RGF0YSA9IHBhZ2VkRGF0YTtcclxuICAgICAgICAgICAgaWYgKGxhc3RSb3cpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZmluaXRlU2Nyb2xsZXIudW5vYnNlcnZlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZmluaXRlU2Nyb2xsZXIub2JzZXJ2ZShsYXN0Um93LmVsZW1lbnRbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YX0gW3BhZ2luYXRpb25Nb2RlbF1cclxuICAgICAqL1xyXG4gICAgYmluZFBhZ2luYXRvcihwYWdpbmF0aW9uTW9kZWw6IEJTRGF0YVRhYmxlUGFnaW5nTWV0YURhdGEgPSBuZXcgQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSgpKSB7XHJcbiAgICAgICAgdGhpcy5wYWdpbmF0b3Iub3B0aW9ucy5wYWdpbmdNZXRhRGF0YSA9IHBhZ2luYXRpb25Nb2RlbDtcclxuICAgICAgICB0aGlzLnBhZ2luYXRvci5yZW5kZXIoKTtcclxuICAgICAgICB0aGlzLmpxdWVyeSgnIycgKyB0aGlzLm9wdGlvbnMuY29udGFpbmVySWQpLmFwcGVuZCh0aGlzLnBhZ2luYXRvci5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByb3dEYXRhXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRXhpc3RpbmdSZWNvcmRcclxuICAgICAqL1xyXG4gICAgYWRkTmV3Um93KHJvd0RhdGE6IG9iamVjdCwgaXNFeGlzdGluZ1JlY29yZDogYm9vbGVhbikge1xyXG4gICAgICAgIHZhciByb3dOdW1iZXIgPSB0aGlzLmJvZHkuZ2V0TmV4dFJvd0luZGV4KCk7XHJcbiAgICAgICAgdmFyIHJvdyA9IHRoaXMuYm9keS5nZXRUZW1wbGF0ZVJvdygpLmNsb25lKCk7XHJcbiAgICAgICAgcm93Lm9wdGlvbnMuaXNUZW1wbGF0ZVJvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByb3cuYWRkQ2xhc3MoJ2dyaWQtcm93Jyk7XHJcbiAgICAgICAgcm93LmNzcyA9IHsgJ2Rpc3BsYXknOiAndGFibGUtcm93JyB9O1xyXG5cclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgaW5wdXRzID0gcm93LmdldElucHV0cygpO1xyXG5cclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuXHJcbiAgICAgICAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdjtcclxuXHJcbiAgICAgICAgICAgIHZhciBvbGRJZCA9IGlucHV0LmlkO1xyXG4gICAgICAgICAgICBpbnB1dC5pZCA9IG9sZElkICsgXCJfXCIgKyByb3dOdW1iZXI7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbFByb3BOYW1lID0gaW5wdXQubW9kZWxOYW1lO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY2VsbC1wcm8nLCBjZWxsUHJvcE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxWYWwgPSByb3dEYXRhW2NlbGxQcm9wTmFtZV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5wdXQub3B0aW9ucy5JbnB1dFR5cGUgPT09ICdkYXRlJyAmJiBjZWxsVmFsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGNlbGxWYWwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlucHV0LnZhbCA9IF90aGlzLnRvRGF0ZURpc3BsYXlGb3JtYXQoZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBCU0RhdGFUYWJsZUNoZWNrQm94XHJcbiAgICAgICAgICAgICAgICAmJiAoY2VsbFZhbCA9PT0gJ3RydWUnIHx8IGNlbGxWYWwgPT09ICdUcnVlJyB8fCBjZWxsVmFsID09PSB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQucHJvcCgnY2hlY2tlZCcsICdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2VsbFZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC52YWwgPSBjZWxsVmFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICAgICAgaWYgKGlzRXhpc3RpbmdSZWNvcmQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaW5wdXQucmVhZG9ubHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5wdXQuZWxlbWVudC5vbignY2hhbmdlJywgKGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICByb3cucHJvcCgnZGF0YS1pc2RpcnR5JywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJvd0NhdCA9IHJvdy5yb3dDYXRlZ29yeTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dDYXQgIT09ICdBRERFRCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByb3cucm93Q2F0ZWdvcnkgPSAnVVBEQVRFRCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBwcmV2aW91cyBlcnJvcnNcclxuICAgICAgICAgICAgICAgIGlucHV0LnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJykucHJvcCgndGl0bGUnLCAnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRvb2x0aXAgPSBUb29sdGlwLmdldEluc3RhbmNlKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0b29sdGlwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuZGlzcG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByb3dEYXRhID0gcm93LmdldFJvd0RhdGFFeHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkcyA9IF90aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBncmlkVXBkYXRlRXZlbnQ6IEJTR3JpZFVwZGF0ZWRFdmVudCA9IHsgRXZlbnREYXRhOiB7IEV2ZW50OiBlLCBHcmlkOiBfdGhpcyB9LCBEYXRhU291cmNlTmFtZTogZHMgfTtcclxuICAgICAgICAgICAgICAgIGxldCByb3dVcGRhdGVkRXZlbnQ6IEJTUm93VXBkYXRlZEV2ZW50ID0geyBFdmVudERhdGE6IHsgRXZlbnQ6IGUsIFJvdzogcm93RGF0YSB9LCBEYXRhU291cmNlTmFtZTogZHMgfTtcclxuICAgICAgICAgICAgICAgIGxldCBmaWVsZFVwZGFlZEV2ZW50OiBCU0ZpZWxkVXBkYXRlZEV2ZW50ID0geyBFdmVudERhdGE6IHsgRXZlbnQ6IGUsIFJvdzogcm93RGF0YSwgRmllbGQ6IGlucHV0IH0sIERhdGFTb3VyY2VOYW1lOiBkcyB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICByb3cubm90aWZ5TGlzdGVuZXJzKF90aGlzLmFwcERhdGFFdmVudHMuT05fR1JJRF9VUERBVEVELCBncmlkVXBkYXRlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgcm93Lm5vdGlmeUxpc3RlbmVycyhfdGhpcy5hcHBEYXRhRXZlbnRzLk9OX0ZJRUxEX1VQREFURUQsIGZpZWxkVXBkYWVkRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgcm93Lm5vdGlmeUxpc3RlbmVycyhfdGhpcy5hcHBEYXRhRXZlbnRzLk9OX1JPV19VUERBVEVELCByb3dVcGRhdGVkRXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpbnB1dC5lbGVtZW50Lm9uKCdmb2N1cycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5ib2R5LmZvY3VzUm93KHJvdyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByb3cuZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5ib2R5LmZvY3VzUm93KHJvdyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYm9keS5hZGRSb3cocm93KTtcclxuXHJcbiAgICAgICAgdmFyIHZpc2libGVJbnB1dHMgPSByb3cuZ2V0VmlzaWJsZUlucHV0cygpO1xyXG5cclxuICAgICAgICBpZiAodmlzaWJsZUlucHV0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXN0SW5wdXQgPSB2aXNpYmxlSW5wdXRzW3Zpc2libGVJbnB1dHMubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgICAgICAgICBsYXN0SW5wdXQuZWxlbWVudC5vbigna2V5ZG93bicsIChlKSA9PiB0aGlzLm9uSW5wdXRLZXlEb3duKHJvdywgZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJvdztcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHRvRGF0ZURpc3BsYXlGb3JtYXQoZGF0ZTogRGF0ZSkge1xyXG5cclxuICAgICAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAgIG1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMSxcclxuICAgICAgICAgICAgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICAgICAgbGV0IG1vbnRoU3RyID0gKG1vbnRoIDwgMTAgPyBcIjBcIiA6IFwiXCIpICsgbW9udGg7XHJcbiAgICAgICAgbGV0IGRheVN0ciA9IChkYXkgPCAxMCA/IFwiMFwiIDogXCJcIikgKyBkYXk7XHJcblxyXG4gICAgICAgIHJldHVybiB5ZWFyICsgXCItXCIgKyBtb250aFN0ciArIFwiLVwiICsgZGF5U3RyO1xyXG4gICAgfVxyXG5cclxuICAgIHRvVGltZURpc3BsYXlGb3JtYXQoZGF0ZTogRGF0ZSkge1xyXG4gICAgICAgIHZhciBob3VyID0gZGF0ZS5nZXRIb3VycygpLFxyXG4gICAgICAgICAgICBtaW4gPSBkYXRlLmdldE1pbnV0ZXMoKTtcclxuXHJcbiAgICAgICAgbGV0IGhvdXJTdHIgPSAoaG91ciA8IDEwID8gXCIwXCIgOiBcIlwiKSArIGhvdXI7XHJcbiAgICAgICAgbGV0IG1pblN0ciA9IChtaW4gPCAxMCA/IFwiMFwiIDogXCJcIikgKyBtaW47XHJcblxyXG4gICAgICAgIHJldHVybiBob3VyU3RyICsgXCI6XCIgKyBtaW5TdHI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7QlNEYXRhVGFibGVSb3d9IHJvdyBcclxuICAgICAqIEBwYXJhbSB7Kn0gZSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBvbklucHV0S2V5RG93bihyb3c6IEJTRGF0YVRhYmxlUm93LCBlOiBKUXVlcnkuS2V5RG93bkV2ZW50PEhUTUxFbGVtZW50LCB1bmRlZmluZWQsIEhUTUxFbGVtZW50LCBIVE1MRWxlbWVudD4pIHtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBpbnNlcnQgYSBuZXcgcm93IGlmIGl0cyB0aGUgbGFzdCBpbnB1dCBpbiB0aGUgcm93XHJcbiAgICAgICAgLy8gICBcclxuXHJcbiAgICAgICAgaWYgKGUud2hpY2ggIT09IDkgfHwgZS5zaGlmdEtleSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgIHZhciB2aXNpYmxlUm93cyA9IHRoaXMuYm9keS5nZXRWaXNpYmxlUm93cygpO1xyXG4gICAgICAgIGlmICh2aXNpYmxlUm93cy5sZW5ndGggPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgIHZhciBsYXN0Um93SW5kZXggPSB2aXNpYmxlUm93c1t2aXNpYmxlUm93cy5sZW5ndGggLSAxXS5nZXRSb3dJbmRleCgpO1xyXG4gICAgICAgIHZhciBwYXJlbnRJbmRleCA9IHJvdy5nZXRSb3dJbmRleCgpO1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhncmlkUm93cywgY3VycmVudFJvd0luZGV4KTtcclxuICAgICAgICBpZiAobGFzdFJvd0luZGV4ID09PSBwYXJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgZVJvdyA9IHRoaXMuYWRkRW1wdHlSb3coKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEVtcHR5Um93KCkge1xyXG4gICAgICAgIC8vdmFyIHJvd0NvdW50ID0gdGhpcy5qcXVlcnkoJyMnICsgdGhpcy5vcHRpb25zLmdyaWRJZCkuZmluZCgndGJvZHk+dHInKS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGVtcHR5Um93ID0gdGhpcy5hZGROZXdSb3codGhpcy5jcmVhdGVFbXB0eVJvd0RhdGEoKSwgZmFsc2UpO1xyXG5cclxuICAgICAgICB2YXIgaW5wdXRzID0gZW1wdHlSb3cuZ2V0VmlzaWJsZUlucHV0cygpO1xyXG4gICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpbnB1dHNbMF0uZm9jdXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVtcHR5Um93LnJvd0NhdGVnb3J5ID0gJ0FEREVEJ1xyXG4gICAgICAgIGVtcHR5Um93LnByb3AoJ2RhdGEtaXNkaXJ0eScsICd0cnVlJyk7XHJcblxyXG4gICAgICAgIGxldCBncmlkVXBkYXRlRXZlbnQ6IEJTR3JpZFVwZGF0ZWRFdmVudCA9IHsgRXZlbnREYXRhOiB7IEdyaWQ6IHRoaXMsIEV2ZW50OiBlbXB0eVJvdyB9LCBEYXRhU291cmNlTmFtZTogdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSB9O1xyXG4gICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKHRoaXMuYXBwRGF0YUV2ZW50cy5PTl9HUklEX1VQREFURUQsIGdyaWRVcGRhdGVFdmVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5maW5pdGVTY3JvbGxlci51bm9ic2VydmUoKTtcclxuICAgICAgICB0aGlzLmluZmluaXRlU2Nyb2xsZXIub2JzZXJ2ZShlbXB0eVJvdy5lbGVtZW50WzBdKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVtcHR5Um93O1xyXG4gICAgfTtcclxuXHJcbiAgICBjcmVhdGVFbXB0eVJvd0RhdGEoKSB7XHJcbiAgICAgICAgdmFyIHJlY29yZCA9IHt9O1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb2xEZWZpbml0aW9uLmZvckVhY2goKHYsIGkpID0+IHsgcmVjb3JkW3YuUHJvcE5hbWVdID0gdW5kZWZpbmVkIH0pXHJcbiAgICAgICAgLy9kZWJ1Z2dlcjtcclxuICAgICAgICByZXR1cm4gcmVjb3JkO1xyXG4gICAgfTtcclxuXHJcbiAgICBvbkhlYWRlck5leHQoZXZlbnRBcmdzOiBCU0V2ZW50LCBmZXRjaEdyaWQ6IGJvb2xlYW4pIHtcclxuXHJcbiAgICAgICAgaWYgKCFldmVudEFyZ3MgfHwgIWV2ZW50QXJncy5FdmVudERhdGEpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnRBcmdzKTtcclxuICAgICAgICB0aGlzLnJlc2V0U29ydGluZygpO1xyXG4gICAgICAgIHRoaXMuY2xlYXJHcmlkKCk7XHJcbiAgICAgICAgdGhpcy5wYWdpbmF0b3IuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgaWYgKGZldGNoR3JpZCA9PT0gZmFsc2UpIHJldHVybjtcclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGZldGNoIGdyaWQgZGF0YVxyXG4gICAgICAgIC8vICAgICAgICBcclxuICAgICAgICB0aGlzLmZldGNoR3JpZFBhZ2UoMSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmZpbml0ZVNjcm9sbGVyLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VJbmRleFxyXG4gICAgICovXHJcbiAgICBmZXRjaEdyaWRQYWdlKHBhZ2VJbmRleDogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5pc1JlbW90ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UudXJsKHBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgIGlmICghdXJsKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IG5ldyBCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zKHVybCwgXCJHRVRcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmh0dHBDbGllbnQuZ2V0KG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5kYXRhLmluaXREYXRhO1xyXG4gICAgICAgICAgICB2YXIgbWRhdGEgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5kYXRhLm1ldGFEYXRhO1xyXG4gICAgICAgICAgICAvL3ZhciBjYiA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLmdldFBhZ2VPZmZsaW5lQ0I7XHJcbiAgICAgICAgICAgIC8vdmFyIHBhZ2VEYXRhID0gY2IocGFnZUluZGV4LCBkYXRhLCBtZGF0YSk7XHJcbiAgICAgICAgICAgIHZhciBmZXRjaFJlY29yZEV2ZW50OiBCU0ZldGNoUmVjb3JkRXZlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBEYXRhU291cmNlTmFtZTogdGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZSxcclxuICAgICAgICAgICAgICAgIEV2ZW50RGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIERhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgTWV0YURhdGE6IG5ldyBCU0RhdGFUYWJsZVBhZ2luZ01ldGFEYXRhKHBhZ2VJbmRleCwgbWRhdGEucGFnZVNpemUsIG1kYXRhLnRvdGFsUmVjb3JkcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0ZFVENIX0dSSURfUkVDT1JELCBmZXRjaFJlY29yZEV2ZW50KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblNhdmVSZWNvcmQoZXZlbnRBcmdzOiBCU0V2ZW50KSB7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gcmVtb3ZlIHJvd3MgZnJvbSB0aGUgZ3JpZCB0aGF0IGhhcyBiZWVuIGRlbGV0ZWRcclxuICAgICAgICAvL1xyXG5cclxuICAgICAgICAvLyB0aGlzLmJvZHkuZmluZChcInRyW2RhdGEtcm93Y2F0ZWdvcnk9J0RFTEVURUQnXVwiKS5yZW1vdmUoKTtcclxuICAgICAgICAvLyB0aGlzLmJvZHkuZmluZChcInRyW2RhdGEtcm93Y2F0ZWdvcnk9J0FEREVEX0RFTEVURUQnXVwiKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgcmVhbCBhbmQgdmlydHVhbCBET01cclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMuYm9keS5yb3dzXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKHYpID0+IHYucm93Q2F0ZWdvcnkgPT09ICdERUxFVEVEJyB8fCB2LnJvd0NhdGVnb3J5ID09PSAnQURERURfREVMRVRFRCcpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKCh2KSA9PiB0aGlzLmJvZHkucmVtb3ZlUm93KHYpKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyB3aGVuIG1haW4gcmVjb3JkIGlzIHNhdmVkLCBkaXNhYmxlIHRoZSBrZXkgY29sdW1ucyBvZiB0aGUgZ3JpZCxcclxuICAgICAgICAvLyAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ib2R5LnJvd3MuZm9yRWFjaCgodikgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gbWFyayBhbGwgcm93cyBwcmVzdGluZVxyXG4gICAgICAgICAgICB2LnJvd0NhdGVnb3J5ID0gJ1BSRVNUSU5FJztcclxuXHJcbiAgICAgICAgICAgIC8vIG1ha2UgaWQgaW5wdXRzIGRpc2FibGVkXHJcbiAgICAgICAgICAgIHYuZ2V0SW5wdXRzKCkuZmlsdGVyKCh4KSA9PiB4LmlzS2V5KS5mb3JFYWNoKCh2eCkgPT4geyB2eC5kaXNhYmxlZCA9IHRydWU7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBvblNhdmVFcnJvcihldmVudEFyZ3M6IEJTRXZlbnQpIHtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAvLyBJdHMgYXNzdW1lZCB0aGF0IHRoZSAubmV0IG12YyBhcGkgd2lsbCBjb252ZXJ0IHRoZSBtb2RlbCBzdGF0ZSBlcnJvcnMgaW50byB0aGUgZm9sbG93aW5nIGZvcm1hdFxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8ge1xyXG4gICAgICAgIC8vICAgICBcImFkZHJlc3Nlcy5bMF1cIjogW1wiMVwiXSwgLy8gY2xpZW50IHJvdyBpbmRleFxyXG4gICAgICAgIC8vICAgICBcImFkZHJlc3Nlcy5bMV1cIjogW1wiMlwiXSxcclxuICAgICAgICAvLyAgICAgXCJhZGRyZXNzZXMuWzJdXCI6IFtcIjNcIl0sXHJcbiAgICAgICAgLy8gICAgIFwiYWRkcmVzc2VzWzFdLkNpdHlcIjogW1wiVGhlIENpdHk6IGZpZWxkIGlzIHJlcXVpcmVkLlwiLCBcIlRoZSBDaXR5OiBtdXN0IGJlIGF0IGxlYXN0IDMgYW5kIGF0IG1heCAxMjggY2hhcmFjdGVycyBsb25nLlwiXSxcclxuICAgICAgICAvLyAgICAgXCJhZGRyZXNzZXNbMV0uQ291bnRyeVwiOiBbXCJUaGUgQ291bnRyeTogZmllbGQgaXMgcmVxdWlyZWQuXCIsIFwiVGhlIENvdW50cnk6IG11c3QgYmUgYXQgbGVhc3QgMiBhbmQgYXQgbWF4IDEyOCBjaGFyYWN0ZXJzIGxvbmcuXCJdLFxyXG4gICAgICAgIC8vICAgICBcImFkZHJlc3Nlc1sxXS5Qb3N0YWxDb2RlXCI6IFtcIlRoZSBQb3N0YWwgY29kZTogZmllbGQgaXMgcmVxdWlyZWQuXCIsIFwiVGhlIFBvc3RhbCBjb2RlOiBtdXN0IGJlIGF0IGxlYXN0IDMgYW5kIGF0IG1heCAxMjggY2hhcmFjdGVycyBsb25nLlwiXSxcclxuICAgICAgICAvLyAgICAgXCJhZGRyZXNzZXNbMV0uU3RyZWV0QWRkcmVzc1wiOiBbXCJUaGUgU3RyZWV0IGFkZHJlc3M6IGZpZWxkIGlzIHJlcXVpcmVkLlwiLCBcIlRoZSBTdHJlZXQgYWRkcmVzczogbXVzdCBiZSBhdCBsZWFzdCAzIGFuZCBhdCBtYXggMTI4IGNoYXJhY3RlcnMgbG9uZy5cIl0sXHJcbiAgICAgICAgLy8gICAgIFwiYWRkcmVzc2VzWzJdLkNpdHlcIjogW1wiVGhlIENpdHk6IGZpZWxkIGlzIHJlcXVpcmVkLlwiLCBcIlRoZSBDaXR5OiBtdXN0IGJlIGF0IGxlYXN0IDMgYW5kIGF0IG1heCAxMjggY2hhcmFjdGVycyBsb25nLlwiXSxcclxuICAgICAgICAvLyAgICAgXCJhZGRyZXNzZXNbMl0uQ291bnRyeVwiOiBbXCJUaGUgQ291bnRyeTogZmllbGQgaXMgcmVxdWlyZWQuXCIsIFwiVGhlIENvdW50cnk6IG11c3QgYmUgYXQgbGVhc3QgMiBhbmQgYXQgbWF4IDEyOCBjaGFyYWN0ZXJzIGxvbmcuXCJdLFxyXG4gICAgICAgIC8vICAgICBcImFkZHJlc3Nlc1syXS5Qb3N0YWxDb2RlXCI6IFtcIlRoZSBQb3N0YWwgY29kZTogZmllbGQgaXMgcmVxdWlyZWQuXCIsIFwiVGhlIFBvc3RhbCBjb2RlOiBtdXN0IGJlIGF0IGxlYXN0IDMgYW5kIGF0IG1heCAxMjggY2hhcmFjdGVycyBsb25nLlwiXSxcclxuICAgICAgICAvLyAgICAgXCJhZGRyZXNzZXNbMl0uU3RyZWV0QWRkcmVzc1wiOiBbXCJUaGUgU3RyZWV0IGFkZHJlc3M6IG11c3QgYmUgYXQgbGVhc3QgMyBhbmQgYXQgbWF4IDEyOCBjaGFyYWN0ZXJzIGxvbmcuXCJdXHJcbiAgICAgICAgLyB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgaWYgKCFldmVudEFyZ3MgfHwgIWV2ZW50QXJncy5FdmVudERhdGEgfHwgIWV2ZW50QXJncy5FdmVudERhdGEuRXZlbnQucmVzcG9uc2VKU09OKSByZXR1cm47XHJcbiAgICAgICAgdmFyIGVycm9ycyA9IGV2ZW50QXJncy5FdmVudERhdGEuRXZlbnQucmVzcG9uc2VKU09OO1xyXG4gICAgICAgIHZhciBkc05hbWUgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lO1xyXG5cclxuICAgICAgICB2YXIgZGlydHlSb3dzID0gdGhpcy5ib2R5LmdldERpcnR5Um93cygpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcnR5Um93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvL2RlYnVnZ2VyO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JQcm9wID0gZHNOYW1lICsgJ1snICsgaSArICddJztcclxuICAgICAgICAgICAgdmFyIGltID0gZXJyb3JzW2Vycm9yUHJvcF07XHJcbiAgICAgICAgICAgIGlmIChpbSAmJiBpbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xpZW50SW5kZXggPSBpbVswXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJ2ZXJJbmRleCA9IGk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVycm9yUm93ID0gdGhpcy5nZXRSb3dCeUluZGV4KHBhcnNlSW50KGNsaWVudEluZGV4KSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVycm9yUm93KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY29sRGVmaW5pdGlvbi5mb3JFYWNoKChjb2wsIGkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gY29sLlByb3BOYW1lLnRvUGFzY2FsQ2FzZUpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRFcnJvciA9IGVycm9yc1tkc05hbWUgKyAnWycgKyBzZXJ2ZXJJbmRleCArICddLicgKyBwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0RXJyb3IgJiYgaW5wdXRFcnJvci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGVycm9yUm93LmZpbmQoXCJpbnB1dFtkYXRhLXByb3BuYW1lPVwiICsgY29sLlByb3BOYW1lICsgXCJdXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCB8fCBpbnB1dC5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBlcnJvclJvdy5maW5kKFwic2VsZWN0W2RhdGEtcHJvcG5hbWU9XCIgKyBjb2wuUHJvcE5hbWUgKyBcIl1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0IGZvdW5kJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5hZGRDbGFzcygnaXMtaW52YWxpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhpbnB1dEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxFcnJvcnMgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20oaW5wdXRFcnJvcikuZm9yRWFjaChmdW5jdGlvbiAoZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxFcnJvcnMgKz0gZXIgKyAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmF0dHIoJ3RpdGxlJywgYWxsRXJyb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sdGlwID0gbmV3IFRvb2x0aXAoaW5wdXRbMF0sIHsgY3VzdG9tQ2xhc3M6ICd0b29sdGlwLWVycm9yJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um93QnlJbmRleChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keS5yb3dzLmZpbmQoKHYsIGkpID0+IHYuZ2V0Um93SW5kZXgoKSA9PT0gaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZUNlbGx9IHRoXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFzY1hcclxuICAgICAqL1xyXG4gICAgc29ydFRhYmxlKHRoOiBCU0RhdGFUYWJsZUNlbGwsIGFzY1g6IGJvb2xlYW4pIHtcclxuXHJcbiAgICAgICAgLy8gIGNvbnNvbGUubG9nKCdzb3J0aW5nJywgYXNjWCk7XHJcbiAgICAgICAgY29uc3QgZ2V0Q2VsbFZhbHVlID0gKC8qKiBAdHlwZSB7QlNEYXRhVGFibGVSb3d9ICovIHRyLCAvKiogQHR5cGUge251bWJlcn0gKi8gaWR4KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IHRyLmNlbGxzW2lkeF0uZWxlbWVudDtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2lkeDogJywgaWR4LCAgY2hpbGQpO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IGNoaWxkLmZpbmQoJ2lucHV0LCBzZWxlY3QnKS5pcyhcIjpjaGVja2VkXCIpIHx8IGNoaWxkLmZpbmQoJ2lucHV0LCBzZWxlY3QnKS52YWwoKSB8fCBjaGlsZC50ZXh0KCk7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gcmVzcG9uc2libGUgZm9yIHNvcnRpbmcgYSBzcGVjaWZpYyBjb2x1bW4gaW5kZXggXHJcbiAgICAgICAgLy8gKGlkeCA9IGNvbHVtbkluZGV4LCBhc2MgPSBhc2NlbmRpbmcgb3JkZXI/KS5cclxuICAgICAgICB2YXIgY29tcGFyZXIgPSBmdW5jdGlvbiAoLyoqIEB0eXBlIHtudW1iZXJ9ICovIGlkeCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBhc2MpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaWR4OiAnLCBpZHgsICdhc2M6ICcsIGFzYyk7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdXNlZCBieSB0aGUgYXJyYXkuc29ydCgpIGZ1bmN0aW9uLi4uXHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoLyoqIEB0eXBlIHtCU0RhdGFUYWJsZVJvd30gKi8gYSwgLyoqIEB0eXBlIHtCU0RhdGFUYWJsZVJvd30gKi8gYikge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnYTogJywgYSwgJ2I6ICcsIGIpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSB0cmFuc2llbnQgZnVuY3Rpb24sIHRoYXQgaXMgY2FsbGVkIHN0cmFpZ2h0IGF3YXkuIFxyXG4gICAgICAgICAgICAgICAgLy8gSXQgYWxsb3dzIHBhc3NpbmcgaW4gZGlmZmVyZW50IG9yZGVyIG9mIGFyZ3MsIGJhc2VkIG9uIFxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGFzY2VuZGluZy9kZXNjZW5kaW5nIG9yZGVyLlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2MSwgdjIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgY29uc29sZS5sb2coJ3YxOiAnLCB2MSwgJ3YyOiAnLCB2Mik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc29ydCBiYXNlZCBvbiBhIG51bWVyaWMgb3IgbG9jYWxlQ29tcGFyZSwgYmFzZWQgb24gdHlwZS4uLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodjEgIT09ICcnICYmIHYyICE9PSAnJyAmJiAhaXNOYU4odjEpICYmICFpc05hTih2MikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdjEgLSB2MlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHYxLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZSh2Mik7XHJcbiAgICAgICAgICAgICAgICB9KGdldENlbGxWYWx1ZShhc2MgPyBhIDogYiwgaWR4KSwgZ2V0Q2VsbFZhbHVlKGFzYyA/IGIgOiBhLCBpZHgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGRvIHRoZSB3b3JrLi4uXHJcbiAgICAgICAgLy8gY29uc3QgdGFibGUgPSB0aC5jbG9zZXN0KCd0YWJsZScpO1xyXG5cclxuICAgICAgICAvL2RlYnVnZ2VyO1xyXG4gICAgICAgIHZhciBkcyA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWU7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cocm93cyk7XHJcbiAgICAgICAgdmFyIGxpc3QgPSB0aGlzLmJvZHkucm93cy5zb3J0KGNvbXBhcmVyKHRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHMuaW5kZXhPZih0aCksIGFzY1ggPSAhYXNjWCkpO1xyXG5cclxuICAgICAgICBsaXN0LmZvckVhY2godHIgPT4gdGhpcy5ib2R5LmFwcGVuZCh0ciwgZmFsc2UpKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBjb25mRXZlbnQ6IEJTQ29uZmlnVXBkYXRlZEV2ZW50ID0geyBFdmVudERhdGE6IHsgQ3VycmVudENvbDogdGgsIEFjdGlvbjogYXBwQWN0aW9ucy5DT0xfU09SVElORyB9LCBEYXRhU291cmNlTmFtZTogZHMgfTtcclxuICAgICAgICBsZXQgY29sUmVvcmRlckV2ZW50OiBCU0NvbHNSZW9yZGVyZWRFdmVudCA9IHsgRXZlbnREYXRhOiB7IEN1cnJlbnRDb2w6IHRoLCBBc2M6IGFzY1ggfSwgRGF0YVNvdXJjZU5hbWU6IGRzIH07XHJcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoYXBwRGF0YUV2ZW50cy5PTl9DT0xTX1JFT1JERVJFRCwgY29sUmVvcmRlckV2ZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnModGhpcy5hcHBEYXRhRXZlbnRzLk9OX0dSSURfQ09ORklHX1VQREFURUQsIGNvbmZFdmVudCk7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBvblNvcnRpbmdSZXF1ZXN0KGV2ZW50QXJnczogQlNTb3J0aW5nUmVxdWVzdEV2ZW50KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnRBcmdzKTtcclxuXHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSB0aGlzLmpxdWVyeShldmVudEFyZ3MuRXZlbnREYXRhLkV2ZW50LnRhcmdldCk7XHJcblxyXG4gICAgICAgIHZhciBpc1RoID0gJHRhcmdldC5wcm9wKCd0YWdOYW1lJykudG9Mb3dlckNhc2UoKSA9PT0gJ3RoJztcclxuXHJcbiAgICAgICAgaWYgKCFpc1RoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aCA9ICR0YXJnZXQucGFyZW50cygndGgnKTtcclxuICAgICAgICAgICAgaWYgKCF0aCB8fCB0aC5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50QXJncy5FdmVudERhdGEuRXZlbnQudGFyZ2V0ID0gdGhbMF07XHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRoeCA9IHRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHMuZmluZCgodiwgaSkgPT4gdi5lbGVtZW50WzBdID09PSBldmVudEFyZ3MuRXZlbnREYXRhLkV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgLy8gZGVidWdnZXI7XHJcbiAgICAgICAgdGhpcy5zb3J0VGFibGUodGh4LCBldmVudEFyZ3MuRXZlbnREYXRhLkFzYyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlc2V0U29ydGluZygpIHtcclxuXHJcbiAgICAgICAgdGhpcy5oZWFkLnJvd3MuZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodi5oYXNDbGFzcygnc29ydGluZ19kZXNjJyB8fCB2Lmhhc0NsYXNzKCdzb3J0aW5nX2FzYycpKSkge1xyXG4gICAgICAgICAgICAgICAgdi5yZW1vdmVDbGFzcygnc29ydGluZ19hc2MnKS5yZW1vdmVDbGFzcygnc29ydGluZ19kZXNjJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgb25Db2xzUmVvcmRlcmVkKGV2ZW50QXJnczogQlNDb2xzUmVvcmRlcmVkRXZlbnQpIHtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBtb2RpZnkgJ2tleWRvd24nIGV2ZW50cyBvbiB0aGUgcm93IGlucHV0c1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdmFyIGdyaWQgPSB0aGlzO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50QXJncyk7XHJcblxyXG5cclxuICAgICAgICBncmlkLmJvZHkucm93cy5mb3JFYWNoKChyb3csIGkpID0+IHtcclxuICAgICAgICAgICAgdmFyIGlucHV0cyA9IHJvdy5nZXRJbnB1dHMoKTtcclxuICAgICAgICAgICAgaW5wdXRzLmZvckVhY2goKGlucCkgPT4geyBpbnAuZWxlbWVudC5vZmYoJ2tleWRvd24nKSB9KTtcclxuICAgICAgICAgICAgdmFyIHZpc2libGVJbnB1dHMgPSByb3cuZ2V0VmlzaWJsZUlucHV0cygpO1xyXG4gICAgICAgICAgICBpZiAodmlzaWJsZUlucHV0cy5sZW5ndGggPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgbGFzdElucHV0ID0gdmlzaWJsZUlucHV0c1t2aXNpYmxlSW5wdXRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBsYXN0SW5wdXQuZWxlbWVudC5vbigna2V5ZG93bicsIChlKSA9PiB7IHRoaXMub25JbnB1dEtleURvd24ocm93LCBlKSB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIGFkZEhhbmRsZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBCU0V2ZW50SGFuZGxlciwgdmVyaWZ5RFNOYW1lID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgbW9kZWw6IEJTRXZlbnRTdWJzY3JpYmVyTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIEtleTogdGhpcy5vcHRpb25zLmdyaWRJZCxcclxuICAgICAgICAgICAgRXZlbnROYW1lOiBldmVudE5hbWUsXHJcbiAgICAgICAgICAgIENhbGxiYWNrOiBjYWxsYmFjayxcclxuICAgICAgICAgICAgRGF0YVNvdXJjZU5hbWU6IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWUsXHJcbiAgICAgICAgICAgIFZlcmlmeURhdGFTb3VyY2VOYW1lOiB2ZXJpZnlEU05hbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGRhdGFFdmVudHNTZXJ2aWNlLlN1YnNjcmliZShtb2RlbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlbW92ZUhhbmRsZXIoZXZlbnROYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgbW9kZWw6IEJTRXZlbnRTdWJzY3JpYmVyTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIEtleTogdGhpcy5vcHRpb25zLmdyaWRJZCxcclxuICAgICAgICAgICAgRXZlbnROYW1lOiBldmVudE5hbWUsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VOYW1lOiB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZGF0YUV2ZW50c1NlcnZpY2UuVW5zdWJzY3JpYmUobW9kZWwpO1xyXG4gICAgfTtcclxuXHJcbiAgICBvbkZldGNoRGF0YShldmVudEFyZ3M6IEJTRmV0Y2hSZWNvcmRFdmVudCkge1xyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb25GZXRjaERhdGE6JywgZXZlbnRBcmdzKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBwb3B1bGF0ZSB0aGUgZ3JpZCB3aXRoIHRoZSBmZXRjaGVkIGRhdGFcclxuICAgICAgICAvL1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlSW5maW5pdGVTY3JvbGwgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICB0aGlzLmNsZWFyR3JpZCgpO1xyXG4gICAgICAgIHZhciBtZCA9IGV2ZW50QXJncy5FdmVudERhdGEuTWV0YURhdGE7XHJcbiAgICAgICAgaWYgKCFtZCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuYmluZERhdGFTb3VyY2UoZXZlbnRBcmdzLkV2ZW50RGF0YS5EYXRhLCBuZXcgQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YShtZC5wYWdlSW5kZXgsIG1kLnBhZ2VTaXplLCBtZC50b3RhbFJlY29yZHMpKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkZldGNoRGF0YUVycm9yKGV2ZW50QXJnczogQlNGZXRjaFJlY29yZEVycm9yRXZlbnQpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdvbkZldGNoRGF0YUVycm9yOiAnLCBldmVudEFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyQ2FsbGJhY2tzKHZlcmlmeURTTmFtZSA9IHRydWUpIHtcclxuICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZElkO1xyXG4gICAgICAgIHZhciBkcyA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWU7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gc3Vic2NyaWJlIHRvIG1haW4gdmlldy9mb3JtIGV2ZW50c1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5hZGRIYW5kbGVyKGFwcERhdGFFdmVudHMuR1JJRF9EQVRBLCAoc2VuZGVyLCBldikgPT4gdGhpcy5ib2R5LmdldERpcnR5UmVjb3JkcygpKTsgLy8gVE9ETzogb2Jzb2xldGUgLT4gcmVwbGFjZWQgd2l0aCBkaXNjb3Zlcnkgc2VydmljZVxyXG4gICAgICAgIHRoaXMuYWRkSGFuZGxlcihhcHBEYXRhRXZlbnRzLk9OX0FERF9SRUNPUkQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uSGVhZGVyTmV4dChldiwgZmFsc2UpKTtcclxuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoYXBwRGF0YUV2ZW50cy5PTl9GRVRDSF9SRUNPUkQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uSGVhZGVyTmV4dChldiwgdHJ1ZSkpO1xyXG4gICAgICAgIHRoaXMuYWRkSGFuZGxlcihhcHBEYXRhRXZlbnRzLk9OX1NBVkVfUkVDT1JELCAoc2VuZGVyLCBldikgPT4gdGhpcy5vblNhdmVSZWNvcmQoZXYpKTtcclxuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoYXBwRGF0YUV2ZW50cy5PTl9TQVZFX0VSUk9SLCAoc2VuZGVyLCBldikgPT4gdGhpcy5vblNhdmVFcnJvcihldikpO1xyXG5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIHN1YnNjcmliZSB0byBncmlkIGV2ZW50c1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgdGhpcy5hZGRIYW5kbGVyKGFwcERhdGFFdmVudHMuT05fU09SVElOR19SRVFVRVNURUQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uU29ydGluZ1JlcXVlc3QoZXYpLCB2ZXJpZnlEU05hbWUpO1xyXG4gICAgICAgIHRoaXMuYWRkSGFuZGxlcihhcHBEYXRhRXZlbnRzLk9OX0NPTFNfUkVPUkRFUkVELCAoc2VuZGVyLCBldikgPT4gdGhpcy5vbkNvbHNSZW9yZGVyZWQoZXYpLCB2ZXJpZnlEU05hbWUpO1xyXG4gICAgICAgIHRoaXMuYWRkSGFuZGxlcihhcHBEYXRhRXZlbnRzLk9OX0dSSURfQ09ORklHX1VQREFURUQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uR3JpZENvbmZpZ3VyYXRpb25DaGFuZ2VkKGV2KSwgdmVyaWZ5RFNOYW1lKTtcclxuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoYXBwRGF0YUV2ZW50cy5PTl9HUklEX0RBVEFfQk9VTkQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uR3JpZERhdGFCb3VuZChldiksIHZlcmlmeURTTmFtZSk7XHJcbiAgICAgICAgdGhpcy5hZGRIYW5kbGVyKGFwcERhdGFFdmVudHMuT05fRkVUQ0hfR1JJRF9SRUNPUkQsIChzZW5kZXIsIGV2KSA9PiB0aGlzLm9uRmV0Y2hEYXRhKGV2KSwgdmVyaWZ5RFNOYW1lKTtcclxuICAgICAgICB0aGlzLmFkZEhhbmRsZXIoYXBwRGF0YUV2ZW50cy5PTl9GRVRDSF9HUklEX1JFQ09SRF9FUlJPUiwgKHNlbmRlciwgZXYpID0+IHRoaXMub25GZXRjaERhdGFFcnJvcihldiksIHZlcmlmeURTTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlndXJhYmxlR3JpZCgpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnY29uZmlndXJhYmxlR3JpZCBpcyByZWFjaGVkJywgdGhpcyk7XHJcbiAgICAgICAgdmFyIGhlYWRlcnMgPSB0aGlzLmhlYWQuZ2V0R3JpZFRpdGxlc1JvdygpLmNlbGxzO1xyXG4gICAgICAgIHZhciBkYXRhU291cmNlTmFtZSA9IHRoaXMub3B0aW9ucy5kYXRhU291cmNlLm5hbWU7XHJcblxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gQSBtb2RhbCBmb3IgY29uZmlndXJpbmcgZ3JpZCBjb2x1bW5zLlxyXG4gICAgICAgIC8vIFRoZSBtb2RhbCBhaHMgYW4gPHVsPiBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcG9wdWxhdGVkIGJlbG93IHdpdGggZ3JpZCBjb2x1bW5zIGNoZWNrLWxpc3QuXHJcbiAgICAgICAgLy8gdGhlIGNoZWNrcyBjYW4gYmUgdXNlZCB0byBzaG93L2hpZGUgYSBwYXJ0aWN1bGFyIGdyaWQgY29sdW1uXHJcbiAgICAgICAgLy9cclxuICAgICAgICB2YXIgbW9kZWxUZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwic2V0dGluZ3MtbWVudSBncmlkLWNvbmZpZy10ZW1wbGF0ZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwgZmFkZVwiIGlkPVwic3RhdGljQmFja2Ryb3BfJHt0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lfVwiIGRhdGEtYnMtYmFja2Ryb3A9XCJzdGF0aWNcIiBkYXRhLWJzLWtleWJvYXJkPVwiZmFsc2VcIiB0YWJpbmRleD1cIi0xXCJcclxuICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwic3RhdGljQmFja2Ryb3BMYWJlbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctc2Nyb2xsYWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCIgaWQ9XCJzdGF0aWNCYWNrZHJvcExhYmVsXyR7dGhpcy5vcHRpb25zLmRhdGFTb3VyY2UubmFtZX1cIj5Db25maWd1cmUgY29sdW1uczwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0bi1jbG9zZVwiIGRhdGEtYnMtZGlzbWlzcz1cIm1vZGFsXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwibGlzdC1ncm91cCBncmlkLWNvbmZpZy1jb2xzXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIj5PazwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5gO1xyXG4gICAgICAgIHZhciBtb2RhbEVsZW0gPSB0aGlzLmpxdWVyeShtb2RlbFRlbXBsYXRlKTtcclxuICAgICAgICB0aGlzLmpxdWVyeSgnIycgKyB0aGlzLm9wdGlvbnMuY29udGFpbmVySWQpLmFwcGVuZChtb2RhbEVsZW0pO1xyXG4gICAgICAgIC8vIHRoaXMuYXBwZW5kKG1vZGFsRWxlbSwgZmFsc2UpO1xyXG5cclxuICAgICAgICB2YXIgY29sc0xpc3QgPSBtb2RhbEVsZW0uZmluZCgnLmdyaWQtY29uZmlnLWNvbHMnKTtcclxuICAgICAgICBoZWFkZXJzLmZvckVhY2goKGhlYWRlciwgaW5kZXgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IGhlYWRlci5nZXRQcm9wKCdkYXRhLXRoLXByb3BuYW1lJyk7XHJcbiAgICAgICAgICAgIGlmICghcHJvcE5hbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb2xzTGlzdEl0ZW0gPSB0aGlzLmpxdWVyeSgnPGxpIGNsYXNzPVwibGlzdC1ncm91cC1pdGVtXCI+PC9saT4nKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjaGsgPSB0aGlzLmpxdWVyeSgnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIHZhbHVlPVwiXCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IG1lLTFcIiAvPicpO1xyXG4gICAgICAgICAgICB2YXIgY2hrSWQgPSAnY29sX2NvbmZpZ19jaGtfJyArIHByb3BOYW1lO1xyXG4gICAgICAgICAgICBjaGsuYXR0cignaWQnLCBjaGtJZCk7XHJcbiAgICAgICAgICAgIGNoay5hdHRyKCdkYXRhLWNvbmZpZy1wcm9wbmFtZScsIHByb3BOYW1lKTtcclxuICAgICAgICAgICAgaWYgKGhlYWRlci52aXNpYmxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjaGsuYXR0cignY2hlY2tlZCcsICdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjaGtMYmwgPSB0aGlzLmpxdWVyeSgnPGxhYmVsIGZvcj1cIicgKyBjaGtJZCArICdcIj48L2xhYmVsPicpO1xyXG4gICAgICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICAgICAgY2hrTGJsLnRleHQoaGVhZGVyLmdldFRleHQoKSk7XHJcblxyXG4gICAgICAgICAgICBjb2xzTGlzdEl0ZW0uYXBwZW5kKGNoayk7XHJcbiAgICAgICAgICAgIGNvbHNMaXN0SXRlbS5hcHBlbmQoY2hrTGJsKTtcclxuICAgICAgICAgICAgY29sc0xpc3QuYXBwZW5kKGNvbHNMaXN0SXRlbSk7XHJcblxyXG4gICAgICAgICAgICBjaGsub24oJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciAkY2hrID0gdGhpcy5qcXVlcnkoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb3AgPSAkY2hrLmF0dHIoJ2RhdGEtY29uZmlnLXByb3BuYW1lJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByb3ApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaGVhZGVyUm93ID0gdGhpcy5oZWFkLmdldEdyaWRUaXRsZXNSb3coKTtcclxuICAgICAgICAgICAgICAgIC8vIHZhciBjb2wgPSB0aGlzLmZpbmQoJ3RoW2RhdGEtdGgtcHJvcG5hbWU9JyArIHByb3AgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbCA9IGhlYWRlclJvdy5jZWxscy5maW5kKChjZWxsKSA9PiBjZWxsLmdldFByb3AoJ2RhdGEtdGgtcHJvcG5hbWUnKSA9PT0gcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBib2R5Um93cyA9IHRoaXMuYm9keS5yb3dzO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByb3dzID0gWy4uLmJvZHlSb3dzLCBoZWFkZXJSb3ddO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdmFyIHJvd3MgPSB0aGlzLmZpbmQoJy5ncmlkLWNvbHMsIC5ncmlkLXJvd3MnKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy92YXIgaW5kZXggPSBBcnJheS5mcm9tKGNvbC5wYXJlbnQoJ3RyJykuY2hpbGRyZW4oKSkuaW5kZXhPZihjb2xbMF0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaGVhZGVyUm93LmNlbGxzLmluZGV4T2YoY29sKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICByb3dzLmZvckVhY2goKHJvdykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHJvdy5jZWxsc1tpbmRleF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJGNoay5pcygnOmNoZWNrZWQnKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAkKGNlbGwpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQoY2VsbCkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycyhhcHBEYXRhRXZlbnRzLk9OX0NPTFNfUkVPUkRFUkVELCB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGF0YVNvdXJjZU5hbWU6IGRhdGFTb3VyY2VOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50RGF0YTogeyBFdmVudDogZSB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29uZkV2ZW50OiBCU0NvbmZpZ1VwZGF0ZWRFdmVudCA9IHsgRXZlbnREYXRhOiB7IEV2ZW50OiBlLCBBY3Rpb246IGFwcEFjdGlvbnMuQ09MX1NIT1dfSElERSB9LCBEYXRhU291cmNlTmFtZTogZGF0YVNvdXJjZU5hbWUgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5TGlzdGVuZXJzKGFwcERhdGFFdmVudHMuT05fR1JJRF9DT05GSUdfVVBEQVRFRCwgY29uZkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2l6YWJsZUdyaWQoKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3Jlc2l6YWJsZUdyaWQgaXMgcmVhY2hlZCcsIHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgZGF0YVNvdXJjZU5hbWUgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRhYmxlKTtcclxuICAgICAgICB2YXIgY29scyA9IHRoaXMuaGVhZC5nZXRHcmlkVGl0bGVzUm93KCkuY2VsbHM7XHJcbiAgICAgICAgdGhpcy5jc3MgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRDc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG5cclxuICAgICAgICB2YXIgdGFibGVIZWlnaHQgPSB0aGlzLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGRpdiA9IGNyZWF0ZURpdih0YWJsZUhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbHNbaV0uZWxlbWVudC5hcHBlbmQoZGl2KTtcclxuICAgICAgICAgICAgY29sc1tpXS5zZXRDc3MoJ3Bvc2l0aW9uJywgJ3JlbGF0aXZlJyk7XHJcbiAgICAgICAgICAgIHNldExpc3RlbmVycyhkaXYsIGNvbHNbaV0sIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gZGl2XHJcbiAgICAgICAgICogQHBhcmFtIHtCU0RhdGFUYWJsZX0gdGFibGVcclxuICAgICAgICAgKiBAcGFyYW0ge0JTRGF0YVRhYmxlQ2VsbH0gY29sXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0TGlzdGVuZXJzKGRpdiwgY29sLCB0YWJsZSkge1xyXG4gICAgICAgICAgICB2YXIgcGFnZVgsIC8qKiBAdHlwZSB7SFRNTFRhYmxlQ2VsbEVsZW1lbnR9ICovY3VyQ29sLCBjdXJDb2xXaWR0aCwgbnh0Q29sV2lkdGgsIHRhYmxlV2lkdGg7XHJcblxyXG4gICAgICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0YWJsZVdpZHRoID0gdGFibGUuZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBjdXJDb2wgPSBjb2wuZWxlbWVudFswXTtcclxuICAgICAgICAgICAgICAgIHBhZ2VYID0gZS5wYWdlWDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFkZGluZyA9IHBhZGRpbmdEaWZmKGN1ckNvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VyQ29sV2lkdGggPSBjdXJDb2wub2Zmc2V0V2lkdGggLSBwYWRkaW5nO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJSaWdodCA9ICcycHggc29saWQgIzAwMDBmZic7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHlsZS5ib3JkZXJSaWdodCA9ICcnO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZlggPSBlLnBhZ2VYIC0gcGFnZVg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1ckNvbC5zdHlsZS53aWR0aCA9IChjdXJDb2xXaWR0aCArIGRpZmZYKSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuZWxlbWVudFswXS5zdHlsZS53aWR0aCA9IHRhYmxlV2lkdGggKyBkaWZmWCArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1ckNvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLm5vdGlmeUxpc3RlbmVycyhhcHBEYXRhRXZlbnRzLk9OX0dSSURfQ09ORklHX1VQREFURUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VOYW1lOiBkYXRhU291cmNlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50RGF0YTogeyBlLCBjdXJDb2wgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFwcEFjdGlvbnMuQ09MX1JFU0laRURcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN1ckNvbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHBhZ2VYID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgbnh0Q29sV2lkdGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBjdXJDb2xXaWR0aCA9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZWlnaHRcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVEaXYoaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZGl2LnN0eWxlLnRvcCA9IFwiMFwiO1xyXG4gICAgICAgICAgICBkaXYuc3R5bGUucmlnaHQgPSBcIjBcIjtcclxuICAgICAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gJzVweCc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS5jdXJzb3IgPSAnY29sLXJlc2l6ZSc7XHJcbiAgICAgICAgICAgIGRpdi5zdHlsZS51c2VyU2VsZWN0ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgcmV0dXJuIGRpdjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBhZGRpbmdEaWZmKGNvbCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGdldFN0eWxlVmFsKGNvbCwgJ2JveC1zaXppbmcnKSA9PSAnYm9yZGVyLWJveCcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFkTGVmdCA9IGdldFN0eWxlVmFsKGNvbCwgJ3BhZGRpbmctbGVmdCcpO1xyXG4gICAgICAgICAgICB2YXIgcGFkUmlnaHQgPSBnZXRTdHlsZVZhbChjb2wsICdwYWRkaW5nLXJpZ2h0Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiAocGFyc2VJbnQocGFkTGVmdCkgKyBwYXJzZUludChwYWRSaWdodCkpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFN0eWxlVmFsKGVsbSwgY3NzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxtLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKGNzcykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlQ29sdW1uUmVvcmRlcmluZygpIHtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2VuYWJsZUNvbHVtblJlb3JkZXJpbmcgaXMgcmVhY2hlZCcsIHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgZGF0YVNvdXJjZU5hbWUgPSB0aGlzLm9wdGlvbnMuZGF0YVNvdXJjZS5uYW1lO1xyXG4gICAgICAgIHZhciBqcSA9IHRoaXMuanF1ZXJ5O1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgLy92YXIgZ3JpZElkID0gJHRhYmxlLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnZGF0YXNvdXJjZS1uYW1lJywgZGF0YVNvdXJjZU5hbWUpO1xyXG4gICAgICAgIHZhciBhZGRXYWl0TWFya2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyB2YXIgZHcgPSBqcSgnPGRpdj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgLy8gZHcuYWRkQ2xhc3MoJ3dhaXQtcmVvcmRlcicpLmhpZGUoKTtcclxuICAgICAgICAgICAgLy8gdmFyIGN0ID0ganEoJzxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlclwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAvLyB2YXIgZHMgPSBqcSgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcygnc3Bpbm5lci1ib3JkZXInKTtcclxuICAgICAgICAgICAgLy8gZHMuYXBwZW5kKCc8c3BhbiBjbGFzcz1cInZpc3VhbGx5LWhpZGRlblwiPldhaXQuLi48L3NwYW4+Jyk7XHJcbiAgICAgICAgICAgIC8vIGN0LmFwcGVuZChkcyk7XHJcbiAgICAgICAgICAgIC8vIGR3LmFwcGVuZChjdCk7XHJcbiAgICAgICAgICAgIC8vIF90aGlzLmFkZENsYXNzKCdjYXB0aW9uLXRvcCcpO1xyXG4gICAgICAgICAgICAvLyB2YXIgY2FwdGlvbiA9IGpxKCc8Y2FwdGlvbj48L2NhcHRpb24+JykuYXBwZW5kKGR3KTtcclxuICAgICAgICAgICAgLy8gX3RoaXMuZWxlbWVudC5hcHBlbmQoY2FwdGlvbik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHRoV3JhcCA9IGpxKCc8ZGl2IGRyYWdnYWJsZT1cInRydWVcIiBjbGFzcz1cImdyaWQtaGVhZGVyXCI+PC9kaXY+Jyk7XHJcblxyXG4gICAgICAgIHZhciBoZWFkZXJSb3cgPSBfdGhpcy5oZWFkLmdldEdyaWRUaXRsZXNSb3coKTtcclxuICAgICAgICB2YXIgY2VsbHMgPSBoZWFkZXJSb3cuY2VsbHM7XHJcblxyXG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkcyA9IGNlbGwuZWxlbWVudC5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHR4dCA9IGNlbGwuZWxlbWVudC50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICBjZWxsLmVsZW1lbnQudGV4dCgnJyk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHMgPSBqcSgnPGRpdj48L2Rpdj4nKS50ZXh0KHR4dCk7XHJcbiAgICAgICAgICAgICAgICBjZWxsLmVsZW1lbnQuYXBwZW5kKGNoaWxkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAganEoY2hpbGRzKS53cmFwKHRoV3JhcCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGFkZFdhaXRNYXJrZXIoKTtcclxuXHJcbiAgICAgICAgdmFyIHNyY0VsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8valF1ZXJ5LmV2ZW50LnByb3BzLnB1c2goJ2RhdGFUcmFuc2ZlcicpO1xyXG4gICAgICAgIF90aGlzLmZpbmQoJy5ncmlkLWhlYWRlcicpLm9uKHtcclxuICAgICAgICAgICAgZHJhZ3N0YXJ0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFqcSh0aGlzKS5oYXNDbGFzcygnZ3JpZC1oZWFkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY0VsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBzcmNFbGVtZW50ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBqcSh0aGlzKS5jc3MoJ29wYWNpdHknLCAnMC41Jyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRyYWdsZWF2ZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghc3JjRWxlbWVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghanEodGhpcykuaGFzQ2xhc3MoJ2dyaWQtaGVhZGVyJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGpxKHRoaXMpLnJlbW92ZUNsYXNzKCdvdmVyJyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRyYWdlbnRlcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghc3JjRWxlbWVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghanEodGhpcykuaGFzQ2xhc3MoJ2dyaWQtaGVhZGVyJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGpxKHRoaXMpLmFkZENsYXNzKCdvdmVyJyk7XHJcbiAgICAgICAgICAgICAgICAvLyBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRyYWdvdmVyOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzcmNFbGVtZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFqcSh0aGlzKS5oYXNDbGFzcygnZ3JpZC1oZWFkZXInKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAganEodGhpcykuYWRkQ2xhc3MoJ292ZXInKTtcclxuXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkcmFnZW5kOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzcmNFbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBqcSh0aGlzKS5jc3MoJ29wYWNpdHknLCAnMScpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkcm9wOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzcmNFbGVtZW50KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSBqcSh0aGlzKTtcclxuICAgICAgICAgICAgICAgICR0aGlzLnJlbW92ZUNsYXNzKCdvdmVyJyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVzdEVsZW1lbnQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGlmICghJHRoaXMuaGFzQ2xhc3MoJ2dyaWQtaGVhZGVyJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmIChzcmNFbGVtZW50ID09PSBkZXN0RWxlbWVudCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vdmFyIGNvbHMgPSBfdGhpcy5oZWFkLnJvd3NbMF0uY2VsbHM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZGVzdFxyXG4gICAgICAgICAgICAgICAgdmFyIGRlc3RQYXJlbnQgPSAkdGhpcy5wYXJlbnRzKCd0aCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkZXN0UGFyZW50IHx8IGRlc3RQYXJlbnQubGVuZ3RoIDw9IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBsb29rdXAgaW4gY2VsbHNcclxuICAgICAgICAgICAgICAgIHZhciBkZXNQYXJlbnRDZWxsID0gY2VsbHMuZmluZCgoZWwpID0+IGVsLmVsZW1lbnRbMF0gPT09IGRlc3RQYXJlbnRbMF0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkZXNQYXJlbnRDZWxsKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRvSW5kZXggPSBjZWxscy5pbmRleE9mKGRlc1BhcmVudENlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNyY1xyXG4gICAgICAgICAgICAgICAgdmFyIHNyY1BhcmVudCA9IGpxKHNyY0VsZW1lbnQpLnBhcmVudHMoJ3RoJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNyY1BhcmVudCB8fCBzcmNQYXJlbnQubGVuZ3RoIDw9IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBsb29rdXAgaW4gY2VsbHNcclxuICAgICAgICAgICAgICAgIHZhciBzcmNQYXJlbnRDZWxsID0gY2VsbHMuZmluZCgoZWwpID0+IGVsLmVsZW1lbnRbMF0gPT09IHNyY1BhcmVudFswXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlc1BhcmVudENlbGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvbUluZGV4ID0gY2VsbHMuaW5kZXhPZihzcmNQYXJlbnRDZWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRvSW5kZXgsIGZyb21JbmRleCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRvSW5kZXggPT0gZnJvbUluZGV4KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIGFwcGx5IG5ldyBvcmRlciB0byB0aGUgaGVhZGVyc1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIHJlT3JkZXIoaGVhZGVyUm93LCBjZWxscywgZnJvbUluZGV4LCB0b0luZGV4KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IF90aGlzLmJvZHkucm93cztcclxuICAgICAgICAgICAgICAgIC8vIGpxKCcud2FpdC1yZW9yZGVyJykuY3NzKHsgJ2N1cnNvcic6ICdwcm9ncmVzcycgfSkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBhcHBseSBuZXcgb3JkZXIgdG8gYWxsIHRoZSByb3dzIGluIHRoZSBncmlkXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUmVvcmRlcmluZyBzdGFydGVkLCAnLCBuZXcgRGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcm93cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSByb3dzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxzID0gcm93LmNlbGxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b0luZGV4ID09IGZyb21JbmRleCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZU9yZGVyKHJvdywgY2VsbHMsIGZyb21JbmRleCwgdG9JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdSZW9yZGVyaW5nIGNvbXBsZXRlZCwgJywgbmV3IERhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RpZnkgYWJvdXQgY29sdW1uIHJlLW9yZGVyaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlMaXN0ZW5lcnMoYXBwRGF0YUV2ZW50cy5PTl9DT0xTX1JFT1JERVJFRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBEYXRhU291cmNlTmFtZTogZGF0YVNvdXJjZU5hbWUsIEV2ZW50RGF0YTogeyBFdmVudDogZSB9IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uZkV2ZW50OiBCU0NvbmZpZ1VwZGF0ZWRFdmVudCA9IHsgRXZlbnREYXRhOiB7IEV2ZW50OiBlLCBBY3Rpb246IGFwcEFjdGlvbnMuQ09MX1JFT1JERVIgfSwgRGF0YVNvdXJjZU5hbWU6IGRhdGFTb3VyY2VOYW1lIH07XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZ5TGlzdGVuZXJzKGFwcERhdGFFdmVudHMuT05fR1JJRF9DT05GSUdfVVBEQVRFRCwgY29uZkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ganEoJy53YWl0LXJlb3JkZXInKS5jc3MoeyAnY3Vyc29yJzogJycgfSkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIHJlT3JkZXIgPSBmdW5jdGlvbiAoLyoqIEB0eXBlIHtCU0RhdGFUYWJsZVJvd30gKi8gcm93LCAvKiogQHR5cGUge0JTRGF0YVRhYmxlQ2VsbFtdfSAqLyBjZWxscywgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGZyb21JbmRleCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHRvSW5kZXgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICBpZiAoZnJvbUluZGV4ID09IHRvSW5kZXgpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBkaXIgPSBkaXJlY3Rpb25zLmx0cjtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcm9tSW5kZXggPiB0b0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBkaXIgPSBkaXJlY3Rpb25zLnJ0bDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRpciA9PT0gZGlyZWN0aW9ucy5ydGwpIHtcclxuICAgICAgICAgICAgICAgIHN3YXBSdGwoY2VsbHMsIGZyb21JbmRleCwgdG9JbmRleClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN3YXBMdHIoY2VsbHMsIGZyb21JbmRleCwgdG9JbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICByb3cuY2VsbHMgPSBbXTtcclxuICAgICAgICAgICAgcm93LmFkZENlbGxzKGNlbGxzKTtcclxuXHJcbiAgICAgICAgICAgIC8vanEocm93KS5hcHBlbmQoY2VsbHMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzd2FwUnRsID0gZnVuY3Rpb24gKC8qKiBAdHlwZSB7QlNEYXRhVGFibGVDZWxsW119ICovIGNlbGxzLCAvKiogQHR5cGUge251bWJlcn0gKi8gZnJvbUluZGV4LCAvKiogQHR5cGUge251bWJlcn0gKi8gdG9JbmRleCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gZnJvbUluZGV4OyBpID4gdG9JbmRleDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBzd2FwKGNlbGxzLCBpLCBpIC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc3dhcEx0ciA9IGZ1bmN0aW9uICgvKiogQHR5cGUge0JTRGF0YVRhYmxlQ2VsbFtdfSAqLyBjZWxscywgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGZyb21JbmRleCwgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHRvSW5kZXgpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGZyb21JbmRleDsgaSA8IHRvSW5kZXg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3dhcChjZWxscywgaSwgaSArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHN3YXAgPSBmdW5jdGlvbiAoLyoqIEB0eXBlIHtCU0RhdGFUYWJsZUNlbGxbXX0gKi8gYXJyLCAvKiogQHR5cGUge251bWJlcn0gKi8gaWEsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpYikge1xyXG4gICAgICAgICAgICB2YXIgdGVtcCA9IGFycltpYV07XHJcbiAgICAgICAgICAgIGFycltpYV0gPSBhcnJbaWJdO1xyXG4gICAgICAgICAgICBhcnJbaWJdID0gdGVtcDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgZGlyZWN0aW9ucyA9IHsgcnRsOiAnUklHSFQtVE8tTEVGVCcsIGx0cjogJ0xFRlQtVE8tUklHSFQnIH07XHJcbiAgICB9XHJcblxyXG4gICAgb25HcmlkQ29uZmlndXJhdGlvbkNoYW5nZWQoZXZlbnRBcmdzOiBCU0NvbmZpZ1VwZGF0ZWRFdmVudCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdncmlkIGNvbmZpZ3VyYXRpb24gdXBkYXRlZCcsIGV2ZW50QXJncyk7XHJcblxyXG4gICAgICAgIC8vIGRlYnVnZ2VyO1xyXG5cclxuICAgICAgICB2YXIgYWN0aW9uID0gZXZlbnRBcmdzLkV2ZW50RGF0YS5BY3Rpb247XHJcbiAgICAgICAgdmFyIGdyaWRJZCA9IHRoaXMub3B0aW9ucy5ncmlkSWQ7XHJcblxyXG4gICAgICAgIHZhciBjb2xzID0gdGhpcy5oZWFkLmdldEdyaWRUaXRsZXNSb3coKS5jZWxscztcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhjb2xzKTtcclxuICAgICAgICB2YXIgY29sc09iaiA9IHt9O1xyXG4gICAgICAgIGNvbHMuZm9yRWFjaCgoY29sLCBpbmRleCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNvcnQgPSAnYXNjJztcclxuICAgICAgICAgICAgaWYgKGNvbC5oYXNDbGFzcygnc29ydGluZ19kZXNjJykpXHJcbiAgICAgICAgICAgICAgICBzb3J0ID0gJ2Rlc2MnO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3AgPSBjb2wuZ2V0UHJvcCgnZGF0YS10aC1wcm9wbmFtZScpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvbEF0dHIgPSBuZXcgQlNEYXRhVGFibGVDb2xTZXR0aW5ncyhjb2wuZ2V0Q3NzKCd3aWR0aCcpLCBjb2wudmlzaWJsZSwgc29ydCwgaW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgY29sc09ialtwcm9wXSA9IGNvbEF0dHI7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgQ29va2llSGVscGVyLmRlbGV0ZShncmlkSWQpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ29sc29iamVjdDogJywgY29sc09iaik7XHJcbiAgICAgICAgICAgIENvb2tpZUhlbHBlci5zZXRKU09OKGdyaWRJZCwgY29sc09iaiwgeyBkYXlzOiAzMCwgc2VjdXJlOiB0cnVlLCBTYW1lU2l0ZTogJ3N0cmljdCcgfSk7XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkdyaWREYXRhQm91bmQoZXZlbnRBcmdzOiBCU0V2ZW50KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnRBcmdzKTtcclxuXHJcbiAgICAgICAgLy8gdmFyIGdyaWQgPSBldmVudEFyZ3Muc291cmNlO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gZW5hYmxlcyB0aGUgY29uZmlndXJhdGlvbiBvZiBjb2x1bW5zXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmNvbmZpZ3VyYWJsZUdyaWQoKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBlbmFibGVzIHRvIHJlLW9yZGVyIHRoZSBjb2x1bW5zXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0aGlzLmVuYWJsZUNvbHVtblJlb3JkZXJpbmcoKTtcclxuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBtYWtlIHRoZSBncmlkIHJlc2l4ZWFibGVcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMucmVzaXphYmxlR3JpZCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJTSW5wdXRPcHRpb25zIH0gZnJvbSBcIi4uL2NvbW1vblR5cGVzL2NvbW1vbi10eXBlc1wiO1xyXG5pbXBvcnQgeyBCU0RhdGFUYWJsZUlucHV0IH0gZnJvbSBcIi4vQlNEYXRhVGFibGVJbnB1dFwiO1xyXG5cclxuY2xhc3MgQlNEYXRhVGFibGVUZXh0SW5wdXRFeHQgZXh0ZW5kcyBCU0RhdGFUYWJsZUlucHV0IHtcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogQlNJbnB1dE9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuanF1ZXJ5KGAjJHt0aGlzLm9wdGlvbnMuRWxlbWVudElkfWApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJTRGF0YVRhYmxlVGV4dElucHV0RXh0IH1cclxuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJnbG9iYWwiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXRlbSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwiaSIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsInZhbHVlIiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlIiwiZWxzIiwic2VlZCIsIm0iLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3QiLCJ0ZXN0Q29udGV4dCIsInNjb3BlIiwidG9TZWxlY3RvciIsImpvaW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJrZXlzIiwiY2FjaGUiLCJrZXkiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiaGFzIiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImVtcHR5IiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJwb3NpdGlvbiIsInNjcm9sbGJveFNpemVWYWwiLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsIm9mZnNldEhlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJiaW5kIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwidG9DYW1hbENhc2UiLCJ3b3JkIiwidG9QYXNjYWxDYXNlIiwidG9QYXNjYWxDYXNlSnNvbiIsImZvcm1hdCIsIm51bWJlciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJyIiwidG9TdHJpbmdUYWciLCJib3R0b20iLCJhdXRvIiwiYmFzZVBsYWNlbWVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJ2aWV3cG9ydCIsInBvcHBlciIsInJlZmVyZW5jZSIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJiZWZvcmVSZWFkIiwicmVhZCIsImFmdGVyUmVhZCIsImJlZm9yZU1haW4iLCJtYWluIiwiYWZ0ZXJNYWluIiwiYmVmb3JlV3JpdGUiLCJ3cml0ZSIsImFmdGVyV3JpdGUiLCJtb2RpZmllclBoYXNlcyIsImdldE5vZGVOYW1lIiwiZWxlbWVudCIsImdldFdpbmRvdyIsImlzRWxlbWVudCIsIkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwiZW5hYmxlZCIsInBoYXNlIiwiX3JlZiIsImZvckVhY2giLCJhc3NpZ24iLCJlZmZlY3QiLCJfcmVmMiIsImluaXRpYWxTdHlsZXMiLCJzdHJhdGVneSIsImFycm93IiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJyZXF1aXJlcyIsImdldEJhc2VQbGFjZW1lbnQiLCJtaW4iLCJpbmNsdWRlU2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJ4IiwieSIsImdldExheW91dFJlY3QiLCJjbGllbnRSZWN0IiwiYWJzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsImNoaWxkIiwicm9vdE5vZGUiLCJpc1NhbWVOb2RlIiwiaXNUYWJsZUVsZW1lbnQiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJnZXRQYXJlbnROb2RlIiwiYXNzaWduZWRTbG90IiwiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsImdldE9mZnNldFBhcmVudCIsImlzRmlyZWZveCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImN1cnJlbnROb2RlIiwidHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJjb250YWluIiwid2lsbENoYW5nZSIsImdldENvbnRhaW5pbmdCbG9jayIsImdldE1haW5BeGlzRnJvbVBsYWNlbWVudCIsIndpdGhpbiIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwiYXJyb3dFbGVtZW50IiwicG9wcGVyT2Zmc2V0cyIsIm1vZGlmaWVyc0RhdGEiLCJiYXNlUGxhY2VtZW50IiwiYXhpcyIsInJlY3RzIiwidG9QYWRkaW5nT2JqZWN0IiwiYXJyb3dSZWN0IiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJjbGllbnRTaXplIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjZW50ZXJUb1JlZmVyZW5jZSIsImNlbnRlciIsImF4aXNQcm9wIiwiY2VudGVyT2Zmc2V0IiwiX29wdGlvbnMkZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZXF1aXJlc0lmRXhpc3RzIiwiZ2V0VmFyaWF0aW9uIiwidW5zZXRTaWRlcyIsIm1hcFRvU3R5bGVzIiwiX09iamVjdCRhc3NpZ24yIiwicG9wcGVyUmVjdCIsInZhcmlhdGlvbiIsIm9mZnNldHMiLCJncHVBY2NlbGVyYXRpb24iLCJhZGFwdGl2ZSIsInJvdW5kT2Zmc2V0cyIsImlzRml4ZWQiLCJfb2Zmc2V0cyR4IiwiX29mZnNldHMkeSIsIl9yZWYzIiwiaGFzWCIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiaGVpZ2h0UHJvcCIsIndpZHRoUHJvcCIsInZpc3VhbFZpZXdwb3J0IiwiX09iamVjdCRhc3NpZ24iLCJjb21tb25TdHlsZXMiLCJfcmVmNCIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJyb3VuZE9mZnNldHNCeURQUiIsIl9yZWY1IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJwYXNzaXZlIiwiaW5zdGFuY2UiLCJfb3B0aW9ucyRzY3JvbGwiLCJzY3JvbGwiLCJfb3B0aW9ucyRyZXNpemUiLCJyZXNpemUiLCJzY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50IiwidXBkYXRlIiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsImdldFdpbmRvd1Njcm9sbCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwiZ2V0U2Nyb2xsUGFyZW50IiwibGlzdFNjcm9sbFBhcmVudHMiLCJfZWxlbWVudCRvd25lckRvY3VtZW4iLCJpc0JvZHkiLCJ1cGRhdGVkTGlzdCIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Vmlld3BvcnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0Iiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJkaXJlY3Rpb24iLCJnZXREb2N1bWVudFJlY3QiLCJjb21wdXRlT2Zmc2V0cyIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkYm91bmRhcnkiLCJib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJnZXRDbGlwcGluZ1JlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwiTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwiaXNWZXJ0aWNhbCIsIm1haW5WYXJpYXRpb25TaWRlIiwiYWx0VmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImV2ZXJ5IiwiX2xvb3AiLCJmaXR0aW5nUGxhY2VtZW50IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJwcmV2ZW50T3ZlcmZsb3ciLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsIl9vcHRpb25zJG9mZnNldCIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsImRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZIiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUiLCJvZmZzZXRNb2RpZmllclN0YXRlIiwiX29mZnNldE1vZGlmaWVyU3RhdGUkIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX2xlbiIsIl9taW4iLCJfbWF4IiwiaXNPcmlnaW5TaWRlIiwiX29mZnNldE1vZGlmaWVyVmFsdWUiLCJfdGV0aGVyTWluIiwiX3RldGhlck1heCIsIl9wcmV2ZW50ZWRPZmZzZXQiLCJ3aXRoaW5NYXhDbGFtcCIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UGFyZW50SXNTY2FsZWQiLCJpc0VsZW1lbnRTY2FsZWQiLCJvcmRlciIsIm1vZGlmaWVycyIsInZpc2l0ZWQiLCJTZXQiLCJtb2RpZmllciIsImRlcCIsImRlcE1vZGlmaWVyIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJwZW5kaW5nIiwib3JkZXJlZE1vZGlmaWVycyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsInNldE9wdGlvbnMiLCJzZXRPcHRpb25zQWN0aW9uIiwiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsIm1lcmdlZCIsIm9yZGVyTW9kaWZpZXJzIiwiZXhpc3RpbmciLCJfcmVmMyRvcHRpb25zIiwiY2xlYW51cEZuIiwiZm9yY2VVcGRhdGUiLCJfc3RhdGUkZWxlbWVudHMiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUiLCJfc3RhdGUkb3JkZXJlZE1vZGlmaWUyIiwiUHJvbWlzZSIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiY3JlYXRlUG9wcGVyIiwiZXZlbnRMaXN0ZW5lcnMiLCJUUkFOU0lUSU9OX0VORCIsImdldFNlbGVjdG9yIiwiaHJlZkF0dHIiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiZ2V0RWxlbWVudEZyb21TZWxlY3RvciIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiZGlzcGF0Y2hFdmVudCIsImdldEVsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiaXNWaXNpYmxlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImNsYXNzTGlzdCIsImhhc0F0dHJpYnV0ZSIsImZpbmRTaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwicmVmbG93IiwiZ2V0alF1ZXJ5IiwiRE9NQ29udGVudExvYWRlZENhbGxiYWNrcyIsImlzUlRMIiwiZGVmaW5lSlF1ZXJ5UGx1Z2luIiwicGx1Z2luIiwiTkFNRSIsIkpRVUVSWV9OT19DT05GTElDVCIsImpRdWVyeUludGVyZmFjZSIsIkNvbnN0cnVjdG9yIiwiZXhlY3V0ZSIsImV4ZWN1dGVBZnRlclRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRWxlbWVudCIsIndhaXRGb3JUcmFuc2l0aW9uIiwiZW11bGF0ZWREdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwiTnVtYmVyIiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsImNhbGxlZCIsImdldE5leHRBY3RpdmVFbGVtZW50Iiwic2hvdWxkR2V0TmV4dCIsImlzQ3ljbGVBbGxvd2VkIiwibGlzdExlbmd0aCIsIm5hbWVzcGFjZVJlZ2V4Iiwic3RyaXBOYW1lUmVnZXgiLCJzdHJpcFVpZFJlZ2V4IiwiZXZlbnRSZWdpc3RyeSIsInVpZEV2ZW50IiwiY3VzdG9tRXZlbnRzIiwiY3VzdG9tRXZlbnRzUmVnZXgiLCJuYXRpdmVFdmVudHMiLCJnZXRVaWRFdmVudCIsImdldEV2ZW50IiwiZmluZEhhbmRsZXIiLCJkZWxlZ2F0aW9uU2VsZWN0b3IiLCJ1aWRFdmVudExpc3QiLCJvcmlnaW5hbEhhbmRsZXIiLCJub3JtYWxpemVQYXJhbXMiLCJvcmlnaW5hbFR5cGVFdmVudCIsImRlbGVnYXRpb25GbiIsImRlbGVnYXRpb24iLCJ0eXBlRXZlbnQiLCJnZXRUeXBlRXZlbnQiLCJhZGRIYW5kbGVyIiwib25lT2ZmIiwid3JhcEZuIiwicHJldmlvdXNGbiIsImRvbUVsZW1lbnRzIiwiRXZlbnRIYW5kbGVyIiwiYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIiLCJib290c3RyYXBIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsIkJvb2xlYW4iLCJpbk5hbWVzcGFjZSIsImlzTmFtZXNwYWNlIiwiZWxlbWVudEV2ZW50Iiwic3RvcmVFbGVtZW50RXZlbnQiLCJoYW5kbGVyS2V5IiwicmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzIiwia2V5SGFuZGxlcnMiLCJpc05hdGl2ZSIsImpRdWVyeUV2ZW50IiwibmF0aXZlRGlzcGF0Y2giLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIkN1c3RvbUV2ZW50IiwiZWxlbWVudE1hcCIsImluc3RhbmNlTWFwIiwic2l6ZSIsImZyb20iLCJkZWxldGUiLCJCYXNlQ29tcG9uZW50IiwiX2VsZW1lbnQiLCJEQVRBX0tFWSIsImRpc3Bvc2UiLCJFVkVOVF9LRVkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lIiwiX3F1ZXVlQ2FsbGJhY2siLCJpc0FuaW1hdGVkIiwic3RhdGljIiwiZ2V0SW5zdGFuY2UiLCJWRVJTSU9OIiwiZW5hYmxlRGlzbWlzc1RyaWdnZXIiLCJjb21wb25lbnQiLCJjbGlja0V2ZW50IiwidGFnTmFtZSIsImdldE9yQ3JlYXRlSW5zdGFuY2UiLCJBbGVydCIsImNsb3NlIiwiX2Rlc3Ryb3lFbGVtZW50IiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkNSIsIkJ1dHRvbiIsIm5vcm1hbGl6ZURhdGEiLCJub3JtYWxpemVEYXRhS2V5IiwiY2hyIiwiTWFuaXB1bGF0b3IiLCJzZXREYXRhQXR0cmlidXRlIiwicmVtb3ZlRGF0YUF0dHJpYnV0ZSIsImdldERhdGFBdHRyaWJ1dGVzIiwiZGF0YXNldCIsInB1cmVLZXkiLCJjaGFyQXQiLCJnZXREYXRhQXR0cmlidXRlIiwiU2VsZWN0b3JFbmdpbmUiLCJmaW5kT25lIiwiYW5jZXN0b3IiLCJwcmV2aW91cyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJmb2N1c2FibGVDaGlsZHJlbiIsImZvY3VzYWJsZXMiLCJOQU1FJGIiLCJEZWZhdWx0JGEiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ0b3VjaCIsIkRlZmF1bHRUeXBlJGEiLCJPUkRFUl9ORVhUIiwiT1JERVJfUFJFViIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiS0VZX1RPX0RJUkVDVElPTiIsIkVWRU5UX1NMSUQiLCJDTEFTU19OQU1FX0FDVElWRSQyIiwiU0VMRUNUT1JfQUNUSVZFX0lURU0iLCJDYXJvdXNlbCIsInN1cGVyIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiRGVmYXVsdCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsIl91cGRhdGVJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsImhhc1BvaW50ZXJQZW5Ub3VjaCIsIm1vdmUiLCJpdGVtSW1nIiwiX2dldEl0ZW1CeU9yZGVyIiwiaXNOZXh0IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImFjdGl2ZUluZGljYXRvciIsImluZGljYXRvcnMiLCJlbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJkaXJlY3Rpb25Pck9yZGVyIiwiX2RpcmVjdGlvblRvT3JkZXIiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiX29yZGVyVG9EaXJlY3Rpb24iLCJ0cmlnZ2VyU2xpZEV2ZW50IiwiY29tcGxldGVDYWxsQmFjayIsImFjdGlvbiIsInJpZGUiLCJjYXJvdXNlbEludGVyZmFjZSIsInNsaWRlSW5kZXgiLCJkYXRhQXBpQ2xpY2tIYW5kbGVyIiwiY2Fyb3VzZWxzIiwiTkFNRSRhIiwiRGVmYXVsdCQ5IiwiRGVmYXVsdFR5cGUkOSIsIkNMQVNTX05BTUVfU0hPVyQ3IiwiQ0xBU1NfTkFNRV9DT0xMQVBTRSIsIkNMQVNTX05BTUVfQ09MTEFQU0lORyIsIkNMQVNTX05BTUVfQ09MTEFQU0VEIiwiQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4iLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0IiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtIiwiX3NlbGVjdG9yIiwiX2luaXRpYWxpemVDaGlsZHJlbiIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJfaXNTaG93biIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInRlbXBBY3RpdmVEYXRhIiwiZWxlbUFjdGl2ZSIsIl9nZXREaW1lbnNpb24iLCJzY3JvbGxTaXplIiwidHJpZ2dlckFycmF5TGVuZ3RoIiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiTkFNRSQ5IiwiRVNDQVBFX0tFWSQyIiwiU1BBQ0VfS0VZIiwiQVJST1dfVVBfS0VZIiwiQVJST1dfRE9XTl9LRVkiLCJSRUdFWFBfS0VZRE9XTiIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDMiLCJFVkVOVF9LRVlET1dOX0RBVEFfQVBJIiwiQ0xBU1NfTkFNRV9TSE9XJDYiLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzIiwiU0VMRUNUT1JfTUVOVSIsIlBMQUNFTUVOVF9UT1AiLCJQTEFDRU1FTlRfVE9QRU5EIiwiUExBQ0VNRU5UX0JPVFRPTSIsIlBMQUNFTUVOVF9CT1RUT01FTkQiLCJQTEFDRU1FTlRfUklHSFQiLCJQTEFDRU1FTlRfTEVGVCIsIkRlZmF1bHQkOCIsInBvcHBlckNvbmZpZyIsImF1dG9DbG9zZSIsIkRlZmF1bHRUeXBlJDgiLCJEcm9wZG93biIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJEZWZhdWx0VHlwZSIsImdldFBhcmVudEZyb21FbGVtZW50IiwiX2NyZWF0ZVBvcHBlciIsIl9jb21wbGV0ZUhpZGUiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImlzRGlzcGxheVN0YXRpYyIsIl9nZXRQbGFjZW1lbnQiLCJwYXJlbnREcm9wZG93biIsImlzRW5kIiwiX2dldE9mZnNldCIsInBvcHBlckRhdGEiLCJkZWZhdWx0QnNQb3BwZXJDb25maWciLCJfc2VsZWN0TWVudUl0ZW0iLCJpdGVtcyIsInRvZ2dsZXMiLCJjb21wb3NlZFBhdGgiLCJpc01lbnVUYXJnZXQiLCJpc0FjdGl2ZSIsImdldFRvZ2dsZUJ1dHRvbiIsImNsZWFyTWVudXMiLCJkYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJTRUxFQ1RPUl9GSVhFRF9DT05URU5UIiwiU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQiLCJTY3JvbGxCYXJIZWxwZXIiLCJnZXRXaWR0aCIsImRvY3VtZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiX2Rpc2FibGVPdmVyRmxvdyIsIl9zZXRFbGVtZW50QXR0cmlidXRlcyIsImNhbGN1bGF0ZWRWYWx1ZSIsIl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSIsInN0eWxlUHJvcCIsInNjcm9sbGJhcldpZHRoIiwiX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2siLCJfcmVzZXRFbGVtZW50QXR0cmlidXRlcyIsImFjdHVhbFZhbHVlIiwicmVtb3ZlUHJvcGVydHkiLCJjYWxsQmFjayIsImlzT3ZlcmZsb3dpbmciLCJEZWZhdWx0JDciLCJyb290RWxlbWVudCIsImNsaWNrQ2FsbGJhY2siLCJEZWZhdWx0VHlwZSQ3IiwiQ0xBU1NfTkFNRV9TSE9XJDUiLCJFVkVOVF9NT1VTRURPV04iLCJCYWNrZHJvcCIsIl9pc0FwcGVuZGVkIiwiX2FwcGVuZCIsIl9nZXRFbGVtZW50IiwiX2VtdWxhdGVBbmltYXRpb24iLCJiYWNrZHJvcCIsIkRlZmF1bHQkNiIsInRyYXBFbGVtZW50IiwiYXV0b2ZvY3VzIiwiRGVmYXVsdFR5cGUkNiIsIkVWRU5UX0tFWSQ3IiwiVEFCX05BVl9CQUNLV0FSRCIsIkZvY3VzVHJhcCIsIl9pc0FjdGl2ZSIsIl9sYXN0VGFiTmF2RGlyZWN0aW9uIiwiYWN0aXZhdGUiLCJfaGFuZGxlRm9jdXNpbiIsIl9oYW5kbGVLZXlkb3duIiwiZGVhY3RpdmF0ZSIsIk5BTUUkNiIsIkVTQ0FQRV9LRVkkMSIsIkRlZmF1bHQkNSIsIkRlZmF1bHRUeXBlJDUiLCJFVkVOVF9ISURERU4kMyIsIkVWRU5UX1NIT1ckMyIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX0NMSUNLX0RJU01JU1MiLCJFVkVOVF9LRVlET1dOX0RJU01JU1MkMSIsIkVWRU5UX01PVVNFRE9XTl9ESVNNSVNTIiwiQ0xBU1NfTkFNRV9PUEVOIiwiQ0xBU1NfTkFNRV9TSE9XJDQiLCJDTEFTU19OQU1FX1NUQVRJQyIsIk1vZGFsIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZm9jdXN0cmFwIiwiX2luaXRpYWxpemVGb2N1c1RyYXAiLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9zY3JvbGxCYXIiLCJfaXNBbmltYXRlZCIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsImh0bWxFbGVtZW50IiwiaGFuZGxlVXBkYXRlIiwibW9kYWxCb2R5IiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJfcmVzZXRBZGp1c3RtZW50cyIsImlzTW9kYWxPdmVyZmxvd2luZyIsImlzQm9keU92ZXJmbG93aW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJzaG93RXZlbnQiLCJhbGxSZWFkeU9wZW4iLCJOQU1FJDUiLCJEZWZhdWx0JDQiLCJEZWZhdWx0VHlwZSQ0IiwiQ0xBU1NfTkFNRV9TSE9XJDMiLCJPUEVOX1NFTEVDVE9SIiwiRVZFTlRfSElEREVOJDIiLCJPZmZjYW52YXMiLCJ1cmlBdHRyaWJ1dGVzIiwiU0FGRV9VUkxfUEFUVEVSTiIsIkRBVEFfVVJMX1BBVFRFUk4iLCJhbGxvd2VkQXR0cmlidXRlIiwiYWxsb3dlZEF0dHJpYnV0ZUxpc3QiLCJhdHRyaWJ1dGVOYW1lIiwicmVnRXhwIiwiYXR0cmlidXRlUmVnZXgiLCJzYW5pdGl6ZUh0bWwiLCJ1bnNhZmVIdG1sIiwiYWxsb3dMaXN0Iiwic2FuaXRpemVGbiIsImNyZWF0ZWREb2N1bWVudCIsImVsZW1lbnROYW1lIiwiYXR0cmlidXRlTGlzdCIsImFsbG93ZWRBdHRyaWJ1dGVzIiwiTkFNRSQ0IiwiRElTQUxMT1dFRF9BVFRSSUJVVEVTIiwiRGVmYXVsdFR5cGUkMyIsInRlbXBsYXRlIiwidGl0bGUiLCJjdXN0b21DbGFzcyIsInNhbml0aXplIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJEZWZhdWx0JDMiLCJhcmVhIiwiYnIiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaW1nIiwibGkiLCJvbCIsInByZSIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsIkV2ZW50JDIiLCJISURFIiwiSElEREVOIiwiU0hPVyIsIlNIT1dOIiwiSU5TRVJURUQiLCJDTElDSyIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiQ0xBU1NfTkFNRV9GQURFJDIiLCJDTEFTU19OQU1FX1NIT1ckMiIsIkhPVkVSX1NUQVRFX1NIT1ciLCJIT1ZFUl9TVEFURV9PVVQiLCJTRUxFQ1RPUl9UT09MVElQX0lOTkVSIiwiU0VMRUNUT1JfTU9EQUwiLCJFVkVOVF9NT0RBTF9ISURFIiwiVFJJR0dFUl9IT1ZFUiIsIlRSSUdHRVJfRk9DVVMiLCJUb29sdGlwIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIl9oaWRlTW9kYWxIYW5kbGVyIiwiX2Rpc3Bvc2VQb3BwZXIiLCJpc1dpdGhDb250ZW50Iiwic2hhZG93Um9vdCIsImlzSW5UaGVEb20iLCJnZXRUaXRsZSIsInRpcElkIiwiZmxvb3IiLCJnZXRVSUQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJfYWRkQXR0YWNobWVudENsYXNzIiwiX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsInNldENvbnRlbnQiLCJfc2FuaXRpemVBbmRTZXRDb250ZW50IiwidGVtcGxhdGVFbGVtZW50Iiwic2V0RWxlbWVudENvbnRlbnQiLCJ1cGRhdGVBdHRhY2htZW50IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIl9nZXRCYXNpY0NsYXNzUHJlZml4IiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwib3JpZ2luYWxUaXRsZVR5cGUiLCJkYXRhQXR0cmlidXRlcyIsImJhc2ljQ2xhc3NQcmVmaXhSZWdleCIsInRhYkNsYXNzIiwidENsYXNzIiwiRGVmYXVsdCQyIiwiRGVmYXVsdFR5cGUkMiIsIkV2ZW50JDEiLCJQb3BvdmVyIiwiX2dldENvbnRlbnQiLCJOQU1FJDIiLCJEZWZhdWx0JDEiLCJEZWZhdWx0VHlwZSQxIiwiQ0xBU1NfTkFNRV9BQ1RJVkUkMSIsIlNFTEVDVE9SX0xJTktfSVRFTVMiLCJNRVRIT0RfUE9TSVRJT04iLCJTY3JvbGxTcHkiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCJsaW5rIiwibGlzdEdyb3VwIiwibmF2SXRlbSIsInNweSIsIkNMQVNTX05BTUVfQUNUSVZFIiwiQ0xBU1NfTkFNRV9GQURFJDEiLCJDTEFTU19OQU1FX1NIT1ckMSIsIlNFTEVDVE9SX0FDVElWRSIsIlNFTEVDVE9SX0FDVElWRV9VTCIsIlRhYiIsImxpc3RFbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwiaGlkZUV2ZW50IiwiaXNUcmFuc2l0aW9uaW5nIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJkcm9wZG93biIsIkNMQVNTX05BTUVfSElERSIsIkNMQVNTX05BTUVfU0hPVyIsIkNMQVNTX05BTUVfU0hPV0lORyIsImF1dG9oaWRlIiwiVG9hc3QiLCJfaGFzTW91c2VJbnRlcmFjdGlvbiIsIl9oYXNLZXlib2FyZEludGVyYWN0aW9uIiwiX2NsZWFyVGltZW91dCIsIl9tYXliZVNjaGVkdWxlSGlkZSIsIl9vbkludGVyYWN0aW9uIiwiaXNJbnRlcmFjdGluZyIsIkNvb2tpZUhlbHBlciIsImMiLCJjb29raWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJkYXlzIiwiZW50cmllcyIsImFjY3VtdWxhdGVkU3RyIiwiayIsInNldEpTT04iLCJzdHJpbmdpZnkiLCJDT0xfU09SVElORyIsIkNPTF9SRVNJWkVEIiwiQ09MX1NIT1dfSElERSIsIkNPTF9SRU9SREVSIiwiR1JJRF9EQVRBIiwiT05fTkVYVF9SRUNPUkQiLCJPTl9QUkVWX1JFQ09SRCIsIk9OX1NBVkVfUkVDT1JEIiwiT05fREVMRVRFX1JFQ09SRCIsIk9OX0xBU1RfUkVDT1JEIiwiT05fRklSU1RfUkVDT1JEIiwiT05fQUREX1JFQ09SRCIsIk9OX0ZFVENIX1JFQ09SRCIsIk9OX0ZFVENIX1JFQ09SRF9FUlJPUiIsIk9OX0ZFVENIX0dSSURfUkVDT1JEIiwiT05fRkVUQ0hfR1JJRF9SRUNPUkRfRVJST1IiLCJPTl9OQVZJR0FUSU5HX1JFQ09SRCIsIk9OX0dSSURfVVBEQVRFRCIsIk9OX1NBVkVfRVJST1IiLCJPTl9TT1JUSU5HX1JFUVVFU1RFRCIsIk9OX0NPTFNfUkVPUkRFUkVEIiwiT05fR1JJRF9EQVRBX0JPVU5EIiwiT05fR1JJRF9DT05GSUdfVVBEQVRFRCIsIk9OX1BBR0VfUkVBRFkiLCJPTl9ST1dfVVBEQVRFRCIsIk9OX0ZJRUxEX1VQREFURUQiLCJPTl9ST1dfRE9VQkxFX0NMSUNLRUQiLCJkYXRhRXZlbnRzU2VydmljZSIsImNhbGxiYWNrcyIsInJlZ2lzdGVyV2luUG9wU3RhdGUiLCJvbnBvcHN0YXRlIiwiZXZlbnREYXRhIiwibG9nIiwiZXYiLCJFdmVudERhdGEiLCJTa2lwUHVzaCIsIkRhdGFTb3VyY2VOYW1lIiwiRW1pdCIsImFwcERhdGFFdmVudHMiLCJldmVudE5hbWUiLCJldmVudEFyZ3MiLCJjYiIsIkV2ZW50TmFtZSIsIlZlcmlmeURhdGFTb3VyY2VOYW1lIiwiQ2FsbGJhY2siLCJVbnN1YnNjcmliZSIsIm1vZGVsIiwiZmlsdGVyZWQiLCJLZXkiLCJTdWJzY3JpYmUiLCJhZGRJdGVtIiwiZXhwaXJ5IiwiZ2V0VGltZSIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsImFwcGVuZEl0ZW0iLCJhcHBlbmRGYWN0b3J5IiwiZ2V0SXRlbVJhdyIsIm5ld1ZhbHVlIiwiY3JlYXRlRXhwaXJ5S2V5IiwiZW50cnkiLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsInJlbW92ZUFsbCIsImJzRGF0YVRhYmxlRGlzY292ZXJ5U2VydmljZSIsIkFkZCIsImRhdGF0YWJsZSIsIkRhdGFUYWJsZXMiLCJHZXRBbGwiLCJkdCIsImlzUmVhZE9ubHkiLCJkYXRhU291cmNlTmFtZSIsInJlY29yZHMiLCJHZXRCeURTTmFtZSIsImRzTmFtZSIsImFwcEFjdGlvbnMiLCJub3RpZnlMaXN0ZW5lcnMiLCJldmVudFR5cGUiLCJwYXlsb2FkIiwiZ2V0R3JpZFNldHRpbmdzIiwiZ3JpZElkIiwiX2RhdGFTb3VyY2VOYW1lIiwiX2lzUmVhZE9ubHkiLCJnZXRDc3MiLCJzZXRDc3MiLCJfdGhpcyIsImdldFByb3AiLCJjc3NDbGFzcyIsInNldFRleHQiLCJ0eHQiLCJwdXNoVG9BcnJheSIsImlzRW1wdHlPYmoiLCJCU0RhdGFUYWJsZUJhc2UiLCJjYyIsInNoQ2xvbmUiLCJpc1NlbGVjdGVkIiwicHJvcE5hbWUiLCJpc0tleSIsImRhdGFTb3VyY2UiLCJjb2xTcGFuIiwicm93U3BhbiIsInNlbGVjdG9yRGF0YUNCIiwic2VsZWN0b3JDb2xzIiwiTmFtZSIsIkRhdGFUeXBlIiwiUHJvcE5hbWUiLCJJc0tleSIsIkRhdGFTb3VyY2UiLCJDb2xTcGFuIiwiUm93U3BhbiIsIlNlbGVjdG9yRGF0YUNCIiwiU2VsZWN0b3JDb2xzIiwiaW5pdERhdGEiLCJpc1JlbW90ZSIsImdldFBhZ2VPZmZsaW5lIiwicGFnZSIsImdldFBhZ2VPZmZsaW5lQ0IiLCJjb250YWluZXJJZCIsImNvbERlZmluaXRpb24iLCJpc1JlYWRvbmx5IiwiZW5hYmxlSW5maW5pdGVTY3JvbGwiLCJjYWNoZVJlc3BvbnNlcyIsInBhZ2VJbmRleCIsInBhZ2VTaXplIiwidG90YWxSZWNvcmRzIiwidG90YWxQYWdlcyIsInBhZ2luZ01ldGFEYXRhIiwibmV4dFBhZ2VDYWxsYmFjayIsInJlY29yZElkIiwiaXNIZWFkZXIiLCJCU0RhdGFUYWJsZUNvbERlZmluaXRpb24iLCJyZW5kZXIiLCJzYyIsIkJTRGF0YVRhYmxlQ2VsbCIsIklucHV0VHlwZSIsImNoYW5nZSIsImFkZERvdWJsZUNsaWNrRXZlbnQiLCJCU0RhdGFUYWJsZUNoZWNrQm94IiwiQlNEYXRhVGFibGVJbnB1dCIsIm5vdGlmeVJlc3BvbnNlIiwiYWpheE9wdGlvbnMiLCJub2ZpZnlFcnJvciIsImVyckV2ZW50IiwiUmVjb3JkSWQiLCJsaXN0SWQiLCJwYWdlTGlzdCIsImNsZWFyIiwiZ3JpZEVsZW1lbnQiLCJodHRwQ2xpZW50Iiwic19hcmVhIiwib2JzZXJ2ZXIiLCJjdXJyZW50UGFnZSIsImluaXRNZXRhRGF0YSIsIm9ic2VydmVyQ0IiLCJzZW5kZXIiLCJpc0ludGVyc2VjdGluZyIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJzY3JvbGxBcmVhIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsInRyYWNrVmlzaWJpbGl0eSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwicm93cyIsImZpbmRTZWxlY3RvciIsImFkZERlbGV0ZUFjdGlvbiIsImJ0biIsImFkZE5ld1JlY29yZEFjdGlvbiIsImFkZEdyaWRTZXR0aW5nc0FjdGlvbiIsImlucHV0VHlwZSIsIkJTRGF0YVRhYmxlVGV4dElucHV0IiwiQlNEYXRhVGFibGVTZWxlY3QiLCJpY29uIiwiSWNvbiIsIkhhbmRsZXIiLCJhZGRDbGlja0hhbmRsZXIiLCJCU0RhdGFUYWJsZUJ1dHRvbiIsIm9uSXRlbVNlbGVjdGVkIiwiZ3JpZCIsImdldFNlbGVjdGVkUm93Iiwic2VsZWN0ZWRJbnB1dCIsImdldElucHV0cyIsInR4dEVsZW1lbnQiLCJzZWxlY3Rvck1vZGFsIiwiQ3NzQ2xhc3MiLCJFbGVtZW50SWQiLCJQbGFjZUhvbGRlciIsImJ0bkVsZW1lbnQiLCJCdG5DbGljayIsIndyYXBwZXIiLCJCU0RhdGFUYWJsZVNlbGVjdG9yIiwicGFyZW50Q29udGFpbmVySWQiLCJtb2RhbElkIiwibW9kYWxUaXRsZUlkIiwicmVuZGVyR3JpZCIsIm1vZGVsVGVtcGxhdGUiLCJjbGVhckdyaWQiLCJpbmZpbml0ZVNjcm9sbGVyIiwiZmV0Y2hHcmlkUGFnZSIsIkJTRGF0YVRhYmxlRGF0YVNvdXJjZSIsIm1ldGFEYXRhIiwidXJsQ2IiLCJicyIsIkJTRGF0YVRhYmxlT3B0aW9ucyIsImdyaWRDb2xzIiwiQlNEYXRhVGFibGUiLCJyZWdpc3RlckNhbGxiYWNrcyIsImdyaWRBY3Rpb25zIiwiY2VsbHMiLCJhZGRDZWxsIiwiY2VsbCIsImFkZENlbGxzIiwicGFyZW50Q2xvbmUiLCJvcHRDbG9uZSIsImlzVGVtcGxhdGVSb3ciLCJjbG9uZVJvdyIsIkJTRGF0YVRhYmxlUm93IiwiY2xvbmVDZWxsIiwiZm9jdXNSb3ciLCJpbnB1dHMiLCJjcmVhdGVJbnB1dEZvciIsImRzIiwiZ2lkIiwiQlNEYXRhVGFibGVTZWxlY3RPcHRpb24iLCJzV2luZG93IiwiQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvdyIsIkJ0bklkIiwicmVhZG9ubHkiLCJjcmVhdGVIZWFkZXJGb3IiLCJnZXRWaXNpYmxlSW5wdXRzIiwiZ2V0Um93RGF0YUV4dCIsInJvd0lucHV0cyIsInJlY29yZCIsInJvd0lucHV0IiwiY2VsbFByb3BOYW1lIiwibW9kZWxOYW1lIiwiZ2V0Um93SW5kZXgiLCJyb3dJbmRleCIsImdldFJvd0RhdGEiLCJyb3dDYXQiLCJyb3dDYXRlZ29yeSIsImlzUm93RGlydHkiLCJhZGRSb3ciLCJyb3ciLCJnZXROZXh0Um93SW5kZXgiLCJyVHlwZSIsImdyaWRIZWFkZXIiLCJnZXRWaXNpYmxlUm93cyIsImdldEdyaWRUaXRsZXNSb3ciLCJCU0RhdGFUYWJsZVJvd0NvbGxlY3Rpb24iLCJyb3dTaWJsaW5ncyIsImdldFRlbXBsYXRlUm93IiwiZ2V0RGlydHlSb3dzIiwiZ2V0RGlydHlSZWNvcmRzIiwiZGlydHlSb3dzIiwibWFya0RlbGV0ZWQiLCJsYXN0U2libGluZyIsInJlbW92ZVJvdyIsIkJTRGF0YVRhYmxlSGVhZGVyIiwiQlNEYXRhVGFibGVCb2R5IiwiQlNEYXRhVGFibGVTZWxlY3RvcldpbmRvd0NvbGxlY3Rpb24iLCJwYWdpbmF0b3IiLCJCU0RhdGFUYWJsZVBhZ2luYXRpb24iLCJCU0RhdGFUYWJsZVBhZ2luYXRpb25PcHRpb25zIiwiQlNEYXRhVGFibGVQYWdpbmdNZXRhRGF0YSIsInBhZ2luYXRvckNhbGxiYWNrIiwic2Vzc2lvbkNhY2hlIiwiU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIiwiQlNEYXRhVGFibGVIdHRwQ2xpZW50IiwiZGlzY292ZXJhYmxlIiwic2V0RGlzY292ZXJhYmxlIiwiYWRkSGVhZGVyIiwiYWRkQm9keSIsImdyaWRIZWFkZXJSb3ciLCJncmlkQm9keVJvdyIsImdyaWRDb2x1bW5zIiwiYXBwbHlDb2xTb3J0aW5nIiwibWgiLCJtYXJrZXIiLCJCU0RhdGFUYWJsZU1hcmtlciIsIm1iIiwiZ2MiLCJjb2xTZXR0aW5ncyIsImFkZFNvcnRpbmciLCJhcHBseUNvbFNldHRpbmdzIiwiYWRkQWN0aW9ucyIsImFkZEluZmluaXRlU2Nyb2xsIiwibWRhdGEiLCJmZXRjaERhdGFFdmVudCIsIk1ldGFEYXRhIiwiQlNEYXRhVGFibGVJbmZpbml0ZVNjcm9sbCIsIkJTRGF0YVRhYmxlQWN0aW9ucyIsImFkZEVtcHR5Um93IiwiYXNjIiwiQXNjIiwidGVtcGxhdGVSb3ciLCJzb3J0ZWRDb2xzIiwiYmluZERhdGFTb3VyY2UiLCJwYWdlZERhdGEiLCJsYXN0Um93IiwiYWRkTmV3Um93IiwiYmluZFBhZ2luYXRvciIsInBhZ2luYXRpb25Nb2RlbCIsInJvd0RhdGEiLCJpc0V4aXN0aW5nUmVjb3JkIiwicm93TnVtYmVyIiwib2xkSWQiLCJjZWxsVmFsIiwiZGF0ZSIsInRvRGF0ZURpc3BsYXlGb3JtYXQiLCJ0b29sdGlwIiwiZ3JpZFVwZGF0ZUV2ZW50IiwiR3JpZCIsInJvd1VwZGF0ZWRFdmVudCIsIlJvdyIsImZpZWxkVXBkYWVkRXZlbnQiLCJGaWVsZCIsInZpc2libGVJbnB1dHMiLCJvbklucHV0S2V5RG93biIsImRheSIsImdldERhdGUiLCJtb250aCIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJ0b1RpbWVEaXNwbGF5Rm9ybWF0IiwiaG91ciIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsInZpc2libGVSb3dzIiwiZW1wdHlSb3ciLCJjcmVhdGVFbXB0eVJvd0RhdGEiLCJvbkhlYWRlck5leHQiLCJmZXRjaEdyaWQiLCJyZXNldFNvcnRpbmciLCJCU0RhdGFUYWJsZUh0dHBDbGllbnRPcHRpb25zIiwiZmV0Y2hSZWNvcmRFdmVudCIsIm9uU2F2ZVJlY29yZCIsInZ4Iiwib25TYXZlRXJyb3IiLCJyZXNwb25zZUpTT04iLCJlcnJvcnMiLCJpbSIsImNsaWVudEluZGV4Iiwic2VydmVySW5kZXgiLCJlcnJvclJvdyIsImdldFJvd0J5SW5kZXgiLCJpbnB1dEVycm9yIiwiYWxsRXJyb3JzIiwiZXIiLCJzb3J0VGFibGUiLCJhc2NYIiwiZ2V0Q2VsbFZhbHVlIiwidjEiLCJ2MiIsImxvY2FsZUNvbXBhcmUiLCJjb25mRXZlbnQiLCJDdXJyZW50Q29sIiwiQWN0aW9uIiwiY29sUmVvcmRlckV2ZW50Iiwib25Tb3J0aW5nUmVxdWVzdCIsIiR0YXJnZXQiLCJ0aHgiLCJvbkNvbHNSZW9yZGVyZWQiLCJpbnAiLCJ2ZXJpZnlEU05hbWUiLCJvbkZldGNoRGF0YSIsIm1kIiwib25GZXRjaERhdGFFcnJvciIsIm9uR3JpZENvbmZpZ3VyYXRpb25DaGFuZ2VkIiwib25HcmlkRGF0YUJvdW5kIiwiY29uZmlndXJhYmxlR3JpZCIsIm1vZGFsRWxlbSIsImNvbHNMaXN0IiwiaGVhZGVyIiwiY29sc0xpc3RJdGVtIiwiY2hrIiwiY2hrSWQiLCJjaGtMYmwiLCIkY2hrIiwiaGVhZGVyUm93IiwiYm9keVJvd3MiLCJyZXNpemFibGVHcmlkIiwiY29scyIsInRhYmxlSGVpZ2h0IiwiY3JlYXRlRGl2Iiwic2V0TGlzdGVuZXJzIiwiY3VyQ29sIiwiY3VyQ29sV2lkdGgiLCJ0YWJsZVdpZHRoIiwiZ2V0U3R5bGVWYWwiLCJwYWRMZWZ0IiwicGFkUmlnaHQiLCJwYWRkaW5nRGlmZiIsImJvcmRlclJpZ2h0IiwiZGlmZlgiLCJjdXJzb3IiLCJ1c2VyU2VsZWN0IiwiZWxtIiwiZW5hYmxlQ29sdW1uUmVvcmRlcmluZyIsInNyY0VsZW1lbnQiLCJqcSIsInRoV3JhcCIsImNoaWxkcyIsImRyYWdzdGFydCIsImRyYWdsZWF2ZSIsImRyYWdlbnRlciIsImRyYWdvdmVyIiwiZHJhZ2VuZCIsImRyb3AiLCIkdGhpcyIsImRlc3RFbGVtZW50IiwiZGVzdFBhcmVudCIsImRlc1BhcmVudENlbGwiLCJ0b0luZGV4Iiwic3JjUGFyZW50Iiwic3JjUGFyZW50Q2VsbCIsInJlT3JkZXIiLCJkaXJlY3Rpb25zIiwibHRyIiwicnRsIiwic3dhcFJ0bCIsInN3YXBMdHIiLCJpYSIsImliIiwiY29sc09iaiIsImNvbEF0dHIiLCJCU0RhdGFUYWJsZUNvbFNldHRpbmdzIiwic2VjdXJlIiwiU2FtZVNpdGUiXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css":
/*!***********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css ***!
  \***********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_desc.png */ "./app-client/images/sort_desc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_asc.png */ "./app-client/images/sort_asc.png"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ../images/sort_both.png */ "./app-client/images/sort_both.png"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}", "",{"version":3,"sources":["webpack://./app-client/css/site.css"],"names":[],"mappings":"AAAA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,eAAe;EACjB;AACF;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA;EACE,gBAAgB;EAChB,qBAAqB;EACrB,UAAU;EACV,kBAAkB;EAClB,uBAAuB;EACvB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,oEAAyD;AAC3D;;AAEA;EACE,oEAAwD;AAC1D;;AAEA;EACE,yDAA8C;AAChD;;AAEA;EACE,eAAe;EACf,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;EAClB,mCAAmC;AACrC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE;;;;mBAIiB;EACjB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,UAAU;EACV,WAAW;AACb;;AAEA;EACE,WAAW;EACX,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;wBACsB;;EAEtB,cAAc;EACd,qBAAqB;EACrB,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,0CAA0C;EAC1C,cAAc;AAChB;;AAEA;EACE,2CAA2C;EAC3C,cAAc;AAChB;;AAEA;EACE,sDAAsD;EACtD,yBAAyB;AAC3B;;AAEA;EACE,eAAe;EACf,WAAW;EACX,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;AAClB;;;AAGA;EACE,4BAA4B;;AAE9B;;AAEA;;AAEA;;AAEA;;AAEA","sourcesContent":["html {\r\n  font-size: 14px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  html {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\nhtml {\r\n  position: relative;\r\n  min-height: 100%;\r\n}\r\n\r\nbody {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n\r\n.tooltip-error .tooltip-inner {\r\n  max-width: 200px;\r\n  padding: .25rem .5rem;\r\n  color: red;\r\n  text-align: center;\r\n  background-color: white;\r\n  border-radius: .25rem;\r\n  border: 1px solid red;\r\n}\r\n\r\n.tooltip-error .tooltip-arrow::before {\r\n  border-top-color: red;\r\n}\r\n\r\ntable.navTable.nowrap th, table.navTable.nowrap td {\r\n  white-space: nowrap;\r\n}\r\n\r\ntable.navTable thead .sorting_desc {\r\n  background-image: url(../images/sort_desc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting_asc {\r\n  background-image: url(../images/sort_asc.png) !important;\r\n}\r\n\r\ntable.navTable thead .sorting {\r\n  background-image: url(../images/sort_both.png);\r\n}\r\n\r\ntable.navTable thead .sorting, table.navTable thead .sorting_asc, table.navTable thead .sorting_desc, table.navTable thead .sorting_asc_disabled, table.navTable thead .sorting_desc_disabled {\r\n  cursor: pointer;\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n}\r\n\r\ntable.navTable thead th, table.navTable thead td {\r\n  padding: 10px 18px;\r\n  /* border-bottom: 1px solid #111; */\r\n}\r\n\r\ntable.navTable thead th, table.navTable tfoot th {\r\n  font-weight: bold;\r\n}\r\n\r\ntable.navTable th, table.navTable td {\r\n  box-sizing: content-box;\r\n}\r\n\r\ncaption, th {\r\n  text-align: left;\r\n}\r\n\r\ntable.navTable .form-control {\r\n  border: 0px;\r\n}\r\n\r\n.over {\r\n  border: 2px dashed #000;\r\n}\r\n\r\n.grid-header {\r\n  /* padding: 5px;\r\n    display: block;\r\n    border: 3px solid red;\r\n    height: 20px;\r\n    width: 120px; */\r\n  position: relative;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n#dummy-data-container {\r\n  max-height: 70%;\r\n  width: 65%;\r\n  margin:auto;\r\n}\r\n\r\n.grid-toolbar-action {\r\n  margin: 2px;\r\n  line-height: 20px;\r\n  width: 30px;\r\n}\r\n\r\n.grid-toolbar {\r\n  padding: 2px !important;\r\n}\r\n\r\n.booking-summary li {\r\n  padding: 0;\r\n}\r\n\r\n.booking-summary .card-footer {\r\n  padding-top: 0;\r\n}\r\n\r\ninput:hover, select:hover {\r\n  /* background: rgba(121, 169, 241, 0.534);\r\n    color: whitesmoke; */\r\n\r\n  color: #0d6efd;\r\n  border-color: #0d6efd;\r\n  border: 1px solid #0d6efd !important;\r\n}\r\n\r\n.sum-value {\r\n  text-align: right;\r\n}\r\n\r\n.actions-container {\r\n  margin: 5px 0px;\r\n}\r\n\r\n.table-hover>tbody>tr:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 7%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 17%);\r\n  color: #c1d7ec;\r\n}\r\n\r\n.table-active:hover {\r\n  --bs-table-accent-bg: rgb(13 110 253 / 27%) !important;\r\n  color: #c1d7ec !important;\r\n}\r\n\r\n.table-active .row-marker {\r\n  margin: 5px 0px;\r\n  color: blue;\r\n  vertical-align: middle;\r\n  float: right;\r\n  display: initial;\r\n}\r\n\r\n.row-marker {\r\n  display: none;\r\n}\r\n\r\n.table td {\r\n  padding: 2px 0px;\r\n}\r\n\r\n\r\n.bs-scroll {\r\n  max-height: 350px !important;\r\n\r\n}\r\n\r\n.bs-table{\r\n\r\n}\r\n\r\n.bs-pagination{\r\n\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./app-client/css/site.css":
/*!*********************************!*\
  !*** ./app-client/css/site.css ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./site.css */ "./node_modules/css-loader/dist/cjs.js!./app-client/css/site.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_site_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./app-client/dynamic-demo.ts":
/*!************************************!*\
  !*** ./app-client/dynamic-demo.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DynamicDemo": () => (/* binding */ DynamicDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var DynamicDemo = /** @class */ (function () {
    function DynamicDemo() {
    }
    DynamicDemo.run = function (containerId, initData) {
        console.log('running dynamic demo');
        var bookingLines = initData.data;
        var bookingLinesMetadata = initData.metaData;
        var cols = [];
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Line nbr", "number", "80px", "lineNbr", true));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Description", "text", "220px", "desc", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Quantity", "number", "80px", "qty", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Unit cost", "number", "120px", "cost", false));
        cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("Cost", "number", "120px", "extCost", false));
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('lines', {
            initData: bookingLines, metaData: bookingLinesMetadata
        }, true, function (page) { return 'http://localhost:3000/api/bookinglines?page=' + page; });
        var options = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("bookingLines", containerId, cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(options);
        grid.registerCallbacks();
        //
        // lets say we have to calculate ext cost using the unit cost and quantity
        // we can do this by registering a change event
        //
        grid.addHandler(bs_datatable__WEBPACK_IMPORTED_MODULE_0__.appDataEvents.ON_FIELD_UPDATED, function (sender, e) {
            var ev = e;
            if (!ev)
                return;
            var field = ev.EventData.Field;
            if (!field)
                return;
            var datatable = sender;
            var fieldName = field.modelName;
            var row = ev.EventData.Row;
            // console.log('on-field-update', fieldName, row);
            if (fieldName === 'quantity' || fieldName === 'unitCost') {
                row.extCost.val = row.quantity.val * row.unitCost.val;
                //calcSummary(sender);
            }
        });
        grid.render();
    };
    return DynamicDemo;
}());



/***/ }),

/***/ "./app-client/static-demo.ts":
/*!***********************************!*\
  !*** ./app-client/static-demo.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaticDemo": () => (/* binding */ StaticDemo)
/* harmony export */ });
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bs-datatable */ "./node_modules/bs-datatable/dist/bsdatatable.js");
/* harmony import */ var bs_datatable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bs_datatable__WEBPACK_IMPORTED_MODULE_0__);

var StaticDemo = /** @class */ (function () {
    function StaticDemo() {
    }
    StaticDemo.run = function () {
        // console.log('test is initialized');
        console.log('hello from index');
        //
        // sample using bootstrap data grid 
        //
        var cols = [];
        var initData = [];
        var totCols = 5, totRows = 60;
        for (var i = 0; i < totCols; i++) {
            cols.push(new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableColDefinition("COL-" + i, "text", "180px", "col-" + i, false));
        }
        for (var i = 0; i < totRows; i++) {
            var record = {};
            for (var j = 0; j < totCols; j++) {
                record['col-' + j] = 'DATA-' + i + '-' + j;
            }
            initData.push(record);
        }
        var dataSource = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableDataSource('fakeData', {
            initData: initData,
            metaData: new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTablePagingMetaData(1, 5, totRows)
        }, false, null, function (page, data, mdata) {
            var start = page <= 1 ? 0 : (page - 1) * mdata.pageSize;
            var end = start + mdata.pageSize;
            var maxIndex = data.length - 1;
            if (start > maxIndex || end > maxIndex)
                return [];
            var pageData = [];
            for (var index = start; index < end; index++) {
                var element = data[index];
                pageData.push(element);
            }
            return pageData;
        });
        var bs = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableOptions("fakeData_table", "dummy-data-container", cols, dataSource);
        var grid = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTable(bs);
        grid.registerCallbacks();
        grid.render();
        var name = new bs_datatable__WEBPACK_IMPORTED_MODULE_0__.BSDataTableTextInputExt({ InputType: "text", ElementId: "txtName", DataSourceName: "welcome" });
        name.val = "Welcome to TypeScript";
    };
    return StaticDemo;
}());



/***/ }),

/***/ "./app-client/images/sort_asc.png":
/*!****************************************!*\
  !*** ./app-client/images/sort_asc.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "4bba59196d7ce2619696.png";

/***/ }),

/***/ "./app-client/images/sort_both.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_both.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "8b117faa9d4dd934d6bb.png";

/***/ }),

/***/ "./app-client/images/sort_desc.png":
/*!*****************************************!*\
  !*** ./app-client/images/sort_desc.png ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "c4196d3286cc33244c83.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*****************************!*\
  !*** ./app-client/index.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BSDataTableDemos": () => (/* binding */ BSDataTableDemos)
/* harmony export */ });
/* harmony import */ var _css_site_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/site.css */ "./app-client/css/site.css");
/* harmony import */ var _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dynamic-demo */ "./app-client/dynamic-demo.ts");
/* harmony import */ var _static_demo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static-demo */ "./app-client/static-demo.ts");



var BSDataTableDemos = /** @class */ (function () {
    function BSDataTableDemos() {
    }
    BSDataTableDemos.runStaticDemo = function () {
        _static_demo__WEBPACK_IMPORTED_MODULE_2__.StaticDemo.run();
    };
    BSDataTableDemos.runDynamicDemo = function (containerId, initData) {
        _dynamic_demo__WEBPACK_IMPORTED_MODULE_1__.DynamicDemo.run(containerId, initData);
    };
    return BSDataTableDemos;
}());


})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,